
LwIP_FreeRTOS_ping_750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dfc  08013d2c  08013d2c  00023d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08016b28  08016b28  00026b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016b2c  08016b2c  00026b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  08016b30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000bde4  24000098  08016bc8  00030098  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400be7c  08016bc8  0003be7c  2**0
                  ALLOC
  8 .lwip_sec     00040200  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003108f  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006fe2  00000000  00000000  00061155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002098  00000000  00000000  00068138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f28  00000000  00000000  0006a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046848  00000000  00000000  0006c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003206c  00000000  00000000  000b2940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018240b  00000000  00000000  000e49ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00266db7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008eac  00000000  00000000  00266e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013d14 	.word	0x08013d14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08013d14 	.word	0x08013d14

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <vApplicationGetIdleTaskMemory+0x2c>)
 80003a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	4a06      	ldr	r2, [pc, #24]	; (80003c0 <vApplicationGetIdleTaskMemory+0x30>)
 80003a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	240000b4 	.word	0x240000b4
 80003c0:	24000168 	.word	0x24000168

080003c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c4:	b5b0      	push	{r4, r5, r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ca:	f000 f98b 	bl	80006e4 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <main+0x104>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d11b      	bne.n	8000412 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <main+0x104>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
}
 80003f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f4:	f3bf 8f6f 	isb	sy
}
 80003f8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003fa:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <main+0x104>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	4a32      	ldr	r2, [pc, #200]	; (80004c8 <main+0x104>)
 8000400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000404:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000406:	f3bf 8f4f 	dsb	sy
}
 800040a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800040c:	f3bf 8f6f 	isb	sy
}
 8000410:	e000      	b.n	8000414 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000412:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000414:	4b2c      	ldr	r3, [pc, #176]	; (80004c8 <main+0x104>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d138      	bne.n	8000492 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000420:	4b29      	ldr	r3, [pc, #164]	; (80004c8 <main+0x104>)
 8000422:	2200      	movs	r2, #0
 8000424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000428:	f3bf 8f4f 	dsb	sy
}
 800042c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800042e:	4b26      	ldr	r3, [pc, #152]	; (80004c8 <main+0x104>)
 8000430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000434:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000438:	0b5b      	lsrs	r3, r3, #13
 800043a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800043e:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000442:	08db      	lsrs	r3, r3, #3
 8000444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000448:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	015a      	lsls	r2, r3, #5
 800044e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000452:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000454:	69fa      	ldr	r2, [r7, #28]
 8000456:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000458:	491b      	ldr	r1, [pc, #108]	; (80004c8 <main+0x104>)
 800045a:	4313      	orrs	r3, r2
 800045c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	1e5a      	subs	r2, r3, #1
 8000464:	61fa      	str	r2, [r7, #28]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1ef      	bne.n	800044a <main+0x86>
    } while(sets-- != 0U);
 800046a:	6a3b      	ldr	r3, [r7, #32]
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	623a      	str	r2, [r7, #32]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d1e5      	bne.n	8000440 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000474:	f3bf 8f4f 	dsb	sy
}
 8000478:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <main+0x104>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <main+0x104>)
 8000480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000484:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000486:	f3bf 8f4f 	dsb	sy
}
 800048a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800048c:	f3bf 8f6f 	isb	sy
}
 8000490:	e000      	b.n	8000494 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000492:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 fd10 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f81c 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f000 f894 	bl	80005c8 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <main+0x108>)
 80004a2:	463c      	mov	r4, r7
 80004a4:	461d      	mov	r5, r3
 80004a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004b2:	463b      	mov	r3, r7
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f004 ffa2 	bl	8005400 <osThreadCreate>
 80004bc:	4603      	mov	r3, r0
 80004be:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <main+0x10c>)
 80004c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004c2:	f004 ff86 	bl	80053d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <main+0x102>
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	08013d38 	.word	0x08013d38
 80004d0:	24000368 	.word	0x24000368

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	; 0x70
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004de:	224c      	movs	r2, #76	; 0x4c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f012 fc4d 	bl	8012d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f012 fc47 	bl	8012d82 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004f4:	2002      	movs	r0, #2
 80004f6:	f002 fe2b 	bl	8003150 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <SystemClock_Config+0xec>)
 8000500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000502:	4a2f      	ldr	r2, [pc, #188]	; (80005c0 <SystemClock_Config+0xec>)
 8000504:	f023 0301 	bic.w	r3, r3, #1
 8000508:	62d3      	str	r3, [r2, #44]	; 0x2c
 800050a:	4b2d      	ldr	r3, [pc, #180]	; (80005c0 <SystemClock_Config+0xec>)
 800050c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <SystemClock_Config+0xf0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a2a      	ldr	r2, [pc, #168]	; (80005c4 <SystemClock_Config+0xf0>)
 800051a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <SystemClock_Config+0xf0>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800052c:	bf00      	nop
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <SystemClock_Config+0xf0>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800053a:	d1f8      	bne.n	800052e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053c:	2301      	movs	r3, #1
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	2302      	movs	r3, #2
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000552:	2340      	movs	r3, #64	; 0x40
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800055a:	2302      	movs	r3, #2
 800055c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800055e:	2302      	movs	r3, #2
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000562:	230c      	movs	r3, #12
 8000564:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000566:	2300      	movs	r3, #0
 8000568:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fe26 	bl	80031c4 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800057e:	f000 f8ff 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	233f      	movs	r3, #63	; 0x3f
 8000584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800058e:	2308      	movs	r3, #8
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000592:	2340      	movs	r3, #64	; 0x40
 8000594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005a0:	2340      	movs	r3, #64	; 0x40
 80005a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2102      	movs	r1, #2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fa39 	bl	8003a20 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80005b4:	f000 f8e4 	bl	8000780 <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3770      	adds	r7, #112	; 0x70
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	58000400 	.word	0x58000400
 80005c4:	58024800 	.word	0x58024800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005d4:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000602:	f003 0304 	and.w	r3, r3, #4
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_GPIO_Init+0x8c>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <MX_GPIO_Init+0x8c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0x8c>)
 800061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_GPIO_Init+0x8c>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <MX_GPIO_Init+0x8c>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_GPIO_Init+0x8c>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	58024400 	.word	0x58024400

08000658 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000660:	f004 f870 	bl	8004744 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  const char* message = "Hello UDP message!\n\r";
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <StartDefaultTask+0x84>)
 8000666:	617b      	str	r3, [r7, #20]

  osDelay(1000);
 8000668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066c:	f004 ff14 	bl	8005498 <osDelay>

  ip_addr_t PC_IPADDR;
  IP_ADDR4(&PC_IPADDR, 192, 168, 1, 1);
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <StartDefaultTask+0x88>)
 8000672:	60bb      	str	r3, [r7, #8]

  struct udp_pcb* my_udp = udp_new();
 8000674:	f00f fe00 	bl	8010278 <udp_new>
 8000678:	4603      	mov	r3, r0
 800067a:	613b      	str	r3, [r7, #16]
  udp_connect(my_udp, &PC_IPADDR, 55151);
 800067c:	f107 0308 	add.w	r3, r7, #8
 8000680:	f24d 726f 	movw	r2, #55151	; 0xd76f
 8000684:	4619      	mov	r1, r3
 8000686:	6938      	ldr	r0, [r7, #16]
 8000688:	f00f fd88 	bl	801019c <udp_connect>
  struct pbuf* udp_buffer = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;) {
    osDelay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f004 ff00 	bl	8005498 <osDelay>
    /* !! PBUF_RAM is critical for correct operation !! */
    udp_buffer = pbuf_alloc(PBUF_TRANSPORT, strlen(message), PBUF_RAM);
 8000698:	6978      	ldr	r0, [r7, #20]
 800069a:	f7ff fe21 	bl	80002e0 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80006a6:	4619      	mov	r1, r3
 80006a8:	2036      	movs	r0, #54	; 0x36
 80006aa:	f009 f8df 	bl	800986c <pbuf_alloc>
 80006ae:	60f8      	str	r0, [r7, #12]

    if (udp_buffer != NULL) {
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0ec      	beq.n	8000690 <StartDefaultTask+0x38>
      memcpy(udp_buffer->payload, message, strlen(message));
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	685c      	ldr	r4, [r3, #4]
 80006ba:	6978      	ldr	r0, [r7, #20]
 80006bc:	f7ff fe10 	bl	80002e0 <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	6979      	ldr	r1, [r7, #20]
 80006c6:	4620      	mov	r0, r4
 80006c8:	f012 fb4d 	bl	8012d66 <memcpy>
      udp_send(my_udp, udp_buffer);
 80006cc:	68f9      	ldr	r1, [r7, #12]
 80006ce:	6938      	ldr	r0, [r7, #16]
 80006d0:	f00f faf2 	bl	800fcb8 <udp_send>
      pbuf_free(udp_buffer);
 80006d4:	68f8      	ldr	r0, [r7, #12]
 80006d6:	f009 fbad 	bl	8009e34 <pbuf_free>
    osDelay(1000);
 80006da:	e7d9      	b.n	8000690 <StartDefaultTask+0x38>
 80006dc:	08013d54 	.word	0x08013d54
 80006e0:	0101a8c0 	.word	0x0101a8c0

080006e4 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006f6:	f000 fd3b 	bl	8001170 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006fa:	2301      	movs	r3, #1
 80006fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006fe:	2300      	movs	r3, #0
 8000700:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MPU_Config+0x74>)
 8000704:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000706:	230e      	movs	r3, #14
 8000708:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800070a:	2300      	movs	r3, #0
 800070c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800070e:	2301      	movs	r3, #1
 8000710:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000712:	2303      	movs	r3, #3
 8000714:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000716:	2301      	movs	r3, #1
 8000718:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fd59 	bl	80011e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800072e:	2301      	movs	r3, #1
 8000730:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000732:	2307      	movs	r3, #7
 8000734:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000736:	2300      	movs	r3, #0
 8000738:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800073a:	2301      	movs	r3, #1
 800073c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000742:	463b      	mov	r3, r7
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fd4b 	bl	80011e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800074a:	2004      	movs	r0, #4
 800074c:	f000 fd28 	bl	80011a0 <HAL_MPU_Enable>

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	30040000 	.word	0x30040000

0800075c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d101      	bne.n	8000772 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076e:	f000 fbdf 	bl	8000f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40014800 	.word	0x40014800

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <Error_Handler+0x8>
	...

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x38>)
 8000794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <HAL_MspInit+0x38>)
 800079a:	f043 0302 	orr.w	r3, r3, #2
 800079e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_MspInit+0x38>)
 80007a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a8:	f003 0302 	and.w	r3, r3, #2
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	210f      	movs	r1, #15
 80007b4:	f06f 0001 	mvn.w	r0, #1
 80007b8:	f000 fcb2 	bl	8001120 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	58024400 	.word	0x58024400

080007c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b0f      	cmp	r3, #15
 80007d4:	d844      	bhi.n	8000860 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0U);
 80007d6:	2200      	movs	r2, #0
 80007d8:	6879      	ldr	r1, [r7, #4]
 80007da:	2076      	movs	r0, #118	; 0x76
 80007dc:	f000 fca0 	bl	8001120 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80007e0:	2076      	movs	r0, #118	; 0x76
 80007e2:	f000 fcb7 	bl	8001154 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <HAL_InitTick+0xb0>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <HAL_InitTick+0xb4>)
 80007ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007f2:	4a22      	ldr	r2, [pc, #136]	; (800087c <HAL_InitTick+0xb4>)
 80007f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <HAL_InitTick+0xb4>)
 80007fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800080a:	f107 020c 	add.w	r2, r7, #12
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fc79 	bl	800410c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800081a:	f003 fc61 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 800081e:	4603      	mov	r3, r0
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <HAL_InitTick+0xb8>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	0c9b      	lsrs	r3, r3, #18
 800082e:	3b01      	subs	r3, #1
 8000830:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_InitTick+0xbc>)
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_InitTick+0xc0>)
 8000836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0xbc>)
 800083a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800083e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000840:	4a10      	ldr	r2, [pc, #64]	; (8000884 <HAL_InitTick+0xbc>)
 8000842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000844:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_InitTick+0xbc>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_InitTick+0xbc>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <HAL_InitTick+0xbc>)
 8000854:	f003 fc9c 	bl	8004190 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d107      	bne.n	800086e <HAL_InitTick+0xa6>
 800085e:	e001      	b.n	8000864 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e005      	b.n	8000870 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000864:	4807      	ldr	r0, [pc, #28]	; (8000884 <HAL_InitTick+0xbc>)
 8000866:	f003 fcf5 	bl	8004254 <HAL_TIM_Base_Start_IT>
 800086a:	4603      	mov	r3, r0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3738      	adds	r7, #56	; 0x38
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	24000008 	.word	0x24000008
 800087c:	58024400 	.word	0x58024400
 8000880:	431bde83 	.word	0x431bde83
 8000884:	2400036c 	.word	0x2400036c
 8000888:	40014800 	.word	0x40014800

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <ETH_IRQHandler+0x10>)
 80008be:	f001 f8f9 	bl	8001ab4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	24004da0 	.word	0x24004da0

080008cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <TIM17_IRQHandler+0x10>)
 80008d2:	f003 fd37 	bl	8004344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2400036c 	.word	0x2400036c

080008e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	return 1;
 80008e4:	2301      	movs	r3, #1
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_kill>:

int _kill(int pid, int sig)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <_kill+0x20>)
 80008fc:	2216      	movs	r2, #22
 80008fe:	601a      	str	r2, [r3, #0]
	return -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	2400be78 	.word	0x2400be78

08000914 <_exit>:

void _exit (int status)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800091c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ffe5 	bl	80008f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000926:	e7fe      	b.n	8000926 <_exit+0x12>

08000928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	e00a      	b.n	8000950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800093a:	f3af 8000 	nop.w
 800093e:	4601      	mov	r1, r0
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	b2ca      	uxtb	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697a      	ldr	r2, [r7, #20]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	429a      	cmp	r2, r3
 8000956:	dbf0      	blt.n	800093a <_read+0x12>
	}

return len;
 8000958:	687b      	ldr	r3, [r7, #4]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e009      	b.n	8000988 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	60ba      	str	r2, [r7, #8]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	3301      	adds	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	429a      	cmp	r2, r3
 800098e:	dbf1      	blt.n	8000974 <_write+0x12>
	}
	return len;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <_close>:

int _close(int file)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
	return -1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c2:	605a      	str	r2, [r3, #4]
	return 0;
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_isatty>:

int _isatty(int file)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	return 1;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d205      	bcs.n	8000a40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <_sbrk+0x6c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	371c      	adds	r7, #28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	24080000 	.word	0x24080000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	240003b8 	.word	0x240003b8
 8000a6c:	2400be80 	.word	0x2400be80
 8000a70:	2400be78 	.word	0x2400be78

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <SystemInit+0x104>)
 8000a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a80:	4a3d      	ldr	r2, [pc, #244]	; (8000b78 <SystemInit+0x104>)
 8000a82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <SystemInit+0x108>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d807      	bhi.n	8000aa6 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <SystemInit+0x108>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f023 030f 	bic.w	r3, r3, #15
 8000a9e:	4a37      	ldr	r2, [pc, #220]	; (8000b7c <SystemInit+0x108>)
 8000aa0:	f043 0307 	orr.w	r3, r3, #7
 8000aa4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <SystemInit+0x10c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a35      	ldr	r2, [pc, #212]	; (8000b80 <SystemInit+0x10c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab2:	4b33      	ldr	r3, [pc, #204]	; (8000b80 <SystemInit+0x10c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab8:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <SystemInit+0x10c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4930      	ldr	r1, [pc, #192]	; (8000b80 <SystemInit+0x10c>)
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <SystemInit+0x110>)
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <SystemInit+0x108>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d007      	beq.n	8000ae0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <SystemInit+0x108>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <SystemInit+0x108>)
 8000ada:	f043 0307 	orr.w	r3, r3, #7
 8000ade:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <SystemInit+0x10c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <SystemInit+0x10c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <SystemInit+0x10c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemInit+0x10c>)
 8000af4:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <SystemInit+0x114>)
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <SystemInit+0x10c>)
 8000afa:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <SystemInit+0x118>)
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <SystemInit+0x10c>)
 8000b00:	4a23      	ldr	r2, [pc, #140]	; (8000b90 <SystemInit+0x11c>)
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <SystemInit+0x10c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemInit+0x10c>)
 8000b0c:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <SystemInit+0x11c>)
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <SystemInit+0x10c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <SystemInit+0x10c>)
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <SystemInit+0x11c>)
 8000b1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <SystemInit+0x10c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <SystemInit+0x10c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <SystemInit+0x10c>)
 8000b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <SystemInit+0x10c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <SystemInit+0x120>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <SystemInit+0x124>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b40:	d202      	bcs.n	8000b48 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <SystemInit+0x128>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <SystemInit+0x10c>)
 8000b4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b4e:	4a0c      	ldr	r2, [pc, #48]	; (8000b80 <SystemInit+0x10c>)
 8000b50:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000b54:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <SystemInit+0x10c>)
 8000b5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000b5e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8000b60:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x12c>)
 8000b64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	52002000 	.word	0x52002000
 8000b80:	58024400 	.word	0x58024400
 8000b84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b88:	02020200 	.word	0x02020200
 8000b8c:	01ff0000 	.word	0x01ff0000
 8000b90:	01010280 	.word	0x01010280
 8000b94:	5c001000 	.word	0x5c001000
 8000b98:	ffff0000 	.word	0xffff0000
 8000b9c:	51008108 	.word	0x51008108
 8000ba0:	52004000 	.word	0x52004000

08000ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bdc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba8:	f7ff ff64 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bae:	490d      	ldr	r1, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	; (8000be8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f012 f891 	bl	8012cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd6:	f7ff fbf5 	bl	80003c4 <main>
  bx  lr
 8000bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000be4:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000be8:	08016b30 	.word	0x08016b30
  ldr r2, =_sbss
 8000bec:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000bf0:	2400be7c 	.word	0x2400be7c

08000bf4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC3_IRQHandler>

08000bf6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00b      	beq.n	8000c1e <LAN8742_RegisterBusIO+0x28>
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d007      	beq.n	8000c1e <LAN8742_RegisterBusIO+0x28>
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <LAN8742_RegisterBusIO+0x28>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c22:	e014      	b.n	8000c4e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d17c      	bne.n	8000d74 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e01c      	b.n	8000cce <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f107 0208 	add.w	r2, r7, #8
 8000c9c:	2112      	movs	r1, #18
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	4798      	blx	r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da03      	bge.n	8000cb0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000ca8:	f06f 0304 	mvn.w	r3, #4
 8000cac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000cae:	e00b      	b.n	8000cc8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d105      	bne.n	8000cc8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
         break;
 8000cc6:	e005      	b.n	8000cd4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b1f      	cmp	r3, #31
 8000cd2:	d9df      	bls.n	8000c94 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b1f      	cmp	r3, #31
 8000cda:	d902      	bls.n	8000ce2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000cdc:	f06f 0302 	mvn.w	r3, #2
 8000ce0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d145      	bne.n	8000d74 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	6810      	ldr	r0, [r2, #0]
 8000cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4798      	blx	r3
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db37      	blt.n	8000d6e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	6810      	ldr	r0, [r2, #0]
 8000d06:	f107 0208 	add.w	r2, r7, #8
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4798      	blx	r3
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db28      	blt.n	8000d66 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4798      	blx	r3
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d1e:	e01c      	b.n	8000d5a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4798      	blx	r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d32:	d80e      	bhi.n	8000d52 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6810      	ldr	r0, [r2, #0]
 8000d3c:	f107 0208 	add.w	r2, r7, #8
 8000d40:	2100      	movs	r1, #0
 8000d42:	4798      	blx	r3
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	da07      	bge.n	8000d5a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d4a:	f06f 0304 	mvn.w	r3, #4
 8000d4e:	613b      	str	r3, [r7, #16]
                 break;
 8000d50:	e010      	b.n	8000d74 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d52:	f06f 0301 	mvn.w	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
               break;
 8000d58:	e00c      	b.n	8000d74 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1dd      	bne.n	8000d20 <LAN8742_Init+0xc6>
 8000d64:	e006      	b.n	8000d74 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d66:	f06f 0304 	mvn.w	r3, #4
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	e002      	b.n	8000d74 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d6e:	f06f 0303 	mvn.w	r3, #3
 8000d72:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d112      	bne.n	8000da0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4798      	blx	r3
 8000d80:	4603      	mov	r3, r0
 8000d82:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d84:	bf00      	nop
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4798      	blx	r3
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d98:	d9f5      	bls.n	8000d86 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000da0:	693b      	ldr	r3, [r7, #16]
 }
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6810      	ldr	r0, [r2, #0]
 8000dbe:	f107 020c 	add.w	r2, r7, #12
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4798      	blx	r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	da02      	bge.n	8000dd2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dcc:	f06f 0304 	mvn.w	r3, #4
 8000dd0:	e06e      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6810      	ldr	r0, [r2, #0]
 8000dda:	f107 020c 	add.w	r2, r7, #12
 8000dde:	2101      	movs	r1, #1
 8000de0:	4798      	blx	r3
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da02      	bge.n	8000dee <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000de8:	f06f 0304 	mvn.w	r3, #4
 8000dec:	e060      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e059      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6810      	ldr	r0, [r2, #0]
 8000e04:	f107 020c 	add.w	r2, r7, #12
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4798      	blx	r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	da02      	bge.n	8000e18 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e12:	f06f 0304 	mvn.w	r3, #4
 8000e16:	e04b      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d11b      	bne.n	8000e5a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d006      	beq.n	8000e3a <LAN8742_GetLinkState+0x90>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e36:	2302      	movs	r3, #2
 8000e38:	e03a      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e033      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e52:	2304      	movs	r3, #4
 8000e54:	e02c      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e56:	2305      	movs	r3, #5
 8000e58:	e02a      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	6810      	ldr	r0, [r2, #0]
 8000e62:	f107 020c 	add.w	r2, r7, #12
 8000e66:	211f      	movs	r1, #31
 8000e68:	4798      	blx	r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da02      	bge.n	8000e76 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e70:	f06f 0304 	mvn.w	r3, #4
 8000e74:	e01c      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d101      	bne.n	8000e84 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e80:	2306      	movs	r3, #6
 8000e82:	e015      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 031c 	and.w	r3, r3, #28
 8000e8a:	2b18      	cmp	r3, #24
 8000e8c:	d101      	bne.n	8000e92 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e00e      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f003 031c 	and.w	r3, r3, #28
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d101      	bne.n	8000ea0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e007      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 031c 	and.w	r3, r3, #28
 8000ea6:	2b14      	cmp	r3, #20
 8000ea8:	d101      	bne.n	8000eae <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	e000      	b.n	8000eb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000eae:	2305      	movs	r3, #5
    }				
  }
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 f923 	bl	800110a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec4:	f002 ff62 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_Init+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <HAL_Init+0x6c>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_Init+0x68>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_Init+0x6c>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_Init+0x70>)
 8000efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_Init+0x74>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	200f      	movs	r0, #15
 8000f04:	f7ff fc60 	bl	80007c8 <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e002      	b.n	8000f18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fc3b 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	58024400 	.word	0x58024400
 8000f24:	08016898 	.word	0x08016898
 8000f28:	24000004 	.word	0x24000004
 8000f2c:	24000000 	.word	0x24000000

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	2400000c 	.word	0x2400000c
 8000f54:	240003bc 	.word	0x240003bc

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	240003bc 	.word	0x240003bc

08000f70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetREVID+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	0c1b      	lsrs	r3, r3, #16
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	5c001000 	.word	0x5c001000

08000f88 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	58000400 	.word	0x58000400

08000fb0 <__NVIC_SetPriorityGrouping>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00
 8000ff4:	05fa0000 	.word	0x05fa0000

08000ff8 <__NVIC_GetPriorityGrouping>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff4c 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112e:	f7ff ff63 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001132:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff ffb3 	bl	80010a4 <NVIC_EncodePriority>
 800113e:	4602      	mov	r2, r0
 8001140:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff82 	bl	8001050 <__NVIC_SetPriority>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff56 	bl	8001014 <__NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001174:	f3bf 8f5f 	dmb	sy
}
 8001178:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_MPU_Disable+0x28>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_MPU_Disable+0x28>)
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_MPU_Disable+0x2c>)
 8001188:	2200      	movs	r2, #0
 800118a:	605a      	str	r2, [r3, #4]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	e000ed90 	.word	0xe000ed90

080011a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <HAL_MPU_Enable+0x38>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_MPU_Enable+0x3c>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <HAL_MPU_Enable+0x3c>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011c4:	f3bf 8f6f 	isb	sy
}
 80011c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed90 	.word	0xe000ed90
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	785a      	ldrb	r2, [r3, #1]
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_MPU_ConfigRegion+0x84>)
 80011ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d029      	beq.n	800124c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80011f8:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_MPU_ConfigRegion+0x84>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7b1b      	ldrb	r3, [r3, #12]
 8001204:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7adb      	ldrb	r3, [r3, #11]
 800120a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800120c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7a9b      	ldrb	r3, [r3, #10]
 8001212:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001214:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7b5b      	ldrb	r3, [r3, #13]
 800121a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800121c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b9b      	ldrb	r3, [r3, #14]
 8001222:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001224:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7bdb      	ldrb	r3, [r3, #15]
 800122a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800122c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7a5b      	ldrb	r3, [r3, #9]
 8001232:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001234:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7a1b      	ldrb	r3, [r3, #8]
 800123a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800123c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001246:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001248:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800124a:	e005      	b.n	8001258 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_MPU_ConfigRegion+0x84>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_MPU_ConfigRegion+0x84>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed90 	.word	0xe000ed90

08001268 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0cf      	b.n	800141a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001280:	2b00      	cmp	r3, #0
 8001282:	d106      	bne.n	8001292 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2223      	movs	r2, #35	; 0x23
 8001288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f003 fe43 	bl	8004f18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <HAL_ETH_Init+0x1bc>)
 8001294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001298:	4a62      	ldr	r2, [pc, #392]	; (8001424 <HAL_ETH_Init+0x1bc>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <HAL_ETH_Init+0x1bc>)
 80012a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7a1b      	ldrb	r3, [r3, #8]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d103      	bne.n	80012c0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fe65 	bl	8000f88 <HAL_SYSCFG_ETHInterfaceSelect>
 80012be:	e003      	b.n	80012c8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80012c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80012c4:	f7ff fe60 	bl	8000f88 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80012c8:	4b57      	ldr	r3, [pc, #348]	; (8001428 <HAL_ETH_Init+0x1c0>)
 80012ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e4:	f7ff fe38 	bl	8000f58 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80012ea:	e011      	b.n	8001310 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012ec:	f7ff fe34 	bl	8000f58 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012fa:	d909      	bls.n	8001310 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2204      	movs	r2, #4
 8001300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	22e0      	movs	r2, #224	; 0xe0
 8001308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e084      	b.n	800141a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1e4      	bne.n	80012ec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 ff8a 	bl	800223c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001328:	f002 feaa 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 800132c:	4603      	mov	r3, r0
 800132e:	4a3f      	ldr	r2, [pc, #252]	; (800142c <HAL_ETH_Init+0x1c4>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	0c9a      	lsrs	r2, r3, #18
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3a01      	subs	r2, #1
 800133c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f001 f983 	bl	800264c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800134e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001352:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6812      	ldr	r2, [r2, #0]
 800135a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800135e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001362:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d009      	beq.n	8001386 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	22e0      	movs	r2, #224	; 0xe0
 800137e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e049      	b.n	800141a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_ETH_Init+0x1c8>)
 8001394:	4013      	ands	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6952      	ldr	r2, [r2, #20]
 800139a:	0051      	lsls	r1, r2, #1
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f001 f9eb 	bl	8002786 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f001 fa31 	bl	8002818 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	3305      	adds	r3, #5
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	021a      	lsls	r2, r3, #8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	3303      	adds	r3, #3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	061a      	lsls	r2, r3, #24
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	3302      	adds	r3, #2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	041b      	lsls	r3, r3, #16
 80013e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001402:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001404:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2210      	movs	r2, #16
 8001414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58024400 	.word	0x58024400
 8001428:	58000400 	.word	0x58000400
 800142c:	431bde83 	.word	0x431bde83
 8001430:	ffff8001 	.word	0xffff8001

08001434 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001442:	2b10      	cmp	r3, #16
 8001444:	d153      	bne.n	80014ee <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2223      	movs	r2, #35	; 0x23
 800144a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2204      	movs	r2, #4
 8001452:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 fa64 	bl	8001922 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f042 0202 	orr.w	r2, r2, #2
 8001468:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 0201 	orr.w	r2, r2, #1
 8001478:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80014da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014de:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2223      	movs	r2, #35	; 0x23
 80014e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
  }
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001506:	2b10      	cmp	r3, #16
 8001508:	d179      	bne.n	80015fe <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2223      	movs	r2, #35	; 0x23
 800150e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b38      	ldr	r3, [pc, #224]	; (8001608 <HAL_ETH_Start_IT+0x110>)
 8001526:	430b      	orrs	r3, r1
 8001528:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_ETH_Start_IT+0x114>)
 800153a:	430b      	orrs	r3, r1
 800153c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f9eb 	bl	8001922 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0202 	orr.w	r2, r2, #2
 800155a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001588:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001598:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 80015cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015dc:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 80015e8:	430b      	orrs	r3, r1
 80015ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2223      	movs	r2, #35	; 0x23
 80015f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
  }
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0c020060 	.word	0x0c020060
 800160c:	0c20c000 	.word	0x0c20c000

08001610 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800161e:	2b23      	cmp	r3, #35	; 0x23
 8001620:	d165      	bne.n	80016ee <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2223      	movs	r2, #35	; 0x23
 8001626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <HAL_ETH_Stop_IT+0xec>)
 800163c:	400b      	ands	r3, r1
 800163e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001642:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800165e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800167a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0202 	bic.w	r2, r2, #2
 80016b0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	e00e      	b.n	80016d6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	3212      	adds	r2, #18
 80016be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c2:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d9ed      	bls.n	80016b8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2210      	movs	r2, #16
 80016e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
  }
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	ffff2f3e 	.word	0xffff2f3e

08001700 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e03a      	b.n	800179a <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800172a:	2b23      	cmp	r3, #35	; 0x23
 800172c:	d134      	bne.n	8001798 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001736:	2201      	movs	r2, #1
 8001738:	6839      	ldr	r1, [r7, #0]
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f001 f8ca 	bl	80028d4 <ETH_Prepare_Tx_Descriptors>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d009      	beq.n	800175a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174c:	f043 0202 	orr.w	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e01f      	b.n	800179a <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800175a:	f3bf 8f4f 	dsb	sy
}
 800175e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	2b03      	cmp	r3, #3
 8001770:	d904      	bls.n	800177c <HAL_ETH_Transmit_IT+0x7c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	1f1a      	subs	r2, r3, #4
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3106      	adds	r1, #6
 8001788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800178c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001790:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
  }
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b088      	sub	sp, #32
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0a5      	b.n	800191a <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017d4:	2b23      	cmp	r3, #35	; 0x23
 80017d6:	d001      	beq.n	80017dc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e09e      	b.n	800191a <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	3212      	adds	r2, #18
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017f2:	f1c3 0304 	rsb	r3, r3, #4
 80017f6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017f8:	e067      	b.n	80018ca <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d007      	beq.n	8001816 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <HAL_ETH_ReadData+0x88>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d03d      	beq.n	80018a6 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001880:	461a      	mov	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	b29b      	uxth	r3, r3
 8001886:	f003 fd07 	bl	8005298 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	441a      	add	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d902      	bls.n	80018b8 <HAL_ETH_ReadData+0x116>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b04      	subs	r3, #4
 80018b6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	3212      	adds	r2, #18
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3301      	adds	r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db06      	blt.n	80018e0 <HAL_ETH_ReadData+0x13e>
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d202      	bcs.n	80018e0 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d08c      	beq.n	80017fa <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	441a      	add	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f814 	bl	8001922 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b088      	sub	sp, #32
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800192e:	2301      	movs	r3, #1
 8001930:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001936:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	3212      	adds	r2, #18
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001948:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800194a:	e03b      	b.n	80019c4 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d112      	bne.n	800197a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fc6d 	bl	8005238 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	74fb      	strb	r3, [r7, #19]
 8001968:	e007      	b.n	800197a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	461a      	mov	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	461a      	mov	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 800197a:	7cfb      	ldrb	r3, [r7, #19]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d021      	beq.n	80019c4 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001980:	f3bf 8f5f 	dmb	sy
}
 8001984:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	e003      	b.n	80019a0 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800199e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d902      	bls.n	80019b2 <ETH_UpdateDescriptor+0x90>
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	3b04      	subs	r3, #4
 80019b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	3212      	adds	r2, #18
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <ETH_UpdateDescriptor+0xae>
 80019ca:	7cfb      	ldrb	r3, [r7, #19]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1bd      	bne.n	800194c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d00d      	beq.n	80019f6 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e2:	461a      	mov	r2, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69fa      	ldr	r2, [r7, #28]
 80019ee:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019f6:	bf00      	nop
 80019f8:	3720      	adds	r7, #32
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3318      	adds	r3, #24
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a1c:	e03f      	b.n	8001a9e <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d106      	bne.n	8001a46 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d028      	beq.n	8001a9e <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68d9      	ldr	r1, [r3, #12]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db1b      	blt.n	8001a9a <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	3304      	adds	r3, #4
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fc7a 	bl	8005368 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a98:	e001      	b.n	8001a9e <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_ETH_ReleaseTxPacket+0xac>
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1b9      	bne.n	8001a1e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	2b40      	cmp	r3, #64	; 0x40
 8001ace:	d115      	bne.n	8001afc <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae0:	2b40      	cmp	r3, #64	; 0x40
 8001ae2:	d10b      	bne.n	8001afc <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aec:	461a      	mov	r2, r3
 8001aee:	f248 0340 	movw	r3, #32832	; 0x8040
 8001af2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f002 ff74 	bl	80049e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b04:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d115      	bne.n	8001b3c <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10b      	bne.n	8001b3c <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f248 0301 	movw	r3, #32769	; 0x8001
 8001b32:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f002 ff64 	bl	8004a04 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b44:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b50:	d153      	bne.n	8001bfa <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b66:	d148      	bne.n	8001bfa <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	f043 0208 	orr.w	r2, r3, #8
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8c:	d11e      	bne.n	8001bcc <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001b9a:	f241 1302 	movw	r3, #4354	; 0x1102
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bbe:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	22e0      	movs	r2, #224	; 0xe0
 8001bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001bca:	e013      	b.n	8001bf4 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001bd8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	461a      	mov	r2, r3
 8001bec:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001bf0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f002 ff15 	bl	8004a24 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001c02:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d019      	beq.n	8001c4c <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	f043 0210 	orr.w	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	22e0      	movs	r2, #224	; 0xe0
 8001c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f002 fef0 	bl	8004a24 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d10f      	bne.n	8001c7c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c64:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f830 	bl	8001cd4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d10f      	bne.n	8001cac <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c94:	f003 020f 	and.w	r2, r3, #15
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f822 	bl	8001ce8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_ETH_IRQHandler+0x21c>)
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d006      	beq.n	8001cc6 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_ETH_IRQHandler+0x21c>)
 8001cba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 f81b 	bl	8001cfc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	58000080 	.word	0x58000080

08001cd4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e03e      	b.n	8001db0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d3a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	055b      	lsls	r3, r3, #21
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	4313      	orrs	r3, r2
 8001d56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f043 030c 	orr.w	r3, r3, #12
 8001d5e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001d72:	f7ff f8f1 	bl	8000f58 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d78:	e009      	b.n	8001d8e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001d7a:	f7ff f8ed 	bl	8000f58 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d88:	d901      	bls.n	8001d8e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e010      	b.n	8001db0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ed      	bne.n	8001d7a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e03c      	b.n	8001e54 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001de2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	055b      	lsls	r3, r3, #21
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	041b      	lsls	r3, r3, #16
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f023 030c 	bic.w	r3, r3, #12
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ETH_WritePHYRegister+0xa4>)
 8001e1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_ETH_WritePHYRegister+0xa4>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001e26:	f7ff f897 	bl	8000f58 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e2c:	e009      	b.n	8001e42 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e2e:	f7ff f893 	bl	8000f58 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e3c:	d901      	bls.n	8001e42 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e008      	b.n	8001e54 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ed      	bne.n	8001e2e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40028000 	.word	0x40028000

08001e60 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e1c3      	b.n	80021fc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 020c 	and.w	r2, r3, #12
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bf14      	ite	ne
 8001ed6:	2301      	movne	r3, #1
 8001ed8:	2300      	moveq	r3, #0
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf14      	ite	ne
 8001f5a:	2301      	movne	r3, #1
 8001f5c:	2300      	moveq	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf0c      	ite	eq
 8001f74:	2301      	moveq	r3, #1
 8001f76:	2300      	movne	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	2300      	movne	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001fee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	bf14      	ite	ne
 8001ff6:	2301      	movne	r3, #1
 8001ff8:	2300      	moveq	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002084:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	0e5b      	lsrs	r3, r3, #25
 80020be:	f003 021f 	and.w	r2, r3, #31
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	b29a      	uxth	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf14      	ite	ne
 8002172:	2301      	movne	r3, #1
 8002174:	2300      	moveq	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002188:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002198:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e00b      	b.n	8002234 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002222:	2b10      	cmp	r3, #16
 8002224:	d105      	bne.n	8002232 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f86d 	bl	8002308 <ETH_SetMACConfig>

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800224c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002254:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002256:	f001 ff13 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 800225a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d908      	bls.n	8002276 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d804      	bhi.n	8002276 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	e027      	b.n	80022c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4a18      	ldr	r2, [pc, #96]	; (80022dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d908      	bls.n	8002290 <HAL_ETH_SetMDIOClockRange+0x54>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d204      	bcs.n	8002290 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e01a      	b.n	80022c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d303      	bcc.n	80022a0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d911      	bls.n	80022c4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d908      	bls.n	80022ba <HAL_ETH_SetMDIOClockRange+0x7e>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4a0f      	ldr	r2, [pc, #60]	; (80022e8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d804      	bhi.n	80022ba <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e005      	b.n	80022c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e000      	b.n	80022c6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80022c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	01312cff 	.word	0x01312cff
 80022dc:	02160ebf 	.word	0x02160ebf
 80022e0:	03938700 	.word	0x03938700
 80022e4:	05f5e0ff 	.word	0x05f5e0ff
 80022e8:	08f0d17f 	.word	0x08f0d17f

080022ec <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800231a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002322:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7b1b      	ldrb	r3, [r3, #12]
 8002328:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800232a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	7b5b      	ldrb	r3, [r3, #13]
 8002330:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	7b9b      	ldrb	r3, [r3, #14]
 8002338:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800233a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	7bdb      	ldrb	r3, [r3, #15]
 8002340:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002342:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	7c12      	ldrb	r2, [r2, #16]
 8002348:	2a00      	cmp	r2, #0
 800234a:	d102      	bne.n	8002352 <ETH_SetMACConfig+0x4a>
 800234c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002350:	e000      	b.n	8002354 <ETH_SetMACConfig+0x4c>
 8002352:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002354:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	7c52      	ldrb	r2, [r2, #17]
 800235a:	2a00      	cmp	r2, #0
 800235c:	d102      	bne.n	8002364 <ETH_SetMACConfig+0x5c>
 800235e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002362:	e000      	b.n	8002366 <ETH_SetMACConfig+0x5e>
 8002364:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002366:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	7c9b      	ldrb	r3, [r3, #18]
 800236c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800236e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002374:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800237a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	7f1b      	ldrb	r3, [r3, #28]
 8002380:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002382:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	7f5b      	ldrb	r3, [r3, #29]
 8002388:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800238a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	7f92      	ldrb	r2, [r2, #30]
 8002390:	2a00      	cmp	r2, #0
 8002392:	d102      	bne.n	800239a <ETH_SetMACConfig+0x92>
 8002394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002398:	e000      	b.n	800239c <ETH_SetMACConfig+0x94>
 800239a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800239c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	7fdb      	ldrb	r3, [r3, #31]
 80023a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80023a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80023ac:	2a00      	cmp	r2, #0
 80023ae:	d102      	bne.n	80023b6 <ETH_SetMACConfig+0xae>
 80023b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b4:	e000      	b.n	80023b8 <ETH_SetMACConfig+0xb0>
 80023b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80023b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80023be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80023c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80023c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b56      	ldr	r3, [pc, #344]	; (8002534 <ETH_SetMACConfig+0x22c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	430b      	orrs	r3, r1
 80023e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002406:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002408:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002410:	2a00      	cmp	r2, #0
 8002412:	d102      	bne.n	800241a <ETH_SetMACConfig+0x112>
 8002414:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002418:	e000      	b.n	800241c <ETH_SetMACConfig+0x114>
 800241a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800241c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <ETH_SetMACConfig+0x230>)
 800242e:	4013      	ands	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	68f9      	ldr	r1, [r7, #12]
 8002436:	430b      	orrs	r3, r1
 8002438:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002440:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4b3a      	ldr	r3, [pc, #232]	; (800253c <ETH_SetMACConfig+0x234>)
 8002452:	4013      	ands	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	430b      	orrs	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002464:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800246a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002472:	2a00      	cmp	r2, #0
 8002474:	d101      	bne.n	800247a <ETH_SetMACConfig+0x172>
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	e000      	b.n	800247c <ETH_SetMACConfig+0x174>
 800247a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800247c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002482:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800248e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	68f9      	ldr	r1, [r7, #12]
 800249a:	430b      	orrs	r3, r1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80024a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80024ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f023 0103 	bic.w	r1, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80024d2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80024ee:	2a00      	cmp	r2, #0
 80024f0:	d101      	bne.n	80024f6 <ETH_SetMACConfig+0x1ee>
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	e000      	b.n	80024f8 <ETH_SetMACConfig+0x1f0>
 80024f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80024f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002500:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002502:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800250a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002518:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	430a      	orrs	r2, r1
 8002524:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	00048083 	.word	0x00048083
 8002538:	c0f88000 	.word	0xc0f88000
 800253c:	fffffef0 	.word	0xfffffef0

08002540 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <ETH_SetDMAConfig+0xf8>)
 8002556:	4013      	ands	r3, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6811      	ldr	r1, [r2, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002566:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	791b      	ldrb	r3, [r3, #4]
 800256c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002572:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	7b1b      	ldrb	r3, [r3, #12]
 8002578:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <ETH_SetDMAConfig+0xfc>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	430b      	orrs	r3, r1
 8002594:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002598:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	7b5b      	ldrb	r3, [r3, #13]
 800259e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <ETH_SetDMAConfig+0x100>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	430b      	orrs	r3, r1
 80025c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	7d1b      	ldrb	r3, [r3, #20]
 80025d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80025d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	7f5b      	ldrb	r3, [r3, #29]
 80025d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <ETH_SetDMAConfig+0x104>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	68f9      	ldr	r1, [r7, #12]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	7f1b      	ldrb	r3, [r3, #28]
 8002602:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002614:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002618:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <ETH_SetDMAConfig+0x108>)
 800261a:	4013      	ands	r3, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	430b      	orrs	r3, r1
 8002624:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002628:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	ffff87fd 	.word	0xffff87fd
 800263c:	ffff2ffe 	.word	0xffff2ffe
 8002640:	fffec000 	.word	0xfffec000
 8002644:	ffc0efef 	.word	0xffc0efef
 8002648:	7fc0ffff 	.word	0x7fc0ffff

0800264c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0a4      	sub	sp, #144	; 0x90
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800265a:	2300      	movs	r3, #0
 800265c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002694:	2300      	movs	r3, #0
 8002696:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80026a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80026a8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80026b0:	2300      	movs	r3, #0
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80026c6:	2300      	movs	r3, #0
 80026c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80026ce:	2300      	movs	r3, #0
 80026d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80026e4:	2320      	movs	r3, #32
 80026e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80026f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002700:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002708:	2302      	movs	r3, #2
 800270a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800271a:	2300      	movs	r3, #0
 800271c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002726:	2300      	movs	r3, #0
 8002728:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fde6 	bl	8002308 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800273c:	2301      	movs	r3, #1
 800273e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002740:	2301      	movs	r3, #1
 8002742:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002756:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800275a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002760:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002764:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800276c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002772:	f107 0308 	add.w	r3, r7, #8
 8002776:	4619      	mov	r1, r3
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff fee1 	bl	8002540 <ETH_SetDMAConfig>
}
 800277e:	bf00      	nop
 8002780:	3790      	adds	r7, #144	; 0x90
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e01d      	b.n	80027d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68d9      	ldr	r1, [r3, #12]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	3206      	adds	r2, #6
 80027c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d9de      	bls.n	8002794 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e4:	461a      	mov	r2, r3
 80027e6:	2303      	movs	r3, #3
 80027e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002808:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e023      	b.n	800286e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6919      	ldr	r1, [r3, #16]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	3212      	adds	r2, #18
 8002864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3301      	adds	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d9d8      	bls.n	8002826 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289a:	461a      	mov	r2, r3
 800289c:	2303      	movs	r3, #3
 800289e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b08d      	sub	sp, #52	; 0x34
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3318      	adds	r3, #24
 80028e4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002916:	d007      	beq.n	8002928 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	3304      	adds	r3, #4
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002928:	2302      	movs	r3, #2
 800292a:	e259      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d044      	beq.n	80029c2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	4b75      	ldr	r3, [pc, #468]	; (8002b14 <ETH_Prepare_Tx_Descriptors+0x240>)
 800293e:	4013      	ands	r3, r2
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002944:	431a      	orrs	r2, r3
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002964:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d027      	beq.n	80029c2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	b29a      	uxth	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	431a      	orrs	r2, r3
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029b0:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	689a      	ldr	r2, [r3, #8]
 80029d2:	4b51      	ldr	r3, [pc, #324]	; (8002b18 <ETH_Prepare_Tx_Descriptors+0x244>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	6992      	ldr	r2, [r2, #24]
 80029da:	431a      	orrs	r2, r3
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d036      	beq.n	8002a72 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a10:	f3bf 8f5f 	dmb	sy
}
 8002a14:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	3301      	adds	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d902      	bls.n	8002a34 <ETH_Prepare_Tx_Descriptors+0x160>
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	3b04      	subs	r3, #4
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a50:	d10f      	bne.n	8002a72 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a5c:	f3bf 8f5f 	dmb	sy
}
 8002a60:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e1b6      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	3301      	adds	r3, #1
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	6852      	ldr	r2, [r2, #4]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d012      	beq.n	8002ac2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	6852      	ldr	r2, [r2, #4]
 8002ab8:	0412      	lsls	r2, r2, #16
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e008      	b.n	8002ad4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d021      	beq.n	8002b24 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	04db      	lsls	r3, r3, #19
 8002aee:	431a      	orrs	r2, r3
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	69d2      	ldr	r2, [r2, #28]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	e02e      	b.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002b14:	ffff0000 	.word	0xffff0000
 8002b18:	ffffc000 	.word	0xffffc000
 8002b1c:	c000ffff 	.word	0xc000ffff
 8002b20:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	6852      	ldr	r2, [r2, #4]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ba8:	f3bf 8f5f 	dmb	sy
}
 8002bac:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80da 	beq.w	8002d7c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002bda:	e0cf      	b.n	8002d7c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	3301      	adds	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d902      	bls.n	8002bfa <ETH_Prepare_Tx_Descriptors+0x326>
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	3b04      	subs	r3, #4
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c02:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c1c:	d007      	beq.n	8002c2e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c22:	3304      	adds	r3, #4
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d029      	beq.n	8002c82 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3a:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c40:	e019      	b.n	8002c76 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c42:	f3bf 8f5f 	dmb	sy
}
 8002c46:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	3301      	adds	r3, #1
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d902      	bls.n	8002c66 <ETH_Prepare_Tx_Descriptors+0x392>
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	3b04      	subs	r3, #4
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6e:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	3301      	adds	r3, #1
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3e1      	bcc.n	8002c42 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e0ae      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	3301      	adds	r3, #1
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	6852      	ldr	r2, [r2, #4]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d012      	beq.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	69fa      	ldr	r2, [r7, #28]
 8002ccc:	6852      	ldr	r2, [r2, #4]
 8002cce:	0412      	lsls	r2, r2, #16
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	e008      	b.n	8002cea <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	6a3a      	ldr	r2, [r7, #32]
 8002ce8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d018      	beq.n	8002d28 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	69d2      	ldr	r2, [r2, #28]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e020      	b.n	8002d58 <ETH_Prepare_Tx_Descriptors+0x484>
 8002d16:	bf00      	nop
 8002d18:	ffff8000 	.word	0xffff8000
 8002d1c:	ffffc000 	.word	0xffffc000
 8002d20:	c000ffff 	.word	0xc000ffff
 8002d24:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x518>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	6852      	ldr	r2, [r2, #4]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d5e:	f3bf 8f5f 	dmb	sy
}
 8002d62:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af2b 	bne.w	8002bdc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e005      	b.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dba:	3304      	adds	r3, #4
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002dda:	b662      	cpsie	i
}
 8002ddc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	ffff8000 	.word	0xffff8000

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <HAL_GPIO_Init+0x234>)
 8002e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e02:	e194      	b.n	800312e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8186 	beq.w	8003128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d005      	beq.n	8002e34 <HAL_GPIO_Init+0x44>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d130      	bne.n	8002e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0201 	and.w	r2, r3, #1
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d017      	beq.n	8002ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d123      	bne.n	8002f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80e0 	beq.w	8003128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <HAL_GPIO_Init+0x238>)
 8002f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	; (8003028 <HAL_GPIO_Init+0x238>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f78:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <HAL_GPIO_Init+0x238>)
 8002f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_GPIO_Init+0x23c>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a20      	ldr	r2, [pc, #128]	; (8003030 <HAL_GPIO_Init+0x240>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d052      	beq.n	8003058 <HAL_GPIO_Init+0x268>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <HAL_GPIO_Init+0x244>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_GPIO_Init+0x22e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <HAL_GPIO_Init+0x248>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x22a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_GPIO_Init+0x24c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x226>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_GPIO_Init+0x250>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x222>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <HAL_GPIO_Init+0x254>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x21e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	; (8003048 <HAL_GPIO_Init+0x258>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x21a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_GPIO_Init+0x25c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x216>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_GPIO_Init+0x260>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <HAL_GPIO_Init+0x264>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x20e>
 8002ffa:	2309      	movs	r3, #9
 8002ffc:	e02d      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8002ffe:	230a      	movs	r3, #10
 8003000:	e02b      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003002:	2308      	movs	r3, #8
 8003004:	e029      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003006:	2307      	movs	r3, #7
 8003008:	e027      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800300a:	2306      	movs	r3, #6
 800300c:	e025      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800300e:	2305      	movs	r3, #5
 8003010:	e023      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003012:	2304      	movs	r3, #4
 8003014:	e021      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003016:	2303      	movs	r3, #3
 8003018:	e01f      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800301a:	2302      	movs	r3, #2
 800301c:	e01d      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800301e:	2301      	movs	r3, #1
 8003020:	e01b      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003022:	bf00      	nop
 8003024:	58000080 	.word	0x58000080
 8003028:	58024400 	.word	0x58024400
 800302c:	58000400 	.word	0x58000400
 8003030:	58020000 	.word	0x58020000
 8003034:	58020400 	.word	0x58020400
 8003038:	58020800 	.word	0x58020800
 800303c:	58020c00 	.word	0x58020c00
 8003040:	58021000 	.word	0x58021000
 8003044:	58021400 	.word	0x58021400
 8003048:	58021800 	.word	0x58021800
 800304c:	58021c00 	.word	0x58021c00
 8003050:	58022000 	.word	0x58022000
 8003054:	58022400 	.word	0x58022400
 8003058:	2300      	movs	r3, #0
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306a:	4938      	ldr	r1, [pc, #224]	; (800314c <HAL_GPIO_Init+0x35c>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800309e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f ae63 	bne.w	8002e04 <HAL_GPIO_Init+0x14>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	3724      	adds	r7, #36	; 0x24
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58000400 	.word	0x58000400

08003150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_PWREx_ConfigSupply+0x70>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d00a      	beq.n	800317a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003164:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d001      	beq.n	8003176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e01f      	b.n	80031b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e01d      	b.n	80031b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800317a:	4b11      	ldr	r3, [pc, #68]	; (80031c0 <HAL_PWREx_ConfigSupply+0x70>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f023 0207 	bic.w	r2, r3, #7
 8003182:	490f      	ldr	r1, [pc, #60]	; (80031c0 <HAL_PWREx_ConfigSupply+0x70>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4313      	orrs	r3, r2
 8003188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800318a:	f7fd fee5 	bl	8000f58 <HAL_GetTick>
 800318e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003190:	e009      	b.n	80031a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003192:	f7fd fee1 	bl	8000f58 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a0:	d901      	bls.n	80031a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e007      	b.n	80031b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_PWREx_ConfigSupply+0x70>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	d1ee      	bne.n	8003192 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	58024800 	.word	0x58024800

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f000 bc1d 	b.w	8003a12 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 8087 	beq.w	80032f4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e6:	4b99      	ldr	r3, [pc, #612]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031f0:	4b96      	ldr	r3, [pc, #600]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d007      	beq.n	800320c <HAL_RCC_OscConfig+0x48>
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	2b18      	cmp	r3, #24
 8003200:	d110      	bne.n	8003224 <HAL_RCC_OscConfig+0x60>
 8003202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d10b      	bne.n	8003224 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	4b8f      	ldr	r3, [pc, #572]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d06c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x12e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d168      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e3f6      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x78>
 800322e:	4b87      	ldr	r3, [pc, #540]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a86      	ldr	r2, [pc, #536]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e02e      	b.n	800329a <HAL_RCC_OscConfig+0xd6>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10c      	bne.n	800325e <HAL_RCC_OscConfig+0x9a>
 8003244:	4b81      	ldr	r3, [pc, #516]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a80      	ldr	r2, [pc, #512]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b7e      	ldr	r3, [pc, #504]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7d      	ldr	r2, [pc, #500]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e01d      	b.n	800329a <HAL_RCC_OscConfig+0xd6>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0xbe>
 8003268:	4b78      	ldr	r3, [pc, #480]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a77      	ldr	r2, [pc, #476]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800326e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b75      	ldr	r3, [pc, #468]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a74      	ldr	r2, [pc, #464]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e00b      	b.n	800329a <HAL_RCC_OscConfig+0xd6>
 8003282:	4b72      	ldr	r3, [pc, #456]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a71      	ldr	r2, [pc, #452]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6f      	ldr	r3, [pc, #444]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6e      	ldr	r2, [pc, #440]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d013      	beq.n	80032ca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fd fe59 	bl	8000f58 <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032aa:	f7fd fe55 	bl	8000f58 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e3aa      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032bc:	4b63      	ldr	r3, [pc, #396]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0xe6>
 80032c8:	e014      	b.n	80032f4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fd fe45 	bl	8000f58 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d2:	f7fd fe41 	bl	8000f58 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e396      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x10e>
 80032f0:	e000      	b.n	80032f4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80cb 	beq.w	8003498 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003302:	4b52      	ldr	r3, [pc, #328]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800330c:	4b4f      	ldr	r3, [pc, #316]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_RCC_OscConfig+0x164>
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b18      	cmp	r3, #24
 800331c:	d156      	bne.n	80033cc <HAL_RCC_OscConfig+0x208>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d151      	bne.n	80033cc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003328:	4b48      	ldr	r3, [pc, #288]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_OscConfig+0x17c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e368      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003340:	4b42      	ldr	r3, [pc, #264]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f023 0219 	bic.w	r2, r3, #25
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	493f      	ldr	r1, [pc, #252]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800334e:	4313      	orrs	r3, r2
 8003350:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003352:	f7fd fe01 	bl	8000f58 <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335a:	f7fd fdfd 	bl	8000f58 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e352      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800336c:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003378:	f7fd fdfa 	bl	8000f70 <HAL_GetREVID>
 800337c:	4603      	mov	r3, r0
 800337e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003382:	4293      	cmp	r3, r2
 8003384:	d817      	bhi.n	80033b6 <HAL_RCC_OscConfig+0x1f2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d108      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1dc>
 800338e:	4b2f      	ldr	r3, [pc, #188]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339e:	e07b      	b.n	8003498 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b2a      	ldr	r3, [pc, #168]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	031b      	lsls	r3, r3, #12
 80033ae:	4927      	ldr	r1, [pc, #156]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033b4:	e070      	b.n	8003498 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	061b      	lsls	r3, r3, #24
 80033c4:	4921      	ldr	r1, [pc, #132]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033ca:	e065      	b.n	8003498 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d048      	beq.n	8003466 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033d4:	4b1d      	ldr	r3, [pc, #116]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f023 0219 	bic.w	r2, r3, #25
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	491a      	ldr	r1, [pc, #104]	; (800344c <HAL_RCC_OscConfig+0x288>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fd fdb7 	bl	8000f58 <HAL_GetTick>
 80033ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ee:	f7fd fdb3 	bl	8000f58 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e308      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340c:	f7fd fdb0 	bl	8000f70 <HAL_GetREVID>
 8003410:	4603      	mov	r3, r0
 8003412:	f241 0203 	movw	r2, #4099	; 0x1003
 8003416:	4293      	cmp	r3, r2
 8003418:	d81a      	bhi.n	8003450 <HAL_RCC_OscConfig+0x28c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d108      	bne.n	8003434 <HAL_RCC_OscConfig+0x270>
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800342a:	4a08      	ldr	r2, [pc, #32]	; (800344c <HAL_RCC_OscConfig+0x288>)
 800342c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003430:	6053      	str	r3, [r2, #4]
 8003432:	e031      	b.n	8003498 <HAL_RCC_OscConfig+0x2d4>
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	031b      	lsls	r3, r3, #12
 8003442:	4902      	ldr	r1, [pc, #8]	; (800344c <HAL_RCC_OscConfig+0x288>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
 8003448:	e026      	b.n	8003498 <HAL_RCC_OscConfig+0x2d4>
 800344a:	bf00      	nop
 800344c:	58024400 	.word	0x58024400
 8003450:	4b9a      	ldr	r3, [pc, #616]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	4997      	ldr	r1, [pc, #604]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]
 8003464:	e018      	b.n	8003498 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003466:	4b95      	ldr	r3, [pc, #596]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a94      	ldr	r2, [pc, #592]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800346c:	f023 0301 	bic.w	r3, r3, #1
 8003470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fd fd71 	bl	8000f58 <HAL_GetTick>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347a:	f7fd fd6d 	bl	8000f58 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e2c2      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800348c:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a9 	beq.w	80035f8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a6:	4b85      	ldr	r3, [pc, #532]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034b0:	4b82      	ldr	r3, [pc, #520]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d007      	beq.n	80034cc <HAL_RCC_OscConfig+0x308>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	2b18      	cmp	r3, #24
 80034c0:	d13a      	bne.n	8003538 <HAL_RCC_OscConfig+0x374>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d135      	bne.n	8003538 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034cc:	4b7b      	ldr	r3, [pc, #492]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_OscConfig+0x320>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e296      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034e4:	f7fd fd44 	bl	8000f70 <HAL_GetREVID>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d817      	bhi.n	8003522 <HAL_RCC_OscConfig+0x35e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d108      	bne.n	800350c <HAL_RCC_OscConfig+0x348>
 80034fa:	4b70      	ldr	r3, [pc, #448]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003502:	4a6e      	ldr	r2, [pc, #440]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003508:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800350a:	e075      	b.n	80035f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800350c:	4b6b      	ldr	r3, [pc, #428]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	069b      	lsls	r3, r3, #26
 800351a:	4968      	ldr	r1, [pc, #416]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003520:	e06a      	b.n	80035f8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003522:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	061b      	lsls	r3, r3, #24
 8003530:	4962      	ldr	r1, [pc, #392]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003532:	4313      	orrs	r3, r2
 8003534:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003536:	e05f      	b.n	80035f8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d042      	beq.n	80035c6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003540:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5d      	ldr	r2, [pc, #372]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fd04 	bl	8000f58 <HAL_GetTick>
 8003550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003554:	f7fd fd00 	bl	8000f58 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e255      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003566:	4b55      	ldr	r3, [pc, #340]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003572:	f7fd fcfd 	bl	8000f70 <HAL_GetREVID>
 8003576:	4603      	mov	r3, r0
 8003578:	f241 0203 	movw	r2, #4099	; 0x1003
 800357c:	4293      	cmp	r3, r2
 800357e:	d817      	bhi.n	80035b0 <HAL_RCC_OscConfig+0x3ec>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	2b20      	cmp	r3, #32
 8003586:	d108      	bne.n	800359a <HAL_RCC_OscConfig+0x3d6>
 8003588:	4b4c      	ldr	r3, [pc, #304]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003590:	4a4a      	ldr	r2, [pc, #296]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003596:	6053      	str	r3, [r2, #4]
 8003598:	e02e      	b.n	80035f8 <HAL_RCC_OscConfig+0x434>
 800359a:	4b48      	ldr	r3, [pc, #288]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	069b      	lsls	r3, r3, #26
 80035a8:	4944      	ldr	r1, [pc, #272]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
 80035ae:	e023      	b.n	80035f8 <HAL_RCC_OscConfig+0x434>
 80035b0:	4b42      	ldr	r3, [pc, #264]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	493f      	ldr	r1, [pc, #252]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60cb      	str	r3, [r1, #12]
 80035c4:	e018      	b.n	80035f8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a3c      	ldr	r2, [pc, #240]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80035cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fd fcc1 	bl	8000f58 <HAL_GetTick>
 80035d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80035da:	f7fd fcbd 	bl	8000f58 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e212      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035ec:	4b33      	ldr	r3, [pc, #204]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d036      	beq.n	8003672 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d019      	beq.n	8003640 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800360e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003610:	4a2a      	ldr	r2, [pc, #168]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003618:	f7fd fc9e 	bl	8000f58 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003620:	f7fd fc9a 	bl	8000f58 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1ef      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x45c>
 800363e:	e018      	b.n	8003672 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003640:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364c:	f7fd fc84 	bl	8000f58 <HAL_GetTick>
 8003650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003654:	f7fd fc80 	bl	8000f58 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e1d5      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	d039      	beq.n	80036f2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 800368c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003690:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003692:	f7fd fc61 	bl	8000f58 <HAL_GetTick>
 8003696:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800369a:	f7fd fc5d 	bl	8000f58 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1b2      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_RCC_OscConfig+0x4f8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x4d6>
 80036b8:	e01b      	b.n	80036f2 <HAL_RCC_OscConfig+0x52e>
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c0:	4b9b      	ldr	r3, [pc, #620]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a9a      	ldr	r2, [pc, #616]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80036c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80036cc:	f7fd fc44 	bl	8000f58 <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80036d4:	f7fd fc40 	bl	8000f58 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e195      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036e6:	4b92      	ldr	r3, [pc, #584]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8081 	beq.w	8003802 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003700:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCC_OscConfig+0x770>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a8b      	ldr	r2, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x770>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800370c:	f7fd fc24 	bl	8000f58 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fd fc20 	bl	8000f58 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e175      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003726:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCC_OscConfig+0x770>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d106      	bne.n	8003748 <HAL_RCC_OscConfig+0x584>
 800373a:	4b7d      	ldr	r3, [pc, #500]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	e02d      	b.n	80037a4 <HAL_RCC_OscConfig+0x5e0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10c      	bne.n	800376a <HAL_RCC_OscConfig+0x5a6>
 8003750:	4b77      	ldr	r3, [pc, #476]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	4a76      	ldr	r2, [pc, #472]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003756:	f023 0301 	bic.w	r3, r3, #1
 800375a:	6713      	str	r3, [r2, #112]	; 0x70
 800375c:	4b74      	ldr	r3, [pc, #464]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a73      	ldr	r2, [pc, #460]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003762:	f023 0304 	bic.w	r3, r3, #4
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x5e0>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b05      	cmp	r3, #5
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0x5c8>
 8003772:	4b6f      	ldr	r3, [pc, #444]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a6e      	ldr	r2, [pc, #440]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003778:	f043 0304 	orr.w	r3, r3, #4
 800377c:	6713      	str	r3, [r2, #112]	; 0x70
 800377e:	4b6c      	ldr	r3, [pc, #432]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	4a6b      	ldr	r2, [pc, #428]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6713      	str	r3, [r2, #112]	; 0x70
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0x5e0>
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a67      	ldr	r2, [pc, #412]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003792:	f023 0301 	bic.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	4b65      	ldr	r3, [pc, #404]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	4a64      	ldr	r2, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d015      	beq.n	80037d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fd fbd4 	bl	8000f58 <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fd fbd0 	bl	8000f58 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e123      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ca:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <HAL_RCC_OscConfig+0x5f0>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd fbbe 	bl	8000f58 <HAL_GetTick>
 80037dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fd fbba 	bl	8000f58 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e10d      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037f6:	4b4e      	ldr	r3, [pc, #312]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ee      	bne.n	80037e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8102 	beq.w	8003a10 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800380c:	4b48      	ldr	r3, [pc, #288]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003814:	2b18      	cmp	r3, #24
 8003816:	f000 80bd 	beq.w	8003994 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b02      	cmp	r3, #2
 8003820:	f040 809e 	bne.w	8003960 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a41      	ldr	r2, [pc, #260]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd fb92 	bl	8000f58 <HAL_GetTick>
 8003834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fd fb8e 	bl	8000f58 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e0e3      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800384a:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003856:	4b36      	ldr	r3, [pc, #216]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_OscConfig+0x774>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	430a      	orrs	r2, r1
 800386a:	4931      	ldr	r1, [pc, #196]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	628b      	str	r3, [r1, #40]	; 0x28
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	3b01      	subs	r3, #1
 8003876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800387e:	3b01      	subs	r3, #1
 8003880:	025b      	lsls	r3, r3, #9
 8003882:	b29b      	uxth	r3, r3
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	3b01      	subs	r3, #1
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003898:	3b01      	subs	r3, #1
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038a0:	4923      	ldr	r1, [pc, #140]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80038a6:	4b22      	ldr	r3, [pc, #136]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b6:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x778>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	491b      	ldr	r1, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	f023 020c 	bic.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4917      	ldr	r1, [pc, #92]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f023 0202 	bic.w	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	4912      	ldr	r1, [pc, #72]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	4a10      	ldr	r2, [pc, #64]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	4a0d      	ldr	r2, [pc, #52]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800390c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800390e:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a04      	ldr	r2, [pc, #16]	; (8003930 <HAL_RCC_OscConfig+0x76c>)
 8003920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fb17 	bl	8000f58 <HAL_GetTick>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800392c:	e011      	b.n	8003952 <HAL_RCC_OscConfig+0x78e>
 800392e:	bf00      	nop
 8003930:	58024400 	.word	0x58024400
 8003934:	58024800 	.word	0x58024800
 8003938:	fffffc0c 	.word	0xfffffc0c
 800393c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003940:	f7fd fb0a 	bl	8000f58 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e05f      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003952:	4b32      	ldr	r3, [pc, #200]	; (8003a1c <HAL_RCC_OscConfig+0x858>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x77c>
 800395e:	e057      	b.n	8003a10 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003960:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <HAL_RCC_OscConfig+0x858>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <HAL_RCC_OscConfig+0x858>)
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd faf4 	bl	8000f58 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003974:	f7fd faf0 	bl	8000f58 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e045      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003986:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCC_OscConfig+0x858>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x7b0>
 8003992:	e03d      	b.n	8003a10 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_RCC_OscConfig+0x858>)
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_RCC_OscConfig+0x858>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d031      	beq.n	8003a0c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0203 	and.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d12a      	bne.n	8003a0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d122      	bne.n	8003a0c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d11a      	bne.n	8003a0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d108      	bne.n	8003a0c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3730      	adds	r7, #48	; 0x30
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	58024400 	.word	0x58024400

08003a20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e19c      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b8a      	ldr	r3, [pc, #552]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d910      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b87      	ldr	r3, [pc, #540]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 020f 	bic.w	r2, r3, #15
 8003a4a:	4985      	ldr	r1, [pc, #532]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b83      	ldr	r3, [pc, #524]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e184      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	4b7b      	ldr	r3, [pc, #492]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d908      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a80:	4b78      	ldr	r3, [pc, #480]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	4975      	ldr	r1, [pc, #468]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	4b70      	ldr	r3, [pc, #448]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d908      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aae:	4b6d      	ldr	r3, [pc, #436]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	496a      	ldr	r1, [pc, #424]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	4b64      	ldr	r3, [pc, #400]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d908      	bls.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003adc:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	495e      	ldr	r1, [pc, #376]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d908      	bls.n	8003b1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b0a:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4953      	ldr	r1, [pc, #332]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d010      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d908      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f023 020f 	bic.w	r2, r3, #15
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4947      	ldr	r1, [pc, #284]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d055      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b56:	4b43      	ldr	r3, [pc, #268]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	4940      	ldr	r1, [pc, #256]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b70:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d121      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0f6      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d107      	bne.n	8003b98 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d115      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0ea      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d109      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0de      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bb0:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0d6      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc0:	4b28      	ldr	r3, [pc, #160]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f023 0207 	bic.w	r2, r3, #7
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4925      	ldr	r1, [pc, #148]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd2:	f7fd f9c1 	bl	8000f58 <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd8:	e00a      	b.n	8003bf0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bda:	f7fd f9bd 	bl	8000f58 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e0be      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d1eb      	bne.n	8003bda <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d010      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d208      	bcs.n	8003c30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f023 020f 	bic.w	r2, r3, #15
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	490e      	ldr	r1, [pc, #56]	; (8003c64 <HAL_RCC_ClockConfig+0x244>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d214      	bcs.n	8003c68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	4906      	ldr	r1, [pc, #24]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_RCC_ClockConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e086      	b.n	8003d6e <HAL_RCC_ClockConfig+0x34e>
 8003c60:	52002000 	.word	0x52002000
 8003c64:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d208      	bcs.n	8003c96 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c84:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	4939      	ldr	r1, [pc, #228]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d208      	bcs.n	8003cc4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	492e      	ldr	r1, [pc, #184]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d208      	bcs.n	8003cf2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ce0:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	4922      	ldr	r1, [pc, #136]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d010      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d208      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d0e:	4b1a      	ldr	r3, [pc, #104]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4917      	ldr	r1, [pc, #92]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d20:	f000 f834 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	4912      	ldr	r1, [pc, #72]	; (8003d7c <HAL_RCC_ClockConfig+0x35c>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_RCC_ClockConfig+0x358>)
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	4a0d      	ldr	r2, [pc, #52]	; (8003d7c <HAL_RCC_ClockConfig+0x35c>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_RCC_ClockConfig+0x360>)
 8003d56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d58:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x364>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x368>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fd30 	bl	80007c8 <HAL_InitTick>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	08016898 	.word	0x08016898
 8003d80:	24000004 	.word	0x24000004
 8003d84:	24000000 	.word	0x24000000
 8003d88:	24000008 	.word	0x24000008

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	; 0x24
 8003d90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d92:	4bb3      	ldr	r3, [pc, #716]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d9a:	2b18      	cmp	r3, #24
 8003d9c:	f200 8155 	bhi.w	800404a <HAL_RCC_GetSysClockFreq+0x2be>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003e0d 	.word	0x08003e0d
 8003dac:	0800404b 	.word	0x0800404b
 8003db0:	0800404b 	.word	0x0800404b
 8003db4:	0800404b 	.word	0x0800404b
 8003db8:	0800404b 	.word	0x0800404b
 8003dbc:	0800404b 	.word	0x0800404b
 8003dc0:	0800404b 	.word	0x0800404b
 8003dc4:	0800404b 	.word	0x0800404b
 8003dc8:	08003e33 	.word	0x08003e33
 8003dcc:	0800404b 	.word	0x0800404b
 8003dd0:	0800404b 	.word	0x0800404b
 8003dd4:	0800404b 	.word	0x0800404b
 8003dd8:	0800404b 	.word	0x0800404b
 8003ddc:	0800404b 	.word	0x0800404b
 8003de0:	0800404b 	.word	0x0800404b
 8003de4:	0800404b 	.word	0x0800404b
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	0800404b 	.word	0x0800404b
 8003df0:	0800404b 	.word	0x0800404b
 8003df4:	0800404b 	.word	0x0800404b
 8003df8:	0800404b 	.word	0x0800404b
 8003dfc:	0800404b 	.word	0x0800404b
 8003e00:	0800404b 	.word	0x0800404b
 8003e04:	0800404b 	.word	0x0800404b
 8003e08:	08003e3f 	.word	0x08003e3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e0c:	4b94      	ldr	r3, [pc, #592]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e18:	4b91      	ldr	r3, [pc, #580]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	4a90      	ldr	r2, [pc, #576]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
 8003e28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003e2a:	e111      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e2c:	4b8d      	ldr	r3, [pc, #564]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e2e:	61bb      	str	r3, [r7, #24]
    break;
 8003e30:	e10e      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003e32:	4b8d      	ldr	r3, [pc, #564]	; (8004068 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e34:	61bb      	str	r3, [r7, #24]
    break;
 8003e36:	e10b      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003e38:	4b8c      	ldr	r3, [pc, #560]	; (800406c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e3a:	61bb      	str	r3, [r7, #24]
    break;
 8003e3c:	e108      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e3e:	4b88      	ldr	r3, [pc, #544]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003e48:	4b85      	ldr	r3, [pc, #532]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e54:	4b82      	ldr	r3, [pc, #520]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003e5e:	4b80      	ldr	r3, [pc, #512]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e62:	08db      	lsrs	r3, r3, #3
 8003e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	ee07 3a90 	vmov	s15, r3
 8003e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80e1 	beq.w	8004044 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	f000 8083 	beq.w	8003f90 <HAL_RCC_GetSysClockFreq+0x204>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	f200 80a1 	bhi.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x114>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d056      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003e9e:	e099      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ea0:	4b6f      	ldr	r3, [pc, #444]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d02d      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003eac:	4b6c      	ldr	r3, [pc, #432]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	08db      	lsrs	r3, r3, #3
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	4a6b      	ldr	r2, [pc, #428]	; (8004064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	ee07 3a90 	vmov	s15, r3
 8003ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	ee07 3a90 	vmov	s15, r3
 8003ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003eea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003f06:	e087      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004074 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b51      	ldr	r3, [pc, #324]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	e065      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004078 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b40      	ldr	r3, [pc, #256]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f8e:	e043      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800407c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa2:	4b2f      	ldr	r3, [pc, #188]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fd2:	e021      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004078 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ffa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004016:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	0a5b      	lsrs	r3, r3, #9
 800401e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004022:	3301      	adds	r3, #1
 8004024:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004030:	edd7 6a07 	vldr	s13, [r7, #28]
 8004034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800403c:	ee17 3a90 	vmov	r3, s15
 8004040:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004042:	e005      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004044:	2300      	movs	r3, #0
 8004046:	61bb      	str	r3, [r7, #24]
    break;
 8004048:	e002      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800404c:	61bb      	str	r3, [r7, #24]
    break;
 800404e:	bf00      	nop
  }

  return sysclockfreq;
 8004050:	69bb      	ldr	r3, [r7, #24]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	58024400 	.word	0x58024400
 8004064:	03d09000 	.word	0x03d09000
 8004068:	003d0900 	.word	0x003d0900
 800406c:	017d7840 	.word	0x017d7840
 8004070:	46000000 	.word	0x46000000
 8004074:	4c742400 	.word	0x4c742400
 8004078:	4a742400 	.word	0x4a742400
 800407c:	4bbebc20 	.word	0x4bbebc20

08004080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004086:	f7ff fe81 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 800408a:	4602      	mov	r2, r0
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	490f      	ldr	r1, [pc, #60]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	f003 031f 	and.w	r3, r3, #31
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80040ae:	5cd3      	ldrb	r3, [r2, r3]
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80040bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040be:	4a07      	ldr	r2, [pc, #28]	; (80040dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	58024400 	.word	0x58024400
 80040d4:	08016898 	.word	0x08016898
 80040d8:	24000004 	.word	0x24000004
 80040dc:	24000000 	.word	0x24000000

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80040e4:	f7ff ffcc 	bl	8004080 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4904      	ldr	r1, [pc, #16]	; (8004108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004100:	4618      	mov	r0, r3
 8004102:	bd80      	pop	{r7, pc}
 8004104:	58024400 	.word	0x58024400
 8004108:	08016898 	.word	0x08016898

0800410c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	223f      	movs	r2, #63	; 0x3f
 800411a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	f003 0207 	and.w	r2, r3, #7
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 020f 	and.w	r2, r3, #15
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_RCC_GetClockConfig+0x7c>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004170:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_GetClockConfig+0x80>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	601a      	str	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	58024400 	.word	0x58024400
 800418c:	52002000 	.word	0x52002000

08004190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e049      	b.n	8004236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f841 	bl	800423e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f000 fa00 	bl	80045d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	d001      	beq.n	800426c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e054      	b.n	8004316 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a26      	ldr	r2, [pc, #152]	; (8004324 <HAL_TIM_Base_Start_IT+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d022      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d01d      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a22      	ldr	r2, [pc, #136]	; (8004328 <HAL_TIM_Base_Start_IT+0xd4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d018      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a21      	ldr	r2, [pc, #132]	; (800432c <HAL_TIM_Base_Start_IT+0xd8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1f      	ldr	r2, [pc, #124]	; (8004330 <HAL_TIM_Base_Start_IT+0xdc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00e      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1e      	ldr	r2, [pc, #120]	; (8004334 <HAL_TIM_Base_Start_IT+0xe0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <HAL_TIM_Base_Start_IT+0xe4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_TIM_Base_Start_IT+0x80>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1b      	ldr	r2, [pc, #108]	; (800433c <HAL_TIM_Base_Start_IT+0xe8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d115      	bne.n	8004300 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_TIM_Base_Start_IT+0xec>)
 80042dc:	4013      	ands	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d015      	beq.n	8004312 <HAL_TIM_Base_Start_IT+0xbe>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d011      	beq.n	8004312 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	e008      	b.n	8004312 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e000      	b.n	8004314 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004312:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40010400 	.word	0x40010400
 8004338:	40001800 	.word	0x40001800
 800433c:	40014000 	.word	0x40014000
 8004340:	00010007 	.word	0x00010007

08004344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b02      	cmp	r3, #2
 8004358:	d122      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b02      	cmp	r3, #2
 8004366:	d11b      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0202 	mvn.w	r2, #2
 8004370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f905 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8f7 	bl	8004582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f908 	bl	80045aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0204 	mvn.w	r2, #4
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8db 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f8cd 	bl	8004582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f8de 	bl	80045aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b08      	cmp	r3, #8
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0208 	mvn.w	r2, #8
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2204      	movs	r2, #4
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8b1 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8a3 	bl	8004582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8b4 	bl	80045aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0210 	mvn.w	r2, #16
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2208      	movs	r2, #8
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f887 	bl	8004596 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f879 	bl	8004582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f88a 	bl	80045aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d10e      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0201 	mvn.w	r2, #1
 80044c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc f94a 	bl	800075c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d2:	2b80      	cmp	r3, #128	; 0x80
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f914 	bl	800471c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004502:	d10e      	bne.n	8004522 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b80      	cmp	r3, #128	; 0x80
 8004510:	d107      	bne.n	8004522 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f907 	bl	8004730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d10e      	bne.n	800454e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d107      	bne.n	800454e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f838 	bl	80045be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b20      	cmp	r3, #32
 800455a:	d10e      	bne.n	800457a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b20      	cmp	r3, #32
 8004568:	d107      	bne.n	800457a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f06f 0220 	mvn.w	r2, #32
 8004572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f8c7 	bl	8004708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d00f      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a3d      	ldr	r2, [pc, #244]	; (80046ec <TIM_Base_SetConfig+0x118>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a3c      	ldr	r2, [pc, #240]	; (80046f0 <TIM_Base_SetConfig+0x11c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a3b      	ldr	r2, [pc, #236]	; (80046f4 <TIM_Base_SetConfig+0x120>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a3a      	ldr	r2, [pc, #232]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d108      	bne.n	8004626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a2f      	ldr	r2, [pc, #188]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01f      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d01b      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <TIM_Base_SetConfig+0x118>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d017      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2b      	ldr	r2, [pc, #172]	; (80046f0 <TIM_Base_SetConfig+0x11c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <TIM_Base_SetConfig+0x120>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00f      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a29      	ldr	r2, [pc, #164]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a28      	ldr	r2, [pc, #160]	; (80046fc <TIM_Base_SetConfig+0x128>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <TIM_Base_SetConfig+0x12c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0x9a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <TIM_Base_SetConfig+0x130>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <TIM_Base_SetConfig+0x114>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00f      	beq.n	80046cc <TIM_Base_SetConfig+0xf8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <TIM_Base_SetConfig+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00b      	beq.n	80046cc <TIM_Base_SetConfig+0xf8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a11      	ldr	r2, [pc, #68]	; (80046fc <TIM_Base_SetConfig+0x128>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d007      	beq.n	80046cc <TIM_Base_SetConfig+0xf8>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <TIM_Base_SetConfig+0x12c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_Base_SetConfig+0xf8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <TIM_Base_SetConfig+0x130>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d103      	bne.n	80046d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	615a      	str	r2, [r3, #20]
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40010400 	.word	0x40010400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800

08004708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004744:	b5b0      	push	{r4, r5, r7, lr}
 8004746:	b08c      	sub	sp, #48	; 0x30
 8004748:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800474a:	4b96      	ldr	r3, [pc, #600]	; (80049a4 <MX_LWIP_Init+0x260>)
 800474c:	22c0      	movs	r2, #192	; 0xc0
 800474e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004750:	4b94      	ldr	r3, [pc, #592]	; (80049a4 <MX_LWIP_Init+0x260>)
 8004752:	22a8      	movs	r2, #168	; 0xa8
 8004754:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8004756:	4b93      	ldr	r3, [pc, #588]	; (80049a4 <MX_LWIP_Init+0x260>)
 8004758:	2212      	movs	r2, #18
 800475a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 800475c:	4b91      	ldr	r3, [pc, #580]	; (80049a4 <MX_LWIP_Init+0x260>)
 800475e:	226f      	movs	r2, #111	; 0x6f
 8004760:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004762:	4b91      	ldr	r3, [pc, #580]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004764:	22ff      	movs	r2, #255	; 0xff
 8004766:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004768:	4b8f      	ldr	r3, [pc, #572]	; (80049a8 <MX_LWIP_Init+0x264>)
 800476a:	22ff      	movs	r2, #255	; 0xff
 800476c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800476e:	4b8e      	ldr	r3, [pc, #568]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004774:	4b8c      	ldr	r3, [pc, #560]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004776:	2200      	movs	r2, #0
 8004778:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800477a:	4b8c      	ldr	r3, [pc, #560]	; (80049ac <MX_LWIP_Init+0x268>)
 800477c:	22c0      	movs	r2, #192	; 0xc0
 800477e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004780:	4b8a      	ldr	r3, [pc, #552]	; (80049ac <MX_LWIP_Init+0x268>)
 8004782:	22a8      	movs	r2, #168	; 0xa8
 8004784:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8004786:	4b89      	ldr	r3, [pc, #548]	; (80049ac <MX_LWIP_Init+0x268>)
 8004788:	2212      	movs	r2, #18
 800478a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800478c:	4b87      	ldr	r3, [pc, #540]	; (80049ac <MX_LWIP_Init+0x268>)
 800478e:	2201      	movs	r2, #1
 8004790:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004792:	2100      	movs	r1, #0
 8004794:	2000      	movs	r0, #0
 8004796:	f003 fe49 	bl	800842c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800479a:	4b82      	ldr	r3, [pc, #520]	; (80049a4 <MX_LWIP_Init+0x260>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	061a      	lsls	r2, r3, #24
 80047a0:	4b80      	ldr	r3, [pc, #512]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	4b7e      	ldr	r3, [pc, #504]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047aa:	789b      	ldrb	r3, [r3, #2]
 80047ac:	021b      	lsls	r3, r3, #8
 80047ae:	4313      	orrs	r3, r2
 80047b0:	4a7c      	ldr	r2, [pc, #496]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047b2:	78d2      	ldrb	r2, [r2, #3]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	061a      	lsls	r2, r3, #24
 80047b8:	4b7a      	ldr	r3, [pc, #488]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	0619      	lsls	r1, r3, #24
 80047be:	4b79      	ldr	r3, [pc, #484]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	4319      	orrs	r1, r3
 80047c6:	4b77      	ldr	r3, [pc, #476]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	430b      	orrs	r3, r1
 80047ce:	4975      	ldr	r1, [pc, #468]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047d0:	78c9      	ldrb	r1, [r1, #3]
 80047d2:	430b      	orrs	r3, r1
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047da:	431a      	orrs	r2, r3
 80047dc:	4b71      	ldr	r3, [pc, #452]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	0619      	lsls	r1, r3, #24
 80047e2:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047e4:	785b      	ldrb	r3, [r3, #1]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	4319      	orrs	r1, r3
 80047ea:	4b6e      	ldr	r3, [pc, #440]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047ec:	789b      	ldrb	r3, [r3, #2]
 80047ee:	021b      	lsls	r3, r3, #8
 80047f0:	430b      	orrs	r3, r1
 80047f2:	496c      	ldr	r1, [pc, #432]	; (80049a4 <MX_LWIP_Init+0x260>)
 80047f4:	78c9      	ldrb	r1, [r1, #3]
 80047f6:	430b      	orrs	r3, r1
 80047f8:	0a1b      	lsrs	r3, r3, #8
 80047fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047fe:	431a      	orrs	r2, r3
 8004800:	4b68      	ldr	r3, [pc, #416]	; (80049a4 <MX_LWIP_Init+0x260>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	0619      	lsls	r1, r3, #24
 8004806:	4b67      	ldr	r3, [pc, #412]	; (80049a4 <MX_LWIP_Init+0x260>)
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	4319      	orrs	r1, r3
 800480e:	4b65      	ldr	r3, [pc, #404]	; (80049a4 <MX_LWIP_Init+0x260>)
 8004810:	789b      	ldrb	r3, [r3, #2]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	430b      	orrs	r3, r1
 8004816:	4963      	ldr	r1, [pc, #396]	; (80049a4 <MX_LWIP_Init+0x260>)
 8004818:	78c9      	ldrb	r1, [r1, #3]
 800481a:	430b      	orrs	r3, r1
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	4313      	orrs	r3, r2
 8004820:	4a63      	ldr	r2, [pc, #396]	; (80049b0 <MX_LWIP_Init+0x26c>)
 8004822:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004824:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	061a      	lsls	r2, r3, #24
 800482a:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <MX_LWIP_Init+0x264>)
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	431a      	orrs	r2, r3
 8004832:	4b5d      	ldr	r3, [pc, #372]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004834:	789b      	ldrb	r3, [r3, #2]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	4313      	orrs	r3, r2
 800483a:	4a5b      	ldr	r2, [pc, #364]	; (80049a8 <MX_LWIP_Init+0x264>)
 800483c:	78d2      	ldrb	r2, [r2, #3]
 800483e:	4313      	orrs	r3, r2
 8004840:	061a      	lsls	r2, r3, #24
 8004842:	4b59      	ldr	r3, [pc, #356]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	0619      	lsls	r1, r3, #24
 8004848:	4b57      	ldr	r3, [pc, #348]	; (80049a8 <MX_LWIP_Init+0x264>)
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	4319      	orrs	r1, r3
 8004850:	4b55      	ldr	r3, [pc, #340]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004852:	789b      	ldrb	r3, [r3, #2]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	430b      	orrs	r3, r1
 8004858:	4953      	ldr	r1, [pc, #332]	; (80049a8 <MX_LWIP_Init+0x264>)
 800485a:	78c9      	ldrb	r1, [r1, #3]
 800485c:	430b      	orrs	r3, r1
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004864:	431a      	orrs	r2, r3
 8004866:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	0619      	lsls	r1, r3, #24
 800486c:	4b4e      	ldr	r3, [pc, #312]	; (80049a8 <MX_LWIP_Init+0x264>)
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	4319      	orrs	r1, r3
 8004874:	4b4c      	ldr	r3, [pc, #304]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004876:	789b      	ldrb	r3, [r3, #2]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	430b      	orrs	r3, r1
 800487c:	494a      	ldr	r1, [pc, #296]	; (80049a8 <MX_LWIP_Init+0x264>)
 800487e:	78c9      	ldrb	r1, [r1, #3]
 8004880:	430b      	orrs	r3, r1
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004888:	431a      	orrs	r2, r3
 800488a:	4b47      	ldr	r3, [pc, #284]	; (80049a8 <MX_LWIP_Init+0x264>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	0619      	lsls	r1, r3, #24
 8004890:	4b45      	ldr	r3, [pc, #276]	; (80049a8 <MX_LWIP_Init+0x264>)
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	4319      	orrs	r1, r3
 8004898:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <MX_LWIP_Init+0x264>)
 800489a:	789b      	ldrb	r3, [r3, #2]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	430b      	orrs	r3, r1
 80048a0:	4941      	ldr	r1, [pc, #260]	; (80049a8 <MX_LWIP_Init+0x264>)
 80048a2:	78c9      	ldrb	r1, [r1, #3]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	0e1b      	lsrs	r3, r3, #24
 80048a8:	4313      	orrs	r3, r2
 80048aa:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <MX_LWIP_Init+0x270>)
 80048ac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80048ae:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <MX_LWIP_Init+0x268>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	061a      	lsls	r2, r3, #24
 80048b4:	4b3d      	ldr	r3, [pc, #244]	; (80049ac <MX_LWIP_Init+0x268>)
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <MX_LWIP_Init+0x268>)
 80048be:	789b      	ldrb	r3, [r3, #2]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	4313      	orrs	r3, r2
 80048c4:	4a39      	ldr	r2, [pc, #228]	; (80049ac <MX_LWIP_Init+0x268>)
 80048c6:	78d2      	ldrb	r2, [r2, #3]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	061a      	lsls	r2, r3, #24
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <MX_LWIP_Init+0x268>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	0619      	lsls	r1, r3, #24
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <MX_LWIP_Init+0x268>)
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	4319      	orrs	r1, r3
 80048da:	4b34      	ldr	r3, [pc, #208]	; (80049ac <MX_LWIP_Init+0x268>)
 80048dc:	789b      	ldrb	r3, [r3, #2]
 80048de:	021b      	lsls	r3, r3, #8
 80048e0:	430b      	orrs	r3, r1
 80048e2:	4932      	ldr	r1, [pc, #200]	; (80049ac <MX_LWIP_Init+0x268>)
 80048e4:	78c9      	ldrb	r1, [r1, #3]
 80048e6:	430b      	orrs	r3, r1
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048ee:	431a      	orrs	r2, r3
 80048f0:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <MX_LWIP_Init+0x268>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	0619      	lsls	r1, r3, #24
 80048f6:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <MX_LWIP_Init+0x268>)
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	041b      	lsls	r3, r3, #16
 80048fc:	4319      	orrs	r1, r3
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <MX_LWIP_Init+0x268>)
 8004900:	789b      	ldrb	r3, [r3, #2]
 8004902:	021b      	lsls	r3, r3, #8
 8004904:	430b      	orrs	r3, r1
 8004906:	4929      	ldr	r1, [pc, #164]	; (80049ac <MX_LWIP_Init+0x268>)
 8004908:	78c9      	ldrb	r1, [r1, #3]
 800490a:	430b      	orrs	r3, r1
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004912:	431a      	orrs	r2, r3
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <MX_LWIP_Init+0x268>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	0619      	lsls	r1, r3, #24
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <MX_LWIP_Init+0x268>)
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	041b      	lsls	r3, r3, #16
 8004920:	4319      	orrs	r1, r3
 8004922:	4b22      	ldr	r3, [pc, #136]	; (80049ac <MX_LWIP_Init+0x268>)
 8004924:	789b      	ldrb	r3, [r3, #2]
 8004926:	021b      	lsls	r3, r3, #8
 8004928:	430b      	orrs	r3, r1
 800492a:	4920      	ldr	r1, [pc, #128]	; (80049ac <MX_LWIP_Init+0x268>)
 800492c:	78c9      	ldrb	r1, [r1, #3]
 800492e:	430b      	orrs	r3, r1
 8004930:	0e1b      	lsrs	r3, r3, #24
 8004932:	4313      	orrs	r3, r2
 8004934:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <MX_LWIP_Init+0x274>)
 8004936:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004938:	4b20      	ldr	r3, [pc, #128]	; (80049bc <MX_LWIP_Init+0x278>)
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <MX_LWIP_Init+0x27c>)
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	2300      	movs	r3, #0
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <MX_LWIP_Init+0x274>)
 8004946:	4a1b      	ldr	r2, [pc, #108]	; (80049b4 <MX_LWIP_Init+0x270>)
 8004948:	4919      	ldr	r1, [pc, #100]	; (80049b0 <MX_LWIP_Init+0x26c>)
 800494a:	481e      	ldr	r0, [pc, #120]	; (80049c4 <MX_LWIP_Init+0x280>)
 800494c:	f004 fc00 	bl	8009150 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004950:	481c      	ldr	r0, [pc, #112]	; (80049c4 <MX_LWIP_Init+0x280>)
 8004952:	f004 fdaf 	bl	80094b4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <MX_LWIP_Init+0x280>)
 8004958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800495c:	089b      	lsrs	r3, r3, #2
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004968:	4816      	ldr	r0, [pc, #88]	; (80049c4 <MX_LWIP_Init+0x280>)
 800496a:	f004 fdb3 	bl	80094d4 <netif_set_up>
 800496e:	e002      	b.n	8004976 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004970:	4814      	ldr	r0, [pc, #80]	; (80049c4 <MX_LWIP_Init+0x280>)
 8004972:	f004 fe1b 	bl	80095ac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004976:	4914      	ldr	r1, [pc, #80]	; (80049c8 <MX_LWIP_Init+0x284>)
 8004978:	4812      	ldr	r0, [pc, #72]	; (80049c4 <MX_LWIP_Init+0x280>)
 800497a:	f004 fead 	bl	80096d8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <MX_LWIP_Init+0x288>)
 8004980:	1d3c      	adds	r4, r7, #4
 8004982:	461d      	mov	r5, r3
 8004984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004988:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800498c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	490c      	ldr	r1, [pc, #48]	; (80049c4 <MX_LWIP_Init+0x280>)
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fd33 	bl	8005400 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800499a:	bf00      	nop
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bdb0      	pop	{r4, r5, r7, pc}
 80049a2:	bf00      	nop
 80049a4:	24000400 	.word	0x24000400
 80049a8:	24000404 	.word	0x24000404
 80049ac:	24000408 	.word	0x24000408
 80049b0:	240003f4 	.word	0x240003f4
 80049b4:	240003f8 	.word	0x240003f8
 80049b8:	240003fc 	.word	0x240003fc
 80049bc:	08008369 	.word	0x08008369
 80049c0:	08004e6d 	.word	0x08004e6d
 80049c4:	240003c0 	.word	0x240003c0
 80049c8:	080049d1 	.word	0x080049d1
 80049cc:	08013d74 	.word	0x08013d74

080049d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <HAL_ETH_RxCpltCallback+0x1c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fe4f 	bl	8005694 <osSemaphoreRelease>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	24004d98 	.word	0x24004d98

08004a04 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <HAL_ETH_TxCpltCallback+0x1c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fe3f 	bl	8005694 <osSemaphoreRelease>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	24004d9c 	.word	0x24004d9c

08004a24 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fd fc5d 	bl	80022ec <HAL_ETH_GetDMAError>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d104      	bne.n	8004a46 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <HAL_ETH_ErrorCallback+0x2c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fe27 	bl	8005694 <osSemaphoreRelease>
  }
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	24004d98 	.word	0x24004d98

08004a54 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a54:	b5b0      	push	{r4, r5, r7, lr}
 8004a56:	b0a8      	sub	sp, #160	; 0xa0
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8004a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a72:	2264      	movs	r2, #100	; 0x64
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f00e f983 	bl	8012d82 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a7c:	4b84      	ldr	r3, [pc, #528]	; (8004c90 <low_level_init+0x23c>)
 8004a7e:	4a85      	ldr	r2, [pc, #532]	; (8004c94 <low_level_init+0x240>)
 8004a80:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8004a8e:	23e1      	movs	r3, #225	; 0xe1
 8004a90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004aa6:	4a7a      	ldr	r2, [pc, #488]	; (8004c90 <low_level_init+0x23c>)
 8004aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aac:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004aae:	4b78      	ldr	r3, [pc, #480]	; (8004c90 <low_level_init+0x23c>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004ab4:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <low_level_init+0x23c>)
 8004ab6:	4a78      	ldr	r2, [pc, #480]	; (8004c98 <low_level_init+0x244>)
 8004ab8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004aba:	4b75      	ldr	r3, [pc, #468]	; (8004c90 <low_level_init+0x23c>)
 8004abc:	4a77      	ldr	r2, [pc, #476]	; (8004c9c <low_level_init+0x248>)
 8004abe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004ac0:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <low_level_init+0x23c>)
 8004ac2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004ac6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ac8:	4871      	ldr	r0, [pc, #452]	; (8004c90 <low_level_init+0x23c>)
 8004aca:	f7fc fbcd 	bl	8001268 <HAL_ETH_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004ad4:	2238      	movs	r2, #56	; 0x38
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4871      	ldr	r0, [pc, #452]	; (8004ca0 <low_level_init+0x24c>)
 8004ada:	f00e f952 	bl	8012d82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004ade:	4b70      	ldr	r3, [pc, #448]	; (8004ca0 <low_level_init+0x24c>)
 8004ae0:	2221      	movs	r2, #33	; 0x21
 8004ae2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004ae4:	4b6e      	ldr	r3, [pc, #440]	; (8004ca0 <low_level_init+0x24c>)
 8004ae6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004aea:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004aec:	4b6c      	ldr	r3, [pc, #432]	; (8004ca0 <low_level_init+0x24c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004af2:	486c      	ldr	r0, [pc, #432]	; (8004ca4 <low_level_init+0x250>)
 8004af4:	f004 f9e6 	bl	8008ec4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2206      	movs	r2, #6
 8004afc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004b00:	4b63      	ldr	r3, [pc, #396]	; (8004c90 <low_level_init+0x23c>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004b0c:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <low_level_init+0x23c>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	785a      	ldrb	r2, [r3, #1]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004b18:	4b5d      	ldr	r3, [pc, #372]	; (8004c90 <low_level_init+0x23c>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	789a      	ldrb	r2, [r3, #2]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004b24:	4b5a      	ldr	r3, [pc, #360]	; (8004c90 <low_level_init+0x23c>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	78da      	ldrb	r2, [r3, #3]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004b30:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <low_level_init+0x23c>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	791a      	ldrb	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004b3c:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <low_level_init+0x23c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	795a      	ldrb	r2, [r3, #5]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b4e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b56:	f043 030a 	orr.w	r3, r3, #10
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004b62:	2203      	movs	r2, #3
 8004b64:	2100      	movs	r1, #0
 8004b66:	2001      	movs	r0, #1
 8004b68:	f001 f83a 	bl	8005be0 <xQueueGenericCreate>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <low_level_init+0x254>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004b72:	2203      	movs	r2, #3
 8004b74:	2100      	movs	r1, #0
 8004b76:	2001      	movs	r0, #1
 8004b78:	f001 f832 	bl	8005be0 <xQueueGenericCreate>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <low_level_init+0x258>)
 8004b80:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004b82:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <low_level_init+0x25c>)
 8004b84:	f107 0408 	add.w	r4, r7, #8
 8004b88:	461d      	mov	r5, r3
 8004b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fc2f 	bl	8005400 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004ba2:	4944      	ldr	r1, [pc, #272]	; (8004cb4 <low_level_init+0x260>)
 8004ba4:	4844      	ldr	r0, [pc, #272]	; (8004cb8 <low_level_init+0x264>)
 8004ba6:	f7fc f826 	bl	8000bf6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004baa:	4843      	ldr	r0, [pc, #268]	; (8004cb8 <low_level_init+0x264>)
 8004bac:	f7fc f855 	bl	8000c5a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004bb0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d164      	bne.n	8004c82 <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004bb8:	483f      	ldr	r0, [pc, #252]	; (8004cb8 <low_level_init+0x264>)
 8004bba:	f7fc f8f6 	bl	8000daa <LAN8742_GetLinkState>
 8004bbe:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	dc06      	bgt.n	8004bd8 <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f004 fd54 	bl	8009678 <netif_set_link_down>
      netif_set_down(netif);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f004 fceb 	bl	80095ac <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004bd6:	e056      	b.n	8004c86 <low_level_init+0x232>
      switch (PHYLinkState)
 8004bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bdc:	3b02      	subs	r3, #2
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d82a      	bhi.n	8004c38 <low_level_init+0x1e4>
 8004be2:	a201      	add	r2, pc, #4	; (adr r2, 8004be8 <low_level_init+0x194>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c0b 	.word	0x08004c0b
 8004bf0:	08004c1b 	.word	0x08004c1b
 8004bf4:	08004c2b 	.word	0x08004c2b
        duplex = ETH_FULLDUPLEX_MODE;
 8004bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004c08:	e01f      	b.n	8004c4a <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004c10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004c18:	e017      	b.n	8004c4a <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004c28:	e00f      	b.n	8004c4a <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004c36:	e008      	b.n	8004c4a <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 8004c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004c40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004c48:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c4e:	4619      	mov	r1, r3
 8004c50:	480f      	ldr	r0, [pc, #60]	; (8004c90 <low_level_init+0x23c>)
 8004c52:	f7fd f905 	bl	8001e60 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c5a:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c60:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c66:	4619      	mov	r1, r3
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <low_level_init+0x23c>)
 8004c6a:	f7fd facd 	bl	8002208 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004c6e:	4808      	ldr	r0, [pc, #32]	; (8004c90 <low_level_init+0x23c>)
 8004c70:	f7fc fc42 	bl	80014f8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f004 fc2d 	bl	80094d4 <netif_set_up>
    netif_set_link_up(netif);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f004 fcc8 	bl	8009610 <netif_set_link_up>
}
 8004c80:	e001      	b.n	8004c86 <low_level_init+0x232>
    Error_Handler();
 8004c82:	f7fb fd7d 	bl	8000780 <Error_Handler>
}
 8004c86:	bf00      	nop
 8004c88:	37a0      	adds	r7, #160	; 0xa0
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	24004da0 	.word	0x24004da0
 8004c94:	40028000 	.word	0x40028000
 8004c98:	30040060 	.word	0x30040060
 8004c9c:	30040000 	.word	0x30040000
 8004ca0:	24004e50 	.word	0x24004e50
 8004ca4:	080168a8 	.word	0x080168a8
 8004ca8:	24004d98 	.word	0x24004d98
 8004cac:	24004d9c 	.word	0x24004d9c
 8004cb0:	08013d98 	.word	0x08013d98
 8004cb4:	24000010 	.word	0x24000010
 8004cb8:	24004e88 	.word	0x24004e88

08004cbc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b092      	sub	sp, #72	; 0x48
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004cd4:	f107 030c 	add.w	r3, r7, #12
 8004cd8:	2230      	movs	r2, #48	; 0x30
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f00e f850 	bl	8012d82 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004ce2:	f107 030c 	add.w	r3, r7, #12
 8004ce6:	2230      	movs	r2, #48	; 0x30
 8004ce8:	2100      	movs	r1, #0
 8004cea:	4618      	mov	r0, r3
 8004cec:	f00e f849 	bl	8012d82 <memset>

  for(q = p; q != NULL; q = q->next)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf4:	e045      	b.n	8004d82 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d902      	bls.n	8004d02 <low_level_output+0x46>
      return ERR_IF;
 8004cfc:	f06f 030b 	mvn.w	r3, #11
 8004d00:	e065      	b.n	8004dce <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d04:	6859      	ldr	r1, [r3, #4]
 8004d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d08:	4613      	mov	r3, r2
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	3348      	adds	r3, #72	; 0x48
 8004d12:	443b      	add	r3, r7
 8004d14:	3b3c      	subs	r3, #60	; 0x3c
 8004d16:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	895b      	ldrh	r3, [r3, #10]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	3348      	adds	r3, #72	; 0x48
 8004d2a:	443b      	add	r3, r7
 8004d2c:	3b38      	subs	r3, #56	; 0x38
 8004d2e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d011      	beq.n	8004d5a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d38:	1e5a      	subs	r2, r3, #1
 8004d3a:	f107 000c 	add.w	r0, r7, #12
 8004d3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d40:	460b      	mov	r3, r1
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	440b      	add	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	18c1      	adds	r1, r0, r3
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	3348      	adds	r3, #72	; 0x48
 8004d54:	443b      	add	r3, r7
 8004d56:	3b34      	subs	r3, #52	; 0x34
 8004d58:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	3348      	adds	r3, #72	; 0x48
 8004d6e:	443b      	add	r3, r7
 8004d70:	3b34      	subs	r3, #52	; 0x34
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d78:	3301      	adds	r3, #1
 8004d7a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	643b      	str	r3, [r7, #64]	; 0x40
 8004d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1b6      	bne.n	8004cf6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	891b      	ldrh	r3, [r3, #8]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <low_level_output+0x11c>)
 8004d90:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004d92:	4a11      	ldr	r2, [pc, #68]	; (8004dd8 <low_level_output+0x11c>)
 8004d94:	f107 030c 	add.w	r3, r7, #12
 8004d98:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004d9a:	4a0f      	ldr	r2, [pc, #60]	; (8004dd8 <low_level_output+0x11c>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004da0:	6838      	ldr	r0, [r7, #0]
 8004da2:	f005 f8ed 	bl	8009f80 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004da6:	490c      	ldr	r1, [pc, #48]	; (8004dd8 <low_level_output+0x11c>)
 8004da8:	480c      	ldr	r0, [pc, #48]	; (8004ddc <low_level_output+0x120>)
 8004daa:	f7fc fca9 	bl	8001700 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004dae:	bf00      	nop
 8004db0:	4b0b      	ldr	r3, [pc, #44]	; (8004de0 <low_level_output+0x124>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fc1d 	bl	80055f8 <osSemaphoreWait>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f5      	bne.n	8004db0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004dc4:	4805      	ldr	r0, [pc, #20]	; (8004ddc <low_level_output+0x120>)
 8004dc6:	f7fc fe1a 	bl	80019fe <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004dca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3748      	adds	r7, #72	; 0x48
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	24004e50 	.word	0x24004e50
 8004ddc:	24004da0 	.word	0x24004da0
 8004de0:	24004d9c 	.word	0x24004d9c

08004de4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004df0:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <low_level_input+0x2c>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004df8:	f107 030c 	add.w	r3, r7, #12
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4805      	ldr	r0, [pc, #20]	; (8004e14 <low_level_input+0x30>)
 8004e00:	f7fc fccf 	bl	80017a2 <HAL_ETH_ReadData>
  }

  return p;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	24004d94 	.word	0x24004d94
 8004e14:	24004da0 	.word	0x24004da0

08004e18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <ethernetif_input+0x50>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fbe1 	bl	80055f8 <osSemaphoreWait>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f5      	bne.n	8004e28 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004e3c:	68b8      	ldr	r0, [r7, #8]
 8004e3e:	f7ff ffd1 	bl	8004de4 <low_level_input>
 8004e42:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	4798      	blx	r3
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f004 ffea 	bl	8009e34 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ea      	bne.n	8004e3c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e66:	e7df      	b.n	8004e28 <ethernetif_input+0x10>
 8004e68:	24004d98 	.word	0x24004d98

08004e6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <ethernetif_init+0x1c>
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <ethernetif_init+0x48>)
 8004e7c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8004e80:	490d      	ldr	r1, [pc, #52]	; (8004eb8 <ethernetif_init+0x4c>)
 8004e82:	480e      	ldr	r0, [pc, #56]	; (8004ebc <ethernetif_init+0x50>)
 8004e84:	f00e f81a 	bl	8012ebc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2273      	movs	r2, #115	; 0x73
 8004e8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2274      	movs	r2, #116	; 0x74
 8004e94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <ethernetif_init+0x54>)
 8004e9c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <ethernetif_init+0x58>)
 8004ea2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff fdd5 	bl	8004a54 <low_level_init>

  return ERR_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	08013db4 	.word	0x08013db4
 8004eb8:	08013dd0 	.word	0x08013dd0
 8004ebc:	08013de0 	.word	0x08013de0
 8004ec0:	08010ba1 	.word	0x08010ba1
 8004ec4:	08004cbd 	.word	0x08004cbd

08004ec8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004ed4:	68f9      	ldr	r1, [r7, #12]
 8004ed6:	4809      	ldr	r0, [pc, #36]	; (8004efc <pbuf_free_custom+0x34>)
 8004ed8:	f004 f8e4 	bl	80090a4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <pbuf_free_custom+0x38>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <pbuf_free_custom+0x38>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <pbuf_free_custom+0x3c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fbd0 	bl	8005694 <osSemaphoreRelease>
  }
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	080168a8 	.word	0x080168a8
 8004f00:	24004d94 	.word	0x24004d94
 8004f04:	24004d98 	.word	0x24004d98

08004f08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f0c:	f7fc f824 	bl	8000f58 <HAL_GetTick>
 8004f10:	4603      	mov	r3, r0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08e      	sub	sp, #56	; 0x38
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a4d      	ldr	r2, [pc, #308]	; (800506c <HAL_ETH_MspInit+0x154>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	f040 8093 	bne.w	8005062 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004f3c:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f42:	4a4b      	ldr	r2, [pc, #300]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004f4c:	4b48      	ldr	r3, [pc, #288]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004f5a:	4b45      	ldr	r3, [pc, #276]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f60:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004f6a:	4b41      	ldr	r3, [pc, #260]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004f78:	4b3d      	ldr	r3, [pc, #244]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004f88:	4b39      	ldr	r3, [pc, #228]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f96:	4b36      	ldr	r3, [pc, #216]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f9c:	4a34      	ldr	r2, [pc, #208]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fa6:	4b32      	ldr	r3, [pc, #200]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fba:	4a2d      	ldr	r2, [pc, #180]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fda:	f043 0302 	orr.w	r3, r3, #2
 8004fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <HAL_ETH_MspInit+0x158>)
 8004fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004ff0:	2332      	movs	r3, #50	; 0x32
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005000:	230b      	movs	r3, #11
 8005002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005008:	4619      	mov	r1, r3
 800500a:	481a      	ldr	r0, [pc, #104]	; (8005074 <HAL_ETH_MspInit+0x15c>)
 800500c:	f7fd fef0 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005010:	2386      	movs	r3, #134	; 0x86
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005014:	2302      	movs	r3, #2
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	2300      	movs	r3, #0
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800501c:	2303      	movs	r3, #3
 800501e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005020:	230b      	movs	r3, #11
 8005022:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005028:	4619      	mov	r1, r3
 800502a:	4813      	ldr	r0, [pc, #76]	; (8005078 <HAL_ETH_MspInit+0x160>)
 800502c:	f7fd fee0 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005030:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005036:	2302      	movs	r3, #2
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503a:	2300      	movs	r3, #0
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503e:	2303      	movs	r3, #3
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005042:	230b      	movs	r3, #11
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504a:	4619      	mov	r1, r3
 800504c:	480b      	ldr	r0, [pc, #44]	; (800507c <HAL_ETH_MspInit+0x164>)
 800504e:	f7fd fecf 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005052:	2200      	movs	r2, #0
 8005054:	2105      	movs	r1, #5
 8005056:	203d      	movs	r0, #61	; 0x3d
 8005058:	f7fc f862 	bl	8001120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800505c:	203d      	movs	r0, #61	; 0x3d
 800505e:	f7fc f879 	bl	8001154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005062:	bf00      	nop
 8005064:	3738      	adds	r7, #56	; 0x38
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40028000 	.word	0x40028000
 8005070:	58024400 	.word	0x58024400
 8005074:	58020800 	.word	0x58020800
 8005078:	58020000 	.word	0x58020000
 800507c:	58020400 	.word	0x58020400

08005080 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <ETH_PHY_IO_Init+0x10>)
 8005086:	f7fd f8d9 	bl	800223c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	24004da0 	.word	0x24004da0

08005094 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return 0;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	68f9      	ldr	r1, [r7, #12]
 80050b6:	4807      	ldr	r0, [pc, #28]	; (80050d4 <ETH_PHY_IO_ReadReg+0x30>)
 80050b8:	f7fc fe2a 	bl	8001d10 <HAL_ETH_ReadPHYRegister>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c6:	e000      	b.n	80050ca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	24004da0 	.word	0x24004da0

080050d8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	68f9      	ldr	r1, [r7, #12]
 80050ea:	4807      	ldr	r0, [pc, #28]	; (8005108 <ETH_PHY_IO_WriteReg+0x30>)
 80050ec:	f7fc fe64 	bl	8001db8 <HAL_ETH_WritePHYRegister>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050fa:	e000      	b.n	80050fe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	24004da0 	.word	0x24004da0

0800510c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005110:	f7fb ff22 	bl	8000f58 <HAL_GetTick>
 8005114:	4603      	mov	r3, r0
}
 8005116:	4618      	mov	r0, r3
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b0a0      	sub	sp, #128	; 0x80
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	2264      	movs	r2, #100	; 0x64
 800512a:	2100      	movs	r1, #0
 800512c:	4618      	mov	r0, r3
 800512e:	f00d fe28 	bl	8012d82 <memset>
  int32_t PHYLinkState = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	67fb      	str	r3, [r7, #124]	; 0x7c
 800513a:	2300      	movs	r3, #0
 800513c:	67bb      	str	r3, [r7, #120]	; 0x78
 800513e:	2300      	movs	r3, #0
 8005140:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005146:	483a      	ldr	r0, [pc, #232]	; (8005230 <ethernet_link_thread+0x114>)
 8005148:	f7fb fe2f 	bl	8000daa <LAN8742_GetLinkState>
 800514c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <ethernet_link_thread+0x5e>
 8005160:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005162:	2b01      	cmp	r3, #1
 8005164:	dc09      	bgt.n	800517a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005166:	4833      	ldr	r0, [pc, #204]	; (8005234 <ethernet_link_thread+0x118>)
 8005168:	f7fc fa52 	bl	8001610 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800516c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800516e:	f004 fa1d 	bl	80095ac <netif_set_down>
    netif_set_link_down(netif);
 8005172:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005174:	f004 fa80 	bl	8009678 <netif_set_link_down>
 8005178:	e055      	b.n	8005226 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800517a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800517c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d14e      	bne.n	8005226 <ethernet_link_thread+0x10a>
 8005188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800518a:	2b01      	cmp	r3, #1
 800518c:	dd4b      	ble.n	8005226 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800518e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005190:	3b02      	subs	r3, #2
 8005192:	2b03      	cmp	r3, #3
 8005194:	d82a      	bhi.n	80051ec <ethernet_link_thread+0xd0>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <ethernet_link_thread+0x80>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051ad 	.word	0x080051ad
 80051a0:	080051bf 	.word	0x080051bf
 80051a4:	080051cf 	.word	0x080051cf
 80051a8:	080051df 	.word	0x080051df
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80051ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051bc:	e017      	b.n	80051ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80051be:	2300      	movs	r3, #0
 80051c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051c8:	2301      	movs	r3, #1
 80051ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051cc:	e00f      	b.n	80051ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80051ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051d2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80051d4:	2300      	movs	r3, #0
 80051d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051d8:	2301      	movs	r3, #1
 80051da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051dc:	e007      	b.n	80051ee <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80051de:	2300      	movs	r3, #0
 80051e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80051e2:	2300      	movs	r3, #0
 80051e4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80051e6:	2301      	movs	r3, #1
 80051e8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80051ea:	e000      	b.n	80051ee <ethernet_link_thread+0xd2>
    default:
      break;
 80051ec:	bf00      	nop
    }

    if(linkchanged)
 80051ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d018      	beq.n	8005226 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80051f4:	f107 0308 	add.w	r3, r7, #8
 80051f8:	4619      	mov	r1, r3
 80051fa:	480e      	ldr	r0, [pc, #56]	; (8005234 <ethernet_link_thread+0x118>)
 80051fc:	f7fc fe30 	bl	8001e60 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005200:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005202:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005206:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4619      	mov	r1, r3
 800520e:	4809      	ldr	r0, [pc, #36]	; (8005234 <ethernet_link_thread+0x118>)
 8005210:	f7fc fffa 	bl	8002208 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005214:	4807      	ldr	r0, [pc, #28]	; (8005234 <ethernet_link_thread+0x118>)
 8005216:	f7fc f90d 	bl	8001434 <HAL_ETH_Start>
      netif_set_up(netif);
 800521a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800521c:	f004 f95a 	bl	80094d4 <netif_set_up>
      netif_set_link_up(netif);
 8005220:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005222:	f004 f9f5 	bl	8009610 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005226:	2064      	movs	r0, #100	; 0x64
 8005228:	f000 f936 	bl	8005498 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800522c:	e78b      	b.n	8005146 <ethernet_link_thread+0x2a>
 800522e:	bf00      	nop
 8005230:	24004e88 	.word	0x24004e88
 8005234:	24004da0 	.word	0x24004da0

08005238 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af02      	add	r7, sp, #8
 800523e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005240:	4812      	ldr	r0, [pc, #72]	; (800528c <HAL_ETH_RxAllocateCallback+0x54>)
 8005242:	f003 febb 	bl	8008fbc <memp_malloc_pool>
 8005246:	60f8      	str	r0, [r7, #12]
  if (p)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d014      	beq.n	8005278 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f103 0220 	add.w	r2, r3, #32
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a0d      	ldr	r2, [pc, #52]	; (8005290 <HAL_ETH_RxAllocateCallback+0x58>)
 800525c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005266:	9201      	str	r2, [sp, #4]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2241      	movs	r2, #65	; 0x41
 800526e:	2100      	movs	r1, #0
 8005270:	2000      	movs	r0, #0
 8005272:	f004 fc25 	bl	8009ac0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005276:	e005      	b.n	8005284 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_ETH_RxAllocateCallback+0x5c>)
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	080168a8 	.word	0x080168a8
 8005290:	08004ec9 	.word	0x08004ec9
 8005294:	24004d94 	.word	0x24004d94

08005298 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005298:	b480      	push	{r7}
 800529a:	b08d      	sub	sp, #52	; 0x34
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3b20      	subs	r3, #32
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80052be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c0:	2200      	movs	r2, #0
 80052c2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	887a      	ldrh	r2, [r7, #2]
 80052c8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d103      	bne.n	80052da <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e003      	b.n	80052e2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ee:	e009      	b.n	8005304 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	891a      	ldrh	r2, [r3, #8]
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	4413      	add	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f2      	bne.n	80052f0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	623a      	str	r2, [r7, #32]
 8005310:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dd1d      	ble.n	8005354 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f003 021f 	and.w	r2, r3, #31
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005328:	f3bf 8f4f 	dsb	sy
}
 800532c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <HAL_ETH_RxLinkCallback+0xcc>)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	3320      	adds	r3, #32
 800533a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	3b20      	subs	r3, #32
 8005340:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	dcf2      	bgt.n	800532e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8005348:	f3bf 8f4f 	dsb	sy
}
 800534c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800534e:	f3bf 8f6f 	isb	sy
}
 8005352:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8005354:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005356:	bf00      	nop
 8005358:	3734      	adds	r7, #52	; 0x34
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f004 fd5f 	bl	8009e34 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	4603      	mov	r3, r0
 8005386:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800538c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005390:	2b84      	cmp	r3, #132	; 0x84
 8005392:	d005      	beq.n	80053a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005394:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	3303      	adds	r3, #3
 800539e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b4:	f3ef 8305 	mrs	r3, IPSR
 80053b8:	607b      	str	r3, [r7, #4]
  return(result);
 80053ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80053d6:	f001 fc41 	bl	8006c5c <vTaskStartScheduler>
  
  return osOK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	bd80      	pop	{r7, pc}

080053e0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80053e4:	f7ff ffe3 	bl	80053ae <inHandlerMode>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80053ee:	f001 fd59 	bl	8006ea4 <xTaskGetTickCountFromISR>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e002      	b.n	80053fc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80053f6:	f001 fd45 	bl	8006e84 <xTaskGetTickCount>
 80053fa:	4603      	mov	r3, r0
  }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	bd80      	pop	{r7, pc}

08005400 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005402:	b089      	sub	sp, #36	; 0x24
 8005404:	af04      	add	r7, sp, #16
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d020      	beq.n	8005454 <osThreadCreate+0x54>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d01c      	beq.n	8005454 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685c      	ldr	r4, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691e      	ldr	r6, [r3, #16]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff ffa6 	bl	800537e <makeFreeRtosPriority>
 8005432:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800543c:	9202      	str	r2, [sp, #8]
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	9100      	str	r1, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4632      	mov	r2, r6
 8005446:	4629      	mov	r1, r5
 8005448:	4620      	mov	r0, r4
 800544a:	f001 fa29 	bl	80068a0 <xTaskCreateStatic>
 800544e:	4603      	mov	r3, r0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e01c      	b.n	800548e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685c      	ldr	r4, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005460:	b29e      	uxth	r6, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff ff88 	bl	800537e <makeFreeRtosPriority>
 800546e:	4602      	mov	r2, r0
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	9301      	str	r3, [sp, #4]
 8005476:	9200      	str	r2, [sp, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4632      	mov	r2, r6
 800547c:	4629      	mov	r1, r5
 800547e:	4620      	mov	r0, r4
 8005480:	f001 fa6b 	bl	800695a <xTaskCreate>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d001      	beq.n	800548e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	e000      	b.n	8005490 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800548e:	68fb      	ldr	r3, [r7, #12]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005498 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <osDelay+0x16>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	e000      	b.n	80054b0 <osDelay+0x18>
 80054ae:	2301      	movs	r3, #1
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fb9f 	bl	8006bf4 <vTaskDelay>
  
  return osOK;
 80054b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4619      	mov	r1, r3
 80054d6:	2001      	movs	r0, #1
 80054d8:	f000 fc0d 	bl	8005cf6 <xQueueCreateMutexStatic>
 80054dc:	4603      	mov	r3, r0
 80054de:	e003      	b.n	80054e8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80054e0:	2001      	movs	r0, #1
 80054e2:	f000 fbf0 	bl	8005cc6 <xQueueCreateMutex>
 80054e6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <osMutexWait+0x18>
    return osErrorParameter;
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	e03a      	b.n	800557e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005512:	d103      	bne.n	800551c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e009      	b.n	8005530 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <osMutexWait+0x40>
      ticks = 1;
 800552c:	2301      	movs	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005530:	f7ff ff3d 	bl	80053ae <inHandlerMode>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d017      	beq.n	800556a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800553a:	f107 0308 	add.w	r3, r7, #8
 800553e:	461a      	mov	r2, r3
 8005540:	2100      	movs	r1, #0
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f001 f804 	bl	8006550 <xQueueReceiveFromISR>
 8005548:	4603      	mov	r3, r0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d001      	beq.n	8005552 <osMutexWait+0x62>
      return osErrorOS;
 800554e:	23ff      	movs	r3, #255	; 0xff
 8005550:	e015      	b.n	800557e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d011      	beq.n	800557c <osMutexWait+0x8c>
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <osMutexWait+0x98>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	e008      	b.n	800557c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fee3 	bl	8006338 <xQueueSemaphoreTake>
 8005572:	4603      	mov	r3, r0
 8005574:	2b01      	cmp	r3, #1
 8005576:	d001      	beq.n	800557c <osMutexWait+0x8c>
    return osErrorOS;
 8005578:	23ff      	movs	r3, #255	; 0xff
 800557a:	e000      	b.n	800557e <osMutexWait+0x8e>
  }
  
  return osOK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005598:	2300      	movs	r3, #0
 800559a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800559c:	f7ff ff07 	bl	80053ae <inHandlerMode>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80055a6:	f107 0308 	add.w	r3, r7, #8
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fd56 	bl	800605e <xQueueGiveFromISR>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <osMutexRelease+0x30>
      return osErrorOS;
 80055b8:	23ff      	movs	r3, #255	; 0xff
 80055ba:	e017      	b.n	80055ec <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <osMutexRelease+0x5e>
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <osMutexRelease+0x68>)
 80055c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	e00a      	b.n	80055ea <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80055d4:	2300      	movs	r3, #0
 80055d6:	2200      	movs	r2, #0
 80055d8:	2100      	movs	r1, #0
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fba6 	bl	8005d2c <xQueueGenericSend>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d001      	beq.n	80055ea <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80055e6:	23ff      	movs	r3, #255	; 0xff
 80055e8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	e03a      	b.n	8005686 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561a:	d103      	bne.n	8005624 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800561c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e009      	b.n	8005638 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d006      	beq.n	8005638 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <osSemaphoreWait+0x40>
      ticks = 1;
 8005634:	2301      	movs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005638:	f7ff feb9 	bl	80053ae <inHandlerMode>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d017      	beq.n	8005672 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005642:	f107 0308 	add.w	r3, r7, #8
 8005646:	461a      	mov	r2, r3
 8005648:	2100      	movs	r1, #0
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 ff80 	bl	8006550 <xQueueReceiveFromISR>
 8005650:	4603      	mov	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d001      	beq.n	800565a <osSemaphoreWait+0x62>
      return osErrorOS;
 8005656:	23ff      	movs	r3, #255	; 0xff
 8005658:	e015      	b.n	8005686 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d011      	beq.n	8005684 <osSemaphoreWait+0x8c>
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <osSemaphoreWait+0x98>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	e008      	b.n	8005684 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fe5f 	bl	8006338 <xQueueSemaphoreTake>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d001      	beq.n	8005684 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005680:	23ff      	movs	r3, #255	; 0xff
 8005682:	e000      	b.n	8005686 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80056a4:	f7ff fe83 	bl	80053ae <inHandlerMode>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80056ae:	f107 0308 	add.w	r3, r7, #8
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fcd2 	bl	800605e <xQueueGiveFromISR>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d001      	beq.n	80056c4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80056c0:	23ff      	movs	r3, #255	; 0xff
 80056c2:	e017      	b.n	80056f4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <osSemaphoreRelease+0x5e>
 80056ca:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <osSemaphoreRelease+0x68>)
 80056cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	e00a      	b.n	80056f2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80056dc:	2300      	movs	r3, #0
 80056de:	2200      	movs	r2, #0
 80056e0:	2100      	movs	r1, #0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fb22 	bl	8005d2c <xQueueGenericSend>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d001      	beq.n	80056f2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80056ee:	23ff      	movs	r3, #255	; 0xff
 80056f0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80056f2:	68fb      	ldr	r3, [r7, #12]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b085      	sub	sp, #20
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <osMessageCreate+0x36>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00d      	beq.n	8005736 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2400      	movs	r4, #0
 800572c:	9400      	str	r4, [sp, #0]
 800572e:	f000 f9df 	bl	8005af0 <xQueueGenericCreateStatic>
 8005732:	4603      	mov	r3, r0
 8005734:	e008      	b.n	8005748 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	4619      	mov	r1, r3
 8005742:	f000 fa4d 	bl	8005be0 <xQueueGenericCreate>
 8005746:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}

08005750 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800575c:	2300      	movs	r3, #0
 800575e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <osMessagePut+0x1e>
    ticks = 1;
 800576a:	2301      	movs	r3, #1
 800576c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800576e:	f7ff fe1e 	bl	80053ae <inHandlerMode>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d018      	beq.n	80057aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005778:	f107 0210 	add.w	r2, r7, #16
 800577c:	f107 0108 	add.w	r1, r7, #8
 8005780:	2300      	movs	r3, #0
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 fbd0 	bl	8005f28 <xQueueGenericSendFromISR>
 8005788:	4603      	mov	r3, r0
 800578a:	2b01      	cmp	r3, #1
 800578c:	d001      	beq.n	8005792 <osMessagePut+0x42>
      return osErrorOS;
 800578e:	23ff      	movs	r3, #255	; 0xff
 8005790:	e018      	b.n	80057c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d014      	beq.n	80057c2 <osMessagePut+0x72>
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <osMessagePut+0x7c>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	e00b      	b.n	80057c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80057aa:	f107 0108 	add.w	r1, r7, #8
 80057ae:	2300      	movs	r3, #0
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 faba 	bl	8005d2c <xQueueGenericSend>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d001      	beq.n	80057c2 <osMessagePut+0x72>
      return osErrorOS;
 80057be:	23ff      	movs	r3, #255	; 0xff
 80057c0:	e000      	b.n	80057c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	e000ed04 	.word	0xe000ed04

080057d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80057d0:	b590      	push	{r4, r7, lr}
 80057d2:	b08b      	sub	sp, #44	; 0x2c
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	617b      	str	r3, [r7, #20]
    return event;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	461c      	mov	r4, r3
 80057f2:	f107 0314 	add.w	r3, r7, #20
 80057f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057fe:	e054      	b.n	80058aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005800:	2300      	movs	r3, #0
 8005802:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580e:	d103      	bne.n	8005818 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	e009      	b.n	800582c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <osMessageGet+0x5c>
      ticks = 1;
 8005828:	2301      	movs	r3, #1
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800582c:	f7ff fdbf 	bl	80053ae <inHandlerMode>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01c      	beq.n	8005870 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005836:	f107 0220 	add.w	r2, r7, #32
 800583a:	f107 0314 	add.w	r3, r7, #20
 800583e:	3304      	adds	r3, #4
 8005840:	4619      	mov	r1, r3
 8005842:	68b8      	ldr	r0, [r7, #8]
 8005844:	f000 fe84 	bl	8006550 <xQueueReceiveFromISR>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d102      	bne.n	8005854 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800584e:	2310      	movs	r3, #16
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e001      	b.n	8005858 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005854:	2300      	movs	r3, #0
 8005856:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01d      	beq.n	800589a <osMessageGet+0xca>
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <osMessageGet+0xe4>)
 8005860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	e014      	b.n	800589a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005870:	f107 0314 	add.w	r3, r7, #20
 8005874:	3304      	adds	r3, #4
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	4619      	mov	r1, r3
 800587a:	68b8      	ldr	r0, [r7, #8]
 800587c:	f000 fc7c 	bl	8006178 <xQueueReceive>
 8005880:	4603      	mov	r3, r0
 8005882:	2b01      	cmp	r3, #1
 8005884:	d102      	bne.n	800588c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005886:	2310      	movs	r3, #16
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e006      	b.n	800589a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <osMessageGet+0xc6>
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <osMessageGet+0xc8>
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	461c      	mov	r4, r3
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80058a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	372c      	adds	r7, #44	; 0x2c
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd90      	pop	{r4, r7, pc}
 80058b2:	bf00      	nop
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f103 0208 	add.w	r2, r3, #8
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f103 0208 	add.w	r2, r3, #8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f103 0208 	add.w	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800595a:	b480      	push	{r7}
 800595c:	b085      	sub	sp, #20
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005970:	d103      	bne.n	800597a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e00c      	b.n	8005994 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3308      	adds	r3, #8
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e002      	b.n	8005988 <vListInsert+0x2e>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	d2f6      	bcs.n	8005982 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	601a      	str	r2, [r3, #0]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6892      	ldr	r2, [r2, #8]
 80059e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6852      	ldr	r2, [r2, #4]
 80059ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d103      	bne.n	8005a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	1e5a      	subs	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a4a:	f002 f88b 	bl	8007b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	441a      	add	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a80:	fb01 f303 	mul.w	r3, r1, r3
 8005a84:	441a      	add	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d114      	bne.n	8005aca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01a      	beq.n	8005ade <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3310      	adds	r3, #16
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fb49 	bl	8007144 <xTaskRemoveFromEventList>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d012      	beq.n	8005ade <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ab8:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <xQueueGenericReset+0xcc>)
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	e009      	b.n	8005ade <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3310      	adds	r3, #16
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff fef2 	bl	80058b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	3324      	adds	r3, #36	; 0x24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff feed 	bl	80058b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ade:	f002 f871 	bl	8007bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ae2:	2301      	movs	r3, #1
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <xQueueGenericCreateStatic+0x52>
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <xQueueGenericCreateStatic+0x56>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueGenericCreateStatic+0x58>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	623b      	str	r3, [r7, #32]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <xQueueGenericCreateStatic+0x7e>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <xQueueGenericCreateStatic+0x82>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <xQueueGenericCreateStatic+0x84>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	61fb      	str	r3, [r7, #28]
}
 8005b8a:	bf00      	nop
 8005b8c:	e7fe      	b.n	8005b8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b8e:	2348      	movs	r3, #72	; 0x48
 8005b90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b48      	cmp	r3, #72	; 0x48
 8005b96:	d00a      	beq.n	8005bae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	61bb      	str	r3, [r7, #24]
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00d      	beq.n	8005bd6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f83f 	bl	8005c54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3730      	adds	r7, #48	; 0x30
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b08a      	sub	sp, #40	; 0x28
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	613b      	str	r3, [r7, #16]
}
 8005c06:	bf00      	nop
 8005c08:	e7fe      	b.n	8005c08 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	3348      	adds	r3, #72	; 0x48
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f002 f8c5 	bl	8007da8 <pvPortMalloc>
 8005c1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d011      	beq.n	8005c4a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	3348      	adds	r3, #72	; 0x48
 8005c2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c38:	79fa      	ldrb	r2, [r7, #7]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f805 	bl	8005c54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e002      	b.n	8005c76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c82:	2101      	movs	r1, #1
 8005c84:	69b8      	ldr	r0, [r7, #24]
 8005c86:	f7ff fecb 	bl	8005a20 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00e      	beq.n	8005cbe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f837 	bl	8005d2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	4603      	mov	r3, r0
 8005cce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005cd8:	79fb      	ldrb	r3, [r7, #7]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6939      	ldr	r1, [r7, #16]
 8005cde:	6978      	ldr	r0, [r7, #20]
 8005ce0:	f7ff ff7e 	bl	8005be0 <xQueueGenericCreate>
 8005ce4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff ffd3 	bl	8005c92 <prvInitialiseMutex>

		return xNewQueue;
 8005cec:	68fb      	ldr	r3, [r7, #12]
	}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b088      	sub	sp, #32
 8005cfa:	af02      	add	r7, sp, #8
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	6039      	str	r1, [r7, #0]
 8005d00:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d02:	2301      	movs	r3, #1
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	6939      	ldr	r1, [r7, #16]
 8005d14:	6978      	ldr	r0, [r7, #20]
 8005d16:	f7ff feeb 	bl	8005af0 <xQueueGenericCreateStatic>
 8005d1a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ffb8 	bl	8005c92 <prvInitialiseMutex>

		return xNewQueue;
 8005d22:	68fb      	ldr	r3, [r7, #12]
	}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xQueueGenericSend+0x32>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <xQueueGenericSend+0x40>
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <xQueueGenericSend+0x44>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <xQueueGenericSend+0x46>
 8005d70:	2300      	movs	r3, #0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10a      	bne.n	8005d8c <xQueueGenericSend+0x60>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d103      	bne.n	8005d9a <xQueueGenericSend+0x6e>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <xQueueGenericSend+0x72>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <xQueueGenericSend+0x74>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <xQueueGenericSend+0x8e>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	623b      	str	r3, [r7, #32]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dba:	f001 fb83 	bl	80074c4 <xTaskGetSchedulerState>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <xQueueGenericSend+0x9e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <xQueueGenericSend+0xa2>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericSend+0xa4>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericSend+0xbe>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	61fb      	str	r3, [r7, #28]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dea:	f001 febb 	bl	8007b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d302      	bcc.n	8005e00 <xQueueGenericSend+0xd4>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d129      	bne.n	8005e54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e06:	f000 fc3b 	bl	8006680 <prvCopyDataToQueue>
 8005e0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d010      	beq.n	8005e36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	3324      	adds	r3, #36	; 0x24
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 f993 	bl	8007144 <xTaskRemoveFromEventList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d013      	beq.n	8005e4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e24:	4b3f      	ldr	r3, [pc, #252]	; (8005f24 <xQueueGenericSend+0x1f8>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	e00a      	b.n	8005e4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e3c:	4b39      	ldr	r3, [pc, #228]	; (8005f24 <xQueueGenericSend+0x1f8>)
 8005e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e4c:	f001 feba 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e063      	b.n	8005f1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d103      	bne.n	8005e62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e5a:	f001 feb3 	bl	8007bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e05c      	b.n	8005f1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e68:	f107 0314 	add.w	r3, r7, #20
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f9cb 	bl	8007208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e72:	2301      	movs	r3, #1
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e76:	f001 fea5 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e7a:	f000 ff59 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e7e:	f001 fe71 	bl	8007b64 <vPortEnterCritical>
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e88:	b25b      	sxtb	r3, r3
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8e:	d103      	bne.n	8005e98 <xQueueGenericSend+0x16c>
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e9e:	b25b      	sxtb	r3, r3
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea4:	d103      	bne.n	8005eae <xQueueGenericSend+0x182>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eae:	f001 fe89 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eb2:	1d3a      	adds	r2, r7, #4
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 f9ba 	bl	8007234 <xTaskCheckForTimeOut>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d124      	bne.n	8005f10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec8:	f000 fcd2 	bl	8006870 <prvIsQueueFull>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d018      	beq.n	8005f04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	3310      	adds	r3, #16
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 f90e 	bl	80070fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee2:	f000 fc5d 	bl	80067a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ee6:	f000 ff31 	bl	8006d4c <xTaskResumeAll>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f47f af7c 	bne.w	8005dea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <xQueueGenericSend+0x1f8>)
 8005ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	e772      	b.n	8005dea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f06:	f000 fc4b 	bl	80067a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f0a:	f000 ff1f 	bl	8006d4c <xTaskResumeAll>
 8005f0e:	e76c      	b.n	8005dea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f12:	f000 fc45 	bl	80067a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f16:	f000 ff19 	bl	8006d4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3738      	adds	r7, #56	; 0x38
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b090      	sub	sp, #64	; 0x40
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f52:	bf00      	nop
 8005f54:	e7fe      	b.n	8005f54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d103      	bne.n	8005f64 <xQueueGenericSendFromISR+0x3c>
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <xQueueGenericSendFromISR+0x40>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <xQueueGenericSendFromISR+0x42>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d103      	bne.n	8005f92 <xQueueGenericSendFromISR+0x6a>
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <xQueueGenericSendFromISR+0x6e>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <xQueueGenericSendFromISR+0x70>
 8005f96:	2300      	movs	r3, #0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	623b      	str	r3, [r7, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fb2:	f001 feb9 	bl	8007d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	61fa      	str	r2, [r7, #28]
 8005fcc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <xQueueGenericSendFromISR+0xbc>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d12f      	bne.n	8006044 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ffa:	f000 fb41 	bl	8006680 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ffe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006006:	d112      	bne.n	800602e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d016      	beq.n	800603e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	4618      	mov	r0, r3
 8006016:	f001 f895 	bl	8007144 <xTaskRemoveFromEventList>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00e      	beq.n	800603e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	e007      	b.n	800603e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800602e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006032:	3301      	adds	r3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	b25a      	sxtb	r2, r3
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800603e:	2301      	movs	r3, #1
 8006040:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006042:	e001      	b.n	8006048 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006044:	2300      	movs	r3, #0
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006052:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006056:	4618      	mov	r0, r3
 8006058:	3740      	adds	r7, #64	; 0x40
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b08e      	sub	sp, #56	; 0x38
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
 8006066:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	623b      	str	r3, [r7, #32]
}
 8006084:	bf00      	nop
 8006086:	e7fe      	b.n	8006086 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	61fb      	str	r3, [r7, #28]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <xQueueGiveFromISR+0x58>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueGiveFromISR+0x5c>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGiveFromISR+0x5e>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61bb      	str	r3, [r7, #24]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060d6:	f001 fe27 	bl	8007d28 <vPortValidateInterruptPriority>
	__asm volatile
 80060da:	f3ef 8211 	mrs	r2, BASEPRI
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	617a      	str	r2, [r7, #20]
 80060f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006102:	429a      	cmp	r2, r3
 8006104:	d22b      	bcs.n	800615e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006118:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006120:	d112      	bne.n	8006148 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	3324      	adds	r3, #36	; 0x24
 800612e:	4618      	mov	r0, r3
 8006130:	f001 f808 	bl	8007144 <xTaskRemoveFromEventList>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00e      	beq.n	8006158 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e007      	b.n	8006158 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800614c:	3301      	adds	r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	b25a      	sxtb	r2, r3
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006158:	2301      	movs	r3, #1
 800615a:	637b      	str	r3, [r7, #52]	; 0x34
 800615c:	e001      	b.n	8006162 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f383 8811 	msr	BASEPRI, r3
}
 800616c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006170:	4618      	mov	r0, r3
 8006172:	3738      	adds	r7, #56	; 0x38
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <xQueueReceive+0x30>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	623b      	str	r3, [r7, #32]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <xQueueReceive+0x3e>
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <xQueueReceive+0x42>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueReceive+0x44>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xQueueReceive+0x5e>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	61fb      	str	r3, [r7, #28]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d6:	f001 f975 	bl	80074c4 <xTaskGetSchedulerState>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <xQueueReceive+0x6e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <xQueueReceive+0x72>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <xQueueReceive+0x74>
 80061ea:	2300      	movs	r3, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <xQueueReceive+0x8e>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	61bb      	str	r3, [r7, #24]
}
 8006202:	bf00      	nop
 8006204:	e7fe      	b.n	8006204 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006206:	f001 fcad 	bl	8007b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800620a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01f      	beq.n	8006256 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621a:	f000 fa9b 	bl	8006754 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	1e5a      	subs	r2, r3, #1
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00f      	beq.n	800624e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	3310      	adds	r3, #16
 8006232:	4618      	mov	r0, r3
 8006234:	f000 ff86 	bl	8007144 <xTaskRemoveFromEventList>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800623e:	4b3d      	ldr	r3, [pc, #244]	; (8006334 <xQueueReceive+0x1bc>)
 8006240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800624e:	f001 fcb9 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 8006252:	2301      	movs	r3, #1
 8006254:	e069      	b.n	800632a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800625c:	f001 fcb2 	bl	8007bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006260:	2300      	movs	r3, #0
 8006262:	e062      	b.n	800632a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626a:	f107 0310 	add.w	r3, r7, #16
 800626e:	4618      	mov	r0, r3
 8006270:	f000 ffca 	bl	8007208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006274:	2301      	movs	r3, #1
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006278:	f001 fca4 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800627c:	f000 fd58 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006280:	f001 fc70 	bl	8007b64 <vPortEnterCritical>
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800628a:	b25b      	sxtb	r3, r3
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006290:	d103      	bne.n	800629a <xQueueReceive+0x122>
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a0:	b25b      	sxtb	r3, r3
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a6:	d103      	bne.n	80062b0 <xQueueReceive+0x138>
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b0:	f001 fc88 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b4:	1d3a      	adds	r2, r7, #4
 80062b6:	f107 0310 	add.w	r3, r7, #16
 80062ba:	4611      	mov	r1, r2
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 ffb9 	bl	8007234 <xTaskCheckForTimeOut>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d123      	bne.n	8006310 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ca:	f000 fabb 	bl	8006844 <prvIsQueueEmpty>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d017      	beq.n	8006304 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	3324      	adds	r3, #36	; 0x24
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4611      	mov	r1, r2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 ff0d 	bl	80070fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e4:	f000 fa5c 	bl	80067a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062e8:	f000 fd30 	bl	8006d4c <xTaskResumeAll>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d189      	bne.n	8006206 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062f2:	4b10      	ldr	r3, [pc, #64]	; (8006334 <xQueueReceive+0x1bc>)
 80062f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	e780      	b.n	8006206 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006306:	f000 fa4b 	bl	80067a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800630a:	f000 fd1f 	bl	8006d4c <xTaskResumeAll>
 800630e:	e77a      	b.n	8006206 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006312:	f000 fa45 	bl	80067a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006316:	f000 fd19 	bl	8006d4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800631c:	f000 fa92 	bl	8006844 <prvIsQueueEmpty>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	f43f af6f 	beq.w	8006206 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800632a:	4618      	mov	r0, r3
 800632c:	3730      	adds	r7, #48	; 0x30
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08e      	sub	sp, #56	; 0x38
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800634a:	2300      	movs	r3, #0
 800634c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	623b      	str	r3, [r7, #32]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	61fb      	str	r3, [r7, #28]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006388:	f001 f89c 	bl	80074c4 <xTaskGetSchedulerState>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <xQueueSemaphoreTake+0x60>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d101      	bne.n	800639c <xQueueSemaphoreTake+0x64>
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <xQueueSemaphoreTake+0x66>
 800639c:	2300      	movs	r3, #0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	61bb      	str	r3, [r7, #24]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b8:	f001 fbd4 	bl	8007b64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d024      	beq.n	8006412 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	1e5a      	subs	r2, r3, #1
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d104      	bne.n	80063e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063d8:	f001 fa1c 	bl	8007814 <pvTaskIncrementMutexHeldCount>
 80063dc:	4602      	mov	r2, r0
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00f      	beq.n	800640a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	3310      	adds	r3, #16
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fea8 	bl	8007144 <xTaskRemoveFromEventList>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063fa:	4b54      	ldr	r3, [pc, #336]	; (800654c <xQueueSemaphoreTake+0x214>)
 80063fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800640a:	f001 fbdb 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 800640e:	2301      	movs	r3, #1
 8006410:	e097      	b.n	8006542 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d111      	bne.n	800643c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	617b      	str	r3, [r7, #20]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006434:	f001 fbc6 	bl	8007bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006438:	2300      	movs	r3, #0
 800643a:	e082      	b.n	8006542 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800643c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006442:	f107 030c 	add.w	r3, r7, #12
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fede 	bl	8007208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006450:	f001 fbb8 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006454:	f000 fc6c 	bl	8006d30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006458:	f001 fb84 	bl	8007b64 <vPortEnterCritical>
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006462:	b25b      	sxtb	r3, r3
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006468:	d103      	bne.n	8006472 <xQueueSemaphoreTake+0x13a>
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006478:	b25b      	sxtb	r3, r3
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647e:	d103      	bne.n	8006488 <xQueueSemaphoreTake+0x150>
 8006480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006488:	f001 fb9c 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800648c:	463a      	mov	r2, r7
 800648e:	f107 030c 	add.w	r3, r7, #12
 8006492:	4611      	mov	r1, r2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fecd 	bl	8007234 <xTaskCheckForTimeOut>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d132      	bne.n	8006506 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064a2:	f000 f9cf 	bl	8006844 <prvIsQueueEmpty>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d026      	beq.n	80064fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d109      	bne.n	80064c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064b4:	f001 fb56 	bl	8007b64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 f81f 	bl	8007500 <xTaskPriorityInherit>
 80064c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064c4:	f001 fb7e 	bl	8007bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	3324      	adds	r3, #36	; 0x24
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	4611      	mov	r1, r2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fe13 	bl	80070fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d8:	f000 f962 	bl	80067a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064dc:	f000 fc36 	bl	8006d4c <xTaskResumeAll>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f47f af68 	bne.w	80063b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064e8:	4b18      	ldr	r3, [pc, #96]	; (800654c <xQueueSemaphoreTake+0x214>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	e75e      	b.n	80063b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064fc:	f000 f950 	bl	80067a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006500:	f000 fc24 	bl	8006d4c <xTaskResumeAll>
 8006504:	e758      	b.n	80063b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006508:	f000 f94a 	bl	80067a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800650c:	f000 fc1e 	bl	8006d4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006512:	f000 f997 	bl	8006844 <prvIsQueueEmpty>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	f43f af4d 	beq.w	80063b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006524:	f001 fb1e 	bl	8007b64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800652a:	f000 f891 	bl	8006650 <prvGetDisinheritPriorityAfterTimeout>
 800652e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006536:	4618      	mov	r0, r3
 8006538:	f001 f8de 	bl	80076f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800653c:	f001 fb42 	bl	8007bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006542:	4618      	mov	r0, r3
 8006544:	3738      	adds	r7, #56	; 0x38
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	; 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	623b      	str	r3, [r7, #32]
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <xQueueReceiveFromISR+0x3a>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <xQueueReceiveFromISR+0x3e>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <xQueueReceiveFromISR+0x40>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	61fb      	str	r3, [r7, #28]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065aa:	f001 fbbd 	bl	8007d28 <vPortValidateInterruptPriority>
	__asm volatile
 80065ae:	f3ef 8211 	mrs	r2, BASEPRI
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	61ba      	str	r2, [r7, #24]
 80065c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d02f      	beq.n	8006636 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e4:	f000 f8b6 	bl	8006754 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065f8:	d112      	bne.n	8006620 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d016      	beq.n	8006630 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	3310      	adds	r3, #16
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fd9c 	bl	8007144 <xTaskRemoveFromEventList>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00e      	beq.n	8006630 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	e007      	b.n	8006630 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006624:	3301      	adds	r3, #1
 8006626:	b2db      	uxtb	r3, r3
 8006628:	b25a      	sxtb	r2, r3
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006630:	2301      	movs	r3, #1
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	e001      	b.n	800663a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f383 8811 	msr	BASEPRI, r3
}
 8006644:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006648:	4618      	mov	r0, r3
 800664a:	3738      	adds	r7, #56	; 0x38
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b00      	cmp	r3, #0
 800665e:	d006      	beq.n	800666e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f1c3 0307 	rsb	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	e001      	b.n	8006672 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006672:	68fb      	ldr	r3, [r7, #12]
	}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10d      	bne.n	80066ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d14d      	bne.n	8006742 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 ff9e 	bl	80075ec <xTaskPriorityDisinherit>
 80066b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	609a      	str	r2, [r3, #8]
 80066b8:	e043      	b.n	8006742 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d119      	bne.n	80066f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6858      	ldr	r0, [r3, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	461a      	mov	r2, r3
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	f00c fb4b 	bl	8012d66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	441a      	add	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d32b      	bcc.n	8006742 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	e026      	b.n	8006742 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68d8      	ldr	r0, [r3, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	461a      	mov	r2, r3
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	f00c fb31 	bl	8012d66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	425b      	negs	r3, r3
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d207      	bcs.n	8006730 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	425b      	negs	r3, r3
 800672a:	441a      	add	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d105      	bne.n	8006742 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	3b01      	subs	r3, #1
 8006740:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800674a:	697b      	ldr	r3, [r7, #20]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d018      	beq.n	8006798 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	441a      	add	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	d303      	bcc.n	8006788 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68d9      	ldr	r1, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	461a      	mov	r2, r3
 8006792:	6838      	ldr	r0, [r7, #0]
 8006794:	f00c fae7 	bl	8012d66 <memcpy>
	}
}
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a8:	f001 f9dc 	bl	8007b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067b4:	e011      	b.n	80067da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d012      	beq.n	80067e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3324      	adds	r3, #36	; 0x24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fcbe 	bl	8007144 <xTaskRemoveFromEventList>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067ce:	f000 fd93 	bl	80072f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	dce9      	bgt.n	80067b6 <prvUnlockQueue+0x16>
 80067e2:	e000      	b.n	80067e6 <prvUnlockQueue+0x46>
					break;
 80067e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	22ff      	movs	r2, #255	; 0xff
 80067ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067ee:	f001 f9e9 	bl	8007bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067f2:	f001 f9b7 	bl	8007b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067fe:	e011      	b.n	8006824 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d012      	beq.n	800682e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	3310      	adds	r3, #16
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fc99 	bl	8007144 <xTaskRemoveFromEventList>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006818:	f000 fd6e 	bl	80072f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	3b01      	subs	r3, #1
 8006820:	b2db      	uxtb	r3, r3
 8006822:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006828:	2b00      	cmp	r3, #0
 800682a:	dce9      	bgt.n	8006800 <prvUnlockQueue+0x60>
 800682c:	e000      	b.n	8006830 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800682e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	22ff      	movs	r2, #255	; 0xff
 8006834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006838:	f001 f9c4 	bl	8007bc4 <vPortExitCritical>
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800684c:	f001 f98a 	bl	8007b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d102      	bne.n	800685e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	e001      	b.n	8006862 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006862:	f001 f9af 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 8006866:	68fb      	ldr	r3, [r7, #12]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006878:	f001 f974 	bl	8007b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006884:	429a      	cmp	r2, r3
 8006886:	d102      	bne.n	800688e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e001      	b.n	8006892 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006892:	f001 f997 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 8006896:	68fb      	ldr	r3, [r7, #12]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08e      	sub	sp, #56	; 0x38
 80068a4:	af04      	add	r7, sp, #16
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	623b      	str	r3, [r7, #32]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	61fb      	str	r3, [r7, #28]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068e6:	23b4      	movs	r3, #180	; 0xb4
 80068e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2bb4      	cmp	r3, #180	; 0xb4
 80068ee:	d00a      	beq.n	8006906 <xTaskCreateStatic+0x66>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	61bb      	str	r3, [r7, #24]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006906:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01e      	beq.n	800694c <xTaskCreateStatic+0xac>
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01b      	beq.n	800694c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800691c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	2202      	movs	r2, #2
 8006922:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006926:	2300      	movs	r3, #0
 8006928:	9303      	str	r3, [sp, #12]
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	9302      	str	r3, [sp, #8]
 800692e:	f107 0314 	add.w	r3, r7, #20
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f850 	bl	80069e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006946:	f000 f8eb 	bl	8006b20 <prvAddNewTaskToReadyList>
 800694a:	e001      	b.n	8006950 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006950:	697b      	ldr	r3, [r7, #20]
	}
 8006952:	4618      	mov	r0, r3
 8006954:	3728      	adds	r7, #40	; 0x28
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800695a:	b580      	push	{r7, lr}
 800695c:	b08c      	sub	sp, #48	; 0x30
 800695e:	af04      	add	r7, sp, #16
 8006960:	60f8      	str	r0, [r7, #12]
 8006962:	60b9      	str	r1, [r7, #8]
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	4613      	mov	r3, r2
 8006968:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4618      	mov	r0, r3
 8006970:	f001 fa1a 	bl	8007da8 <pvPortMalloc>
 8006974:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800697c:	20b4      	movs	r0, #180	; 0xb4
 800697e:	f001 fa13 	bl	8007da8 <pvPortMalloc>
 8006982:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
 8006990:	e005      	b.n	800699e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f001 fad4 	bl	8007f40 <vPortFree>
 8006998:	e001      	b.n	800699e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d017      	beq.n	80069d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	2300      	movs	r3, #0
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f80e 	bl	80069e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069c8:	69f8      	ldr	r0, [r7, #28]
 80069ca:	f000 f8a9 	bl	8006b20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069ce:	2301      	movs	r3, #1
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	e002      	b.n	80069da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069da:	69bb      	ldr	r3, [r7, #24]
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80069fc:	440b      	add	r3, r1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	f023 0307 	bic.w	r3, r3, #7
 8006a0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <prvInitialiseNewTask+0x48>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	617b      	str	r3, [r7, #20]
}
 8006a28:	bf00      	nop
 8006a2a:	e7fe      	b.n	8006a2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01f      	beq.n	8006a72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e012      	b.n	8006a5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	7819      	ldrb	r1, [r3, #0]
 8006a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	3334      	adds	r3, #52	; 0x34
 8006a48:	460a      	mov	r2, r1
 8006a4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d9e9      	bls.n	8006a38 <prvInitialiseNewTask+0x54>
 8006a64:	e000      	b.n	8006a68 <prvInitialiseNewTask+0x84>
			{
				break;
 8006a66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a70:	e003      	b.n	8006a7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d901      	bls.n	8006a84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a80:	2306      	movs	r3, #6
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	2200      	movs	r2, #0
 8006a94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe ff2c 	bl	80058f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe ff27 	bl	80058f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	f1c3 0207 	rsb	r2, r3, #7
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	334c      	adds	r3, #76	; 0x4c
 8006ad4:	2260      	movs	r2, #96	; 0x60
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f00c f952 	bl	8012d82 <memset>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	4a0c      	ldr	r2, [pc, #48]	; (8006b14 <prvInitialiseNewTask+0x130>)
 8006ae2:	651a      	str	r2, [r3, #80]	; 0x50
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	; (8006b18 <prvInitialiseNewTask+0x134>)
 8006ae8:	655a      	str	r2, [r3, #84]	; 0x54
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	4a0b      	ldr	r2, [pc, #44]	; (8006b1c <prvInitialiseNewTask+0x138>)
 8006aee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	68f9      	ldr	r1, [r7, #12]
 8006af4:	69b8      	ldr	r0, [r7, #24]
 8006af6:	f000 ff07 	bl	8007908 <pxPortInitialiseStack>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0c:	bf00      	nop
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	08016a00 	.word	0x08016a00
 8006b18:	08016a20 	.word	0x08016a20
 8006b1c:	080169e0 	.word	0x080169e0

08006b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b28:	f001 f81c 	bl	8007b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b2c:	4b2a      	ldr	r3, [pc, #168]	; (8006bd8 <prvAddNewTaskToReadyList+0xb8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3301      	adds	r3, #1
 8006b32:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <prvAddNewTaskToReadyList+0xb8>)
 8006b34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b36:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <prvAddNewTaskToReadyList+0xbc>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b3e:	4a27      	ldr	r2, [pc, #156]	; (8006bdc <prvAddNewTaskToReadyList+0xbc>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b44:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <prvAddNewTaskToReadyList+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d110      	bne.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b4c:	f000 fbf8 	bl	8007340 <prvInitialiseTaskLists>
 8006b50:	e00d      	b.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <prvAddNewTaskToReadyList+0xc0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d109      	bne.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b5a:	4b20      	ldr	r3, [pc, #128]	; (8006bdc <prvAddNewTaskToReadyList+0xbc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d802      	bhi.n	8006b6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b68:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <prvAddNewTaskToReadyList+0xbc>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b6e:	4b1d      	ldr	r3, [pc, #116]	; (8006be4 <prvAddNewTaskToReadyList+0xc4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	4a1b      	ldr	r2, [pc, #108]	; (8006be4 <prvAddNewTaskToReadyList+0xc4>)
 8006b76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <prvAddNewTaskToReadyList+0xc8>)
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4a15      	ldr	r2, [pc, #84]	; (8006bec <prvAddNewTaskToReadyList+0xcc>)
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f7fe feb6 	bl	8005912 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ba6:	f001 f80d 	bl	8007bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006baa:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <prvAddNewTaskToReadyList+0xc0>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <prvAddNewTaskToReadyList+0xbc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d207      	bcs.n	8006bd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <prvAddNewTaskToReadyList+0xd0>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	24004fa8 	.word	0x24004fa8
 8006bdc:	24004ea8 	.word	0x24004ea8
 8006be0:	24004fb4 	.word	0x24004fb4
 8006be4:	24004fc4 	.word	0x24004fc4
 8006be8:	24004fb0 	.word	0x24004fb0
 8006bec:	24004eac 	.word	0x24004eac
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d017      	beq.n	8006c36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c06:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <vTaskDelay+0x60>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <vTaskDelay+0x30>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	60bb      	str	r3, [r7, #8]
}
 8006c20:	bf00      	nop
 8006c22:	e7fe      	b.n	8006c22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c24:	f000 f884 	bl	8006d30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c28:	2100      	movs	r1, #0
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fe06 	bl	800783c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c30:	f000 f88c 	bl	8006d4c <xTaskResumeAll>
 8006c34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <vTaskDelay+0x64>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	24004fd0 	.word	0x24004fd0
 8006c58:	e000ed04 	.word	0xe000ed04

08006c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08a      	sub	sp, #40	; 0x28
 8006c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c6a:	463a      	mov	r2, r7
 8006c6c:	1d39      	adds	r1, r7, #4
 8006c6e:	f107 0308 	add.w	r3, r7, #8
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7f9 fb8c 	bl	8000390 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	9202      	str	r2, [sp, #8]
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2300      	movs	r3, #0
 8006c88:	460a      	mov	r2, r1
 8006c8a:	4921      	ldr	r1, [pc, #132]	; (8006d10 <vTaskStartScheduler+0xb4>)
 8006c8c:	4821      	ldr	r0, [pc, #132]	; (8006d14 <vTaskStartScheduler+0xb8>)
 8006c8e:	f7ff fe07 	bl	80068a0 <xTaskCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <vTaskStartScheduler+0xbc>)
 8006c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c98:	4b1f      	ldr	r3, [pc, #124]	; (8006d18 <vTaskStartScheduler+0xbc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e001      	b.n	8006caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d11b      	bne.n	8006ce8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cc4:	4b15      	ldr	r3, [pc, #84]	; (8006d1c <vTaskStartScheduler+0xc0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	334c      	adds	r3, #76	; 0x4c
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <vTaskStartScheduler+0xc4>)
 8006ccc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cce:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <vTaskStartScheduler+0xc8>)
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <vTaskStartScheduler+0xcc>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cdc:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <vTaskStartScheduler+0xd0>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ce2:	f000 fe9d 	bl	8007a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ce6:	e00e      	b.n	8006d06 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cee:	d10a      	bne.n	8006d06 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <vTaskStartScheduler+0xa8>
}
 8006d06:	bf00      	nop
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	08013e08 	.word	0x08013e08
 8006d14:	08007311 	.word	0x08007311
 8006d18:	24004fcc 	.word	0x24004fcc
 8006d1c:	24004ea8 	.word	0x24004ea8
 8006d20:	24000034 	.word	0x24000034
 8006d24:	24004fc8 	.word	0x24004fc8
 8006d28:	24004fb4 	.word	0x24004fb4
 8006d2c:	24004fac 	.word	0x24004fac

08006d30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <vTaskSuspendAll+0x18>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	4a03      	ldr	r2, [pc, #12]	; (8006d48 <vTaskSuspendAll+0x18>)
 8006d3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	24004fd0 	.word	0x24004fd0

08006d4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d5a:	4b41      	ldr	r3, [pc, #260]	; (8006e60 <xTaskResumeAll+0x114>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	603b      	str	r3, [r7, #0]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d78:	f000 fef4 	bl	8007b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d7c:	4b38      	ldr	r3, [pc, #224]	; (8006e60 <xTaskResumeAll+0x114>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	4a37      	ldr	r2, [pc, #220]	; (8006e60 <xTaskResumeAll+0x114>)
 8006d84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d86:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <xTaskResumeAll+0x114>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d161      	bne.n	8006e52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d8e:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <xTaskResumeAll+0x118>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d05d      	beq.n	8006e52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d96:	e02e      	b.n	8006df6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d98:	4b33      	ldr	r3, [pc, #204]	; (8006e68 <xTaskResumeAll+0x11c>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3318      	adds	r3, #24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe fe11 	bl	80059cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3304      	adds	r3, #4
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fe0c 	bl	80059cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	2201      	movs	r2, #1
 8006dba:	409a      	lsls	r2, r3
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <xTaskResumeAll+0x120>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	4a2a      	ldr	r2, [pc, #168]	; (8006e6c <xTaskResumeAll+0x120>)
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dca:	4613      	mov	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <xTaskResumeAll+0x124>)
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f7fe fd98 	bl	8005912 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de6:	4b23      	ldr	r3, [pc, #140]	; (8006e74 <xTaskResumeAll+0x128>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d302      	bcc.n	8006df6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006df0:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <xTaskResumeAll+0x12c>)
 8006df2:	2201      	movs	r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006df6:	4b1c      	ldr	r3, [pc, #112]	; (8006e68 <xTaskResumeAll+0x11c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1cc      	bne.n	8006d98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e04:	f000 fb3e 	bl	8007484 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e08:	4b1c      	ldr	r3, [pc, #112]	; (8006e7c <xTaskResumeAll+0x130>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d010      	beq.n	8006e36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e14:	f000 f858 	bl	8006ec8 <xTaskIncrementTick>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e1e:	4b16      	ldr	r3, [pc, #88]	; (8006e78 <xTaskResumeAll+0x12c>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3b01      	subs	r3, #1
 8006e28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1f1      	bne.n	8006e14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e30:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <xTaskResumeAll+0x130>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <xTaskResumeAll+0x12c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e42:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <xTaskResumeAll+0x134>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e52:	f000 feb7 	bl	8007bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006e56:	68bb      	ldr	r3, [r7, #8]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	24004fd0 	.word	0x24004fd0
 8006e64:	24004fa8 	.word	0x24004fa8
 8006e68:	24004f68 	.word	0x24004f68
 8006e6c:	24004fb0 	.word	0x24004fb0
 8006e70:	24004eac 	.word	0x24004eac
 8006e74:	24004ea8 	.word	0x24004ea8
 8006e78:	24004fbc 	.word	0x24004fbc
 8006e7c:	24004fb8 	.word	0x24004fb8
 8006e80:	e000ed04 	.word	0xe000ed04

08006e84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e8a:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <xTaskGetTickCount+0x1c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e90:	687b      	ldr	r3, [r7, #4]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	24004fac 	.word	0x24004fac

08006ea4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006eaa:	f000 ff3d 	bl	8007d28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <xTaskGetTickCountFromISR+0x20>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006eb8:	683b      	ldr	r3, [r7, #0]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	24004fac 	.word	0x24004fac

08006ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed2:	4b4e      	ldr	r3, [pc, #312]	; (800700c <xTaskIncrementTick+0x144>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f040 808e 	bne.w	8006ff8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006edc:	4b4c      	ldr	r3, [pc, #304]	; (8007010 <xTaskIncrementTick+0x148>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ee4:	4a4a      	ldr	r2, [pc, #296]	; (8007010 <xTaskIncrementTick+0x148>)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d120      	bne.n	8006f32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ef0:	4b48      	ldr	r3, [pc, #288]	; (8007014 <xTaskIncrementTick+0x14c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <xTaskIncrementTick+0x48>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	603b      	str	r3, [r7, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	e7fe      	b.n	8006f0e <xTaskIncrementTick+0x46>
 8006f10:	4b40      	ldr	r3, [pc, #256]	; (8007014 <xTaskIncrementTick+0x14c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	4b40      	ldr	r3, [pc, #256]	; (8007018 <xTaskIncrementTick+0x150>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a3e      	ldr	r2, [pc, #248]	; (8007014 <xTaskIncrementTick+0x14c>)
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	4a3e      	ldr	r2, [pc, #248]	; (8007018 <xTaskIncrementTick+0x150>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	4b3d      	ldr	r3, [pc, #244]	; (800701c <xTaskIncrementTick+0x154>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a3c      	ldr	r2, [pc, #240]	; (800701c <xTaskIncrementTick+0x154>)
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	f000 faa9 	bl	8007484 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f32:	4b3b      	ldr	r3, [pc, #236]	; (8007020 <xTaskIncrementTick+0x158>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d348      	bcc.n	8006fce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f3c:	4b35      	ldr	r3, [pc, #212]	; (8007014 <xTaskIncrementTick+0x14c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f46:	4b36      	ldr	r3, [pc, #216]	; (8007020 <xTaskIncrementTick+0x158>)
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f4c:	601a      	str	r2, [r3, #0]
					break;
 8006f4e:	e03e      	b.n	8006fce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f50:	4b30      	ldr	r3, [pc, #192]	; (8007014 <xTaskIncrementTick+0x14c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d203      	bcs.n	8006f70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f68:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <xTaskIncrementTick+0x158>)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f6e:	e02e      	b.n	8006fce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fd29 	bl	80059cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	3318      	adds	r3, #24
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fd20 	bl	80059cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	2201      	movs	r2, #1
 8006f92:	409a      	lsls	r2, r3
 8006f94:	4b23      	ldr	r3, [pc, #140]	; (8007024 <xTaskIncrementTick+0x15c>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	4a22      	ldr	r2, [pc, #136]	; (8007024 <xTaskIncrementTick+0x15c>)
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4a1f      	ldr	r2, [pc, #124]	; (8007028 <xTaskIncrementTick+0x160>)
 8006fac:	441a      	add	r2, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	f7fe fcac 	bl	8005912 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	4b1b      	ldr	r3, [pc, #108]	; (800702c <xTaskIncrementTick+0x164>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d3b9      	bcc.n	8006f3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fcc:	e7b6      	b.n	8006f3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fce:	4b17      	ldr	r3, [pc, #92]	; (800702c <xTaskIncrementTick+0x164>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4914      	ldr	r1, [pc, #80]	; (8007028 <xTaskIncrementTick+0x160>)
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d901      	bls.n	8006fea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fea:	4b11      	ldr	r3, [pc, #68]	; (8007030 <xTaskIncrementTick+0x168>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d007      	beq.n	8007002 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e004      	b.n	8007002 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <xTaskIncrementTick+0x16c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <xTaskIncrementTick+0x16c>)
 8007000:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007002:	697b      	ldr	r3, [r7, #20]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	24004fd0 	.word	0x24004fd0
 8007010:	24004fac 	.word	0x24004fac
 8007014:	24004f60 	.word	0x24004f60
 8007018:	24004f64 	.word	0x24004f64
 800701c:	24004fc0 	.word	0x24004fc0
 8007020:	24004fc8 	.word	0x24004fc8
 8007024:	24004fb0 	.word	0x24004fb0
 8007028:	24004eac 	.word	0x24004eac
 800702c:	24004ea8 	.word	0x24004ea8
 8007030:	24004fbc 	.word	0x24004fbc
 8007034:	24004fb8 	.word	0x24004fb8

08007038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <vTaskSwitchContext+0xac>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007046:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <vTaskSwitchContext+0xb0>)
 8007048:	2201      	movs	r2, #1
 800704a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800704c:	e044      	b.n	80070d8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800704e:	4b26      	ldr	r3, [pc, #152]	; (80070e8 <vTaskSwitchContext+0xb0>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007054:	4b25      	ldr	r3, [pc, #148]	; (80070ec <vTaskSwitchContext+0xb4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	fab3 f383 	clz	r3, r3
 8007060:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	f1c3 031f 	rsb	r3, r3, #31
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	4921      	ldr	r1, [pc, #132]	; (80070f0 <vTaskSwitchContext+0xb8>)
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <vTaskSwitchContext+0x5c>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vTaskSwitchContext+0x5a>
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	4613      	mov	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <vTaskSwitchContext+0xb8>)
 80070a0:	4413      	add	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	685a      	ldr	r2, [r3, #4]
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3308      	adds	r3, #8
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d104      	bne.n	80070c4 <vTaskSwitchContext+0x8c>
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	605a      	str	r2, [r3, #4]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	4a0a      	ldr	r2, [pc, #40]	; (80070f4 <vTaskSwitchContext+0xbc>)
 80070cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <vTaskSwitchContext+0xbc>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	334c      	adds	r3, #76	; 0x4c
 80070d4:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <vTaskSwitchContext+0xc0>)
 80070d6:	6013      	str	r3, [r2, #0]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	24004fd0 	.word	0x24004fd0
 80070e8:	24004fbc 	.word	0x24004fbc
 80070ec:	24004fb0 	.word	0x24004fb0
 80070f0:	24004eac 	.word	0x24004eac
 80070f4:	24004ea8 	.word	0x24004ea8
 80070f8:	24000034 	.word	0x24000034

080070fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	60fb      	str	r3, [r7, #12]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007122:	4b07      	ldr	r3, [pc, #28]	; (8007140 <vTaskPlaceOnEventList+0x44>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3318      	adds	r3, #24
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fe fc15 	bl	800595a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007130:	2101      	movs	r1, #1
 8007132:	6838      	ldr	r0, [r7, #0]
 8007134:	f000 fb82 	bl	800783c <prvAddCurrentTaskToDelayedList>
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	24004ea8 	.word	0x24004ea8

08007144 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	60fb      	str	r3, [r7, #12]
}
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	3318      	adds	r3, #24
 8007174:	4618      	mov	r0, r3
 8007176:	f7fe fc29 	bl	80059cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800717a:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <xTaskRemoveFromEventList+0xac>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11c      	bne.n	80071bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	3304      	adds	r3, #4
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fc20 	bl	80059cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	2201      	movs	r2, #1
 8007192:	409a      	lsls	r2, r3
 8007194:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <xTaskRemoveFromEventList+0xb0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4313      	orrs	r3, r2
 800719a:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <xTaskRemoveFromEventList+0xb0>)
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4a13      	ldr	r2, [pc, #76]	; (80071f8 <xTaskRemoveFromEventList+0xb4>)
 80071ac:	441a      	add	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4619      	mov	r1, r3
 80071b4:	4610      	mov	r0, r2
 80071b6:	f7fe fbac 	bl	8005912 <vListInsertEnd>
 80071ba:	e005      	b.n	80071c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	3318      	adds	r3, #24
 80071c0:	4619      	mov	r1, r3
 80071c2:	480e      	ldr	r0, [pc, #56]	; (80071fc <xTaskRemoveFromEventList+0xb8>)
 80071c4:	f7fe fba5 	bl	8005912 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <xTaskRemoveFromEventList+0xbc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d905      	bls.n	80071e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <xTaskRemoveFromEventList+0xc0>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e001      	b.n	80071e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071e6:	697b      	ldr	r3, [r7, #20]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	24004fd0 	.word	0x24004fd0
 80071f4:	24004fb0 	.word	0x24004fb0
 80071f8:	24004eac 	.word	0x24004eac
 80071fc:	24004f68 	.word	0x24004f68
 8007200:	24004ea8 	.word	0x24004ea8
 8007204:	24004fbc 	.word	0x24004fbc

08007208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <vTaskInternalSetTimeOutState+0x24>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <vTaskInternalSetTimeOutState+0x28>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	605a      	str	r2, [r3, #4]
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	24004fc0 	.word	0x24004fc0
 8007230:	24004fac 	.word	0x24004fac

08007234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	613b      	str	r3, [r7, #16]
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10a      	bne.n	8007276 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	60fb      	str	r3, [r7, #12]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007276:	f000 fc75 	bl	8007b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <xTaskCheckForTimeOut+0xbc>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007292:	d102      	bne.n	800729a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e023      	b.n	80072e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <xTaskCheckForTimeOut+0xc0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d007      	beq.n	80072b6 <xTaskCheckForTimeOut+0x82>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d302      	bcc.n	80072b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	61fb      	str	r3, [r7, #28]
 80072b4:	e015      	b.n	80072e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d20b      	bcs.n	80072d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	1ad2      	subs	r2, r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f7ff ff9b 	bl	8007208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	e004      	b.n	80072e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2200      	movs	r2, #0
 80072dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072de:	2301      	movs	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072e2:	f000 fc6f 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 80072e6:	69fb      	ldr	r3, [r7, #28]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	24004fac 	.word	0x24004fac
 80072f4:	24004fc0 	.word	0x24004fc0

080072f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <vTaskMissedYield+0x14>)
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
}
 8007302:	bf00      	nop
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	24004fbc 	.word	0x24004fbc

08007310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007318:	f000 f852 	bl	80073c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <prvIdleTask+0x28>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d9f9      	bls.n	8007318 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <prvIdleTask+0x2c>)
 8007326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007334:	e7f0      	b.n	8007318 <prvIdleTask+0x8>
 8007336:	bf00      	nop
 8007338:	24004eac 	.word	0x24004eac
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007346:	2300      	movs	r3, #0
 8007348:	607b      	str	r3, [r7, #4]
 800734a:	e00c      	b.n	8007366 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4a12      	ldr	r2, [pc, #72]	; (80073a0 <prvInitialiseTaskLists+0x60>)
 8007358:	4413      	add	r3, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe faac 	bl	80058b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3301      	adds	r3, #1
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b06      	cmp	r3, #6
 800736a:	d9ef      	bls.n	800734c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800736c:	480d      	ldr	r0, [pc, #52]	; (80073a4 <prvInitialiseTaskLists+0x64>)
 800736e:	f7fe faa3 	bl	80058b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007372:	480d      	ldr	r0, [pc, #52]	; (80073a8 <prvInitialiseTaskLists+0x68>)
 8007374:	f7fe faa0 	bl	80058b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007378:	480c      	ldr	r0, [pc, #48]	; (80073ac <prvInitialiseTaskLists+0x6c>)
 800737a:	f7fe fa9d 	bl	80058b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800737e:	480c      	ldr	r0, [pc, #48]	; (80073b0 <prvInitialiseTaskLists+0x70>)
 8007380:	f7fe fa9a 	bl	80058b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007384:	480b      	ldr	r0, [pc, #44]	; (80073b4 <prvInitialiseTaskLists+0x74>)
 8007386:	f7fe fa97 	bl	80058b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800738a:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <prvInitialiseTaskLists+0x78>)
 800738c:	4a05      	ldr	r2, [pc, #20]	; (80073a4 <prvInitialiseTaskLists+0x64>)
 800738e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007390:	4b0a      	ldr	r3, [pc, #40]	; (80073bc <prvInitialiseTaskLists+0x7c>)
 8007392:	4a05      	ldr	r2, [pc, #20]	; (80073a8 <prvInitialiseTaskLists+0x68>)
 8007394:	601a      	str	r2, [r3, #0]
}
 8007396:	bf00      	nop
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	24004eac 	.word	0x24004eac
 80073a4:	24004f38 	.word	0x24004f38
 80073a8:	24004f4c 	.word	0x24004f4c
 80073ac:	24004f68 	.word	0x24004f68
 80073b0:	24004f7c 	.word	0x24004f7c
 80073b4:	24004f94 	.word	0x24004f94
 80073b8:	24004f60 	.word	0x24004f60
 80073bc:	24004f64 	.word	0x24004f64

080073c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073c6:	e019      	b.n	80073fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073c8:	f000 fbcc 	bl	8007b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <prvCheckTasksWaitingTermination+0x50>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe faf7 	bl	80059cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <prvCheckTasksWaitingTermination+0x54>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	4a0b      	ldr	r2, [pc, #44]	; (8007414 <prvCheckTasksWaitingTermination+0x54>)
 80073e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <prvCheckTasksWaitingTermination+0x58>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <prvCheckTasksWaitingTermination+0x58>)
 80073f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073f2:	f000 fbe7 	bl	8007bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f810 	bl	800741c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <prvCheckTasksWaitingTermination+0x58>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e1      	bne.n	80073c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	24004f7c 	.word	0x24004f7c
 8007414:	24004fa8 	.word	0x24004fa8
 8007418:	24004f90 	.word	0x24004f90

0800741c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	334c      	adds	r3, #76	; 0x4c
 8007428:	4618      	mov	r0, r3
 800742a:	f00b fdab 	bl	8012f84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	4618      	mov	r0, r3
 800743e:	f000 fd7f 	bl	8007f40 <vPortFree>
				vPortFree( pxTCB );
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fd7c 	bl	8007f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007448:	e018      	b.n	800747c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007450:	2b01      	cmp	r3, #1
 8007452:	d103      	bne.n	800745c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fd73 	bl	8007f40 <vPortFree>
	}
 800745a:	e00f      	b.n	800747c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007462:	2b02      	cmp	r3, #2
 8007464:	d00a      	beq.n	800747c <prvDeleteTCB+0x60>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	60fb      	str	r3, [r7, #12]
}
 8007478:	bf00      	nop
 800747a:	e7fe      	b.n	800747a <prvDeleteTCB+0x5e>
	}
 800747c:	bf00      	nop
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800748a:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <prvResetNextTaskUnblockTime+0x38>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800749c:	e008      	b.n	80074b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800749e:	4b07      	ldr	r3, [pc, #28]	; (80074bc <prvResetNextTaskUnblockTime+0x38>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4a04      	ldr	r2, [pc, #16]	; (80074c0 <prvResetNextTaskUnblockTime+0x3c>)
 80074ae:	6013      	str	r3, [r2, #0]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	24004f60 	.word	0x24004f60
 80074c0:	24004fc8 	.word	0x24004fc8

080074c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <xTaskGetSchedulerState+0x34>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d102      	bne.n	80074d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074d2:	2301      	movs	r3, #1
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	e008      	b.n	80074ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d8:	4b08      	ldr	r3, [pc, #32]	; (80074fc <xTaskGetSchedulerState+0x38>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d102      	bne.n	80074e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074e0:	2302      	movs	r3, #2
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e001      	b.n	80074ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074ea:	687b      	ldr	r3, [r7, #4]
	}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	24004fb4 	.word	0x24004fb4
 80074fc:	24004fd0 	.word	0x24004fd0

08007500 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d05e      	beq.n	80075d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <xTaskPriorityInherit+0xe0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d24e      	bcs.n	80075c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	2b00      	cmp	r3, #0
 800752a:	db06      	blt.n	800753a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800752c:	4b2c      	ldr	r3, [pc, #176]	; (80075e0 <xTaskPriorityInherit+0xe0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	f1c3 0207 	rsb	r2, r3, #7
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6959      	ldr	r1, [r3, #20]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4a26      	ldr	r2, [pc, #152]	; (80075e4 <xTaskPriorityInherit+0xe4>)
 800754c:	4413      	add	r3, r2
 800754e:	4299      	cmp	r1, r3
 8007550:	d12f      	bne.n	80075b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	3304      	adds	r3, #4
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fa38 	bl	80059cc <uxListRemove>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	2201      	movs	r2, #1
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	43da      	mvns	r2, r3
 800756e:	4b1e      	ldr	r3, [pc, #120]	; (80075e8 <xTaskPriorityInherit+0xe8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4013      	ands	r3, r2
 8007574:	4a1c      	ldr	r2, [pc, #112]	; (80075e8 <xTaskPriorityInherit+0xe8>)
 8007576:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007578:	4b19      	ldr	r3, [pc, #100]	; (80075e0 <xTaskPriorityInherit+0xe0>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	2201      	movs	r2, #1
 8007588:	409a      	lsls	r2, r3
 800758a:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <xTaskPriorityInherit+0xe8>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4313      	orrs	r3, r2
 8007590:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <xTaskPriorityInherit+0xe8>)
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	4a10      	ldr	r2, [pc, #64]	; (80075e4 <xTaskPriorityInherit+0xe4>)
 80075a2:	441a      	add	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4619      	mov	r1, r3
 80075aa:	4610      	mov	r0, r2
 80075ac:	f7fe f9b1 	bl	8005912 <vListInsertEnd>
 80075b0:	e004      	b.n	80075bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075b2:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <xTaskPriorityInherit+0xe0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80075bc:	2301      	movs	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e008      	b.n	80075d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <xTaskPriorityInherit+0xe0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d201      	bcs.n	80075d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80075d4:	68fb      	ldr	r3, [r7, #12]
	}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	24004ea8 	.word	0x24004ea8
 80075e4:	24004eac 	.word	0x24004eac
 80075e8:	24004fb0 	.word	0x24004fb0

080075ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d06e      	beq.n	80076e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007602:	4b3a      	ldr	r3, [pc, #232]	; (80076ec <xTaskPriorityDisinherit+0x100>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d00a      	beq.n	8007622 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	60fb      	str	r3, [r7, #12]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10a      	bne.n	8007640 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	60bb      	str	r3, [r7, #8]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007644:	1e5a      	subs	r2, r3, #1
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	429a      	cmp	r2, r3
 8007654:	d044      	beq.n	80076e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765a:	2b00      	cmp	r3, #0
 800765c:	d140      	bne.n	80076e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	3304      	adds	r3, #4
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe f9b2 	bl	80059cc <uxListRemove>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d115      	bne.n	800769a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007672:	491f      	ldr	r1, [pc, #124]	; (80076f0 <xTaskPriorityDisinherit+0x104>)
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <xTaskPriorityDisinherit+0xae>
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	2201      	movs	r2, #1
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43da      	mvns	r2, r3
 8007690:	4b18      	ldr	r3, [pc, #96]	; (80076f4 <xTaskPriorityDisinherit+0x108>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4013      	ands	r3, r2
 8007696:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <xTaskPriorityDisinherit+0x108>)
 8007698:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	f1c3 0207 	rsb	r2, r3, #7
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	2201      	movs	r2, #1
 80076b4:	409a      	lsls	r2, r3
 80076b6:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <xTaskPriorityDisinherit+0x108>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	4a0d      	ldr	r2, [pc, #52]	; (80076f4 <xTaskPriorityDisinherit+0x108>)
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c4:	4613      	mov	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4a08      	ldr	r2, [pc, #32]	; (80076f0 <xTaskPriorityDisinherit+0x104>)
 80076ce:	441a      	add	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f7fe f91b 	bl	8005912 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e0:	697b      	ldr	r3, [r7, #20]
	}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	24004ea8 	.word	0x24004ea8
 80076f0:	24004eac 	.word	0x24004eac
 80076f4:	24004fb0 	.word	0x24004fb0

080076f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007706:	2301      	movs	r3, #1
 8007708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d077      	beq.n	8007800 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	60fb      	str	r3, [r7, #12]
}
 800772a:	bf00      	nop
 800772c:	e7fe      	b.n	800772c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d902      	bls.n	800773e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	e002      	b.n	8007744 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007742:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	429a      	cmp	r2, r3
 800774c:	d058      	beq.n	8007800 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	429a      	cmp	r2, r3
 8007756:	d153      	bne.n	8007800 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007758:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	429a      	cmp	r2, r3
 8007760:	d10a      	bne.n	8007778 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	db04      	blt.n	8007796 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	f1c3 0207 	rsb	r2, r3, #7
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	6959      	ldr	r1, [r3, #20]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4a19      	ldr	r2, [pc, #100]	; (800780c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80077a6:	4413      	add	r3, r2
 80077a8:	4299      	cmp	r1, r3
 80077aa:	d129      	bne.n	8007800 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	3304      	adds	r3, #4
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe f90b 	bl	80059cc <uxListRemove>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c0:	2201      	movs	r2, #1
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	43da      	mvns	r2, r3
 80077c8:	4b11      	ldr	r3, [pc, #68]	; (8007810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4013      	ands	r3, r2
 80077ce:	4a10      	ldr	r2, [pc, #64]	; (8007810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d6:	2201      	movs	r2, #1
 80077d8:	409a      	lsls	r2, r3
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4313      	orrs	r3, r2
 80077e0:	4a0b      	ldr	r2, [pc, #44]	; (8007810 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4a06      	ldr	r2, [pc, #24]	; (800780c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80077f2:	441a      	add	r2, r3
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fe f889 	bl	8005912 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007800:	bf00      	nop
 8007802:	3720      	adds	r7, #32
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	24004ea8 	.word	0x24004ea8
 800780c:	24004eac 	.word	0x24004eac
 8007810:	24004fb0 	.word	0x24004fb0

08007814 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <pvTaskIncrementMutexHeldCount+0x24>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <pvTaskIncrementMutexHeldCount+0x24>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007826:	3201      	adds	r2, #1
 8007828:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800782a:	4b03      	ldr	r3, [pc, #12]	; (8007838 <pvTaskIncrementMutexHeldCount+0x24>)
 800782c:	681b      	ldr	r3, [r3, #0]
	}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	24004ea8 	.word	0x24004ea8

0800783c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007846:	4b29      	ldr	r3, [pc, #164]	; (80078ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784c:	4b28      	ldr	r3, [pc, #160]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3304      	adds	r3, #4
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe f8ba 	bl	80059cc <uxListRemove>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800785e:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	2201      	movs	r2, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	43da      	mvns	r2, r3
 800786c:	4b21      	ldr	r3, [pc, #132]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4013      	ands	r3, r2
 8007872:	4a20      	ldr	r2, [pc, #128]	; (80078f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007874:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787c:	d10a      	bne.n	8007894 <prvAddCurrentTaskToDelayedList+0x58>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3304      	adds	r3, #4
 800788a:	4619      	mov	r1, r3
 800788c:	481a      	ldr	r0, [pc, #104]	; (80078f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800788e:	f7fe f840 	bl	8005912 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007892:	e026      	b.n	80078e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4413      	add	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800789c:	4b14      	ldr	r3, [pc, #80]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d209      	bcs.n	80078c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ac:	4b13      	ldr	r3, [pc, #76]	; (80078fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7fe f84e 	bl	800595a <vListInsert>
}
 80078be:	e010      	b.n	80078e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078c0:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <prvAddCurrentTaskToDelayedList+0xc4>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f7fe f844 	bl	800595a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078d2:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d202      	bcs.n	80078e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80078dc:	4a09      	ldr	r2, [pc, #36]	; (8007904 <prvAddCurrentTaskToDelayedList+0xc8>)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6013      	str	r3, [r2, #0]
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	24004fac 	.word	0x24004fac
 80078f0:	24004ea8 	.word	0x24004ea8
 80078f4:	24004fb0 	.word	0x24004fb0
 80078f8:	24004f94 	.word	0x24004f94
 80078fc:	24004f64 	.word	0x24004f64
 8007900:	24004f60 	.word	0x24004f60
 8007904:	24004fc8 	.word	0x24004fc8

08007908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3b04      	subs	r3, #4
 8007918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3b04      	subs	r3, #4
 8007926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0201 	bic.w	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	3b04      	subs	r3, #4
 8007936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007938:	4a0c      	ldr	r2, [pc, #48]	; (800796c <pxPortInitialiseStack+0x64>)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3b14      	subs	r3, #20
 8007942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3b04      	subs	r3, #4
 800794e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f06f 0202 	mvn.w	r2, #2
 8007956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3b20      	subs	r3, #32
 800795c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800795e:	68fb      	ldr	r3, [r7, #12]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	08007971 	.word	0x08007971

08007970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <prvTaskExitError+0x54>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007982:	d00a      	beq.n	800799a <prvTaskExitError+0x2a>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	60fb      	str	r3, [r7, #12]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <prvTaskExitError+0x28>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60bb      	str	r3, [r7, #8]
}
 80079ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079ae:	bf00      	nop
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0fc      	beq.n	80079b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	24000024 	.word	0x24000024
	...

080079d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079d0:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <pxCurrentTCBConst2>)
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6808      	ldr	r0, [r1, #0]
 80079d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	f380 8809 	msr	PSP, r0
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8811 	msr	BASEPRI, r0
 80079ea:	4770      	bx	lr
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst2>:
 80079f0:	24004ea8 	.word	0x24004ea8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079f8:	4808      	ldr	r0, [pc, #32]	; (8007a1c <prvPortStartFirstTask+0x24>)
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	6800      	ldr	r0, [r0, #0]
 80079fe:	f380 8808 	msr	MSP, r0
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8814 	msr	CONTROL, r0
 8007a0a:	b662      	cpsie	i
 8007a0c:	b661      	cpsie	f
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	df00      	svc	0
 8007a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a1a:	bf00      	nop
 8007a1c:	e000ed08 	.word	0xe000ed08

08007a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a26:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <xPortStartScheduler+0x120>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a46      	ldr	r2, [pc, #280]	; (8007b44 <xPortStartScheduler+0x124>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10a      	bne.n	8007a46 <xPortStartScheduler+0x26>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a46:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <xPortStartScheduler+0x120>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <xPortStartScheduler+0x128>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10a      	bne.n	8007a66 <xPortStartScheduler+0x46>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60fb      	str	r3, [r7, #12]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a66:	4b39      	ldr	r3, [pc, #228]	; (8007b4c <xPortStartScheduler+0x12c>)
 8007a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	22ff      	movs	r2, #255	; 0xff
 8007a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <xPortStartScheduler+0x130>)
 8007a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a8e:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a94:	e009      	b.n	8007aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a96:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	4a2d      	ldr	r2, [pc, #180]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d0ef      	beq.n	8007a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ab6:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f1c3 0307 	rsb	r3, r3, #7
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d00a      	beq.n	8007ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60bb      	str	r3, [r7, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <xPortStartScheduler+0x134>)
 8007aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007af6:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <xPortStartScheduler+0x138>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <xPortStartScheduler+0x138>)
 8007afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <xPortStartScheduler+0x138>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <xPortStartScheduler+0x138>)
 8007b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b0e:	f000 f8dd 	bl	8007ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <xPortStartScheduler+0x13c>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b18:	f000 f8fc 	bl	8007d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b1c:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <xPortStartScheduler+0x140>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <xPortStartScheduler+0x140>)
 8007b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b28:	f7ff ff66 	bl	80079f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b2c:	f7ff fa84 	bl	8007038 <vTaskSwitchContext>
	prvTaskExitError();
 8007b30:	f7ff ff1e 	bl	8007970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000ed00 	.word	0xe000ed00
 8007b44:	410fc271 	.word	0x410fc271
 8007b48:	410fc270 	.word	0x410fc270
 8007b4c:	e000e400 	.word	0xe000e400
 8007b50:	24004fd4 	.word	0x24004fd4
 8007b54:	24004fd8 	.word	0x24004fd8
 8007b58:	e000ed20 	.word	0xe000ed20
 8007b5c:	24000024 	.word	0x24000024
 8007b60:	e000ef34 	.word	0xe000ef34

08007b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	607b      	str	r3, [r7, #4]
}
 8007b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b88:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10f      	bne.n	8007bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortEnterCritical+0x5c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	603b      	str	r3, [r7, #0]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <vPortEnterCritical+0x4a>
	}
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	24000024 	.word	0x24000024
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <vPortExitCritical+0x50>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <vPortExitCritical+0x24>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	607b      	str	r3, [r7, #4]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <vPortExitCritical+0x50>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <vPortExitCritical+0x50>)
 8007bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <vPortExitCritical+0x50>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <vPortExitCritical+0x42>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f383 8811 	msr	BASEPRI, r3
}
 8007c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	24000024 	.word	0x24000024
	...

08007c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c20:	f3ef 8009 	mrs	r0, PSP
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <pxCurrentTCBConst>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f01e 0f10 	tst.w	lr, #16
 8007c30:	bf08      	it	eq
 8007c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	6010      	str	r0, [r2, #0]
 8007c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c44:	f380 8811 	msr	BASEPRI, r0
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f7ff f9f2 	bl	8007038 <vTaskSwitchContext>
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f380 8811 	msr	BASEPRI, r0
 8007c5c:	bc09      	pop	{r0, r3}
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c66:	f01e 0f10 	tst.w	lr, #16
 8007c6a:	bf08      	it	eq
 8007c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c70:	f380 8809 	msr	PSP, r0
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst>:
 8007c80:	24004ea8 	.word	0x24004ea8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ca2:	f7ff f911 	bl	8006ec8 <xTaskIncrementTick>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <SysTick_Handler+0x40>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f383 8811 	msr	BASEPRI, r3
}
 8007cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <vPortSetupTimerInterrupt+0x34>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <vPortSetupTimerInterrupt+0x38>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <vPortSetupTimerInterrupt+0x3c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <vPortSetupTimerInterrupt+0x40>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <vPortSetupTimerInterrupt+0x44>)
 8007cea:	3b01      	subs	r3, #1
 8007cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cee:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <vPortSetupTimerInterrupt+0x34>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	e000e010 	.word	0xe000e010
 8007d04:	e000e018 	.word	0xe000e018
 8007d08:	24000000 	.word	0x24000000
 8007d0c:	10624dd3 	.word	0x10624dd3
 8007d10:	e000e014 	.word	0xe000e014

08007d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d24 <vPortEnableVFP+0x10>
 8007d18:	6801      	ldr	r1, [r0, #0]
 8007d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d1e:	6001      	str	r1, [r0, #0]
 8007d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d22:	bf00      	nop
 8007d24:	e000ed88 	.word	0xe000ed88

08007d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d2e:	f3ef 8305 	mrs	r3, IPSR
 8007d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b0f      	cmp	r3, #15
 8007d38:	d914      	bls.n	8007d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <vPortValidateInterruptPriority+0x70>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <vPortValidateInterruptPriority+0x74>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	7afa      	ldrb	r2, [r7, #11]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20a      	bcs.n	8007d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <vPortValidateInterruptPriority+0x78>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d6c:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <vPortValidateInterruptPriority+0x7c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d90a      	bls.n	8007d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	603b      	str	r3, [r7, #0]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vPortValidateInterruptPriority+0x60>
	}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	e000e3f0 	.word	0xe000e3f0
 8007d9c:	24004fd4 	.word	0x24004fd4
 8007da0:	e000ed0c 	.word	0xe000ed0c
 8007da4:	24004fd8 	.word	0x24004fd8

08007da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007db4:	f7fe ffbc 	bl	8006d30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007db8:	4b5b      	ldr	r3, [pc, #364]	; (8007f28 <pvPortMalloc+0x180>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dc0:	f000 f920 	bl	8008004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dc4:	4b59      	ldr	r3, [pc, #356]	; (8007f2c <pvPortMalloc+0x184>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 8093 	bne.w	8007ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01d      	beq.n	8007e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007dd8:	2208      	movs	r2, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d014      	beq.n	8007e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f023 0307 	bic.w	r3, r3, #7
 8007df0:	3308      	adds	r3, #8
 8007df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <pvPortMalloc+0x6c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d06e      	beq.n	8007ef8 <pvPortMalloc+0x150>
 8007e1a:	4b45      	ldr	r3, [pc, #276]	; (8007f30 <pvPortMalloc+0x188>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d869      	bhi.n	8007ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e24:	4b43      	ldr	r3, [pc, #268]	; (8007f34 <pvPortMalloc+0x18c>)
 8007e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <pvPortMalloc+0x18c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2e:	e004      	b.n	8007e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <pvPortMalloc+0xa4>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e4c:	4b36      	ldr	r3, [pc, #216]	; (8007f28 <pvPortMalloc+0x180>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d050      	beq.n	8007ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	2308      	movs	r3, #8
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d91f      	bls.n	8007eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	613b      	str	r3, [r7, #16]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb2:	69b8      	ldr	r0, [r7, #24]
 8007eb4:	f000 f908 	bl	80080c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eb8:	4b1d      	ldr	r3, [pc, #116]	; (8007f30 <pvPortMalloc+0x188>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <pvPortMalloc+0x188>)
 8007ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec6:	4b1a      	ldr	r3, [pc, #104]	; (8007f30 <pvPortMalloc+0x188>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <pvPortMalloc+0x190>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d203      	bcs.n	8007eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ed2:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <pvPortMalloc+0x188>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <pvPortMalloc+0x190>)
 8007ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <pvPortMalloc+0x184>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <pvPortMalloc+0x194>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	4a11      	ldr	r2, [pc, #68]	; (8007f3c <pvPortMalloc+0x194>)
 8007ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ef8:	f7fe ff28 	bl	8006d4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <pvPortMalloc+0x174>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <pvPortMalloc+0x172>
	return pvReturn;
 8007f1c:	69fb      	ldr	r3, [r7, #28]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3728      	adds	r7, #40	; 0x28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	24008be4 	.word	0x24008be4
 8007f2c:	24008bf8 	.word	0x24008bf8
 8007f30:	24008be8 	.word	0x24008be8
 8007f34:	24008bdc 	.word	0x24008bdc
 8007f38:	24008bec 	.word	0x24008bec
 8007f3c:	24008bf0 	.word	0x24008bf0

08007f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d04d      	beq.n	8007fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f52:	2308      	movs	r3, #8
 8007f54:	425b      	negs	r3, r3
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4413      	add	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <vPortFree+0xb8>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <vPortFree+0x44>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60fb      	str	r3, [r7, #12]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <vPortFree+0x62>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	e7fe      	b.n	8007fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	4b14      	ldr	r3, [pc, #80]	; (8007ff8 <vPortFree+0xb8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4013      	ands	r3, r2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01e      	beq.n	8007fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d11a      	bne.n	8007fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <vPortFree+0xb8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fc8:	f7fe feb2 	bl	8006d30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <vPortFree+0xbc>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <vPortFree+0xbc>)
 8007fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fda:	6938      	ldr	r0, [r7, #16]
 8007fdc:	f000 f874 	bl	80080c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <vPortFree+0xc0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	4a06      	ldr	r2, [pc, #24]	; (8008000 <vPortFree+0xc0>)
 8007fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007fea:	f7fe feaf 	bl	8006d4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fee:	bf00      	nop
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	24008bf8 	.word	0x24008bf8
 8007ffc:	24008be8 	.word	0x24008be8
 8008000:	24008bf4 	.word	0x24008bf4

08008004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800800a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800800e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <prvHeapInit+0xac>)
 8008012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00c      	beq.n	8008038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3307      	adds	r3, #7
 8008022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <prvHeapInit+0xac>)
 8008034:	4413      	add	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800803c:	4a1d      	ldr	r2, [pc, #116]	; (80080b4 <prvHeapInit+0xb0>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008042:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <prvHeapInit+0xb0>)
 8008044:	2200      	movs	r2, #0
 8008046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	4413      	add	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008050:	2208      	movs	r2, #8
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	1a9b      	subs	r3, r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0307 	bic.w	r3, r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a15      	ldr	r2, [pc, #84]	; (80080b8 <prvHeapInit+0xb4>)
 8008064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008066:	4b14      	ldr	r3, [pc, #80]	; (80080b8 <prvHeapInit+0xb4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <prvHeapInit+0xb4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	1ad2      	subs	r2, r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008084:	4b0c      	ldr	r3, [pc, #48]	; (80080b8 <prvHeapInit+0xb4>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	4a0a      	ldr	r2, [pc, #40]	; (80080bc <prvHeapInit+0xb8>)
 8008092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <prvHeapInit+0xbc>)
 800809a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <prvHeapInit+0xc0>)
 800809e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	24004fdc 	.word	0x24004fdc
 80080b4:	24008bdc 	.word	0x24008bdc
 80080b8:	24008be4 	.word	0x24008be4
 80080bc:	24008bec 	.word	0x24008bec
 80080c0:	24008be8 	.word	0x24008be8
 80080c4:	24008bf8 	.word	0x24008bf8

080080c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080d0:	4b28      	ldr	r3, [pc, #160]	; (8008174 <prvInsertBlockIntoFreeList+0xac>)
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	e002      	b.n	80080dc <prvInsertBlockIntoFreeList+0x14>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d8f7      	bhi.n	80080d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4413      	add	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d108      	bne.n	800810a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	441a      	add	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	441a      	add	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d118      	bne.n	8008150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <prvInsertBlockIntoFreeList+0xb0>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	429a      	cmp	r2, r3
 8008128:	d00d      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e008      	b.n	8008158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <prvInsertBlockIntoFreeList+0xb0>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e003      	b.n	8008158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	429a      	cmp	r2, r3
 800815e:	d002      	beq.n	8008166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008166:	bf00      	nop
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	24008bdc 	.word	0x24008bdc
 8008178:	24008be4 	.word	0x24008be4

0800817c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008186:	f007 fb9d 	bl	800f8c4 <sys_timeouts_sleeptime>
 800818a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008192:	d10b      	bne.n	80081ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008194:	4813      	ldr	r0, [pc, #76]	; (80081e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008196:	f00a fc68 	bl	8012a6a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800819a:	2200      	movs	r2, #0
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f00a fbda 	bl	8012958 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80081a4:	480f      	ldr	r0, [pc, #60]	; (80081e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80081a6:	f00a fc51 	bl	8012a4c <sys_mutex_lock>
    return;
 80081aa:	e018      	b.n	80081de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80081b2:	f007 fb4d 	bl	800f850 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80081b6:	e7e6      	b.n	8008186 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80081b8:	480a      	ldr	r0, [pc, #40]	; (80081e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80081ba:	f00a fc56 	bl	8012a6a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	6839      	ldr	r1, [r7, #0]
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f00a fbc8 	bl	8012958 <sys_arch_mbox_fetch>
 80081c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80081ca:	4806      	ldr	r0, [pc, #24]	; (80081e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80081cc:	f00a fc3e 	bl	8012a4c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d6:	d102      	bne.n	80081de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80081d8:	f007 fb3a 	bl	800f850 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80081dc:	e7d3      	b.n	8008186 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	24008c08 	.word	0x24008c08

080081e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80081f0:	4810      	ldr	r0, [pc, #64]	; (8008234 <tcpip_thread+0x4c>)
 80081f2:	f00a fc2b 	bl	8012a4c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80081f6:	4b10      	ldr	r3, [pc, #64]	; (8008238 <tcpip_thread+0x50>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80081fe:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <tcpip_thread+0x50>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a0e      	ldr	r2, [pc, #56]	; (800823c <tcpip_thread+0x54>)
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	4610      	mov	r0, r2
 8008208:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800820a:	f107 030c 	add.w	r3, r7, #12
 800820e:	4619      	mov	r1, r3
 8008210:	480b      	ldr	r0, [pc, #44]	; (8008240 <tcpip_thread+0x58>)
 8008212:	f7ff ffb3 	bl	800817c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d106      	bne.n	800822a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <tcpip_thread+0x5c>)
 800821e:	2291      	movs	r2, #145	; 0x91
 8008220:	4909      	ldr	r1, [pc, #36]	; (8008248 <tcpip_thread+0x60>)
 8008222:	480a      	ldr	r0, [pc, #40]	; (800824c <tcpip_thread+0x64>)
 8008224:	f00a fe4a 	bl	8012ebc <iprintf>
      continue;
 8008228:	e003      	b.n	8008232 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	4618      	mov	r0, r3
 800822e:	f000 f80f 	bl	8008250 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008232:	e7ea      	b.n	800820a <tcpip_thread+0x22>
 8008234:	24008c08 	.word	0x24008c08
 8008238:	24008bfc 	.word	0x24008bfc
 800823c:	24008c00 	.word	0x24008c00
 8008240:	24008c04 	.word	0x24008c04
 8008244:	08013e10 	.word	0x08013e10
 8008248:	08013e40 	.word	0x08013e40
 800824c:	08013e60 	.word	0x08013e60

08008250 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b02      	cmp	r3, #2
 800825e:	d026      	beq.n	80082ae <tcpip_thread_handle_msg+0x5e>
 8008260:	2b02      	cmp	r3, #2
 8008262:	dc2b      	bgt.n	80082bc <tcpip_thread_handle_msg+0x6c>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <tcpip_thread_handle_msg+0x1e>
 8008268:	2b01      	cmp	r3, #1
 800826a:	d015      	beq.n	8008298 <tcpip_thread_handle_msg+0x48>
 800826c:	e026      	b.n	80082bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6850      	ldr	r0, [r2, #4]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6892      	ldr	r2, [r2, #8]
 800827a:	4611      	mov	r1, r2
 800827c:	4798      	blx	r3
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fdd3 	bl	8009e34 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	2009      	movs	r0, #9
 8008292:	f000 ff2b 	bl	80090ec <memp_free>
      break;
 8008296:	e018      	b.n	80082ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6892      	ldr	r2, [r2, #8]
 80082a0:	4610      	mov	r0, r2
 80082a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	2008      	movs	r0, #8
 80082a8:	f000 ff20 	bl	80090ec <memp_free>
      break;
 80082ac:	e00d      	b.n	80082ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6892      	ldr	r2, [r2, #8]
 80082b6:	4610      	mov	r0, r2
 80082b8:	4798      	blx	r3
      break;
 80082ba:	e006      	b.n	80082ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <tcpip_thread_handle_msg+0x84>)
 80082be:	22cf      	movs	r2, #207	; 0xcf
 80082c0:	4905      	ldr	r1, [pc, #20]	; (80082d8 <tcpip_thread_handle_msg+0x88>)
 80082c2:	4806      	ldr	r0, [pc, #24]	; (80082dc <tcpip_thread_handle_msg+0x8c>)
 80082c4:	f00a fdfa 	bl	8012ebc <iprintf>
      break;
 80082c8:	bf00      	nop
  }
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	08013e10 	.word	0x08013e10
 80082d8:	08013e40 	.word	0x08013e40
 80082dc:	08013e60 	.word	0x08013e60

080082e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80082ec:	481a      	ldr	r0, [pc, #104]	; (8008358 <tcpip_inpkt+0x78>)
 80082ee:	f00a fb72 	bl	80129d6 <sys_mbox_valid>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d105      	bne.n	8008304 <tcpip_inpkt+0x24>
 80082f8:	4b18      	ldr	r3, [pc, #96]	; (800835c <tcpip_inpkt+0x7c>)
 80082fa:	22fc      	movs	r2, #252	; 0xfc
 80082fc:	4918      	ldr	r1, [pc, #96]	; (8008360 <tcpip_inpkt+0x80>)
 80082fe:	4819      	ldr	r0, [pc, #100]	; (8008364 <tcpip_inpkt+0x84>)
 8008300:	f00a fddc 	bl	8012ebc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008304:	2009      	movs	r0, #9
 8008306:	f000 fe7b 	bl	8009000 <memp_malloc>
 800830a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d102      	bne.n	8008318 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008316:	e01a      	b.n	800834e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2200      	movs	r2, #0
 800831c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008330:	6979      	ldr	r1, [r7, #20]
 8008332:	4809      	ldr	r0, [pc, #36]	; (8008358 <tcpip_inpkt+0x78>)
 8008334:	f00a faf6 	bl	8012924 <sys_mbox_trypost>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d006      	beq.n	800834c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800833e:	6979      	ldr	r1, [r7, #20]
 8008340:	2009      	movs	r0, #9
 8008342:	f000 fed3 	bl	80090ec <memp_free>
    return ERR_MEM;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800834a:	e000      	b.n	800834e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800834c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	24008c04 	.word	0x24008c04
 800835c:	08013e10 	.word	0x08013e10
 8008360:	08013e88 	.word	0x08013e88
 8008364:	08013e60 	.word	0x08013e60

08008368 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008378:	f003 0318 	and.w	r3, r3, #24
 800837c:	2b00      	cmp	r3, #0
 800837e:	d006      	beq.n	800838e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008380:	4a08      	ldr	r2, [pc, #32]	; (80083a4 <tcpip_input+0x3c>)
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ffab 	bl	80082e0 <tcpip_inpkt>
 800838a:	4603      	mov	r3, r0
 800838c:	e005      	b.n	800839a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800838e:	4a06      	ldr	r2, [pc, #24]	; (80083a8 <tcpip_input+0x40>)
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7ff ffa4 	bl	80082e0 <tcpip_inpkt>
 8008398:	4603      	mov	r3, r0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	08012735 	.word	0x08012735
 80083a8:	0801163d 	.word	0x0801163d

080083ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80083b6:	4819      	ldr	r0, [pc, #100]	; (800841c <tcpip_try_callback+0x70>)
 80083b8:	f00a fb0d 	bl	80129d6 <sys_mbox_valid>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <tcpip_try_callback+0x24>
 80083c2:	4b17      	ldr	r3, [pc, #92]	; (8008420 <tcpip_try_callback+0x74>)
 80083c4:	f240 125d 	movw	r2, #349	; 0x15d
 80083c8:	4916      	ldr	r1, [pc, #88]	; (8008424 <tcpip_try_callback+0x78>)
 80083ca:	4817      	ldr	r0, [pc, #92]	; (8008428 <tcpip_try_callback+0x7c>)
 80083cc:	f00a fd76 	bl	8012ebc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80083d0:	2008      	movs	r0, #8
 80083d2:	f000 fe15 	bl	8009000 <memp_malloc>
 80083d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d102      	bne.n	80083e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80083de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e2:	e017      	b.n	8008414 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80083f6:	68f9      	ldr	r1, [r7, #12]
 80083f8:	4808      	ldr	r0, [pc, #32]	; (800841c <tcpip_try_callback+0x70>)
 80083fa:	f00a fa93 	bl	8012924 <sys_mbox_trypost>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d006      	beq.n	8008412 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008404:	68f9      	ldr	r1, [r7, #12]
 8008406:	2008      	movs	r0, #8
 8008408:	f000 fe70 	bl	80090ec <memp_free>
    return ERR_MEM;
 800840c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008410:	e000      	b.n	8008414 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	24008c04 	.word	0x24008c04
 8008420:	08013e10 	.word	0x08013e10
 8008424:	08013e88 	.word	0x08013e88
 8008428:	08013e60 	.word	0x08013e60

0800842c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af02      	add	r7, sp, #8
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008436:	f000 f92d 	bl	8008694 <lwip_init>

  tcpip_init_done = initfunc;
 800843a:	4a17      	ldr	r2, [pc, #92]	; (8008498 <tcpip_init+0x6c>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008440:	4a16      	ldr	r2, [pc, #88]	; (800849c <tcpip_init+0x70>)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008446:	2106      	movs	r1, #6
 8008448:	4815      	ldr	r0, [pc, #84]	; (80084a0 <tcpip_init+0x74>)
 800844a:	f00a fa49 	bl	80128e0 <sys_mbox_new>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d006      	beq.n	8008462 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008454:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <tcpip_init+0x78>)
 8008456:	f240 2261 	movw	r2, #609	; 0x261
 800845a:	4913      	ldr	r1, [pc, #76]	; (80084a8 <tcpip_init+0x7c>)
 800845c:	4813      	ldr	r0, [pc, #76]	; (80084ac <tcpip_init+0x80>)
 800845e:	f00a fd2d 	bl	8012ebc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008462:	4813      	ldr	r0, [pc, #76]	; (80084b0 <tcpip_init+0x84>)
 8008464:	f00a fad6 	bl	8012a14 <sys_mutex_new>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d006      	beq.n	800847c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <tcpip_init+0x78>)
 8008470:	f240 2265 	movw	r2, #613	; 0x265
 8008474:	490f      	ldr	r1, [pc, #60]	; (80084b4 <tcpip_init+0x88>)
 8008476:	480d      	ldr	r0, [pc, #52]	; (80084ac <tcpip_init+0x80>)
 8008478:	f00a fd20 	bl	8012ebc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800847c:	2300      	movs	r3, #0
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008484:	2200      	movs	r2, #0
 8008486:	490c      	ldr	r1, [pc, #48]	; (80084b8 <tcpip_init+0x8c>)
 8008488:	480c      	ldr	r0, [pc, #48]	; (80084bc <tcpip_init+0x90>)
 800848a:	f00a fafb 	bl	8012a84 <sys_thread_new>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	24008bfc 	.word	0x24008bfc
 800849c:	24008c00 	.word	0x24008c00
 80084a0:	24008c04 	.word	0x24008c04
 80084a4:	08013e10 	.word	0x08013e10
 80084a8:	08013e98 	.word	0x08013e98
 80084ac:	08013e60 	.word	0x08013e60
 80084b0:	24008c08 	.word	0x24008c08
 80084b4:	08013ebc 	.word	0x08013ebc
 80084b8:	080081e9 	.word	0x080081e9
 80084bc:	08013ee0 	.word	0x08013ee0

080084c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	021b      	lsls	r3, r3, #8
 80084ce:	b21a      	sxth	r2, r3
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	b21b      	sxth	r3, r3
 80084d8:	4313      	orrs	r3, r2
 80084da:	b21b      	sxth	r3, r3
 80084dc:	b29b      	uxth	r3, r3
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	061a      	lsls	r2, r3, #24
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	4313      	orrs	r3, r2
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800851c:	b480      	push	{r7}
 800851e:	b089      	sub	sp, #36	; 0x24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00d      	beq.n	800855c <lwip_standard_chksum+0x40>
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	dd0a      	ble.n	800855c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	1c53      	adds	r3, r2, #1
 800854a:	61fb      	str	r3, [r7, #28]
 800854c:	f107 030e 	add.w	r3, r7, #14
 8008550:	3301      	adds	r3, #1
 8008552:	7812      	ldrb	r2, [r2, #0]
 8008554:	701a      	strb	r2, [r3, #0]
    len--;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	3b01      	subs	r3, #1
 800855a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8008560:	e00a      	b.n	8008578 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	1c9a      	adds	r2, r3, #2
 8008566:	61ba      	str	r2, [r7, #24]
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	4413      	add	r3, r2
 8008570:	617b      	str	r3, [r7, #20]
    len -= 2;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	3b02      	subs	r3, #2
 8008576:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b01      	cmp	r3, #1
 800857c:	dcf1      	bgt.n	8008562 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dd04      	ble.n	800858e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008584:	f107 030e 	add.w	r3, r7, #14
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	7812      	ldrb	r2, [r2, #0]
 800858c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800858e:	89fb      	ldrh	r3, [r7, #14]
 8008590:	461a      	mov	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	4413      	add	r3, r2
 8008596:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	0c1a      	lsrs	r2, r3, #16
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	0c1a      	lsrs	r2, r3, #16
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	4413      	add	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d007      	beq.n	80085c6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	b29b      	uxth	r3, r3
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3724      	adds	r7, #36	; 0x24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80085e2:	887b      	ldrh	r3, [r7, #2]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7ff ff98 	bl	800851c <lwip_standard_chksum>
 80085ec:	4603      	mov	r3, r0
 80085ee:	43db      	mvns	r3, r3
 80085f0:	b29b      	uxth	r3, r3
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b086      	sub	sp, #24
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	613b      	str	r3, [r7, #16]
 800860e:	e02b      	b.n	8008668 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	895b      	ldrh	r3, [r3, #10]
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f7ff ff7e 	bl	800851c <lwip_standard_chksum>
 8008620:	4603      	mov	r3, r0
 8008622:	461a      	mov	r2, r3
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	4413      	add	r3, r2
 8008628:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	0c1a      	lsrs	r2, r3, #16
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	b29b      	uxth	r3, r3
 8008632:	4413      	add	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	895b      	ldrh	r3, [r3, #10]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	b29b      	uxth	r3, r3
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00e      	beq.n	8008662 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf0c      	ite	eq
 800864a:	2301      	moveq	r3, #1
 800864c:	2300      	movne	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	021b      	lsls	r3, r3, #8
 8008656:	b29a      	uxth	r2, r3
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	b2db      	uxtb	r3, r3
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1d0      	bne.n	8008610 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d007      	beq.n	8008684 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	b29a      	uxth	r2, r3
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	0a1b      	lsrs	r3, r3, #8
 800867e:	b2db      	uxtb	r3, r3
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	b29b      	uxth	r3, r3
 8008688:	43db      	mvns	r3, r3
 800868a:	b29b      	uxth	r3, r3
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800869e:	f00a f9ab 	bl	80129f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80086a2:	f000 f8d9 	bl	8008858 <mem_init>
  memp_init();
 80086a6:	f000 fc3d 	bl	8008f24 <memp_init>
  pbuf_init();
  netif_init();
 80086aa:	f000 fd49 	bl	8009140 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80086ae:	f007 f941 	bl	800f934 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80086b2:	f001 fe69 	bl	800a388 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80086b6:	f007 f883 	bl	800f7c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80086ba:	bf00      	nop
 80086bc:	3708      	adds	r7, #8
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
	...

080086c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <ptr_to_mem+0x20>)
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	4413      	add	r3, r2
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	24008c24 	.word	0x24008c24

080086e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80086f0:	4b05      	ldr	r3, [pc, #20]	; (8008708 <mem_to_ptr+0x20>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	b29b      	uxth	r3, r3
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	24008c24 	.word	0x24008c24

0800870c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800870c:	b590      	push	{r4, r7, lr}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008714:	4b47      	ldr	r3, [pc, #284]	; (8008834 <plug_holes+0x128>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d206      	bcs.n	800872c <plug_holes+0x20>
 800871e:	4b46      	ldr	r3, [pc, #280]	; (8008838 <plug_holes+0x12c>)
 8008720:	f240 12df 	movw	r2, #479	; 0x1df
 8008724:	4945      	ldr	r1, [pc, #276]	; (800883c <plug_holes+0x130>)
 8008726:	4846      	ldr	r0, [pc, #280]	; (8008840 <plug_holes+0x134>)
 8008728:	f00a fbc8 	bl	8012ebc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800872c:	4b45      	ldr	r3, [pc, #276]	; (8008844 <plug_holes+0x138>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d306      	bcc.n	8008744 <plug_holes+0x38>
 8008736:	4b40      	ldr	r3, [pc, #256]	; (8008838 <plug_holes+0x12c>)
 8008738:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800873c:	4942      	ldr	r1, [pc, #264]	; (8008848 <plug_holes+0x13c>)
 800873e:	4840      	ldr	r0, [pc, #256]	; (8008840 <plug_holes+0x134>)
 8008740:	f00a fbbc 	bl	8012ebc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <plug_holes+0x4e>
 800874c:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <plug_holes+0x12c>)
 800874e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008752:	493e      	ldr	r1, [pc, #248]	; (800884c <plug_holes+0x140>)
 8008754:	483a      	ldr	r0, [pc, #232]	; (8008840 <plug_holes+0x134>)
 8008756:	f00a fbb1 	bl	8012ebc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008762:	4293      	cmp	r3, r2
 8008764:	d906      	bls.n	8008774 <plug_holes+0x68>
 8008766:	4b34      	ldr	r3, [pc, #208]	; (8008838 <plug_holes+0x12c>)
 8008768:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800876c:	4938      	ldr	r1, [pc, #224]	; (8008850 <plug_holes+0x144>)
 800876e:	4834      	ldr	r0, [pc, #208]	; (8008840 <plug_holes+0x134>)
 8008770:	f00a fba4 	bl	8012ebc <iprintf>

  nmem = ptr_to_mem(mem->next);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ffa3 	bl	80086c4 <ptr_to_mem>
 800877e:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	429a      	cmp	r2, r3
 8008786:	d025      	beq.n	80087d4 <plug_holes+0xc8>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	791b      	ldrb	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d121      	bne.n	80087d4 <plug_holes+0xc8>
 8008790:	4b2c      	ldr	r3, [pc, #176]	; (8008844 <plug_holes+0x138>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	429a      	cmp	r2, r3
 8008798:	d01c      	beq.n	80087d4 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800879a:	4b2e      	ldr	r3, [pc, #184]	; (8008854 <plug_holes+0x148>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d102      	bne.n	80087aa <plug_holes+0x9e>
      lfree = mem;
 80087a4:	4a2b      	ldr	r2, [pc, #172]	; (8008854 <plug_holes+0x148>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	881a      	ldrh	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00a      	beq.n	80087d4 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	881b      	ldrh	r3, [r3, #0]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff ff7e 	bl	80086c4 <ptr_to_mem>
 80087c8:	4604      	mov	r4, r0
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ff8c 	bl	80086e8 <mem_to_ptr>
 80087d0:	4603      	mov	r3, r0
 80087d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	885b      	ldrh	r3, [r3, #2]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ff73 	bl	80086c4 <ptr_to_mem>
 80087de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d020      	beq.n	800882a <plug_holes+0x11e>
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	791b      	ldrb	r3, [r3, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d11c      	bne.n	800882a <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80087f0:	4b18      	ldr	r3, [pc, #96]	; (8008854 <plug_holes+0x148>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d102      	bne.n	8008800 <plug_holes+0xf4>
      lfree = pmem;
 80087fa:	4a16      	ldr	r2, [pc, #88]	; (8008854 <plug_holes+0x148>)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	881a      	ldrh	r2, [r3, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	881b      	ldrh	r3, [r3, #0]
 800880c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008810:	4293      	cmp	r3, r2
 8008812:	d00a      	beq.n	800882a <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff ff53 	bl	80086c4 <ptr_to_mem>
 800881e:	4604      	mov	r4, r0
 8008820:	68b8      	ldr	r0, [r7, #8]
 8008822:	f7ff ff61 	bl	80086e8 <mem_to_ptr>
 8008826:	4603      	mov	r3, r0
 8008828:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800882a:	bf00      	nop
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	bd90      	pop	{r4, r7, pc}
 8008832:	bf00      	nop
 8008834:	24008c24 	.word	0x24008c24
 8008838:	08013ef0 	.word	0x08013ef0
 800883c:	08013f20 	.word	0x08013f20
 8008840:	08013f38 	.word	0x08013f38
 8008844:	24008c28 	.word	0x24008c28
 8008848:	08013f60 	.word	0x08013f60
 800884c:	08013f7c 	.word	0x08013f7c
 8008850:	08013f98 	.word	0x08013f98
 8008854:	24008c30 	.word	0x24008c30

08008858 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <mem_init+0x7c>)
 8008860:	4a1d      	ldr	r2, [pc, #116]	; (80088d8 <mem_init+0x80>)
 8008862:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <mem_init+0x7c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008870:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800887e:	f643 70e8 	movw	r0, #16360	; 0x3fe8
 8008882:	f7ff ff1f 	bl	80086c4 <ptr_to_mem>
 8008886:	4603      	mov	r3, r0
 8008888:	4a14      	ldr	r2, [pc, #80]	; (80088dc <mem_init+0x84>)
 800888a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800888c:	4b13      	ldr	r3, [pc, #76]	; (80088dc <mem_init+0x84>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2201      	movs	r2, #1
 8008892:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008894:	4b11      	ldr	r3, [pc, #68]	; (80088dc <mem_init+0x84>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 800889c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800889e:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <mem_init+0x84>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 80088a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <mem_init+0x7c>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a0c      	ldr	r2, [pc, #48]	; (80088e0 <mem_init+0x88>)
 80088ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80088b0:	480c      	ldr	r0, [pc, #48]	; (80088e4 <mem_init+0x8c>)
 80088b2:	f00a f8af 	bl	8012a14 <sys_mutex_new>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <mem_init+0x90>)
 80088be:	f240 221f 	movw	r2, #543	; 0x21f
 80088c2:	490a      	ldr	r1, [pc, #40]	; (80088ec <mem_init+0x94>)
 80088c4:	480a      	ldr	r0, [pc, #40]	; (80088f0 <mem_init+0x98>)
 80088c6:	f00a faf9 	bl	8012ebc <iprintf>
  }
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	24008c24 	.word	0x24008c24
 80088d8:	30044000 	.word	0x30044000
 80088dc:	24008c28 	.word	0x24008c28
 80088e0:	24008c30 	.word	0x24008c30
 80088e4:	24008c2c 	.word	0x24008c2c
 80088e8:	08013ef0 	.word	0x08013ef0
 80088ec:	08013fc4 	.word	0x08013fc4
 80088f0:	08013f38 	.word	0x08013f38

080088f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff fef3 	bl	80086e8 <mem_to_ptr>
 8008902:	4603      	mov	r3, r0
 8008904:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff feda 	bl	80086c4 <ptr_to_mem>
 8008910:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	885b      	ldrh	r3, [r3, #2]
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff fed4 	bl	80086c4 <ptr_to_mem>
 800891c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	881b      	ldrh	r3, [r3, #0]
 8008922:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008926:	4293      	cmp	r3, r2
 8008928:	d819      	bhi.n	800895e <mem_link_valid+0x6a>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	885b      	ldrh	r3, [r3, #2]
 800892e:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008932:	4293      	cmp	r3, r2
 8008934:	d813      	bhi.n	800895e <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800893a:	8afa      	ldrh	r2, [r7, #22]
 800893c:	429a      	cmp	r2, r3
 800893e:	d004      	beq.n	800894a <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	8afa      	ldrh	r2, [r7, #22]
 8008946:	429a      	cmp	r2, r3
 8008948:	d109      	bne.n	800895e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800894a:	4b08      	ldr	r3, [pc, #32]	; (800896c <mem_link_valid+0x78>)
 800894c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	429a      	cmp	r2, r3
 8008952:	d006      	beq.n	8008962 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	885b      	ldrh	r3, [r3, #2]
 8008958:	8afa      	ldrh	r2, [r7, #22]
 800895a:	429a      	cmp	r2, r3
 800895c:	d001      	beq.n	8008962 <mem_link_valid+0x6e>
    return 0;
 800895e:	2300      	movs	r3, #0
 8008960:	e000      	b.n	8008964 <mem_link_valid+0x70>
  }
  return 1;
 8008962:	2301      	movs	r3, #1
}
 8008964:	4618      	mov	r0, r3
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	24008c28 	.word	0x24008c28

08008970 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d070      	beq.n	8008a60 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f003 0303 	and.w	r3, r3, #3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00d      	beq.n	80089a4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008988:	4b37      	ldr	r3, [pc, #220]	; (8008a68 <mem_free+0xf8>)
 800898a:	f240 2273 	movw	r2, #627	; 0x273
 800898e:	4937      	ldr	r1, [pc, #220]	; (8008a6c <mem_free+0xfc>)
 8008990:	4837      	ldr	r0, [pc, #220]	; (8008a70 <mem_free+0x100>)
 8008992:	f00a fa93 	bl	8012ebc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008996:	f00a f89b 	bl	8012ad0 <sys_arch_protect>
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f00a f8a5 	bl	8012aec <sys_arch_unprotect>
    return;
 80089a2:	e05e      	b.n	8008a62 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3b08      	subs	r3, #8
 80089a8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80089aa:	4b32      	ldr	r3, [pc, #200]	; (8008a74 <mem_free+0x104>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69fa      	ldr	r2, [r7, #28]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d306      	bcc.n	80089c2 <mem_free+0x52>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f103 020c 	add.w	r2, r3, #12
 80089ba:	4b2f      	ldr	r3, [pc, #188]	; (8008a78 <mem_free+0x108>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d90d      	bls.n	80089de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80089c2:	4b29      	ldr	r3, [pc, #164]	; (8008a68 <mem_free+0xf8>)
 80089c4:	f240 227f 	movw	r2, #639	; 0x27f
 80089c8:	492c      	ldr	r1, [pc, #176]	; (8008a7c <mem_free+0x10c>)
 80089ca:	4829      	ldr	r0, [pc, #164]	; (8008a70 <mem_free+0x100>)
 80089cc:	f00a fa76 	bl	8012ebc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80089d0:	f00a f87e 	bl	8012ad0 <sys_arch_protect>
 80089d4:	6138      	str	r0, [r7, #16]
 80089d6:	6938      	ldr	r0, [r7, #16]
 80089d8:	f00a f888 	bl	8012aec <sys_arch_unprotect>
    return;
 80089dc:	e041      	b.n	8008a62 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80089de:	4828      	ldr	r0, [pc, #160]	; (8008a80 <mem_free+0x110>)
 80089e0:	f00a f834 	bl	8012a4c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	791b      	ldrb	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d110      	bne.n	8008a0e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <mem_free+0xf8>)
 80089ee:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80089f2:	4924      	ldr	r1, [pc, #144]	; (8008a84 <mem_free+0x114>)
 80089f4:	481e      	ldr	r0, [pc, #120]	; (8008a70 <mem_free+0x100>)
 80089f6:	f00a fa61 	bl	8012ebc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80089fa:	4821      	ldr	r0, [pc, #132]	; (8008a80 <mem_free+0x110>)
 80089fc:	f00a f835 	bl	8012a6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008a00:	f00a f866 	bl	8012ad0 <sys_arch_protect>
 8008a04:	6178      	str	r0, [r7, #20]
 8008a06:	6978      	ldr	r0, [r7, #20]
 8008a08:	f00a f870 	bl	8012aec <sys_arch_unprotect>
    return;
 8008a0c:	e029      	b.n	8008a62 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8008a0e:	69f8      	ldr	r0, [r7, #28]
 8008a10:	f7ff ff70 	bl	80088f4 <mem_link_valid>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d110      	bne.n	8008a3c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008a1a:	4b13      	ldr	r3, [pc, #76]	; (8008a68 <mem_free+0xf8>)
 8008a1c:	f240 2295 	movw	r2, #661	; 0x295
 8008a20:	4919      	ldr	r1, [pc, #100]	; (8008a88 <mem_free+0x118>)
 8008a22:	4813      	ldr	r0, [pc, #76]	; (8008a70 <mem_free+0x100>)
 8008a24:	f00a fa4a 	bl	8012ebc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008a28:	4815      	ldr	r0, [pc, #84]	; (8008a80 <mem_free+0x110>)
 8008a2a:	f00a f81e 	bl	8012a6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008a2e:	f00a f84f 	bl	8012ad0 <sys_arch_protect>
 8008a32:	61b8      	str	r0, [r7, #24]
 8008a34:	69b8      	ldr	r0, [r7, #24]
 8008a36:	f00a f859 	bl	8012aec <sys_arch_unprotect>
    return;
 8008a3a:	e012      	b.n	8008a62 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <mem_free+0x11c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d202      	bcs.n	8008a52 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008a4c:	4a0f      	ldr	r2, [pc, #60]	; (8008a8c <mem_free+0x11c>)
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008a52:	69f8      	ldr	r0, [r7, #28]
 8008a54:	f7ff fe5a 	bl	800870c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008a58:	4809      	ldr	r0, [pc, #36]	; (8008a80 <mem_free+0x110>)
 8008a5a:	f00a f806 	bl	8012a6a <sys_mutex_unlock>
 8008a5e:	e000      	b.n	8008a62 <mem_free+0xf2>
    return;
 8008a60:	bf00      	nop
}
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	08013ef0 	.word	0x08013ef0
 8008a6c:	08013fe0 	.word	0x08013fe0
 8008a70:	08013f38 	.word	0x08013f38
 8008a74:	24008c24 	.word	0x24008c24
 8008a78:	24008c28 	.word	0x24008c28
 8008a7c:	08014004 	.word	0x08014004
 8008a80:	24008c2c 	.word	0x24008c2c
 8008a84:	08014020 	.word	0x08014020
 8008a88:	08014048 	.word	0x08014048
 8008a8c:	24008c30 	.word	0x24008c30

08008a90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008a9c:	887b      	ldrh	r3, [r7, #2]
 8008a9e:	3303      	adds	r3, #3
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008aa8:	8bfb      	ldrh	r3, [r7, #30]
 8008aaa:	2b0b      	cmp	r3, #11
 8008aac:	d801      	bhi.n	8008ab2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008aae:	230c      	movs	r3, #12
 8008ab0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008ab2:	8bfb      	ldrh	r3, [r7, #30]
 8008ab4:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d803      	bhi.n	8008ac4 <mem_trim+0x34>
 8008abc:	8bfa      	ldrh	r2, [r7, #30]
 8008abe:	887b      	ldrh	r3, [r7, #2]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d201      	bcs.n	8008ac8 <mem_trim+0x38>
    return NULL;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e0dc      	b.n	8008c82 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008ac8:	4b70      	ldr	r3, [pc, #448]	; (8008c8c <mem_trim+0x1fc>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d304      	bcc.n	8008adc <mem_trim+0x4c>
 8008ad2:	4b6f      	ldr	r3, [pc, #444]	; (8008c90 <mem_trim+0x200>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d306      	bcc.n	8008aea <mem_trim+0x5a>
 8008adc:	4b6d      	ldr	r3, [pc, #436]	; (8008c94 <mem_trim+0x204>)
 8008ade:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008ae2:	496d      	ldr	r1, [pc, #436]	; (8008c98 <mem_trim+0x208>)
 8008ae4:	486d      	ldr	r0, [pc, #436]	; (8008c9c <mem_trim+0x20c>)
 8008ae6:	f00a f9e9 	bl	8012ebc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008aea:	4b68      	ldr	r3, [pc, #416]	; (8008c8c <mem_trim+0x1fc>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d304      	bcc.n	8008afe <mem_trim+0x6e>
 8008af4:	4b66      	ldr	r3, [pc, #408]	; (8008c90 <mem_trim+0x200>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d307      	bcc.n	8008b0e <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008afe:	f009 ffe7 	bl	8012ad0 <sys_arch_protect>
 8008b02:	60b8      	str	r0, [r7, #8]
 8008b04:	68b8      	ldr	r0, [r7, #8]
 8008b06:	f009 fff1 	bl	8012aec <sys_arch_unprotect>
    return rmem;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	e0b9      	b.n	8008c82 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3b08      	subs	r3, #8
 8008b12:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008b14:	69b8      	ldr	r0, [r7, #24]
 8008b16:	f7ff fde7 	bl	80086e8 <mem_to_ptr>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	881a      	ldrh	r2, [r3, #0]
 8008b22:	8afb      	ldrh	r3, [r7, #22]
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	3b08      	subs	r3, #8
 8008b2a:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008b2c:	8bfa      	ldrh	r2, [r7, #30]
 8008b2e:	8abb      	ldrh	r3, [r7, #20]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d906      	bls.n	8008b42 <mem_trim+0xb2>
 8008b34:	4b57      	ldr	r3, [pc, #348]	; (8008c94 <mem_trim+0x204>)
 8008b36:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008b3a:	4959      	ldr	r1, [pc, #356]	; (8008ca0 <mem_trim+0x210>)
 8008b3c:	4857      	ldr	r0, [pc, #348]	; (8008c9c <mem_trim+0x20c>)
 8008b3e:	f00a f9bd 	bl	8012ebc <iprintf>
  if (newsize > size) {
 8008b42:	8bfa      	ldrh	r2, [r7, #30]
 8008b44:	8abb      	ldrh	r3, [r7, #20]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d901      	bls.n	8008b4e <mem_trim+0xbe>
    /* not supported */
    return NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e099      	b.n	8008c82 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 8008b4e:	8bfa      	ldrh	r2, [r7, #30]
 8008b50:	8abb      	ldrh	r3, [r7, #20]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d101      	bne.n	8008b5a <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	e093      	b.n	8008c82 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008b5a:	4852      	ldr	r0, [pc, #328]	; (8008ca4 <mem_trim+0x214>)
 8008b5c:	f009 ff76 	bl	8012a4c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff fdad 	bl	80086c4 <ptr_to_mem>
 8008b6a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	791b      	ldrb	r3, [r3, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d141      	bne.n	8008bf8 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d106      	bne.n	8008b8e <mem_trim+0xfe>
 8008b80:	4b44      	ldr	r3, [pc, #272]	; (8008c94 <mem_trim+0x204>)
 8008b82:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008b86:	4948      	ldr	r1, [pc, #288]	; (8008ca8 <mem_trim+0x218>)
 8008b88:	4844      	ldr	r0, [pc, #272]	; (8008c9c <mem_trim+0x20c>)
 8008b8a:	f00a f997 	bl	8012ebc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	881b      	ldrh	r3, [r3, #0]
 8008b92:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008b94:	8afa      	ldrh	r2, [r7, #22]
 8008b96:	8bfb      	ldrh	r3, [r7, #30]
 8008b98:	4413      	add	r3, r2
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	3308      	adds	r3, #8
 8008b9e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008ba0:	4b42      	ldr	r3, [pc, #264]	; (8008cac <mem_trim+0x21c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d106      	bne.n	8008bb8 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8008baa:	89fb      	ldrh	r3, [r7, #14]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fd89 	bl	80086c4 <ptr_to_mem>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	4a3d      	ldr	r2, [pc, #244]	; (8008cac <mem_trim+0x21c>)
 8008bb6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008bb8:	89fb      	ldrh	r3, [r7, #14]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff fd82 	bl	80086c4 <ptr_to_mem>
 8008bc0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	89ba      	ldrh	r2, [r7, #12]
 8008bcc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	8afa      	ldrh	r2, [r7, #22]
 8008bd2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	89fa      	ldrh	r2, [r7, #14]
 8008bd8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d049      	beq.n	8008c7a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff fd6a 	bl	80086c4 <ptr_to_mem>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	89fb      	ldrh	r3, [r7, #14]
 8008bf4:	8053      	strh	r3, [r2, #2]
 8008bf6:	e040      	b.n	8008c7a <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008bf8:	8bfb      	ldrh	r3, [r7, #30]
 8008bfa:	f103 0214 	add.w	r2, r3, #20
 8008bfe:	8abb      	ldrh	r3, [r7, #20]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d83a      	bhi.n	8008c7a <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008c04:	8afa      	ldrh	r2, [r7, #22]
 8008c06:	8bfb      	ldrh	r3, [r7, #30]
 8008c08:	4413      	add	r3, r2
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d106      	bne.n	8008c2a <mem_trim+0x19a>
 8008c1c:	4b1d      	ldr	r3, [pc, #116]	; (8008c94 <mem_trim+0x204>)
 8008c1e:	f240 3216 	movw	r2, #790	; 0x316
 8008c22:	4921      	ldr	r1, [pc, #132]	; (8008ca8 <mem_trim+0x218>)
 8008c24:	481d      	ldr	r0, [pc, #116]	; (8008c9c <mem_trim+0x20c>)
 8008c26:	f00a f949 	bl	8012ebc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fd49 	bl	80086c4 <ptr_to_mem>
 8008c32:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008c34:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <mem_trim+0x21c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d202      	bcs.n	8008c44 <mem_trim+0x1b4>
      lfree = mem2;
 8008c3e:	4a1b      	ldr	r2, [pc, #108]	; (8008cac <mem_trim+0x21c>)
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2200      	movs	r2, #0
 8008c48:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	881a      	ldrh	r2, [r3, #0]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	8afa      	ldrh	r2, [r7, #22]
 8008c56:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	89fa      	ldrh	r2, [r7, #14]
 8008c5c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d007      	beq.n	8008c7a <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fd28 	bl	80086c4 <ptr_to_mem>
 8008c74:	4602      	mov	r2, r0
 8008c76:	89fb      	ldrh	r3, [r7, #14]
 8008c78:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008c7a:	480a      	ldr	r0, [pc, #40]	; (8008ca4 <mem_trim+0x214>)
 8008c7c:	f009 fef5 	bl	8012a6a <sys_mutex_unlock>
  return rmem;
 8008c80:	687b      	ldr	r3, [r7, #4]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3720      	adds	r7, #32
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	24008c24 	.word	0x24008c24
 8008c90:	24008c28 	.word	0x24008c28
 8008c94:	08013ef0 	.word	0x08013ef0
 8008c98:	0801407c 	.word	0x0801407c
 8008c9c:	08013f38 	.word	0x08013f38
 8008ca0:	08014094 	.word	0x08014094
 8008ca4:	24008c2c 	.word	0x24008c2c
 8008ca8:	080140b4 	.word	0x080140b4
 8008cac:	24008c30 	.word	0x24008c30

08008cb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <mem_malloc+0x14>
    return NULL;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e0e6      	b.n	8008e92 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	3303      	adds	r3, #3
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f023 0303 	bic.w	r3, r3, #3
 8008cce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008cd0:	8bbb      	ldrh	r3, [r7, #28]
 8008cd2:	2b0b      	cmp	r3, #11
 8008cd4:	d801      	bhi.n	8008cda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008cd6:	230c      	movs	r3, #12
 8008cd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008cda:	8bbb      	ldrh	r3, [r7, #28]
 8008cdc:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d803      	bhi.n	8008cec <mem_malloc+0x3c>
 8008ce4:	8bba      	ldrh	r2, [r7, #28]
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d201      	bcs.n	8008cf0 <mem_malloc+0x40>
    return NULL;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e0d0      	b.n	8008e92 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008cf0:	486a      	ldr	r0, [pc, #424]	; (8008e9c <mem_malloc+0x1ec>)
 8008cf2:	f009 feab 	bl	8012a4c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008cf6:	4b6a      	ldr	r3, [pc, #424]	; (8008ea0 <mem_malloc+0x1f0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fcf4 	bl	80086e8 <mem_to_ptr>
 8008d00:	4603      	mov	r3, r0
 8008d02:	83fb      	strh	r3, [r7, #30]
 8008d04:	e0b9      	b.n	8008e7a <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008d06:	8bfb      	ldrh	r3, [r7, #30]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fcdb 	bl	80086c4 <ptr_to_mem>
 8008d0e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	791b      	ldrb	r3, [r3, #4]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 80a9 	bne.w	8008e6c <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	8bfb      	ldrh	r3, [r7, #30]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	f1a3 0208 	sub.w	r2, r3, #8
 8008d28:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	f0c0 809e 	bcc.w	8008e6c <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	461a      	mov	r2, r3
 8008d36:	8bfb      	ldrh	r3, [r7, #30]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	f1a3 0208 	sub.w	r2, r3, #8
 8008d3e:	8bbb      	ldrh	r3, [r7, #28]
 8008d40:	3314      	adds	r3, #20
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d335      	bcc.n	8008db2 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008d46:	8bfa      	ldrh	r2, [r7, #30]
 8008d48:	8bbb      	ldrh	r3, [r7, #28]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	3308      	adds	r3, #8
 8008d50:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008d52:	8a7b      	ldrh	r3, [r7, #18]
 8008d54:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d106      	bne.n	8008d6a <mem_malloc+0xba>
 8008d5c:	4b51      	ldr	r3, [pc, #324]	; (8008ea4 <mem_malloc+0x1f4>)
 8008d5e:	f240 3287 	movw	r2, #903	; 0x387
 8008d62:	4951      	ldr	r1, [pc, #324]	; (8008ea8 <mem_malloc+0x1f8>)
 8008d64:	4851      	ldr	r0, [pc, #324]	; (8008eac <mem_malloc+0x1fc>)
 8008d66:	f00a f8a9 	bl	8012ebc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008d6a:	8a7b      	ldrh	r3, [r7, #18]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fca9 	bl	80086c4 <ptr_to_mem>
 8008d72:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2200      	movs	r2, #0
 8008d78:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	881a      	ldrh	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8bfa      	ldrh	r2, [r7, #30]
 8008d86:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	8a7a      	ldrh	r2, [r7, #18]
 8008d8c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2201      	movs	r2, #1
 8008d92:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	f643 72e8 	movw	r2, #16360	; 0x3fe8
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00b      	beq.n	8008db8 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7ff fc8d 	bl	80086c4 <ptr_to_mem>
 8008daa:	4602      	mov	r2, r0
 8008dac:	8a7b      	ldrh	r3, [r7, #18]
 8008dae:	8053      	strh	r3, [r2, #2]
 8008db0:	e002      	b.n	8008db8 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2201      	movs	r2, #1
 8008db6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008db8:	4b39      	ldr	r3, [pc, #228]	; (8008ea0 <mem_malloc+0x1f0>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d127      	bne.n	8008e12 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8008dc2:	4b37      	ldr	r3, [pc, #220]	; (8008ea0 <mem_malloc+0x1f0>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008dc8:	e005      	b.n	8008dd6 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fc78 	bl	80086c4 <ptr_to_mem>
 8008dd4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	791b      	ldrb	r3, [r3, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d004      	beq.n	8008de8 <mem_malloc+0x138>
 8008dde:	4b34      	ldr	r3, [pc, #208]	; (8008eb0 <mem_malloc+0x200>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d1f0      	bne.n	8008dca <mem_malloc+0x11a>
          }
          lfree = cur;
 8008de8:	4a2d      	ldr	r2, [pc, #180]	; (8008ea0 <mem_malloc+0x1f0>)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008dee:	4b2c      	ldr	r3, [pc, #176]	; (8008ea0 <mem_malloc+0x1f0>)
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	4b2f      	ldr	r3, [pc, #188]	; (8008eb0 <mem_malloc+0x200>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d00b      	beq.n	8008e12 <mem_malloc+0x162>
 8008dfa:	4b29      	ldr	r3, [pc, #164]	; (8008ea0 <mem_malloc+0x1f0>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	791b      	ldrb	r3, [r3, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d006      	beq.n	8008e12 <mem_malloc+0x162>
 8008e04:	4b27      	ldr	r3, [pc, #156]	; (8008ea4 <mem_malloc+0x1f4>)
 8008e06:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008e0a:	492a      	ldr	r1, [pc, #168]	; (8008eb4 <mem_malloc+0x204>)
 8008e0c:	4827      	ldr	r0, [pc, #156]	; (8008eac <mem_malloc+0x1fc>)
 8008e0e:	f00a f855 	bl	8012ebc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008e12:	4822      	ldr	r0, [pc, #136]	; (8008e9c <mem_malloc+0x1ec>)
 8008e14:	f009 fe29 	bl	8012a6a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008e18:	8bba      	ldrh	r2, [r7, #28]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3308      	adds	r3, #8
 8008e20:	4a23      	ldr	r2, [pc, #140]	; (8008eb0 <mem_malloc+0x200>)
 8008e22:	6812      	ldr	r2, [r2, #0]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d906      	bls.n	8008e36 <mem_malloc+0x186>
 8008e28:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <mem_malloc+0x1f4>)
 8008e2a:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008e2e:	4922      	ldr	r1, [pc, #136]	; (8008eb8 <mem_malloc+0x208>)
 8008e30:	481e      	ldr	r0, [pc, #120]	; (8008eac <mem_malloc+0x1fc>)
 8008e32:	f00a f843 	bl	8012ebc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f003 0303 	and.w	r3, r3, #3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d006      	beq.n	8008e4e <mem_malloc+0x19e>
 8008e40:	4b18      	ldr	r3, [pc, #96]	; (8008ea4 <mem_malloc+0x1f4>)
 8008e42:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008e46:	491d      	ldr	r1, [pc, #116]	; (8008ebc <mem_malloc+0x20c>)
 8008e48:	4818      	ldr	r0, [pc, #96]	; (8008eac <mem_malloc+0x1fc>)
 8008e4a:	f00a f837 	bl	8012ebc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f003 0303 	and.w	r3, r3, #3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <mem_malloc+0x1b6>
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <mem_malloc+0x1f4>)
 8008e5a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008e5e:	4918      	ldr	r1, [pc, #96]	; (8008ec0 <mem_malloc+0x210>)
 8008e60:	4812      	ldr	r0, [pc, #72]	; (8008eac <mem_malloc+0x1fc>)
 8008e62:	f00a f82b 	bl	8012ebc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	e012      	b.n	8008e92 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8008e6c:	8bfb      	ldrh	r3, [r7, #30]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff fc28 	bl	80086c4 <ptr_to_mem>
 8008e74:	4603      	mov	r3, r0
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008e7a:	8bfa      	ldrh	r2, [r7, #30]
 8008e7c:	8bb9      	ldrh	r1, [r7, #28]
 8008e7e:	f643 73e8 	movw	r3, #16360	; 0x3fe8
 8008e82:	1a5b      	subs	r3, r3, r1
 8008e84:	429a      	cmp	r2, r3
 8008e86:	f4ff af3e 	bcc.w	8008d06 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008e8a:	4804      	ldr	r0, [pc, #16]	; (8008e9c <mem_malloc+0x1ec>)
 8008e8c:	f009 fded 	bl	8012a6a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	24008c2c 	.word	0x24008c2c
 8008ea0:	24008c30 	.word	0x24008c30
 8008ea4:	08013ef0 	.word	0x08013ef0
 8008ea8:	080140b4 	.word	0x080140b4
 8008eac:	08013f38 	.word	0x08013f38
 8008eb0:	24008c28 	.word	0x24008c28
 8008eb4:	080140c8 	.word	0x080140c8
 8008eb8:	080140e4 	.word	0x080140e4
 8008ebc:	08014114 	.word	0x08014114
 8008ec0:	08014144 	.word	0x08014144

08008ec4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	3303      	adds	r3, #3
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60fb      	str	r3, [r7, #12]
 8008ee4:	e011      	b.n	8008f0a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	461a      	mov	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	4413      	add	r3, r2
 8008f02:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	885b      	ldrh	r3, [r3, #2]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4293      	cmp	r3, r2
 8008f14:	dbe7      	blt.n	8008ee6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008f16:	bf00      	nop
 8008f18:	bf00      	nop
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	80fb      	strh	r3, [r7, #6]
 8008f2e:	e009      	b.n	8008f44 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008f30:	88fb      	ldrh	r3, [r7, #6]
 8008f32:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <memp_init+0x30>)
 8008f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff ffc3 	bl	8008ec4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008f3e:	88fb      	ldrh	r3, [r7, #6]
 8008f40:	3301      	adds	r3, #1
 8008f42:	80fb      	strh	r3, [r7, #6]
 8008f44:	88fb      	ldrh	r3, [r7, #6]
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d9f2      	bls.n	8008f30 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	08016950 	.word	0x08016950

08008f58 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008f60:	f009 fdb6 	bl	8012ad0 <sys_arch_protect>
 8008f64:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d015      	beq.n	8008fa0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	6812      	ldr	r2, [r2, #0]
 8008f7c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <do_memp_malloc_pool+0x3e>
 8008f88:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <do_memp_malloc_pool+0x58>)
 8008f8a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008f8e:	4909      	ldr	r1, [pc, #36]	; (8008fb4 <do_memp_malloc_pool+0x5c>)
 8008f90:	4809      	ldr	r0, [pc, #36]	; (8008fb8 <do_memp_malloc_pool+0x60>)
 8008f92:	f009 ff93 	bl	8012ebc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f009 fda8 	bl	8012aec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	e003      	b.n	8008fa8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f009 fda3 	bl	8012aec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	08014168 	.word	0x08014168
 8008fb4:	08014198 	.word	0x08014198
 8008fb8:	080141bc 	.word	0x080141bc

08008fbc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <memp_malloc_pool+0x1c>
 8008fca:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <memp_malloc_pool+0x38>)
 8008fcc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008fd0:	4909      	ldr	r1, [pc, #36]	; (8008ff8 <memp_malloc_pool+0x3c>)
 8008fd2:	480a      	ldr	r0, [pc, #40]	; (8008ffc <memp_malloc_pool+0x40>)
 8008fd4:	f009 ff72 	bl	8012ebc <iprintf>
  if (desc == NULL) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <memp_malloc_pool+0x26>
    return NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e003      	b.n	8008fea <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ffb8 	bl	8008f58 <do_memp_malloc_pool>
 8008fe8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	08014168 	.word	0x08014168
 8008ff8:	080141e4 	.word	0x080141e4
 8008ffc:	080141bc 	.word	0x080141bc

08009000 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	2b0c      	cmp	r3, #12
 800900e:	d908      	bls.n	8009022 <memp_malloc+0x22>
 8009010:	4b0a      	ldr	r3, [pc, #40]	; (800903c <memp_malloc+0x3c>)
 8009012:	f240 1257 	movw	r2, #343	; 0x157
 8009016:	490a      	ldr	r1, [pc, #40]	; (8009040 <memp_malloc+0x40>)
 8009018:	480a      	ldr	r0, [pc, #40]	; (8009044 <memp_malloc+0x44>)
 800901a:	f009 ff4f 	bl	8012ebc <iprintf>
 800901e:	2300      	movs	r3, #0
 8009020:	e008      	b.n	8009034 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009022:	79fb      	ldrb	r3, [r7, #7]
 8009024:	4a08      	ldr	r2, [pc, #32]	; (8009048 <memp_malloc+0x48>)
 8009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff ff94 	bl	8008f58 <do_memp_malloc_pool>
 8009030:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009032:	68fb      	ldr	r3, [r7, #12]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	08014168 	.word	0x08014168
 8009040:	080141f8 	.word	0x080141f8
 8009044:	080141bc 	.word	0x080141bc
 8009048:	08016950 	.word	0x08016950

0800904c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <do_memp_free_pool+0x22>
 8009060:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <do_memp_free_pool+0x4c>)
 8009062:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009066:	490d      	ldr	r1, [pc, #52]	; (800909c <do_memp_free_pool+0x50>)
 8009068:	480d      	ldr	r0, [pc, #52]	; (80090a0 <do_memp_free_pool+0x54>)
 800906a:	f009 ff27 	bl	8012ebc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009072:	f009 fd2d 	bl	8012ad0 <sys_arch_protect>
 8009076:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800908a:	68b8      	ldr	r0, [r7, #8]
 800908c:	f009 fd2e 	bl	8012aec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	08014168 	.word	0x08014168
 800909c:	08014218 	.word	0x08014218
 80090a0:	080141bc 	.word	0x080141bc

080090a4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <memp_free_pool+0x1e>
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <memp_free_pool+0x3c>)
 80090b6:	f240 1295 	movw	r2, #405	; 0x195
 80090ba:	490a      	ldr	r1, [pc, #40]	; (80090e4 <memp_free_pool+0x40>)
 80090bc:	480a      	ldr	r0, [pc, #40]	; (80090e8 <memp_free_pool+0x44>)
 80090be:	f009 fefd 	bl	8012ebc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d007      	beq.n	80090d8 <memp_free_pool+0x34>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff ffbb 	bl	800904c <do_memp_free_pool>
 80090d6:	e000      	b.n	80090da <memp_free_pool+0x36>
    return;
 80090d8:	bf00      	nop
}
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	08014168 	.word	0x08014168
 80090e4:	080141e4 	.word	0x080141e4
 80090e8:	080141bc 	.word	0x080141bc

080090ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b0c      	cmp	r3, #12
 80090fc:	d907      	bls.n	800910e <memp_free+0x22>
 80090fe:	4b0c      	ldr	r3, [pc, #48]	; (8009130 <memp_free+0x44>)
 8009100:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009104:	490b      	ldr	r1, [pc, #44]	; (8009134 <memp_free+0x48>)
 8009106:	480c      	ldr	r0, [pc, #48]	; (8009138 <memp_free+0x4c>)
 8009108:	f009 fed8 	bl	8012ebc <iprintf>
 800910c:	e00c      	b.n	8009128 <memp_free+0x3c>

  if (mem == NULL) {
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	4a09      	ldr	r2, [pc, #36]	; (800913c <memp_free+0x50>)
 8009118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff ff94 	bl	800904c <do_memp_free_pool>
 8009124:	e000      	b.n	8009128 <memp_free+0x3c>
    return;
 8009126:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	08014168 	.word	0x08014168
 8009134:	08014238 	.word	0x08014238
 8009138:	080141bc 	.word	0x080141bc
 800913c:	08016950 	.word	0x08016950

08009140 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009140:	b480      	push	{r7}
 8009142:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009144:	bf00      	nop
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d108      	bne.n	8009176 <netif_add+0x26>
 8009164:	4b57      	ldr	r3, [pc, #348]	; (80092c4 <netif_add+0x174>)
 8009166:	f240 1227 	movw	r2, #295	; 0x127
 800916a:	4957      	ldr	r1, [pc, #348]	; (80092c8 <netif_add+0x178>)
 800916c:	4857      	ldr	r0, [pc, #348]	; (80092cc <netif_add+0x17c>)
 800916e:	f009 fea5 	bl	8012ebc <iprintf>
 8009172:	2300      	movs	r3, #0
 8009174:	e0a2      	b.n	80092bc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d108      	bne.n	800918e <netif_add+0x3e>
 800917c:	4b51      	ldr	r3, [pc, #324]	; (80092c4 <netif_add+0x174>)
 800917e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009182:	4953      	ldr	r1, [pc, #332]	; (80092d0 <netif_add+0x180>)
 8009184:	4851      	ldr	r0, [pc, #324]	; (80092cc <netif_add+0x17c>)
 8009186:	f009 fe99 	bl	8012ebc <iprintf>
 800918a:	2300      	movs	r3, #0
 800918c:	e096      	b.n	80092bc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009194:	4b4f      	ldr	r3, [pc, #316]	; (80092d4 <netif_add+0x184>)
 8009196:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d101      	bne.n	80091a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800919e:	4b4d      	ldr	r3, [pc, #308]	; (80092d4 <netif_add+0x184>)
 80091a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80091a8:	4b4a      	ldr	r3, [pc, #296]	; (80092d4 <netif_add+0x184>)
 80091aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4a45      	ldr	r2, [pc, #276]	; (80092d8 <netif_add+0x188>)
 80091c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2200      	movs	r2, #0
 80091c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a3a      	ldr	r2, [r7, #32]
 80091dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80091de:	4b3f      	ldr	r3, [pc, #252]	; (80092dc <netif_add+0x18c>)
 80091e0:	781a      	ldrb	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	68b9      	ldr	r1, [r7, #8]
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 f913 	bl	8009420 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80091fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	4798      	blx	r3
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <netif_add+0xba>
    return NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	e058      	b.n	80092bc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009210:	2bff      	cmp	r3, #255	; 0xff
 8009212:	d103      	bne.n	800921c <netif_add+0xcc>
        netif->num = 0;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009220:	4b2f      	ldr	r3, [pc, #188]	; (80092e0 <netif_add+0x190>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	e02b      	b.n	8009280 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	429a      	cmp	r2, r3
 800922e:	d106      	bne.n	800923e <netif_add+0xee>
 8009230:	4b24      	ldr	r3, [pc, #144]	; (80092c4 <netif_add+0x174>)
 8009232:	f240 128b 	movw	r2, #395	; 0x18b
 8009236:	492b      	ldr	r1, [pc, #172]	; (80092e4 <netif_add+0x194>)
 8009238:	4824      	ldr	r0, [pc, #144]	; (80092cc <netif_add+0x17c>)
 800923a:	f009 fe3f 	bl	8012ebc <iprintf>
        num_netifs++;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	3301      	adds	r3, #1
 8009242:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2bff      	cmp	r3, #255	; 0xff
 8009248:	dd06      	ble.n	8009258 <netif_add+0x108>
 800924a:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <netif_add+0x174>)
 800924c:	f240 128d 	movw	r2, #397	; 0x18d
 8009250:	4925      	ldr	r1, [pc, #148]	; (80092e8 <netif_add+0x198>)
 8009252:	481e      	ldr	r0, [pc, #120]	; (80092cc <netif_add+0x17c>)
 8009254:	f009 fe32 	bl	8012ebc <iprintf>
        if (netif2->num == netif->num) {
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009264:	429a      	cmp	r2, r3
 8009266:	d108      	bne.n	800927a <netif_add+0x12a>
          netif->num++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800926e:	3301      	adds	r3, #1
 8009270:	b2da      	uxtb	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8009278:	e005      	b.n	8009286 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1d0      	bne.n	8009228 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1be      	bne.n	800920a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009292:	2bfe      	cmp	r3, #254	; 0xfe
 8009294:	d103      	bne.n	800929e <netif_add+0x14e>
    netif_num = 0;
 8009296:	4b11      	ldr	r3, [pc, #68]	; (80092dc <netif_add+0x18c>)
 8009298:	2200      	movs	r2, #0
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e006      	b.n	80092ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092a4:	3301      	adds	r3, #1
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <netif_add+0x18c>)
 80092aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80092ac:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <netif_add+0x190>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80092b4:	4a0a      	ldr	r2, [pc, #40]	; (80092e0 <netif_add+0x190>)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80092ba:	68fb      	ldr	r3, [r7, #12]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	08014254 	.word	0x08014254
 80092c8:	080142e8 	.word	0x080142e8
 80092cc:	080142a4 	.word	0x080142a4
 80092d0:	08014304 	.word	0x08014304
 80092d4:	080169c4 	.word	0x080169c4
 80092d8:	080096fb 	.word	0x080096fb
 80092dc:	2400bd08 	.word	0x2400bd08
 80092e0:	2400bd00 	.word	0x2400bd00
 80092e4:	08014328 	.word	0x08014328
 80092e8:	0801433c 	.word	0x0801433c

080092ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f002 fb8d 	bl	800ba18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f006 ffd1 	bl	80102a8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <netif_do_set_ipaddr+0x20>
 8009322:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <netif_do_set_ipaddr+0x88>)
 8009324:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009328:	491c      	ldr	r1, [pc, #112]	; (800939c <netif_do_set_ipaddr+0x8c>)
 800932a:	481d      	ldr	r0, [pc, #116]	; (80093a0 <netif_do_set_ipaddr+0x90>)
 800932c:	f009 fdc6 	bl	8012ebc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d106      	bne.n	8009344 <netif_do_set_ipaddr+0x34>
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <netif_do_set_ipaddr+0x88>)
 8009338:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800933c:	4917      	ldr	r1, [pc, #92]	; (800939c <netif_do_set_ipaddr+0x8c>)
 800933e:	4818      	ldr	r0, [pc, #96]	; (80093a0 <netif_do_set_ipaddr+0x90>)
 8009340:	f009 fdbc 	bl	8012ebc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3304      	adds	r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d01c      	beq.n	800938c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3304      	adds	r3, #4
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009362:	f107 0314 	add.w	r3, r7, #20
 8009366:	4619      	mov	r1, r3
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ffbf 	bl	80092ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <netif_do_set_ipaddr+0x6a>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	e000      	b.n	800937c <netif_do_set_ipaddr+0x6c>
 800937a:	2300      	movs	r3, #0
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009380:	2101      	movs	r1, #1
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 f8d2 	bl	800952c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009388:	2301      	movs	r3, #1
 800938a:	e000      	b.n	800938e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	08014254 	.word	0x08014254
 800939c:	0801436c 	.word	0x0801436c
 80093a0:	080142a4 	.word	0x080142a4

080093a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	3308      	adds	r3, #8
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d00a      	beq.n	80093d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <netif_do_set_netmask+0x26>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	e000      	b.n	80093cc <netif_do_set_netmask+0x28>
 80093ca:	2300      	movs	r3, #0
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	330c      	adds	r3, #12
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d00a      	beq.n	8009412 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <netif_do_set_gw+0x26>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	e000      	b.n	800940a <netif_do_set_gw+0x28>
 8009408:	2300      	movs	r3, #0
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800940e:	2301      	movs	r3, #1
 8009410:	e000      	b.n	8009414 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800942e:	2300      	movs	r3, #0
 8009430:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009432:	2300      	movs	r3, #0
 8009434:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800943c:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <netif_set_addr+0x90>)
 800943e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009446:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <netif_set_addr+0x90>)
 8009448:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009450:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <netif_set_addr+0x90>)
 8009452:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <netif_set_addr+0x42>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <netif_set_addr+0x46>
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <netif_set_addr+0x48>
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]
  if (remove) {
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009470:	f107 0310 	add.w	r3, r7, #16
 8009474:	461a      	mov	r2, r3
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff ff49 	bl	8009310 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7ff ff8e 	bl	80093a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009488:	69ba      	ldr	r2, [r7, #24]
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff ffa8 	bl	80093e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009498:	f107 0310 	add.w	r3, r7, #16
 800949c:	461a      	mov	r2, r3
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff ff35 	bl	8009310 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80094a6:	bf00      	nop
 80094a8:	3720      	adds	r7, #32
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	080169c4 	.word	0x080169c4

080094b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80094bc:	4a04      	ldr	r2, [pc, #16]	; (80094d0 <netif_set_default+0x1c>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	2400bd04 	.word	0x2400bd04

080094d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d107      	bne.n	80094f2 <netif_set_up+0x1e>
 80094e2:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <netif_set_up+0x4c>)
 80094e4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80094e8:	490e      	ldr	r1, [pc, #56]	; (8009524 <netif_set_up+0x50>)
 80094ea:	480f      	ldr	r0, [pc, #60]	; (8009528 <netif_set_up+0x54>)
 80094ec:	f009 fce6 	bl	8012ebc <iprintf>
 80094f0:	e013      	b.n	800951a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10c      	bne.n	800951a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009506:	f043 0301 	orr.w	r3, r3, #1
 800950a:	b2da      	uxtb	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009512:	2103      	movs	r1, #3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f809 	bl	800952c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	08014254 	.word	0x08014254
 8009524:	080143dc 	.word	0x080143dc
 8009528:	080142a4 	.word	0x080142a4

0800952c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <netif_issue_reports+0x20>
 800953e:	4b18      	ldr	r3, [pc, #96]	; (80095a0 <netif_issue_reports+0x74>)
 8009540:	f240 326d 	movw	r2, #877	; 0x36d
 8009544:	4917      	ldr	r1, [pc, #92]	; (80095a4 <netif_issue_reports+0x78>)
 8009546:	4818      	ldr	r0, [pc, #96]	; (80095a8 <netif_issue_reports+0x7c>)
 8009548:	f009 fcb8 	bl	8012ebc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009552:	f003 0304 	and.w	r3, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01e      	beq.n	8009598 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009560:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009564:	2b00      	cmp	r3, #0
 8009566:	d017      	beq.n	8009598 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	2b00      	cmp	r3, #0
 8009570:	d013      	beq.n	800959a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3304      	adds	r3, #4
 8009576:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00e      	beq.n	800959a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d007      	beq.n	800959a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	3304      	adds	r3, #4
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f007 fdf3 	bl	801117c <etharp_request>
 8009596:	e000      	b.n	800959a <netif_issue_reports+0x6e>
    return;
 8009598:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	08014254 	.word	0x08014254
 80095a4:	080143f8 	.word	0x080143f8
 80095a8:	080142a4 	.word	0x080142a4

080095ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d107      	bne.n	80095ca <netif_set_down+0x1e>
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <netif_set_down+0x58>)
 80095bc:	f240 329b 	movw	r2, #923	; 0x39b
 80095c0:	4911      	ldr	r1, [pc, #68]	; (8009608 <netif_set_down+0x5c>)
 80095c2:	4812      	ldr	r0, [pc, #72]	; (800960c <netif_set_down+0x60>)
 80095c4:	f009 fc7a 	bl	8012ebc <iprintf>
 80095c8:	e019      	b.n	80095fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d012      	beq.n	80095fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095de:	f023 0301 	bic.w	r3, r3, #1
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f007 f97d 	bl	80108f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	08014254 	.word	0x08014254
 8009608:	0801441c 	.word	0x0801441c
 800960c:	080142a4 	.word	0x080142a4

08009610 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d107      	bne.n	800962e <netif_set_link_up+0x1e>
 800961e:	4b13      	ldr	r3, [pc, #76]	; (800966c <netif_set_link_up+0x5c>)
 8009620:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009624:	4912      	ldr	r1, [pc, #72]	; (8009670 <netif_set_link_up+0x60>)
 8009626:	4813      	ldr	r0, [pc, #76]	; (8009674 <netif_set_link_up+0x64>)
 8009628:	f009 fc48 	bl	8012ebc <iprintf>
 800962c:	e01b      	b.n	8009666 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d114      	bne.n	8009666 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009642:	f043 0304 	orr.w	r3, r3, #4
 8009646:	b2da      	uxtb	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800964e:	2103      	movs	r1, #3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff6b 	bl	800952c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d003      	beq.n	8009666 <netif_set_link_up+0x56>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	08014254 	.word	0x08014254
 8009670:	0801443c 	.word	0x0801443c
 8009674:	080142a4 	.word	0x080142a4

08009678 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d107      	bne.n	8009696 <netif_set_link_down+0x1e>
 8009686:	4b11      	ldr	r3, [pc, #68]	; (80096cc <netif_set_link_down+0x54>)
 8009688:	f240 4206 	movw	r2, #1030	; 0x406
 800968c:	4910      	ldr	r1, [pc, #64]	; (80096d0 <netif_set_link_down+0x58>)
 800968e:	4811      	ldr	r0, [pc, #68]	; (80096d4 <netif_set_link_down+0x5c>)
 8009690:	f009 fc14 	bl	8012ebc <iprintf>
 8009694:	e017      	b.n	80096c6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d010      	beq.n	80096c6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80096aa:	f023 0304 	bic.w	r3, r3, #4
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <netif_set_link_down+0x4e>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	08014254 	.word	0x08014254
 80096d0:	08014460 	.word	0x08014460
 80096d4:	080142a4 	.word	0x080142a4

080096d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	61da      	str	r2, [r3, #28]
  }
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b085      	sub	sp, #20
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8009706:	f06f 030b 	mvn.w	r3, #11
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
	...

08009718 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009722:	79fb      	ldrb	r3, [r7, #7]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d013      	beq.n	8009750 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009728:	4b0d      	ldr	r3, [pc, #52]	; (8009760 <netif_get_by_index+0x48>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	e00c      	b.n	800974a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009736:	3301      	adds	r3, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	79fa      	ldrb	r2, [r7, #7]
 800973c:	429a      	cmp	r2, r3
 800973e:	d101      	bne.n	8009744 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	e006      	b.n	8009752 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1ef      	bne.n	8009730 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	2400bd00 	.word	0x2400bd00

08009764 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800976a:	f009 f9b1 	bl	8012ad0 <sys_arch_protect>
 800976e:	6038      	str	r0, [r7, #0]
 8009770:	4b0d      	ldr	r3, [pc, #52]	; (80097a8 <pbuf_free_ooseq+0x44>)
 8009772:	2200      	movs	r2, #0
 8009774:	701a      	strb	r2, [r3, #0]
 8009776:	6838      	ldr	r0, [r7, #0]
 8009778:	f009 f9b8 	bl	8012aec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <pbuf_free_ooseq+0x48>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	607b      	str	r3, [r7, #4]
 8009782:	e00a      	b.n	800979a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f002 f981 	bl	800ba94 <tcp_free_ooseq>
      return;
 8009792:	e005      	b.n	80097a0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	607b      	str	r3, [r7, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1f1      	bne.n	8009784 <pbuf_free_ooseq+0x20>
    }
  }
}
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2400bd09 	.word	0x2400bd09
 80097ac:	2400bd18 	.word	0x2400bd18

080097b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80097b8:	f7ff ffd4 	bl	8009764 <pbuf_free_ooseq>
}
 80097bc:	bf00      	nop
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80097ca:	f009 f981 	bl	8012ad0 <sys_arch_protect>
 80097ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80097d0:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <pbuf_pool_is_empty+0x4c>)
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80097d6:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <pbuf_pool_is_empty+0x4c>)
 80097d8:	2201      	movs	r2, #1
 80097da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f009 f985 	bl	8012aec <sys_arch_unprotect>

  if (!queued) {
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10f      	bne.n	8009808 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80097e8:	2100      	movs	r1, #0
 80097ea:	480a      	ldr	r0, [pc, #40]	; (8009814 <pbuf_pool_is_empty+0x50>)
 80097ec:	f7fe fdde 	bl	80083ac <tcpip_try_callback>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <pbuf_pool_is_empty+0x44>
 80097f6:	f009 f96b 	bl	8012ad0 <sys_arch_protect>
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	4b04      	ldr	r3, [pc, #16]	; (8009810 <pbuf_pool_is_empty+0x4c>)
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f009 f972 	bl	8012aec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2400bd09 	.word	0x2400bd09
 8009814:	080097b1 	.word	0x080097b1

08009818 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009818:	b480      	push	{r7}
 800981a:	b085      	sub	sp, #20
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4611      	mov	r1, r2
 8009824:	461a      	mov	r2, r3
 8009826:	460b      	mov	r3, r1
 8009828:	80fb      	strh	r3, [r7, #6]
 800982a:	4613      	mov	r3, r2
 800982c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	88fa      	ldrh	r2, [r7, #6]
 800983e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	88ba      	ldrh	r2, [r7, #4]
 8009844:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009846:	8b3b      	ldrh	r3, [r7, #24]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	7f3a      	ldrb	r2, [r7, #28]
 8009852:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2201      	movs	r2, #1
 8009858:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	73da      	strb	r2, [r3, #15]
}
 8009860:	bf00      	nop
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08c      	sub	sp, #48	; 0x30
 8009870:	af02      	add	r7, sp, #8
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
 8009876:	460b      	mov	r3, r1
 8009878:	80bb      	strh	r3, [r7, #4]
 800987a:	4613      	mov	r3, r2
 800987c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009882:	887b      	ldrh	r3, [r7, #2]
 8009884:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009888:	d07f      	beq.n	800998a <pbuf_alloc+0x11e>
 800988a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800988e:	f300 80c8 	bgt.w	8009a22 <pbuf_alloc+0x1b6>
 8009892:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009896:	d010      	beq.n	80098ba <pbuf_alloc+0x4e>
 8009898:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800989c:	f300 80c1 	bgt.w	8009a22 <pbuf_alloc+0x1b6>
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d002      	beq.n	80098aa <pbuf_alloc+0x3e>
 80098a4:	2b41      	cmp	r3, #65	; 0x41
 80098a6:	f040 80bc 	bne.w	8009a22 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80098aa:	887a      	ldrh	r2, [r7, #2]
 80098ac:	88bb      	ldrh	r3, [r7, #4]
 80098ae:	4619      	mov	r1, r3
 80098b0:	2000      	movs	r0, #0
 80098b2:	f000 f8d1 	bl	8009a58 <pbuf_alloc_reference>
 80098b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80098b8:	e0bd      	b.n	8009a36 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80098c2:	88bb      	ldrh	r3, [r7, #4]
 80098c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80098c6:	200c      	movs	r0, #12
 80098c8:	f7ff fb9a 	bl	8009000 <memp_malloc>
 80098cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d109      	bne.n	80098e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80098d4:	f7ff ff76 	bl	80097c4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80098de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098e0:	f000 faa8 	bl	8009e34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e0a7      	b.n	8009a38 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80098e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80098ea:	3303      	adds	r3, #3
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f023 0303 	bic.w	r3, r3, #3
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	8b7a      	ldrh	r2, [r7, #26]
 80098fc:	4293      	cmp	r3, r2
 80098fe:	bf28      	it	cs
 8009900:	4613      	movcs	r3, r2
 8009902:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009906:	3310      	adds	r3, #16
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	4413      	add	r3, r2
 800990c:	3303      	adds	r3, #3
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	4618      	mov	r0, r3
 8009914:	89f9      	ldrh	r1, [r7, #14]
 8009916:	8b7a      	ldrh	r2, [r7, #26]
 8009918:	2300      	movs	r3, #0
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	887b      	ldrh	r3, [r7, #2]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	460b      	mov	r3, r1
 8009922:	4601      	mov	r1, r0
 8009924:	6938      	ldr	r0, [r7, #16]
 8009926:	f7ff ff77 	bl	8009818 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d006      	beq.n	8009944 <pbuf_alloc+0xd8>
 8009936:	4b42      	ldr	r3, [pc, #264]	; (8009a40 <pbuf_alloc+0x1d4>)
 8009938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800993c:	4941      	ldr	r1, [pc, #260]	; (8009a44 <pbuf_alloc+0x1d8>)
 800993e:	4842      	ldr	r0, [pc, #264]	; (8009a48 <pbuf_alloc+0x1dc>)
 8009940:	f009 fabc 	bl	8012ebc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009946:	3303      	adds	r3, #3
 8009948:	f023 0303 	bic.w	r3, r3, #3
 800994c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009950:	d106      	bne.n	8009960 <pbuf_alloc+0xf4>
 8009952:	4b3b      	ldr	r3, [pc, #236]	; (8009a40 <pbuf_alloc+0x1d4>)
 8009954:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009958:	493c      	ldr	r1, [pc, #240]	; (8009a4c <pbuf_alloc+0x1e0>)
 800995a:	483b      	ldr	r0, [pc, #236]	; (8009a48 <pbuf_alloc+0x1dc>)
 800995c:	f009 faae 	bl	8012ebc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	627b      	str	r3, [r7, #36]	; 0x24
 800996a:	e002      	b.n	8009972 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009976:	8b7a      	ldrh	r2, [r7, #26]
 8009978:	89fb      	ldrh	r3, [r7, #14]
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009982:	8b7b      	ldrh	r3, [r7, #26]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d19e      	bne.n	80098c6 <pbuf_alloc+0x5a>
      break;
 8009988:	e055      	b.n	8009a36 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800998a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800998c:	3303      	adds	r3, #3
 800998e:	b29b      	uxth	r3, r3
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	b29a      	uxth	r2, r3
 8009996:	88bb      	ldrh	r3, [r7, #4]
 8009998:	3303      	adds	r3, #3
 800999a:	b29b      	uxth	r3, r3
 800999c:	f023 0303 	bic.w	r3, r3, #3
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4413      	add	r3, r2
 80099a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80099a6:	8b3b      	ldrh	r3, [r7, #24]
 80099a8:	3310      	adds	r3, #16
 80099aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80099ac:	8b3a      	ldrh	r2, [r7, #24]
 80099ae:	88bb      	ldrh	r3, [r7, #4]
 80099b0:	3303      	adds	r3, #3
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d306      	bcc.n	80099c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80099ba:	8afa      	ldrh	r2, [r7, #22]
 80099bc:	88bb      	ldrh	r3, [r7, #4]
 80099be:	3303      	adds	r3, #3
 80099c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d201      	bcs.n	80099cc <pbuf_alloc+0x160>
        return NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	e035      	b.n	8009a38 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80099cc:	8afb      	ldrh	r3, [r7, #22]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff f96e 	bl	8008cb0 <mem_malloc>
 80099d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <pbuf_alloc+0x174>
        return NULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	e02b      	b.n	8009a38 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80099e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099e2:	3310      	adds	r3, #16
 80099e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e6:	4413      	add	r3, r2
 80099e8:	3303      	adds	r3, #3
 80099ea:	f023 0303 	bic.w	r3, r3, #3
 80099ee:	4618      	mov	r0, r3
 80099f0:	88b9      	ldrh	r1, [r7, #4]
 80099f2:	88ba      	ldrh	r2, [r7, #4]
 80099f4:	2300      	movs	r3, #0
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	887b      	ldrh	r3, [r7, #2]
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	460b      	mov	r3, r1
 80099fe:	4601      	mov	r1, r0
 8009a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a02:	f7ff ff09 	bl	8009818 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d010      	beq.n	8009a34 <pbuf_alloc+0x1c8>
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <pbuf_alloc+0x1d4>)
 8009a14:	f44f 7291 	mov.w	r2, #290	; 0x122
 8009a18:	490d      	ldr	r1, [pc, #52]	; (8009a50 <pbuf_alloc+0x1e4>)
 8009a1a:	480b      	ldr	r0, [pc, #44]	; (8009a48 <pbuf_alloc+0x1dc>)
 8009a1c:	f009 fa4e 	bl	8012ebc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009a20:	e008      	b.n	8009a34 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009a22:	4b07      	ldr	r3, [pc, #28]	; (8009a40 <pbuf_alloc+0x1d4>)
 8009a24:	f240 1227 	movw	r2, #295	; 0x127
 8009a28:	490a      	ldr	r1, [pc, #40]	; (8009a54 <pbuf_alloc+0x1e8>)
 8009a2a:	4807      	ldr	r0, [pc, #28]	; (8009a48 <pbuf_alloc+0x1dc>)
 8009a2c:	f009 fa46 	bl	8012ebc <iprintf>
      return NULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e001      	b.n	8009a38 <pbuf_alloc+0x1cc>
      break;
 8009a34:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3728      	adds	r7, #40	; 0x28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	08014484 	.word	0x08014484
 8009a44:	080144b4 	.word	0x080144b4
 8009a48:	080144e4 	.word	0x080144e4
 8009a4c:	0801450c 	.word	0x0801450c
 8009a50:	08014540 	.word	0x08014540
 8009a54:	0801456c 	.word	0x0801456c

08009a58 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af02      	add	r7, sp, #8
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	807b      	strh	r3, [r7, #2]
 8009a64:	4613      	mov	r3, r2
 8009a66:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009a68:	883b      	ldrh	r3, [r7, #0]
 8009a6a:	2b41      	cmp	r3, #65	; 0x41
 8009a6c:	d009      	beq.n	8009a82 <pbuf_alloc_reference+0x2a>
 8009a6e:	883b      	ldrh	r3, [r7, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d006      	beq.n	8009a82 <pbuf_alloc_reference+0x2a>
 8009a74:	4b0f      	ldr	r3, [pc, #60]	; (8009ab4 <pbuf_alloc_reference+0x5c>)
 8009a76:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009a7a:	490f      	ldr	r1, [pc, #60]	; (8009ab8 <pbuf_alloc_reference+0x60>)
 8009a7c:	480f      	ldr	r0, [pc, #60]	; (8009abc <pbuf_alloc_reference+0x64>)
 8009a7e:	f009 fa1d 	bl	8012ebc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009a82:	200b      	movs	r0, #11
 8009a84:	f7ff fabc 	bl	8009000 <memp_malloc>
 8009a88:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009a90:	2300      	movs	r3, #0
 8009a92:	e00b      	b.n	8009aac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009a94:	8879      	ldrh	r1, [r7, #2]
 8009a96:	887a      	ldrh	r2, [r7, #2]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	883b      	ldrh	r3, [r7, #0]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f7ff feb7 	bl	8009818 <pbuf_init_alloced_pbuf>
  return p;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	08014484 	.word	0x08014484
 8009ab8:	08014588 	.word	0x08014588
 8009abc:	080144e4 	.word	0x080144e4

08009ac0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	607b      	str	r3, [r7, #4]
 8009ac8:	4603      	mov	r3, r0
 8009aca:	73fb      	strb	r3, [r7, #15]
 8009acc:	460b      	mov	r3, r1
 8009ace:	81bb      	strh	r3, [r7, #12]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009ad8:	8a7b      	ldrh	r3, [r7, #18]
 8009ada:	3303      	adds	r3, #3
 8009adc:	f023 0203 	bic.w	r2, r3, #3
 8009ae0:	89bb      	ldrh	r3, [r7, #12]
 8009ae2:	441a      	add	r2, r3
 8009ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d901      	bls.n	8009aee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e018      	b.n	8009b20 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d007      	beq.n	8009b04 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009af4:	8a7b      	ldrh	r3, [r7, #18]
 8009af6:	3303      	adds	r3, #3
 8009af8:	f023 0303 	bic.w	r3, r3, #3
 8009afc:	6a3a      	ldr	r2, [r7, #32]
 8009afe:	4413      	add	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e001      	b.n	8009b08 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	89b9      	ldrh	r1, [r7, #12]
 8009b0c:	89ba      	ldrh	r2, [r7, #12]
 8009b0e:	2302      	movs	r3, #2
 8009b10:	9301      	str	r3, [sp, #4]
 8009b12:	897b      	ldrh	r3, [r7, #10]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	460b      	mov	r3, r1
 8009b18:	6979      	ldr	r1, [r7, #20]
 8009b1a:	f7ff fe7d 	bl	8009818 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009b1e:	687b      	ldr	r3, [r7, #4]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <pbuf_realloc+0x20>
 8009b3a:	4b3a      	ldr	r3, [pc, #232]	; (8009c24 <pbuf_realloc+0xfc>)
 8009b3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009b40:	4939      	ldr	r1, [pc, #228]	; (8009c28 <pbuf_realloc+0x100>)
 8009b42:	483a      	ldr	r0, [pc, #232]	; (8009c2c <pbuf_realloc+0x104>)
 8009b44:	f009 f9ba 	bl	8012ebc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	891b      	ldrh	r3, [r3, #8]
 8009b4c:	887a      	ldrh	r2, [r7, #2]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d263      	bcs.n	8009c1a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	891a      	ldrh	r2, [r3, #8]
 8009b56:	887b      	ldrh	r3, [r7, #2]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009b5c:	887b      	ldrh	r3, [r7, #2]
 8009b5e:	817b      	strh	r3, [r7, #10]
  q = p;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009b64:	e018      	b.n	8009b98 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	895b      	ldrh	r3, [r3, #10]
 8009b6a:	897a      	ldrh	r2, [r7, #10]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	891a      	ldrh	r2, [r3, #8]
 8009b74:	893b      	ldrh	r3, [r7, #8]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <pbuf_realloc+0x70>
 8009b8a:	4b26      	ldr	r3, [pc, #152]	; (8009c24 <pbuf_realloc+0xfc>)
 8009b8c:	f240 12af 	movw	r2, #431	; 0x1af
 8009b90:	4927      	ldr	r1, [pc, #156]	; (8009c30 <pbuf_realloc+0x108>)
 8009b92:	4826      	ldr	r0, [pc, #152]	; (8009c2c <pbuf_realloc+0x104>)
 8009b94:	f009 f992 	bl	8012ebc <iprintf>
  while (rem_len > q->len) {
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	895b      	ldrh	r3, [r3, #10]
 8009b9c:	897a      	ldrh	r2, [r7, #10]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d8e1      	bhi.n	8009b66 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	7b1b      	ldrb	r3, [r3, #12]
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d121      	bne.n	8009bf2 <pbuf_realloc+0xca>
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	895b      	ldrh	r3, [r3, #10]
 8009bb2:	897a      	ldrh	r2, [r7, #10]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d01c      	beq.n	8009bf2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	7b5b      	ldrb	r3, [r3, #13]
 8009bbc:	f003 0302 	and.w	r3, r3, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d116      	bne.n	8009bf2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7fe ff5a 	bl	8008a90 <mem_trim>
 8009bdc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <pbuf_realloc+0xca>
 8009be4:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <pbuf_realloc+0xfc>)
 8009be6:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009bea:	4912      	ldr	r1, [pc, #72]	; (8009c34 <pbuf_realloc+0x10c>)
 8009bec:	480f      	ldr	r0, [pc, #60]	; (8009c2c <pbuf_realloc+0x104>)
 8009bee:	f009 f965 	bl	8012ebc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	897a      	ldrh	r2, [r7, #10]
 8009bf6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	895a      	ldrh	r2, [r3, #10]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d004      	beq.n	8009c12 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 f911 	bl	8009e34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	e000      	b.n	8009c1c <pbuf_realloc+0xf4>
    return;
 8009c1a:	bf00      	nop

}
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	08014484 	.word	0x08014484
 8009c28:	0801459c 	.word	0x0801459c
 8009c2c:	080144e4 	.word	0x080144e4
 8009c30:	080145b4 	.word	0x080145b4
 8009c34:	080145cc 	.word	0x080145cc

08009c38 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d106      	bne.n	8009c5a <pbuf_add_header_impl+0x22>
 8009c4c:	4b2b      	ldr	r3, [pc, #172]	; (8009cfc <pbuf_add_header_impl+0xc4>)
 8009c4e:	f240 12df 	movw	r2, #479	; 0x1df
 8009c52:	492b      	ldr	r1, [pc, #172]	; (8009d00 <pbuf_add_header_impl+0xc8>)
 8009c54:	482b      	ldr	r0, [pc, #172]	; (8009d04 <pbuf_add_header_impl+0xcc>)
 8009c56:	f009 f931 	bl	8012ebc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <pbuf_add_header_impl+0x30>
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c66:	d301      	bcc.n	8009c6c <pbuf_add_header_impl+0x34>
    return 1;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e043      	b.n	8009cf4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <pbuf_add_header_impl+0x3e>
    return 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	e03e      	b.n	8009cf4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	891a      	ldrh	r2, [r3, #8]
 8009c7e:	8a7b      	ldrh	r3, [r7, #18]
 8009c80:	4413      	add	r3, r2
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	8a7a      	ldrh	r2, [r7, #18]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d901      	bls.n	8009c8e <pbuf_add_header_impl+0x56>
    return 1;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e032      	b.n	8009cf4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	7b1b      	ldrb	r3, [r3, #12]
 8009c92:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009c94:	8a3b      	ldrh	r3, [r7, #16]
 8009c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00c      	beq.n	8009cb8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	425b      	negs	r3, r3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3310      	adds	r3, #16
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d20d      	bcs.n	8009cd0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e01d      	b.n	8009cf4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d006      	beq.n	8009ccc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	4413      	add	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]
 8009cca:	e001      	b.n	8009cd0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e011      	b.n	8009cf4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	697a      	ldr	r2, [r7, #20]
 8009cd4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	895a      	ldrh	r2, [r3, #10]
 8009cda:	8a7b      	ldrh	r3, [r7, #18]
 8009cdc:	4413      	add	r3, r2
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	891a      	ldrh	r2, [r3, #8]
 8009ce8:	8a7b      	ldrh	r3, [r7, #18]
 8009cea:	4413      	add	r3, r2
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	811a      	strh	r2, [r3, #8]


  return 0;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	08014484 	.word	0x08014484
 8009d00:	080145e8 	.word	0x080145e8
 8009d04:	080144e4 	.word	0x080144e4

08009d08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009d12:	2200      	movs	r2, #0
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff ff8e 	bl	8009c38 <pbuf_add_header_impl>
 8009d1c:	4603      	mov	r3, r0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d106      	bne.n	8009d46 <pbuf_remove_header+0x1e>
 8009d38:	4b20      	ldr	r3, [pc, #128]	; (8009dbc <pbuf_remove_header+0x94>)
 8009d3a:	f240 224b 	movw	r2, #587	; 0x24b
 8009d3e:	4920      	ldr	r1, [pc, #128]	; (8009dc0 <pbuf_remove_header+0x98>)
 8009d40:	4820      	ldr	r0, [pc, #128]	; (8009dc4 <pbuf_remove_header+0x9c>)
 8009d42:	f009 f8bb 	bl	8012ebc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <pbuf_remove_header+0x2c>
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d52:	d301      	bcc.n	8009d58 <pbuf_remove_header+0x30>
    return 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e02c      	b.n	8009db2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <pbuf_remove_header+0x3a>
    return 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e027      	b.n	8009db2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	895b      	ldrh	r3, [r3, #10]
 8009d6a:	89fa      	ldrh	r2, [r7, #14]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d908      	bls.n	8009d82 <pbuf_remove_header+0x5a>
 8009d70:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <pbuf_remove_header+0x94>)
 8009d72:	f240 2255 	movw	r2, #597	; 0x255
 8009d76:	4914      	ldr	r1, [pc, #80]	; (8009dc8 <pbuf_remove_header+0xa0>)
 8009d78:	4812      	ldr	r0, [pc, #72]	; (8009dc4 <pbuf_remove_header+0x9c>)
 8009d7a:	f009 f89f 	bl	8012ebc <iprintf>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e017      	b.n	8009db2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	441a      	add	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	895a      	ldrh	r2, [r3, #10]
 8009d98:	89fb      	ldrh	r3, [r7, #14]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	891a      	ldrh	r2, [r3, #8]
 8009da6:	89fb      	ldrh	r3, [r7, #14]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009db0:	2300      	movs	r3, #0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	08014484 	.word	0x08014484
 8009dc0:	080145e8 	.word	0x080145e8
 8009dc4:	080144e4 	.word	0x080144e4
 8009dc8:	080145f4 	.word	0x080145f4

08009dcc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	807b      	strh	r3, [r7, #2]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009ddc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	da08      	bge.n	8009df6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009de4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009de8:	425b      	negs	r3, r3
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ff9b 	bl	8009d28 <pbuf_remove_header>
 8009df2:	4603      	mov	r3, r0
 8009df4:	e007      	b.n	8009e06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009df6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009dfa:	787a      	ldrb	r2, [r7, #1]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff ff1a 	bl	8009c38 <pbuf_add_header_impl>
 8009e04:	4603      	mov	r3, r0
  }
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	460b      	mov	r3, r1
 8009e18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009e1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4619      	mov	r1, r3
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f7ff ffd2 	bl	8009dcc <pbuf_header_impl>
 8009e28:	4603      	mov	r3, r0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <pbuf_free+0x22>
 8009e48:	4b3b      	ldr	r3, [pc, #236]	; (8009f38 <pbuf_free+0x104>)
 8009e4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009e4e:	493b      	ldr	r1, [pc, #236]	; (8009f3c <pbuf_free+0x108>)
 8009e50:	483b      	ldr	r0, [pc, #236]	; (8009f40 <pbuf_free+0x10c>)
 8009e52:	f009 f833 	bl	8012ebc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009e56:	2300      	movs	r3, #0
 8009e58:	e069      	b.n	8009f2e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009e5e:	e062      	b.n	8009f26 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009e60:	f008 fe36 	bl	8012ad0 <sys_arch_protect>
 8009e64:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7b9b      	ldrb	r3, [r3, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <pbuf_free+0x48>
 8009e6e:	4b32      	ldr	r3, [pc, #200]	; (8009f38 <pbuf_free+0x104>)
 8009e70:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009e74:	4933      	ldr	r1, [pc, #204]	; (8009f44 <pbuf_free+0x110>)
 8009e76:	4832      	ldr	r0, [pc, #200]	; (8009f40 <pbuf_free+0x10c>)
 8009e78:	f009 f820 	bl	8012ebc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	7b9b      	ldrb	r3, [r3, #14]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	739a      	strb	r2, [r3, #14]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7b9b      	ldrb	r3, [r3, #14]
 8009e8c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009e8e:	69b8      	ldr	r0, [r7, #24]
 8009e90:	f008 fe2c 	bl	8012aec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d143      	bne.n	8009f22 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7b1b      	ldrb	r3, [r3, #12]
 8009ea4:	f003 030f 	and.w	r3, r3, #15
 8009ea8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7b5b      	ldrb	r3, [r3, #13]
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d011      	beq.n	8009eda <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <pbuf_free+0x9c>
 8009ec2:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <pbuf_free+0x104>)
 8009ec4:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009ec8:	491f      	ldr	r1, [pc, #124]	; (8009f48 <pbuf_free+0x114>)
 8009eca:	481d      	ldr	r0, [pc, #116]	; (8009f40 <pbuf_free+0x10c>)
 8009ecc:	f008 fff6 	bl	8012ebc <iprintf>
        pc->custom_free_function(p);
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	4798      	blx	r3
 8009ed8:	e01d      	b.n	8009f16 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d104      	bne.n	8009eea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	200c      	movs	r0, #12
 8009ee4:	f7ff f902 	bl	80090ec <memp_free>
 8009ee8:	e015      	b.n	8009f16 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d104      	bne.n	8009efa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	200b      	movs	r0, #11
 8009ef4:	f7ff f8fa 	bl	80090ec <memp_free>
 8009ef8:	e00d      	b.n	8009f16 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009efa:	7bfb      	ldrb	r3, [r7, #15]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <pbuf_free+0xd4>
          mem_free(p);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f7fe fd35 	bl	8008970 <mem_free>
 8009f06:	e006      	b.n	8009f16 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <pbuf_free+0x104>)
 8009f0a:	f240 320f 	movw	r2, #783	; 0x30f
 8009f0e:	490f      	ldr	r1, [pc, #60]	; (8009f4c <pbuf_free+0x118>)
 8009f10:	480b      	ldr	r0, [pc, #44]	; (8009f40 <pbuf_free+0x10c>)
 8009f12:	f008 ffd3 	bl	8012ebc <iprintf>
        }
      }
      count++;
 8009f16:	7ffb      	ldrb	r3, [r7, #31]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	607b      	str	r3, [r7, #4]
 8009f20:	e001      	b.n	8009f26 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d199      	bne.n	8009e60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	08014484 	.word	0x08014484
 8009f3c:	080145e8 	.word	0x080145e8
 8009f40:	080144e4 	.word	0x080144e4
 8009f44:	08014614 	.word	0x08014614
 8009f48:	0801462c 	.word	0x0801462c
 8009f4c:	08014650 	.word	0x08014650

08009f50 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009f5c:	e005      	b.n	8009f6a <pbuf_clen+0x1a>
    ++len;
 8009f5e:	89fb      	ldrh	r3, [r7, #14]
 8009f60:	3301      	adds	r3, #1
 8009f62:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1f6      	bne.n	8009f5e <pbuf_clen+0xe>
  }
  return len;
 8009f70:	89fb      	ldrh	r3, [r7, #14]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
	...

08009f80 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d016      	beq.n	8009fbc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009f8e:	f008 fd9f 	bl	8012ad0 <sys_arch_protect>
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	7b9b      	ldrb	r3, [r3, #14]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	739a      	strb	r2, [r3, #14]
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f008 fda3 	bl	8012aec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	7b9b      	ldrb	r3, [r3, #14]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <pbuf_ref+0x3c>
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <pbuf_ref+0x44>)
 8009fb0:	f240 3242 	movw	r2, #834	; 0x342
 8009fb4:	4904      	ldr	r1, [pc, #16]	; (8009fc8 <pbuf_ref+0x48>)
 8009fb6:	4805      	ldr	r0, [pc, #20]	; (8009fcc <pbuf_ref+0x4c>)
 8009fb8:	f008 ff80 	bl	8012ebc <iprintf>
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	08014484 	.word	0x08014484
 8009fc8:	08014664 	.word	0x08014664
 8009fcc:	080144e4 	.word	0x080144e4

08009fd0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d002      	beq.n	8009fe6 <pbuf_cat+0x16>
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d107      	bne.n	8009ff6 <pbuf_cat+0x26>
 8009fe6:	4b20      	ldr	r3, [pc, #128]	; (800a068 <pbuf_cat+0x98>)
 8009fe8:	f240 3259 	movw	r2, #857	; 0x359
 8009fec:	491f      	ldr	r1, [pc, #124]	; (800a06c <pbuf_cat+0x9c>)
 8009fee:	4820      	ldr	r0, [pc, #128]	; (800a070 <pbuf_cat+0xa0>)
 8009ff0:	f008 ff64 	bl	8012ebc <iprintf>
 8009ff4:	e034      	b.n	800a060 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60fb      	str	r3, [r7, #12]
 8009ffa:	e00a      	b.n	800a012 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	891a      	ldrh	r2, [r3, #8]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	891b      	ldrh	r3, [r3, #8]
 800a004:	4413      	add	r3, r2
 800a006:	b29a      	uxth	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1f0      	bne.n	8009ffc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	891a      	ldrh	r2, [r3, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	895b      	ldrh	r3, [r3, #10]
 800a022:	429a      	cmp	r2, r3
 800a024:	d006      	beq.n	800a034 <pbuf_cat+0x64>
 800a026:	4b10      	ldr	r3, [pc, #64]	; (800a068 <pbuf_cat+0x98>)
 800a028:	f240 3262 	movw	r2, #866	; 0x362
 800a02c:	4911      	ldr	r1, [pc, #68]	; (800a074 <pbuf_cat+0xa4>)
 800a02e:	4810      	ldr	r0, [pc, #64]	; (800a070 <pbuf_cat+0xa0>)
 800a030:	f008 ff44 	bl	8012ebc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d006      	beq.n	800a04a <pbuf_cat+0x7a>
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <pbuf_cat+0x98>)
 800a03e:	f240 3263 	movw	r2, #867	; 0x363
 800a042:	490d      	ldr	r1, [pc, #52]	; (800a078 <pbuf_cat+0xa8>)
 800a044:	480a      	ldr	r0, [pc, #40]	; (800a070 <pbuf_cat+0xa0>)
 800a046:	f008 ff39 	bl	8012ebc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	891a      	ldrh	r2, [r3, #8]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	891b      	ldrh	r3, [r3, #8]
 800a052:	4413      	add	r3, r2
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	08014484 	.word	0x08014484
 800a06c:	08014678 	.word	0x08014678
 800a070:	080144e4 	.word	0x080144e4
 800a074:	080146b0 	.word	0x080146b0
 800a078:	080146e0 	.word	0x080146e0

0800a07c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff ffa1 	bl	8009fd0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a08e:	6838      	ldr	r0, [r7, #0]
 800a090:	f7ff ff76 	bl	8009f80 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <pbuf_copy+0x2a>
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <pbuf_copy+0x2a>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	891a      	ldrh	r2, [r3, #8]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	891b      	ldrh	r3, [r3, #8]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d209      	bcs.n	800a0da <pbuf_copy+0x3e>
 800a0c6:	4b57      	ldr	r3, [pc, #348]	; (800a224 <pbuf_copy+0x188>)
 800a0c8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a0cc:	4956      	ldr	r1, [pc, #344]	; (800a228 <pbuf_copy+0x18c>)
 800a0ce:	4857      	ldr	r0, [pc, #348]	; (800a22c <pbuf_copy+0x190>)
 800a0d0:	f008 fef4 	bl	8012ebc <iprintf>
 800a0d4:	f06f 030f 	mvn.w	r3, #15
 800a0d8:	e09f      	b.n	800a21a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	895b      	ldrh	r3, [r3, #10]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	1ad2      	subs	r2, r2, r3
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	895b      	ldrh	r3, [r3, #10]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	1acb      	subs	r3, r1, r3
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d306      	bcc.n	800a100 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	895b      	ldrh	r3, [r3, #10]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	e005      	b.n	800a10c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	895b      	ldrh	r3, [r3, #10]
 800a104:	461a      	mov	r2, r3
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	18d0      	adds	r0, r2, r3
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4413      	add	r3, r2
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	4619      	mov	r1, r3
 800a120:	f008 fe21 	bl	8012d66 <memcpy>
    offset_to += len;
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	895b      	ldrh	r3, [r3, #10]
 800a138:	461a      	mov	r2, r3
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d906      	bls.n	800a14e <pbuf_copy+0xb2>
 800a140:	4b38      	ldr	r3, [pc, #224]	; (800a224 <pbuf_copy+0x188>)
 800a142:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a146:	493a      	ldr	r1, [pc, #232]	; (800a230 <pbuf_copy+0x194>)
 800a148:	4838      	ldr	r0, [pc, #224]	; (800a22c <pbuf_copy+0x190>)
 800a14a:	f008 feb7 	bl	8012ebc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	895b      	ldrh	r3, [r3, #10]
 800a152:	461a      	mov	r2, r3
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	4293      	cmp	r3, r2
 800a158:	d906      	bls.n	800a168 <pbuf_copy+0xcc>
 800a15a:	4b32      	ldr	r3, [pc, #200]	; (800a224 <pbuf_copy+0x188>)
 800a15c:	f240 32da 	movw	r2, #986	; 0x3da
 800a160:	4934      	ldr	r1, [pc, #208]	; (800a234 <pbuf_copy+0x198>)
 800a162:	4832      	ldr	r0, [pc, #200]	; (800a22c <pbuf_copy+0x190>)
 800a164:	f008 feaa 	bl	8012ebc <iprintf>
    if (offset_from >= p_from->len) {
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	895b      	ldrh	r3, [r3, #10]
 800a16c:	461a      	mov	r2, r3
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	4293      	cmp	r3, r2
 800a172:	d304      	bcc.n	800a17e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	895b      	ldrh	r3, [r3, #10]
 800a182:	461a      	mov	r2, r3
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	4293      	cmp	r3, r2
 800a188:	d114      	bne.n	800a1b4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10c      	bne.n	800a1b4 <pbuf_copy+0x118>
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d009      	beq.n	800a1b4 <pbuf_copy+0x118>
 800a1a0:	4b20      	ldr	r3, [pc, #128]	; (800a224 <pbuf_copy+0x188>)
 800a1a2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a1a6:	4924      	ldr	r1, [pc, #144]	; (800a238 <pbuf_copy+0x19c>)
 800a1a8:	4820      	ldr	r0, [pc, #128]	; (800a22c <pbuf_copy+0x190>)
 800a1aa:	f008 fe87 	bl	8012ebc <iprintf>
 800a1ae:	f06f 030f 	mvn.w	r3, #15
 800a1b2:	e032      	b.n	800a21a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d013      	beq.n	800a1e2 <pbuf_copy+0x146>
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	895a      	ldrh	r2, [r3, #10]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	891b      	ldrh	r3, [r3, #8]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d10d      	bne.n	800a1e2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d009      	beq.n	800a1e2 <pbuf_copy+0x146>
 800a1ce:	4b15      	ldr	r3, [pc, #84]	; (800a224 <pbuf_copy+0x188>)
 800a1d0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a1d4:	4919      	ldr	r1, [pc, #100]	; (800a23c <pbuf_copy+0x1a0>)
 800a1d6:	4815      	ldr	r0, [pc, #84]	; (800a22c <pbuf_copy+0x190>)
 800a1d8:	f008 fe70 	bl	8012ebc <iprintf>
 800a1dc:	f06f 0305 	mvn.w	r3, #5
 800a1e0:	e01b      	b.n	800a21a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d013      	beq.n	800a210 <pbuf_copy+0x174>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	895a      	ldrh	r2, [r3, #10]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	891b      	ldrh	r3, [r3, #8]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d10d      	bne.n	800a210 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d009      	beq.n	800a210 <pbuf_copy+0x174>
 800a1fc:	4b09      	ldr	r3, [pc, #36]	; (800a224 <pbuf_copy+0x188>)
 800a1fe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a202:	490e      	ldr	r1, [pc, #56]	; (800a23c <pbuf_copy+0x1a0>)
 800a204:	4809      	ldr	r0, [pc, #36]	; (800a22c <pbuf_copy+0x190>)
 800a206:	f008 fe59 	bl	8012ebc <iprintf>
 800a20a:	f06f 0305 	mvn.w	r3, #5
 800a20e:	e004      	b.n	800a21a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	f47f af61 	bne.w	800a0da <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	08014484 	.word	0x08014484
 800a228:	0801472c 	.word	0x0801472c
 800a22c:	080144e4 	.word	0x080144e4
 800a230:	0801475c 	.word	0x0801475c
 800a234:	08014774 	.word	0x08014774
 800a238:	08014790 	.word	0x08014790
 800a23c:	080147a0 	.word	0x080147a0

0800a240 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b088      	sub	sp, #32
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4611      	mov	r1, r2
 800a24c:	461a      	mov	r2, r3
 800a24e:	460b      	mov	r3, r1
 800a250:	80fb      	strh	r3, [r7, #6]
 800a252:	4613      	mov	r3, r2
 800a254:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d108      	bne.n	800a276 <pbuf_copy_partial+0x36>
 800a264:	4b2b      	ldr	r3, [pc, #172]	; (800a314 <pbuf_copy_partial+0xd4>)
 800a266:	f240 420a 	movw	r2, #1034	; 0x40a
 800a26a:	492b      	ldr	r1, [pc, #172]	; (800a318 <pbuf_copy_partial+0xd8>)
 800a26c:	482b      	ldr	r0, [pc, #172]	; (800a31c <pbuf_copy_partial+0xdc>)
 800a26e:	f008 fe25 	bl	8012ebc <iprintf>
 800a272:	2300      	movs	r3, #0
 800a274:	e04a      	b.n	800a30c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d108      	bne.n	800a28e <pbuf_copy_partial+0x4e>
 800a27c:	4b25      	ldr	r3, [pc, #148]	; (800a314 <pbuf_copy_partial+0xd4>)
 800a27e:	f240 420b 	movw	r2, #1035	; 0x40b
 800a282:	4927      	ldr	r1, [pc, #156]	; (800a320 <pbuf_copy_partial+0xe0>)
 800a284:	4825      	ldr	r0, [pc, #148]	; (800a31c <pbuf_copy_partial+0xdc>)
 800a286:	f008 fe19 	bl	8012ebc <iprintf>
 800a28a:	2300      	movs	r3, #0
 800a28c:	e03e      	b.n	800a30c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	e034      	b.n	800a2fe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a294:	88bb      	ldrh	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <pbuf_copy_partial+0x70>
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	895b      	ldrh	r3, [r3, #10]
 800a29e:	88ba      	ldrh	r2, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d305      	bcc.n	800a2b0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	895b      	ldrh	r3, [r3, #10]
 800a2a8:	88ba      	ldrh	r2, [r7, #4]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	80bb      	strh	r3, [r7, #4]
 800a2ae:	e023      	b.n	800a2f8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	895a      	ldrh	r2, [r3, #10]
 800a2b4:	88bb      	ldrh	r3, [r7, #4]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a2ba:	8b3a      	ldrh	r2, [r7, #24]
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d901      	bls.n	800a2c6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a2c2:	88fb      	ldrh	r3, [r7, #6]
 800a2c4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a2c6:	8b7b      	ldrh	r3, [r7, #26]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	18d0      	adds	r0, r2, r3
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	88bb      	ldrh	r3, [r7, #4]
 800a2d2:	4413      	add	r3, r2
 800a2d4:	8b3a      	ldrh	r2, [r7, #24]
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	f008 fd45 	bl	8012d66 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a2dc:	8afa      	ldrh	r2, [r7, #22]
 800a2de:	8b3b      	ldrh	r3, [r7, #24]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a2e4:	8b7a      	ldrh	r2, [r7, #26]
 800a2e6:	8b3b      	ldrh	r3, [r7, #24]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a2ec:	88fa      	ldrh	r2, [r7, #6]
 800a2ee:	8b3b      	ldrh	r3, [r7, #24]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	61fb      	str	r3, [r7, #28]
 800a2fe:	88fb      	ldrh	r3, [r7, #6]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <pbuf_copy_partial+0xca>
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1c4      	bne.n	800a294 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a30a:	8afb      	ldrh	r3, [r7, #22]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3720      	adds	r7, #32
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	08014484 	.word	0x08014484
 800a318:	080147cc 	.word	0x080147cc
 800a31c:	080144e4 	.word	0x080144e4
 800a320:	080147ec 	.word	0x080147ec

0800a324 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	4603      	mov	r3, r0
 800a32c:	603a      	str	r2, [r7, #0]
 800a32e:	71fb      	strb	r3, [r7, #7]
 800a330:	460b      	mov	r3, r1
 800a332:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	8919      	ldrh	r1, [r3, #8]
 800a338:	88ba      	ldrh	r2, [r7, #4]
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f7ff fa95 	bl	800986c <pbuf_alloc>
 800a342:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <pbuf_clone+0x2a>
    return NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	e011      	b.n	800a372 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7ff fea3 	bl	800a09c <pbuf_copy>
 800a356:	4603      	mov	r3, r0
 800a358:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a35a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d006      	beq.n	800a370 <pbuf_clone+0x4c>
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <pbuf_clone+0x58>)
 800a364:	f240 5224 	movw	r2, #1316	; 0x524
 800a368:	4905      	ldr	r1, [pc, #20]	; (800a380 <pbuf_clone+0x5c>)
 800a36a:	4806      	ldr	r0, [pc, #24]	; (800a384 <pbuf_clone+0x60>)
 800a36c:	f008 fda6 	bl	8012ebc <iprintf>
  return q;
 800a370:	68fb      	ldr	r3, [r7, #12]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	08014484 	.word	0x08014484
 800a380:	080148f8 	.word	0x080148f8
 800a384:	080144e4 	.word	0x080144e4

0800a388 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a38c:	f008 fdae 	bl	8012eec <rand>
 800a390:	4603      	mov	r3, r0
 800a392:	b29b      	uxth	r3, r3
 800a394:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a398:	b29b      	uxth	r3, r3
 800a39a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	4b01      	ldr	r3, [pc, #4]	; (800a3a8 <tcp_init+0x20>)
 800a3a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a3a4:	bf00      	nop
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	24000028 	.word	0x24000028

0800a3ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7d1b      	ldrb	r3, [r3, #20]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d105      	bne.n	800a3c8 <tcp_free+0x1c>
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <tcp_free+0x2c>)
 800a3be:	22d4      	movs	r2, #212	; 0xd4
 800a3c0:	4906      	ldr	r1, [pc, #24]	; (800a3dc <tcp_free+0x30>)
 800a3c2:	4807      	ldr	r0, [pc, #28]	; (800a3e0 <tcp_free+0x34>)
 800a3c4:	f008 fd7a 	bl	8012ebc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	2001      	movs	r0, #1
 800a3cc:	f7fe fe8e 	bl	80090ec <memp_free>
}
 800a3d0:	bf00      	nop
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	08014984 	.word	0x08014984
 800a3dc:	080149b4 	.word	0x080149b4
 800a3e0:	080149c8 	.word	0x080149c8

0800a3e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7d1b      	ldrb	r3, [r3, #20]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d105      	bne.n	800a400 <tcp_free_listen+0x1c>
 800a3f4:	4b06      	ldr	r3, [pc, #24]	; (800a410 <tcp_free_listen+0x2c>)
 800a3f6:	22df      	movs	r2, #223	; 0xdf
 800a3f8:	4906      	ldr	r1, [pc, #24]	; (800a414 <tcp_free_listen+0x30>)
 800a3fa:	4807      	ldr	r0, [pc, #28]	; (800a418 <tcp_free_listen+0x34>)
 800a3fc:	f008 fd5e 	bl	8012ebc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	2002      	movs	r0, #2
 800a404:	f7fe fe72 	bl	80090ec <memp_free>
}
 800a408:	bf00      	nop
 800a40a:	3708      	adds	r7, #8
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	08014984 	.word	0x08014984
 800a414:	080149f0 	.word	0x080149f0
 800a418:	080149c8 	.word	0x080149c8

0800a41c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a420:	f000 fea2 	bl	800b168 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a424:	4b07      	ldr	r3, [pc, #28]	; (800a444 <tcp_tmr+0x28>)
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	b2da      	uxtb	r2, r3
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <tcp_tmr+0x28>)
 800a42e:	701a      	strb	r2, [r3, #0]
 800a430:	4b04      	ldr	r3, [pc, #16]	; (800a444 <tcp_tmr+0x28>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a43c:	f000 fb54 	bl	800aae8 <tcp_slowtmr>
  }
}
 800a440:	bf00      	nop
 800a442:	bd80      	pop	{r7, pc}
 800a444:	2400bd21 	.word	0x2400bd21

0800a448 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d105      	bne.n	800a464 <tcp_remove_listener+0x1c>
 800a458:	4b0d      	ldr	r3, [pc, #52]	; (800a490 <tcp_remove_listener+0x48>)
 800a45a:	22ff      	movs	r2, #255	; 0xff
 800a45c:	490d      	ldr	r1, [pc, #52]	; (800a494 <tcp_remove_listener+0x4c>)
 800a45e:	480e      	ldr	r0, [pc, #56]	; (800a498 <tcp_remove_listener+0x50>)
 800a460:	f008 fd2c 	bl	8012ebc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	e00a      	b.n	800a480 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d102      	bne.n	800a47a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1f1      	bne.n	800a46a <tcp_remove_listener+0x22>
    }
  }
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	08014984 	.word	0x08014984
 800a494:	08014a0c 	.word	0x08014a0c
 800a498:	080149c8 	.word	0x080149c8

0800a49c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d106      	bne.n	800a4b8 <tcp_listen_closed+0x1c>
 800a4aa:	4b14      	ldr	r3, [pc, #80]	; (800a4fc <tcp_listen_closed+0x60>)
 800a4ac:	f240 1211 	movw	r2, #273	; 0x111
 800a4b0:	4913      	ldr	r1, [pc, #76]	; (800a500 <tcp_listen_closed+0x64>)
 800a4b2:	4814      	ldr	r0, [pc, #80]	; (800a504 <tcp_listen_closed+0x68>)
 800a4b4:	f008 fd02 	bl	8012ebc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	7d1b      	ldrb	r3, [r3, #20]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d006      	beq.n	800a4ce <tcp_listen_closed+0x32>
 800a4c0:	4b0e      	ldr	r3, [pc, #56]	; (800a4fc <tcp_listen_closed+0x60>)
 800a4c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a4c6:	4910      	ldr	r1, [pc, #64]	; (800a508 <tcp_listen_closed+0x6c>)
 800a4c8:	480e      	ldr	r0, [pc, #56]	; (800a504 <tcp_listen_closed+0x68>)
 800a4ca:	f008 fcf7 	bl	8012ebc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	e00b      	b.n	800a4ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a4d4:	4a0d      	ldr	r2, [pc, #52]	; (800a50c <tcp_listen_closed+0x70>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7ff ffb1 	bl	800a448 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d9f0      	bls.n	800a4d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	08014984 	.word	0x08014984
 800a500:	08014a34 	.word	0x08014a34
 800a504:	080149c8 	.word	0x080149c8
 800a508:	08014a40 	.word	0x08014a40
 800a50c:	0801699c 	.word	0x0801699c

0800a510 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a510:	b5b0      	push	{r4, r5, r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af04      	add	r7, sp, #16
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	460b      	mov	r3, r1
 800a51a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <tcp_close_shutdown+0x20>
 800a522:	4b63      	ldr	r3, [pc, #396]	; (800a6b0 <tcp_close_shutdown+0x1a0>)
 800a524:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a528:	4962      	ldr	r1, [pc, #392]	; (800a6b4 <tcp_close_shutdown+0x1a4>)
 800a52a:	4863      	ldr	r0, [pc, #396]	; (800a6b8 <tcp_close_shutdown+0x1a8>)
 800a52c:	f008 fcc6 	bl	8012ebc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a530:	78fb      	ldrb	r3, [r7, #3]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d066      	beq.n	800a604 <tcp_close_shutdown+0xf4>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	7d1b      	ldrb	r3, [r3, #20]
 800a53a:	2b04      	cmp	r3, #4
 800a53c:	d003      	beq.n	800a546 <tcp_close_shutdown+0x36>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7d1b      	ldrb	r3, [r3, #20]
 800a542:	2b07      	cmp	r3, #7
 800a544:	d15e      	bne.n	800a604 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d104      	bne.n	800a558 <tcp_close_shutdown+0x48>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a552:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a556:	d055      	beq.n	800a604 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	8b5b      	ldrh	r3, [r3, #26]
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <tcp_close_shutdown+0x62>
 800a564:	4b52      	ldr	r3, [pc, #328]	; (800a6b0 <tcp_close_shutdown+0x1a0>)
 800a566:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a56a:	4954      	ldr	r1, [pc, #336]	; (800a6bc <tcp_close_shutdown+0x1ac>)
 800a56c:	4852      	ldr	r0, [pc, #328]	; (800a6b8 <tcp_close_shutdown+0x1a8>)
 800a56e:	f008 fca5 	bl	8012ebc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a57a:	687d      	ldr	r5, [r7, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3304      	adds	r3, #4
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	8ad2      	ldrh	r2, [r2, #22]
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	8b09      	ldrh	r1, [r1, #24]
 800a588:	9102      	str	r1, [sp, #8]
 800a58a:	9201      	str	r2, [sp, #4]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	462b      	mov	r3, r5
 800a590:	4622      	mov	r2, r4
 800a592:	4601      	mov	r1, r0
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f004 fe91 	bl	800f2bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f001 f8c6 	bl	800b72c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a5a0:	4b47      	ldr	r3, [pc, #284]	; (800a6c0 <tcp_close_shutdown+0x1b0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d105      	bne.n	800a5b6 <tcp_close_shutdown+0xa6>
 800a5aa:	4b45      	ldr	r3, [pc, #276]	; (800a6c0 <tcp_close_shutdown+0x1b0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4a43      	ldr	r2, [pc, #268]	; (800a6c0 <tcp_close_shutdown+0x1b0>)
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	e013      	b.n	800a5de <tcp_close_shutdown+0xce>
 800a5b6:	4b42      	ldr	r3, [pc, #264]	; (800a6c0 <tcp_close_shutdown+0x1b0>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	60fb      	str	r3, [r7, #12]
 800a5bc:	e00c      	b.n	800a5d8 <tcp_close_shutdown+0xc8>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d104      	bne.n	800a5d2 <tcp_close_shutdown+0xc2>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68da      	ldr	r2, [r3, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	60da      	str	r2, [r3, #12]
 800a5d0:	e005      	b.n	800a5de <tcp_close_shutdown+0xce>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1ef      	bne.n	800a5be <tcp_close_shutdown+0xae>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	60da      	str	r2, [r3, #12]
 800a5e4:	4b37      	ldr	r3, [pc, #220]	; (800a6c4 <tcp_close_shutdown+0x1b4>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a5ea:	4b37      	ldr	r3, [pc, #220]	; (800a6c8 <tcp_close_shutdown+0x1b8>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d102      	bne.n	800a5fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a5f4:	f003 fd5e 	bl	800e0b4 <tcp_trigger_input_pcb_close>
 800a5f8:	e002      	b.n	800a600 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff fed6 	bl	800a3ac <tcp_free>
      }
      return ERR_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	e050      	b.n	800a6a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	7d1b      	ldrb	r3, [r3, #20]
 800a608:	2b02      	cmp	r3, #2
 800a60a:	d03b      	beq.n	800a684 <tcp_close_shutdown+0x174>
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	dc44      	bgt.n	800a69a <tcp_close_shutdown+0x18a>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <tcp_close_shutdown+0x10a>
 800a614:	2b01      	cmp	r3, #1
 800a616:	d02a      	beq.n	800a66e <tcp_close_shutdown+0x15e>
 800a618:	e03f      	b.n	800a69a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	8adb      	ldrh	r3, [r3, #22]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d021      	beq.n	800a666 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a622:	4b2a      	ldr	r3, [pc, #168]	; (800a6cc <tcp_close_shutdown+0x1bc>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d105      	bne.n	800a638 <tcp_close_shutdown+0x128>
 800a62c:	4b27      	ldr	r3, [pc, #156]	; (800a6cc <tcp_close_shutdown+0x1bc>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	4a26      	ldr	r2, [pc, #152]	; (800a6cc <tcp_close_shutdown+0x1bc>)
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	e013      	b.n	800a660 <tcp_close_shutdown+0x150>
 800a638:	4b24      	ldr	r3, [pc, #144]	; (800a6cc <tcp_close_shutdown+0x1bc>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60bb      	str	r3, [r7, #8]
 800a63e:	e00c      	b.n	800a65a <tcp_close_shutdown+0x14a>
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d104      	bne.n	800a654 <tcp_close_shutdown+0x144>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	60da      	str	r2, [r3, #12]
 800a652:	e005      	b.n	800a660 <tcp_close_shutdown+0x150>
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	60bb      	str	r3, [r7, #8]
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1ef      	bne.n	800a640 <tcp_close_shutdown+0x130>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f7ff fea0 	bl	800a3ac <tcp_free>
      break;
 800a66c:	e01a      	b.n	800a6a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff ff14 	bl	800a49c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	4816      	ldr	r0, [pc, #88]	; (800a6d0 <tcp_close_shutdown+0x1c0>)
 800a678:	f001 f8a8 	bl	800b7cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff feb1 	bl	800a3e4 <tcp_free_listen>
      break;
 800a682:	e00f      	b.n	800a6a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	480e      	ldr	r0, [pc, #56]	; (800a6c0 <tcp_close_shutdown+0x1b0>)
 800a688:	f001 f8a0 	bl	800b7cc <tcp_pcb_remove>
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <tcp_close_shutdown+0x1b4>)
 800a68e:	2201      	movs	r2, #1
 800a690:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7ff fe8a 	bl	800a3ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a698:	e004      	b.n	800a6a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f81a 	bl	800a6d4 <tcp_close_shutdown_fin>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	e000      	b.n	800a6a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bdb0      	pop	{r4, r5, r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	08014984 	.word	0x08014984
 800a6b4:	08014a58 	.word	0x08014a58
 800a6b8:	080149c8 	.word	0x080149c8
 800a6bc:	08014a78 	.word	0x08014a78
 800a6c0:	2400bd18 	.word	0x2400bd18
 800a6c4:	2400bd20 	.word	0x2400bd20
 800a6c8:	2400bd58 	.word	0x2400bd58
 800a6cc:	2400bd10 	.word	0x2400bd10
 800a6d0:	2400bd14 	.word	0x2400bd14

0800a6d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <tcp_close_shutdown_fin+0x1c>
 800a6e2:	4b2e      	ldr	r3, [pc, #184]	; (800a79c <tcp_close_shutdown_fin+0xc8>)
 800a6e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a6e8:	492d      	ldr	r1, [pc, #180]	; (800a7a0 <tcp_close_shutdown_fin+0xcc>)
 800a6ea:	482e      	ldr	r0, [pc, #184]	; (800a7a4 <tcp_close_shutdown_fin+0xd0>)
 800a6ec:	f008 fbe6 	bl	8012ebc <iprintf>

  switch (pcb->state) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7d1b      	ldrb	r3, [r3, #20]
 800a6f4:	2b07      	cmp	r3, #7
 800a6f6:	d020      	beq.n	800a73a <tcp_close_shutdown_fin+0x66>
 800a6f8:	2b07      	cmp	r3, #7
 800a6fa:	dc2b      	bgt.n	800a754 <tcp_close_shutdown_fin+0x80>
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d002      	beq.n	800a706 <tcp_close_shutdown_fin+0x32>
 800a700:	2b04      	cmp	r3, #4
 800a702:	d00d      	beq.n	800a720 <tcp_close_shutdown_fin+0x4c>
 800a704:	e026      	b.n	800a754 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f003 fee6 	bl	800e4d8 <tcp_send_fin>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d11f      	bne.n	800a758 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2205      	movs	r2, #5
 800a71c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a71e:	e01b      	b.n	800a758 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f003 fed9 	bl	800e4d8 <tcp_send_fin>
 800a726:	4603      	mov	r3, r0
 800a728:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a72a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d114      	bne.n	800a75c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2205      	movs	r2, #5
 800a736:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a738:	e010      	b.n	800a75c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f003 fecc 	bl	800e4d8 <tcp_send_fin>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d109      	bne.n	800a760 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2209      	movs	r2, #9
 800a750:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a752:	e005      	b.n	800a760 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	e01c      	b.n	800a792 <tcp_close_shutdown_fin+0xbe>
      break;
 800a758:	bf00      	nop
 800a75a:	e002      	b.n	800a762 <tcp_close_shutdown_fin+0x8e>
      break;
 800a75c:	bf00      	nop
 800a75e:	e000      	b.n	800a762 <tcp_close_shutdown_fin+0x8e>
      break;
 800a760:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d103      	bne.n	800a772 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f003 fff2 	bl	800e754 <tcp_output>
 800a770:	e00d      	b.n	800a78e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a77a:	d108      	bne.n	800a78e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8b5b      	ldrh	r3, [r3, #26]
 800a780:	f043 0308 	orr.w	r3, r3, #8
 800a784:	b29a      	uxth	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e001      	b.n	800a792 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a78e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	08014984 	.word	0x08014984
 800a7a0:	08014a34 	.word	0x08014a34
 800a7a4:	080149c8 	.word	0x080149c8

0800a7a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d109      	bne.n	800a7ca <tcp_close+0x22>
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <tcp_close+0x4c>)
 800a7b8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a7bc:	490e      	ldr	r1, [pc, #56]	; (800a7f8 <tcp_close+0x50>)
 800a7be:	480f      	ldr	r0, [pc, #60]	; (800a7fc <tcp_close+0x54>)
 800a7c0:	f008 fb7c 	bl	8012ebc <iprintf>
 800a7c4:	f06f 030f 	mvn.w	r3, #15
 800a7c8:	e00f      	b.n	800a7ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	7d1b      	ldrb	r3, [r3, #20]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d006      	beq.n	800a7e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8b5b      	ldrh	r3, [r3, #26]
 800a7d6:	f043 0310 	orr.w	r3, r3, #16
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fe94 	bl	800a510 <tcp_close_shutdown>
 800a7e8:	4603      	mov	r3, r0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	08014984 	.word	0x08014984
 800a7f8:	08014a94 	.word	0x08014a94
 800a7fc:	080149c8 	.word	0x080149c8

0800a800 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b08e      	sub	sp, #56	; 0x38
 800a804:	af04      	add	r7, sp, #16
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d107      	bne.n	800a820 <tcp_abandon+0x20>
 800a810:	4b52      	ldr	r3, [pc, #328]	; (800a95c <tcp_abandon+0x15c>)
 800a812:	f240 223d 	movw	r2, #573	; 0x23d
 800a816:	4952      	ldr	r1, [pc, #328]	; (800a960 <tcp_abandon+0x160>)
 800a818:	4852      	ldr	r0, [pc, #328]	; (800a964 <tcp_abandon+0x164>)
 800a81a:	f008 fb4f 	bl	8012ebc <iprintf>
 800a81e:	e099      	b.n	800a954 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	7d1b      	ldrb	r3, [r3, #20]
 800a824:	2b01      	cmp	r3, #1
 800a826:	d106      	bne.n	800a836 <tcp_abandon+0x36>
 800a828:	4b4c      	ldr	r3, [pc, #304]	; (800a95c <tcp_abandon+0x15c>)
 800a82a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a82e:	494e      	ldr	r1, [pc, #312]	; (800a968 <tcp_abandon+0x168>)
 800a830:	484c      	ldr	r0, [pc, #304]	; (800a964 <tcp_abandon+0x164>)
 800a832:	f008 fb43 	bl	8012ebc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	7d1b      	ldrb	r3, [r3, #20]
 800a83a:	2b0a      	cmp	r3, #10
 800a83c:	d107      	bne.n	800a84e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a83e:	6879      	ldr	r1, [r7, #4]
 800a840:	484a      	ldr	r0, [pc, #296]	; (800a96c <tcp_abandon+0x16c>)
 800a842:	f000 ffc3 	bl	800b7cc <tcp_pcb_remove>
    tcp_free(pcb);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fdb0 	bl	800a3ac <tcp_free>
 800a84c:	e082      	b.n	800a954 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a85a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a868:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	7d1b      	ldrb	r3, [r3, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d126      	bne.n	800a8c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	8adb      	ldrh	r3, [r3, #22]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d02e      	beq.n	800a8de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a880:	4b3b      	ldr	r3, [pc, #236]	; (800a970 <tcp_abandon+0x170>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	429a      	cmp	r2, r3
 800a888:	d105      	bne.n	800a896 <tcp_abandon+0x96>
 800a88a:	4b39      	ldr	r3, [pc, #228]	; (800a970 <tcp_abandon+0x170>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	4a37      	ldr	r2, [pc, #220]	; (800a970 <tcp_abandon+0x170>)
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	e013      	b.n	800a8be <tcp_abandon+0xbe>
 800a896:	4b36      	ldr	r3, [pc, #216]	; (800a970 <tcp_abandon+0x170>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	61fb      	str	r3, [r7, #28]
 800a89c:	e00c      	b.n	800a8b8 <tcp_abandon+0xb8>
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d104      	bne.n	800a8b2 <tcp_abandon+0xb2>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68da      	ldr	r2, [r3, #12]
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	60da      	str	r2, [r3, #12]
 800a8b0:	e005      	b.n	800a8be <tcp_abandon+0xbe>
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1ef      	bne.n	800a89e <tcp_abandon+0x9e>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	60da      	str	r2, [r3, #12]
 800a8c4:	e00b      	b.n	800a8de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	8adb      	ldrh	r3, [r3, #22]
 800a8ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	4828      	ldr	r0, [pc, #160]	; (800a974 <tcp_abandon+0x174>)
 800a8d4:	f000 ff7a 	bl	800b7cc <tcp_pcb_remove>
 800a8d8:	4b27      	ldr	r3, [pc, #156]	; (800a978 <tcp_abandon+0x178>)
 800a8da:	2201      	movs	r2, #1
 800a8dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d004      	beq.n	800a8f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fd1c 	bl	800b328 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fd13 	bl	800b328 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a906:	2b00      	cmp	r3, #0
 800a908:	d004      	beq.n	800a914 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fd0a 	bl	800b328 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00e      	beq.n	800a938 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	3304      	adds	r3, #4
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	8b12      	ldrh	r2, [r2, #24]
 800a924:	9202      	str	r2, [sp, #8]
 800a926:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a928:	9201      	str	r2, [sp, #4]
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	460b      	mov	r3, r1
 800a92e:	697a      	ldr	r2, [r7, #20]
 800a930:	69b9      	ldr	r1, [r7, #24]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f004 fcc2 	bl	800f2bc <tcp_rst>
    }
    last_state = pcb->state;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	7d1b      	ldrb	r3, [r3, #20]
 800a93c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fd34 	bl	800a3ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d004      	beq.n	800a954 <tcp_abandon+0x154>
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	f06f 010c 	mvn.w	r1, #12
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	4798      	blx	r3
  }
}
 800a954:	3728      	adds	r7, #40	; 0x28
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	08014984 	.word	0x08014984
 800a960:	08014ac8 	.word	0x08014ac8
 800a964:	080149c8 	.word	0x080149c8
 800a968:	08014ae4 	.word	0x08014ae4
 800a96c:	2400bd1c 	.word	0x2400bd1c
 800a970:	2400bd10 	.word	0x2400bd10
 800a974:	2400bd18 	.word	0x2400bd18
 800a978:	2400bd20 	.word	0x2400bd20

0800a97c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a984:	2101      	movs	r1, #1
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff ff3a 	bl	800a800 <tcp_abandon>
}
 800a98c:	bf00      	nop
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d106      	bne.n	800a9b0 <tcp_update_rcv_ann_wnd+0x1c>
 800a9a2:	4b25      	ldr	r3, [pc, #148]	; (800aa38 <tcp_update_rcv_ann_wnd+0xa4>)
 800a9a4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a9a8:	4924      	ldr	r1, [pc, #144]	; (800aa3c <tcp_update_rcv_ann_wnd+0xa8>)
 800a9aa:	4825      	ldr	r0, [pc, #148]	; (800aa40 <tcp_update_rcv_ann_wnd+0xac>)
 800a9ac:	f008 fa86 	bl	8012ebc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a9b8:	4413      	add	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a9c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a9c8:	bf28      	it	cs
 800a9ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a9ce:	b292      	uxth	r2, r2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	db08      	blt.n	800a9ec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	e020      	b.n	800aa2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dd03      	ble.n	800aa02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa00:	e014      	b.n	800aa2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa14:	d306      	bcc.n	800aa24 <tcp_update_rcv_ann_wnd+0x90>
 800aa16:	4b08      	ldr	r3, [pc, #32]	; (800aa38 <tcp_update_rcv_ann_wnd+0xa4>)
 800aa18:	f240 32b6 	movw	r2, #950	; 0x3b6
 800aa1c:	4909      	ldr	r1, [pc, #36]	; (800aa44 <tcp_update_rcv_ann_wnd+0xb0>)
 800aa1e:	4808      	ldr	r0, [pc, #32]	; (800aa40 <tcp_update_rcv_ann_wnd+0xac>)
 800aa20:	f008 fa4c 	bl	8012ebc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800aa2c:	2300      	movs	r3, #0
  }
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	08014984 	.word	0x08014984
 800aa3c:	08014be0 	.word	0x08014be0
 800aa40:	080149c8 	.word	0x080149c8
 800aa44:	08014c04 	.word	0x08014c04

0800aa48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d107      	bne.n	800aa6a <tcp_recved+0x22>
 800aa5a:	4b1f      	ldr	r3, [pc, #124]	; (800aad8 <tcp_recved+0x90>)
 800aa5c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800aa60:	491e      	ldr	r1, [pc, #120]	; (800aadc <tcp_recved+0x94>)
 800aa62:	481f      	ldr	r0, [pc, #124]	; (800aae0 <tcp_recved+0x98>)
 800aa64:	f008 fa2a 	bl	8012ebc <iprintf>
 800aa68:	e032      	b.n	800aad0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	7d1b      	ldrb	r3, [r3, #20]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d106      	bne.n	800aa80 <tcp_recved+0x38>
 800aa72:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <tcp_recved+0x90>)
 800aa74:	f240 32d2 	movw	r2, #978	; 0x3d2
 800aa78:	491a      	ldr	r1, [pc, #104]	; (800aae4 <tcp_recved+0x9c>)
 800aa7a:	4819      	ldr	r0, [pc, #100]	; (800aae0 <tcp_recved+0x98>)
 800aa7c:	f008 fa1e 	bl	8012ebc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa84:	887b      	ldrh	r3, [r7, #2]
 800aa86:	4413      	add	r3, r2
 800aa88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aa8a:	89fb      	ldrh	r3, [r7, #14]
 800aa8c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aa90:	d804      	bhi.n	800aa9c <tcp_recved+0x54>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa96:	89fa      	ldrh	r2, [r7, #14]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d204      	bcs.n	800aaa6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aaa2:	851a      	strh	r2, [r3, #40]	; 0x28
 800aaa4:	e002      	b.n	800aaac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	89fa      	ldrh	r2, [r7, #14]
 800aaaa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff ff71 	bl	800a994 <tcp_update_rcv_ann_wnd>
 800aab2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800aaba:	d309      	bcc.n	800aad0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	8b5b      	ldrh	r3, [r3, #26]
 800aac0:	f043 0302 	orr.w	r3, r3, #2
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f003 fe42 	bl	800e754 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	08014984 	.word	0x08014984
 800aadc:	08014c20 	.word	0x08014c20
 800aae0:	080149c8 	.word	0x080149c8
 800aae4:	08014c38 	.word	0x08014c38

0800aae8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800aae8:	b5b0      	push	{r4, r5, r7, lr}
 800aaea:	b090      	sub	sp, #64	; 0x40
 800aaec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800aaf4:	4b94      	ldr	r3, [pc, #592]	; (800ad48 <tcp_slowtmr+0x260>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	4a93      	ldr	r2, [pc, #588]	; (800ad48 <tcp_slowtmr+0x260>)
 800aafc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800aafe:	4b93      	ldr	r3, [pc, #588]	; (800ad4c <tcp_slowtmr+0x264>)
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	3301      	adds	r3, #1
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	4b91      	ldr	r3, [pc, #580]	; (800ad4c <tcp_slowtmr+0x264>)
 800ab08:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ab0e:	4b90      	ldr	r3, [pc, #576]	; (800ad50 <tcp_slowtmr+0x268>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ab14:	e29d      	b.n	800b052 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ab16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab18:	7d1b      	ldrb	r3, [r3, #20]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d106      	bne.n	800ab2c <tcp_slowtmr+0x44>
 800ab1e:	4b8d      	ldr	r3, [pc, #564]	; (800ad54 <tcp_slowtmr+0x26c>)
 800ab20:	f240 42be 	movw	r2, #1214	; 0x4be
 800ab24:	498c      	ldr	r1, [pc, #560]	; (800ad58 <tcp_slowtmr+0x270>)
 800ab26:	488d      	ldr	r0, [pc, #564]	; (800ad5c <tcp_slowtmr+0x274>)
 800ab28:	f008 f9c8 	bl	8012ebc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	7d1b      	ldrb	r3, [r3, #20]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d106      	bne.n	800ab42 <tcp_slowtmr+0x5a>
 800ab34:	4b87      	ldr	r3, [pc, #540]	; (800ad54 <tcp_slowtmr+0x26c>)
 800ab36:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ab3a:	4989      	ldr	r1, [pc, #548]	; (800ad60 <tcp_slowtmr+0x278>)
 800ab3c:	4887      	ldr	r0, [pc, #540]	; (800ad5c <tcp_slowtmr+0x274>)
 800ab3e:	f008 f9bd 	bl	8012ebc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ab42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab44:	7d1b      	ldrb	r3, [r3, #20]
 800ab46:	2b0a      	cmp	r3, #10
 800ab48:	d106      	bne.n	800ab58 <tcp_slowtmr+0x70>
 800ab4a:	4b82      	ldr	r3, [pc, #520]	; (800ad54 <tcp_slowtmr+0x26c>)
 800ab4c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ab50:	4984      	ldr	r1, [pc, #528]	; (800ad64 <tcp_slowtmr+0x27c>)
 800ab52:	4882      	ldr	r0, [pc, #520]	; (800ad5c <tcp_slowtmr+0x274>)
 800ab54:	f008 f9b2 	bl	8012ebc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	7f9a      	ldrb	r2, [r3, #30]
 800ab5c:	4b7b      	ldr	r3, [pc, #492]	; (800ad4c <tcp_slowtmr+0x264>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d105      	bne.n	800ab70 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ab6e:	e270      	b.n	800b052 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ab70:	4b76      	ldr	r3, [pc, #472]	; (800ad4c <tcp_slowtmr+0x264>)
 800ab72:	781a      	ldrb	r2, [r3, #0]
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	7d1b      	ldrb	r3, [r3, #20]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d10a      	bne.n	800aba2 <tcp_slowtmr+0xba>
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d905      	bls.n	800aba2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ab96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aba0:	e11e      	b.n	800ade0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aba8:	2b0b      	cmp	r3, #11
 800abaa:	d905      	bls.n	800abb8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800abac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abb0:	3301      	adds	r3, #1
 800abb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abb6:	e113      	b.n	800ade0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d075      	beq.n	800acae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d006      	beq.n	800abd8 <tcp_slowtmr+0xf0>
 800abca:	4b62      	ldr	r3, [pc, #392]	; (800ad54 <tcp_slowtmr+0x26c>)
 800abcc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800abd0:	4965      	ldr	r1, [pc, #404]	; (800ad68 <tcp_slowtmr+0x280>)
 800abd2:	4862      	ldr	r0, [pc, #392]	; (800ad5c <tcp_slowtmr+0x274>)
 800abd4:	f008 f972 	bl	8012ebc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <tcp_slowtmr+0x106>
 800abe0:	4b5c      	ldr	r3, [pc, #368]	; (800ad54 <tcp_slowtmr+0x26c>)
 800abe2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800abe6:	4961      	ldr	r1, [pc, #388]	; (800ad6c <tcp_slowtmr+0x284>)
 800abe8:	485c      	ldr	r0, [pc, #368]	; (800ad5c <tcp_slowtmr+0x274>)
 800abea:	f008 f967 	bl	8012ebc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800abf4:	2b0b      	cmp	r3, #11
 800abf6:	d905      	bls.n	800ac04 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abfc:	3301      	adds	r3, #1
 800abfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac02:	e0ed      	b.n	800ade0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ac04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	4a58      	ldr	r2, [pc, #352]	; (800ad70 <tcp_slowtmr+0x288>)
 800ac0e:	5cd3      	ldrb	r3, [r2, r3]
 800ac10:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac18:	7c7a      	ldrb	r2, [r7, #17]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d907      	bls.n	800ac2e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac24:	3301      	adds	r3, #1
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ac34:	7c7a      	ldrb	r2, [r7, #17]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	f200 80d2 	bhi.w	800ade0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d108      	bne.n	800ac5c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ac4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac4c:	f004 fc2a 	bl	800f4a4 <tcp_zero_window_probe>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d014      	beq.n	800ac80 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ac56:	2300      	movs	r3, #0
 800ac58:	623b      	str	r3, [r7, #32]
 800ac5a:	e011      	b.n	800ac80 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ac5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac62:	4619      	mov	r1, r3
 800ac64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac66:	f003 faef 	bl	800e248 <tcp_split_unsent_seg>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d107      	bne.n	800ac80 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ac70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac72:	f003 fd6f 	bl	800e754 <tcp_output>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 80ac 	beq.w	800ade0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ac88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac96:	2b06      	cmp	r3, #6
 800ac98:	f200 80a2 	bhi.w	800ade0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aca2:	3301      	adds	r3, #1
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800acac:	e098      	b.n	800ade0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	db0f      	blt.n	800acd8 <tcp_slowtmr+0x1f0>
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800acbe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d008      	beq.n	800acd8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800accc:	b29b      	uxth	r3, r3
 800acce:	3301      	adds	r3, #1
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	b21a      	sxth	r2, r3
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ace4:	429a      	cmp	r2, r3
 800ace6:	db7b      	blt.n	800ade0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ace8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acea:	f004 f825 	bl	800ed38 <tcp_rexmit_rto_prepare>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d007      	beq.n	800ad04 <tcp_slowtmr+0x21c>
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d171      	bne.n	800ade0 <tcp_slowtmr+0x2f8>
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d06d      	beq.n	800ade0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	7d1b      	ldrb	r3, [r3, #20]
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d03a      	beq.n	800ad82 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ad12:	2b0c      	cmp	r3, #12
 800ad14:	bf28      	it	cs
 800ad16:	230c      	movcs	r3, #12
 800ad18:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ad1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ad20:	10db      	asrs	r3, r3, #3
 800ad22:	b21b      	sxth	r3, r3
 800ad24:	461a      	mov	r2, r3
 800ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ad2c:	4413      	add	r3, r2
 800ad2e:	7efa      	ldrb	r2, [r7, #27]
 800ad30:	4910      	ldr	r1, [pc, #64]	; (800ad74 <tcp_slowtmr+0x28c>)
 800ad32:	5c8a      	ldrb	r2, [r1, r2]
 800ad34:	4093      	lsls	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	dc1a      	bgt.n	800ad78 <tcp_slowtmr+0x290>
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	b21a      	sxth	r2, r3
 800ad46:	e019      	b.n	800ad7c <tcp_slowtmr+0x294>
 800ad48:	2400bd0c 	.word	0x2400bd0c
 800ad4c:	2400bd22 	.word	0x2400bd22
 800ad50:	2400bd18 	.word	0x2400bd18
 800ad54:	08014984 	.word	0x08014984
 800ad58:	08014cc8 	.word	0x08014cc8
 800ad5c:	080149c8 	.word	0x080149c8
 800ad60:	08014cf4 	.word	0x08014cf4
 800ad64:	08014d20 	.word	0x08014d20
 800ad68:	08014d50 	.word	0x08014d50
 800ad6c:	08014d84 	.word	0x08014d84
 800ad70:	08016994 	.word	0x08016994
 800ad74:	08016984 	.word	0x08016984
 800ad78:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ad82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad84:	2200      	movs	r2, #0
 800ad86:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ad8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad94:	4293      	cmp	r3, r2
 800ad96:	bf28      	it	cs
 800ad98:	4613      	movcs	r3, r2
 800ad9a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ad9c:	8a7b      	ldrh	r3, [r7, #18]
 800ad9e:	085b      	lsrs	r3, r3, #1
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800adae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d206      	bcs.n	800adc8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800adba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	2200      	movs	r2, #0
 800add6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800adda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800addc:	f004 f81c 	bl	800ee18 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	7d1b      	ldrb	r3, [r3, #20]
 800ade4:	2b06      	cmp	r3, #6
 800ade6:	d111      	bne.n	800ae0c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ade8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adea:	8b5b      	ldrh	r3, [r3, #26]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800adf4:	4b9c      	ldr	r3, [pc, #624]	; (800b068 <tcp_slowtmr+0x580>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b28      	cmp	r3, #40	; 0x28
 800ae00:	d904      	bls.n	800ae0c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ae02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae06:	3301      	adds	r3, #1
 800ae08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0e:	7a5b      	ldrb	r3, [r3, #9]
 800ae10:	f003 0308 	and.w	r3, r3, #8
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d04a      	beq.n	800aeae <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d003      	beq.n	800ae28 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae22:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ae24:	2b07      	cmp	r3, #7
 800ae26:	d142      	bne.n	800aeae <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae28:	4b8f      	ldr	r3, [pc, #572]	; (800b068 <tcp_slowtmr+0x580>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2e:	6a1b      	ldr	r3, [r3, #32]
 800ae30:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ae38:	4b8c      	ldr	r3, [pc, #560]	; (800b06c <tcp_slowtmr+0x584>)
 800ae3a:	440b      	add	r3, r1
 800ae3c:	498c      	ldr	r1, [pc, #560]	; (800b070 <tcp_slowtmr+0x588>)
 800ae3e:	fba1 1303 	umull	r1, r3, r1, r3
 800ae42:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d90a      	bls.n	800ae5e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ae48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ae52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ae56:	3301      	adds	r3, #1
 800ae58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ae5c:	e027      	b.n	800aeae <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae5e:	4b82      	ldr	r3, [pc, #520]	; (800b068 <tcp_slowtmr+0x580>)
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ae74:	4618      	mov	r0, r3
 800ae76:	4b7f      	ldr	r3, [pc, #508]	; (800b074 <tcp_slowtmr+0x58c>)
 800ae78:	fb00 f303 	mul.w	r3, r0, r3
 800ae7c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ae7e:	497c      	ldr	r1, [pc, #496]	; (800b070 <tcp_slowtmr+0x588>)
 800ae80:	fba1 1303 	umull	r1, r3, r1, r3
 800ae84:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d911      	bls.n	800aeae <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ae8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae8c:	f004 faca 	bl	800f424 <tcp_keepalive>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ae96:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800aea4:	3301      	adds	r3, #1
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800aeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d011      	beq.n	800aeda <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800aeb6:	4b6c      	ldr	r3, [pc, #432]	; (800b068 <tcp_slowtmr+0x580>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aec6:	4619      	mov	r1, r3
 800aec8:	460b      	mov	r3, r1
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	440b      	add	r3, r1
 800aece:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d302      	bcc.n	800aeda <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800aed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aed6:	f000 fddd 	bl	800ba94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800aeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aedc:	7d1b      	ldrb	r3, [r3, #20]
 800aede:	2b03      	cmp	r3, #3
 800aee0:	d10b      	bne.n	800aefa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aee2:	4b61      	ldr	r3, [pc, #388]	; (800b068 <tcp_slowtmr+0x580>)
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	2b28      	cmp	r3, #40	; 0x28
 800aeee:	d904      	bls.n	800aefa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800aef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef4:	3301      	adds	r3, #1
 800aef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800aefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefc:	7d1b      	ldrb	r3, [r3, #20]
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d10b      	bne.n	800af1a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800af02:	4b59      	ldr	r3, [pc, #356]	; (800b068 <tcp_slowtmr+0x580>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	2bf0      	cmp	r3, #240	; 0xf0
 800af0e:	d904      	bls.n	800af1a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800af10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af14:	3301      	adds	r3, #1
 800af16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800af1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d060      	beq.n	800afe4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af28:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800af2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af2c:	f000 fbfe 	bl	800b72c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	2b00      	cmp	r3, #0
 800af34:	d010      	beq.n	800af58 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800af36:	4b50      	ldr	r3, [pc, #320]	; (800b078 <tcp_slowtmr+0x590>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d106      	bne.n	800af4e <tcp_slowtmr+0x466>
 800af40:	4b4e      	ldr	r3, [pc, #312]	; (800b07c <tcp_slowtmr+0x594>)
 800af42:	f240 526d 	movw	r2, #1389	; 0x56d
 800af46:	494e      	ldr	r1, [pc, #312]	; (800b080 <tcp_slowtmr+0x598>)
 800af48:	484e      	ldr	r0, [pc, #312]	; (800b084 <tcp_slowtmr+0x59c>)
 800af4a:	f007 ffb7 	bl	8012ebc <iprintf>
        prev->next = pcb->next;
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	68da      	ldr	r2, [r3, #12]
 800af52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af54:	60da      	str	r2, [r3, #12]
 800af56:	e00f      	b.n	800af78 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800af58:	4b47      	ldr	r3, [pc, #284]	; (800b078 <tcp_slowtmr+0x590>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af5e:	429a      	cmp	r2, r3
 800af60:	d006      	beq.n	800af70 <tcp_slowtmr+0x488>
 800af62:	4b46      	ldr	r3, [pc, #280]	; (800b07c <tcp_slowtmr+0x594>)
 800af64:	f240 5271 	movw	r2, #1393	; 0x571
 800af68:	4947      	ldr	r1, [pc, #284]	; (800b088 <tcp_slowtmr+0x5a0>)
 800af6a:	4846      	ldr	r0, [pc, #280]	; (800b084 <tcp_slowtmr+0x59c>)
 800af6c:	f007 ffa6 	bl	8012ebc <iprintf>
        tcp_active_pcbs = pcb->next;
 800af70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	4a40      	ldr	r2, [pc, #256]	; (800b078 <tcp_slowtmr+0x590>)
 800af76:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800af78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d013      	beq.n	800afa8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800af88:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	3304      	adds	r3, #4
 800af8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af90:	8ad2      	ldrh	r2, [r2, #22]
 800af92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af94:	8b09      	ldrh	r1, [r1, #24]
 800af96:	9102      	str	r1, [sp, #8]
 800af98:	9201      	str	r2, [sp, #4]
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462b      	mov	r3, r5
 800af9e:	4622      	mov	r2, r4
 800afa0:	4601      	mov	r1, r0
 800afa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afa4:	f004 f98a 	bl	800f2bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800afa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800afae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb0:	7d1b      	ldrb	r3, [r3, #20]
 800afb2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800afbe:	6838      	ldr	r0, [r7, #0]
 800afc0:	f7ff f9f4 	bl	800a3ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800afc4:	4b31      	ldr	r3, [pc, #196]	; (800b08c <tcp_slowtmr+0x5a4>)
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d004      	beq.n	800afda <tcp_slowtmr+0x4f2>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f06f 010c 	mvn.w	r1, #12
 800afd6:	68b8      	ldr	r0, [r7, #8]
 800afd8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800afda:	4b2c      	ldr	r3, [pc, #176]	; (800b08c <tcp_slowtmr+0x5a4>)
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d037      	beq.n	800b052 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800afe2:	e592      	b.n	800ab0a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800afe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	7f1b      	ldrb	r3, [r3, #28]
 800aff2:	3301      	adds	r3, #1
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	7f1a      	ldrb	r2, [r3, #28]
 800affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b000:	7f5b      	ldrb	r3, [r3, #29]
 800b002:	429a      	cmp	r2, r3
 800b004:	d325      	bcc.n	800b052 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800b006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b008:	2200      	movs	r2, #0
 800b00a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b00c:	4b1f      	ldr	r3, [pc, #124]	; (800b08c <tcp_slowtmr+0x5a4>)
 800b00e:	2200      	movs	r2, #0
 800b010:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <tcp_slowtmr+0x54c>
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b024:	6912      	ldr	r2, [r2, #16]
 800b026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b032:	e002      	b.n	800b03a <tcp_slowtmr+0x552>
 800b034:	2300      	movs	r3, #0
 800b036:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b03a:	4b14      	ldr	r3, [pc, #80]	; (800b08c <tcp_slowtmr+0x5a4>)
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d000      	beq.n	800b044 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800b042:	e562      	b.n	800ab0a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b044:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800b04c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b04e:	f003 fb81 	bl	800e754 <tcp_output>
  while (pcb != NULL) {
 800b052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b054:	2b00      	cmp	r3, #0
 800b056:	f47f ad5e 	bne.w	800ab16 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b05a:	2300      	movs	r3, #0
 800b05c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b05e:	4b0c      	ldr	r3, [pc, #48]	; (800b090 <tcp_slowtmr+0x5a8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b064:	e069      	b.n	800b13a <tcp_slowtmr+0x652>
 800b066:	bf00      	nop
 800b068:	2400bd0c 	.word	0x2400bd0c
 800b06c:	000a4cb8 	.word	0x000a4cb8
 800b070:	10624dd3 	.word	0x10624dd3
 800b074:	000124f8 	.word	0x000124f8
 800b078:	2400bd18 	.word	0x2400bd18
 800b07c:	08014984 	.word	0x08014984
 800b080:	08014dbc 	.word	0x08014dbc
 800b084:	080149c8 	.word	0x080149c8
 800b088:	08014de8 	.word	0x08014de8
 800b08c:	2400bd20 	.word	0x2400bd20
 800b090:	2400bd1c 	.word	0x2400bd1c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b096:	7d1b      	ldrb	r3, [r3, #20]
 800b098:	2b0a      	cmp	r3, #10
 800b09a:	d006      	beq.n	800b0aa <tcp_slowtmr+0x5c2>
 800b09c:	4b2b      	ldr	r3, [pc, #172]	; (800b14c <tcp_slowtmr+0x664>)
 800b09e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b0a2:	492b      	ldr	r1, [pc, #172]	; (800b150 <tcp_slowtmr+0x668>)
 800b0a4:	482b      	ldr	r0, [pc, #172]	; (800b154 <tcp_slowtmr+0x66c>)
 800b0a6:	f007 ff09 	bl	8012ebc <iprintf>
    pcb_remove = 0;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b0b0:	4b29      	ldr	r3, [pc, #164]	; (800b158 <tcp_slowtmr+0x670>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b6:	6a1b      	ldr	r3, [r3, #32]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	2bf0      	cmp	r3, #240	; 0xf0
 800b0bc:	d904      	bls.n	800b0c8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b0be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02f      	beq.n	800b130 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b0d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0d2:	f000 fb2b 	bl	800b72c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d010      	beq.n	800b0fe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b0dc:	4b1f      	ldr	r3, [pc, #124]	; (800b15c <tcp_slowtmr+0x674>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d106      	bne.n	800b0f4 <tcp_slowtmr+0x60c>
 800b0e6:	4b19      	ldr	r3, [pc, #100]	; (800b14c <tcp_slowtmr+0x664>)
 800b0e8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b0ec:	491c      	ldr	r1, [pc, #112]	; (800b160 <tcp_slowtmr+0x678>)
 800b0ee:	4819      	ldr	r0, [pc, #100]	; (800b154 <tcp_slowtmr+0x66c>)
 800b0f0:	f007 fee4 	bl	8012ebc <iprintf>
        prev->next = pcb->next;
 800b0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f6:	68da      	ldr	r2, [r3, #12]
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	60da      	str	r2, [r3, #12]
 800b0fc:	e00f      	b.n	800b11e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b0fe:	4b17      	ldr	r3, [pc, #92]	; (800b15c <tcp_slowtmr+0x674>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b104:	429a      	cmp	r2, r3
 800b106:	d006      	beq.n	800b116 <tcp_slowtmr+0x62e>
 800b108:	4b10      	ldr	r3, [pc, #64]	; (800b14c <tcp_slowtmr+0x664>)
 800b10a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b10e:	4915      	ldr	r1, [pc, #84]	; (800b164 <tcp_slowtmr+0x67c>)
 800b110:	4810      	ldr	r0, [pc, #64]	; (800b154 <tcp_slowtmr+0x66c>)
 800b112:	f007 fed3 	bl	8012ebc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	4a10      	ldr	r2, [pc, #64]	; (800b15c <tcp_slowtmr+0x674>)
 800b11c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b120:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b128:	69f8      	ldr	r0, [r7, #28]
 800b12a:	f7ff f93f 	bl	800a3ac <tcp_free>
 800b12e:	e004      	b.n	800b13a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1a9      	bne.n	800b094 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	3730      	adds	r7, #48	; 0x30
 800b146:	46bd      	mov	sp, r7
 800b148:	bdb0      	pop	{r4, r5, r7, pc}
 800b14a:	bf00      	nop
 800b14c:	08014984 	.word	0x08014984
 800b150:	08014e14 	.word	0x08014e14
 800b154:	080149c8 	.word	0x080149c8
 800b158:	2400bd0c 	.word	0x2400bd0c
 800b15c:	2400bd1c 	.word	0x2400bd1c
 800b160:	08014e44 	.word	0x08014e44
 800b164:	08014e6c 	.word	0x08014e6c

0800b168 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b16e:	4b2d      	ldr	r3, [pc, #180]	; (800b224 <tcp_fasttmr+0xbc>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	3301      	adds	r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	4b2b      	ldr	r3, [pc, #172]	; (800b224 <tcp_fasttmr+0xbc>)
 800b178:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b17a:	4b2b      	ldr	r3, [pc, #172]	; (800b228 <tcp_fasttmr+0xc0>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b180:	e048      	b.n	800b214 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	7f9a      	ldrb	r2, [r3, #30]
 800b186:	4b27      	ldr	r3, [pc, #156]	; (800b224 <tcp_fasttmr+0xbc>)
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d03f      	beq.n	800b20e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b18e:	4b25      	ldr	r3, [pc, #148]	; (800b224 <tcp_fasttmr+0xbc>)
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	8b5b      	ldrh	r3, [r3, #26]
 800b19a:	f003 0301 	and.w	r3, r3, #1
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d010      	beq.n	800b1c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	8b5b      	ldrh	r3, [r3, #26]
 800b1a6:	f043 0302 	orr.w	r3, r3, #2
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f003 facf 	bl	800e754 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	8b5b      	ldrh	r3, [r3, #26]
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8b5b      	ldrh	r3, [r3, #26]
 800b1c8:	f003 0308 	and.w	r3, r3, #8
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d009      	beq.n	800b1e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	8b5b      	ldrh	r3, [r3, #26]
 800b1d4:	f023 0308 	bic.w	r3, r3, #8
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fa78 	bl	800a6d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b1f2:	4b0e      	ldr	r3, [pc, #56]	; (800b22c <tcp_fasttmr+0xc4>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f819 	bl	800b230 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	; (800b22c <tcp_fasttmr+0xc4>)
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d000      	beq.n	800b208 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b206:	e7b8      	b.n	800b17a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	607b      	str	r3, [r7, #4]
 800b20c:	e002      	b.n	800b214 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d1b3      	bne.n	800b182 <tcp_fasttmr+0x1a>
    }
  }
}
 800b21a:	bf00      	nop
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	2400bd22 	.word	0x2400bd22
 800b228:	2400bd18 	.word	0x2400bd18
 800b22c:	2400bd20 	.word	0x2400bd20

0800b230 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b230:	b590      	push	{r4, r7, lr}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d109      	bne.n	800b252 <tcp_process_refused_data+0x22>
 800b23e:	4b37      	ldr	r3, [pc, #220]	; (800b31c <tcp_process_refused_data+0xec>)
 800b240:	f240 6209 	movw	r2, #1545	; 0x609
 800b244:	4936      	ldr	r1, [pc, #216]	; (800b320 <tcp_process_refused_data+0xf0>)
 800b246:	4837      	ldr	r0, [pc, #220]	; (800b324 <tcp_process_refused_data+0xf4>)
 800b248:	f007 fe38 	bl	8012ebc <iprintf>
 800b24c:	f06f 030f 	mvn.w	r3, #15
 800b250:	e060      	b.n	800b314 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b256:	7b5b      	ldrb	r3, [r3, #13]
 800b258:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b25e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00b      	beq.n	800b288 <tcp_process_refused_data+0x58>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6918      	ldr	r0, [r3, #16]
 800b27a:	2300      	movs	r3, #0
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	47a0      	blx	r4
 800b282:	4603      	mov	r3, r0
 800b284:	73fb      	strb	r3, [r7, #15]
 800b286:	e007      	b.n	800b298 <tcp_process_refused_data+0x68>
 800b288:	2300      	movs	r3, #0
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	2000      	movs	r0, #0
 800b290:	f000 f8a4 	bl	800b3dc <tcp_recv_null>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d12a      	bne.n	800b2f6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	f003 0320 	and.w	r3, r3, #32
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d033      	beq.n	800b312 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b2b2:	d005      	beq.n	800b2c0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00b      	beq.n	800b2e2 <tcp_process_refused_data+0xb2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6918      	ldr	r0, [r3, #16]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	6879      	ldr	r1, [r7, #4]
 800b2da:	47a0      	blx	r4
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]
 800b2e0:	e001      	b.n	800b2e6 <tcp_process_refused_data+0xb6>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ea:	f113 0f0d 	cmn.w	r3, #13
 800b2ee:	d110      	bne.n	800b312 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b2f0:	f06f 030c 	mvn.w	r3, #12
 800b2f4:	e00e      	b.n	800b314 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2fa:	f113 0f0d 	cmn.w	r3, #13
 800b2fe:	d102      	bne.n	800b306 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b300:	f06f 030c 	mvn.w	r3, #12
 800b304:	e006      	b.n	800b314 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b30c:	f06f 0304 	mvn.w	r3, #4
 800b310:	e000      	b.n	800b314 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd90      	pop	{r4, r7, pc}
 800b31c:	08014984 	.word	0x08014984
 800b320:	08014e94 	.word	0x08014e94
 800b324:	080149c8 	.word	0x080149c8

0800b328 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b330:	e007      	b.n	800b342 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f80a 	bl	800b352 <tcp_seg_free>
    seg = next;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1f4      	bne.n	800b332 <tcp_segs_free+0xa>
  }
}
 800b348:	bf00      	nop
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b082      	sub	sp, #8
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00c      	beq.n	800b37a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d004      	beq.n	800b372 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fd61 	bl	8009e34 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b372:	6879      	ldr	r1, [r7, #4]
 800b374:	2003      	movs	r0, #3
 800b376:	f7fd feb9 	bl	80090ec <memp_free>
  }
}
 800b37a:	bf00      	nop
 800b37c:	3708      	adds	r7, #8
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <tcp_seg_copy+0x1c>
 800b392:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <tcp_seg_copy+0x4c>)
 800b394:	f240 6282 	movw	r2, #1666	; 0x682
 800b398:	490e      	ldr	r1, [pc, #56]	; (800b3d4 <tcp_seg_copy+0x50>)
 800b39a:	480f      	ldr	r0, [pc, #60]	; (800b3d8 <tcp_seg_copy+0x54>)
 800b39c:	f007 fd8e 	bl	8012ebc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b3a0:	2003      	movs	r0, #3
 800b3a2:	f7fd fe2d 	bl	8009000 <memp_malloc>
 800b3a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d101      	bne.n	800b3b2 <tcp_seg_copy+0x2e>
    return NULL;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	e00a      	b.n	800b3c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b3b2:	2210      	movs	r2, #16
 800b3b4:	6879      	ldr	r1, [r7, #4]
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f007 fcd5 	bl	8012d66 <memcpy>
  pbuf_ref(cseg->p);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe fddd 	bl	8009f80 <pbuf_ref>
  return cseg;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	08014984 	.word	0x08014984
 800b3d4:	08014ed8 	.word	0x08014ed8
 800b3d8:	080149c8 	.word	0x080149c8

0800b3dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d109      	bne.n	800b404 <tcp_recv_null+0x28>
 800b3f0:	4b12      	ldr	r3, [pc, #72]	; (800b43c <tcp_recv_null+0x60>)
 800b3f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b3f6:	4912      	ldr	r1, [pc, #72]	; (800b440 <tcp_recv_null+0x64>)
 800b3f8:	4812      	ldr	r0, [pc, #72]	; (800b444 <tcp_recv_null+0x68>)
 800b3fa:	f007 fd5f 	bl	8012ebc <iprintf>
 800b3fe:	f06f 030f 	mvn.w	r3, #15
 800b402:	e016      	b.n	800b432 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d009      	beq.n	800b41e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	891b      	ldrh	r3, [r3, #8]
 800b40e:	4619      	mov	r1, r3
 800b410:	68b8      	ldr	r0, [r7, #8]
 800b412:	f7ff fb19 	bl	800aa48 <tcp_recved>
    pbuf_free(p);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7fe fd0c 	bl	8009e34 <pbuf_free>
 800b41c:	e008      	b.n	800b430 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b41e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d104      	bne.n	800b430 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b426:	68b8      	ldr	r0, [r7, #8]
 800b428:	f7ff f9be 	bl	800a7a8 <tcp_close>
 800b42c:	4603      	mov	r3, r0
 800b42e:	e000      	b.n	800b432 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b430:	2300      	movs	r3, #0
}
 800b432:	4618      	mov	r0, r3
 800b434:	3710      	adds	r7, #16
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	08014984 	.word	0x08014984
 800b440:	08014ef4 	.word	0x08014ef4
 800b444:	080149c8 	.word	0x080149c8

0800b448 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	4603      	mov	r3, r0
 800b450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b456:	2b00      	cmp	r3, #0
 800b458:	db01      	blt.n	800b45e <tcp_kill_prio+0x16>
 800b45a:	79fb      	ldrb	r3, [r7, #7]
 800b45c:	e000      	b.n	800b460 <tcp_kill_prio+0x18>
 800b45e:	237f      	movs	r3, #127	; 0x7f
 800b460:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d034      	beq.n	800b4d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b468:	7afb      	ldrb	r3, [r7, #11]
 800b46a:	3b01      	subs	r3, #1
 800b46c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b476:	4b19      	ldr	r3, [pc, #100]	; (800b4dc <tcp_kill_prio+0x94>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	e01f      	b.n	800b4be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	7d5b      	ldrb	r3, [r3, #21]
 800b482:	7afa      	ldrb	r2, [r7, #11]
 800b484:	429a      	cmp	r2, r3
 800b486:	d80c      	bhi.n	800b4a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b48c:	7afa      	ldrb	r2, [r7, #11]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d112      	bne.n	800b4b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b492:	4b13      	ldr	r3, [pc, #76]	; (800b4e0 <tcp_kill_prio+0x98>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d80a      	bhi.n	800b4b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b4a2:	4b0f      	ldr	r3, [pc, #60]	; (800b4e0 <tcp_kill_prio+0x98>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	7d5b      	ldrb	r3, [r3, #21]
 800b4b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	617b      	str	r3, [r7, #20]
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1dc      	bne.n	800b47e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d004      	beq.n	800b4d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b4ca:	6938      	ldr	r0, [r7, #16]
 800b4cc:	f7ff fa56 	bl	800a97c <tcp_abort>
 800b4d0:	e000      	b.n	800b4d4 <tcp_kill_prio+0x8c>
    return;
 800b4d2:	bf00      	nop
  }
}
 800b4d4:	3718      	adds	r7, #24
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	2400bd18 	.word	0x2400bd18
 800b4e0:	2400bd0c 	.word	0x2400bd0c

0800b4e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	2b08      	cmp	r3, #8
 800b4f2:	d009      	beq.n	800b508 <tcp_kill_state+0x24>
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	d006      	beq.n	800b508 <tcp_kill_state+0x24>
 800b4fa:	4b1a      	ldr	r3, [pc, #104]	; (800b564 <tcp_kill_state+0x80>)
 800b4fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b500:	4919      	ldr	r1, [pc, #100]	; (800b568 <tcp_kill_state+0x84>)
 800b502:	481a      	ldr	r0, [pc, #104]	; (800b56c <tcp_kill_state+0x88>)
 800b504:	f007 fcda 	bl	8012ebc <iprintf>

  inactivity = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b510:	4b17      	ldr	r3, [pc, #92]	; (800b570 <tcp_kill_state+0x8c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	e017      	b.n	800b548 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	7d1b      	ldrb	r3, [r3, #20]
 800b51c:	79fa      	ldrb	r2, [r7, #7]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d10f      	bne.n	800b542 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b522:	4b14      	ldr	r3, [pc, #80]	; (800b574 <tcp_kill_state+0x90>)
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d807      	bhi.n	800b542 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b532:	4b10      	ldr	r3, [pc, #64]	; (800b574 <tcp_kill_state+0x90>)
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	697b      	ldr	r3, [r7, #20]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1e4      	bne.n	800b518 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d003      	beq.n	800b55c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b554:	2100      	movs	r1, #0
 800b556:	6938      	ldr	r0, [r7, #16]
 800b558:	f7ff f952 	bl	800a800 <tcp_abandon>
  }
}
 800b55c:	bf00      	nop
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	08014984 	.word	0x08014984
 800b568:	08014f10 	.word	0x08014f10
 800b56c:	080149c8 	.word	0x080149c8
 800b570:	2400bd18 	.word	0x2400bd18
 800b574:	2400bd0c 	.word	0x2400bd0c

0800b578 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b57e:	2300      	movs	r3, #0
 800b580:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b586:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <tcp_kill_timewait+0x58>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	60fb      	str	r3, [r7, #12]
 800b58c:	e012      	b.n	800b5b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b58e:	4b11      	ldr	r3, [pc, #68]	; (800b5d4 <tcp_kill_timewait+0x5c>)
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d807      	bhi.n	800b5ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b59e:	4b0d      	ldr	r3, [pc, #52]	; (800b5d4 <tcp_kill_timewait+0x5c>)
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d1e9      	bne.n	800b58e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b5c0:	68b8      	ldr	r0, [r7, #8]
 800b5c2:	f7ff f9db 	bl	800a97c <tcp_abort>
  }
}
 800b5c6:	bf00      	nop
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	2400bd1c 	.word	0x2400bd1c
 800b5d4:	2400bd0c 	.word	0x2400bd0c

0800b5d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b5de:	4b10      	ldr	r3, [pc, #64]	; (800b620 <tcp_handle_closepend+0x48>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b5e4:	e014      	b.n	800b610 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	8b5b      	ldrh	r3, [r3, #26]
 800b5f0:	f003 0308 	and.w	r3, r3, #8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d009      	beq.n	800b60c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	8b5b      	ldrh	r3, [r3, #26]
 800b5fc:	f023 0308 	bic.w	r3, r3, #8
 800b600:	b29a      	uxth	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff f864 	bl	800a6d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e7      	bne.n	800b5e6 <tcp_handle_closepend+0xe>
  }
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	2400bd18 	.word	0x2400bd18

0800b624 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b62e:	2001      	movs	r0, #1
 800b630:	f7fd fce6 	bl	8009000 <memp_malloc>
 800b634:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d126      	bne.n	800b68a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b63c:	f7ff ffcc 	bl	800b5d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b640:	f7ff ff9a 	bl	800b578 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b644:	2001      	movs	r0, #1
 800b646:	f7fd fcdb 	bl	8009000 <memp_malloc>
 800b64a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d11b      	bne.n	800b68a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b652:	2009      	movs	r0, #9
 800b654:	f7ff ff46 	bl	800b4e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b658:	2001      	movs	r0, #1
 800b65a:	f7fd fcd1 	bl	8009000 <memp_malloc>
 800b65e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d111      	bne.n	800b68a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b666:	2008      	movs	r0, #8
 800b668:	f7ff ff3c 	bl	800b4e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b66c:	2001      	movs	r0, #1
 800b66e:	f7fd fcc7 	bl	8009000 <memp_malloc>
 800b672:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d107      	bne.n	800b68a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b67a:	79fb      	ldrb	r3, [r7, #7]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff fee3 	bl	800b448 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b682:	2001      	movs	r0, #1
 800b684:	f7fd fcbc 	bl	8009000 <memp_malloc>
 800b688:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d03f      	beq.n	800b710 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b690:	229c      	movs	r2, #156	; 0x9c
 800b692:	2100      	movs	r1, #0
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f007 fb74 	bl	8012d82 <memset>
    pcb->prio = prio;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	79fa      	ldrb	r2, [r7, #7]
 800b69e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b6a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b6b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	22ff      	movs	r2, #255	; 0xff
 800b6be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b6c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2206      	movs	r2, #6
 800b6cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2206      	movs	r2, #6
 800b6d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b6e6:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <tcp_alloc+0xf8>)
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b6ee:	4b0c      	ldr	r3, [pc, #48]	; (800b720 <tcp_alloc+0xfc>)
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b6fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	4a08      	ldr	r2, [pc, #32]	; (800b724 <tcp_alloc+0x100>)
 800b704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4a07      	ldr	r2, [pc, #28]	; (800b728 <tcp_alloc+0x104>)
 800b70c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b710:	68fb      	ldr	r3, [r7, #12]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	2400bd0c 	.word	0x2400bd0c
 800b720:	2400bd22 	.word	0x2400bd22
 800b724:	0800b3dd 	.word	0x0800b3dd
 800b728:	006ddd00 	.word	0x006ddd00

0800b72c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d107      	bne.n	800b74a <tcp_pcb_purge+0x1e>
 800b73a:	4b21      	ldr	r3, [pc, #132]	; (800b7c0 <tcp_pcb_purge+0x94>)
 800b73c:	f640 0251 	movw	r2, #2129	; 0x851
 800b740:	4920      	ldr	r1, [pc, #128]	; (800b7c4 <tcp_pcb_purge+0x98>)
 800b742:	4821      	ldr	r0, [pc, #132]	; (800b7c8 <tcp_pcb_purge+0x9c>)
 800b744:	f007 fbba 	bl	8012ebc <iprintf>
 800b748:	e037      	b.n	800b7ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	7d1b      	ldrb	r3, [r3, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d033      	beq.n	800b7ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b756:	2b0a      	cmp	r3, #10
 800b758:	d02f      	beq.n	800b7ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d02b      	beq.n	800b7ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b766:	2b00      	cmp	r3, #0
 800b768:	d007      	beq.n	800b77a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fb60 	bl	8009e34 <pbuf_free>
      pcb->refused_data = NULL;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f986 	bl	800ba94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b78e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fdc7 	bl	800b328 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fdc2 	bl	800b328 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	66da      	str	r2, [r3, #108]	; 0x6c
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	08014984 	.word	0x08014984
 800b7c4:	08014fd0 	.word	0x08014fd0
 800b7c8:	080149c8 	.word	0x080149c8

0800b7cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d106      	bne.n	800b7ea <tcp_pcb_remove+0x1e>
 800b7dc:	4b3e      	ldr	r3, [pc, #248]	; (800b8d8 <tcp_pcb_remove+0x10c>)
 800b7de:	f640 0283 	movw	r2, #2179	; 0x883
 800b7e2:	493e      	ldr	r1, [pc, #248]	; (800b8dc <tcp_pcb_remove+0x110>)
 800b7e4:	483e      	ldr	r0, [pc, #248]	; (800b8e0 <tcp_pcb_remove+0x114>)
 800b7e6:	f007 fb69 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <tcp_pcb_remove+0x32>
 800b7f0:	4b39      	ldr	r3, [pc, #228]	; (800b8d8 <tcp_pcb_remove+0x10c>)
 800b7f2:	f640 0284 	movw	r2, #2180	; 0x884
 800b7f6:	493b      	ldr	r1, [pc, #236]	; (800b8e4 <tcp_pcb_remove+0x118>)
 800b7f8:	4839      	ldr	r0, [pc, #228]	; (800b8e0 <tcp_pcb_remove+0x114>)
 800b7fa:	f007 fb5f 	bl	8012ebc <iprintf>

  TCP_RMV(pcblist, pcb);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d105      	bne.n	800b814 <tcp_pcb_remove+0x48>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68da      	ldr	r2, [r3, #12]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	e013      	b.n	800b83c <tcp_pcb_remove+0x70>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	60fb      	str	r3, [r7, #12]
 800b81a:	e00c      	b.n	800b836 <tcp_pcb_remove+0x6a>
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d104      	bne.n	800b830 <tcp_pcb_remove+0x64>
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	60da      	str	r2, [r3, #12]
 800b82e:	e005      	b.n	800b83c <tcp_pcb_remove+0x70>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1ef      	bne.n	800b81c <tcp_pcb_remove+0x50>
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	2200      	movs	r2, #0
 800b840:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b842:	6838      	ldr	r0, [r7, #0]
 800b844:	f7ff ff72 	bl	800b72c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	7d1b      	ldrb	r3, [r3, #20]
 800b84c:	2b0a      	cmp	r3, #10
 800b84e:	d013      	beq.n	800b878 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b854:	2b01      	cmp	r3, #1
 800b856:	d00f      	beq.n	800b878 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	8b5b      	ldrh	r3, [r3, #26]
 800b85c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b860:	2b00      	cmp	r3, #0
 800b862:	d009      	beq.n	800b878 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	8b5b      	ldrh	r3, [r3, #26]
 800b868:	f043 0302 	orr.w	r3, r3, #2
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b872:	6838      	ldr	r0, [r7, #0]
 800b874:	f002 ff6e 	bl	800e754 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	7d1b      	ldrb	r3, [r3, #20]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d020      	beq.n	800b8c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d006      	beq.n	800b896 <tcp_pcb_remove+0xca>
 800b888:	4b13      	ldr	r3, [pc, #76]	; (800b8d8 <tcp_pcb_remove+0x10c>)
 800b88a:	f640 0293 	movw	r2, #2195	; 0x893
 800b88e:	4916      	ldr	r1, [pc, #88]	; (800b8e8 <tcp_pcb_remove+0x11c>)
 800b890:	4813      	ldr	r0, [pc, #76]	; (800b8e0 <tcp_pcb_remove+0x114>)
 800b892:	f007 fb13 	bl	8012ebc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d006      	beq.n	800b8ac <tcp_pcb_remove+0xe0>
 800b89e:	4b0e      	ldr	r3, [pc, #56]	; (800b8d8 <tcp_pcb_remove+0x10c>)
 800b8a0:	f640 0294 	movw	r2, #2196	; 0x894
 800b8a4:	4911      	ldr	r1, [pc, #68]	; (800b8ec <tcp_pcb_remove+0x120>)
 800b8a6:	480e      	ldr	r0, [pc, #56]	; (800b8e0 <tcp_pcb_remove+0x114>)
 800b8a8:	f007 fb08 	bl	8012ebc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d006      	beq.n	800b8c2 <tcp_pcb_remove+0xf6>
 800b8b4:	4b08      	ldr	r3, [pc, #32]	; (800b8d8 <tcp_pcb_remove+0x10c>)
 800b8b6:	f640 0296 	movw	r2, #2198	; 0x896
 800b8ba:	490d      	ldr	r1, [pc, #52]	; (800b8f0 <tcp_pcb_remove+0x124>)
 800b8bc:	4808      	ldr	r0, [pc, #32]	; (800b8e0 <tcp_pcb_remove+0x114>)
 800b8be:	f007 fafd 	bl	8012ebc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b8ce:	bf00      	nop
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	08014984 	.word	0x08014984
 800b8dc:	08014fec 	.word	0x08014fec
 800b8e0:	080149c8 	.word	0x080149c8
 800b8e4:	08015008 	.word	0x08015008
 800b8e8:	08015028 	.word	0x08015028
 800b8ec:	08015040 	.word	0x08015040
 800b8f0:	0801505c 	.word	0x0801505c

0800b8f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d106      	bne.n	800b910 <tcp_next_iss+0x1c>
 800b902:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <tcp_next_iss+0x38>)
 800b904:	f640 02af 	movw	r2, #2223	; 0x8af
 800b908:	4909      	ldr	r1, [pc, #36]	; (800b930 <tcp_next_iss+0x3c>)
 800b90a:	480a      	ldr	r0, [pc, #40]	; (800b934 <tcp_next_iss+0x40>)
 800b90c:	f007 fad6 	bl	8012ebc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b910:	4b09      	ldr	r3, [pc, #36]	; (800b938 <tcp_next_iss+0x44>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	4b09      	ldr	r3, [pc, #36]	; (800b93c <tcp_next_iss+0x48>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4413      	add	r3, r2
 800b91a:	4a07      	ldr	r2, [pc, #28]	; (800b938 <tcp_next_iss+0x44>)
 800b91c:	6013      	str	r3, [r2, #0]
  return iss;
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <tcp_next_iss+0x44>)
 800b920:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	08014984 	.word	0x08014984
 800b930:	08015074 	.word	0x08015074
 800b934:	080149c8 	.word	0x080149c8
 800b938:	2400002c 	.word	0x2400002c
 800b93c:	2400bd0c 	.word	0x2400bd0c

0800b940 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <tcp_eff_send_mss_netif+0x22>
 800b954:	4b14      	ldr	r3, [pc, #80]	; (800b9a8 <tcp_eff_send_mss_netif+0x68>)
 800b956:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b95a:	4914      	ldr	r1, [pc, #80]	; (800b9ac <tcp_eff_send_mss_netif+0x6c>)
 800b95c:	4814      	ldr	r0, [pc, #80]	; (800b9b0 <tcp_eff_send_mss_netif+0x70>)
 800b95e:	f007 faad 	bl	8012ebc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b968:	89fb      	ldrh	r3, [r7, #14]
 800b96a:	e019      	b.n	800b9a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b970:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b972:	8afb      	ldrh	r3, [r7, #22]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d012      	beq.n	800b99e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b978:	2328      	movs	r3, #40	; 0x28
 800b97a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b97c:	8afa      	ldrh	r2, [r7, #22]
 800b97e:	8abb      	ldrh	r3, [r7, #20]
 800b980:	429a      	cmp	r2, r3
 800b982:	d904      	bls.n	800b98e <tcp_eff_send_mss_netif+0x4e>
 800b984:	8afa      	ldrh	r2, [r7, #22]
 800b986:	8abb      	ldrh	r3, [r7, #20]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	e000      	b.n	800b990 <tcp_eff_send_mss_netif+0x50>
 800b98e:	2300      	movs	r3, #0
 800b990:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b992:	8a7a      	ldrh	r2, [r7, #18]
 800b994:	89fb      	ldrh	r3, [r7, #14]
 800b996:	4293      	cmp	r3, r2
 800b998:	bf28      	it	cs
 800b99a:	4613      	movcs	r3, r2
 800b99c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b99e:	89fb      	ldrh	r3, [r7, #14]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	08014984 	.word	0x08014984
 800b9ac:	08015090 	.word	0x08015090
 800b9b0:	080149c8 	.word	0x080149c8

0800b9b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d119      	bne.n	800b9fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b9c8:	4b10      	ldr	r3, [pc, #64]	; (800ba0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b9ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b9ce:	4910      	ldr	r1, [pc, #64]	; (800ba10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b9d0:	4810      	ldr	r0, [pc, #64]	; (800ba14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b9d2:	f007 fa73 	bl	8012ebc <iprintf>

  while (pcb != NULL) {
 800b9d6:	e011      	b.n	800b9fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d108      	bne.n	800b9f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7fe ffc6 	bl	800a97c <tcp_abort>
      pcb = next;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e002      	b.n	800b9fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1ea      	bne.n	800b9d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ba02:	bf00      	nop
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	08014984 	.word	0x08014984
 800ba10:	080150b8 	.word	0x080150b8
 800ba14:	080149c8 	.word	0x080149c8

0800ba18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d02a      	beq.n	800ba7e <tcp_netif_ip_addr_changed+0x66>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d026      	beq.n	800ba7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ba30:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <tcp_netif_ip_addr_changed+0x70>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4619      	mov	r1, r3
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7ff ffbc 	bl	800b9b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ba3c:	4b13      	ldr	r3, [pc, #76]	; (800ba8c <tcp_netif_ip_addr_changed+0x74>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4619      	mov	r1, r3
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff ffb6 	bl	800b9b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d017      	beq.n	800ba7e <tcp_netif_ip_addr_changed+0x66>
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d013      	beq.n	800ba7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba56:	4b0e      	ldr	r3, [pc, #56]	; (800ba90 <tcp_netif_ip_addr_changed+0x78>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	60fb      	str	r3, [r7, #12]
 800ba5c:	e00c      	b.n	800ba78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d103      	bne.n	800ba72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1ef      	bne.n	800ba5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ba7e:	bf00      	nop
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	2400bd18 	.word	0x2400bd18
 800ba8c:	2400bd10 	.word	0x2400bd10
 800ba90:	2400bd14 	.word	0x2400bd14

0800ba94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d007      	beq.n	800bab4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7ff fc3d 	bl	800b328 <tcp_segs_free>
    pcb->ooseq = NULL;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800babc:	b590      	push	{r4, r7, lr}
 800babe:	b08d      	sub	sp, #52	; 0x34
 800bac0:	af04      	add	r7, sp, #16
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d105      	bne.n	800bad8 <tcp_input+0x1c>
 800bacc:	4b9b      	ldr	r3, [pc, #620]	; (800bd3c <tcp_input+0x280>)
 800bace:	2283      	movs	r2, #131	; 0x83
 800bad0:	499b      	ldr	r1, [pc, #620]	; (800bd40 <tcp_input+0x284>)
 800bad2:	489c      	ldr	r0, [pc, #624]	; (800bd44 <tcp_input+0x288>)
 800bad4:	f007 f9f2 	bl	8012ebc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	4a9a      	ldr	r2, [pc, #616]	; (800bd48 <tcp_input+0x28c>)
 800bade:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	895b      	ldrh	r3, [r3, #10]
 800bae4:	2b13      	cmp	r3, #19
 800bae6:	f240 83d1 	bls.w	800c28c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800baea:	4b98      	ldr	r3, [pc, #608]	; (800bd4c <tcp_input+0x290>)
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	4a97      	ldr	r2, [pc, #604]	; (800bd4c <tcp_input+0x290>)
 800baf0:	6812      	ldr	r2, [r2, #0]
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f005 ff9d 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f040 83c7 	bne.w	800c290 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bb02:	4b92      	ldr	r3, [pc, #584]	; (800bd4c <tcp_input+0x290>)
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bb0a:	2be0      	cmp	r3, #224	; 0xe0
 800bb0c:	f000 83c0 	beq.w	800c290 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bb10:	4b8d      	ldr	r3, [pc, #564]	; (800bd48 <tcp_input+0x28c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	899b      	ldrh	r3, [r3, #12]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fc fcd1 	bl	80084c0 <lwip_htons>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	0b1b      	lsrs	r3, r3, #12
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bb2a:	7cbb      	ldrb	r3, [r7, #18]
 800bb2c:	2b13      	cmp	r3, #19
 800bb2e:	f240 83b1 	bls.w	800c294 <tcp_input+0x7d8>
 800bb32:	7cbb      	ldrb	r3, [r7, #18]
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	891b      	ldrh	r3, [r3, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	f200 83aa 	bhi.w	800c294 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bb40:	7cbb      	ldrb	r3, [r7, #18]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	3b14      	subs	r3, #20
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	4b81      	ldr	r3, [pc, #516]	; (800bd50 <tcp_input+0x294>)
 800bb4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bb4c:	4b81      	ldr	r3, [pc, #516]	; (800bd54 <tcp_input+0x298>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	895a      	ldrh	r2, [r3, #10]
 800bb56:	7cbb      	ldrb	r3, [r7, #18]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	d309      	bcc.n	800bb72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bb5e:	4b7c      	ldr	r3, [pc, #496]	; (800bd50 <tcp_input+0x294>)
 800bb60:	881a      	ldrh	r2, [r3, #0]
 800bb62:	4b7d      	ldr	r3, [pc, #500]	; (800bd58 <tcp_input+0x29c>)
 800bb64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bb66:	7cbb      	ldrb	r3, [r7, #18]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7fe f8dc 	bl	8009d28 <pbuf_remove_header>
 800bb70:	e04e      	b.n	800bc10 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d105      	bne.n	800bb86 <tcp_input+0xca>
 800bb7a:	4b70      	ldr	r3, [pc, #448]	; (800bd3c <tcp_input+0x280>)
 800bb7c:	22c2      	movs	r2, #194	; 0xc2
 800bb7e:	4977      	ldr	r1, [pc, #476]	; (800bd5c <tcp_input+0x2a0>)
 800bb80:	4870      	ldr	r0, [pc, #448]	; (800bd44 <tcp_input+0x288>)
 800bb82:	f007 f99b 	bl	8012ebc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bb86:	2114      	movs	r1, #20
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7fe f8cd 	bl	8009d28 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	895a      	ldrh	r2, [r3, #10]
 800bb92:	4b71      	ldr	r3, [pc, #452]	; (800bd58 <tcp_input+0x29c>)
 800bb94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bb96:	4b6e      	ldr	r3, [pc, #440]	; (800bd50 <tcp_input+0x294>)
 800bb98:	881a      	ldrh	r2, [r3, #0]
 800bb9a:	4b6f      	ldr	r3, [pc, #444]	; (800bd58 <tcp_input+0x29c>)
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bba2:	4b6d      	ldr	r3, [pc, #436]	; (800bd58 <tcp_input+0x29c>)
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7fe f8bd 	bl	8009d28 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	895b      	ldrh	r3, [r3, #10]
 800bbb4:	8a3a      	ldrh	r2, [r7, #16]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	f200 836e 	bhi.w	800c298 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	4a64      	ldr	r2, [pc, #400]	; (800bd54 <tcp_input+0x298>)
 800bbc4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	8a3a      	ldrh	r2, [r7, #16]
 800bbcc:	4611      	mov	r1, r2
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe f8aa 	bl	8009d28 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	891a      	ldrh	r2, [r3, #8]
 800bbd8:	8a3b      	ldrh	r3, [r7, #16]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	895b      	ldrh	r3, [r3, #10]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d005      	beq.n	800bbf6 <tcp_input+0x13a>
 800bbea:	4b54      	ldr	r3, [pc, #336]	; (800bd3c <tcp_input+0x280>)
 800bbec:	22df      	movs	r2, #223	; 0xdf
 800bbee:	495c      	ldr	r1, [pc, #368]	; (800bd60 <tcp_input+0x2a4>)
 800bbf0:	4854      	ldr	r0, [pc, #336]	; (800bd44 <tcp_input+0x288>)
 800bbf2:	f007 f963 	bl	8012ebc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	891a      	ldrh	r2, [r3, #8]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	891b      	ldrh	r3, [r3, #8]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d005      	beq.n	800bc10 <tcp_input+0x154>
 800bc04:	4b4d      	ldr	r3, [pc, #308]	; (800bd3c <tcp_input+0x280>)
 800bc06:	22e0      	movs	r2, #224	; 0xe0
 800bc08:	4956      	ldr	r1, [pc, #344]	; (800bd64 <tcp_input+0x2a8>)
 800bc0a:	484e      	ldr	r0, [pc, #312]	; (800bd44 <tcp_input+0x288>)
 800bc0c:	f007 f956 	bl	8012ebc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bc10:	4b4d      	ldr	r3, [pc, #308]	; (800bd48 <tcp_input+0x28c>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	881b      	ldrh	r3, [r3, #0]
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	4a4b      	ldr	r2, [pc, #300]	; (800bd48 <tcp_input+0x28c>)
 800bc1a:	6814      	ldr	r4, [r2, #0]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fc fc4f 	bl	80084c0 <lwip_htons>
 800bc22:	4603      	mov	r3, r0
 800bc24:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bc26:	4b48      	ldr	r3, [pc, #288]	; (800bd48 <tcp_input+0x28c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	885b      	ldrh	r3, [r3, #2]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	4a46      	ldr	r2, [pc, #280]	; (800bd48 <tcp_input+0x28c>)
 800bc30:	6814      	ldr	r4, [r2, #0]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fc fc44 	bl	80084c0 <lwip_htons>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bc3c:	4b42      	ldr	r3, [pc, #264]	; (800bd48 <tcp_input+0x28c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	4a41      	ldr	r2, [pc, #260]	; (800bd48 <tcp_input+0x28c>)
 800bc44:	6814      	ldr	r4, [r2, #0]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fc fc4f 	bl	80084ea <lwip_htonl>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	6063      	str	r3, [r4, #4]
 800bc50:	6863      	ldr	r3, [r4, #4]
 800bc52:	4a45      	ldr	r2, [pc, #276]	; (800bd68 <tcp_input+0x2ac>)
 800bc54:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bc56:	4b3c      	ldr	r3, [pc, #240]	; (800bd48 <tcp_input+0x28c>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	4a3a      	ldr	r2, [pc, #232]	; (800bd48 <tcp_input+0x28c>)
 800bc5e:	6814      	ldr	r4, [r2, #0]
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fc fc42 	bl	80084ea <lwip_htonl>
 800bc66:	4603      	mov	r3, r0
 800bc68:	60a3      	str	r3, [r4, #8]
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	4a3f      	ldr	r2, [pc, #252]	; (800bd6c <tcp_input+0x2b0>)
 800bc6e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bc70:	4b35      	ldr	r3, [pc, #212]	; (800bd48 <tcp_input+0x28c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	89db      	ldrh	r3, [r3, #14]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	4a33      	ldr	r2, [pc, #204]	; (800bd48 <tcp_input+0x28c>)
 800bc7a:	6814      	ldr	r4, [r2, #0]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fc fc1f 	bl	80084c0 <lwip_htons>
 800bc82:	4603      	mov	r3, r0
 800bc84:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bc86:	4b30      	ldr	r3, [pc, #192]	; (800bd48 <tcp_input+0x28c>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	899b      	ldrh	r3, [r3, #12]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7fc fc16 	bl	80084c0 <lwip_htons>
 800bc94:	4603      	mov	r3, r0
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	4b34      	ldr	r3, [pc, #208]	; (800bd70 <tcp_input+0x2b4>)
 800bca0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	891a      	ldrh	r2, [r3, #8]
 800bca6:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <tcp_input+0x2b8>)
 800bca8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bcaa:	4b31      	ldr	r3, [pc, #196]	; (800bd70 <tcp_input+0x2b4>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00c      	beq.n	800bcd0 <tcp_input+0x214>
    tcplen++;
 800bcb6:	4b2f      	ldr	r3, [pc, #188]	; (800bd74 <tcp_input+0x2b8>)
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	4b2d      	ldr	r3, [pc, #180]	; (800bd74 <tcp_input+0x2b8>)
 800bcc0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	891a      	ldrh	r2, [r3, #8]
 800bcc6:	4b2b      	ldr	r3, [pc, #172]	; (800bd74 <tcp_input+0x2b8>)
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	f200 82e6 	bhi.w	800c29c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcd4:	4b28      	ldr	r3, [pc, #160]	; (800bd78 <tcp_input+0x2bc>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	e09d      	b.n	800be18 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	7d1b      	ldrb	r3, [r3, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d105      	bne.n	800bcf0 <tcp_input+0x234>
 800bce4:	4b15      	ldr	r3, [pc, #84]	; (800bd3c <tcp_input+0x280>)
 800bce6:	22fb      	movs	r2, #251	; 0xfb
 800bce8:	4924      	ldr	r1, [pc, #144]	; (800bd7c <tcp_input+0x2c0>)
 800bcea:	4816      	ldr	r0, [pc, #88]	; (800bd44 <tcp_input+0x288>)
 800bcec:	f007 f8e6 	bl	8012ebc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	7d1b      	ldrb	r3, [r3, #20]
 800bcf4:	2b0a      	cmp	r3, #10
 800bcf6:	d105      	bne.n	800bd04 <tcp_input+0x248>
 800bcf8:	4b10      	ldr	r3, [pc, #64]	; (800bd3c <tcp_input+0x280>)
 800bcfa:	22fc      	movs	r2, #252	; 0xfc
 800bcfc:	4920      	ldr	r1, [pc, #128]	; (800bd80 <tcp_input+0x2c4>)
 800bcfe:	4811      	ldr	r0, [pc, #68]	; (800bd44 <tcp_input+0x288>)
 800bd00:	f007 f8dc 	bl	8012ebc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	7d1b      	ldrb	r3, [r3, #20]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d105      	bne.n	800bd18 <tcp_input+0x25c>
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	; (800bd3c <tcp_input+0x280>)
 800bd0e:	22fd      	movs	r2, #253	; 0xfd
 800bd10:	491c      	ldr	r1, [pc, #112]	; (800bd84 <tcp_input+0x2c8>)
 800bd12:	480c      	ldr	r0, [pc, #48]	; (800bd44 <tcp_input+0x288>)
 800bd14:	f007 f8d2 	bl	8012ebc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	7a1b      	ldrb	r3, [r3, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d033      	beq.n	800bd88 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	7a1a      	ldrb	r2, [r3, #8]
 800bd24:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <tcp_input+0x290>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d029      	beq.n	800bd88 <tcp_input+0x2cc>
      prev = pcb;
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	61bb      	str	r3, [r7, #24]
      continue;
 800bd38:	e06b      	b.n	800be12 <tcp_input+0x356>
 800bd3a:	bf00      	nop
 800bd3c:	080150ec 	.word	0x080150ec
 800bd40:	08015120 	.word	0x08015120
 800bd44:	08015138 	.word	0x08015138
 800bd48:	2400bd34 	.word	0x2400bd34
 800bd4c:	24008c0c 	.word	0x24008c0c
 800bd50:	2400bd38 	.word	0x2400bd38
 800bd54:	2400bd3c 	.word	0x2400bd3c
 800bd58:	2400bd3a 	.word	0x2400bd3a
 800bd5c:	08015160 	.word	0x08015160
 800bd60:	08015170 	.word	0x08015170
 800bd64:	0801517c 	.word	0x0801517c
 800bd68:	2400bd44 	.word	0x2400bd44
 800bd6c:	2400bd48 	.word	0x2400bd48
 800bd70:	2400bd50 	.word	0x2400bd50
 800bd74:	2400bd4e 	.word	0x2400bd4e
 800bd78:	2400bd18 	.word	0x2400bd18
 800bd7c:	0801519c 	.word	0x0801519c
 800bd80:	080151c4 	.word	0x080151c4
 800bd84:	080151f0 	.word	0x080151f0
    }

    if (pcb->remote_port == tcphdr->src &&
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	8b1a      	ldrh	r2, [r3, #24]
 800bd8c:	4b72      	ldr	r3, [pc, #456]	; (800bf58 <tcp_input+0x49c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	881b      	ldrh	r3, [r3, #0]
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d13a      	bne.n	800be0e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	8ada      	ldrh	r2, [r3, #22]
 800bd9c:	4b6e      	ldr	r3, [pc, #440]	; (800bf58 <tcp_input+0x49c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	885b      	ldrh	r3, [r3, #2]
 800bda2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d132      	bne.n	800be0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bda8:	69fb      	ldr	r3, [r7, #28]
 800bdaa:	685a      	ldr	r2, [r3, #4]
 800bdac:	4b6b      	ldr	r3, [pc, #428]	; (800bf5c <tcp_input+0x4a0>)
 800bdae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d12c      	bne.n	800be0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	4b68      	ldr	r3, [pc, #416]	; (800bf5c <tcp_input+0x4a0>)
 800bdba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d126      	bne.n	800be0e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	69fa      	ldr	r2, [r7, #28]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d106      	bne.n	800bdd8 <tcp_input+0x31c>
 800bdca:	4b65      	ldr	r3, [pc, #404]	; (800bf60 <tcp_input+0x4a4>)
 800bdcc:	f240 120d 	movw	r2, #269	; 0x10d
 800bdd0:	4964      	ldr	r1, [pc, #400]	; (800bf64 <tcp_input+0x4a8>)
 800bdd2:	4865      	ldr	r0, [pc, #404]	; (800bf68 <tcp_input+0x4ac>)
 800bdd4:	f007 f872 	bl	8012ebc <iprintf>
      if (prev != NULL) {
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00a      	beq.n	800bdf4 <tcp_input+0x338>
        prev->next = pcb->next;
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bde6:	4b61      	ldr	r3, [pc, #388]	; (800bf6c <tcp_input+0x4b0>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bdee:	4a5f      	ldr	r2, [pc, #380]	; (800bf6c <tcp_input+0x4b0>)
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	69fa      	ldr	r2, [r7, #28]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d111      	bne.n	800be22 <tcp_input+0x366>
 800bdfe:	4b58      	ldr	r3, [pc, #352]	; (800bf60 <tcp_input+0x4a4>)
 800be00:	f240 1215 	movw	r2, #277	; 0x115
 800be04:	495a      	ldr	r1, [pc, #360]	; (800bf70 <tcp_input+0x4b4>)
 800be06:	4858      	ldr	r0, [pc, #352]	; (800bf68 <tcp_input+0x4ac>)
 800be08:	f007 f858 	bl	8012ebc <iprintf>
      break;
 800be0c:	e009      	b.n	800be22 <tcp_input+0x366>
    }
    prev = pcb;
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	61fb      	str	r3, [r7, #28]
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f47f af5e 	bne.w	800bcdc <tcp_input+0x220>
 800be20:	e000      	b.n	800be24 <tcp_input+0x368>
      break;
 800be22:	bf00      	nop
  }

  if (pcb == NULL) {
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f040 80aa 	bne.w	800bf80 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be2c:	4b51      	ldr	r3, [pc, #324]	; (800bf74 <tcp_input+0x4b8>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	e03f      	b.n	800beb4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	7d1b      	ldrb	r3, [r3, #20]
 800be38:	2b0a      	cmp	r3, #10
 800be3a:	d006      	beq.n	800be4a <tcp_input+0x38e>
 800be3c:	4b48      	ldr	r3, [pc, #288]	; (800bf60 <tcp_input+0x4a4>)
 800be3e:	f240 121f 	movw	r2, #287	; 0x11f
 800be42:	494d      	ldr	r1, [pc, #308]	; (800bf78 <tcp_input+0x4bc>)
 800be44:	4848      	ldr	r0, [pc, #288]	; (800bf68 <tcp_input+0x4ac>)
 800be46:	f007 f839 	bl	8012ebc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	7a1b      	ldrb	r3, [r3, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d009      	beq.n	800be66 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	7a1a      	ldrb	r2, [r3, #8]
 800be56:	4b41      	ldr	r3, [pc, #260]	; (800bf5c <tcp_input+0x4a0>)
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be5e:	3301      	adds	r3, #1
 800be60:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800be62:	429a      	cmp	r2, r3
 800be64:	d122      	bne.n	800beac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	8b1a      	ldrh	r2, [r3, #24]
 800be6a:	4b3b      	ldr	r3, [pc, #236]	; (800bf58 <tcp_input+0x49c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	b29b      	uxth	r3, r3
 800be72:	429a      	cmp	r2, r3
 800be74:	d11b      	bne.n	800beae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	8ada      	ldrh	r2, [r3, #22]
 800be7a:	4b37      	ldr	r3, [pc, #220]	; (800bf58 <tcp_input+0x49c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	885b      	ldrh	r3, [r3, #2]
 800be80:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800be82:	429a      	cmp	r2, r3
 800be84:	d113      	bne.n	800beae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	4b34      	ldr	r3, [pc, #208]	; (800bf5c <tcp_input+0x4a0>)
 800be8c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800be8e:	429a      	cmp	r2, r3
 800be90:	d10d      	bne.n	800beae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	4b31      	ldr	r3, [pc, #196]	; (800bf5c <tcp_input+0x4a0>)
 800be98:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d107      	bne.n	800beae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800be9e:	69f8      	ldr	r0, [r7, #28]
 800bea0:	f000 fb56 	bl	800c550 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7fd ffc5 	bl	8009e34 <pbuf_free>
        return;
 800beaa:	e1fd      	b.n	800c2a8 <tcp_input+0x7ec>
        continue;
 800beac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	61fb      	str	r3, [r7, #28]
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1bc      	bne.n	800be34 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bebe:	4b2f      	ldr	r3, [pc, #188]	; (800bf7c <tcp_input+0x4c0>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	617b      	str	r3, [r7, #20]
 800bec4:	e02a      	b.n	800bf1c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	7a1b      	ldrb	r3, [r3, #8]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00c      	beq.n	800bee8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	7a1a      	ldrb	r2, [r3, #8]
 800bed2:	4b22      	ldr	r3, [pc, #136]	; (800bf5c <tcp_input+0x4a0>)
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800beda:	3301      	adds	r3, #1
 800bedc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bede:	429a      	cmp	r2, r3
 800bee0:	d002      	beq.n	800bee8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	61bb      	str	r3, [r7, #24]
        continue;
 800bee6:	e016      	b.n	800bf16 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	8ada      	ldrh	r2, [r3, #22]
 800beec:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <tcp_input+0x49c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	885b      	ldrh	r3, [r3, #2]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d10c      	bne.n	800bf12 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	4b17      	ldr	r3, [pc, #92]	; (800bf5c <tcp_input+0x4a0>)
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d00f      	beq.n	800bf24 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00d      	beq.n	800bf26 <tcp_input+0x46a>
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	617b      	str	r3, [r7, #20]
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d1d1      	bne.n	800bec6 <tcp_input+0x40a>
 800bf22:	e000      	b.n	800bf26 <tcp_input+0x46a>
            break;
 800bf24:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d029      	beq.n	800bf80 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bf3a:	4b10      	ldr	r3, [pc, #64]	; (800bf7c <tcp_input+0x4c0>)
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bf42:	4a0e      	ldr	r2, [pc, #56]	; (800bf7c <tcp_input+0x4c0>)
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bf48:	6978      	ldr	r0, [r7, #20]
 800bf4a:	f000 fa03 	bl	800c354 <tcp_listen_input>
      }
      pbuf_free(p);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fd ff70 	bl	8009e34 <pbuf_free>
      return;
 800bf54:	e1a8      	b.n	800c2a8 <tcp_input+0x7ec>
 800bf56:	bf00      	nop
 800bf58:	2400bd34 	.word	0x2400bd34
 800bf5c:	24008c0c 	.word	0x24008c0c
 800bf60:	080150ec 	.word	0x080150ec
 800bf64:	08015218 	.word	0x08015218
 800bf68:	08015138 	.word	0x08015138
 800bf6c:	2400bd18 	.word	0x2400bd18
 800bf70:	08015244 	.word	0x08015244
 800bf74:	2400bd1c 	.word	0x2400bd1c
 800bf78:	08015270 	.word	0x08015270
 800bf7c:	2400bd14 	.word	0x2400bd14
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f000 8158 	beq.w	800c238 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bf88:	4b95      	ldr	r3, [pc, #596]	; (800c1e0 <tcp_input+0x724>)
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	891a      	ldrh	r2, [r3, #8]
 800bf92:	4b93      	ldr	r3, [pc, #588]	; (800c1e0 <tcp_input+0x724>)
 800bf94:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bf96:	4a92      	ldr	r2, [pc, #584]	; (800c1e0 <tcp_input+0x724>)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bf9c:	4b91      	ldr	r3, [pc, #580]	; (800c1e4 <tcp_input+0x728>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a8f      	ldr	r2, [pc, #572]	; (800c1e0 <tcp_input+0x724>)
 800bfa2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bfa4:	4b90      	ldr	r3, [pc, #576]	; (800c1e8 <tcp_input+0x72c>)
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bfaa:	4b90      	ldr	r3, [pc, #576]	; (800c1ec <tcp_input+0x730>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bfb0:	4b8f      	ldr	r3, [pc, #572]	; (800c1f0 <tcp_input+0x734>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bfb6:	4b8f      	ldr	r3, [pc, #572]	; (800c1f4 <tcp_input+0x738>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	f003 0308 	and.w	r3, r3, #8
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d006      	beq.n	800bfd0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	7b5b      	ldrb	r3, [r3, #13]
 800bfc6:	f043 0301 	orr.w	r3, r3, #1
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d017      	beq.n	800c008 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bfd8:	69f8      	ldr	r0, [r7, #28]
 800bfda:	f7ff f929 	bl	800b230 <tcp_process_refused_data>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	f113 0f0d 	cmn.w	r3, #13
 800bfe4:	d007      	beq.n	800bff6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00c      	beq.n	800c008 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bfee:	4b82      	ldr	r3, [pc, #520]	; (800c1f8 <tcp_input+0x73c>)
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d008      	beq.n	800c008 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f040 80e3 	bne.w	800c1c6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c000:	69f8      	ldr	r0, [r7, #28]
 800c002:	f003 f9ad 	bl	800f360 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c006:	e0de      	b.n	800c1c6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800c008:	4a7c      	ldr	r2, [pc, #496]	; (800c1fc <tcp_input+0x740>)
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c00e:	69f8      	ldr	r0, [r7, #28]
 800c010:	f000 fb18 	bl	800c644 <tcp_process>
 800c014:	4603      	mov	r3, r0
 800c016:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c018:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c01c:	f113 0f0d 	cmn.w	r3, #13
 800c020:	f000 80d3 	beq.w	800c1ca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800c024:	4b71      	ldr	r3, [pc, #452]	; (800c1ec <tcp_input+0x730>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	f003 0308 	and.w	r3, r3, #8
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d015      	beq.n	800c05c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c036:	2b00      	cmp	r3, #0
 800c038:	d008      	beq.n	800c04c <tcp_input+0x590>
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c040:	69fa      	ldr	r2, [r7, #28]
 800c042:	6912      	ldr	r2, [r2, #16]
 800c044:	f06f 010d 	mvn.w	r1, #13
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c04c:	69f9      	ldr	r1, [r7, #28]
 800c04e:	486c      	ldr	r0, [pc, #432]	; (800c200 <tcp_input+0x744>)
 800c050:	f7ff fbbc 	bl	800b7cc <tcp_pcb_remove>
        tcp_free(pcb);
 800c054:	69f8      	ldr	r0, [r7, #28]
 800c056:	f7fe f9a9 	bl	800a3ac <tcp_free>
 800c05a:	e0da      	b.n	800c212 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c060:	4b63      	ldr	r3, [pc, #396]	; (800c1f0 <tcp_input+0x734>)
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d01d      	beq.n	800c0a4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c068:	4b61      	ldr	r3, [pc, #388]	; (800c1f0 <tcp_input+0x734>)
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00a      	beq.n	800c08e <tcp_input+0x5d2>
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c07e:	69fa      	ldr	r2, [r7, #28]
 800c080:	6910      	ldr	r0, [r2, #16]
 800c082:	89fa      	ldrh	r2, [r7, #14]
 800c084:	69f9      	ldr	r1, [r7, #28]
 800c086:	4798      	blx	r3
 800c088:	4603      	mov	r3, r0
 800c08a:	74fb      	strb	r3, [r7, #19]
 800c08c:	e001      	b.n	800c092 <tcp_input+0x5d6>
 800c08e:	2300      	movs	r3, #0
 800c090:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c092:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c096:	f113 0f0d 	cmn.w	r3, #13
 800c09a:	f000 8098 	beq.w	800c1ce <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c09e:	4b54      	ldr	r3, [pc, #336]	; (800c1f0 <tcp_input+0x734>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c0a4:	69f8      	ldr	r0, [r7, #28]
 800c0a6:	f000 f915 	bl	800c2d4 <tcp_input_delayed_close>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f040 8090 	bne.w	800c1d2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c0b2:	4b4d      	ldr	r3, [pc, #308]	; (800c1e8 <tcp_input+0x72c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d041      	beq.n	800c13e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d006      	beq.n	800c0d0 <tcp_input+0x614>
 800c0c2:	4b50      	ldr	r3, [pc, #320]	; (800c204 <tcp_input+0x748>)
 800c0c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c0c8:	494f      	ldr	r1, [pc, #316]	; (800c208 <tcp_input+0x74c>)
 800c0ca:	4850      	ldr	r0, [pc, #320]	; (800c20c <tcp_input+0x750>)
 800c0cc:	f006 fef6 	bl	8012ebc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c0d0:	69fb      	ldr	r3, [r7, #28]
 800c0d2:	8b5b      	ldrh	r3, [r3, #26]
 800c0d4:	f003 0310 	and.w	r3, r3, #16
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d008      	beq.n	800c0ee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c0dc:	4b42      	ldr	r3, [pc, #264]	; (800c1e8 <tcp_input+0x72c>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fd fea7 	bl	8009e34 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c0e6:	69f8      	ldr	r0, [r7, #28]
 800c0e8:	f7fe fc48 	bl	800a97c <tcp_abort>
            goto aborted;
 800c0ec:	e091      	b.n	800c212 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00c      	beq.n	800c112 <tcp_input+0x656>
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	6918      	ldr	r0, [r3, #16]
 800c102:	4b39      	ldr	r3, [pc, #228]	; (800c1e8 <tcp_input+0x72c>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	2300      	movs	r3, #0
 800c108:	69f9      	ldr	r1, [r7, #28]
 800c10a:	47a0      	blx	r4
 800c10c:	4603      	mov	r3, r0
 800c10e:	74fb      	strb	r3, [r7, #19]
 800c110:	e008      	b.n	800c124 <tcp_input+0x668>
 800c112:	4b35      	ldr	r3, [pc, #212]	; (800c1e8 <tcp_input+0x72c>)
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	2300      	movs	r3, #0
 800c118:	69f9      	ldr	r1, [r7, #28]
 800c11a:	2000      	movs	r0, #0
 800c11c:	f7ff f95e 	bl	800b3dc <tcp_recv_null>
 800c120:	4603      	mov	r3, r0
 800c122:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c128:	f113 0f0d 	cmn.w	r3, #13
 800c12c:	d053      	beq.n	800c1d6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c12e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c136:	4b2c      	ldr	r3, [pc, #176]	; (800c1e8 <tcp_input+0x72c>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c13e:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <tcp_input+0x730>)
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b00      	cmp	r3, #0
 800c148:	d030      	beq.n	800c1ac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d009      	beq.n	800c166 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c156:	7b5a      	ldrb	r2, [r3, #13]
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c15c:	f042 0220 	orr.w	r2, r2, #32
 800c160:	b2d2      	uxtb	r2, r2
 800c162:	735a      	strb	r2, [r3, #13]
 800c164:	e022      	b.n	800c1ac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c16a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c16e:	d005      	beq.n	800c17c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c174:	3301      	adds	r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00b      	beq.n	800c19e <tcp_input+0x6e2>
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	6918      	ldr	r0, [r3, #16]
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	69f9      	ldr	r1, [r7, #28]
 800c196:	47a0      	blx	r4
 800c198:	4603      	mov	r3, r0
 800c19a:	74fb      	strb	r3, [r7, #19]
 800c19c:	e001      	b.n	800c1a2 <tcp_input+0x6e6>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c1a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c1a6:	f113 0f0d 	cmn.w	r3, #13
 800c1aa:	d016      	beq.n	800c1da <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c1ac:	4b13      	ldr	r3, [pc, #76]	; (800c1fc <tcp_input+0x740>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c1b2:	69f8      	ldr	r0, [r7, #28]
 800c1b4:	f000 f88e 	bl	800c2d4 <tcp_input_delayed_close>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d128      	bne.n	800c210 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c1be:	69f8      	ldr	r0, [r7, #28]
 800c1c0:	f002 fac8 	bl	800e754 <tcp_output>
 800c1c4:	e025      	b.n	800c212 <tcp_input+0x756>
        goto aborted;
 800c1c6:	bf00      	nop
 800c1c8:	e023      	b.n	800c212 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c1ca:	bf00      	nop
 800c1cc:	e021      	b.n	800c212 <tcp_input+0x756>
              goto aborted;
 800c1ce:	bf00      	nop
 800c1d0:	e01f      	b.n	800c212 <tcp_input+0x756>
          goto aborted;
 800c1d2:	bf00      	nop
 800c1d4:	e01d      	b.n	800c212 <tcp_input+0x756>
            goto aborted;
 800c1d6:	bf00      	nop
 800c1d8:	e01b      	b.n	800c212 <tcp_input+0x756>
              goto aborted;
 800c1da:	bf00      	nop
 800c1dc:	e019      	b.n	800c212 <tcp_input+0x756>
 800c1de:	bf00      	nop
 800c1e0:	2400bd24 	.word	0x2400bd24
 800c1e4:	2400bd34 	.word	0x2400bd34
 800c1e8:	2400bd54 	.word	0x2400bd54
 800c1ec:	2400bd51 	.word	0x2400bd51
 800c1f0:	2400bd4c 	.word	0x2400bd4c
 800c1f4:	2400bd50 	.word	0x2400bd50
 800c1f8:	2400bd4e 	.word	0x2400bd4e
 800c1fc:	2400bd58 	.word	0x2400bd58
 800c200:	2400bd18 	.word	0x2400bd18
 800c204:	080150ec 	.word	0x080150ec
 800c208:	080152a0 	.word	0x080152a0
 800c20c:	08015138 	.word	0x08015138
          goto aborted;
 800c210:	bf00      	nop
    tcp_input_pcb = NULL;
 800c212:	4b27      	ldr	r3, [pc, #156]	; (800c2b0 <tcp_input+0x7f4>)
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c218:	4b26      	ldr	r3, [pc, #152]	; (800c2b4 <tcp_input+0x7f8>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c21e:	4b26      	ldr	r3, [pc, #152]	; (800c2b8 <tcp_input+0x7fc>)
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d03f      	beq.n	800c2a6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c226:	4b24      	ldr	r3, [pc, #144]	; (800c2b8 <tcp_input+0x7fc>)
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fd fe02 	bl	8009e34 <pbuf_free>
      inseg.p = NULL;
 800c230:	4b21      	ldr	r3, [pc, #132]	; (800c2b8 <tcp_input+0x7fc>)
 800c232:	2200      	movs	r2, #0
 800c234:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c236:	e036      	b.n	800c2a6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c238:	4b20      	ldr	r3, [pc, #128]	; (800c2bc <tcp_input+0x800>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	899b      	ldrh	r3, [r3, #12]
 800c23e:	b29b      	uxth	r3, r3
 800c240:	4618      	mov	r0, r3
 800c242:	f7fc f93d 	bl	80084c0 <lwip_htons>
 800c246:	4603      	mov	r3, r0
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	f003 0304 	and.w	r3, r3, #4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d118      	bne.n	800c284 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c252:	4b1b      	ldr	r3, [pc, #108]	; (800c2c0 <tcp_input+0x804>)
 800c254:	6819      	ldr	r1, [r3, #0]
 800c256:	4b1b      	ldr	r3, [pc, #108]	; (800c2c4 <tcp_input+0x808>)
 800c258:	881b      	ldrh	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	4b1a      	ldr	r3, [pc, #104]	; (800c2c8 <tcp_input+0x80c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c262:	4b16      	ldr	r3, [pc, #88]	; (800c2bc <tcp_input+0x800>)
 800c264:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c266:	885b      	ldrh	r3, [r3, #2]
 800c268:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c26a:	4a14      	ldr	r2, [pc, #80]	; (800c2bc <tcp_input+0x800>)
 800c26c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c26e:	8812      	ldrh	r2, [r2, #0]
 800c270:	b292      	uxth	r2, r2
 800c272:	9202      	str	r2, [sp, #8]
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <tcp_input+0x810>)
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	4b15      	ldr	r3, [pc, #84]	; (800c2d0 <tcp_input+0x814>)
 800c27c:	4602      	mov	r2, r0
 800c27e:	2000      	movs	r0, #0
 800c280:	f003 f81c 	bl	800f2bc <tcp_rst>
    pbuf_free(p);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7fd fdd5 	bl	8009e34 <pbuf_free>
  return;
 800c28a:	e00c      	b.n	800c2a6 <tcp_input+0x7ea>
    goto dropped;
 800c28c:	bf00      	nop
 800c28e:	e006      	b.n	800c29e <tcp_input+0x7e2>
    goto dropped;
 800c290:	bf00      	nop
 800c292:	e004      	b.n	800c29e <tcp_input+0x7e2>
    goto dropped;
 800c294:	bf00      	nop
 800c296:	e002      	b.n	800c29e <tcp_input+0x7e2>
      goto dropped;
 800c298:	bf00      	nop
 800c29a:	e000      	b.n	800c29e <tcp_input+0x7e2>
      goto dropped;
 800c29c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7fd fdc8 	bl	8009e34 <pbuf_free>
 800c2a4:	e000      	b.n	800c2a8 <tcp_input+0x7ec>
  return;
 800c2a6:	bf00      	nop
}
 800c2a8:	3724      	adds	r7, #36	; 0x24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd90      	pop	{r4, r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	2400bd58 	.word	0x2400bd58
 800c2b4:	2400bd54 	.word	0x2400bd54
 800c2b8:	2400bd24 	.word	0x2400bd24
 800c2bc:	2400bd34 	.word	0x2400bd34
 800c2c0:	2400bd48 	.word	0x2400bd48
 800c2c4:	2400bd4e 	.word	0x2400bd4e
 800c2c8:	2400bd44 	.word	0x2400bd44
 800c2cc:	24008c1c 	.word	0x24008c1c
 800c2d0:	24008c20 	.word	0x24008c20

0800c2d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d106      	bne.n	800c2f0 <tcp_input_delayed_close+0x1c>
 800c2e2:	4b17      	ldr	r3, [pc, #92]	; (800c340 <tcp_input_delayed_close+0x6c>)
 800c2e4:	f240 225a 	movw	r2, #602	; 0x25a
 800c2e8:	4916      	ldr	r1, [pc, #88]	; (800c344 <tcp_input_delayed_close+0x70>)
 800c2ea:	4817      	ldr	r0, [pc, #92]	; (800c348 <tcp_input_delayed_close+0x74>)
 800c2ec:	f006 fde6 	bl	8012ebc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c2f0:	4b16      	ldr	r3, [pc, #88]	; (800c34c <tcp_input_delayed_close+0x78>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	f003 0310 	and.w	r3, r3, #16
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d01c      	beq.n	800c336 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	8b5b      	ldrh	r3, [r3, #26]
 800c300:	f003 0310 	and.w	r3, r3, #16
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10d      	bne.n	800c324 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d008      	beq.n	800c324 <tcp_input_delayed_close+0x50>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	6912      	ldr	r2, [r2, #16]
 800c31c:	f06f 010e 	mvn.w	r1, #14
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c324:	6879      	ldr	r1, [r7, #4]
 800c326:	480a      	ldr	r0, [pc, #40]	; (800c350 <tcp_input_delayed_close+0x7c>)
 800c328:	f7ff fa50 	bl	800b7cc <tcp_pcb_remove>
    tcp_free(pcb);
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fe f83d 	bl	800a3ac <tcp_free>
    return 1;
 800c332:	2301      	movs	r3, #1
 800c334:	e000      	b.n	800c338 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	080150ec 	.word	0x080150ec
 800c344:	080152bc 	.word	0x080152bc
 800c348:	08015138 	.word	0x08015138
 800c34c:	2400bd51 	.word	0x2400bd51
 800c350:	2400bd18 	.word	0x2400bd18

0800c354 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c354:	b590      	push	{r4, r7, lr}
 800c356:	b08b      	sub	sp, #44	; 0x2c
 800c358:	af04      	add	r7, sp, #16
 800c35a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c35c:	4b6f      	ldr	r3, [pc, #444]	; (800c51c <tcp_listen_input+0x1c8>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	f003 0304 	and.w	r3, r3, #4
 800c364:	2b00      	cmp	r3, #0
 800c366:	f040 80d2 	bne.w	800c50e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d106      	bne.n	800c37e <tcp_listen_input+0x2a>
 800c370:	4b6b      	ldr	r3, [pc, #428]	; (800c520 <tcp_listen_input+0x1cc>)
 800c372:	f240 2281 	movw	r2, #641	; 0x281
 800c376:	496b      	ldr	r1, [pc, #428]	; (800c524 <tcp_listen_input+0x1d0>)
 800c378:	486b      	ldr	r0, [pc, #428]	; (800c528 <tcp_listen_input+0x1d4>)
 800c37a:	f006 fd9f 	bl	8012ebc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c37e:	4b67      	ldr	r3, [pc, #412]	; (800c51c <tcp_listen_input+0x1c8>)
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	f003 0310 	and.w	r3, r3, #16
 800c386:	2b00      	cmp	r3, #0
 800c388:	d019      	beq.n	800c3be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c38a:	4b68      	ldr	r3, [pc, #416]	; (800c52c <tcp_listen_input+0x1d8>)
 800c38c:	6819      	ldr	r1, [r3, #0]
 800c38e:	4b68      	ldr	r3, [pc, #416]	; (800c530 <tcp_listen_input+0x1dc>)
 800c390:	881b      	ldrh	r3, [r3, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	4b67      	ldr	r3, [pc, #412]	; (800c534 <tcp_listen_input+0x1e0>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c39a:	4b67      	ldr	r3, [pc, #412]	; (800c538 <tcp_listen_input+0x1e4>)
 800c39c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c39e:	885b      	ldrh	r3, [r3, #2]
 800c3a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3a2:	4a65      	ldr	r2, [pc, #404]	; (800c538 <tcp_listen_input+0x1e4>)
 800c3a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3a6:	8812      	ldrh	r2, [r2, #0]
 800c3a8:	b292      	uxth	r2, r2
 800c3aa:	9202      	str	r2, [sp, #8]
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	4b63      	ldr	r3, [pc, #396]	; (800c53c <tcp_listen_input+0x1e8>)
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4b63      	ldr	r3, [pc, #396]	; (800c540 <tcp_listen_input+0x1ec>)
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f002 ff80 	bl	800f2bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c3bc:	e0a9      	b.n	800c512 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c3be:	4b57      	ldr	r3, [pc, #348]	; (800c51c <tcp_listen_input+0x1c8>)
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	f003 0302 	and.w	r3, r3, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 80a3 	beq.w	800c512 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7d5b      	ldrb	r3, [r3, #21]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff f927 	bl	800b624 <tcp_alloc>
 800c3d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d111      	bne.n	800c402 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <tcp_listen_input+0xa8>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	699b      	ldr	r3, [r3, #24]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	6910      	ldr	r0, [r2, #16]
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3f2:	2100      	movs	r1, #0
 800c3f4:	4798      	blx	r3
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	73bb      	strb	r3, [r7, #14]
      return;
 800c3fa:	e08b      	b.n	800c514 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c3fc:	23f0      	movs	r3, #240	; 0xf0
 800c3fe:	73bb      	strb	r3, [r7, #14]
      return;
 800c400:	e088      	b.n	800c514 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c402:	4b50      	ldr	r3, [pc, #320]	; (800c544 <tcp_listen_input+0x1f0>)
 800c404:	695a      	ldr	r2, [r3, #20]
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c40a:	4b4e      	ldr	r3, [pc, #312]	; (800c544 <tcp_listen_input+0x1f0>)
 800c40c:	691a      	ldr	r2, [r3, #16]
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	8ada      	ldrh	r2, [r3, #22]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c41a:	4b47      	ldr	r3, [pc, #284]	; (800c538 <tcp_listen_input+0x1e4>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b29a      	uxth	r2, r3
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2203      	movs	r2, #3
 800c42a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c42c:	4b41      	ldr	r3, [pc, #260]	; (800c534 <tcp_listen_input+0x1e0>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c43e:	6978      	ldr	r0, [r7, #20]
 800c440:	f7ff fa58 	bl	800b8f4 <tcp_next_iss>
 800c444:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c45e:	4b35      	ldr	r3, [pc, #212]	; (800c534 <tcp_listen_input+0x1e0>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	1e5a      	subs	r2, r3, #1
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	7a5b      	ldrb	r3, [r3, #9]
 800c47a:	f003 030c 	and.w	r3, r3, #12
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7a1a      	ldrb	r2, [r3, #8]
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c48c:	4b2e      	ldr	r3, [pc, #184]	; (800c548 <tcp_listen_input+0x1f4>)
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	60da      	str	r2, [r3, #12]
 800c494:	4a2c      	ldr	r2, [pc, #176]	; (800c548 <tcp_listen_input+0x1f4>)
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	6013      	str	r3, [r2, #0]
 800c49a:	f003 f8d1 	bl	800f640 <tcp_timer_needed>
 800c49e:	4b2b      	ldr	r3, [pc, #172]	; (800c54c <tcp_listen_input+0x1f8>)
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c4a4:	6978      	ldr	r0, [r7, #20]
 800c4a6:	f001 fd8f 	bl	800dfc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c4aa:	4b23      	ldr	r3, [pc, #140]	; (800c538 <tcp_listen_input+0x1e4>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	89db      	ldrh	r3, [r3, #14]
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f005 f81b 	bl	8011508 <ip4_route>
 800c4d2:	4601      	mov	r1, r0
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	3304      	adds	r3, #4
 800c4d8:	461a      	mov	r2, r3
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f7ff fa30 	bl	800b940 <tcp_eff_send_mss_netif>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c4e8:	2112      	movs	r1, #18
 800c4ea:	6978      	ldr	r0, [r7, #20]
 800c4ec:	f002 f844 	bl	800e578 <tcp_enqueue_flags>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d004      	beq.n	800c506 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	6978      	ldr	r0, [r7, #20]
 800c500:	f7fe f97e 	bl	800a800 <tcp_abandon>
      return;
 800c504:	e006      	b.n	800c514 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c506:	6978      	ldr	r0, [r7, #20]
 800c508:	f002 f924 	bl	800e754 <tcp_output>
  return;
 800c50c:	e001      	b.n	800c512 <tcp_listen_input+0x1be>
    return;
 800c50e:	bf00      	nop
 800c510:	e000      	b.n	800c514 <tcp_listen_input+0x1c0>
  return;
 800c512:	bf00      	nop
}
 800c514:	371c      	adds	r7, #28
 800c516:	46bd      	mov	sp, r7
 800c518:	bd90      	pop	{r4, r7, pc}
 800c51a:	bf00      	nop
 800c51c:	2400bd50 	.word	0x2400bd50
 800c520:	080150ec 	.word	0x080150ec
 800c524:	080152e4 	.word	0x080152e4
 800c528:	08015138 	.word	0x08015138
 800c52c:	2400bd48 	.word	0x2400bd48
 800c530:	2400bd4e 	.word	0x2400bd4e
 800c534:	2400bd44 	.word	0x2400bd44
 800c538:	2400bd34 	.word	0x2400bd34
 800c53c:	24008c1c 	.word	0x24008c1c
 800c540:	24008c20 	.word	0x24008c20
 800c544:	24008c0c 	.word	0x24008c0c
 800c548:	2400bd18 	.word	0x2400bd18
 800c54c:	2400bd20 	.word	0x2400bd20

0800c550 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af04      	add	r7, sp, #16
 800c556:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c558:	4b2f      	ldr	r3, [pc, #188]	; (800c618 <tcp_timewait_input+0xc8>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	f003 0304 	and.w	r3, r3, #4
 800c560:	2b00      	cmp	r3, #0
 800c562:	d153      	bne.n	800c60c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d106      	bne.n	800c578 <tcp_timewait_input+0x28>
 800c56a:	4b2c      	ldr	r3, [pc, #176]	; (800c61c <tcp_timewait_input+0xcc>)
 800c56c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c570:	492b      	ldr	r1, [pc, #172]	; (800c620 <tcp_timewait_input+0xd0>)
 800c572:	482c      	ldr	r0, [pc, #176]	; (800c624 <tcp_timewait_input+0xd4>)
 800c574:	f006 fca2 	bl	8012ebc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c578:	4b27      	ldr	r3, [pc, #156]	; (800c618 <tcp_timewait_input+0xc8>)
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	f003 0302 	and.w	r3, r3, #2
 800c580:	2b00      	cmp	r3, #0
 800c582:	d02a      	beq.n	800c5da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c584:	4b28      	ldr	r3, [pc, #160]	; (800c628 <tcp_timewait_input+0xd8>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	db2d      	blt.n	800c5ee <tcp_timewait_input+0x9e>
 800c592:	4b25      	ldr	r3, [pc, #148]	; (800c628 <tcp_timewait_input+0xd8>)
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c59a:	6879      	ldr	r1, [r7, #4]
 800c59c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c59e:	440b      	add	r3, r1
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dc23      	bgt.n	800c5ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5a6:	4b21      	ldr	r3, [pc, #132]	; (800c62c <tcp_timewait_input+0xdc>)
 800c5a8:	6819      	ldr	r1, [r3, #0]
 800c5aa:	4b21      	ldr	r3, [pc, #132]	; (800c630 <tcp_timewait_input+0xe0>)
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	4b1d      	ldr	r3, [pc, #116]	; (800c628 <tcp_timewait_input+0xd8>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5b6:	4b1f      	ldr	r3, [pc, #124]	; (800c634 <tcp_timewait_input+0xe4>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5ba:	885b      	ldrh	r3, [r3, #2]
 800c5bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5be:	4a1d      	ldr	r2, [pc, #116]	; (800c634 <tcp_timewait_input+0xe4>)
 800c5c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5c2:	8812      	ldrh	r2, [r2, #0]
 800c5c4:	b292      	uxth	r2, r2
 800c5c6:	9202      	str	r2, [sp, #8]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	4b1b      	ldr	r3, [pc, #108]	; (800c638 <tcp_timewait_input+0xe8>)
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <tcp_timewait_input+0xec>)
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f002 fe72 	bl	800f2bc <tcp_rst>
      return;
 800c5d8:	e01b      	b.n	800c612 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c5da:	4b0f      	ldr	r3, [pc, #60]	; (800c618 <tcp_timewait_input+0xc8>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d003      	beq.n	800c5ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c5e6:	4b16      	ldr	r3, [pc, #88]	; (800c640 <tcp_timewait_input+0xf0>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c5ee:	4b10      	ldr	r3, [pc, #64]	; (800c630 <tcp_timewait_input+0xe0>)
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00c      	beq.n	800c610 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	8b5b      	ldrh	r3, [r3, #26]
 800c5fa:	f043 0302 	orr.w	r3, r3, #2
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f002 f8a5 	bl	800e754 <tcp_output>
  }
  return;
 800c60a:	e001      	b.n	800c610 <tcp_timewait_input+0xc0>
    return;
 800c60c:	bf00      	nop
 800c60e:	e000      	b.n	800c612 <tcp_timewait_input+0xc2>
  return;
 800c610:	bf00      	nop
}
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	2400bd50 	.word	0x2400bd50
 800c61c:	080150ec 	.word	0x080150ec
 800c620:	08015304 	.word	0x08015304
 800c624:	08015138 	.word	0x08015138
 800c628:	2400bd44 	.word	0x2400bd44
 800c62c:	2400bd48 	.word	0x2400bd48
 800c630:	2400bd4e 	.word	0x2400bd4e
 800c634:	2400bd34 	.word	0x2400bd34
 800c638:	24008c1c 	.word	0x24008c1c
 800c63c:	24008c20 	.word	0x24008c20
 800c640:	2400bd0c 	.word	0x2400bd0c

0800c644 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c644:	b590      	push	{r4, r7, lr}
 800c646:	b08d      	sub	sp, #52	; 0x34
 800c648:	af04      	add	r7, sp, #16
 800c64a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c64c:	2300      	movs	r3, #0
 800c64e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <tcp_process+0x24>
 800c65a:	4b9d      	ldr	r3, [pc, #628]	; (800c8d0 <tcp_process+0x28c>)
 800c65c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c660:	499c      	ldr	r1, [pc, #624]	; (800c8d4 <tcp_process+0x290>)
 800c662:	489d      	ldr	r0, [pc, #628]	; (800c8d8 <tcp_process+0x294>)
 800c664:	f006 fc2a 	bl	8012ebc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c668:	4b9c      	ldr	r3, [pc, #624]	; (800c8dc <tcp_process+0x298>)
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	f003 0304 	and.w	r3, r3, #4
 800c670:	2b00      	cmp	r3, #0
 800c672:	d04e      	beq.n	800c712 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	7d1b      	ldrb	r3, [r3, #20]
 800c678:	2b02      	cmp	r3, #2
 800c67a:	d108      	bne.n	800c68e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c680:	4b97      	ldr	r3, [pc, #604]	; (800c8e0 <tcp_process+0x29c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	429a      	cmp	r2, r3
 800c686:	d123      	bne.n	800c6d0 <tcp_process+0x8c>
        acceptable = 1;
 800c688:	2301      	movs	r3, #1
 800c68a:	76fb      	strb	r3, [r7, #27]
 800c68c:	e020      	b.n	800c6d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c692:	4b94      	ldr	r3, [pc, #592]	; (800c8e4 <tcp_process+0x2a0>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d102      	bne.n	800c6a0 <tcp_process+0x5c>
        acceptable = 1;
 800c69a:	2301      	movs	r3, #1
 800c69c:	76fb      	strb	r3, [r7, #27]
 800c69e:	e017      	b.n	800c6d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c6a0:	4b90      	ldr	r3, [pc, #576]	; (800c8e4 <tcp_process+0x2a0>)
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	db10      	blt.n	800c6d0 <tcp_process+0x8c>
 800c6ae:	4b8d      	ldr	r3, [pc, #564]	; (800c8e4 <tcp_process+0x2a0>)
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	6879      	ldr	r1, [r7, #4]
 800c6b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c6ba:	440b      	add	r3, r1
 800c6bc:	1ad3      	subs	r3, r2, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	dc06      	bgt.n	800c6d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	8b5b      	ldrh	r3, [r3, #26]
 800c6c6:	f043 0302 	orr.w	r3, r3, #2
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c6d0:	7efb      	ldrb	r3, [r7, #27]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01b      	beq.n	800c70e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7d1b      	ldrb	r3, [r3, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <tcp_process+0xa8>
 800c6de:	4b7c      	ldr	r3, [pc, #496]	; (800c8d0 <tcp_process+0x28c>)
 800c6e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c6e4:	4980      	ldr	r1, [pc, #512]	; (800c8e8 <tcp_process+0x2a4>)
 800c6e6:	487c      	ldr	r0, [pc, #496]	; (800c8d8 <tcp_process+0x294>)
 800c6e8:	f006 fbe8 	bl	8012ebc <iprintf>
      recv_flags |= TF_RESET;
 800c6ec:	4b7f      	ldr	r3, [pc, #508]	; (800c8ec <tcp_process+0x2a8>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f043 0308 	orr.w	r3, r3, #8
 800c6f4:	b2da      	uxtb	r2, r3
 800c6f6:	4b7d      	ldr	r3, [pc, #500]	; (800c8ec <tcp_process+0x2a8>)
 800c6f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	8b5b      	ldrh	r3, [r3, #26]
 800c6fe:	f023 0301 	bic.w	r3, r3, #1
 800c702:	b29a      	uxth	r2, r3
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c708:	f06f 030d 	mvn.w	r3, #13
 800c70c:	e37a      	b.n	800ce04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	e378      	b.n	800ce04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c712:	4b72      	ldr	r3, [pc, #456]	; (800c8dc <tcp_process+0x298>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	f003 0302 	and.w	r3, r3, #2
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d010      	beq.n	800c740 <tcp_process+0xfc>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	7d1b      	ldrb	r3, [r3, #20]
 800c722:	2b02      	cmp	r3, #2
 800c724:	d00c      	beq.n	800c740 <tcp_process+0xfc>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	7d1b      	ldrb	r3, [r3, #20]
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d008      	beq.n	800c740 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	8b5b      	ldrh	r3, [r3, #26]
 800c732:	f043 0302 	orr.w	r3, r3, #2
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	e361      	b.n	800ce04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	8b5b      	ldrh	r3, [r3, #26]
 800c744:	f003 0310 	and.w	r3, r3, #16
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d103      	bne.n	800c754 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c74c:	4b68      	ldr	r3, [pc, #416]	; (800c8f0 <tcp_process+0x2ac>)
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 fc2f 	bl	800dfc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	3b02      	subs	r3, #2
 800c770:	2b07      	cmp	r3, #7
 800c772:	f200 8337 	bhi.w	800cde4 <tcp_process+0x7a0>
 800c776:	a201      	add	r2, pc, #4	; (adr r2, 800c77c <tcp_process+0x138>)
 800c778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77c:	0800c79d 	.word	0x0800c79d
 800c780:	0800c9cd 	.word	0x0800c9cd
 800c784:	0800cb45 	.word	0x0800cb45
 800c788:	0800cb6f 	.word	0x0800cb6f
 800c78c:	0800cc93 	.word	0x0800cc93
 800c790:	0800cb45 	.word	0x0800cb45
 800c794:	0800cd1f 	.word	0x0800cd1f
 800c798:	0800cdaf 	.word	0x0800cdaf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c79c:	4b4f      	ldr	r3, [pc, #316]	; (800c8dc <tcp_process+0x298>)
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	f003 0310 	and.w	r3, r3, #16
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 80e4 	beq.w	800c972 <tcp_process+0x32e>
 800c7aa:	4b4c      	ldr	r3, [pc, #304]	; (800c8dc <tcp_process+0x298>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f000 80dd 	beq.w	800c972 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	4b48      	ldr	r3, [pc, #288]	; (800c8e0 <tcp_process+0x29c>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	f040 80d5 	bne.w	800c972 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c7c8:	4b46      	ldr	r3, [pc, #280]	; (800c8e4 <tcp_process+0x2a0>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	1c5a      	adds	r2, r3, #1
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c7da:	4b41      	ldr	r3, [pc, #260]	; (800c8e0 <tcp_process+0x29c>)
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c7e2:	4b44      	ldr	r3, [pc, #272]	; (800c8f4 <tcp_process+0x2b0>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	89db      	ldrh	r3, [r3, #14]
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c7fc:	4b39      	ldr	r3, [pc, #228]	; (800c8e4 <tcp_process+0x2a0>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	1e5a      	subs	r2, r3, #1
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2204      	movs	r2, #4
 800c80a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3304      	adds	r3, #4
 800c814:	4618      	mov	r0, r3
 800c816:	f004 fe77 	bl	8011508 <ip4_route>
 800c81a:	4601      	mov	r1, r0
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	3304      	adds	r3, #4
 800c820:	461a      	mov	r2, r3
 800c822:	4620      	mov	r0, r4
 800c824:	f7ff f88c 	bl	800b940 <tcp_eff_send_mss_netif>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c834:	009a      	lsls	r2, r3, #2
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c840:	428b      	cmp	r3, r1
 800c842:	bf38      	it	cc
 800c844:	460b      	movcc	r3, r1
 800c846:	429a      	cmp	r2, r3
 800c848:	d204      	bcs.n	800c854 <tcp_process+0x210>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	b29b      	uxth	r3, r3
 800c852:	e00d      	b.n	800c870 <tcp_process+0x22c>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c85e:	4293      	cmp	r3, r2
 800c860:	d904      	bls.n	800c86c <tcp_process+0x228>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	b29b      	uxth	r3, r3
 800c86a:	e001      	b.n	800c870 <tcp_process+0x22c>
 800c86c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <tcp_process+0x24a>
 800c880:	4b13      	ldr	r3, [pc, #76]	; (800c8d0 <tcp_process+0x28c>)
 800c882:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c886:	491c      	ldr	r1, [pc, #112]	; (800c8f8 <tcp_process+0x2b4>)
 800c888:	4813      	ldr	r0, [pc, #76]	; (800c8d8 <tcp_process+0x294>)
 800c88a:	f006 fb17 	bl	8012ebc <iprintf>
        --pcb->snd_queuelen;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c894:	3b01      	subs	r3, #1
 800c896:	b29a      	uxth	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d12a      	bne.n	800c900 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d106      	bne.n	800c8c4 <tcp_process+0x280>
 800c8b6:	4b06      	ldr	r3, [pc, #24]	; (800c8d0 <tcp_process+0x28c>)
 800c8b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c8bc:	490f      	ldr	r1, [pc, #60]	; (800c8fc <tcp_process+0x2b8>)
 800c8be:	4806      	ldr	r0, [pc, #24]	; (800c8d8 <tcp_process+0x294>)
 800c8c0:	f006 fafc 	bl	8012ebc <iprintf>
          pcb->unsent = rseg->next;
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	66da      	str	r2, [r3, #108]	; 0x6c
 800c8cc:	e01c      	b.n	800c908 <tcp_process+0x2c4>
 800c8ce:	bf00      	nop
 800c8d0:	080150ec 	.word	0x080150ec
 800c8d4:	08015324 	.word	0x08015324
 800c8d8:	08015138 	.word	0x08015138
 800c8dc:	2400bd50 	.word	0x2400bd50
 800c8e0:	2400bd48 	.word	0x2400bd48
 800c8e4:	2400bd44 	.word	0x2400bd44
 800c8e8:	08015340 	.word	0x08015340
 800c8ec:	2400bd51 	.word	0x2400bd51
 800c8f0:	2400bd0c 	.word	0x2400bd0c
 800c8f4:	2400bd34 	.word	0x2400bd34
 800c8f8:	08015360 	.word	0x08015360
 800c8fc:	08015378 	.word	0x08015378
        } else {
          pcb->unacked = rseg->next;
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c908:	69f8      	ldr	r0, [r7, #28]
 800c90a:	f7fe fd22 	bl	800b352 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c912:	2b00      	cmp	r3, #0
 800c914:	d104      	bne.n	800c920 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c91c:	861a      	strh	r2, [r3, #48]	; 0x30
 800c91e:	e006      	b.n	800c92e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00a      	beq.n	800c94e <tcp_process+0x30a>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6910      	ldr	r0, [r2, #16]
 800c942:	2200      	movs	r2, #0
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	4798      	blx	r3
 800c948:	4603      	mov	r3, r0
 800c94a:	76bb      	strb	r3, [r7, #26]
 800c94c:	e001      	b.n	800c952 <tcp_process+0x30e>
 800c94e:	2300      	movs	r3, #0
 800c950:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c952:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c956:	f113 0f0d 	cmn.w	r3, #13
 800c95a:	d102      	bne.n	800c962 <tcp_process+0x31e>
          return ERR_ABRT;
 800c95c:	f06f 030c 	mvn.w	r3, #12
 800c960:	e250      	b.n	800ce04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	8b5b      	ldrh	r3, [r3, #26]
 800c966:	f043 0302 	orr.w	r3, r3, #2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c970:	e23a      	b.n	800cde8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c972:	4b98      	ldr	r3, [pc, #608]	; (800cbd4 <tcp_process+0x590>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	f003 0310 	and.w	r3, r3, #16
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f000 8234 	beq.w	800cde8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c980:	4b95      	ldr	r3, [pc, #596]	; (800cbd8 <tcp_process+0x594>)
 800c982:	6819      	ldr	r1, [r3, #0]
 800c984:	4b95      	ldr	r3, [pc, #596]	; (800cbdc <tcp_process+0x598>)
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	4b95      	ldr	r3, [pc, #596]	; (800cbe0 <tcp_process+0x59c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c990:	4b94      	ldr	r3, [pc, #592]	; (800cbe4 <tcp_process+0x5a0>)
 800c992:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c998:	4a92      	ldr	r2, [pc, #584]	; (800cbe4 <tcp_process+0x5a0>)
 800c99a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c99c:	8812      	ldrh	r2, [r2, #0]
 800c99e:	b292      	uxth	r2, r2
 800c9a0:	9202      	str	r2, [sp, #8]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	4b90      	ldr	r3, [pc, #576]	; (800cbe8 <tcp_process+0x5a4>)
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	4b90      	ldr	r3, [pc, #576]	; (800cbec <tcp_process+0x5a8>)
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f002 fc85 	bl	800f2bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9b8:	2b05      	cmp	r3, #5
 800c9ba:	f200 8215 	bhi.w	800cde8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f002 fa4f 	bl	800ee68 <tcp_rexmit_rto>
      break;
 800c9ca:	e20d      	b.n	800cde8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c9cc:	4b81      	ldr	r3, [pc, #516]	; (800cbd4 <tcp_process+0x590>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	f003 0310 	and.w	r3, r3, #16
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f000 80a1 	beq.w	800cb1c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9da:	4b7f      	ldr	r3, [pc, #508]	; (800cbd8 <tcp_process+0x594>)
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	3b01      	subs	r3, #1
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	db7e      	blt.n	800cae8 <tcp_process+0x4a4>
 800c9ea:	4b7b      	ldr	r3, [pc, #492]	; (800cbd8 <tcp_process+0x594>)
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	dc77      	bgt.n	800cae8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2204      	movs	r2, #4
 800c9fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ca06:	23fa      	movs	r3, #250	; 0xfa
 800ca08:	76bb      	strb	r3, [r7, #26]
 800ca0a:	e01d      	b.n	800ca48 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca10:	699b      	ldr	r3, [r3, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d106      	bne.n	800ca24 <tcp_process+0x3e0>
 800ca16:	4b76      	ldr	r3, [pc, #472]	; (800cbf0 <tcp_process+0x5ac>)
 800ca18:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ca1c:	4975      	ldr	r1, [pc, #468]	; (800cbf4 <tcp_process+0x5b0>)
 800ca1e:	4876      	ldr	r0, [pc, #472]	; (800cbf8 <tcp_process+0x5b4>)
 800ca20:	f006 fa4c 	bl	8012ebc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00a      	beq.n	800ca44 <tcp_process+0x400>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	6910      	ldr	r0, [r2, #16]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	6879      	ldr	r1, [r7, #4]
 800ca3c:	4798      	blx	r3
 800ca3e:	4603      	mov	r3, r0
 800ca40:	76bb      	strb	r3, [r7, #26]
 800ca42:	e001      	b.n	800ca48 <tcp_process+0x404>
 800ca44:	23f0      	movs	r3, #240	; 0xf0
 800ca46:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ca48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00a      	beq.n	800ca66 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ca50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ca54:	f113 0f0d 	cmn.w	r3, #13
 800ca58:	d002      	beq.n	800ca60 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7fd ff8e 	bl	800a97c <tcp_abort>
            }
            return ERR_ABRT;
 800ca60:	f06f 030c 	mvn.w	r3, #12
 800ca64:	e1ce      	b.n	800ce04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fae0 	bl	800d02c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ca6c:	4b63      	ldr	r3, [pc, #396]	; (800cbfc <tcp_process+0x5b8>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <tcp_process+0x43c>
            recv_acked--;
 800ca74:	4b61      	ldr	r3, [pc, #388]	; (800cbfc <tcp_process+0x5b8>)
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	4b5f      	ldr	r3, [pc, #380]	; (800cbfc <tcp_process+0x5b8>)
 800ca7e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca84:	009a      	lsls	r2, r3, #2
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	f241 111c 	movw	r1, #4380	; 0x111c
 800ca90:	428b      	cmp	r3, r1
 800ca92:	bf38      	it	cc
 800ca94:	460b      	movcc	r3, r1
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d204      	bcs.n	800caa4 <tcp_process+0x460>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	e00d      	b.n	800cac0 <tcp_process+0x47c>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	f241 121c 	movw	r2, #4380	; 0x111c
 800caae:	4293      	cmp	r3, r2
 800cab0:	d904      	bls.n	800cabc <tcp_process+0x478>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	b29b      	uxth	r3, r3
 800caba:	e001      	b.n	800cac0 <tcp_process+0x47c>
 800cabc:	f241 131c 	movw	r3, #4380	; 0x111c
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800cac6:	4b4e      	ldr	r3, [pc, #312]	; (800cc00 <tcp_process+0x5bc>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	f003 0320 	and.w	r3, r3, #32
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d037      	beq.n	800cb42 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	8b5b      	ldrh	r3, [r3, #26]
 800cad6:	f043 0302 	orr.w	r3, r3, #2
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2207      	movs	r2, #7
 800cae4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800cae6:	e02c      	b.n	800cb42 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cae8:	4b3b      	ldr	r3, [pc, #236]	; (800cbd8 <tcp_process+0x594>)
 800caea:	6819      	ldr	r1, [r3, #0]
 800caec:	4b3b      	ldr	r3, [pc, #236]	; (800cbdc <tcp_process+0x598>)
 800caee:	881b      	ldrh	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b3b      	ldr	r3, [pc, #236]	; (800cbe0 <tcp_process+0x59c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800caf8:	4b3a      	ldr	r3, [pc, #232]	; (800cbe4 <tcp_process+0x5a0>)
 800cafa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cafc:	885b      	ldrh	r3, [r3, #2]
 800cafe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cb00:	4a38      	ldr	r2, [pc, #224]	; (800cbe4 <tcp_process+0x5a0>)
 800cb02:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb04:	8812      	ldrh	r2, [r2, #0]
 800cb06:	b292      	uxth	r2, r2
 800cb08:	9202      	str	r2, [sp, #8]
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	4b36      	ldr	r3, [pc, #216]	; (800cbe8 <tcp_process+0x5a4>)
 800cb0e:	9300      	str	r3, [sp, #0]
 800cb10:	4b36      	ldr	r3, [pc, #216]	; (800cbec <tcp_process+0x5a8>)
 800cb12:	4602      	mov	r2, r0
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f002 fbd1 	bl	800f2bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800cb1a:	e167      	b.n	800cdec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cb1c:	4b2d      	ldr	r3, [pc, #180]	; (800cbd4 <tcp_process+0x590>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 0302 	and.w	r3, r3, #2
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f000 8161 	beq.w	800cdec <tcp_process+0x7a8>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2e:	1e5a      	subs	r2, r3, #1
 800cb30:	4b2b      	ldr	r3, [pc, #172]	; (800cbe0 <tcp_process+0x59c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	f040 8159 	bne.w	800cdec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f002 f9b6 	bl	800eeac <tcp_rexmit>
      break;
 800cb40:	e154      	b.n	800cdec <tcp_process+0x7a8>
 800cb42:	e153      	b.n	800cdec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fa71 	bl	800d02c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cb4a:	4b2d      	ldr	r3, [pc, #180]	; (800cc00 <tcp_process+0x5bc>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	f003 0320 	and.w	r3, r3, #32
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 814c 	beq.w	800cdf0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	8b5b      	ldrh	r3, [r3, #26]
 800cb5c:	f043 0302 	orr.w	r3, r3, #2
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2207      	movs	r2, #7
 800cb6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb6c:	e140      	b.n	800cdf0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fa5c 	bl	800d02c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cb74:	4b22      	ldr	r3, [pc, #136]	; (800cc00 <tcp_process+0x5bc>)
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	f003 0320 	and.w	r3, r3, #32
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d071      	beq.n	800cc64 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb80:	4b14      	ldr	r3, [pc, #80]	; (800cbd4 <tcp_process+0x590>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	f003 0310 	and.w	r3, r3, #16
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d060      	beq.n	800cc4e <tcp_process+0x60a>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb90:	4b11      	ldr	r3, [pc, #68]	; (800cbd8 <tcp_process+0x594>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d15a      	bne.n	800cc4e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d156      	bne.n	800cc4e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	8b5b      	ldrh	r3, [r3, #26]
 800cba4:	f043 0302 	orr.w	r3, r3, #2
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7fe fdbc 	bl	800b72c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cbb4:	4b13      	ldr	r3, [pc, #76]	; (800cc04 <tcp_process+0x5c0>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	687a      	ldr	r2, [r7, #4]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d105      	bne.n	800cbca <tcp_process+0x586>
 800cbbe:	4b11      	ldr	r3, [pc, #68]	; (800cc04 <tcp_process+0x5c0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	4a0f      	ldr	r2, [pc, #60]	; (800cc04 <tcp_process+0x5c0>)
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	e02e      	b.n	800cc28 <tcp_process+0x5e4>
 800cbca:	4b0e      	ldr	r3, [pc, #56]	; (800cc04 <tcp_process+0x5c0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	e027      	b.n	800cc22 <tcp_process+0x5de>
 800cbd2:	bf00      	nop
 800cbd4:	2400bd50 	.word	0x2400bd50
 800cbd8:	2400bd48 	.word	0x2400bd48
 800cbdc:	2400bd4e 	.word	0x2400bd4e
 800cbe0:	2400bd44 	.word	0x2400bd44
 800cbe4:	2400bd34 	.word	0x2400bd34
 800cbe8:	24008c1c 	.word	0x24008c1c
 800cbec:	24008c20 	.word	0x24008c20
 800cbf0:	080150ec 	.word	0x080150ec
 800cbf4:	0801538c 	.word	0x0801538c
 800cbf8:	08015138 	.word	0x08015138
 800cbfc:	2400bd4c 	.word	0x2400bd4c
 800cc00:	2400bd51 	.word	0x2400bd51
 800cc04:	2400bd18 	.word	0x2400bd18
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d104      	bne.n	800cc1c <tcp_process+0x5d8>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68da      	ldr	r2, [r3, #12]
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	60da      	str	r2, [r3, #12]
 800cc1a:	e005      	b.n	800cc28 <tcp_process+0x5e4>
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d1ef      	bne.n	800cc08 <tcp_process+0x5c4>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	60da      	str	r2, [r3, #12]
 800cc2e:	4b77      	ldr	r3, [pc, #476]	; (800ce0c <tcp_process+0x7c8>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	220a      	movs	r2, #10
 800cc38:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cc3a:	4b75      	ldr	r3, [pc, #468]	; (800ce10 <tcp_process+0x7cc>)
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	60da      	str	r2, [r3, #12]
 800cc42:	4a73      	ldr	r2, [pc, #460]	; (800ce10 <tcp_process+0x7cc>)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	f002 fcfa 	bl	800f640 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cc4c:	e0d2      	b.n	800cdf4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8b5b      	ldrh	r3, [r3, #26]
 800cc52:	f043 0302 	orr.w	r3, r3, #2
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2208      	movs	r2, #8
 800cc60:	751a      	strb	r2, [r3, #20]
      break;
 800cc62:	e0c7      	b.n	800cdf4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cc64:	4b6b      	ldr	r3, [pc, #428]	; (800ce14 <tcp_process+0x7d0>)
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	f003 0310 	and.w	r3, r3, #16
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f000 80c1 	beq.w	800cdf4 <tcp_process+0x7b0>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc76:	4b68      	ldr	r3, [pc, #416]	; (800ce18 <tcp_process+0x7d4>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	f040 80ba 	bne.w	800cdf4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f040 80b5 	bne.w	800cdf4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2206      	movs	r2, #6
 800cc8e:	751a      	strb	r2, [r3, #20]
      break;
 800cc90:	e0b0      	b.n	800cdf4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 f9ca 	bl	800d02c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cc98:	4b60      	ldr	r3, [pc, #384]	; (800ce1c <tcp_process+0x7d8>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	f003 0320 	and.w	r3, r3, #32
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 80a9 	beq.w	800cdf8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	8b5b      	ldrh	r3, [r3, #26]
 800ccaa:	f043 0302 	orr.w	r3, r3, #2
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7fe fd39 	bl	800b72c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ccba:	4b59      	ldr	r3, [pc, #356]	; (800ce20 <tcp_process+0x7dc>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d105      	bne.n	800ccd0 <tcp_process+0x68c>
 800ccc4:	4b56      	ldr	r3, [pc, #344]	; (800ce20 <tcp_process+0x7dc>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	4a55      	ldr	r2, [pc, #340]	; (800ce20 <tcp_process+0x7dc>)
 800cccc:	6013      	str	r3, [r2, #0]
 800ccce:	e013      	b.n	800ccf8 <tcp_process+0x6b4>
 800ccd0:	4b53      	ldr	r3, [pc, #332]	; (800ce20 <tcp_process+0x7dc>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	613b      	str	r3, [r7, #16]
 800ccd6:	e00c      	b.n	800ccf2 <tcp_process+0x6ae>
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d104      	bne.n	800ccec <tcp_process+0x6a8>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68da      	ldr	r2, [r3, #12]
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	60da      	str	r2, [r3, #12]
 800ccea:	e005      	b.n	800ccf8 <tcp_process+0x6b4>
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	613b      	str	r3, [r7, #16]
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d1ef      	bne.n	800ccd8 <tcp_process+0x694>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	60da      	str	r2, [r3, #12]
 800ccfe:	4b43      	ldr	r3, [pc, #268]	; (800ce0c <tcp_process+0x7c8>)
 800cd00:	2201      	movs	r2, #1
 800cd02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	220a      	movs	r2, #10
 800cd08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cd0a:	4b41      	ldr	r3, [pc, #260]	; (800ce10 <tcp_process+0x7cc>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	60da      	str	r2, [r3, #12]
 800cd12:	4a3f      	ldr	r2, [pc, #252]	; (800ce10 <tcp_process+0x7cc>)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6013      	str	r3, [r2, #0]
 800cd18:	f002 fc92 	bl	800f640 <tcp_timer_needed>
      }
      break;
 800cd1c:	e06c      	b.n	800cdf8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f984 	bl	800d02c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cd24:	4b3b      	ldr	r3, [pc, #236]	; (800ce14 <tcp_process+0x7d0>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	f003 0310 	and.w	r3, r3, #16
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d065      	beq.n	800cdfc <tcp_process+0x7b8>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd34:	4b38      	ldr	r3, [pc, #224]	; (800ce18 <tcp_process+0x7d4>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d15f      	bne.n	800cdfc <tcp_process+0x7b8>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d15b      	bne.n	800cdfc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f7fe fcf1 	bl	800b72c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cd4a:	4b35      	ldr	r3, [pc, #212]	; (800ce20 <tcp_process+0x7dc>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d105      	bne.n	800cd60 <tcp_process+0x71c>
 800cd54:	4b32      	ldr	r3, [pc, #200]	; (800ce20 <tcp_process+0x7dc>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	4a31      	ldr	r2, [pc, #196]	; (800ce20 <tcp_process+0x7dc>)
 800cd5c:	6013      	str	r3, [r2, #0]
 800cd5e:	e013      	b.n	800cd88 <tcp_process+0x744>
 800cd60:	4b2f      	ldr	r3, [pc, #188]	; (800ce20 <tcp_process+0x7dc>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e00c      	b.n	800cd82 <tcp_process+0x73e>
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d104      	bne.n	800cd7c <tcp_process+0x738>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68da      	ldr	r2, [r3, #12]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	60da      	str	r2, [r3, #12]
 800cd7a:	e005      	b.n	800cd88 <tcp_process+0x744>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	60fb      	str	r3, [r7, #12]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1ef      	bne.n	800cd68 <tcp_process+0x724>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	60da      	str	r2, [r3, #12]
 800cd8e:	4b1f      	ldr	r3, [pc, #124]	; (800ce0c <tcp_process+0x7c8>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	220a      	movs	r2, #10
 800cd98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cd9a:	4b1d      	ldr	r3, [pc, #116]	; (800ce10 <tcp_process+0x7cc>)
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	60da      	str	r2, [r3, #12]
 800cda2:	4a1b      	ldr	r2, [pc, #108]	; (800ce10 <tcp_process+0x7cc>)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6013      	str	r3, [r2, #0]
 800cda8:	f002 fc4a 	bl	800f640 <tcp_timer_needed>
      }
      break;
 800cdac:	e026      	b.n	800cdfc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f93c 	bl	800d02c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cdb4:	4b17      	ldr	r3, [pc, #92]	; (800ce14 <tcp_process+0x7d0>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	f003 0310 	and.w	r3, r3, #16
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01f      	beq.n	800ce00 <tcp_process+0x7bc>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cdc4:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <tcp_process+0x7d4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d119      	bne.n	800ce00 <tcp_process+0x7bc>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d115      	bne.n	800ce00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cdd4:	4b11      	ldr	r3, [pc, #68]	; (800ce1c <tcp_process+0x7d8>)
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	f043 0310 	orr.w	r3, r3, #16
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	4b0f      	ldr	r3, [pc, #60]	; (800ce1c <tcp_process+0x7d8>)
 800cde0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cde2:	e00d      	b.n	800ce00 <tcp_process+0x7bc>
    default:
      break;
 800cde4:	bf00      	nop
 800cde6:	e00c      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800cde8:	bf00      	nop
 800cdea:	e00a      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800cdec:	bf00      	nop
 800cdee:	e008      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800cdf0:	bf00      	nop
 800cdf2:	e006      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800cdf4:	bf00      	nop
 800cdf6:	e004      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800cdf8:	bf00      	nop
 800cdfa:	e002      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800cdfc:	bf00      	nop
 800cdfe:	e000      	b.n	800ce02 <tcp_process+0x7be>
      break;
 800ce00:	bf00      	nop
  }
  return ERR_OK;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3724      	adds	r7, #36	; 0x24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd90      	pop	{r4, r7, pc}
 800ce0c:	2400bd20 	.word	0x2400bd20
 800ce10:	2400bd1c 	.word	0x2400bd1c
 800ce14:	2400bd50 	.word	0x2400bd50
 800ce18:	2400bd48 	.word	0x2400bd48
 800ce1c:	2400bd51 	.word	0x2400bd51
 800ce20:	2400bd18 	.word	0x2400bd18

0800ce24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d106      	bne.n	800ce42 <tcp_oos_insert_segment+0x1e>
 800ce34:	4b3b      	ldr	r3, [pc, #236]	; (800cf24 <tcp_oos_insert_segment+0x100>)
 800ce36:	f240 421f 	movw	r2, #1055	; 0x41f
 800ce3a:	493b      	ldr	r1, [pc, #236]	; (800cf28 <tcp_oos_insert_segment+0x104>)
 800ce3c:	483b      	ldr	r0, [pc, #236]	; (800cf2c <tcp_oos_insert_segment+0x108>)
 800ce3e:	f006 f83d 	bl	8012ebc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	899b      	ldrh	r3, [r3, #12]
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f7fb fb38 	bl	80084c0 <lwip_htons>
 800ce50:	4603      	mov	r3, r0
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d028      	beq.n	800ceae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ce5c:	6838      	ldr	r0, [r7, #0]
 800ce5e:	f7fe fa63 	bl	800b328 <tcp_segs_free>
    next = NULL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	603b      	str	r3, [r7, #0]
 800ce66:	e056      	b.n	800cf16 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	899b      	ldrh	r3, [r3, #12]
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7fb fb25 	bl	80084c0 <lwip_htons>
 800ce76:	4603      	mov	r3, r0
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00d      	beq.n	800ce9e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	899b      	ldrh	r3, [r3, #12]
 800ce88:	b29c      	uxth	r4, r3
 800ce8a:	2001      	movs	r0, #1
 800ce8c:	f7fb fb18 	bl	80084c0 <lwip_htons>
 800ce90:	4603      	mov	r3, r0
 800ce92:	461a      	mov	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	4322      	orrs	r2, r4
 800ce9a:	b292      	uxth	r2, r2
 800ce9c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f7fe fa52 	bl	800b352 <tcp_seg_free>
    while (next &&
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00e      	beq.n	800ced2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	891b      	ldrh	r3, [r3, #8]
 800ceb8:	461a      	mov	r2, r3
 800ceba:	4b1d      	ldr	r3, [pc, #116]	; (800cf30 <tcp_oos_insert_segment+0x10c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	441a      	add	r2, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	8909      	ldrh	r1, [r1, #8]
 800ceca:	440b      	add	r3, r1
 800cecc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cece:	2b00      	cmp	r3, #0
 800ced0:	daca      	bge.n	800ce68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d01e      	beq.n	800cf16 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	891b      	ldrh	r3, [r3, #8]
 800cedc:	461a      	mov	r2, r3
 800cede:	4b14      	ldr	r3, [pc, #80]	; (800cf30 <tcp_oos_insert_segment+0x10c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	441a      	add	r2, r3
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	dd12      	ble.n	800cf16 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <tcp_oos_insert_segment+0x10c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685a      	ldr	r2, [r3, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	891b      	ldrh	r3, [r3, #8]
 800cf0e:	4619      	mov	r1, r3
 800cf10:	4610      	mov	r0, r2
 800cf12:	f7fc fe09 	bl	8009b28 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	601a      	str	r2, [r3, #0]
}
 800cf1c:	bf00      	nop
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd90      	pop	{r4, r7, pc}
 800cf24:	080150ec 	.word	0x080150ec
 800cf28:	080153ac 	.word	0x080153ac
 800cf2c:	08015138 	.word	0x08015138
 800cf30:	2400bd44 	.word	0x2400bd44

0800cf34 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cf34:	b5b0      	push	{r4, r5, r7, lr}
 800cf36:	b086      	sub	sp, #24
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	60f8      	str	r0, [r7, #12]
 800cf3c:	60b9      	str	r1, [r7, #8]
 800cf3e:	607a      	str	r2, [r7, #4]
 800cf40:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cf42:	e03e      	b.n	800cfc2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fc fffc 	bl	8009f50 <pbuf_clen>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cf62:	8a7a      	ldrh	r2, [r7, #18]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d906      	bls.n	800cf76 <tcp_free_acked_segments+0x42>
 800cf68:	4b2a      	ldr	r3, [pc, #168]	; (800d014 <tcp_free_acked_segments+0xe0>)
 800cf6a:	f240 4257 	movw	r2, #1111	; 0x457
 800cf6e:	492a      	ldr	r1, [pc, #168]	; (800d018 <tcp_free_acked_segments+0xe4>)
 800cf70:	482a      	ldr	r0, [pc, #168]	; (800d01c <tcp_free_acked_segments+0xe8>)
 800cf72:	f005 ffa3 	bl	8012ebc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cf7c:	8a7b      	ldrh	r3, [r7, #18]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	891a      	ldrh	r2, [r3, #8]
 800cf8c:	4b24      	ldr	r3, [pc, #144]	; (800d020 <tcp_free_acked_segments+0xec>)
 800cf8e:	881b      	ldrh	r3, [r3, #0]
 800cf90:	4413      	add	r3, r2
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	4b22      	ldr	r3, [pc, #136]	; (800d020 <tcp_free_acked_segments+0xec>)
 800cf96:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cf98:	6978      	ldr	r0, [r7, #20]
 800cf9a:	f7fe f9da 	bl	800b352 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00c      	beq.n	800cfc2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d109      	bne.n	800cfc2 <tcp_free_acked_segments+0x8e>
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d106      	bne.n	800cfc2 <tcp_free_acked_segments+0x8e>
 800cfb4:	4b17      	ldr	r3, [pc, #92]	; (800d014 <tcp_free_acked_segments+0xe0>)
 800cfb6:	f240 4261 	movw	r2, #1121	; 0x461
 800cfba:	491a      	ldr	r1, [pc, #104]	; (800d024 <tcp_free_acked_segments+0xf0>)
 800cfbc:	4817      	ldr	r0, [pc, #92]	; (800d01c <tcp_free_acked_segments+0xe8>)
 800cfbe:	f005 ff7d 	bl	8012ebc <iprintf>
  while (seg_list != NULL &&
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d020      	beq.n	800d00a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	685b      	ldr	r3, [r3, #4]
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fb fa8b 	bl	80084ea <lwip_htonl>
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	891b      	ldrh	r3, [r3, #8]
 800cfda:	461d      	mov	r5, r3
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	899b      	ldrh	r3, [r3, #12]
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fb fa6b 	bl	80084c0 <lwip_htons>
 800cfea:	4603      	mov	r3, r0
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	f003 0303 	and.w	r3, r3, #3
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d001      	beq.n	800cffa <tcp_free_acked_segments+0xc6>
 800cff6:	2301      	movs	r3, #1
 800cff8:	e000      	b.n	800cffc <tcp_free_acked_segments+0xc8>
 800cffa:	2300      	movs	r3, #0
 800cffc:	442b      	add	r3, r5
 800cffe:	18e2      	adds	r2, r4, r3
 800d000:	4b09      	ldr	r3, [pc, #36]	; (800d028 <tcp_free_acked_segments+0xf4>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d006:	2b00      	cmp	r3, #0
 800d008:	dd9c      	ble.n	800cf44 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d00a:	68bb      	ldr	r3, [r7, #8]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bdb0      	pop	{r4, r5, r7, pc}
 800d014:	080150ec 	.word	0x080150ec
 800d018:	080153d4 	.word	0x080153d4
 800d01c:	08015138 	.word	0x08015138
 800d020:	2400bd4c 	.word	0x2400bd4c
 800d024:	080153fc 	.word	0x080153fc
 800d028:	2400bd48 	.word	0x2400bd48

0800d02c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d02c:	b5b0      	push	{r4, r5, r7, lr}
 800d02e:	b094      	sub	sp, #80	; 0x50
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d106      	bne.n	800d04c <tcp_receive+0x20>
 800d03e:	4b91      	ldr	r3, [pc, #580]	; (800d284 <tcp_receive+0x258>)
 800d040:	f240 427b 	movw	r2, #1147	; 0x47b
 800d044:	4990      	ldr	r1, [pc, #576]	; (800d288 <tcp_receive+0x25c>)
 800d046:	4891      	ldr	r0, [pc, #580]	; (800d28c <tcp_receive+0x260>)
 800d048:	f005 ff38 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	2b03      	cmp	r3, #3
 800d052:	d806      	bhi.n	800d062 <tcp_receive+0x36>
 800d054:	4b8b      	ldr	r3, [pc, #556]	; (800d284 <tcp_receive+0x258>)
 800d056:	f240 427c 	movw	r2, #1148	; 0x47c
 800d05a:	498d      	ldr	r1, [pc, #564]	; (800d290 <tcp_receive+0x264>)
 800d05c:	488b      	ldr	r0, [pc, #556]	; (800d28c <tcp_receive+0x260>)
 800d05e:	f005 ff2d 	bl	8012ebc <iprintf>

  if (flags & TCP_ACK) {
 800d062:	4b8c      	ldr	r3, [pc, #560]	; (800d294 <tcp_receive+0x268>)
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	f003 0310 	and.w	r3, r3, #16
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f000 8264 	beq.w	800d538 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d076:	461a      	mov	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d07c:	4413      	add	r3, r2
 800d07e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d084:	4b84      	ldr	r3, [pc, #528]	; (800d298 <tcp_receive+0x26c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	db1b      	blt.n	800d0c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d092:	4b81      	ldr	r3, [pc, #516]	; (800d298 <tcp_receive+0x26c>)
 800d094:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d096:	429a      	cmp	r2, r3
 800d098:	d106      	bne.n	800d0a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d09e:	4b7f      	ldr	r3, [pc, #508]	; (800d29c <tcp_receive+0x270>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	db0e      	blt.n	800d0c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0ac:	4b7b      	ldr	r3, [pc, #492]	; (800d29c <tcp_receive+0x270>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d125      	bne.n	800d100 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d0b4:	4b7a      	ldr	r3, [pc, #488]	; (800d2a0 <tcp_receive+0x274>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	89db      	ldrh	r3, [r3, #14]
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d91c      	bls.n	800d100 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d0c6:	4b76      	ldr	r3, [pc, #472]	; (800d2a0 <tcp_receive+0x274>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	89db      	ldrh	r3, [r3, #14]
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d205      	bcs.n	800d0f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d0f0:	4b69      	ldr	r3, [pc, #420]	; (800d298 <tcp_receive+0x26c>)
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d0f8:	4b68      	ldr	r3, [pc, #416]	; (800d29c <tcp_receive+0x270>)
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d100:	4b66      	ldr	r3, [pc, #408]	; (800d29c <tcp_receive+0x270>)
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	dc58      	bgt.n	800d1c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d10e:	4b65      	ldr	r3, [pc, #404]	; (800d2a4 <tcp_receive+0x278>)
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d14b      	bne.n	800d1ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d120:	4413      	add	r3, r2
 800d122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d124:	429a      	cmp	r2, r3
 800d126:	d142      	bne.n	800d1ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d12e:	2b00      	cmp	r3, #0
 800d130:	db3d      	blt.n	800d1ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d136:	4b59      	ldr	r3, [pc, #356]	; (800d29c <tcp_receive+0x270>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d137      	bne.n	800d1ae <tcp_receive+0x182>
              found_dupack = 1;
 800d13e:	2301      	movs	r3, #1
 800d140:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d148:	2bff      	cmp	r3, #255	; 0xff
 800d14a:	d007      	beq.n	800d15c <tcp_receive+0x130>
                ++pcb->dupacks;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d152:	3301      	adds	r3, #1
 800d154:	b2da      	uxtb	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d162:	2b03      	cmp	r3, #3
 800d164:	d91b      	bls.n	800d19e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d170:	4413      	add	r3, r2
 800d172:	b29a      	uxth	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d30a      	bcc.n	800d194 <tcp_receive+0x168>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d188:	4413      	add	r3, r2
 800d18a:	b29a      	uxth	r2, r3
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d192:	e004      	b.n	800d19e <tcp_receive+0x172>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d19a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d902      	bls.n	800d1ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f001 feeb 	bl	800ef84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d1ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f040 8161 	bne.w	800d478 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1be:	e15b      	b.n	800d478 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d1c0:	4b36      	ldr	r3, [pc, #216]	; (800d29c <tcp_receive+0x270>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f2c0 814e 	blt.w	800d46e <tcp_receive+0x442>
 800d1d2:	4b32      	ldr	r3, [pc, #200]	; (800d29c <tcp_receive+0x270>)
 800d1d4:	681a      	ldr	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f300 8146 	bgt.w	800d46e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	8b5b      	ldrh	r3, [r3, #26]
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d010      	beq.n	800d210 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	8b5b      	ldrh	r3, [r3, #26]
 800d1f2:	f023 0304 	bic.w	r3, r3, #4
 800d1f6:	b29a      	uxth	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d21e:	10db      	asrs	r3, r3, #3
 800d220:	b21b      	sxth	r3, r3
 800d222:	b29a      	uxth	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	4413      	add	r3, r2
 800d22e:	b29b      	uxth	r3, r3
 800d230:	b21a      	sxth	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d238:	4b18      	ldr	r3, [pc, #96]	; (800d29c <tcp_receive+0x270>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d242:	b29b      	uxth	r3, r3
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d250:	4b12      	ldr	r3, [pc, #72]	; (800d29c <tcp_receive+0x270>)
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	7d1b      	ldrb	r3, [r3, #20]
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	f240 8097 	bls.w	800d390 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d26e:	429a      	cmp	r2, r3
 800d270:	d245      	bcs.n	800d2fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	8b5b      	ldrh	r3, [r3, #26]
 800d276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d014      	beq.n	800d2a8 <tcp_receive+0x27c>
 800d27e:	2301      	movs	r3, #1
 800d280:	e013      	b.n	800d2aa <tcp_receive+0x27e>
 800d282:	bf00      	nop
 800d284:	080150ec 	.word	0x080150ec
 800d288:	0801541c 	.word	0x0801541c
 800d28c:	08015138 	.word	0x08015138
 800d290:	08015438 	.word	0x08015438
 800d294:	2400bd50 	.word	0x2400bd50
 800d298:	2400bd44 	.word	0x2400bd44
 800d29c:	2400bd48 	.word	0x2400bd48
 800d2a0:	2400bd34 	.word	0x2400bd34
 800d2a4:	2400bd4e 	.word	0x2400bd4e
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d2ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d2b8:	fb12 f303 	smulbb	r3, r2, r3
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	bf28      	it	cs
 800d2c4:	4613      	movcs	r3, r2
 800d2c6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d2ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d2d0:	4413      	add	r3, r2
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d309      	bcc.n	800d2f2 <tcp_receive+0x2c6>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d2e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d2e6:	4413      	add	r3, r2
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d2f0:	e04e      	b.n	800d390 <tcp_receive+0x364>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d2fc:	e048      	b.n	800d390 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d304:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d306:	4413      	add	r3, r2
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d310:	429a      	cmp	r2, r3
 800d312:	d309      	bcc.n	800d328 <tcp_receive+0x2fc>
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d31a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d31c:	4413      	add	r3, r2
 800d31e:	b29a      	uxth	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d326:	e004      	b.n	800d332 <tcp_receive+0x306>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d32e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d33e:	429a      	cmp	r2, r3
 800d340:	d326      	bcc.n	800d390 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	b29a      	uxth	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d362:	4413      	add	r3, r2
 800d364:	b29a      	uxth	r2, r3
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d30a      	bcc.n	800d386 <tcp_receive+0x35a>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d37a:	4413      	add	r3, r2
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d384:	e004      	b.n	800d390 <tcp_receive+0x364>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d38c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d398:	4a98      	ldr	r2, [pc, #608]	; (800d5fc <tcp_receive+0x5d0>)
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f7ff fdca 	bl	800cf34 <tcp_free_acked_segments>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ae:	4a94      	ldr	r2, [pc, #592]	; (800d600 <tcp_receive+0x5d4>)
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff fdbf 	bl	800cf34 <tcp_free_acked_segments>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3ca:	861a      	strh	r2, [r3, #48]	; 0x30
 800d3cc:	e002      	b.n	800d3d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d103      	bne.n	800d3ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d3f0:	4b84      	ldr	r3, [pc, #528]	; (800d604 <tcp_receive+0x5d8>)
 800d3f2:	881b      	ldrh	r3, [r3, #0]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	8b5b      	ldrh	r3, [r3, #26]
 800d402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d406:	2b00      	cmp	r3, #0
 800d408:	d035      	beq.n	800d476 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d118      	bne.n	800d444 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00c      	beq.n	800d434 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	4618      	mov	r0, r3
 800d428:	f7fb f85f 	bl	80084ea <lwip_htonl>
 800d42c:	4603      	mov	r3, r0
 800d42e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d430:	2b00      	cmp	r3, #0
 800d432:	dc20      	bgt.n	800d476 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	8b5b      	ldrh	r3, [r3, #26]
 800d438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d442:	e018      	b.n	800d476 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	4618      	mov	r0, r3
 800d452:	f7fb f84a 	bl	80084ea <lwip_htonl>
 800d456:	4603      	mov	r3, r0
 800d458:	1ae3      	subs	r3, r4, r3
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	dc0b      	bgt.n	800d476 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	8b5b      	ldrh	r3, [r3, #26]
 800d462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d466:	b29a      	uxth	r2, r3
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d46c:	e003      	b.n	800d476 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f001 ff76 	bl	800f360 <tcp_send_empty_ack>
 800d474:	e000      	b.n	800d478 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d476:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d05b      	beq.n	800d538 <tcp_receive+0x50c>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d484:	4b60      	ldr	r3, [pc, #384]	; (800d608 <tcp_receive+0x5dc>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	1ad3      	subs	r3, r2, r3
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	da54      	bge.n	800d538 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d48e:	4b5f      	ldr	r3, [pc, #380]	; (800d60c <tcp_receive+0x5e0>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	b29a      	uxth	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d498:	b29b      	uxth	r3, r3
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d4a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d4ac:	10db      	asrs	r3, r3, #3
 800d4ae:	b21b      	sxth	r3, r3
 800d4b0:	b29b      	uxth	r3, r3
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d4c6:	4413      	add	r3, r2
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	b21a      	sxth	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d4d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	da05      	bge.n	800d4e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d4d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d4dc:	425b      	negs	r3, r3
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d4e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4ee:	109b      	asrs	r3, r3, #2
 800d4f0:	b21b      	sxth	r3, r3
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d502:	b29a      	uxth	r2, r3
 800d504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d508:	4413      	add	r3, r2
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	b21a      	sxth	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d518:	10db      	asrs	r3, r3, #3
 800d51a:	b21b      	sxth	r3, r3
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d524:	b29b      	uxth	r3, r3
 800d526:	4413      	add	r3, r2
 800d528:	b29b      	uxth	r3, r3
 800d52a:	b21a      	sxth	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d538:	4b35      	ldr	r3, [pc, #212]	; (800d610 <tcp_receive+0x5e4>)
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f000 84e2 	beq.w	800df06 <tcp_receive+0xeda>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	7d1b      	ldrb	r3, [r3, #20]
 800d546:	2b06      	cmp	r3, #6
 800d548:	f200 84dd 	bhi.w	800df06 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d550:	4b30      	ldr	r3, [pc, #192]	; (800d614 <tcp_receive+0x5e8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	1ad3      	subs	r3, r2, r3
 800d556:	3b01      	subs	r3, #1
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f2c0 808f 	blt.w	800d67c <tcp_receive+0x650>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d562:	4b2b      	ldr	r3, [pc, #172]	; (800d610 <tcp_receive+0x5e4>)
 800d564:	881b      	ldrh	r3, [r3, #0]
 800d566:	4619      	mov	r1, r3
 800d568:	4b2a      	ldr	r3, [pc, #168]	; (800d614 <tcp_receive+0x5e8>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	440b      	add	r3, r1
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	3301      	adds	r3, #1
 800d572:	2b00      	cmp	r3, #0
 800d574:	f300 8082 	bgt.w	800d67c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d578:	4b27      	ldr	r3, [pc, #156]	; (800d618 <tcp_receive+0x5ec>)
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d582:	4b24      	ldr	r3, [pc, #144]	; (800d614 <tcp_receive+0x5e8>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	1ad3      	subs	r3, r2, r3
 800d588:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d58a:	4b23      	ldr	r3, [pc, #140]	; (800d618 <tcp_receive+0x5ec>)
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d106      	bne.n	800d5a0 <tcp_receive+0x574>
 800d592:	4b22      	ldr	r3, [pc, #136]	; (800d61c <tcp_receive+0x5f0>)
 800d594:	f240 5294 	movw	r2, #1428	; 0x594
 800d598:	4921      	ldr	r1, [pc, #132]	; (800d620 <tcp_receive+0x5f4>)
 800d59a:	4822      	ldr	r0, [pc, #136]	; (800d624 <tcp_receive+0x5f8>)
 800d59c:	f005 fc8e 	bl	8012ebc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d906      	bls.n	800d5b8 <tcp_receive+0x58c>
 800d5aa:	4b1c      	ldr	r3, [pc, #112]	; (800d61c <tcp_receive+0x5f0>)
 800d5ac:	f240 5295 	movw	r2, #1429	; 0x595
 800d5b0:	491d      	ldr	r1, [pc, #116]	; (800d628 <tcp_receive+0x5fc>)
 800d5b2:	481c      	ldr	r0, [pc, #112]	; (800d624 <tcp_receive+0x5f8>)
 800d5b4:	f005 fc82 	bl	8012ebc <iprintf>
      off = (u16_t)off32;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d5be:	4b16      	ldr	r3, [pc, #88]	; (800d618 <tcp_receive+0x5ec>)
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	891b      	ldrh	r3, [r3, #8]
 800d5c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d906      	bls.n	800d5da <tcp_receive+0x5ae>
 800d5cc:	4b13      	ldr	r3, [pc, #76]	; (800d61c <tcp_receive+0x5f0>)
 800d5ce:	f240 5297 	movw	r2, #1431	; 0x597
 800d5d2:	4916      	ldr	r1, [pc, #88]	; (800d62c <tcp_receive+0x600>)
 800d5d4:	4813      	ldr	r0, [pc, #76]	; (800d624 <tcp_receive+0x5f8>)
 800d5d6:	f005 fc71 	bl	8012ebc <iprintf>
      inseg.len -= off;
 800d5da:	4b0f      	ldr	r3, [pc, #60]	; (800d618 <tcp_receive+0x5ec>)
 800d5dc:	891a      	ldrh	r2, [r3, #8]
 800d5de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	4b0c      	ldr	r3, [pc, #48]	; (800d618 <tcp_receive+0x5ec>)
 800d5e8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d5ea:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <tcp_receive+0x5ec>)
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	891a      	ldrh	r2, [r3, #8]
 800d5f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d5f8:	e02a      	b.n	800d650 <tcp_receive+0x624>
 800d5fa:	bf00      	nop
 800d5fc:	08015454 	.word	0x08015454
 800d600:	0801545c 	.word	0x0801545c
 800d604:	2400bd4c 	.word	0x2400bd4c
 800d608:	2400bd48 	.word	0x2400bd48
 800d60c:	2400bd0c 	.word	0x2400bd0c
 800d610:	2400bd4e 	.word	0x2400bd4e
 800d614:	2400bd44 	.word	0x2400bd44
 800d618:	2400bd24 	.word	0x2400bd24
 800d61c:	080150ec 	.word	0x080150ec
 800d620:	08015464 	.word	0x08015464
 800d624:	08015138 	.word	0x08015138
 800d628:	08015474 	.word	0x08015474
 800d62c:	08015484 	.word	0x08015484
        off -= p->len;
 800d630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d632:	895b      	ldrh	r3, [r3, #10]
 800d634:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d640:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d642:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d646:	2200      	movs	r2, #0
 800d648:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d652:	895b      	ldrh	r3, [r3, #10]
 800d654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d658:	429a      	cmp	r2, r3
 800d65a:	d8e9      	bhi.n	800d630 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d65c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d660:	4619      	mov	r1, r3
 800d662:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d664:	f7fc fb60 	bl	8009d28 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66c:	4a91      	ldr	r2, [pc, #580]	; (800d8b4 <tcp_receive+0x888>)
 800d66e:	6013      	str	r3, [r2, #0]
 800d670:	4b91      	ldr	r3, [pc, #580]	; (800d8b8 <tcp_receive+0x88c>)
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	4a8f      	ldr	r2, [pc, #572]	; (800d8b4 <tcp_receive+0x888>)
 800d676:	6812      	ldr	r2, [r2, #0]
 800d678:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d67a:	e00d      	b.n	800d698 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d67c:	4b8d      	ldr	r3, [pc, #564]	; (800d8b4 <tcp_receive+0x888>)
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d684:	1ad3      	subs	r3, r2, r3
 800d686:	2b00      	cmp	r3, #0
 800d688:	da06      	bge.n	800d698 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	8b5b      	ldrh	r3, [r3, #26]
 800d68e:	f043 0302 	orr.w	r3, r3, #2
 800d692:	b29a      	uxth	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d698:	4b86      	ldr	r3, [pc, #536]	; (800d8b4 <tcp_receive+0x888>)
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f2c0 842a 	blt.w	800defc <tcp_receive+0xed0>
 800d6a8:	4b82      	ldr	r3, [pc, #520]	; (800d8b4 <tcp_receive+0x888>)
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d6b4:	440b      	add	r3, r1
 800d6b6:	1ad3      	subs	r3, r2, r3
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f300 841e 	bgt.w	800defc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6c4:	4b7b      	ldr	r3, [pc, #492]	; (800d8b4 <tcp_receive+0x888>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	f040 829a 	bne.w	800dc02 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d6ce:	4b7a      	ldr	r3, [pc, #488]	; (800d8b8 <tcp_receive+0x88c>)
 800d6d0:	891c      	ldrh	r4, [r3, #8]
 800d6d2:	4b79      	ldr	r3, [pc, #484]	; (800d8b8 <tcp_receive+0x88c>)
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	899b      	ldrh	r3, [r3, #12]
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fa fef0 	bl	80084c0 <lwip_htons>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f003 0303 	and.w	r3, r3, #3
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <tcp_receive+0x6c4>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e000      	b.n	800d6f2 <tcp_receive+0x6c6>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	4423      	add	r3, r4
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	4b71      	ldr	r3, [pc, #452]	; (800d8bc <tcp_receive+0x890>)
 800d6f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d6fe:	4b6f      	ldr	r3, [pc, #444]	; (800d8bc <tcp_receive+0x890>)
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	429a      	cmp	r2, r3
 800d704:	d275      	bcs.n	800d7f2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d706:	4b6c      	ldr	r3, [pc, #432]	; (800d8b8 <tcp_receive+0x88c>)
 800d708:	68db      	ldr	r3, [r3, #12]
 800d70a:	899b      	ldrh	r3, [r3, #12]
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fa fed6 	bl	80084c0 <lwip_htons>
 800d714:	4603      	mov	r3, r0
 800d716:	b2db      	uxtb	r3, r3
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d01f      	beq.n	800d760 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d720:	4b65      	ldr	r3, [pc, #404]	; (800d8b8 <tcp_receive+0x88c>)
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	899b      	ldrh	r3, [r3, #12]
 800d726:	b29b      	uxth	r3, r3
 800d728:	b21b      	sxth	r3, r3
 800d72a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d72e:	b21c      	sxth	r4, r3
 800d730:	4b61      	ldr	r3, [pc, #388]	; (800d8b8 <tcp_receive+0x88c>)
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	899b      	ldrh	r3, [r3, #12]
 800d736:	b29b      	uxth	r3, r3
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fa fec1 	bl	80084c0 <lwip_htons>
 800d73e:	4603      	mov	r3, r0
 800d740:	b2db      	uxtb	r3, r3
 800d742:	b29b      	uxth	r3, r3
 800d744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d748:	b29b      	uxth	r3, r3
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fa feb8 	bl	80084c0 <lwip_htons>
 800d750:	4603      	mov	r3, r0
 800d752:	b21b      	sxth	r3, r3
 800d754:	4323      	orrs	r3, r4
 800d756:	b21a      	sxth	r2, r3
 800d758:	4b57      	ldr	r3, [pc, #348]	; (800d8b8 <tcp_receive+0x88c>)
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	b292      	uxth	r2, r2
 800d75e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d764:	4b54      	ldr	r3, [pc, #336]	; (800d8b8 <tcp_receive+0x88c>)
 800d766:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d768:	4b53      	ldr	r3, [pc, #332]	; (800d8b8 <tcp_receive+0x88c>)
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	899b      	ldrh	r3, [r3, #12]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	4618      	mov	r0, r3
 800d772:	f7fa fea5 	bl	80084c0 <lwip_htons>
 800d776:	4603      	mov	r3, r0
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	f003 0302 	and.w	r3, r3, #2
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d005      	beq.n	800d78e <tcp_receive+0x762>
            inseg.len -= 1;
 800d782:	4b4d      	ldr	r3, [pc, #308]	; (800d8b8 <tcp_receive+0x88c>)
 800d784:	891b      	ldrh	r3, [r3, #8]
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	4b4b      	ldr	r3, [pc, #300]	; (800d8b8 <tcp_receive+0x88c>)
 800d78c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d78e:	4b4a      	ldr	r3, [pc, #296]	; (800d8b8 <tcp_receive+0x88c>)
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	4a49      	ldr	r2, [pc, #292]	; (800d8b8 <tcp_receive+0x88c>)
 800d794:	8912      	ldrh	r2, [r2, #8]
 800d796:	4611      	mov	r1, r2
 800d798:	4618      	mov	r0, r3
 800d79a:	f7fc f9c5 	bl	8009b28 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d79e:	4b46      	ldr	r3, [pc, #280]	; (800d8b8 <tcp_receive+0x88c>)
 800d7a0:	891c      	ldrh	r4, [r3, #8]
 800d7a2:	4b45      	ldr	r3, [pc, #276]	; (800d8b8 <tcp_receive+0x88c>)
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	899b      	ldrh	r3, [r3, #12]
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fa fe88 	bl	80084c0 <lwip_htons>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 0303 	and.w	r3, r3, #3
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <tcp_receive+0x794>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	e000      	b.n	800d7c2 <tcp_receive+0x796>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	4423      	add	r3, r4
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	4b3d      	ldr	r3, [pc, #244]	; (800d8bc <tcp_receive+0x890>)
 800d7c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d7ca:	4b3c      	ldr	r3, [pc, #240]	; (800d8bc <tcp_receive+0x890>)
 800d7cc:	881b      	ldrh	r3, [r3, #0]
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	4b38      	ldr	r3, [pc, #224]	; (800d8b4 <tcp_receive+0x888>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	441a      	add	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d7de:	440b      	add	r3, r1
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d006      	beq.n	800d7f2 <tcp_receive+0x7c6>
 800d7e4:	4b36      	ldr	r3, [pc, #216]	; (800d8c0 <tcp_receive+0x894>)
 800d7e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d7ea:	4936      	ldr	r1, [pc, #216]	; (800d8c4 <tcp_receive+0x898>)
 800d7ec:	4836      	ldr	r0, [pc, #216]	; (800d8c8 <tcp_receive+0x89c>)
 800d7ee:	f005 fb65 	bl	8012ebc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	f000 80e7 	beq.w	800d9ca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d7fc:	4b2e      	ldr	r3, [pc, #184]	; (800d8b8 <tcp_receive+0x88c>)
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	899b      	ldrh	r3, [r3, #12]
 800d802:	b29b      	uxth	r3, r3
 800d804:	4618      	mov	r0, r3
 800d806:	f7fa fe5b 	bl	80084c0 <lwip_htons>
 800d80a:	4603      	mov	r3, r0
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	2b00      	cmp	r3, #0
 800d814:	d010      	beq.n	800d838 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d816:	e00a      	b.n	800d82e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d81c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f7fd fd92 	bl	800b352 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1f0      	bne.n	800d818 <tcp_receive+0x7ec>
 800d836:	e0c8      	b.n	800d9ca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d83c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d83e:	e052      	b.n	800d8e6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	899b      	ldrh	r3, [r3, #12]
 800d846:	b29b      	uxth	r3, r3
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fa fe39 	bl	80084c0 <lwip_htons>
 800d84e:	4603      	mov	r3, r0
 800d850:	b2db      	uxtb	r3, r3
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	2b00      	cmp	r3, #0
 800d858:	d03d      	beq.n	800d8d6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d85a:	4b17      	ldr	r3, [pc, #92]	; (800d8b8 <tcp_receive+0x88c>)
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	899b      	ldrh	r3, [r3, #12]
 800d860:	b29b      	uxth	r3, r3
 800d862:	4618      	mov	r0, r3
 800d864:	f7fa fe2c 	bl	80084c0 <lwip_htons>
 800d868:	4603      	mov	r3, r0
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d870:	2b00      	cmp	r3, #0
 800d872:	d130      	bne.n	800d8d6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d874:	4b10      	ldr	r3, [pc, #64]	; (800d8b8 <tcp_receive+0x88c>)
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	899b      	ldrh	r3, [r3, #12]
 800d87a:	b29c      	uxth	r4, r3
 800d87c:	2001      	movs	r0, #1
 800d87e:	f7fa fe1f 	bl	80084c0 <lwip_htons>
 800d882:	4603      	mov	r3, r0
 800d884:	461a      	mov	r2, r3
 800d886:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <tcp_receive+0x88c>)
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	4322      	orrs	r2, r4
 800d88c:	b292      	uxth	r2, r2
 800d88e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d890:	4b09      	ldr	r3, [pc, #36]	; (800d8b8 <tcp_receive+0x88c>)
 800d892:	891c      	ldrh	r4, [r3, #8]
 800d894:	4b08      	ldr	r3, [pc, #32]	; (800d8b8 <tcp_receive+0x88c>)
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	899b      	ldrh	r3, [r3, #12]
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fa fe0f 	bl	80084c0 <lwip_htons>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	f003 0303 	and.w	r3, r3, #3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00e      	beq.n	800d8cc <tcp_receive+0x8a0>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e00d      	b.n	800d8ce <tcp_receive+0x8a2>
 800d8b2:	bf00      	nop
 800d8b4:	2400bd44 	.word	0x2400bd44
 800d8b8:	2400bd24 	.word	0x2400bd24
 800d8bc:	2400bd4e 	.word	0x2400bd4e
 800d8c0:	080150ec 	.word	0x080150ec
 800d8c4:	08015494 	.word	0x08015494
 800d8c8:	08015138 	.word	0x08015138
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4423      	add	r3, r4
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	4b98      	ldr	r3, [pc, #608]	; (800db34 <tcp_receive+0xb08>)
 800d8d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d8e0:	6938      	ldr	r0, [r7, #16]
 800d8e2:	f7fd fd36 	bl	800b352 <tcp_seg_free>
            while (next &&
 800d8e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00e      	beq.n	800d90a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d8ec:	4b91      	ldr	r3, [pc, #580]	; (800db34 <tcp_receive+0xb08>)
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4b91      	ldr	r3, [pc, #580]	; (800db38 <tcp_receive+0xb0c>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	441a      	add	r2, r3
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d900:	8909      	ldrh	r1, [r1, #8]
 800d902:	440b      	add	r3, r1
 800d904:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d906:	2b00      	cmp	r3, #0
 800d908:	da9a      	bge.n	800d840 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d059      	beq.n	800d9c4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800d910:	4b88      	ldr	r3, [pc, #544]	; (800db34 <tcp_receive+0xb08>)
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	4b88      	ldr	r3, [pc, #544]	; (800db38 <tcp_receive+0xb0c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	441a      	add	r2, r3
 800d91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d924:	2b00      	cmp	r3, #0
 800d926:	dd4d      	ble.n	800d9c4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	b29a      	uxth	r2, r3
 800d930:	4b81      	ldr	r3, [pc, #516]	; (800db38 <tcp_receive+0xb0c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	b29b      	uxth	r3, r3
 800d936:	1ad3      	subs	r3, r2, r3
 800d938:	b29a      	uxth	r2, r3
 800d93a:	4b80      	ldr	r3, [pc, #512]	; (800db3c <tcp_receive+0xb10>)
 800d93c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d93e:	4b7f      	ldr	r3, [pc, #508]	; (800db3c <tcp_receive+0xb10>)
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	899b      	ldrh	r3, [r3, #12]
 800d944:	b29b      	uxth	r3, r3
 800d946:	4618      	mov	r0, r3
 800d948:	f7fa fdba 	bl	80084c0 <lwip_htons>
 800d94c:	4603      	mov	r3, r0
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f003 0302 	and.w	r3, r3, #2
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <tcp_receive+0x938>
                inseg.len -= 1;
 800d958:	4b78      	ldr	r3, [pc, #480]	; (800db3c <tcp_receive+0xb10>)
 800d95a:	891b      	ldrh	r3, [r3, #8]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	b29a      	uxth	r2, r3
 800d960:	4b76      	ldr	r3, [pc, #472]	; (800db3c <tcp_receive+0xb10>)
 800d962:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d964:	4b75      	ldr	r3, [pc, #468]	; (800db3c <tcp_receive+0xb10>)
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	4a74      	ldr	r2, [pc, #464]	; (800db3c <tcp_receive+0xb10>)
 800d96a:	8912      	ldrh	r2, [r2, #8]
 800d96c:	4611      	mov	r1, r2
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fc f8da 	bl	8009b28 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d974:	4b71      	ldr	r3, [pc, #452]	; (800db3c <tcp_receive+0xb10>)
 800d976:	891c      	ldrh	r4, [r3, #8]
 800d978:	4b70      	ldr	r3, [pc, #448]	; (800db3c <tcp_receive+0xb10>)
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	899b      	ldrh	r3, [r3, #12]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4618      	mov	r0, r3
 800d982:	f7fa fd9d 	bl	80084c0 <lwip_htons>
 800d986:	4603      	mov	r3, r0
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0303 	and.w	r3, r3, #3
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <tcp_receive+0x96a>
 800d992:	2301      	movs	r3, #1
 800d994:	e000      	b.n	800d998 <tcp_receive+0x96c>
 800d996:	2300      	movs	r3, #0
 800d998:	4423      	add	r3, r4
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	4b65      	ldr	r3, [pc, #404]	; (800db34 <tcp_receive+0xb08>)
 800d99e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d9a0:	4b64      	ldr	r3, [pc, #400]	; (800db34 <tcp_receive+0xb08>)
 800d9a2:	881b      	ldrh	r3, [r3, #0]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	4b64      	ldr	r3, [pc, #400]	; (800db38 <tcp_receive+0xb0c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	441a      	add	r2, r3
 800d9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d006      	beq.n	800d9c4 <tcp_receive+0x998>
 800d9b6:	4b62      	ldr	r3, [pc, #392]	; (800db40 <tcp_receive+0xb14>)
 800d9b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d9bc:	4961      	ldr	r1, [pc, #388]	; (800db44 <tcp_receive+0xb18>)
 800d9be:	4862      	ldr	r0, [pc, #392]	; (800db48 <tcp_receive+0xb1c>)
 800d9c0:	f005 fa7c 	bl	8012ebc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d9c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d9ca:	4b5a      	ldr	r3, [pc, #360]	; (800db34 <tcp_receive+0xb08>)
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	4b59      	ldr	r3, [pc, #356]	; (800db38 <tcp_receive+0xb0c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	441a      	add	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9de:	4b55      	ldr	r3, [pc, #340]	; (800db34 <tcp_receive+0xb08>)
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d206      	bcs.n	800d9f4 <tcp_receive+0x9c8>
 800d9e6:	4b56      	ldr	r3, [pc, #344]	; (800db40 <tcp_receive+0xb14>)
 800d9e8:	f240 6207 	movw	r2, #1543	; 0x607
 800d9ec:	4957      	ldr	r1, [pc, #348]	; (800db4c <tcp_receive+0xb20>)
 800d9ee:	4856      	ldr	r0, [pc, #344]	; (800db48 <tcp_receive+0xb1c>)
 800d9f0:	f005 fa64 	bl	8012ebc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9f8:	4b4e      	ldr	r3, [pc, #312]	; (800db34 <tcp_receive+0xb08>)
 800d9fa:	881b      	ldrh	r3, [r3, #0]
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7fc ffc5 	bl	800a994 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800da0a:	4b4c      	ldr	r3, [pc, #304]	; (800db3c <tcp_receive+0xb10>)
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	891b      	ldrh	r3, [r3, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d006      	beq.n	800da22 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800da14:	4b49      	ldr	r3, [pc, #292]	; (800db3c <tcp_receive+0xb10>)
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	4a4d      	ldr	r2, [pc, #308]	; (800db50 <tcp_receive+0xb24>)
 800da1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800da1c:	4b47      	ldr	r3, [pc, #284]	; (800db3c <tcp_receive+0xb10>)
 800da1e:	2200      	movs	r2, #0
 800da20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da22:	4b46      	ldr	r3, [pc, #280]	; (800db3c <tcp_receive+0xb10>)
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	899b      	ldrh	r3, [r3, #12]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fa fd48 	bl	80084c0 <lwip_htons>
 800da30:	4603      	mov	r3, r0
 800da32:	b2db      	uxtb	r3, r3
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 80b8 	beq.w	800dbae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800da3e:	4b45      	ldr	r3, [pc, #276]	; (800db54 <tcp_receive+0xb28>)
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	f043 0320 	orr.w	r3, r3, #32
 800da46:	b2da      	uxtb	r2, r3
 800da48:	4b42      	ldr	r3, [pc, #264]	; (800db54 <tcp_receive+0xb28>)
 800da4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800da4c:	e0af      	b.n	800dbae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	4a36      	ldr	r2, [pc, #216]	; (800db38 <tcp_receive+0xb0c>)
 800da5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	891b      	ldrh	r3, [r3, #8]
 800da64:	461c      	mov	r4, r3
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	899b      	ldrh	r3, [r3, #12]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fa fd26 	bl	80084c0 <lwip_htons>
 800da74:	4603      	mov	r3, r0
 800da76:	b2db      	uxtb	r3, r3
 800da78:	f003 0303 	and.w	r3, r3, #3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <tcp_receive+0xa58>
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <tcp_receive+0xa5a>
 800da84:	2300      	movs	r3, #0
 800da86:	191a      	adds	r2, r3, r4
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	441a      	add	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da96:	461c      	mov	r4, r3
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	891b      	ldrh	r3, [r3, #8]
 800da9c:	461d      	mov	r5, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	899b      	ldrh	r3, [r3, #12]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fa fd0a 	bl	80084c0 <lwip_htons>
 800daac:	4603      	mov	r3, r0
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	f003 0303 	and.w	r3, r3, #3
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <tcp_receive+0xa90>
 800dab8:	2301      	movs	r3, #1
 800daba:	e000      	b.n	800dabe <tcp_receive+0xa92>
 800dabc:	2300      	movs	r3, #0
 800dabe:	442b      	add	r3, r5
 800dac0:	429c      	cmp	r4, r3
 800dac2:	d206      	bcs.n	800dad2 <tcp_receive+0xaa6>
 800dac4:	4b1e      	ldr	r3, [pc, #120]	; (800db40 <tcp_receive+0xb14>)
 800dac6:	f240 622b 	movw	r2, #1579	; 0x62b
 800daca:	4923      	ldr	r1, [pc, #140]	; (800db58 <tcp_receive+0xb2c>)
 800dacc:	481e      	ldr	r0, [pc, #120]	; (800db48 <tcp_receive+0xb1c>)
 800dace:	f005 f9f5 	bl	8012ebc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	461c      	mov	r4, r3
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	899b      	ldrh	r3, [r3, #12]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fa fced 	bl	80084c0 <lwip_htons>
 800dae6:	4603      	mov	r3, r0
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	f003 0303 	and.w	r3, r3, #3
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <tcp_receive+0xaca>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <tcp_receive+0xacc>
 800daf6:	2300      	movs	r3, #0
 800daf8:	1919      	adds	r1, r3, r4
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dafe:	b28b      	uxth	r3, r1
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7fc ff43 	bl	800a994 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	891b      	ldrh	r3, [r3, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d028      	beq.n	800db6a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800db18:	4b0d      	ldr	r3, [pc, #52]	; (800db50 <tcp_receive+0xb24>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01d      	beq.n	800db5c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800db20:	4b0b      	ldr	r3, [pc, #44]	; (800db50 <tcp_receive+0xb24>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	4619      	mov	r1, r3
 800db2a:	4610      	mov	r0, r2
 800db2c:	f7fc fa50 	bl	8009fd0 <pbuf_cat>
 800db30:	e018      	b.n	800db64 <tcp_receive+0xb38>
 800db32:	bf00      	nop
 800db34:	2400bd4e 	.word	0x2400bd4e
 800db38:	2400bd44 	.word	0x2400bd44
 800db3c:	2400bd24 	.word	0x2400bd24
 800db40:	080150ec 	.word	0x080150ec
 800db44:	080154cc 	.word	0x080154cc
 800db48:	08015138 	.word	0x08015138
 800db4c:	08015508 	.word	0x08015508
 800db50:	2400bd54 	.word	0x2400bd54
 800db54:	2400bd51 	.word	0x2400bd51
 800db58:	08015528 	.word	0x08015528
            } else {
              recv_data = cseg->p;
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	4a70      	ldr	r2, [pc, #448]	; (800dd24 <tcp_receive+0xcf8>)
 800db62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2200      	movs	r2, #0
 800db68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	899b      	ldrh	r3, [r3, #12]
 800db70:	b29b      	uxth	r3, r3
 800db72:	4618      	mov	r0, r3
 800db74:	f7fa fca4 	bl	80084c0 <lwip_htons>
 800db78:	4603      	mov	r3, r0
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	f003 0301 	and.w	r3, r3, #1
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00d      	beq.n	800dba0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800db84:	4b68      	ldr	r3, [pc, #416]	; (800dd28 <tcp_receive+0xcfc>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	f043 0320 	orr.w	r3, r3, #32
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	4b66      	ldr	r3, [pc, #408]	; (800dd28 <tcp_receive+0xcfc>)
 800db90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7d1b      	ldrb	r3, [r3, #20]
 800db96:	2b04      	cmp	r3, #4
 800db98:	d102      	bne.n	800dba0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2207      	movs	r2, #7
 800db9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800dba8:	68b8      	ldr	r0, [r7, #8]
 800dbaa:	f7fd fbd2 	bl	800b352 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d008      	beq.n	800dbc8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	f43f af43 	beq.w	800da4e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	8b5b      	ldrh	r3, [r3, #26]
 800dbcc:	f003 0301 	and.w	r3, r3, #1
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00e      	beq.n	800dbf2 <tcp_receive+0xbc6>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	8b5b      	ldrh	r3, [r3, #26]
 800dbd8:	f023 0301 	bic.w	r3, r3, #1
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	835a      	strh	r2, [r3, #26]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	8b5b      	ldrh	r3, [r3, #26]
 800dbe6:	f043 0302 	orr.w	r3, r3, #2
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800dbf0:	e188      	b.n	800df04 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	8b5b      	ldrh	r3, [r3, #26]
 800dbf6:	f043 0301 	orr.w	r3, r3, #1
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800dc00:	e180      	b.n	800df04 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d106      	bne.n	800dc18 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800dc0a:	4848      	ldr	r0, [pc, #288]	; (800dd2c <tcp_receive+0xd00>)
 800dc0c:	f7fd fbba 	bl	800b384 <tcp_seg_copy>
 800dc10:	4602      	mov	r2, r0
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	675a      	str	r2, [r3, #116]	; 0x74
 800dc16:	e16d      	b.n	800def4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc20:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc22:	e157      	b.n	800ded4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800dc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	685a      	ldr	r2, [r3, #4]
 800dc2a:	4b41      	ldr	r3, [pc, #260]	; (800dd30 <tcp_receive+0xd04>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d11d      	bne.n	800dc6e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800dc32:	4b3e      	ldr	r3, [pc, #248]	; (800dd2c <tcp_receive+0xd00>)
 800dc34:	891a      	ldrh	r2, [r3, #8]
 800dc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc38:	891b      	ldrh	r3, [r3, #8]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	f240 814f 	bls.w	800dede <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc40:	483a      	ldr	r0, [pc, #232]	; (800dd2c <tcp_receive+0xd00>)
 800dc42:	f7fd fb9f 	bl	800b384 <tcp_seg_copy>
 800dc46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f000 8149 	beq.w	800dee2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800dc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d003      	beq.n	800dc5e <tcp_receive+0xc32>
                    prev->next = cseg;
 800dc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	e002      	b.n	800dc64 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	697a      	ldr	r2, [r7, #20]
 800dc62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dc64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc66:	6978      	ldr	r0, [r7, #20]
 800dc68:	f7ff f8dc 	bl	800ce24 <tcp_oos_insert_segment>
                }
                break;
 800dc6c:	e139      	b.n	800dee2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800dc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d117      	bne.n	800dca4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dc74:	4b2e      	ldr	r3, [pc, #184]	; (800dd30 <tcp_receive+0xd04>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	da57      	bge.n	800dd34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc84:	4829      	ldr	r0, [pc, #164]	; (800dd2c <tcp_receive+0xd00>)
 800dc86:	f7fd fb7d 	bl	800b384 <tcp_seg_copy>
 800dc8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dc8c:	69bb      	ldr	r3, [r7, #24]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 8129 	beq.w	800dee6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800dc9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc9c:	69b8      	ldr	r0, [r7, #24]
 800dc9e:	f7ff f8c1 	bl	800ce24 <tcp_oos_insert_segment>
                  }
                  break;
 800dca2:	e120      	b.n	800dee6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dca4:	4b22      	ldr	r3, [pc, #136]	; (800dd30 <tcp_receive+0xd04>)
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	1ad3      	subs	r3, r2, r3
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	db3e      	blt.n	800dd34 <tcp_receive+0xd08>
 800dcb6:	4b1e      	ldr	r3, [pc, #120]	; (800dd30 <tcp_receive+0xd04>)
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	dc35      	bgt.n	800dd34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dcc8:	4818      	ldr	r0, [pc, #96]	; (800dd2c <tcp_receive+0xd00>)
 800dcca:	f7fd fb5b 	bl	800b384 <tcp_seg_copy>
 800dcce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 8109 	beq.w	800deea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dcd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dce0:	8912      	ldrh	r2, [r2, #8]
 800dce2:	441a      	add	r2, r3
 800dce4:	4b12      	ldr	r3, [pc, #72]	; (800dd30 <tcp_receive+0xd04>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	1ad3      	subs	r3, r2, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	dd12      	ble.n	800dd14 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dcee:	4b10      	ldr	r3, [pc, #64]	; (800dd30 <tcp_receive+0xd04>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0a:	891b      	ldrh	r3, [r3, #8]
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4610      	mov	r0, r2
 800dd10:	f7fb ff0a 	bl	8009b28 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dd14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd16:	69fa      	ldr	r2, [r7, #28]
 800dd18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dd1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd1c:	69f8      	ldr	r0, [r7, #28]
 800dd1e:	f7ff f881 	bl	800ce24 <tcp_oos_insert_segment>
                  }
                  break;
 800dd22:	e0e2      	b.n	800deea <tcp_receive+0xebe>
 800dd24:	2400bd54 	.word	0x2400bd54
 800dd28:	2400bd51 	.word	0x2400bd51
 800dd2c:	2400bd24 	.word	0x2400bd24
 800dd30:	2400bd44 	.word	0x2400bd44
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f040 80c6 	bne.w	800dece <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dd42:	4b80      	ldr	r3, [pc, #512]	; (800df44 <tcp_receive+0xf18>)
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f340 80bd 	ble.w	800dece <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	899b      	ldrh	r3, [r3, #12]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7fa fbaf 	bl	80084c0 <lwip_htons>
 800dd62:	4603      	mov	r3, r0
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f040 80bf 	bne.w	800deee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dd70:	4875      	ldr	r0, [pc, #468]	; (800df48 <tcp_receive+0xf1c>)
 800dd72:	f7fd fb07 	bl	800b384 <tcp_seg_copy>
 800dd76:	4602      	mov	r2, r0
 800dd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 80b6 	beq.w	800def2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	685b      	ldr	r3, [r3, #4]
 800dd8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd8e:	8912      	ldrh	r2, [r2, #8]
 800dd90:	441a      	add	r2, r3
 800dd92:	4b6c      	ldr	r3, [pc, #432]	; (800df44 <tcp_receive+0xf18>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	dd12      	ble.n	800ddc2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dd9c:	4b69      	ldr	r3, [pc, #420]	; (800df44 <tcp_receive+0xf18>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	1ad3      	subs	r3, r2, r3
 800ddac:	b29a      	uxth	r2, r3
 800ddae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ddb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb8:	891b      	ldrh	r3, [r3, #8]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	f7fb feb3 	bl	8009b28 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ddc2:	4b62      	ldr	r3, [pc, #392]	; (800df4c <tcp_receive+0xf20>)
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4b5e      	ldr	r3, [pc, #376]	; (800df44 <tcp_receive+0xf18>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	441a      	add	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd2:	6879      	ldr	r1, [r7, #4]
 800ddd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddd6:	440b      	add	r3, r1
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f340 8089 	ble.w	800def2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	899b      	ldrh	r3, [r3, #12]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fa fb68 	bl	80084c0 <lwip_htons>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d022      	beq.n	800de42 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	899b      	ldrh	r3, [r3, #12]
 800de04:	b29b      	uxth	r3, r3
 800de06:	b21b      	sxth	r3, r3
 800de08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800de0c:	b21c      	sxth	r4, r3
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	68db      	ldr	r3, [r3, #12]
 800de14:	899b      	ldrh	r3, [r3, #12]
 800de16:	b29b      	uxth	r3, r3
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fa fb51 	bl	80084c0 <lwip_htons>
 800de1e:	4603      	mov	r3, r0
 800de20:	b2db      	uxtb	r3, r3
 800de22:	b29b      	uxth	r3, r3
 800de24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800de28:	b29b      	uxth	r3, r3
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fa fb48 	bl	80084c0 <lwip_htons>
 800de30:	4603      	mov	r3, r0
 800de32:	b21b      	sxth	r3, r3
 800de34:	4323      	orrs	r3, r4
 800de36:	b21a      	sxth	r2, r3
 800de38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	b292      	uxth	r2, r2
 800de40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de46:	b29a      	uxth	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de4c:	4413      	add	r3, r2
 800de4e:	b299      	uxth	r1, r3
 800de50:	4b3c      	ldr	r3, [pc, #240]	; (800df44 <tcp_receive+0xf18>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	b29a      	uxth	r2, r3
 800de56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	1a8a      	subs	r2, r1, r2
 800de5c:	b292      	uxth	r2, r2
 800de5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685a      	ldr	r2, [r3, #4]
 800de66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	891b      	ldrh	r3, [r3, #8]
 800de6c:	4619      	mov	r1, r3
 800de6e:	4610      	mov	r0, r2
 800de70:	f7fb fe5a 	bl	8009b28 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800de74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	891c      	ldrh	r4, [r3, #8]
 800de7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	899b      	ldrh	r3, [r3, #12]
 800de82:	b29b      	uxth	r3, r3
 800de84:	4618      	mov	r0, r3
 800de86:	f7fa fb1b 	bl	80084c0 <lwip_htons>
 800de8a:	4603      	mov	r3, r0
 800de8c:	b2db      	uxtb	r3, r3
 800de8e:	f003 0303 	and.w	r3, r3, #3
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <tcp_receive+0xe6e>
 800de96:	2301      	movs	r3, #1
 800de98:	e000      	b.n	800de9c <tcp_receive+0xe70>
 800de9a:	2300      	movs	r3, #0
 800de9c:	4423      	add	r3, r4
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	4b2a      	ldr	r3, [pc, #168]	; (800df4c <tcp_receive+0xf20>)
 800dea2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dea4:	4b29      	ldr	r3, [pc, #164]	; (800df4c <tcp_receive+0xf20>)
 800dea6:	881b      	ldrh	r3, [r3, #0]
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b26      	ldr	r3, [pc, #152]	; (800df44 <tcp_receive+0xf18>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	441a      	add	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800deb8:	440b      	add	r3, r1
 800deba:	429a      	cmp	r2, r3
 800debc:	d019      	beq.n	800def2 <tcp_receive+0xec6>
 800debe:	4b24      	ldr	r3, [pc, #144]	; (800df50 <tcp_receive+0xf24>)
 800dec0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dec4:	4923      	ldr	r1, [pc, #140]	; (800df54 <tcp_receive+0xf28>)
 800dec6:	4824      	ldr	r0, [pc, #144]	; (800df58 <tcp_receive+0xf2c>)
 800dec8:	f004 fff8 	bl	8012ebc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800decc:	e011      	b.n	800def2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f47f aea4 	bne.w	800dc24 <tcp_receive+0xbf8>
 800dedc:	e00a      	b.n	800def4 <tcp_receive+0xec8>
                break;
 800dede:	bf00      	nop
 800dee0:	e008      	b.n	800def4 <tcp_receive+0xec8>
                break;
 800dee2:	bf00      	nop
 800dee4:	e006      	b.n	800def4 <tcp_receive+0xec8>
                  break;
 800dee6:	bf00      	nop
 800dee8:	e004      	b.n	800def4 <tcp_receive+0xec8>
                  break;
 800deea:	bf00      	nop
 800deec:	e002      	b.n	800def4 <tcp_receive+0xec8>
                  break;
 800deee:	bf00      	nop
 800def0:	e000      	b.n	800def4 <tcp_receive+0xec8>
                break;
 800def2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f001 fa33 	bl	800f360 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800defa:	e003      	b.n	800df04 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f001 fa2f 	bl	800f360 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800df02:	e01a      	b.n	800df3a <tcp_receive+0xf0e>
 800df04:	e019      	b.n	800df3a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800df06:	4b0f      	ldr	r3, [pc, #60]	; (800df44 <tcp_receive+0xf18>)
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0e:	1ad3      	subs	r3, r2, r3
 800df10:	2b00      	cmp	r3, #0
 800df12:	db0a      	blt.n	800df2a <tcp_receive+0xefe>
 800df14:	4b0b      	ldr	r3, [pc, #44]	; (800df44 <tcp_receive+0xf18>)
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	6879      	ldr	r1, [r7, #4]
 800df1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800df20:	440b      	add	r3, r1
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	3301      	adds	r3, #1
 800df26:	2b00      	cmp	r3, #0
 800df28:	dd07      	ble.n	800df3a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	8b5b      	ldrh	r3, [r3, #26]
 800df2e:	f043 0302 	orr.w	r3, r3, #2
 800df32:	b29a      	uxth	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800df38:	e7ff      	b.n	800df3a <tcp_receive+0xf0e>
 800df3a:	bf00      	nop
 800df3c:	3750      	adds	r7, #80	; 0x50
 800df3e:	46bd      	mov	sp, r7
 800df40:	bdb0      	pop	{r4, r5, r7, pc}
 800df42:	bf00      	nop
 800df44:	2400bd44 	.word	0x2400bd44
 800df48:	2400bd24 	.word	0x2400bd24
 800df4c:	2400bd4e 	.word	0x2400bd4e
 800df50:	080150ec 	.word	0x080150ec
 800df54:	08015494 	.word	0x08015494
 800df58:	08015138 	.word	0x08015138

0800df5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800df62:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <tcp_get_next_optbyte+0x5c>)
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	1c5a      	adds	r2, r3, #1
 800df68:	b291      	uxth	r1, r2
 800df6a:	4a13      	ldr	r2, [pc, #76]	; (800dfb8 <tcp_get_next_optbyte+0x5c>)
 800df6c:	8011      	strh	r1, [r2, #0]
 800df6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800df70:	4b12      	ldr	r3, [pc, #72]	; (800dfbc <tcp_get_next_optbyte+0x60>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d004      	beq.n	800df82 <tcp_get_next_optbyte+0x26>
 800df78:	4b11      	ldr	r3, [pc, #68]	; (800dfc0 <tcp_get_next_optbyte+0x64>)
 800df7a:	881b      	ldrh	r3, [r3, #0]
 800df7c:	88fa      	ldrh	r2, [r7, #6]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d208      	bcs.n	800df94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800df82:	4b10      	ldr	r3, [pc, #64]	; (800dfc4 <tcp_get_next_optbyte+0x68>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3314      	adds	r3, #20
 800df88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800df8a:	88fb      	ldrh	r3, [r7, #6]
 800df8c:	683a      	ldr	r2, [r7, #0]
 800df8e:	4413      	add	r3, r2
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	e00b      	b.n	800dfac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800df94:	88fb      	ldrh	r3, [r7, #6]
 800df96:	b2da      	uxtb	r2, r3
 800df98:	4b09      	ldr	r3, [pc, #36]	; (800dfc0 <tcp_get_next_optbyte+0x64>)
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	1ad3      	subs	r3, r2, r3
 800dfa0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dfa2:	4b06      	ldr	r3, [pc, #24]	; (800dfbc <tcp_get_next_optbyte+0x60>)
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	797b      	ldrb	r3, [r7, #5]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	2400bd40 	.word	0x2400bd40
 800dfbc:	2400bd3c 	.word	0x2400bd3c
 800dfc0:	2400bd3a 	.word	0x2400bd3a
 800dfc4:	2400bd34 	.word	0x2400bd34

0800dfc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d106      	bne.n	800dfe4 <tcp_parseopt+0x1c>
 800dfd6:	4b32      	ldr	r3, [pc, #200]	; (800e0a0 <tcp_parseopt+0xd8>)
 800dfd8:	f240 727d 	movw	r2, #1917	; 0x77d
 800dfdc:	4931      	ldr	r1, [pc, #196]	; (800e0a4 <tcp_parseopt+0xdc>)
 800dfde:	4832      	ldr	r0, [pc, #200]	; (800e0a8 <tcp_parseopt+0xe0>)
 800dfe0:	f004 ff6c 	bl	8012ebc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dfe4:	4b31      	ldr	r3, [pc, #196]	; (800e0ac <tcp_parseopt+0xe4>)
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d055      	beq.n	800e098 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dfec:	4b30      	ldr	r3, [pc, #192]	; (800e0b0 <tcp_parseopt+0xe8>)
 800dfee:	2200      	movs	r2, #0
 800dff0:	801a      	strh	r2, [r3, #0]
 800dff2:	e045      	b.n	800e080 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800dff4:	f7ff ffb2 	bl	800df5c <tcp_get_next_optbyte>
 800dff8:	4603      	mov	r3, r0
 800dffa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800dffc:	7bfb      	ldrb	r3, [r7, #15]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d006      	beq.n	800e010 <tcp_parseopt+0x48>
 800e002:	2b02      	cmp	r3, #2
 800e004:	dc2b      	bgt.n	800e05e <tcp_parseopt+0x96>
 800e006:	2b00      	cmp	r3, #0
 800e008:	d041      	beq.n	800e08e <tcp_parseopt+0xc6>
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d127      	bne.n	800e05e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e00e:	e037      	b.n	800e080 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e010:	f7ff ffa4 	bl	800df5c <tcp_get_next_optbyte>
 800e014:	4603      	mov	r3, r0
 800e016:	2b04      	cmp	r3, #4
 800e018:	d13b      	bne.n	800e092 <tcp_parseopt+0xca>
 800e01a:	4b25      	ldr	r3, [pc, #148]	; (800e0b0 <tcp_parseopt+0xe8>)
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	3301      	adds	r3, #1
 800e020:	4a22      	ldr	r2, [pc, #136]	; (800e0ac <tcp_parseopt+0xe4>)
 800e022:	8812      	ldrh	r2, [r2, #0]
 800e024:	4293      	cmp	r3, r2
 800e026:	da34      	bge.n	800e092 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e028:	f7ff ff98 	bl	800df5c <tcp_get_next_optbyte>
 800e02c:	4603      	mov	r3, r0
 800e02e:	b29b      	uxth	r3, r3
 800e030:	021b      	lsls	r3, r3, #8
 800e032:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e034:	f7ff ff92 	bl	800df5c <tcp_get_next_optbyte>
 800e038:	4603      	mov	r3, r0
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	89bb      	ldrh	r3, [r7, #12]
 800e03e:	4313      	orrs	r3, r2
 800e040:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e042:	89bb      	ldrh	r3, [r7, #12]
 800e044:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e048:	d804      	bhi.n	800e054 <tcp_parseopt+0x8c>
 800e04a:	89bb      	ldrh	r3, [r7, #12]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <tcp_parseopt+0x8c>
 800e050:	89ba      	ldrh	r2, [r7, #12]
 800e052:	e001      	b.n	800e058 <tcp_parseopt+0x90>
 800e054:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e05c:	e010      	b.n	800e080 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e05e:	f7ff ff7d 	bl	800df5c <tcp_get_next_optbyte>
 800e062:	4603      	mov	r3, r0
 800e064:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e066:	7afb      	ldrb	r3, [r7, #11]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d914      	bls.n	800e096 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e06c:	7afb      	ldrb	r3, [r7, #11]
 800e06e:	b29a      	uxth	r2, r3
 800e070:	4b0f      	ldr	r3, [pc, #60]	; (800e0b0 <tcp_parseopt+0xe8>)
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	4413      	add	r3, r2
 800e076:	b29b      	uxth	r3, r3
 800e078:	3b02      	subs	r3, #2
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	4b0c      	ldr	r3, [pc, #48]	; (800e0b0 <tcp_parseopt+0xe8>)
 800e07e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e080:	4b0b      	ldr	r3, [pc, #44]	; (800e0b0 <tcp_parseopt+0xe8>)
 800e082:	881a      	ldrh	r2, [r3, #0]
 800e084:	4b09      	ldr	r3, [pc, #36]	; (800e0ac <tcp_parseopt+0xe4>)
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d3b3      	bcc.n	800dff4 <tcp_parseopt+0x2c>
 800e08c:	e004      	b.n	800e098 <tcp_parseopt+0xd0>
          return;
 800e08e:	bf00      	nop
 800e090:	e002      	b.n	800e098 <tcp_parseopt+0xd0>
            return;
 800e092:	bf00      	nop
 800e094:	e000      	b.n	800e098 <tcp_parseopt+0xd0>
            return;
 800e096:	bf00      	nop
      }
    }
  }
}
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	080150ec 	.word	0x080150ec
 800e0a4:	08015550 	.word	0x08015550
 800e0a8:	08015138 	.word	0x08015138
 800e0ac:	2400bd38 	.word	0x2400bd38
 800e0b0:	2400bd40 	.word	0x2400bd40

0800e0b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e0b8:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <tcp_trigger_input_pcb_close+0x1c>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	f043 0310 	orr.w	r3, r3, #16
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	4b03      	ldr	r3, [pc, #12]	; (800e0d0 <tcp_trigger_input_pcb_close+0x1c>)
 800e0c4:	701a      	strb	r2, [r3, #0]
}
 800e0c6:	bf00      	nop
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr
 800e0d0:	2400bd51 	.word	0x2400bd51

0800e0d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00a      	beq.n	800e0fc <tcp_route+0x28>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	7a1b      	ldrb	r3, [r3, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d006      	beq.n	800e0fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	7a1b      	ldrb	r3, [r3, #8]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fb fb10 	bl	8009718 <netif_get_by_index>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	e003      	b.n	800e104 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f003 fa03 	bl	8011508 <ip4_route>
 800e102:	4603      	mov	r3, r0
  }
}
 800e104:	4618      	mov	r0, r3
 800e106:	3710      	adds	r7, #16
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e10c:	b590      	push	{r4, r7, lr}
 800e10e:	b087      	sub	sp, #28
 800e110:	af00      	add	r7, sp, #0
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	60b9      	str	r1, [r7, #8]
 800e116:	603b      	str	r3, [r7, #0]
 800e118:	4613      	mov	r3, r2
 800e11a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d105      	bne.n	800e12e <tcp_create_segment+0x22>
 800e122:	4b44      	ldr	r3, [pc, #272]	; (800e234 <tcp_create_segment+0x128>)
 800e124:	22a3      	movs	r2, #163	; 0xa3
 800e126:	4944      	ldr	r1, [pc, #272]	; (800e238 <tcp_create_segment+0x12c>)
 800e128:	4844      	ldr	r0, [pc, #272]	; (800e23c <tcp_create_segment+0x130>)
 800e12a:	f004 fec7 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d105      	bne.n	800e140 <tcp_create_segment+0x34>
 800e134:	4b3f      	ldr	r3, [pc, #252]	; (800e234 <tcp_create_segment+0x128>)
 800e136:	22a4      	movs	r2, #164	; 0xa4
 800e138:	4941      	ldr	r1, [pc, #260]	; (800e240 <tcp_create_segment+0x134>)
 800e13a:	4840      	ldr	r0, [pc, #256]	; (800e23c <tcp_create_segment+0x130>)
 800e13c:	f004 febe 	bl	8012ebc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e140:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	b2db      	uxtb	r3, r3
 800e148:	f003 0304 	and.w	r3, r3, #4
 800e14c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e14e:	2003      	movs	r0, #3
 800e150:	f7fa ff56 	bl	8009000 <memp_malloc>
 800e154:	6138      	str	r0, [r7, #16]
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d104      	bne.n	800e166 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e15c:	68b8      	ldr	r0, [r7, #8]
 800e15e:	f7fb fe69 	bl	8009e34 <pbuf_free>
    return NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	e061      	b.n	800e22a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e16c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2200      	movs	r2, #0
 800e172:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	891a      	ldrh	r2, [r3, #8]
 800e17e:	7dfb      	ldrb	r3, [r7, #23]
 800e180:	b29b      	uxth	r3, r3
 800e182:	429a      	cmp	r2, r3
 800e184:	d205      	bcs.n	800e192 <tcp_create_segment+0x86>
 800e186:	4b2b      	ldr	r3, [pc, #172]	; (800e234 <tcp_create_segment+0x128>)
 800e188:	22b0      	movs	r2, #176	; 0xb0
 800e18a:	492e      	ldr	r1, [pc, #184]	; (800e244 <tcp_create_segment+0x138>)
 800e18c:	482b      	ldr	r0, [pc, #172]	; (800e23c <tcp_create_segment+0x130>)
 800e18e:	f004 fe95 	bl	8012ebc <iprintf>
  seg->len = p->tot_len - optlen;
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	891a      	ldrh	r2, [r3, #8]
 800e196:	7dfb      	ldrb	r3, [r7, #23]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e1a2:	2114      	movs	r1, #20
 800e1a4:	68b8      	ldr	r0, [r7, #8]
 800e1a6:	f7fb fdaf 	bl	8009d08 <pbuf_add_header>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d004      	beq.n	800e1ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e1b0:	6938      	ldr	r0, [r7, #16]
 800e1b2:	f7fd f8ce 	bl	800b352 <tcp_seg_free>
    return NULL;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e037      	b.n	800e22a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	685a      	ldr	r2, [r3, #4]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	8ada      	ldrh	r2, [r3, #22]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	68dc      	ldr	r4, [r3, #12]
 800e1cc:	4610      	mov	r0, r2
 800e1ce:	f7fa f977 	bl	80084c0 <lwip_htons>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	8b1a      	ldrh	r2, [r3, #24]
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	68dc      	ldr	r4, [r3, #12]
 800e1de:	4610      	mov	r0, r2
 800e1e0:	f7fa f96e 	bl	80084c0 <lwip_htons>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	68dc      	ldr	r4, [r3, #12]
 800e1ec:	6838      	ldr	r0, [r7, #0]
 800e1ee:	f7fa f97c 	bl	80084ea <lwip_htonl>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	089b      	lsrs	r3, r3, #2
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	3305      	adds	r3, #5
 800e200:	b29b      	uxth	r3, r3
 800e202:	031b      	lsls	r3, r3, #12
 800e204:	b29a      	uxth	r2, r3
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	b29b      	uxth	r3, r3
 800e20a:	4313      	orrs	r3, r2
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	68dc      	ldr	r4, [r3, #12]
 800e212:	4610      	mov	r0, r2
 800e214:	f7fa f954 	bl	80084c0 <lwip_htons>
 800e218:	4603      	mov	r3, r0
 800e21a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	2200      	movs	r2, #0
 800e222:	749a      	strb	r2, [r3, #18]
 800e224:	2200      	movs	r2, #0
 800e226:	74da      	strb	r2, [r3, #19]
  return seg;
 800e228:	693b      	ldr	r3, [r7, #16]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	371c      	adds	r7, #28
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd90      	pop	{r4, r7, pc}
 800e232:	bf00      	nop
 800e234:	0801556c 	.word	0x0801556c
 800e238:	080155a0 	.word	0x080155a0
 800e23c:	080155c0 	.word	0x080155c0
 800e240:	080155e8 	.word	0x080155e8
 800e244:	0801560c 	.word	0x0801560c

0800e248 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e248:	b590      	push	{r4, r7, lr}
 800e24a:	b08b      	sub	sp, #44	; 0x2c
 800e24c:	af02      	add	r7, sp, #8
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e254:	2300      	movs	r3, #0
 800e256:	61fb      	str	r3, [r7, #28]
 800e258:	2300      	movs	r3, #0
 800e25a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d106      	bne.n	800e274 <tcp_split_unsent_seg+0x2c>
 800e266:	4b95      	ldr	r3, [pc, #596]	; (800e4bc <tcp_split_unsent_seg+0x274>)
 800e268:	f240 324b 	movw	r2, #843	; 0x34b
 800e26c:	4994      	ldr	r1, [pc, #592]	; (800e4c0 <tcp_split_unsent_seg+0x278>)
 800e26e:	4895      	ldr	r0, [pc, #596]	; (800e4c4 <tcp_split_unsent_seg+0x27c>)
 800e270:	f004 fe24 	bl	8012ebc <iprintf>

  useg = pcb->unsent;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e278:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d102      	bne.n	800e286 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e284:	e116      	b.n	800e4b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e286:	887b      	ldrh	r3, [r7, #2]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d109      	bne.n	800e2a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e28c:	4b8b      	ldr	r3, [pc, #556]	; (800e4bc <tcp_split_unsent_seg+0x274>)
 800e28e:	f240 3253 	movw	r2, #851	; 0x353
 800e292:	498d      	ldr	r1, [pc, #564]	; (800e4c8 <tcp_split_unsent_seg+0x280>)
 800e294:	488b      	ldr	r0, [pc, #556]	; (800e4c4 <tcp_split_unsent_seg+0x27c>)
 800e296:	f004 fe11 	bl	8012ebc <iprintf>
    return ERR_VAL;
 800e29a:	f06f 0305 	mvn.w	r3, #5
 800e29e:	e109      	b.n	800e4b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	891b      	ldrh	r3, [r3, #8]
 800e2a4:	887a      	ldrh	r2, [r7, #2]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d301      	bcc.n	800e2ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	e102      	b.n	800e4b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2b2:	887a      	ldrh	r2, [r7, #2]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d906      	bls.n	800e2c6 <tcp_split_unsent_seg+0x7e>
 800e2b8:	4b80      	ldr	r3, [pc, #512]	; (800e4bc <tcp_split_unsent_seg+0x274>)
 800e2ba:	f240 325b 	movw	r2, #859	; 0x35b
 800e2be:	4983      	ldr	r1, [pc, #524]	; (800e4cc <tcp_split_unsent_seg+0x284>)
 800e2c0:	4880      	ldr	r0, [pc, #512]	; (800e4c4 <tcp_split_unsent_seg+0x27c>)
 800e2c2:	f004 fdfb 	bl	8012ebc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	891b      	ldrh	r3, [r3, #8]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d106      	bne.n	800e2dc <tcp_split_unsent_seg+0x94>
 800e2ce:	4b7b      	ldr	r3, [pc, #492]	; (800e4bc <tcp_split_unsent_seg+0x274>)
 800e2d0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e2d4:	497e      	ldr	r1, [pc, #504]	; (800e4d0 <tcp_split_unsent_seg+0x288>)
 800e2d6:	487b      	ldr	r0, [pc, #492]	; (800e4c4 <tcp_split_unsent_seg+0x27c>)
 800e2d8:	f004 fdf0 	bl	8012ebc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	7a9b      	ldrb	r3, [r3, #10]
 800e2e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	f003 0304 	and.w	r3, r3, #4
 800e2ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	891a      	ldrh	r2, [r3, #8]
 800e2f2:	887b      	ldrh	r3, [r7, #2]
 800e2f4:	1ad3      	subs	r3, r2, r3
 800e2f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	89bb      	ldrh	r3, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	b29b      	uxth	r3, r3
 800e302:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e306:	4619      	mov	r1, r3
 800e308:	2036      	movs	r0, #54	; 0x36
 800e30a:	f7fb faaf 	bl	800986c <pbuf_alloc>
 800e30e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	2b00      	cmp	r3, #0
 800e314:	f000 80b7 	beq.w	800e486 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	891a      	ldrh	r2, [r3, #8]
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	891b      	ldrh	r3, [r3, #8]
 800e322:	1ad3      	subs	r3, r2, r3
 800e324:	b29a      	uxth	r2, r3
 800e326:	887b      	ldrh	r3, [r7, #2]
 800e328:	4413      	add	r3, r2
 800e32a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	6858      	ldr	r0, [r3, #4]
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	685a      	ldr	r2, [r3, #4]
 800e334:	7bbb      	ldrb	r3, [r7, #14]
 800e336:	18d1      	adds	r1, r2, r3
 800e338:	897b      	ldrh	r3, [r7, #10]
 800e33a:	89ba      	ldrh	r2, [r7, #12]
 800e33c:	f7fb ff80 	bl	800a240 <pbuf_copy_partial>
 800e340:	4603      	mov	r3, r0
 800e342:	461a      	mov	r2, r3
 800e344:	89bb      	ldrh	r3, [r7, #12]
 800e346:	4293      	cmp	r3, r2
 800e348:	f040 809f 	bne.w	800e48a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	899b      	ldrh	r3, [r3, #12]
 800e352:	b29b      	uxth	r3, r3
 800e354:	4618      	mov	r0, r3
 800e356:	f7fa f8b3 	bl	80084c0 <lwip_htons>
 800e35a:	4603      	mov	r3, r0
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e362:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e364:	2300      	movs	r3, #0
 800e366:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e368:	7efb      	ldrb	r3, [r7, #27]
 800e36a:	f003 0308 	and.w	r3, r3, #8
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d007      	beq.n	800e382 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e372:	7efb      	ldrb	r3, [r7, #27]
 800e374:	f023 0308 	bic.w	r3, r3, #8
 800e378:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e37a:	7ebb      	ldrb	r3, [r7, #26]
 800e37c:	f043 0308 	orr.w	r3, r3, #8
 800e380:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e382:	7efb      	ldrb	r3, [r7, #27]
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d007      	beq.n	800e39c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e38c:	7efb      	ldrb	r3, [r7, #27]
 800e38e:	f023 0301 	bic.w	r3, r3, #1
 800e392:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e394:	7ebb      	ldrb	r3, [r7, #26]
 800e396:	f043 0301 	orr.w	r3, r3, #1
 800e39a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fa f8a1 	bl	80084ea <lwip_htonl>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	887b      	ldrh	r3, [r7, #2]
 800e3ac:	18d1      	adds	r1, r2, r3
 800e3ae:	7eba      	ldrb	r2, [r7, #26]
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	6939      	ldr	r1, [r7, #16]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff fea7 	bl	800e10c <tcp_create_segment>
 800e3be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d063      	beq.n	800e48e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fb fdc0 	bl	8009f50 <pbuf_clen>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e3da:	1a9b      	subs	r3, r3, r2
 800e3dc:	b29a      	uxth	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	6858      	ldr	r0, [r3, #4]
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	891a      	ldrh	r2, [r3, #8]
 800e3ee:	89bb      	ldrh	r3, [r7, #12]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f7fb fb97 	bl	8009b28 <pbuf_realloc>
  useg->len -= remainder;
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	891a      	ldrh	r2, [r3, #8]
 800e3fe:	89bb      	ldrh	r3, [r7, #12]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	b29a      	uxth	r2, r3
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	899b      	ldrh	r3, [r3, #12]
 800e40e:	b29c      	uxth	r4, r3
 800e410:	7efb      	ldrb	r3, [r7, #27]
 800e412:	b29b      	uxth	r3, r3
 800e414:	4618      	mov	r0, r3
 800e416:	f7fa f853 	bl	80084c0 <lwip_htons>
 800e41a:	4603      	mov	r3, r0
 800e41c:	461a      	mov	r2, r3
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	4322      	orrs	r2, r4
 800e424:	b292      	uxth	r2, r2
 800e426:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	4618      	mov	r0, r3
 800e42e:	f7fb fd8f 	bl	8009f50 <pbuf_clen>
 800e432:	4603      	mov	r3, r0
 800e434:	461a      	mov	r2, r3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e43c:	4413      	add	r3, r2
 800e43e:	b29a      	uxth	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	685b      	ldr	r3, [r3, #4]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fb fd80 	bl	8009f50 <pbuf_clen>
 800e450:	4603      	mov	r3, r0
 800e452:	461a      	mov	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e45a:	4413      	add	r3, r2
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	69fa      	ldr	r2, [r7, #28]
 800e470:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d103      	bne.n	800e482 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2200      	movs	r2, #0
 800e47e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e482:	2300      	movs	r3, #0
 800e484:	e016      	b.n	800e4b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e486:	bf00      	nop
 800e488:	e002      	b.n	800e490 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e48a:	bf00      	nop
 800e48c:	e000      	b.n	800e490 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e48e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d006      	beq.n	800e4a4 <tcp_split_unsent_seg+0x25c>
 800e496:	4b09      	ldr	r3, [pc, #36]	; (800e4bc <tcp_split_unsent_seg+0x274>)
 800e498:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e49c:	490d      	ldr	r1, [pc, #52]	; (800e4d4 <tcp_split_unsent_seg+0x28c>)
 800e49e:	4809      	ldr	r0, [pc, #36]	; (800e4c4 <tcp_split_unsent_seg+0x27c>)
 800e4a0:	f004 fd0c 	bl	8012ebc <iprintf>
  if (p != NULL) {
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d002      	beq.n	800e4b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e4aa:	6938      	ldr	r0, [r7, #16]
 800e4ac:	f7fb fcc2 	bl	8009e34 <pbuf_free>
  }

  return ERR_MEM;
 800e4b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3724      	adds	r7, #36	; 0x24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd90      	pop	{r4, r7, pc}
 800e4bc:	0801556c 	.word	0x0801556c
 800e4c0:	08015900 	.word	0x08015900
 800e4c4:	080155c0 	.word	0x080155c0
 800e4c8:	08015924 	.word	0x08015924
 800e4cc:	08015948 	.word	0x08015948
 800e4d0:	08015958 	.word	0x08015958
 800e4d4:	08015968 	.word	0x08015968

0800e4d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e4d8:	b590      	push	{r4, r7, lr}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d106      	bne.n	800e4f4 <tcp_send_fin+0x1c>
 800e4e6:	4b21      	ldr	r3, [pc, #132]	; (800e56c <tcp_send_fin+0x94>)
 800e4e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e4ec:	4920      	ldr	r1, [pc, #128]	; (800e570 <tcp_send_fin+0x98>)
 800e4ee:	4821      	ldr	r0, [pc, #132]	; (800e574 <tcp_send_fin+0x9c>)
 800e4f0:	f004 fce4 	bl	8012ebc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d02e      	beq.n	800e55a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e500:	60fb      	str	r3, [r7, #12]
 800e502:	e002      	b.n	800e50a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1f8      	bne.n	800e504 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	899b      	ldrh	r3, [r3, #12]
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f9 ffd0 	bl	80084c0 <lwip_htons>
 800e520:	4603      	mov	r3, r0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	f003 0307 	and.w	r3, r3, #7
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d116      	bne.n	800e55a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	899b      	ldrh	r3, [r3, #12]
 800e532:	b29c      	uxth	r4, r3
 800e534:	2001      	movs	r0, #1
 800e536:	f7f9 ffc3 	bl	80084c0 <lwip_htons>
 800e53a:	4603      	mov	r3, r0
 800e53c:	461a      	mov	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	4322      	orrs	r2, r4
 800e544:	b292      	uxth	r2, r2
 800e546:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	8b5b      	ldrh	r3, [r3, #26]
 800e54c:	f043 0320 	orr.w	r3, r3, #32
 800e550:	b29a      	uxth	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	e004      	b.n	800e564 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e55a:	2101      	movs	r1, #1
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f80b 	bl	800e578 <tcp_enqueue_flags>
 800e562:	4603      	mov	r3, r0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3714      	adds	r7, #20
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd90      	pop	{r4, r7, pc}
 800e56c:	0801556c 	.word	0x0801556c
 800e570:	08015974 	.word	0x08015974
 800e574:	080155c0 	.word	0x080155c0

0800e578 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08a      	sub	sp, #40	; 0x28
 800e57c:	af02      	add	r7, sp, #8
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	460b      	mov	r3, r1
 800e582:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e584:	2300      	movs	r3, #0
 800e586:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e58c:	78fb      	ldrb	r3, [r7, #3]
 800e58e:	f003 0303 	and.w	r3, r3, #3
 800e592:	2b00      	cmp	r3, #0
 800e594:	d106      	bne.n	800e5a4 <tcp_enqueue_flags+0x2c>
 800e596:	4b67      	ldr	r3, [pc, #412]	; (800e734 <tcp_enqueue_flags+0x1bc>)
 800e598:	f240 4211 	movw	r2, #1041	; 0x411
 800e59c:	4966      	ldr	r1, [pc, #408]	; (800e738 <tcp_enqueue_flags+0x1c0>)
 800e59e:	4867      	ldr	r0, [pc, #412]	; (800e73c <tcp_enqueue_flags+0x1c4>)
 800e5a0:	f004 fc8c 	bl	8012ebc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d106      	bne.n	800e5b8 <tcp_enqueue_flags+0x40>
 800e5aa:	4b62      	ldr	r3, [pc, #392]	; (800e734 <tcp_enqueue_flags+0x1bc>)
 800e5ac:	f240 4213 	movw	r2, #1043	; 0x413
 800e5b0:	4963      	ldr	r1, [pc, #396]	; (800e740 <tcp_enqueue_flags+0x1c8>)
 800e5b2:	4862      	ldr	r0, [pc, #392]	; (800e73c <tcp_enqueue_flags+0x1c4>)
 800e5b4:	f004 fc82 	bl	8012ebc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e5b8:	78fb      	ldrb	r3, [r7, #3]
 800e5ba:	f003 0302 	and.w	r3, r3, #2
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d001      	beq.n	800e5c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e5c6:	7ffb      	ldrb	r3, [r7, #31]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	f003 0304 	and.w	r3, r3, #4
 800e5d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e5d2:	7dfb      	ldrb	r3, [r7, #23]
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e5da:	4619      	mov	r1, r3
 800e5dc:	2036      	movs	r0, #54	; 0x36
 800e5de:	f7fb f945 	bl	800986c <pbuf_alloc>
 800e5e2:	6138      	str	r0, [r7, #16]
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	8b5b      	ldrh	r3, [r3, #26]
 800e5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e5f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5fc:	e095      	b.n	800e72a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	895a      	ldrh	r2, [r3, #10]
 800e602:	7dfb      	ldrb	r3, [r7, #23]
 800e604:	b29b      	uxth	r3, r3
 800e606:	429a      	cmp	r2, r3
 800e608:	d206      	bcs.n	800e618 <tcp_enqueue_flags+0xa0>
 800e60a:	4b4a      	ldr	r3, [pc, #296]	; (800e734 <tcp_enqueue_flags+0x1bc>)
 800e60c:	f240 4239 	movw	r2, #1081	; 0x439
 800e610:	494c      	ldr	r1, [pc, #304]	; (800e744 <tcp_enqueue_flags+0x1cc>)
 800e612:	484a      	ldr	r0, [pc, #296]	; (800e73c <tcp_enqueue_flags+0x1c4>)
 800e614:	f004 fc52 	bl	8012ebc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e61c:	78fa      	ldrb	r2, [r7, #3]
 800e61e:	7ffb      	ldrb	r3, [r7, #31]
 800e620:	9300      	str	r3, [sp, #0]
 800e622:	460b      	mov	r3, r1
 800e624:	6939      	ldr	r1, [r7, #16]
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7ff fd70 	bl	800e10c <tcp_create_segment>
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d109      	bne.n	800e648 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	8b5b      	ldrh	r3, [r3, #26]
 800e638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e646:	e070      	b.n	800e72a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	f003 0303 	and.w	r3, r3, #3
 800e650:	2b00      	cmp	r3, #0
 800e652:	d006      	beq.n	800e662 <tcp_enqueue_flags+0xea>
 800e654:	4b37      	ldr	r3, [pc, #220]	; (800e734 <tcp_enqueue_flags+0x1bc>)
 800e656:	f240 4242 	movw	r2, #1090	; 0x442
 800e65a:	493b      	ldr	r1, [pc, #236]	; (800e748 <tcp_enqueue_flags+0x1d0>)
 800e65c:	4837      	ldr	r0, [pc, #220]	; (800e73c <tcp_enqueue_flags+0x1c4>)
 800e65e:	f004 fc2d 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	891b      	ldrh	r3, [r3, #8]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d006      	beq.n	800e678 <tcp_enqueue_flags+0x100>
 800e66a:	4b32      	ldr	r3, [pc, #200]	; (800e734 <tcp_enqueue_flags+0x1bc>)
 800e66c:	f240 4243 	movw	r2, #1091	; 0x443
 800e670:	4936      	ldr	r1, [pc, #216]	; (800e74c <tcp_enqueue_flags+0x1d4>)
 800e672:	4832      	ldr	r0, [pc, #200]	; (800e73c <tcp_enqueue_flags+0x1c4>)
 800e674:	f004 fc22 	bl	8012ebc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d103      	bne.n	800e688 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	66da      	str	r2, [r3, #108]	; 0x6c
 800e686:	e00d      	b.n	800e6a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e68c:	61bb      	str	r3, [r7, #24]
 800e68e:	e002      	b.n	800e696 <tcp_enqueue_flags+0x11e>
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	61bb      	str	r3, [r7, #24]
 800e696:	69bb      	ldr	r3, [r7, #24]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1f8      	bne.n	800e690 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e69e:	69bb      	ldr	r3, [r7, #24]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	f003 0302 	and.w	r3, r3, #2
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d104      	bne.n	800e6c0 <tcp_enqueue_flags+0x148>
 800e6b6:	78fb      	ldrb	r3, [r7, #3]
 800e6b8:	f003 0301 	and.w	r3, r3, #1
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d004      	beq.n	800e6ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e6ca:	78fb      	ldrb	r3, [r7, #3]
 800e6cc:	f003 0301 	and.w	r3, r3, #1
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d006      	beq.n	800e6e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	8b5b      	ldrh	r3, [r3, #26]
 800e6d8:	f043 0320 	orr.w	r3, r3, #32
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7fb fc32 	bl	8009f50 <pbuf_clen>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6f6:	4413      	add	r3, r2
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e706:	2b00      	cmp	r3, #0
 800e708:	d00e      	beq.n	800e728 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d10a      	bne.n	800e728 <tcp_enqueue_flags+0x1b0>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e716:	2b00      	cmp	r3, #0
 800e718:	d106      	bne.n	800e728 <tcp_enqueue_flags+0x1b0>
 800e71a:	4b06      	ldr	r3, [pc, #24]	; (800e734 <tcp_enqueue_flags+0x1bc>)
 800e71c:	f240 4265 	movw	r2, #1125	; 0x465
 800e720:	490b      	ldr	r1, [pc, #44]	; (800e750 <tcp_enqueue_flags+0x1d8>)
 800e722:	4806      	ldr	r0, [pc, #24]	; (800e73c <tcp_enqueue_flags+0x1c4>)
 800e724:	f004 fbca 	bl	8012ebc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e728:	2300      	movs	r3, #0
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3720      	adds	r7, #32
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	0801556c 	.word	0x0801556c
 800e738:	08015990 	.word	0x08015990
 800e73c:	080155c0 	.word	0x080155c0
 800e740:	080159e8 	.word	0x080159e8
 800e744:	08015a08 	.word	0x08015a08
 800e748:	08015a44 	.word	0x08015a44
 800e74c:	08015a5c 	.word	0x08015a5c
 800e750:	08015a88 	.word	0x08015a88

0800e754 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e754:	b5b0      	push	{r4, r5, r7, lr}
 800e756:	b08a      	sub	sp, #40	; 0x28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d106      	bne.n	800e770 <tcp_output+0x1c>
 800e762:	4b8a      	ldr	r3, [pc, #552]	; (800e98c <tcp_output+0x238>)
 800e764:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e768:	4989      	ldr	r1, [pc, #548]	; (800e990 <tcp_output+0x23c>)
 800e76a:	488a      	ldr	r0, [pc, #552]	; (800e994 <tcp_output+0x240>)
 800e76c:	f004 fba6 	bl	8012ebc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	7d1b      	ldrb	r3, [r3, #20]
 800e774:	2b01      	cmp	r3, #1
 800e776:	d106      	bne.n	800e786 <tcp_output+0x32>
 800e778:	4b84      	ldr	r3, [pc, #528]	; (800e98c <tcp_output+0x238>)
 800e77a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e77e:	4986      	ldr	r1, [pc, #536]	; (800e998 <tcp_output+0x244>)
 800e780:	4884      	ldr	r0, [pc, #528]	; (800e994 <tcp_output+0x240>)
 800e782:	f004 fb9b 	bl	8012ebc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e786:	4b85      	ldr	r3, [pc, #532]	; (800e99c <tcp_output+0x248>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d101      	bne.n	800e794 <tcp_output+0x40>
    return ERR_OK;
 800e790:	2300      	movs	r3, #0
 800e792:	e1ce      	b.n	800eb32 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	bf28      	it	cs
 800e7a4:	4613      	movcs	r3, r2
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10b      	bne.n	800e7ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ba:	f003 0302 	and.w	r3, r3, #2
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f000 81aa 	beq.w	800eb18 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f000 fdcb 	bl	800f360 <tcp_send_empty_ack>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	e1b1      	b.n	800eb32 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fc7c 	bl	800e0d4 <tcp_route>
 800e7dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d102      	bne.n	800e7ea <tcp_output+0x96>
    return ERR_RTE;
 800e7e4:	f06f 0303 	mvn.w	r3, #3
 800e7e8:	e1a3      	b.n	800eb32 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d003      	beq.n	800e7f8 <tcp_output+0xa4>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d111      	bne.n	800e81c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d002      	beq.n	800e804 <tcp_output+0xb0>
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	3304      	adds	r3, #4
 800e802:	e000      	b.n	800e806 <tcp_output+0xb2>
 800e804:	2300      	movs	r3, #0
 800e806:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d102      	bne.n	800e814 <tcp_output+0xc0>
      return ERR_RTE;
 800e80e:	f06f 0303 	mvn.w	r3, #3
 800e812:	e18e      	b.n	800eb32 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	4618      	mov	r0, r3
 800e824:	f7f9 fe61 	bl	80084ea <lwip_htonl>
 800e828:	4602      	mov	r2, r0
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e832:	8912      	ldrh	r2, [r2, #8]
 800e834:	4413      	add	r3, r2
 800e836:	69ba      	ldr	r2, [r7, #24]
 800e838:	429a      	cmp	r2, r3
 800e83a:	d227      	bcs.n	800e88c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e842:	461a      	mov	r2, r3
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	4293      	cmp	r3, r2
 800e848:	d114      	bne.n	800e874 <tcp_output+0x120>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d110      	bne.n	800e874 <tcp_output+0x120>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d10b      	bne.n	800e874 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	8b5b      	ldrh	r3, [r3, #26]
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f000 814d 	beq.w	800eb1c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fd6c 	bl	800f360 <tcp_send_empty_ack>
 800e888:	4603      	mov	r3, r0
 800e88a:	e152      	b.n	800eb32 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e898:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e89a:	6a3b      	ldr	r3, [r7, #32]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f000 811c 	beq.w	800eada <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e8a2:	e002      	b.n	800e8aa <tcp_output+0x156>
 800e8a4:	6a3b      	ldr	r3, [r7, #32]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	623b      	str	r3, [r7, #32]
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1f8      	bne.n	800e8a4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e8b2:	e112      	b.n	800eada <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	899b      	ldrh	r3, [r3, #12]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7f9 fdff 	bl	80084c0 <lwip_htons>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	f003 0304 	and.w	r3, r3, #4
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d006      	beq.n	800e8dc <tcp_output+0x188>
 800e8ce:	4b2f      	ldr	r3, [pc, #188]	; (800e98c <tcp_output+0x238>)
 800e8d0:	f240 5236 	movw	r2, #1334	; 0x536
 800e8d4:	4932      	ldr	r1, [pc, #200]	; (800e9a0 <tcp_output+0x24c>)
 800e8d6:	482f      	ldr	r0, [pc, #188]	; (800e994 <tcp_output+0x240>)
 800e8d8:	f004 faf0 	bl	8012ebc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d01f      	beq.n	800e924 <tcp_output+0x1d0>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	8b5b      	ldrh	r3, [r3, #26]
 800e8e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d119      	bne.n	800e924 <tcp_output+0x1d0>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00b      	beq.n	800e910 <tcp_output+0x1bc>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d110      	bne.n	800e924 <tcp_output+0x1d0>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e906:	891a      	ldrh	r2, [r3, #8]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d209      	bcs.n	800e924 <tcp_output+0x1d0>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e916:	2b00      	cmp	r3, #0
 800e918:	d004      	beq.n	800e924 <tcp_output+0x1d0>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e920:	2b08      	cmp	r3, #8
 800e922:	d901      	bls.n	800e928 <tcp_output+0x1d4>
 800e924:	2301      	movs	r3, #1
 800e926:	e000      	b.n	800e92a <tcp_output+0x1d6>
 800e928:	2300      	movs	r3, #0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d106      	bne.n	800e93c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	8b5b      	ldrh	r3, [r3, #26]
 800e932:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e936:	2b00      	cmp	r3, #0
 800e938:	f000 80e4 	beq.w	800eb04 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	7d1b      	ldrb	r3, [r3, #20]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d00d      	beq.n	800e960 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	899b      	ldrh	r3, [r3, #12]
 800e94a:	b29c      	uxth	r4, r3
 800e94c:	2010      	movs	r0, #16
 800e94e:	f7f9 fdb7 	bl	80084c0 <lwip_htons>
 800e952:	4603      	mov	r3, r0
 800e954:	461a      	mov	r2, r3
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	4322      	orrs	r2, r4
 800e95c:	b292      	uxth	r2, r2
 800e95e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e960:	697a      	ldr	r2, [r7, #20]
 800e962:	6879      	ldr	r1, [r7, #4]
 800e964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e966:	f000 f909 	bl	800eb7c <tcp_output_segment>
 800e96a:	4603      	mov	r3, r0
 800e96c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d016      	beq.n	800e9a4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
      return err;
 800e984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e988:	e0d3      	b.n	800eb32 <tcp_output+0x3de>
 800e98a:	bf00      	nop
 800e98c:	0801556c 	.word	0x0801556c
 800e990:	08015ab0 	.word	0x08015ab0
 800e994:	080155c0 	.word	0x080155c0
 800e998:	08015ac8 	.word	0x08015ac8
 800e99c:	2400bd58 	.word	0x2400bd58
 800e9a0:	08015af0 	.word	0x08015af0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	7d1b      	ldrb	r3, [r3, #20]
 800e9b0:	2b02      	cmp	r3, #2
 800e9b2:	d006      	beq.n	800e9c2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	8b5b      	ldrh	r3, [r3, #26]
 800e9b8:	f023 0303 	bic.w	r3, r3, #3
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7f9 fd8e 	bl	80084ea <lwip_htonl>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d2:	891b      	ldrh	r3, [r3, #8]
 800e9d4:	461d      	mov	r5, r3
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	899b      	ldrh	r3, [r3, #12]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f9 fd6e 	bl	80084c0 <lwip_htons>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	f003 0303 	and.w	r3, r3, #3
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d001      	beq.n	800e9f4 <tcp_output+0x2a0>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e000      	b.n	800e9f6 <tcp_output+0x2a2>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	442b      	add	r3, r5
 800e9f8:	4423      	add	r3, r4
 800e9fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	da02      	bge.n	800ea0e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea10:	891b      	ldrh	r3, [r3, #8]
 800ea12:	461c      	mov	r4, r3
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	68db      	ldr	r3, [r3, #12]
 800ea18:	899b      	ldrh	r3, [r3, #12]
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7f9 fd4f 	bl	80084c0 <lwip_htons>
 800ea22:	4603      	mov	r3, r0
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	f003 0303 	and.w	r3, r3, #3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <tcp_output+0x2de>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	e000      	b.n	800ea34 <tcp_output+0x2e0>
 800ea32:	2300      	movs	r3, #0
 800ea34:	4423      	add	r3, r4
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d049      	beq.n	800eace <tcp_output+0x37a>
      seg->next = NULL;
 800ea3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d105      	bne.n	800ea54 <tcp_output+0x300>
        pcb->unacked = seg;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea4c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea50:	623b      	str	r3, [r7, #32]
 800ea52:	e03f      	b.n	800ead4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7f9 fd45 	bl	80084ea <lwip_htonl>
 800ea60:	4604      	mov	r4, r0
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f9 fd3e 	bl	80084ea <lwip_htonl>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	1ae3      	subs	r3, r4, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	da24      	bge.n	800eac0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	3370      	adds	r3, #112	; 0x70
 800ea7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ea7c:	e002      	b.n	800ea84 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d011      	beq.n	800eab0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7f9 fd28 	bl	80084ea <lwip_htonl>
 800ea9a:	4604      	mov	r4, r0
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7f9 fd21 	bl	80084ea <lwip_htonl>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	dbe6      	blt.n	800ea7e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	e009      	b.n	800ead4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800eac0:	6a3b      	ldr	r3, [r7, #32]
 800eac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eac4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800eac6:	6a3b      	ldr	r3, [r7, #32]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	623b      	str	r3, [r7, #32]
 800eacc:	e002      	b.n	800ead4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800eace:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ead0:	f7fc fc3f 	bl	800b352 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d012      	beq.n	800eb06 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f9 fcff 	bl	80084ea <lwip_htonl>
 800eaec:	4602      	mov	r2, r0
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf6:	8912      	ldrh	r2, [r2, #8]
 800eaf8:	4413      	add	r3, r2
  while (seg != NULL &&
 800eafa:	69ba      	ldr	r2, [r7, #24]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	f4bf aed9 	bcs.w	800e8b4 <tcp_output+0x160>
 800eb02:	e000      	b.n	800eb06 <tcp_output+0x3b2>
      break;
 800eb04:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d108      	bne.n	800eb20 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800eb16:	e004      	b.n	800eb22 <tcp_output+0x3ce>
    goto output_done;
 800eb18:	bf00      	nop
 800eb1a:	e002      	b.n	800eb22 <tcp_output+0x3ce>
    goto output_done;
 800eb1c:	bf00      	nop
 800eb1e:	e000      	b.n	800eb22 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800eb20:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	8b5b      	ldrh	r3, [r3, #26]
 800eb26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800eb30:	2300      	movs	r3, #0
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3728      	adds	r7, #40	; 0x28
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bdb0      	pop	{r4, r5, r7, pc}
 800eb3a:	bf00      	nop

0800eb3c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d106      	bne.n	800eb58 <tcp_output_segment_busy+0x1c>
 800eb4a:	4b09      	ldr	r3, [pc, #36]	; (800eb70 <tcp_output_segment_busy+0x34>)
 800eb4c:	f240 529a 	movw	r2, #1434	; 0x59a
 800eb50:	4908      	ldr	r1, [pc, #32]	; (800eb74 <tcp_output_segment_busy+0x38>)
 800eb52:	4809      	ldr	r0, [pc, #36]	; (800eb78 <tcp_output_segment_busy+0x3c>)
 800eb54:	f004 f9b2 	bl	8012ebc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	7b9b      	ldrb	r3, [r3, #14]
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d001      	beq.n	800eb66 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800eb62:	2301      	movs	r3, #1
 800eb64:	e000      	b.n	800eb68 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	0801556c 	.word	0x0801556c
 800eb74:	08015b08 	.word	0x08015b08
 800eb78:	080155c0 	.word	0x080155c0

0800eb7c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800eb7c:	b5b0      	push	{r4, r5, r7, lr}
 800eb7e:	b08c      	sub	sp, #48	; 0x30
 800eb80:	af04      	add	r7, sp, #16
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d106      	bne.n	800eb9c <tcp_output_segment+0x20>
 800eb8e:	4b63      	ldr	r3, [pc, #396]	; (800ed1c <tcp_output_segment+0x1a0>)
 800eb90:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800eb94:	4962      	ldr	r1, [pc, #392]	; (800ed20 <tcp_output_segment+0x1a4>)
 800eb96:	4863      	ldr	r0, [pc, #396]	; (800ed24 <tcp_output_segment+0x1a8>)
 800eb98:	f004 f990 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d106      	bne.n	800ebb0 <tcp_output_segment+0x34>
 800eba2:	4b5e      	ldr	r3, [pc, #376]	; (800ed1c <tcp_output_segment+0x1a0>)
 800eba4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800eba8:	495f      	ldr	r1, [pc, #380]	; (800ed28 <tcp_output_segment+0x1ac>)
 800ebaa:	485e      	ldr	r0, [pc, #376]	; (800ed24 <tcp_output_segment+0x1a8>)
 800ebac:	f004 f986 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d106      	bne.n	800ebc4 <tcp_output_segment+0x48>
 800ebb6:	4b59      	ldr	r3, [pc, #356]	; (800ed1c <tcp_output_segment+0x1a0>)
 800ebb8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ebbc:	495b      	ldr	r1, [pc, #364]	; (800ed2c <tcp_output_segment+0x1b0>)
 800ebbe:	4859      	ldr	r0, [pc, #356]	; (800ed24 <tcp_output_segment+0x1a8>)
 800ebc0:	f004 f97c 	bl	8012ebc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7ff ffb9 	bl	800eb3c <tcp_output_segment_busy>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e09f      	b.n	800ed14 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	68dc      	ldr	r4, [r3, #12]
 800ebdc:	4610      	mov	r0, r2
 800ebde:	f7f9 fc84 	bl	80084ea <lwip_htonl>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	68dc      	ldr	r4, [r3, #12]
 800ebee:	4610      	mov	r0, r2
 800ebf0:	f7f9 fc66 	bl	80084c0 <lwip_htons>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec00:	441a      	add	r2, r3
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	3314      	adds	r3, #20
 800ec0c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	7a9b      	ldrb	r3, [r3, #10]
 800ec12:	f003 0301 	and.w	r3, r3, #1
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d015      	beq.n	800ec46 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	461a      	mov	r2, r3
 800ec20:	6879      	ldr	r1, [r7, #4]
 800ec22:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ec26:	f7fc fe8b 	bl	800b940 <tcp_eff_send_mss_netif>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ec2e:	8b7b      	ldrh	r3, [r7, #26]
 800ec30:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7f9 fc58 	bl	80084ea <lwip_htonl>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	3304      	adds	r3, #4
 800ec44:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	da02      	bge.n	800ec56 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2200      	movs	r2, #0
 800ec54:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10c      	bne.n	800ec78 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ec5e:	4b34      	ldr	r3, [pc, #208]	; (800ed30 <tcp_output_segment+0x1b4>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7f9 fc3c 	bl	80084ea <lwip_htonl>
 800ec72:	4602      	mov	r2, r0
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	68da      	ldr	r2, [r3, #12]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	1ad3      	subs	r3, r2, r3
 800ec84:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	8959      	ldrh	r1, [r3, #10]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	8b3a      	ldrh	r2, [r7, #24]
 800ec92:	1a8a      	subs	r2, r1, r2
 800ec94:	b292      	uxth	r2, r2
 800ec96:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	8919      	ldrh	r1, [r3, #8]
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	8b3a      	ldrh	r2, [r7, #24]
 800eca4:	1a8a      	subs	r2, r1, r2
 800eca6:	b292      	uxth	r2, r2
 800eca8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	68d2      	ldr	r2, [r2, #12]
 800ecb2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	741a      	strb	r2, [r3, #16]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	f103 0214 	add.w	r2, r3, #20
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	7a9b      	ldrb	r3, [r3, #10]
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	f003 0304 	and.w	r3, r3, #4
 800ecd2:	4413      	add	r3, r2
 800ecd4:	69fa      	ldr	r2, [r7, #28]
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d006      	beq.n	800ece8 <tcp_output_segment+0x16c>
 800ecda:	4b10      	ldr	r3, [pc, #64]	; (800ed1c <tcp_output_segment+0x1a0>)
 800ecdc:	f240 621c 	movw	r2, #1564	; 0x61c
 800ece0:	4914      	ldr	r1, [pc, #80]	; (800ed34 <tcp_output_segment+0x1b8>)
 800ece2:	4810      	ldr	r0, [pc, #64]	; (800ed24 <tcp_output_segment+0x1a8>)
 800ece4:	f004 f8ea 	bl	8012ebc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6858      	ldr	r0, [r3, #4]
 800ecec:	68b9      	ldr	r1, [r7, #8]
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	1d1c      	adds	r4, r3, #4
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	7add      	ldrb	r5, [r3, #11]
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	7a9b      	ldrb	r3, [r3, #10]
 800ecfa:	687a      	ldr	r2, [r7, #4]
 800ecfc:	9202      	str	r2, [sp, #8]
 800ecfe:	2206      	movs	r2, #6
 800ed00:	9201      	str	r2, [sp, #4]
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	462b      	mov	r3, r5
 800ed06:	4622      	mov	r2, r4
 800ed08:	f002 fdbc 	bl	8011884 <ip4_output_if>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ed10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3720      	adds	r7, #32
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ed1c:	0801556c 	.word	0x0801556c
 800ed20:	08015b30 	.word	0x08015b30
 800ed24:	080155c0 	.word	0x080155c0
 800ed28:	08015b50 	.word	0x08015b50
 800ed2c:	08015b70 	.word	0x08015b70
 800ed30:	2400bd0c 	.word	0x2400bd0c
 800ed34:	08015b94 	.word	0x08015b94

0800ed38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ed38:	b5b0      	push	{r4, r5, r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <tcp_rexmit_rto_prepare+0x1c>
 800ed46:	4b31      	ldr	r3, [pc, #196]	; (800ee0c <tcp_rexmit_rto_prepare+0xd4>)
 800ed48:	f240 6263 	movw	r2, #1635	; 0x663
 800ed4c:	4930      	ldr	r1, [pc, #192]	; (800ee10 <tcp_rexmit_rto_prepare+0xd8>)
 800ed4e:	4831      	ldr	r0, [pc, #196]	; (800ee14 <tcp_rexmit_rto_prepare+0xdc>)
 800ed50:	f004 f8b4 	bl	8012ebc <iprintf>

  if (pcb->unacked == NULL) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d102      	bne.n	800ed62 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ed5c:	f06f 0305 	mvn.w	r3, #5
 800ed60:	e050      	b.n	800ee04 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed66:	60fb      	str	r3, [r7, #12]
 800ed68:	e00b      	b.n	800ed82 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f7ff fee6 	bl	800eb3c <tcp_output_segment_busy>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ed76:	f06f 0305 	mvn.w	r3, #5
 800ed7a:	e043      	b.n	800ee04 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	60fb      	str	r3, [r7, #12]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1ef      	bne.n	800ed6a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ed8a:	68f8      	ldr	r0, [r7, #12]
 800ed8c:	f7ff fed6 	bl	800eb3c <tcp_output_segment_busy>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d002      	beq.n	800ed9c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ed96:	f06f 0305 	mvn.w	r3, #5
 800ed9a:	e033      	b.n	800ee04 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	8b5b      	ldrh	r3, [r3, #26]
 800edb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800edba:	b29a      	uxth	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68db      	ldr	r3, [r3, #12]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7f9 fb8f 	bl	80084ea <lwip_htonl>
 800edcc:	4604      	mov	r4, r0
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	891b      	ldrh	r3, [r3, #8]
 800edd2:	461d      	mov	r5, r3
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	899b      	ldrh	r3, [r3, #12]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	4618      	mov	r0, r3
 800edde:	f7f9 fb6f 	bl	80084c0 <lwip_htons>
 800ede2:	4603      	mov	r3, r0
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	f003 0303 	and.w	r3, r3, #3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d001      	beq.n	800edf2 <tcp_rexmit_rto_prepare+0xba>
 800edee:	2301      	movs	r3, #1
 800edf0:	e000      	b.n	800edf4 <tcp_rexmit_rto_prepare+0xbc>
 800edf2:	2300      	movs	r3, #0
 800edf4:	442b      	add	r3, r5
 800edf6:	18e2      	adds	r2, r4, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bdb0      	pop	{r4, r5, r7, pc}
 800ee0c:	0801556c 	.word	0x0801556c
 800ee10:	08015ba8 	.word	0x08015ba8
 800ee14:	080155c0 	.word	0x080155c0

0800ee18 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d106      	bne.n	800ee34 <tcp_rexmit_rto_commit+0x1c>
 800ee26:	4b0d      	ldr	r3, [pc, #52]	; (800ee5c <tcp_rexmit_rto_commit+0x44>)
 800ee28:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ee2c:	490c      	ldr	r1, [pc, #48]	; (800ee60 <tcp_rexmit_rto_commit+0x48>)
 800ee2e:	480d      	ldr	r0, [pc, #52]	; (800ee64 <tcp_rexmit_rto_commit+0x4c>)
 800ee30:	f004 f844 	bl	8012ebc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee3a:	2bff      	cmp	r3, #255	; 0xff
 800ee3c:	d007      	beq.n	800ee4e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee44:	3301      	adds	r3, #1
 800ee46:	b2da      	uxtb	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f7ff fc80 	bl	800e754 <tcp_output>
}
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	0801556c 	.word	0x0801556c
 800ee60:	08015bcc 	.word	0x08015bcc
 800ee64:	080155c0 	.word	0x080155c0

0800ee68 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d106      	bne.n	800ee84 <tcp_rexmit_rto+0x1c>
 800ee76:	4b0a      	ldr	r3, [pc, #40]	; (800eea0 <tcp_rexmit_rto+0x38>)
 800ee78:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ee7c:	4909      	ldr	r1, [pc, #36]	; (800eea4 <tcp_rexmit_rto+0x3c>)
 800ee7e:	480a      	ldr	r0, [pc, #40]	; (800eea8 <tcp_rexmit_rto+0x40>)
 800ee80:	f004 f81c 	bl	8012ebc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f7ff ff57 	bl	800ed38 <tcp_rexmit_rto_prepare>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d102      	bne.n	800ee96 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7ff ffc1 	bl	800ee18 <tcp_rexmit_rto_commit>
  }
}
 800ee96:	bf00      	nop
 800ee98:	3708      	adds	r7, #8
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	0801556c 	.word	0x0801556c
 800eea4:	08015bf0 	.word	0x08015bf0
 800eea8:	080155c0 	.word	0x080155c0

0800eeac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800eeac:	b590      	push	{r4, r7, lr}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d106      	bne.n	800eec8 <tcp_rexmit+0x1c>
 800eeba:	4b2f      	ldr	r3, [pc, #188]	; (800ef78 <tcp_rexmit+0xcc>)
 800eebc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800eec0:	492e      	ldr	r1, [pc, #184]	; (800ef7c <tcp_rexmit+0xd0>)
 800eec2:	482f      	ldr	r0, [pc, #188]	; (800ef80 <tcp_rexmit+0xd4>)
 800eec4:	f003 fffa 	bl	8012ebc <iprintf>

  if (pcb->unacked == NULL) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d102      	bne.n	800eed6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800eed0:	f06f 0305 	mvn.w	r3, #5
 800eed4:	e04c      	b.n	800ef70 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeda:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800eedc:	68b8      	ldr	r0, [r7, #8]
 800eede:	f7ff fe2d 	bl	800eb3c <tcp_output_segment_busy>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800eee8:	f06f 0305 	mvn.w	r3, #5
 800eeec:	e040      	b.n	800ef70 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	336c      	adds	r3, #108	; 0x6c
 800eefa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eefc:	e002      	b.n	800ef04 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d011      	beq.n	800ef30 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7f9 fae8 	bl	80084ea <lwip_htonl>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7f9 fae1 	bl	80084ea <lwip_htonl>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dbe6      	blt.n	800eefe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d103      	bne.n	800ef4e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef54:	2bff      	cmp	r3, #255	; 0xff
 800ef56:	d007      	beq.n	800ef68 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef5e:	3301      	adds	r3, #1
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ef6e:	2300      	movs	r3, #0
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3714      	adds	r7, #20
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd90      	pop	{r4, r7, pc}
 800ef78:	0801556c 	.word	0x0801556c
 800ef7c:	08015c0c 	.word	0x08015c0c
 800ef80:	080155c0 	.word	0x080155c0

0800ef84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <tcp_rexmit_fast+0x1c>
 800ef92:	4b2a      	ldr	r3, [pc, #168]	; (800f03c <tcp_rexmit_fast+0xb8>)
 800ef94:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ef98:	4929      	ldr	r1, [pc, #164]	; (800f040 <tcp_rexmit_fast+0xbc>)
 800ef9a:	482a      	ldr	r0, [pc, #168]	; (800f044 <tcp_rexmit_fast+0xc0>)
 800ef9c:	f003 ff8e 	bl	8012ebc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d045      	beq.n	800f034 <tcp_rexmit_fast+0xb0>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	8b5b      	ldrh	r3, [r3, #26]
 800efac:	f003 0304 	and.w	r3, r3, #4
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d13f      	bne.n	800f034 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7ff ff79 	bl	800eeac <tcp_rexmit>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d139      	bne.n	800f034 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efcc:	4293      	cmp	r3, r2
 800efce:	bf28      	it	cs
 800efd0:	4613      	movcs	r3, r2
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	da00      	bge.n	800efda <tcp_rexmit_fast+0x56>
 800efd8:	3301      	adds	r3, #1
 800efda:	105b      	asrs	r3, r3, #1
 800efdc:	b29a      	uxth	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800efea:	461a      	mov	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eff0:	005b      	lsls	r3, r3, #1
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d206      	bcs.n	800f004 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	b29a      	uxth	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f00e:	4619      	mov	r1, r3
 800f010:	0049      	lsls	r1, r1, #1
 800f012:	440b      	add	r3, r1
 800f014:	b29b      	uxth	r3, r3
 800f016:	4413      	add	r3, r2
 800f018:	b29a      	uxth	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	8b5b      	ldrh	r3, [r3, #26]
 800f024:	f043 0304 	orr.w	r3, r3, #4
 800f028:	b29a      	uxth	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f034:	bf00      	nop
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	0801556c 	.word	0x0801556c
 800f040:	08015c24 	.word	0x08015c24
 800f044:	080155c0 	.word	0x080155c0

0800f048 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b086      	sub	sp, #24
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	607b      	str	r3, [r7, #4]
 800f052:	460b      	mov	r3, r1
 800f054:	817b      	strh	r3, [r7, #10]
 800f056:	4613      	mov	r3, r2
 800f058:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f05a:	897a      	ldrh	r2, [r7, #10]
 800f05c:	893b      	ldrh	r3, [r7, #8]
 800f05e:	4413      	add	r3, r2
 800f060:	b29b      	uxth	r3, r3
 800f062:	3314      	adds	r3, #20
 800f064:	b29b      	uxth	r3, r3
 800f066:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f06a:	4619      	mov	r1, r3
 800f06c:	2022      	movs	r0, #34	; 0x22
 800f06e:	f7fa fbfd 	bl	800986c <pbuf_alloc>
 800f072:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d04d      	beq.n	800f116 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f07a:	897b      	ldrh	r3, [r7, #10]
 800f07c:	3313      	adds	r3, #19
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	8952      	ldrh	r2, [r2, #10]
 800f082:	4293      	cmp	r3, r2
 800f084:	db06      	blt.n	800f094 <tcp_output_alloc_header_common+0x4c>
 800f086:	4b26      	ldr	r3, [pc, #152]	; (800f120 <tcp_output_alloc_header_common+0xd8>)
 800f088:	f240 7223 	movw	r2, #1827	; 0x723
 800f08c:	4925      	ldr	r1, [pc, #148]	; (800f124 <tcp_output_alloc_header_common+0xdc>)
 800f08e:	4826      	ldr	r0, [pc, #152]	; (800f128 <tcp_output_alloc_header_common+0xe0>)
 800f090:	f003 ff14 	bl	8012ebc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f09a:	8c3b      	ldrh	r3, [r7, #32]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7f9 fa0f 	bl	80084c0 <lwip_htons>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	461a      	mov	r2, r3
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f9 fa07 	bl	80084c0 <lwip_htons>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	f7f9 fa12 	bl	80084ea <lwip_htonl>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f0cc:	897b      	ldrh	r3, [r7, #10]
 800f0ce:	089b      	lsrs	r3, r3, #2
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3305      	adds	r3, #5
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	031b      	lsls	r3, r3, #12
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7f9 f9eb 	bl	80084c0 <lwip_htons>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f0f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f9 f9e3 	bl	80084c0 <lwip_htons>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	2200      	movs	r2, #0
 800f106:	741a      	strb	r2, [r3, #16]
 800f108:	2200      	movs	r2, #0
 800f10a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	2200      	movs	r2, #0
 800f110:	749a      	strb	r2, [r3, #18]
 800f112:	2200      	movs	r2, #0
 800f114:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f116:	697b      	ldr	r3, [r7, #20]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3718      	adds	r7, #24
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}
 800f120:	0801556c 	.word	0x0801556c
 800f124:	08015c44 	.word	0x08015c44
 800f128:	080155c0 	.word	0x080155c0

0800f12c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f12c:	b5b0      	push	{r4, r5, r7, lr}
 800f12e:	b08a      	sub	sp, #40	; 0x28
 800f130:	af04      	add	r7, sp, #16
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	607b      	str	r3, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	817b      	strh	r3, [r7, #10]
 800f13a:	4613      	mov	r3, r2
 800f13c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d106      	bne.n	800f152 <tcp_output_alloc_header+0x26>
 800f144:	4b15      	ldr	r3, [pc, #84]	; (800f19c <tcp_output_alloc_header+0x70>)
 800f146:	f240 7242 	movw	r2, #1858	; 0x742
 800f14a:	4915      	ldr	r1, [pc, #84]	; (800f1a0 <tcp_output_alloc_header+0x74>)
 800f14c:	4815      	ldr	r0, [pc, #84]	; (800f1a4 <tcp_output_alloc_header+0x78>)
 800f14e:	f003 feb5 	bl	8012ebc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	8adb      	ldrh	r3, [r3, #22]
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	8b12      	ldrh	r2, [r2, #24]
 800f15e:	68f9      	ldr	r1, [r7, #12]
 800f160:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f162:	893d      	ldrh	r5, [r7, #8]
 800f164:	897c      	ldrh	r4, [r7, #10]
 800f166:	9103      	str	r1, [sp, #12]
 800f168:	2110      	movs	r1, #16
 800f16a:	9102      	str	r1, [sp, #8]
 800f16c:	9201      	str	r2, [sp, #4]
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	462a      	mov	r2, r5
 800f174:	4621      	mov	r1, r4
 800f176:	f7ff ff67 	bl	800f048 <tcp_output_alloc_header_common>
 800f17a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d006      	beq.n	800f190 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f18a:	441a      	add	r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f190:	697b      	ldr	r3, [r7, #20]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3718      	adds	r7, #24
 800f196:	46bd      	mov	sp, r7
 800f198:	bdb0      	pop	{r4, r5, r7, pc}
 800f19a:	bf00      	nop
 800f19c:	0801556c 	.word	0x0801556c
 800f1a0:	08015c74 	.word	0x08015c74
 800f1a4:	080155c0 	.word	0x080155c0

0800f1a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b088      	sub	sp, #32
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	71fb      	strb	r3, [r7, #7]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d106      	bne.n	800f1d6 <tcp_output_fill_options+0x2e>
 800f1c8:	4b13      	ldr	r3, [pc, #76]	; (800f218 <tcp_output_fill_options+0x70>)
 800f1ca:	f240 7256 	movw	r2, #1878	; 0x756
 800f1ce:	4913      	ldr	r1, [pc, #76]	; (800f21c <tcp_output_fill_options+0x74>)
 800f1d0:	4813      	ldr	r0, [pc, #76]	; (800f220 <tcp_output_fill_options+0x78>)
 800f1d2:	f003 fe73 	bl	8012ebc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	3314      	adds	r3, #20
 800f1e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	f103 0214 	add.w	r2, r3, #20
 800f1e8:	8bfb      	ldrh	r3, [r7, #30]
 800f1ea:	009b      	lsls	r3, r3, #2
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	79fb      	ldrb	r3, [r7, #7]
 800f1f0:	009b      	lsls	r3, r3, #2
 800f1f2:	f003 0304 	and.w	r3, r3, #4
 800f1f6:	440b      	add	r3, r1
 800f1f8:	4413      	add	r3, r2
 800f1fa:	697a      	ldr	r2, [r7, #20]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d006      	beq.n	800f20e <tcp_output_fill_options+0x66>
 800f200:	4b05      	ldr	r3, [pc, #20]	; (800f218 <tcp_output_fill_options+0x70>)
 800f202:	f240 7275 	movw	r2, #1909	; 0x775
 800f206:	4907      	ldr	r1, [pc, #28]	; (800f224 <tcp_output_fill_options+0x7c>)
 800f208:	4805      	ldr	r0, [pc, #20]	; (800f220 <tcp_output_fill_options+0x78>)
 800f20a:	f003 fe57 	bl	8012ebc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f20e:	bf00      	nop
 800f210:	3720      	adds	r7, #32
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	0801556c 	.word	0x0801556c
 800f21c:	08015c9c 	.word	0x08015c9c
 800f220:	080155c0 	.word	0x080155c0
 800f224:	08015b94 	.word	0x08015b94

0800f228 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b08a      	sub	sp, #40	; 0x28
 800f22c:	af04      	add	r7, sp, #16
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
 800f234:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d106      	bne.n	800f24a <tcp_output_control_segment+0x22>
 800f23c:	4b1c      	ldr	r3, [pc, #112]	; (800f2b0 <tcp_output_control_segment+0x88>)
 800f23e:	f240 7287 	movw	r2, #1927	; 0x787
 800f242:	491c      	ldr	r1, [pc, #112]	; (800f2b4 <tcp_output_control_segment+0x8c>)
 800f244:	481c      	ldr	r0, [pc, #112]	; (800f2b8 <tcp_output_control_segment+0x90>)
 800f246:	f003 fe39 	bl	8012ebc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	6879      	ldr	r1, [r7, #4]
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7fe ff40 	bl	800e0d4 <tcp_route>
 800f254:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d102      	bne.n	800f262 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f25c:	23fc      	movs	r3, #252	; 0xfc
 800f25e:	75fb      	strb	r3, [r7, #23]
 800f260:	e01c      	b.n	800f29c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d006      	beq.n	800f276 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	7adb      	ldrb	r3, [r3, #11]
 800f26c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	7a9b      	ldrb	r3, [r3, #10]
 800f272:	757b      	strb	r3, [r7, #21]
 800f274:	e003      	b.n	800f27e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f276:	23ff      	movs	r3, #255	; 0xff
 800f278:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f27a:	2300      	movs	r3, #0
 800f27c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f27e:	7dba      	ldrb	r2, [r7, #22]
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	9302      	str	r3, [sp, #8]
 800f284:	2306      	movs	r3, #6
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	7d7b      	ldrb	r3, [r7, #21]
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	4613      	mov	r3, r2
 800f28e:	683a      	ldr	r2, [r7, #0]
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	68b8      	ldr	r0, [r7, #8]
 800f294:	f002 faf6 	bl	8011884 <ip4_output_if>
 800f298:	4603      	mov	r3, r0
 800f29a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f29c:	68b8      	ldr	r0, [r7, #8]
 800f29e:	f7fa fdc9 	bl	8009e34 <pbuf_free>
  return err;
 800f2a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	0801556c 	.word	0x0801556c
 800f2b4:	08015cc4 	.word	0x08015cc4
 800f2b8:	080155c0 	.word	0x080155c0

0800f2bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	b08b      	sub	sp, #44	; 0x2c
 800f2c0:	af04      	add	r7, sp, #16
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d106      	bne.n	800f2de <tcp_rst+0x22>
 800f2d0:	4b1f      	ldr	r3, [pc, #124]	; (800f350 <tcp_rst+0x94>)
 800f2d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f2d6:	491f      	ldr	r1, [pc, #124]	; (800f354 <tcp_rst+0x98>)
 800f2d8:	481f      	ldr	r0, [pc, #124]	; (800f358 <tcp_rst+0x9c>)
 800f2da:	f003 fdef 	bl	8012ebc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d106      	bne.n	800f2f2 <tcp_rst+0x36>
 800f2e4:	4b1a      	ldr	r3, [pc, #104]	; (800f350 <tcp_rst+0x94>)
 800f2e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f2ea:	491c      	ldr	r1, [pc, #112]	; (800f35c <tcp_rst+0xa0>)
 800f2ec:	481a      	ldr	r0, [pc, #104]	; (800f358 <tcp_rst+0x9c>)
 800f2ee:	f003 fde5 	bl	8012ebc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f2f6:	f246 0308 	movw	r3, #24584	; 0x6008
 800f2fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
 800f2fe:	b29c      	uxth	r4, r3
 800f300:	68b8      	ldr	r0, [r7, #8]
 800f302:	f7f9 f8f2 	bl	80084ea <lwip_htonl>
 800f306:	4602      	mov	r2, r0
 800f308:	8abb      	ldrh	r3, [r7, #20]
 800f30a:	9303      	str	r3, [sp, #12]
 800f30c:	2314      	movs	r3, #20
 800f30e:	9302      	str	r3, [sp, #8]
 800f310:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f312:	9301      	str	r3, [sp, #4]
 800f314:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	4613      	mov	r3, r2
 800f31a:	2200      	movs	r2, #0
 800f31c:	4621      	mov	r1, r4
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7ff fe92 	bl	800f048 <tcp_output_alloc_header_common>
 800f324:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00c      	beq.n	800f346 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f32c:	7dfb      	ldrb	r3, [r7, #23]
 800f32e:	2200      	movs	r2, #0
 800f330:	6939      	ldr	r1, [r7, #16]
 800f332:	68f8      	ldr	r0, [r7, #12]
 800f334:	f7ff ff38 	bl	800f1a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	6939      	ldr	r1, [r7, #16]
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f7ff ff72 	bl	800f228 <tcp_output_control_segment>
 800f344:	e000      	b.n	800f348 <tcp_rst+0x8c>
    return;
 800f346:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f348:	371c      	adds	r7, #28
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd90      	pop	{r4, r7, pc}
 800f34e:	bf00      	nop
 800f350:	0801556c 	.word	0x0801556c
 800f354:	08015cf0 	.word	0x08015cf0
 800f358:	080155c0 	.word	0x080155c0
 800f35c:	08015d0c 	.word	0x08015d0c

0800f360 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f360:	b590      	push	{r4, r7, lr}
 800f362:	b087      	sub	sp, #28
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f368:	2300      	movs	r3, #0
 800f36a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f36c:	2300      	movs	r3, #0
 800f36e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d106      	bne.n	800f384 <tcp_send_empty_ack+0x24>
 800f376:	4b28      	ldr	r3, [pc, #160]	; (800f418 <tcp_send_empty_ack+0xb8>)
 800f378:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f37c:	4927      	ldr	r1, [pc, #156]	; (800f41c <tcp_send_empty_ack+0xbc>)
 800f37e:	4828      	ldr	r0, [pc, #160]	; (800f420 <tcp_send_empty_ack+0xc0>)
 800f380:	f003 fd9c 	bl	8012ebc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f384:	7dfb      	ldrb	r3, [r7, #23]
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	f003 0304 	and.w	r3, r3, #4
 800f38e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f390:	7d7b      	ldrb	r3, [r7, #21]
 800f392:	b29c      	uxth	r4, r3
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f398:	4618      	mov	r0, r3
 800f39a:	f7f9 f8a6 	bl	80084ea <lwip_htonl>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4621      	mov	r1, r4
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff fec1 	bl	800f12c <tcp_output_alloc_header>
 800f3aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d109      	bne.n	800f3c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	8b5b      	ldrh	r3, [r3, #26]
 800f3b6:	f043 0303 	orr.w	r3, r3, #3
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f3c0:	f06f 0301 	mvn.w	r3, #1
 800f3c4:	e023      	b.n	800f40e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f3c6:	7dbb      	ldrb	r3, [r7, #22]
 800f3c8:	7dfa      	ldrb	r2, [r7, #23]
 800f3ca:	6939      	ldr	r1, [r7, #16]
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff feeb 	bl	800f1a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	6939      	ldr	r1, [r7, #16]
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff ff24 	bl	800f228 <tcp_output_control_segment>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d007      	beq.n	800f3fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	8b5b      	ldrh	r3, [r3, #26]
 800f3f0:	f043 0303 	orr.w	r3, r3, #3
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	835a      	strh	r2, [r3, #26]
 800f3fa:	e006      	b.n	800f40a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	8b5b      	ldrh	r3, [r3, #26]
 800f400:	f023 0303 	bic.w	r3, r3, #3
 800f404:	b29a      	uxth	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	371c      	adds	r7, #28
 800f412:	46bd      	mov	sp, r7
 800f414:	bd90      	pop	{r4, r7, pc}
 800f416:	bf00      	nop
 800f418:	0801556c 	.word	0x0801556c
 800f41c:	08015d28 	.word	0x08015d28
 800f420:	080155c0 	.word	0x080155c0

0800f424 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f424:	b590      	push	{r4, r7, lr}
 800f426:	b087      	sub	sp, #28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f42c:	2300      	movs	r3, #0
 800f42e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d106      	bne.n	800f444 <tcp_keepalive+0x20>
 800f436:	4b18      	ldr	r3, [pc, #96]	; (800f498 <tcp_keepalive+0x74>)
 800f438:	f640 0224 	movw	r2, #2084	; 0x824
 800f43c:	4917      	ldr	r1, [pc, #92]	; (800f49c <tcp_keepalive+0x78>)
 800f43e:	4818      	ldr	r0, [pc, #96]	; (800f4a0 <tcp_keepalive+0x7c>)
 800f440:	f003 fd3c 	bl	8012ebc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f444:	7dfb      	ldrb	r3, [r7, #23]
 800f446:	b29c      	uxth	r4, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f44c:	3b01      	subs	r3, #1
 800f44e:	4618      	mov	r0, r3
 800f450:	f7f9 f84b 	bl	80084ea <lwip_htonl>
 800f454:	4603      	mov	r3, r0
 800f456:	2200      	movs	r2, #0
 800f458:	4621      	mov	r1, r4
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f7ff fe66 	bl	800f12c <tcp_output_alloc_header>
 800f460:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d102      	bne.n	800f46e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f46c:	e010      	b.n	800f490 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f46e:	7dfb      	ldrb	r3, [r7, #23]
 800f470:	2200      	movs	r2, #0
 800f472:	6939      	ldr	r1, [r7, #16]
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7ff fe97 	bl	800f1a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	3304      	adds	r3, #4
 800f480:	6939      	ldr	r1, [r7, #16]
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f7ff fed0 	bl	800f228 <tcp_output_control_segment>
 800f488:	4603      	mov	r3, r0
 800f48a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f490:	4618      	mov	r0, r3
 800f492:	371c      	adds	r7, #28
 800f494:	46bd      	mov	sp, r7
 800f496:	bd90      	pop	{r4, r7, pc}
 800f498:	0801556c 	.word	0x0801556c
 800f49c:	08015d48 	.word	0x08015d48
 800f4a0:	080155c0 	.word	0x080155c0

0800f4a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b08b      	sub	sp, #44	; 0x2c
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d106      	bne.n	800f4c6 <tcp_zero_window_probe+0x22>
 800f4b8:	4b4c      	ldr	r3, [pc, #304]	; (800f5ec <tcp_zero_window_probe+0x148>)
 800f4ba:	f640 024f 	movw	r2, #2127	; 0x84f
 800f4be:	494c      	ldr	r1, [pc, #304]	; (800f5f0 <tcp_zero_window_probe+0x14c>)
 800f4c0:	484c      	ldr	r0, [pc, #304]	; (800f5f4 <tcp_zero_window_probe+0x150>)
 800f4c2:	f003 fcfb 	bl	8012ebc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d101      	bne.n	800f4d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	e086      	b.n	800f5e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f4dc:	2bff      	cmp	r3, #255	; 0xff
 800f4de:	d007      	beq.n	800f4f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	b2da      	uxtb	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f4f0:	6a3b      	ldr	r3, [r7, #32]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	899b      	ldrh	r3, [r3, #12]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7f8 ffe1 	bl	80084c0 <lwip_htons>
 800f4fe:	4603      	mov	r3, r0
 800f500:	b2db      	uxtb	r3, r3
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	d005      	beq.n	800f516 <tcp_zero_window_probe+0x72>
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	891b      	ldrh	r3, [r3, #8]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d101      	bne.n	800f516 <tcp_zero_window_probe+0x72>
 800f512:	2301      	movs	r3, #1
 800f514:	e000      	b.n	800f518 <tcp_zero_window_probe+0x74>
 800f516:	2300      	movs	r3, #0
 800f518:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f51a:	7ffb      	ldrb	r3, [r7, #31]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	bf0c      	ite	eq
 800f520:	2301      	moveq	r3, #1
 800f522:	2300      	movne	r3, #0
 800f524:	b2db      	uxtb	r3, r3
 800f526:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f52c:	b299      	uxth	r1, r3
 800f52e:	6a3b      	ldr	r3, [r7, #32]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	8bba      	ldrh	r2, [r7, #28]
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff fdf8 	bl	800f12c <tcp_output_alloc_header>
 800f53c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d102      	bne.n	800f54a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f548:	e04c      	b.n	800f5e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f550:	7ffb      	ldrb	r3, [r7, #31]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d011      	beq.n	800f57a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	899b      	ldrh	r3, [r3, #12]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	b21b      	sxth	r3, r3
 800f55e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f562:	b21c      	sxth	r4, r3
 800f564:	2011      	movs	r0, #17
 800f566:	f7f8 ffab 	bl	80084c0 <lwip_htons>
 800f56a:	4603      	mov	r3, r0
 800f56c:	b21b      	sxth	r3, r3
 800f56e:	4323      	orrs	r3, r4
 800f570:	b21b      	sxth	r3, r3
 800f572:	b29a      	uxth	r2, r3
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	819a      	strh	r2, [r3, #12]
 800f578:	e010      	b.n	800f59c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	3314      	adds	r3, #20
 800f580:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f582:	6a3b      	ldr	r3, [r7, #32]
 800f584:	6858      	ldr	r0, [r3, #4]
 800f586:	6a3b      	ldr	r3, [r7, #32]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	891a      	ldrh	r2, [r3, #8]
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	891b      	ldrh	r3, [r3, #8]
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	b29b      	uxth	r3, r3
 800f594:	2201      	movs	r2, #1
 800f596:	6939      	ldr	r1, [r7, #16]
 800f598:	f7fa fe52 	bl	800a240 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	685b      	ldr	r3, [r3, #4]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7f8 ffa1 	bl	80084ea <lwip_htonl>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	da02      	bge.n	800f5c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	68fa      	ldr	r2, [r7, #12]
 800f5be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f5c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	69b9      	ldr	r1, [r7, #24]
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7ff fded 	bl	800f1a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f5ce:	687a      	ldr	r2, [r7, #4]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	69b9      	ldr	r1, [r7, #24]
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f7ff fe26 	bl	800f228 <tcp_output_control_segment>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f5e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	372c      	adds	r7, #44	; 0x2c
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd90      	pop	{r4, r7, pc}
 800f5ec:	0801556c 	.word	0x0801556c
 800f5f0:	08015d64 	.word	0x08015d64
 800f5f4:	080155c0 	.word	0x080155c0

0800f5f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f600:	f7fa ff0c 	bl	800a41c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f604:	4b0a      	ldr	r3, [pc, #40]	; (800f630 <tcpip_tcp_timer+0x38>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d103      	bne.n	800f614 <tcpip_tcp_timer+0x1c>
 800f60c:	4b09      	ldr	r3, [pc, #36]	; (800f634 <tcpip_tcp_timer+0x3c>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d005      	beq.n	800f620 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f614:	2200      	movs	r2, #0
 800f616:	4908      	ldr	r1, [pc, #32]	; (800f638 <tcpip_tcp_timer+0x40>)
 800f618:	20fa      	movs	r0, #250	; 0xfa
 800f61a:	f000 f8f3 	bl	800f804 <sys_timeout>
 800f61e:	e003      	b.n	800f628 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f620:	4b06      	ldr	r3, [pc, #24]	; (800f63c <tcpip_tcp_timer+0x44>)
 800f622:	2200      	movs	r2, #0
 800f624:	601a      	str	r2, [r3, #0]
  }
}
 800f626:	bf00      	nop
 800f628:	bf00      	nop
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	2400bd18 	.word	0x2400bd18
 800f634:	2400bd1c 	.word	0x2400bd1c
 800f638:	0800f5f9 	.word	0x0800f5f9
 800f63c:	2400bd64 	.word	0x2400bd64

0800f640 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f644:	4b0a      	ldr	r3, [pc, #40]	; (800f670 <tcp_timer_needed+0x30>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d10f      	bne.n	800f66c <tcp_timer_needed+0x2c>
 800f64c:	4b09      	ldr	r3, [pc, #36]	; (800f674 <tcp_timer_needed+0x34>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d103      	bne.n	800f65c <tcp_timer_needed+0x1c>
 800f654:	4b08      	ldr	r3, [pc, #32]	; (800f678 <tcp_timer_needed+0x38>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d007      	beq.n	800f66c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f65c:	4b04      	ldr	r3, [pc, #16]	; (800f670 <tcp_timer_needed+0x30>)
 800f65e:	2201      	movs	r2, #1
 800f660:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f662:	2200      	movs	r2, #0
 800f664:	4905      	ldr	r1, [pc, #20]	; (800f67c <tcp_timer_needed+0x3c>)
 800f666:	20fa      	movs	r0, #250	; 0xfa
 800f668:	f000 f8cc 	bl	800f804 <sys_timeout>
  }
}
 800f66c:	bf00      	nop
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	2400bd64 	.word	0x2400bd64
 800f674:	2400bd18 	.word	0x2400bd18
 800f678:	2400bd1c 	.word	0x2400bd1c
 800f67c:	0800f5f9 	.word	0x0800f5f9

0800f680 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f68c:	200a      	movs	r0, #10
 800f68e:	f7f9 fcb7 	bl	8009000 <memp_malloc>
 800f692:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d109      	bne.n	800f6ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d151      	bne.n	800f744 <sys_timeout_abs+0xc4>
 800f6a0:	4b2a      	ldr	r3, [pc, #168]	; (800f74c <sys_timeout_abs+0xcc>)
 800f6a2:	22be      	movs	r2, #190	; 0xbe
 800f6a4:	492a      	ldr	r1, [pc, #168]	; (800f750 <sys_timeout_abs+0xd0>)
 800f6a6:	482b      	ldr	r0, [pc, #172]	; (800f754 <sys_timeout_abs+0xd4>)
 800f6a8:	f003 fc08 	bl	8012ebc <iprintf>
    return;
 800f6ac:	e04a      	b.n	800f744 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	68fa      	ldr	r2, [r7, #12]
 800f6c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f6c6:	4b24      	ldr	r3, [pc, #144]	; (800f758 <sys_timeout_abs+0xd8>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d103      	bne.n	800f6d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f6ce:	4a22      	ldr	r2, [pc, #136]	; (800f758 <sys_timeout_abs+0xd8>)
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	6013      	str	r3, [r2, #0]
    return;
 800f6d4:	e037      	b.n	800f746 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	685a      	ldr	r2, [r3, #4]
 800f6da:	4b1f      	ldr	r3, [pc, #124]	; (800f758 <sys_timeout_abs+0xd8>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	0fdb      	lsrs	r3, r3, #31
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d007      	beq.n	800f6fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f6ee:	4b1a      	ldr	r3, [pc, #104]	; (800f758 <sys_timeout_abs+0xd8>)
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f6f6:	4a18      	ldr	r2, [pc, #96]	; (800f758 <sys_timeout_abs+0xd8>)
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	6013      	str	r3, [r2, #0]
 800f6fc:	e023      	b.n	800f746 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f6fe:	4b16      	ldr	r3, [pc, #88]	; (800f758 <sys_timeout_abs+0xd8>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	617b      	str	r3, [r7, #20]
 800f704:	e01a      	b.n	800f73c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00b      	beq.n	800f726 <sys_timeout_abs+0xa6>
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	0fdb      	lsrs	r3, r3, #31
 800f71c:	f003 0301 	and.w	r3, r3, #1
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	d007      	beq.n	800f736 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	601a      	str	r2, [r3, #0]
        break;
 800f734:	e007      	b.n	800f746 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	617b      	str	r3, [r7, #20]
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1e1      	bne.n	800f706 <sys_timeout_abs+0x86>
 800f742:	e000      	b.n	800f746 <sys_timeout_abs+0xc6>
    return;
 800f744:	bf00      	nop
      }
    }
  }
}
 800f746:	3718      	adds	r7, #24
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	08015d88 	.word	0x08015d88
 800f750:	08015dbc 	.word	0x08015dbc
 800f754:	08015dfc 	.word	0x08015dfc
 800f758:	2400bd5c 	.word	0x2400bd5c

0800f75c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b086      	sub	sp, #24
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	685b      	ldr	r3, [r3, #4]
 800f76c:	4798      	blx	r3

  now = sys_now();
 800f76e:	f7f5 fbcb 	bl	8004f08 <sys_now>
 800f772:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	4b0f      	ldr	r3, [pc, #60]	; (800f7b8 <lwip_cyclic_timer+0x5c>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4413      	add	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	0fdb      	lsrs	r3, r3, #31
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d009      	beq.n	800f7a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	4413      	add	r3, r2
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	4907      	ldr	r1, [pc, #28]	; (800f7bc <lwip_cyclic_timer+0x60>)
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7ff ff6e 	bl	800f680 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f7a4:	e004      	b.n	800f7b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	4904      	ldr	r1, [pc, #16]	; (800f7bc <lwip_cyclic_timer+0x60>)
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f7ff ff68 	bl	800f680 <sys_timeout_abs>
}
 800f7b0:	bf00      	nop
 800f7b2:	3718      	adds	r7, #24
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	2400bd60 	.word	0x2400bd60
 800f7bc:	0800f75d 	.word	0x0800f75d

0800f7c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	607b      	str	r3, [r7, #4]
 800f7ca:	e00e      	b.n	800f7ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f7cc:	4a0b      	ldr	r2, [pc, #44]	; (800f7fc <sys_timeouts_init+0x3c>)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	00db      	lsls	r3, r3, #3
 800f7d8:	4a08      	ldr	r2, [pc, #32]	; (800f7fc <sys_timeouts_init+0x3c>)
 800f7da:	4413      	add	r3, r2
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4908      	ldr	r1, [pc, #32]	; (800f800 <sys_timeouts_init+0x40>)
 800f7e0:	f000 f810 	bl	800f804 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	607b      	str	r3, [r7, #4]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2b02      	cmp	r3, #2
 800f7ee:	d9ed      	bls.n	800f7cc <sys_timeouts_init+0xc>
  }
}
 800f7f0:	bf00      	nop
 800f7f2:	bf00      	nop
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	080169ac 	.word	0x080169ac
 800f800:	0800f75d 	.word	0x0800f75d

0800f804 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f816:	d306      	bcc.n	800f826 <sys_timeout+0x22>
 800f818:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <sys_timeout+0x40>)
 800f81a:	f240 1229 	movw	r2, #297	; 0x129
 800f81e:	490a      	ldr	r1, [pc, #40]	; (800f848 <sys_timeout+0x44>)
 800f820:	480a      	ldr	r0, [pc, #40]	; (800f84c <sys_timeout+0x48>)
 800f822:	f003 fb4b 	bl	8012ebc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f826:	f7f5 fb6f 	bl	8004f08 <sys_now>
 800f82a:	4602      	mov	r2, r0
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	4413      	add	r3, r2
 800f830:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	68b9      	ldr	r1, [r7, #8]
 800f836:	6978      	ldr	r0, [r7, #20]
 800f838:	f7ff ff22 	bl	800f680 <sys_timeout_abs>
#endif
}
 800f83c:	bf00      	nop
 800f83e:	3718      	adds	r7, #24
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}
 800f844:	08015d88 	.word	0x08015d88
 800f848:	08015e24 	.word	0x08015e24
 800f84c:	08015dfc 	.word	0x08015dfc

0800f850 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f856:	f7f5 fb57 	bl	8004f08 <sys_now>
 800f85a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f85c:	4b17      	ldr	r3, [pc, #92]	; (800f8bc <sys_check_timeouts+0x6c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d022      	beq.n	800f8ae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	68fa      	ldr	r2, [r7, #12]
 800f86e:	1ad3      	subs	r3, r2, r3
 800f870:	0fdb      	lsrs	r3, r3, #31
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d11a      	bne.n	800f8b2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a0e      	ldr	r2, [pc, #56]	; (800f8bc <sys_check_timeouts+0x6c>)
 800f882:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	689b      	ldr	r3, [r3, #8]
 800f888:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	4a0a      	ldr	r2, [pc, #40]	; (800f8c0 <sys_check_timeouts+0x70>)
 800f896:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	200a      	movs	r0, #10
 800f89c:	f7f9 fc26 	bl	80090ec <memp_free>
    if (handler != NULL) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d0da      	beq.n	800f85c <sys_check_timeouts+0xc>
      handler(arg);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6838      	ldr	r0, [r7, #0]
 800f8aa:	4798      	blx	r3
  do {
 800f8ac:	e7d6      	b.n	800f85c <sys_check_timeouts+0xc>
      return;
 800f8ae:	bf00      	nop
 800f8b0:	e000      	b.n	800f8b4 <sys_check_timeouts+0x64>
      return;
 800f8b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	2400bd5c 	.word	0x2400bd5c
 800f8c0:	2400bd60 	.word	0x2400bd60

0800f8c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b082      	sub	sp, #8
 800f8c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f8ca:	4b16      	ldr	r3, [pc, #88]	; (800f924 <sys_timeouts_sleeptime+0x60>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d102      	bne.n	800f8d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f8d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8d6:	e020      	b.n	800f91a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f8d8:	f7f5 fb16 	bl	8004f08 <sys_now>
 800f8dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f8de:	4b11      	ldr	r3, [pc, #68]	; (800f924 <sys_timeouts_sleeptime+0x60>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	1ad3      	subs	r3, r2, r3
 800f8e8:	0fdb      	lsrs	r3, r3, #31
 800f8ea:	f003 0301 	and.w	r3, r3, #1
 800f8ee:	b2db      	uxtb	r3, r3
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d001      	beq.n	800f8f8 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	e010      	b.n	800f91a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f8f8:	4b0a      	ldr	r3, [pc, #40]	; (800f924 <sys_timeouts_sleeptime+0x60>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	685a      	ldr	r2, [r3, #4]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	da06      	bge.n	800f918 <sys_timeouts_sleeptime+0x54>
 800f90a:	4b07      	ldr	r3, [pc, #28]	; (800f928 <sys_timeouts_sleeptime+0x64>)
 800f90c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f910:	4906      	ldr	r1, [pc, #24]	; (800f92c <sys_timeouts_sleeptime+0x68>)
 800f912:	4807      	ldr	r0, [pc, #28]	; (800f930 <sys_timeouts_sleeptime+0x6c>)
 800f914:	f003 fad2 	bl	8012ebc <iprintf>
    return ret;
 800f918:	683b      	ldr	r3, [r7, #0]
  }
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2400bd5c 	.word	0x2400bd5c
 800f928:	08015d88 	.word	0x08015d88
 800f92c:	08015e5c 	.word	0x08015e5c
 800f930:	08015dfc 	.word	0x08015dfc

0800f934 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f938:	f003 fad8 	bl	8012eec <rand>
 800f93c:	4603      	mov	r3, r0
 800f93e:	b29b      	uxth	r3, r3
 800f940:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f944:	b29b      	uxth	r3, r3
 800f946:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	4b01      	ldr	r3, [pc, #4]	; (800f954 <udp_init+0x20>)
 800f94e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f950:	bf00      	nop
 800f952:	bd80      	pop	{r7, pc}
 800f954:	24000030 	.word	0x24000030

0800f958 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f962:	4b17      	ldr	r3, [pc, #92]	; (800f9c0 <udp_new_port+0x68>)
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	1c5a      	adds	r2, r3, #1
 800f968:	b291      	uxth	r1, r2
 800f96a:	4a15      	ldr	r2, [pc, #84]	; (800f9c0 <udp_new_port+0x68>)
 800f96c:	8011      	strh	r1, [r2, #0]
 800f96e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f972:	4293      	cmp	r3, r2
 800f974:	d103      	bne.n	800f97e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f976:	4b12      	ldr	r3, [pc, #72]	; (800f9c0 <udp_new_port+0x68>)
 800f978:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f97c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f97e:	4b11      	ldr	r3, [pc, #68]	; (800f9c4 <udp_new_port+0x6c>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	603b      	str	r3, [r7, #0]
 800f984:	e011      	b.n	800f9aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	8a5a      	ldrh	r2, [r3, #18]
 800f98a:	4b0d      	ldr	r3, [pc, #52]	; (800f9c0 <udp_new_port+0x68>)
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d108      	bne.n	800f9a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f992:	88fb      	ldrh	r3, [r7, #6]
 800f994:	3301      	adds	r3, #1
 800f996:	80fb      	strh	r3, [r7, #6]
 800f998:	88fb      	ldrh	r3, [r7, #6]
 800f99a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f99e:	d3e0      	bcc.n	800f962 <udp_new_port+0xa>
        return 0;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	e007      	b.n	800f9b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	68db      	ldr	r3, [r3, #12]
 800f9a8:	603b      	str	r3, [r7, #0]
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d1ea      	bne.n	800f986 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f9b0:	4b03      	ldr	r3, [pc, #12]	; (800f9c0 <udp_new_port+0x68>)
 800f9b2:	881b      	ldrh	r3, [r3, #0]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr
 800f9c0:	24000030 	.word	0x24000030
 800f9c4:	2400bd68 	.word	0x2400bd68

0800f9c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	60f8      	str	r0, [r7, #12]
 800f9d0:	60b9      	str	r1, [r7, #8]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d105      	bne.n	800f9e8 <udp_input_local_match+0x20>
 800f9dc:	4b27      	ldr	r3, [pc, #156]	; (800fa7c <udp_input_local_match+0xb4>)
 800f9de:	2287      	movs	r2, #135	; 0x87
 800f9e0:	4927      	ldr	r1, [pc, #156]	; (800fa80 <udp_input_local_match+0xb8>)
 800f9e2:	4828      	ldr	r0, [pc, #160]	; (800fa84 <udp_input_local_match+0xbc>)
 800f9e4:	f003 fa6a 	bl	8012ebc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d105      	bne.n	800f9fa <udp_input_local_match+0x32>
 800f9ee:	4b23      	ldr	r3, [pc, #140]	; (800fa7c <udp_input_local_match+0xb4>)
 800f9f0:	2288      	movs	r2, #136	; 0x88
 800f9f2:	4925      	ldr	r1, [pc, #148]	; (800fa88 <udp_input_local_match+0xc0>)
 800f9f4:	4823      	ldr	r0, [pc, #140]	; (800fa84 <udp_input_local_match+0xbc>)
 800f9f6:	f003 fa61 	bl	8012ebc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	7a1b      	ldrb	r3, [r3, #8]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d00b      	beq.n	800fa1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	7a1a      	ldrb	r2, [r3, #8]
 800fa06:	4b21      	ldr	r3, [pc, #132]	; (800fa8c <udp_input_local_match+0xc4>)
 800fa08:	685b      	ldr	r3, [r3, #4]
 800fa0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa0e:	3301      	adds	r3, #1
 800fa10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d001      	beq.n	800fa1a <udp_input_local_match+0x52>
    return 0;
 800fa16:	2300      	movs	r3, #0
 800fa18:	e02b      	b.n	800fa72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fa1a:	79fb      	ldrb	r3, [r7, #7]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d018      	beq.n	800fa52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d013      	beq.n	800fa4e <udp_input_local_match+0x86>
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d00f      	beq.n	800fa4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa2e:	4b17      	ldr	r3, [pc, #92]	; (800fa8c <udp_input_local_match+0xc4>)
 800fa30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fa32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa36:	d00a      	beq.n	800fa4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	4b13      	ldr	r3, [pc, #76]	; (800fa8c <udp_input_local_match+0xc4>)
 800fa3e:	695b      	ldr	r3, [r3, #20]
 800fa40:	405a      	eors	r2, r3
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	3308      	adds	r3, #8
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d110      	bne.n	800fa70 <udp_input_local_match+0xa8>
          return 1;
 800fa4e:	2301      	movs	r3, #1
 800fa50:	e00f      	b.n	800fa72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d009      	beq.n	800fa6c <udp_input_local_match+0xa4>
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d005      	beq.n	800fa6c <udp_input_local_match+0xa4>
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <udp_input_local_match+0xc4>)
 800fa66:	695b      	ldr	r3, [r3, #20]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d101      	bne.n	800fa70 <udp_input_local_match+0xa8>
        return 1;
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e000      	b.n	800fa72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08015e70 	.word	0x08015e70
 800fa80:	08015ea0 	.word	0x08015ea0
 800fa84:	08015ec4 	.word	0x08015ec4
 800fa88:	08015eec 	.word	0x08015eec
 800fa8c:	24008c0c 	.word	0x24008c0c

0800fa90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fa90:	b590      	push	{r4, r7, lr}
 800fa92:	b08d      	sub	sp, #52	; 0x34
 800fa94:	af02      	add	r7, sp, #8
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d105      	bne.n	800fab0 <udp_input+0x20>
 800faa4:	4b7c      	ldr	r3, [pc, #496]	; (800fc98 <udp_input+0x208>)
 800faa6:	22cf      	movs	r2, #207	; 0xcf
 800faa8:	497c      	ldr	r1, [pc, #496]	; (800fc9c <udp_input+0x20c>)
 800faaa:	487d      	ldr	r0, [pc, #500]	; (800fca0 <udp_input+0x210>)
 800faac:	f003 fa06 	bl	8012ebc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d105      	bne.n	800fac2 <udp_input+0x32>
 800fab6:	4b78      	ldr	r3, [pc, #480]	; (800fc98 <udp_input+0x208>)
 800fab8:	22d0      	movs	r2, #208	; 0xd0
 800faba:	497a      	ldr	r1, [pc, #488]	; (800fca4 <udp_input+0x214>)
 800fabc:	4878      	ldr	r0, [pc, #480]	; (800fca0 <udp_input+0x210>)
 800fabe:	f003 f9fd 	bl	8012ebc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	895b      	ldrh	r3, [r3, #10]
 800fac6:	2b07      	cmp	r3, #7
 800fac8:	d803      	bhi.n	800fad2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7fa f9b2 	bl	8009e34 <pbuf_free>
    goto end;
 800fad0:	e0de      	b.n	800fc90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fad8:	4b73      	ldr	r3, [pc, #460]	; (800fca8 <udp_input+0x218>)
 800fada:	695b      	ldr	r3, [r3, #20]
 800fadc:	4a72      	ldr	r2, [pc, #456]	; (800fca8 <udp_input+0x218>)
 800fade:	6812      	ldr	r2, [r2, #0]
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 ffa6 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 800fae8:	4603      	mov	r3, r0
 800faea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	881b      	ldrh	r3, [r3, #0]
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7f8 fce4 	bl	80084c0 <lwip_htons>
 800faf8:	4603      	mov	r3, r0
 800fafa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	885b      	ldrh	r3, [r3, #2]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f8 fcdc 	bl	80084c0 <lwip_htons>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800fb10:	2300      	movs	r3, #0
 800fb12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fb14:	2300      	movs	r3, #0
 800fb16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb18:	4b64      	ldr	r3, [pc, #400]	; (800fcac <udp_input+0x21c>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	627b      	str	r3, [r7, #36]	; 0x24
 800fb1e:	e054      	b.n	800fbca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb22:	8a5b      	ldrh	r3, [r3, #18]
 800fb24:	89fa      	ldrh	r2, [r7, #14]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d14a      	bne.n	800fbc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fb2a:	7cfb      	ldrb	r3, [r7, #19]
 800fb2c:	461a      	mov	r2, r3
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb32:	f7ff ff49 	bl	800f9c8 <udp_input_local_match>
 800fb36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d041      	beq.n	800fbc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3e:	7c1b      	ldrb	r3, [r3, #16]
 800fb40:	f003 0304 	and.w	r3, r3, #4
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d11d      	bne.n	800fb84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d102      	bne.n	800fb54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb50:	61fb      	str	r3, [r7, #28]
 800fb52:	e017      	b.n	800fb84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fb54:	7cfb      	ldrb	r3, [r7, #19]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d014      	beq.n	800fb84 <udp_input+0xf4>
 800fb5a:	4b53      	ldr	r3, [pc, #332]	; (800fca8 <udp_input+0x218>)
 800fb5c:	695b      	ldr	r3, [r3, #20]
 800fb5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb62:	d10f      	bne.n	800fb84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	681a      	ldr	r2, [r3, #0]
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	3304      	adds	r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d008      	beq.n	800fb84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	3304      	adds	r3, #4
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d101      	bne.n	800fb84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb86:	8a9b      	ldrh	r3, [r3, #20]
 800fb88:	8a3a      	ldrh	r2, [r7, #16]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d118      	bne.n	800fbc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d005      	beq.n	800fba2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb98:	685a      	ldr	r2, [r3, #4]
 800fb9a:	4b43      	ldr	r3, [pc, #268]	; (800fca8 <udp_input+0x218>)
 800fb9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d10e      	bne.n	800fbc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fba2:	6a3b      	ldr	r3, [r7, #32]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d014      	beq.n	800fbd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbaa:	68da      	ldr	r2, [r3, #12]
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fbb0:	4b3e      	ldr	r3, [pc, #248]	; (800fcac <udp_input+0x21c>)
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fbb8:	4a3c      	ldr	r2, [pc, #240]	; (800fcac <udp_input+0x21c>)
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fbbe:	e008      	b.n	800fbd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	627b      	str	r3, [r7, #36]	; 0x24
 800fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1a7      	bne.n	800fb20 <udp_input+0x90>
 800fbd0:	e000      	b.n	800fbd4 <udp_input+0x144>
        break;
 800fbd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <udp_input+0x14e>
    pcb = uncon_pcb;
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d002      	beq.n	800fbea <udp_input+0x15a>
    for_us = 1;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	76fb      	strb	r3, [r7, #27]
 800fbe8:	e00a      	b.n	800fc00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	3304      	adds	r3, #4
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	4b2d      	ldr	r3, [pc, #180]	; (800fca8 <udp_input+0x218>)
 800fbf2:	695b      	ldr	r3, [r3, #20]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	bf0c      	ite	eq
 800fbf8:	2301      	moveq	r3, #1
 800fbfa:	2300      	movne	r3, #0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fc00:	7efb      	ldrb	r3, [r7, #27]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d041      	beq.n	800fc8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fc06:	2108      	movs	r1, #8
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7fa f88d 	bl	8009d28 <pbuf_remove_header>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00a      	beq.n	800fc2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fc14:	4b20      	ldr	r3, [pc, #128]	; (800fc98 <udp_input+0x208>)
 800fc16:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800fc1a:	4925      	ldr	r1, [pc, #148]	; (800fcb0 <udp_input+0x220>)
 800fc1c:	4820      	ldr	r0, [pc, #128]	; (800fca0 <udp_input+0x210>)
 800fc1e:	f003 f94d 	bl	8012ebc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7fa f906 	bl	8009e34 <pbuf_free>
      goto end;
 800fc28:	e032      	b.n	800fc90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d012      	beq.n	800fc56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00a      	beq.n	800fc4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	699c      	ldr	r4, [r3, #24]
 800fc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3e:	69d8      	ldr	r0, [r3, #28]
 800fc40:	8a3b      	ldrh	r3, [r7, #16]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	4b1b      	ldr	r3, [pc, #108]	; (800fcb4 <udp_input+0x224>)
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fc4c:	e021      	b.n	800fc92 <udp_input+0x202>
        pbuf_free(p);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7fa f8f0 	bl	8009e34 <pbuf_free>
        goto end;
 800fc54:	e01c      	b.n	800fc90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fc56:	7cfb      	ldrb	r3, [r7, #19]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d112      	bne.n	800fc82 <udp_input+0x1f2>
 800fc5c:	4b12      	ldr	r3, [pc, #72]	; (800fca8 <udp_input+0x218>)
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fc64:	2be0      	cmp	r3, #224	; 0xe0
 800fc66:	d00c      	beq.n	800fc82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fc68:	4b0f      	ldr	r3, [pc, #60]	; (800fca8 <udp_input+0x218>)
 800fc6a:	899b      	ldrh	r3, [r3, #12]
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	b21b      	sxth	r3, r3
 800fc72:	4619      	mov	r1, r3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7fa f8ca 	bl	8009e0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fc7a:	2103      	movs	r1, #3
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f001 fbaf 	bl	80113e0 <icmp_dest_unreach>
      pbuf_free(p);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f7fa f8d6 	bl	8009e34 <pbuf_free>
  return;
 800fc88:	e003      	b.n	800fc92 <udp_input+0x202>
    pbuf_free(p);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7fa f8d2 	bl	8009e34 <pbuf_free>
  return;
 800fc90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fc92:	372c      	adds	r7, #44	; 0x2c
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd90      	pop	{r4, r7, pc}
 800fc98:	08015e70 	.word	0x08015e70
 800fc9c:	08015f14 	.word	0x08015f14
 800fca0:	08015ec4 	.word	0x08015ec4
 800fca4:	08015f2c 	.word	0x08015f2c
 800fca8:	24008c0c 	.word	0x24008c0c
 800fcac:	2400bd68 	.word	0x2400bd68
 800fcb0:	08015f48 	.word	0x08015f48
 800fcb4:	24008c1c 	.word	0x24008c1c

0800fcb8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d109      	bne.n	800fcdc <udp_send+0x24>
 800fcc8:	4b11      	ldr	r3, [pc, #68]	; (800fd10 <udp_send+0x58>)
 800fcca:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fcce:	4911      	ldr	r1, [pc, #68]	; (800fd14 <udp_send+0x5c>)
 800fcd0:	4811      	ldr	r0, [pc, #68]	; (800fd18 <udp_send+0x60>)
 800fcd2:	f003 f8f3 	bl	8012ebc <iprintf>
 800fcd6:	f06f 030f 	mvn.w	r3, #15
 800fcda:	e015      	b.n	800fd08 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d109      	bne.n	800fcf6 <udp_send+0x3e>
 800fce2:	4b0b      	ldr	r3, [pc, #44]	; (800fd10 <udp_send+0x58>)
 800fce4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800fce8:	490c      	ldr	r1, [pc, #48]	; (800fd1c <udp_send+0x64>)
 800fcea:	480b      	ldr	r0, [pc, #44]	; (800fd18 <udp_send+0x60>)
 800fcec:	f003 f8e6 	bl	8012ebc <iprintf>
 800fcf0:	f06f 030f 	mvn.w	r3, #15
 800fcf4:	e008      	b.n	800fd08 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	1d1a      	adds	r2, r3, #4
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	8a9b      	ldrh	r3, [r3, #20]
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f80d 	bl	800fd20 <udp_sendto>
 800fd06:	4603      	mov	r3, r0
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3708      	adds	r7, #8
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	08015e70 	.word	0x08015e70
 800fd14:	08015f64 	.word	0x08015f64
 800fd18:	08015ec4 	.word	0x08015ec4
 800fd1c:	08015f7c 	.word	0x08015f7c

0800fd20 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b088      	sub	sp, #32
 800fd24:	af02      	add	r7, sp, #8
 800fd26:	60f8      	str	r0, [r7, #12]
 800fd28:	60b9      	str	r1, [r7, #8]
 800fd2a:	607a      	str	r2, [r7, #4]
 800fd2c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d109      	bne.n	800fd48 <udp_sendto+0x28>
 800fd34:	4b23      	ldr	r3, [pc, #140]	; (800fdc4 <udp_sendto+0xa4>)
 800fd36:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd3a:	4923      	ldr	r1, [pc, #140]	; (800fdc8 <udp_sendto+0xa8>)
 800fd3c:	4823      	ldr	r0, [pc, #140]	; (800fdcc <udp_sendto+0xac>)
 800fd3e:	f003 f8bd 	bl	8012ebc <iprintf>
 800fd42:	f06f 030f 	mvn.w	r3, #15
 800fd46:	e038      	b.n	800fdba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d109      	bne.n	800fd62 <udp_sendto+0x42>
 800fd4e:	4b1d      	ldr	r3, [pc, #116]	; (800fdc4 <udp_sendto+0xa4>)
 800fd50:	f240 2219 	movw	r2, #537	; 0x219
 800fd54:	491e      	ldr	r1, [pc, #120]	; (800fdd0 <udp_sendto+0xb0>)
 800fd56:	481d      	ldr	r0, [pc, #116]	; (800fdcc <udp_sendto+0xac>)
 800fd58:	f003 f8b0 	bl	8012ebc <iprintf>
 800fd5c:	f06f 030f 	mvn.w	r3, #15
 800fd60:	e02b      	b.n	800fdba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d109      	bne.n	800fd7c <udp_sendto+0x5c>
 800fd68:	4b16      	ldr	r3, [pc, #88]	; (800fdc4 <udp_sendto+0xa4>)
 800fd6a:	f240 221a 	movw	r2, #538	; 0x21a
 800fd6e:	4919      	ldr	r1, [pc, #100]	; (800fdd4 <udp_sendto+0xb4>)
 800fd70:	4816      	ldr	r0, [pc, #88]	; (800fdcc <udp_sendto+0xac>)
 800fd72:	f003 f8a3 	bl	8012ebc <iprintf>
 800fd76:	f06f 030f 	mvn.w	r3, #15
 800fd7a:	e01e      	b.n	800fdba <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	7a1b      	ldrb	r3, [r3, #8]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d006      	beq.n	800fd92 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	7a1b      	ldrb	r3, [r3, #8]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7f9 fcc5 	bl	8009718 <netif_get_by_index>
 800fd8e:	6178      	str	r0, [r7, #20]
 800fd90:	e003      	b.n	800fd9a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f001 fbb8 	bl	8011508 <ip4_route>
 800fd98:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fd9a:	697b      	ldr	r3, [r7, #20]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fda0:	f06f 0303 	mvn.w	r3, #3
 800fda4:	e009      	b.n	800fdba <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fda6:	887a      	ldrh	r2, [r7, #2]
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	4613      	mov	r3, r2
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	68b9      	ldr	r1, [r7, #8]
 800fdb2:	68f8      	ldr	r0, [r7, #12]
 800fdb4:	f000 f810 	bl	800fdd8 <udp_sendto_if>
 800fdb8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3718      	adds	r7, #24
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	08015e70 	.word	0x08015e70
 800fdc8:	08015f94 	.word	0x08015f94
 800fdcc:	08015ec4 	.word	0x08015ec4
 800fdd0:	08015fac 	.word	0x08015fac
 800fdd4:	08015fc8 	.word	0x08015fc8

0800fdd8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b088      	sub	sp, #32
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	607a      	str	r2, [r7, #4]
 800fde4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d109      	bne.n	800fe00 <udp_sendto_if+0x28>
 800fdec:	4b2e      	ldr	r3, [pc, #184]	; (800fea8 <udp_sendto_if+0xd0>)
 800fdee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdf2:	492e      	ldr	r1, [pc, #184]	; (800feac <udp_sendto_if+0xd4>)
 800fdf4:	482e      	ldr	r0, [pc, #184]	; (800feb0 <udp_sendto_if+0xd8>)
 800fdf6:	f003 f861 	bl	8012ebc <iprintf>
 800fdfa:	f06f 030f 	mvn.w	r3, #15
 800fdfe:	e04f      	b.n	800fea0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d109      	bne.n	800fe1a <udp_sendto_if+0x42>
 800fe06:	4b28      	ldr	r3, [pc, #160]	; (800fea8 <udp_sendto_if+0xd0>)
 800fe08:	f240 2281 	movw	r2, #641	; 0x281
 800fe0c:	4929      	ldr	r1, [pc, #164]	; (800feb4 <udp_sendto_if+0xdc>)
 800fe0e:	4828      	ldr	r0, [pc, #160]	; (800feb0 <udp_sendto_if+0xd8>)
 800fe10:	f003 f854 	bl	8012ebc <iprintf>
 800fe14:	f06f 030f 	mvn.w	r3, #15
 800fe18:	e042      	b.n	800fea0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d109      	bne.n	800fe34 <udp_sendto_if+0x5c>
 800fe20:	4b21      	ldr	r3, [pc, #132]	; (800fea8 <udp_sendto_if+0xd0>)
 800fe22:	f240 2282 	movw	r2, #642	; 0x282
 800fe26:	4924      	ldr	r1, [pc, #144]	; (800feb8 <udp_sendto_if+0xe0>)
 800fe28:	4821      	ldr	r0, [pc, #132]	; (800feb0 <udp_sendto_if+0xd8>)
 800fe2a:	f003 f847 	bl	8012ebc <iprintf>
 800fe2e:	f06f 030f 	mvn.w	r3, #15
 800fe32:	e035      	b.n	800fea0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fe34:	6a3b      	ldr	r3, [r7, #32]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d109      	bne.n	800fe4e <udp_sendto_if+0x76>
 800fe3a:	4b1b      	ldr	r3, [pc, #108]	; (800fea8 <udp_sendto_if+0xd0>)
 800fe3c:	f240 2283 	movw	r2, #643	; 0x283
 800fe40:	491e      	ldr	r1, [pc, #120]	; (800febc <udp_sendto_if+0xe4>)
 800fe42:	481b      	ldr	r0, [pc, #108]	; (800feb0 <udp_sendto_if+0xd8>)
 800fe44:	f003 f83a 	bl	8012ebc <iprintf>
 800fe48:	f06f 030f 	mvn.w	r3, #15
 800fe4c:	e028      	b.n	800fea0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d009      	beq.n	800fe68 <udp_sendto_if+0x90>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d005      	beq.n	800fe68 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fe64:	2be0      	cmp	r3, #224	; 0xe0
 800fe66:	d103      	bne.n	800fe70 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fe68:	6a3b      	ldr	r3, [r7, #32]
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	617b      	str	r3, [r7, #20]
 800fe6e:	e00b      	b.n	800fe88 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681a      	ldr	r2, [r3, #0]
 800fe74:	6a3b      	ldr	r3, [r7, #32]
 800fe76:	3304      	adds	r3, #4
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d002      	beq.n	800fe84 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fe7e:	f06f 0303 	mvn.w	r3, #3
 800fe82:	e00d      	b.n	800fea0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fe88:	887a      	ldrh	r2, [r7, #2]
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	9301      	str	r3, [sp, #4]
 800fe8e:	6a3b      	ldr	r3, [r7, #32]
 800fe90:	9300      	str	r3, [sp, #0]
 800fe92:	4613      	mov	r3, r2
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	68b9      	ldr	r1, [r7, #8]
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 f811 	bl	800fec0 <udp_sendto_if_src>
 800fe9e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3718      	adds	r7, #24
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	08015e70 	.word	0x08015e70
 800feac:	08015fe4 	.word	0x08015fe4
 800feb0:	08015ec4 	.word	0x08015ec4
 800feb4:	08016000 	.word	0x08016000
 800feb8:	0801601c 	.word	0x0801601c
 800febc:	0801603c 	.word	0x0801603c

0800fec0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b08c      	sub	sp, #48	; 0x30
 800fec4:	af04      	add	r7, sp, #16
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d109      	bne.n	800fee8 <udp_sendto_if_src+0x28>
 800fed4:	4b65      	ldr	r3, [pc, #404]	; (801006c <udp_sendto_if_src+0x1ac>)
 800fed6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800feda:	4965      	ldr	r1, [pc, #404]	; (8010070 <udp_sendto_if_src+0x1b0>)
 800fedc:	4865      	ldr	r0, [pc, #404]	; (8010074 <udp_sendto_if_src+0x1b4>)
 800fede:	f002 ffed 	bl	8012ebc <iprintf>
 800fee2:	f06f 030f 	mvn.w	r3, #15
 800fee6:	e0bc      	b.n	8010062 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d109      	bne.n	800ff02 <udp_sendto_if_src+0x42>
 800feee:	4b5f      	ldr	r3, [pc, #380]	; (801006c <udp_sendto_if_src+0x1ac>)
 800fef0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fef4:	4960      	ldr	r1, [pc, #384]	; (8010078 <udp_sendto_if_src+0x1b8>)
 800fef6:	485f      	ldr	r0, [pc, #380]	; (8010074 <udp_sendto_if_src+0x1b4>)
 800fef8:	f002 ffe0 	bl	8012ebc <iprintf>
 800fefc:	f06f 030f 	mvn.w	r3, #15
 800ff00:	e0af      	b.n	8010062 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d109      	bne.n	800ff1c <udp_sendto_if_src+0x5c>
 800ff08:	4b58      	ldr	r3, [pc, #352]	; (801006c <udp_sendto_if_src+0x1ac>)
 800ff0a:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ff0e:	495b      	ldr	r1, [pc, #364]	; (801007c <udp_sendto_if_src+0x1bc>)
 800ff10:	4858      	ldr	r0, [pc, #352]	; (8010074 <udp_sendto_if_src+0x1b4>)
 800ff12:	f002 ffd3 	bl	8012ebc <iprintf>
 800ff16:	f06f 030f 	mvn.w	r3, #15
 800ff1a:	e0a2      	b.n	8010062 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d109      	bne.n	800ff36 <udp_sendto_if_src+0x76>
 800ff22:	4b52      	ldr	r3, [pc, #328]	; (801006c <udp_sendto_if_src+0x1ac>)
 800ff24:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ff28:	4955      	ldr	r1, [pc, #340]	; (8010080 <udp_sendto_if_src+0x1c0>)
 800ff2a:	4852      	ldr	r0, [pc, #328]	; (8010074 <udp_sendto_if_src+0x1b4>)
 800ff2c:	f002 ffc6 	bl	8012ebc <iprintf>
 800ff30:	f06f 030f 	mvn.w	r3, #15
 800ff34:	e095      	b.n	8010062 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d109      	bne.n	800ff50 <udp_sendto_if_src+0x90>
 800ff3c:	4b4b      	ldr	r3, [pc, #300]	; (801006c <udp_sendto_if_src+0x1ac>)
 800ff3e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ff42:	4950      	ldr	r1, [pc, #320]	; (8010084 <udp_sendto_if_src+0x1c4>)
 800ff44:	484b      	ldr	r0, [pc, #300]	; (8010074 <udp_sendto_if_src+0x1b4>)
 800ff46:	f002 ffb9 	bl	8012ebc <iprintf>
 800ff4a:	f06f 030f 	mvn.w	r3, #15
 800ff4e:	e088      	b.n	8010062 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	8a5b      	ldrh	r3, [r3, #18]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10f      	bne.n	800ff78 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ff58:	68f9      	ldr	r1, [r7, #12]
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	8a5b      	ldrh	r3, [r3, #18]
 800ff5e:	461a      	mov	r2, r3
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f000 f893 	bl	801008c <udp_bind>
 800ff66:	4603      	mov	r3, r0
 800ff68:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ff6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d002      	beq.n	800ff78 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ff72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff76:	e074      	b.n	8010062 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	891b      	ldrh	r3, [r3, #8]
 800ff7c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d902      	bls.n	800ff8a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ff84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff88:	e06b      	b.n	8010062 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ff8a:	2108      	movs	r1, #8
 800ff8c:	68b8      	ldr	r0, [r7, #8]
 800ff8e:	f7f9 febb 	bl	8009d08 <pbuf_add_header>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d015      	beq.n	800ffc4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ff98:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff9c:	2108      	movs	r1, #8
 800ff9e:	2022      	movs	r0, #34	; 0x22
 800ffa0:	f7f9 fc64 	bl	800986c <pbuf_alloc>
 800ffa4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d102      	bne.n	800ffb2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ffac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffb0:	e057      	b.n	8010062 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	891b      	ldrh	r3, [r3, #8]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d006      	beq.n	800ffc8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ffba:	68b9      	ldr	r1, [r7, #8]
 800ffbc:	69f8      	ldr	r0, [r7, #28]
 800ffbe:	f7fa f85d 	bl	800a07c <pbuf_chain>
 800ffc2:	e001      	b.n	800ffc8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ffc8:	69fb      	ldr	r3, [r7, #28]
 800ffca:	895b      	ldrh	r3, [r3, #10]
 800ffcc:	2b07      	cmp	r3, #7
 800ffce:	d806      	bhi.n	800ffde <udp_sendto_if_src+0x11e>
 800ffd0:	4b26      	ldr	r3, [pc, #152]	; (801006c <udp_sendto_if_src+0x1ac>)
 800ffd2:	f240 320d 	movw	r2, #781	; 0x30d
 800ffd6:	492c      	ldr	r1, [pc, #176]	; (8010088 <udp_sendto_if_src+0x1c8>)
 800ffd8:	4826      	ldr	r0, [pc, #152]	; (8010074 <udp_sendto_if_src+0x1b4>)
 800ffda:	f002 ff6f 	bl	8012ebc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	8a5b      	ldrh	r3, [r3, #18]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7f8 fa69 	bl	80084c0 <lwip_htons>
 800ffee:	4603      	mov	r3, r0
 800fff0:	461a      	mov	r2, r3
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fff6:	887b      	ldrh	r3, [r7, #2]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7f8 fa61 	bl	80084c0 <lwip_htons>
 800fffe:	4603      	mov	r3, r0
 8010000:	461a      	mov	r2, r3
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	2200      	movs	r2, #0
 801000a:	719a      	strb	r2, [r3, #6]
 801000c:	2200      	movs	r2, #0
 801000e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	891b      	ldrh	r3, [r3, #8]
 8010014:	4618      	mov	r0, r3
 8010016:	f7f8 fa53 	bl	80084c0 <lwip_htons>
 801001a:	4603      	mov	r3, r0
 801001c:	461a      	mov	r2, r3
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010022:	2311      	movs	r3, #17
 8010024:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	7adb      	ldrb	r3, [r3, #11]
 801002a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	7a9b      	ldrb	r3, [r3, #10]
 8010030:	7cb9      	ldrb	r1, [r7, #18]
 8010032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010034:	9202      	str	r2, [sp, #8]
 8010036:	7cfa      	ldrb	r2, [r7, #19]
 8010038:	9201      	str	r2, [sp, #4]
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	460b      	mov	r3, r1
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010042:	69f8      	ldr	r0, [r7, #28]
 8010044:	f001 fc48 	bl	80118d8 <ip4_output_if_src>
 8010048:	4603      	mov	r3, r0
 801004a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801004c:	69fa      	ldr	r2, [r7, #28]
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	429a      	cmp	r2, r3
 8010052:	d004      	beq.n	801005e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010054:	69f8      	ldr	r0, [r7, #28]
 8010056:	f7f9 feed 	bl	8009e34 <pbuf_free>
    q = NULL;
 801005a:	2300      	movs	r3, #0
 801005c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801005e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3720      	adds	r7, #32
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	08015e70 	.word	0x08015e70
 8010070:	0801605c 	.word	0x0801605c
 8010074:	08015ec4 	.word	0x08015ec4
 8010078:	0801607c 	.word	0x0801607c
 801007c:	0801609c 	.word	0x0801609c
 8010080:	080160c0 	.word	0x080160c0
 8010084:	080160e4 	.word	0x080160e4
 8010088:	08016108 	.word	0x08016108

0801008c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af00      	add	r7, sp, #0
 8010092:	60f8      	str	r0, [r7, #12]
 8010094:	60b9      	str	r1, [r7, #8]
 8010096:	4613      	mov	r3, r2
 8010098:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80100a0:	4b39      	ldr	r3, [pc, #228]	; (8010188 <udp_bind+0xfc>)
 80100a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d109      	bne.n	80100be <udp_bind+0x32>
 80100aa:	4b38      	ldr	r3, [pc, #224]	; (801018c <udp_bind+0x100>)
 80100ac:	f240 32b7 	movw	r2, #951	; 0x3b7
 80100b0:	4937      	ldr	r1, [pc, #220]	; (8010190 <udp_bind+0x104>)
 80100b2:	4838      	ldr	r0, [pc, #224]	; (8010194 <udp_bind+0x108>)
 80100b4:	f002 ff02 	bl	8012ebc <iprintf>
 80100b8:	f06f 030f 	mvn.w	r3, #15
 80100bc:	e060      	b.n	8010180 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100c2:	4b35      	ldr	r3, [pc, #212]	; (8010198 <udp_bind+0x10c>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	617b      	str	r3, [r7, #20]
 80100c8:	e009      	b.n	80100de <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d102      	bne.n	80100d8 <udp_bind+0x4c>
      rebind = 1;
 80100d2:	2301      	movs	r3, #1
 80100d4:	74fb      	strb	r3, [r7, #19]
      break;
 80100d6:	e005      	b.n	80100e4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	617b      	str	r3, [r7, #20]
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d1f2      	bne.n	80100ca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80100e4:	88fb      	ldrh	r3, [r7, #6]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d109      	bne.n	80100fe <udp_bind+0x72>
    port = udp_new_port();
 80100ea:	f7ff fc35 	bl	800f958 <udp_new_port>
 80100ee:	4603      	mov	r3, r0
 80100f0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80100f2:	88fb      	ldrh	r3, [r7, #6]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d12c      	bne.n	8010152 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80100f8:	f06f 0307 	mvn.w	r3, #7
 80100fc:	e040      	b.n	8010180 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100fe:	4b26      	ldr	r3, [pc, #152]	; (8010198 <udp_bind+0x10c>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	617b      	str	r3, [r7, #20]
 8010104:	e022      	b.n	801014c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	429a      	cmp	r2, r3
 801010c:	d01b      	beq.n	8010146 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	8a5b      	ldrh	r3, [r3, #18]
 8010112:	88fa      	ldrh	r2, [r7, #6]
 8010114:	429a      	cmp	r2, r3
 8010116:	d116      	bne.n	8010146 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	681a      	ldr	r2, [r3, #0]
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010120:	429a      	cmp	r2, r3
 8010122:	d00d      	beq.n	8010140 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00a      	beq.n	8010140 <udp_bind+0xb4>
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d006      	beq.n	8010140 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010132:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010134:	2b00      	cmp	r3, #0
 8010136:	d003      	beq.n	8010140 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d102      	bne.n	8010146 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010140:	f06f 0307 	mvn.w	r3, #7
 8010144:	e01c      	b.n	8010180 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	617b      	str	r3, [r7, #20]
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d1d9      	bne.n	8010106 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d002      	beq.n	801015e <udp_bind+0xd2>
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	e000      	b.n	8010160 <udp_bind+0xd4>
 801015e:	2300      	movs	r3, #0
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	88fa      	ldrh	r2, [r7, #6]
 8010168:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801016a:	7cfb      	ldrb	r3, [r7, #19]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d106      	bne.n	801017e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010170:	4b09      	ldr	r3, [pc, #36]	; (8010198 <udp_bind+0x10c>)
 8010172:	681a      	ldr	r2, [r3, #0]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010178:	4a07      	ldr	r2, [pc, #28]	; (8010198 <udp_bind+0x10c>)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3718      	adds	r7, #24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	080169c4 	.word	0x080169c4
 801018c:	08015e70 	.word	0x08015e70
 8010190:	08016138 	.word	0x08016138
 8010194:	08015ec4 	.word	0x08015ec4
 8010198:	2400bd68 	.word	0x2400bd68

0801019c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	4613      	mov	r3, r2
 80101a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d109      	bne.n	80101c4 <udp_connect+0x28>
 80101b0:	4b2c      	ldr	r3, [pc, #176]	; (8010264 <udp_connect+0xc8>)
 80101b2:	f240 4235 	movw	r2, #1077	; 0x435
 80101b6:	492c      	ldr	r1, [pc, #176]	; (8010268 <udp_connect+0xcc>)
 80101b8:	482c      	ldr	r0, [pc, #176]	; (801026c <udp_connect+0xd0>)
 80101ba:	f002 fe7f 	bl	8012ebc <iprintf>
 80101be:	f06f 030f 	mvn.w	r3, #15
 80101c2:	e04b      	b.n	801025c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d109      	bne.n	80101de <udp_connect+0x42>
 80101ca:	4b26      	ldr	r3, [pc, #152]	; (8010264 <udp_connect+0xc8>)
 80101cc:	f240 4236 	movw	r2, #1078	; 0x436
 80101d0:	4927      	ldr	r1, [pc, #156]	; (8010270 <udp_connect+0xd4>)
 80101d2:	4826      	ldr	r0, [pc, #152]	; (801026c <udp_connect+0xd0>)
 80101d4:	f002 fe72 	bl	8012ebc <iprintf>
 80101d8:	f06f 030f 	mvn.w	r3, #15
 80101dc:	e03e      	b.n	801025c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	8a5b      	ldrh	r3, [r3, #18]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d10f      	bne.n	8010206 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80101e6:	68f9      	ldr	r1, [r7, #12]
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	8a5b      	ldrh	r3, [r3, #18]
 80101ec:	461a      	mov	r2, r3
 80101ee:	68f8      	ldr	r0, [r7, #12]
 80101f0:	f7ff ff4c 	bl	801008c <udp_bind>
 80101f4:	4603      	mov	r3, r0
 80101f6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80101f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d002      	beq.n	8010206 <udp_connect+0x6a>
      return err;
 8010200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010204:	e02a      	b.n	801025c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d002      	beq.n	8010212 <udp_connect+0x76>
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	e000      	b.n	8010214 <udp_connect+0x78>
 8010212:	2300      	movs	r3, #0
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	88fa      	ldrh	r2, [r7, #6]
 801021c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	7c1b      	ldrb	r3, [r3, #16]
 8010222:	f043 0304 	orr.w	r3, r3, #4
 8010226:	b2da      	uxtb	r2, r3
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801022c:	4b11      	ldr	r3, [pc, #68]	; (8010274 <udp_connect+0xd8>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	617b      	str	r3, [r7, #20]
 8010232:	e008      	b.n	8010246 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010234:	68fa      	ldr	r2, [r7, #12]
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	429a      	cmp	r2, r3
 801023a:	d101      	bne.n	8010240 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801023c:	2300      	movs	r3, #0
 801023e:	e00d      	b.n	801025c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	617b      	str	r3, [r7, #20]
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d1f3      	bne.n	8010234 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801024c:	4b09      	ldr	r3, [pc, #36]	; (8010274 <udp_connect+0xd8>)
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010254:	4a07      	ldr	r2, [pc, #28]	; (8010274 <udp_connect+0xd8>)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801025a:	2300      	movs	r3, #0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3718      	adds	r7, #24
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	08015e70 	.word	0x08015e70
 8010268:	08016150 	.word	0x08016150
 801026c:	08015ec4 	.word	0x08015ec4
 8010270:	0801616c 	.word	0x0801616c
 8010274:	2400bd68 	.word	0x2400bd68

08010278 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801027e:	2000      	movs	r0, #0
 8010280:	f7f8 febe 	bl	8009000 <memp_malloc>
 8010284:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d007      	beq.n	801029c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801028c:	2220      	movs	r2, #32
 801028e:	2100      	movs	r1, #0
 8010290:	6878      	ldr	r0, [r7, #4]
 8010292:	f002 fd76 	bl	8012d82 <memset>
    pcb->ttl = UDP_TTL;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	22ff      	movs	r2, #255	; 0xff
 801029a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801029c:	687b      	ldr	r3, [r7, #4]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3708      	adds	r7, #8
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d01e      	beq.n	80102f6 <udp_netif_ip_addr_changed+0x4e>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d01a      	beq.n	80102f6 <udp_netif_ip_addr_changed+0x4e>
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d017      	beq.n	80102f6 <udp_netif_ip_addr_changed+0x4e>
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d013      	beq.n	80102f6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80102ce:	4b0d      	ldr	r3, [pc, #52]	; (8010304 <udp_netif_ip_addr_changed+0x5c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	60fb      	str	r3, [r7, #12]
 80102d4:	e00c      	b.n	80102f0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d103      	bne.n	80102ea <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	60fb      	str	r3, [r7, #12]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1ef      	bne.n	80102d6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80102f6:	bf00      	nop
 80102f8:	3714      	adds	r7, #20
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	2400bd68 	.word	0x2400bd68

08010308 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b082      	sub	sp, #8
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010310:	4915      	ldr	r1, [pc, #84]	; (8010368 <etharp_free_entry+0x60>)
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	4613      	mov	r3, r2
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	4413      	add	r3, r2
 801031a:	00db      	lsls	r3, r3, #3
 801031c:	440b      	add	r3, r1
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d013      	beq.n	801034c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010324:	4910      	ldr	r1, [pc, #64]	; (8010368 <etharp_free_entry+0x60>)
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	4613      	mov	r3, r2
 801032a:	005b      	lsls	r3, r3, #1
 801032c:	4413      	add	r3, r2
 801032e:	00db      	lsls	r3, r3, #3
 8010330:	440b      	add	r3, r1
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4618      	mov	r0, r3
 8010336:	f7f9 fd7d 	bl	8009e34 <pbuf_free>
    arp_table[i].q = NULL;
 801033a:	490b      	ldr	r1, [pc, #44]	; (8010368 <etharp_free_entry+0x60>)
 801033c:	687a      	ldr	r2, [r7, #4]
 801033e:	4613      	mov	r3, r2
 8010340:	005b      	lsls	r3, r3, #1
 8010342:	4413      	add	r3, r2
 8010344:	00db      	lsls	r3, r3, #3
 8010346:	440b      	add	r3, r1
 8010348:	2200      	movs	r2, #0
 801034a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801034c:	4906      	ldr	r1, [pc, #24]	; (8010368 <etharp_free_entry+0x60>)
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	4613      	mov	r3, r2
 8010352:	005b      	lsls	r3, r3, #1
 8010354:	4413      	add	r3, r2
 8010356:	00db      	lsls	r3, r3, #3
 8010358:	440b      	add	r3, r1
 801035a:	3314      	adds	r3, #20
 801035c:	2200      	movs	r2, #0
 801035e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010360:	bf00      	nop
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	2400bd6c 	.word	0x2400bd6c

0801036c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010372:	2300      	movs	r3, #0
 8010374:	607b      	str	r3, [r7, #4]
 8010376:	e096      	b.n	80104a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010378:	494f      	ldr	r1, [pc, #316]	; (80104b8 <etharp_tmr+0x14c>)
 801037a:	687a      	ldr	r2, [r7, #4]
 801037c:	4613      	mov	r3, r2
 801037e:	005b      	lsls	r3, r3, #1
 8010380:	4413      	add	r3, r2
 8010382:	00db      	lsls	r3, r3, #3
 8010384:	440b      	add	r3, r1
 8010386:	3314      	adds	r3, #20
 8010388:	781b      	ldrb	r3, [r3, #0]
 801038a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801038c:	78fb      	ldrb	r3, [r7, #3]
 801038e:	2b00      	cmp	r3, #0
 8010390:	f000 8086 	beq.w	80104a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010394:	4948      	ldr	r1, [pc, #288]	; (80104b8 <etharp_tmr+0x14c>)
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	4613      	mov	r3, r2
 801039a:	005b      	lsls	r3, r3, #1
 801039c:	4413      	add	r3, r2
 801039e:	00db      	lsls	r3, r3, #3
 80103a0:	440b      	add	r3, r1
 80103a2:	3312      	adds	r3, #18
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	3301      	adds	r3, #1
 80103a8:	b298      	uxth	r0, r3
 80103aa:	4943      	ldr	r1, [pc, #268]	; (80104b8 <etharp_tmr+0x14c>)
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	4613      	mov	r3, r2
 80103b0:	005b      	lsls	r3, r3, #1
 80103b2:	4413      	add	r3, r2
 80103b4:	00db      	lsls	r3, r3, #3
 80103b6:	440b      	add	r3, r1
 80103b8:	3312      	adds	r3, #18
 80103ba:	4602      	mov	r2, r0
 80103bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80103be:	493e      	ldr	r1, [pc, #248]	; (80104b8 <etharp_tmr+0x14c>)
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	4613      	mov	r3, r2
 80103c4:	005b      	lsls	r3, r3, #1
 80103c6:	4413      	add	r3, r2
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	440b      	add	r3, r1
 80103cc:	3312      	adds	r3, #18
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80103d4:	d215      	bcs.n	8010402 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80103d6:	4938      	ldr	r1, [pc, #224]	; (80104b8 <etharp_tmr+0x14c>)
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	4613      	mov	r3, r2
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	4413      	add	r3, r2
 80103e0:	00db      	lsls	r3, r3, #3
 80103e2:	440b      	add	r3, r1
 80103e4:	3314      	adds	r3, #20
 80103e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d10e      	bne.n	801040a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80103ec:	4932      	ldr	r1, [pc, #200]	; (80104b8 <etharp_tmr+0x14c>)
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	4613      	mov	r3, r2
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	4413      	add	r3, r2
 80103f6:	00db      	lsls	r3, r3, #3
 80103f8:	440b      	add	r3, r1
 80103fa:	3312      	adds	r3, #18
 80103fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80103fe:	2b04      	cmp	r3, #4
 8010400:	d903      	bls.n	801040a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f7ff ff80 	bl	8010308 <etharp_free_entry>
 8010408:	e04a      	b.n	80104a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801040a:	492b      	ldr	r1, [pc, #172]	; (80104b8 <etharp_tmr+0x14c>)
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	4613      	mov	r3, r2
 8010410:	005b      	lsls	r3, r3, #1
 8010412:	4413      	add	r3, r2
 8010414:	00db      	lsls	r3, r3, #3
 8010416:	440b      	add	r3, r1
 8010418:	3314      	adds	r3, #20
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	2b03      	cmp	r3, #3
 801041e:	d10a      	bne.n	8010436 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010420:	4925      	ldr	r1, [pc, #148]	; (80104b8 <etharp_tmr+0x14c>)
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	4613      	mov	r3, r2
 8010426:	005b      	lsls	r3, r3, #1
 8010428:	4413      	add	r3, r2
 801042a:	00db      	lsls	r3, r3, #3
 801042c:	440b      	add	r3, r1
 801042e:	3314      	adds	r3, #20
 8010430:	2204      	movs	r2, #4
 8010432:	701a      	strb	r2, [r3, #0]
 8010434:	e034      	b.n	80104a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010436:	4920      	ldr	r1, [pc, #128]	; (80104b8 <etharp_tmr+0x14c>)
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	4613      	mov	r3, r2
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	4413      	add	r3, r2
 8010440:	00db      	lsls	r3, r3, #3
 8010442:	440b      	add	r3, r1
 8010444:	3314      	adds	r3, #20
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	2b04      	cmp	r3, #4
 801044a:	d10a      	bne.n	8010462 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801044c:	491a      	ldr	r1, [pc, #104]	; (80104b8 <etharp_tmr+0x14c>)
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	4613      	mov	r3, r2
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	4413      	add	r3, r2
 8010456:	00db      	lsls	r3, r3, #3
 8010458:	440b      	add	r3, r1
 801045a:	3314      	adds	r3, #20
 801045c:	2202      	movs	r2, #2
 801045e:	701a      	strb	r2, [r3, #0]
 8010460:	e01e      	b.n	80104a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010462:	4915      	ldr	r1, [pc, #84]	; (80104b8 <etharp_tmr+0x14c>)
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	4613      	mov	r3, r2
 8010468:	005b      	lsls	r3, r3, #1
 801046a:	4413      	add	r3, r2
 801046c:	00db      	lsls	r3, r3, #3
 801046e:	440b      	add	r3, r1
 8010470:	3314      	adds	r3, #20
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d113      	bne.n	80104a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010478:	490f      	ldr	r1, [pc, #60]	; (80104b8 <etharp_tmr+0x14c>)
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	4613      	mov	r3, r2
 801047e:	005b      	lsls	r3, r3, #1
 8010480:	4413      	add	r3, r2
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	440b      	add	r3, r1
 8010486:	3308      	adds	r3, #8
 8010488:	6818      	ldr	r0, [r3, #0]
 801048a:	687a      	ldr	r2, [r7, #4]
 801048c:	4613      	mov	r3, r2
 801048e:	005b      	lsls	r3, r3, #1
 8010490:	4413      	add	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	4a08      	ldr	r2, [pc, #32]	; (80104b8 <etharp_tmr+0x14c>)
 8010496:	4413      	add	r3, r2
 8010498:	3304      	adds	r3, #4
 801049a:	4619      	mov	r1, r3
 801049c:	f000 fe6e 	bl	801117c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	3301      	adds	r3, #1
 80104a4:	607b      	str	r3, [r7, #4]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b09      	cmp	r3, #9
 80104aa:	f77f af65 	ble.w	8010378 <etharp_tmr+0xc>
      }
    }
  }
}
 80104ae:	bf00      	nop
 80104b0:	bf00      	nop
 80104b2:	3708      	adds	r7, #8
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	2400bd6c 	.word	0x2400bd6c

080104bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08a      	sub	sp, #40	; 0x28
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	460b      	mov	r3, r1
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80104ca:	230a      	movs	r3, #10
 80104cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80104ce:	230a      	movs	r3, #10
 80104d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80104d2:	230a      	movs	r3, #10
 80104d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80104da:	230a      	movs	r3, #10
 80104dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80104de:	2300      	movs	r3, #0
 80104e0:	83bb      	strh	r3, [r7, #28]
 80104e2:	2300      	movs	r3, #0
 80104e4:	837b      	strh	r3, [r7, #26]
 80104e6:	2300      	movs	r3, #0
 80104e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104ea:	2300      	movs	r3, #0
 80104ec:	843b      	strh	r3, [r7, #32]
 80104ee:	e0ae      	b.n	801064e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80104f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104f4:	49a6      	ldr	r1, [pc, #664]	; (8010790 <etharp_find_entry+0x2d4>)
 80104f6:	4613      	mov	r3, r2
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	4413      	add	r3, r2
 80104fc:	00db      	lsls	r3, r3, #3
 80104fe:	440b      	add	r3, r1
 8010500:	3314      	adds	r3, #20
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801050a:	2b0a      	cmp	r3, #10
 801050c:	d105      	bne.n	801051a <etharp_find_entry+0x5e>
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d102      	bne.n	801051a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010514:	8c3b      	ldrh	r3, [r7, #32]
 8010516:	847b      	strh	r3, [r7, #34]	; 0x22
 8010518:	e095      	b.n	8010646 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801051a:	7dfb      	ldrb	r3, [r7, #23]
 801051c:	2b00      	cmp	r3, #0
 801051e:	f000 8092 	beq.w	8010646 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010522:	7dfb      	ldrb	r3, [r7, #23]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d009      	beq.n	801053c <etharp_find_entry+0x80>
 8010528:	7dfb      	ldrb	r3, [r7, #23]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d806      	bhi.n	801053c <etharp_find_entry+0x80>
 801052e:	4b99      	ldr	r3, [pc, #612]	; (8010794 <etharp_find_entry+0x2d8>)
 8010530:	f240 1223 	movw	r2, #291	; 0x123
 8010534:	4998      	ldr	r1, [pc, #608]	; (8010798 <etharp_find_entry+0x2dc>)
 8010536:	4899      	ldr	r0, [pc, #612]	; (801079c <etharp_find_entry+0x2e0>)
 8010538:	f002 fcc0 	bl	8012ebc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d020      	beq.n	8010584 <etharp_find_entry+0xc8>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	6819      	ldr	r1, [r3, #0]
 8010546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801054a:	4891      	ldr	r0, [pc, #580]	; (8010790 <etharp_find_entry+0x2d4>)
 801054c:	4613      	mov	r3, r2
 801054e:	005b      	lsls	r3, r3, #1
 8010550:	4413      	add	r3, r2
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	4403      	add	r3, r0
 8010556:	3304      	adds	r3, #4
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4299      	cmp	r1, r3
 801055c:	d112      	bne.n	8010584 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00c      	beq.n	801057e <etharp_find_entry+0xc2>
 8010564:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010568:	4989      	ldr	r1, [pc, #548]	; (8010790 <etharp_find_entry+0x2d4>)
 801056a:	4613      	mov	r3, r2
 801056c:	005b      	lsls	r3, r3, #1
 801056e:	4413      	add	r3, r2
 8010570:	00db      	lsls	r3, r3, #3
 8010572:	440b      	add	r3, r1
 8010574:	3308      	adds	r3, #8
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	429a      	cmp	r2, r3
 801057c:	d102      	bne.n	8010584 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801057e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010582:	e100      	b.n	8010786 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010584:	7dfb      	ldrb	r3, [r7, #23]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d140      	bne.n	801060c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801058a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801058e:	4980      	ldr	r1, [pc, #512]	; (8010790 <etharp_find_entry+0x2d4>)
 8010590:	4613      	mov	r3, r2
 8010592:	005b      	lsls	r3, r3, #1
 8010594:	4413      	add	r3, r2
 8010596:	00db      	lsls	r3, r3, #3
 8010598:	440b      	add	r3, r1
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d01a      	beq.n	80105d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80105a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105a4:	497a      	ldr	r1, [pc, #488]	; (8010790 <etharp_find_entry+0x2d4>)
 80105a6:	4613      	mov	r3, r2
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	4413      	add	r3, r2
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	440b      	add	r3, r1
 80105b0:	3312      	adds	r3, #18
 80105b2:	881b      	ldrh	r3, [r3, #0]
 80105b4:	8bba      	ldrh	r2, [r7, #28]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d845      	bhi.n	8010646 <etharp_find_entry+0x18a>
            old_queue = i;
 80105ba:	8c3b      	ldrh	r3, [r7, #32]
 80105bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80105be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105c2:	4973      	ldr	r1, [pc, #460]	; (8010790 <etharp_find_entry+0x2d4>)
 80105c4:	4613      	mov	r3, r2
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	4413      	add	r3, r2
 80105ca:	00db      	lsls	r3, r3, #3
 80105cc:	440b      	add	r3, r1
 80105ce:	3312      	adds	r3, #18
 80105d0:	881b      	ldrh	r3, [r3, #0]
 80105d2:	83bb      	strh	r3, [r7, #28]
 80105d4:	e037      	b.n	8010646 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80105d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105da:	496d      	ldr	r1, [pc, #436]	; (8010790 <etharp_find_entry+0x2d4>)
 80105dc:	4613      	mov	r3, r2
 80105de:	005b      	lsls	r3, r3, #1
 80105e0:	4413      	add	r3, r2
 80105e2:	00db      	lsls	r3, r3, #3
 80105e4:	440b      	add	r3, r1
 80105e6:	3312      	adds	r3, #18
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	8b7a      	ldrh	r2, [r7, #26]
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d82a      	bhi.n	8010646 <etharp_find_entry+0x18a>
            old_pending = i;
 80105f0:	8c3b      	ldrh	r3, [r7, #32]
 80105f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80105f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105f8:	4965      	ldr	r1, [pc, #404]	; (8010790 <etharp_find_entry+0x2d4>)
 80105fa:	4613      	mov	r3, r2
 80105fc:	005b      	lsls	r3, r3, #1
 80105fe:	4413      	add	r3, r2
 8010600:	00db      	lsls	r3, r3, #3
 8010602:	440b      	add	r3, r1
 8010604:	3312      	adds	r3, #18
 8010606:	881b      	ldrh	r3, [r3, #0]
 8010608:	837b      	strh	r3, [r7, #26]
 801060a:	e01c      	b.n	8010646 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801060c:	7dfb      	ldrb	r3, [r7, #23]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d919      	bls.n	8010646 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010612:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010616:	495e      	ldr	r1, [pc, #376]	; (8010790 <etharp_find_entry+0x2d4>)
 8010618:	4613      	mov	r3, r2
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	4413      	add	r3, r2
 801061e:	00db      	lsls	r3, r3, #3
 8010620:	440b      	add	r3, r1
 8010622:	3312      	adds	r3, #18
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	8b3a      	ldrh	r2, [r7, #24]
 8010628:	429a      	cmp	r2, r3
 801062a:	d80c      	bhi.n	8010646 <etharp_find_entry+0x18a>
            old_stable = i;
 801062c:	8c3b      	ldrh	r3, [r7, #32]
 801062e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010630:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010634:	4956      	ldr	r1, [pc, #344]	; (8010790 <etharp_find_entry+0x2d4>)
 8010636:	4613      	mov	r3, r2
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	4413      	add	r3, r2
 801063c:	00db      	lsls	r3, r3, #3
 801063e:	440b      	add	r3, r1
 8010640:	3312      	adds	r3, #18
 8010642:	881b      	ldrh	r3, [r3, #0]
 8010644:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010646:	8c3b      	ldrh	r3, [r7, #32]
 8010648:	3301      	adds	r3, #1
 801064a:	b29b      	uxth	r3, r3
 801064c:	843b      	strh	r3, [r7, #32]
 801064e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010652:	2b09      	cmp	r3, #9
 8010654:	f77f af4c 	ble.w	80104f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010658:	7afb      	ldrb	r3, [r7, #11]
 801065a:	f003 0302 	and.w	r3, r3, #2
 801065e:	2b00      	cmp	r3, #0
 8010660:	d108      	bne.n	8010674 <etharp_find_entry+0x1b8>
 8010662:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010666:	2b0a      	cmp	r3, #10
 8010668:	d107      	bne.n	801067a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801066a:	7afb      	ldrb	r3, [r7, #11]
 801066c:	f003 0301 	and.w	r3, r3, #1
 8010670:	2b00      	cmp	r3, #0
 8010672:	d102      	bne.n	801067a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010678:	e085      	b.n	8010786 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801067a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801067e:	2b09      	cmp	r3, #9
 8010680:	dc02      	bgt.n	8010688 <etharp_find_entry+0x1cc>
    i = empty;
 8010682:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010684:	843b      	strh	r3, [r7, #32]
 8010686:	e039      	b.n	80106fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010688:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801068c:	2b09      	cmp	r3, #9
 801068e:	dc14      	bgt.n	80106ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010692:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010694:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010698:	493d      	ldr	r1, [pc, #244]	; (8010790 <etharp_find_entry+0x2d4>)
 801069a:	4613      	mov	r3, r2
 801069c:	005b      	lsls	r3, r3, #1
 801069e:	4413      	add	r3, r2
 80106a0:	00db      	lsls	r3, r3, #3
 80106a2:	440b      	add	r3, r1
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d018      	beq.n	80106dc <etharp_find_entry+0x220>
 80106aa:	4b3a      	ldr	r3, [pc, #232]	; (8010794 <etharp_find_entry+0x2d8>)
 80106ac:	f240 126d 	movw	r2, #365	; 0x16d
 80106b0:	493b      	ldr	r1, [pc, #236]	; (80107a0 <etharp_find_entry+0x2e4>)
 80106b2:	483a      	ldr	r0, [pc, #232]	; (801079c <etharp_find_entry+0x2e0>)
 80106b4:	f002 fc02 	bl	8012ebc <iprintf>
 80106b8:	e010      	b.n	80106dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80106ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80106be:	2b09      	cmp	r3, #9
 80106c0:	dc02      	bgt.n	80106c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80106c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80106c4:	843b      	strh	r3, [r7, #32]
 80106c6:	e009      	b.n	80106dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80106c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80106cc:	2b09      	cmp	r3, #9
 80106ce:	dc02      	bgt.n	80106d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80106d0:	8bfb      	ldrh	r3, [r7, #30]
 80106d2:	843b      	strh	r3, [r7, #32]
 80106d4:	e002      	b.n	80106dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80106d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106da:	e054      	b.n	8010786 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80106dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80106e0:	2b09      	cmp	r3, #9
 80106e2:	dd06      	ble.n	80106f2 <etharp_find_entry+0x236>
 80106e4:	4b2b      	ldr	r3, [pc, #172]	; (8010794 <etharp_find_entry+0x2d8>)
 80106e6:	f240 127f 	movw	r2, #383	; 0x17f
 80106ea:	492e      	ldr	r1, [pc, #184]	; (80107a4 <etharp_find_entry+0x2e8>)
 80106ec:	482b      	ldr	r0, [pc, #172]	; (801079c <etharp_find_entry+0x2e0>)
 80106ee:	f002 fbe5 	bl	8012ebc <iprintf>
    etharp_free_entry(i);
 80106f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff fe06 	bl	8010308 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80106fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010700:	2b09      	cmp	r3, #9
 8010702:	dd06      	ble.n	8010712 <etharp_find_entry+0x256>
 8010704:	4b23      	ldr	r3, [pc, #140]	; (8010794 <etharp_find_entry+0x2d8>)
 8010706:	f240 1283 	movw	r2, #387	; 0x183
 801070a:	4926      	ldr	r1, [pc, #152]	; (80107a4 <etharp_find_entry+0x2e8>)
 801070c:	4823      	ldr	r0, [pc, #140]	; (801079c <etharp_find_entry+0x2e0>)
 801070e:	f002 fbd5 	bl	8012ebc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010716:	491e      	ldr	r1, [pc, #120]	; (8010790 <etharp_find_entry+0x2d4>)
 8010718:	4613      	mov	r3, r2
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	4413      	add	r3, r2
 801071e:	00db      	lsls	r3, r3, #3
 8010720:	440b      	add	r3, r1
 8010722:	3314      	adds	r3, #20
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d006      	beq.n	8010738 <etharp_find_entry+0x27c>
 801072a:	4b1a      	ldr	r3, [pc, #104]	; (8010794 <etharp_find_entry+0x2d8>)
 801072c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010730:	491d      	ldr	r1, [pc, #116]	; (80107a8 <etharp_find_entry+0x2ec>)
 8010732:	481a      	ldr	r0, [pc, #104]	; (801079c <etharp_find_entry+0x2e0>)
 8010734:	f002 fbc2 	bl	8012ebc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00b      	beq.n	8010756 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801073e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6819      	ldr	r1, [r3, #0]
 8010746:	4812      	ldr	r0, [pc, #72]	; (8010790 <etharp_find_entry+0x2d4>)
 8010748:	4613      	mov	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4413      	add	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	4403      	add	r3, r0
 8010752:	3304      	adds	r3, #4
 8010754:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801075a:	490d      	ldr	r1, [pc, #52]	; (8010790 <etharp_find_entry+0x2d4>)
 801075c:	4613      	mov	r3, r2
 801075e:	005b      	lsls	r3, r3, #1
 8010760:	4413      	add	r3, r2
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	440b      	add	r3, r1
 8010766:	3312      	adds	r3, #18
 8010768:	2200      	movs	r2, #0
 801076a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801076c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010770:	4907      	ldr	r1, [pc, #28]	; (8010790 <etharp_find_entry+0x2d4>)
 8010772:	4613      	mov	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4413      	add	r3, r2
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	440b      	add	r3, r1
 801077c:	3308      	adds	r3, #8
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010782:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3728      	adds	r7, #40	; 0x28
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	2400bd6c 	.word	0x2400bd6c
 8010794:	080161d4 	.word	0x080161d4
 8010798:	0801620c 	.word	0x0801620c
 801079c:	0801624c 	.word	0x0801624c
 80107a0:	08016274 	.word	0x08016274
 80107a4:	0801628c 	.word	0x0801628c
 80107a8:	080162a0 	.word	0x080162a0

080107ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b088      	sub	sp, #32
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	60b9      	str	r1, [r7, #8]
 80107b6:	607a      	str	r2, [r7, #4]
 80107b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80107c0:	2b06      	cmp	r3, #6
 80107c2:	d006      	beq.n	80107d2 <etharp_update_arp_entry+0x26>
 80107c4:	4b48      	ldr	r3, [pc, #288]	; (80108e8 <etharp_update_arp_entry+0x13c>)
 80107c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80107ca:	4948      	ldr	r1, [pc, #288]	; (80108ec <etharp_update_arp_entry+0x140>)
 80107cc:	4848      	ldr	r0, [pc, #288]	; (80108f0 <etharp_update_arp_entry+0x144>)
 80107ce:	f002 fb75 	bl	8012ebc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d012      	beq.n	80107fe <etharp_update_arp_entry+0x52>
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00e      	beq.n	80107fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	68f9      	ldr	r1, [r7, #12]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f001 f924 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 80107ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d105      	bne.n	80107fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80107fa:	2be0      	cmp	r3, #224	; 0xe0
 80107fc:	d102      	bne.n	8010804 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80107fe:	f06f 030f 	mvn.w	r3, #15
 8010802:	e06c      	b.n	80108de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010804:	78fb      	ldrb	r3, [r7, #3]
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	4619      	mov	r1, r3
 801080a:	68b8      	ldr	r0, [r7, #8]
 801080c:	f7ff fe56 	bl	80104bc <etharp_find_entry>
 8010810:	4603      	mov	r3, r0
 8010812:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010814:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010818:	2b00      	cmp	r3, #0
 801081a:	da02      	bge.n	8010822 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801081c:	8afb      	ldrh	r3, [r7, #22]
 801081e:	b25b      	sxtb	r3, r3
 8010820:	e05d      	b.n	80108de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010822:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010826:	4933      	ldr	r1, [pc, #204]	; (80108f4 <etharp_update_arp_entry+0x148>)
 8010828:	4613      	mov	r3, r2
 801082a:	005b      	lsls	r3, r3, #1
 801082c:	4413      	add	r3, r2
 801082e:	00db      	lsls	r3, r3, #3
 8010830:	440b      	add	r3, r1
 8010832:	3314      	adds	r3, #20
 8010834:	2202      	movs	r2, #2
 8010836:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010838:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801083c:	492d      	ldr	r1, [pc, #180]	; (80108f4 <etharp_update_arp_entry+0x148>)
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3308      	adds	r3, #8
 801084a:	68fa      	ldr	r2, [r7, #12]
 801084c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801084e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010852:	4613      	mov	r3, r2
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	4413      	add	r3, r2
 8010858:	00db      	lsls	r3, r3, #3
 801085a:	3308      	adds	r3, #8
 801085c:	4a25      	ldr	r2, [pc, #148]	; (80108f4 <etharp_update_arp_entry+0x148>)
 801085e:	4413      	add	r3, r2
 8010860:	3304      	adds	r3, #4
 8010862:	2206      	movs	r2, #6
 8010864:	6879      	ldr	r1, [r7, #4]
 8010866:	4618      	mov	r0, r3
 8010868:	f002 fa7d 	bl	8012d66 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801086c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010870:	4920      	ldr	r1, [pc, #128]	; (80108f4 <etharp_update_arp_entry+0x148>)
 8010872:	4613      	mov	r3, r2
 8010874:	005b      	lsls	r3, r3, #1
 8010876:	4413      	add	r3, r2
 8010878:	00db      	lsls	r3, r3, #3
 801087a:	440b      	add	r3, r1
 801087c:	3312      	adds	r3, #18
 801087e:	2200      	movs	r2, #0
 8010880:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010882:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010886:	491b      	ldr	r1, [pc, #108]	; (80108f4 <etharp_update_arp_entry+0x148>)
 8010888:	4613      	mov	r3, r2
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	4413      	add	r3, r2
 801088e:	00db      	lsls	r3, r3, #3
 8010890:	440b      	add	r3, r1
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d021      	beq.n	80108dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010898:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801089c:	4915      	ldr	r1, [pc, #84]	; (80108f4 <etharp_update_arp_entry+0x148>)
 801089e:	4613      	mov	r3, r2
 80108a0:	005b      	lsls	r3, r3, #1
 80108a2:	4413      	add	r3, r2
 80108a4:	00db      	lsls	r3, r3, #3
 80108a6:	440b      	add	r3, r1
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80108ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80108b0:	4910      	ldr	r1, [pc, #64]	; (80108f4 <etharp_update_arp_entry+0x148>)
 80108b2:	4613      	mov	r3, r2
 80108b4:	005b      	lsls	r3, r3, #1
 80108b6:	4413      	add	r3, r2
 80108b8:	00db      	lsls	r3, r3, #3
 80108ba:	440b      	add	r3, r1
 80108bc:	2200      	movs	r2, #0
 80108be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80108c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6939      	ldr	r1, [r7, #16]
 80108d0:	68f8      	ldr	r0, [r7, #12]
 80108d2:	f001 ffbd 	bl	8012850 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80108d6:	6938      	ldr	r0, [r7, #16]
 80108d8:	f7f9 faac 	bl	8009e34 <pbuf_free>
  }
  return ERR_OK;
 80108dc:	2300      	movs	r3, #0
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3718      	adds	r7, #24
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	080161d4 	.word	0x080161d4
 80108ec:	080162cc 	.word	0x080162cc
 80108f0:	0801624c 	.word	0x0801624c
 80108f4:	2400bd6c 	.word	0x2400bd6c

080108f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010900:	2300      	movs	r3, #0
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	e01e      	b.n	8010944 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010906:	4913      	ldr	r1, [pc, #76]	; (8010954 <etharp_cleanup_netif+0x5c>)
 8010908:	68fa      	ldr	r2, [r7, #12]
 801090a:	4613      	mov	r3, r2
 801090c:	005b      	lsls	r3, r3, #1
 801090e:	4413      	add	r3, r2
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	440b      	add	r3, r1
 8010914:	3314      	adds	r3, #20
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801091a:	7afb      	ldrb	r3, [r7, #11]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d00e      	beq.n	801093e <etharp_cleanup_netif+0x46>
 8010920:	490c      	ldr	r1, [pc, #48]	; (8010954 <etharp_cleanup_netif+0x5c>)
 8010922:	68fa      	ldr	r2, [r7, #12]
 8010924:	4613      	mov	r3, r2
 8010926:	005b      	lsls	r3, r3, #1
 8010928:	4413      	add	r3, r2
 801092a:	00db      	lsls	r3, r3, #3
 801092c:	440b      	add	r3, r1
 801092e:	3308      	adds	r3, #8
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	687a      	ldr	r2, [r7, #4]
 8010934:	429a      	cmp	r2, r3
 8010936:	d102      	bne.n	801093e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f7ff fce5 	bl	8010308 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	3301      	adds	r3, #1
 8010942:	60fb      	str	r3, [r7, #12]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	2b09      	cmp	r3, #9
 8010948:	dddd      	ble.n	8010906 <etharp_cleanup_netif+0xe>
    }
  }
}
 801094a:	bf00      	nop
 801094c:	bf00      	nop
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	2400bd6c 	.word	0x2400bd6c

08010958 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010958:	b5b0      	push	{r4, r5, r7, lr}
 801095a:	b08a      	sub	sp, #40	; 0x28
 801095c:	af04      	add	r7, sp, #16
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d107      	bne.n	8010978 <etharp_input+0x20>
 8010968:	4b3d      	ldr	r3, [pc, #244]	; (8010a60 <etharp_input+0x108>)
 801096a:	f240 228a 	movw	r2, #650	; 0x28a
 801096e:	493d      	ldr	r1, [pc, #244]	; (8010a64 <etharp_input+0x10c>)
 8010970:	483d      	ldr	r0, [pc, #244]	; (8010a68 <etharp_input+0x110>)
 8010972:	f002 faa3 	bl	8012ebc <iprintf>
 8010976:	e06f      	b.n	8010a58 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	881b      	ldrh	r3, [r3, #0]
 8010982:	b29b      	uxth	r3, r3
 8010984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010988:	d10c      	bne.n	80109a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801098e:	2b06      	cmp	r3, #6
 8010990:	d108      	bne.n	80109a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010996:	2b04      	cmp	r3, #4
 8010998:	d104      	bne.n	80109a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	885b      	ldrh	r3, [r3, #2]
 801099e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80109a0:	2b08      	cmp	r3, #8
 80109a2:	d003      	beq.n	80109ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7f9 fa45 	bl	8009e34 <pbuf_free>
    return;
 80109aa:	e055      	b.n	8010a58 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	330e      	adds	r3, #14
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	3318      	adds	r3, #24
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	3304      	adds	r3, #4
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d102      	bne.n	80109cc <etharp_input+0x74>
    for_us = 0;
 80109c6:	2300      	movs	r3, #0
 80109c8:	75fb      	strb	r3, [r7, #23]
 80109ca:	e009      	b.n	80109e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	3304      	adds	r3, #4
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	429a      	cmp	r2, r3
 80109d6:	bf0c      	ite	eq
 80109d8:	2301      	moveq	r3, #1
 80109da:	2300      	movne	r3, #0
 80109dc:	b2db      	uxtb	r3, r3
 80109de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	f103 0208 	add.w	r2, r3, #8
 80109e6:	7dfb      	ldrb	r3, [r7, #23]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <etharp_input+0x98>
 80109ec:	2301      	movs	r3, #1
 80109ee:	e000      	b.n	80109f2 <etharp_input+0x9a>
 80109f0:	2302      	movs	r3, #2
 80109f2:	f107 010c 	add.w	r1, r7, #12
 80109f6:	6838      	ldr	r0, [r7, #0]
 80109f8:	f7ff fed8 	bl	80107ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	88db      	ldrh	r3, [r3, #6]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a06:	d003      	beq.n	8010a10 <etharp_input+0xb8>
 8010a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a0c:	d01e      	beq.n	8010a4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010a0e:	e020      	b.n	8010a52 <etharp_input+0xfa>
      if (for_us) {
 8010a10:	7dfb      	ldrb	r3, [r7, #23]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d01c      	beq.n	8010a50 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010a2c:	693a      	ldr	r2, [r7, #16]
 8010a2e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010a30:	2102      	movs	r1, #2
 8010a32:	9103      	str	r1, [sp, #12]
 8010a34:	f107 010c 	add.w	r1, r7, #12
 8010a38:	9102      	str	r1, [sp, #8]
 8010a3a:	9201      	str	r2, [sp, #4]
 8010a3c:	9300      	str	r3, [sp, #0]
 8010a3e:	462b      	mov	r3, r5
 8010a40:	4622      	mov	r2, r4
 8010a42:	4601      	mov	r1, r0
 8010a44:	6838      	ldr	r0, [r7, #0]
 8010a46:	f000 faeb 	bl	8011020 <etharp_raw>
      break;
 8010a4a:	e001      	b.n	8010a50 <etharp_input+0xf8>
      break;
 8010a4c:	bf00      	nop
 8010a4e:	e000      	b.n	8010a52 <etharp_input+0xfa>
      break;
 8010a50:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7f9 f9ee 	bl	8009e34 <pbuf_free>
}
 8010a58:	3718      	adds	r7, #24
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	080161d4 	.word	0x080161d4
 8010a64:	08016324 	.word	0x08016324
 8010a68:	0801624c 	.word	0x0801624c

08010a6c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b086      	sub	sp, #24
 8010a70:	af02      	add	r7, sp, #8
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	4613      	mov	r3, r2
 8010a78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010a7a:	79fa      	ldrb	r2, [r7, #7]
 8010a7c:	4944      	ldr	r1, [pc, #272]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010a7e:	4613      	mov	r3, r2
 8010a80:	005b      	lsls	r3, r3, #1
 8010a82:	4413      	add	r3, r2
 8010a84:	00db      	lsls	r3, r3, #3
 8010a86:	440b      	add	r3, r1
 8010a88:	3314      	adds	r3, #20
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d806      	bhi.n	8010a9e <etharp_output_to_arp_index+0x32>
 8010a90:	4b40      	ldr	r3, [pc, #256]	; (8010b94 <etharp_output_to_arp_index+0x128>)
 8010a92:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010a96:	4940      	ldr	r1, [pc, #256]	; (8010b98 <etharp_output_to_arp_index+0x12c>)
 8010a98:	4840      	ldr	r0, [pc, #256]	; (8010b9c <etharp_output_to_arp_index+0x130>)
 8010a9a:	f002 fa0f 	bl	8012ebc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010a9e:	79fa      	ldrb	r2, [r7, #7]
 8010aa0:	493b      	ldr	r1, [pc, #236]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	005b      	lsls	r3, r3, #1
 8010aa6:	4413      	add	r3, r2
 8010aa8:	00db      	lsls	r3, r3, #3
 8010aaa:	440b      	add	r3, r1
 8010aac:	3314      	adds	r3, #20
 8010aae:	781b      	ldrb	r3, [r3, #0]
 8010ab0:	2b02      	cmp	r3, #2
 8010ab2:	d153      	bne.n	8010b5c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010ab4:	79fa      	ldrb	r2, [r7, #7]
 8010ab6:	4936      	ldr	r1, [pc, #216]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010ab8:	4613      	mov	r3, r2
 8010aba:	005b      	lsls	r3, r3, #1
 8010abc:	4413      	add	r3, r2
 8010abe:	00db      	lsls	r3, r3, #3
 8010ac0:	440b      	add	r3, r1
 8010ac2:	3312      	adds	r3, #18
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010aca:	d919      	bls.n	8010b00 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010acc:	79fa      	ldrb	r2, [r7, #7]
 8010ace:	4613      	mov	r3, r2
 8010ad0:	005b      	lsls	r3, r3, #1
 8010ad2:	4413      	add	r3, r2
 8010ad4:	00db      	lsls	r3, r3, #3
 8010ad6:	4a2e      	ldr	r2, [pc, #184]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010ad8:	4413      	add	r3, r2
 8010ada:	3304      	adds	r3, #4
 8010adc:	4619      	mov	r1, r3
 8010ade:	68f8      	ldr	r0, [r7, #12]
 8010ae0:	f000 fb4c 	bl	801117c <etharp_request>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d138      	bne.n	8010b5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010aea:	79fa      	ldrb	r2, [r7, #7]
 8010aec:	4928      	ldr	r1, [pc, #160]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010aee:	4613      	mov	r3, r2
 8010af0:	005b      	lsls	r3, r3, #1
 8010af2:	4413      	add	r3, r2
 8010af4:	00db      	lsls	r3, r3, #3
 8010af6:	440b      	add	r3, r1
 8010af8:	3314      	adds	r3, #20
 8010afa:	2203      	movs	r2, #3
 8010afc:	701a      	strb	r2, [r3, #0]
 8010afe:	e02d      	b.n	8010b5c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010b00:	79fa      	ldrb	r2, [r7, #7]
 8010b02:	4923      	ldr	r1, [pc, #140]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010b04:	4613      	mov	r3, r2
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	4413      	add	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	440b      	add	r3, r1
 8010b0e:	3312      	adds	r3, #18
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010b16:	d321      	bcc.n	8010b5c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010b18:	79fa      	ldrb	r2, [r7, #7]
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	005b      	lsls	r3, r3, #1
 8010b1e:	4413      	add	r3, r2
 8010b20:	00db      	lsls	r3, r3, #3
 8010b22:	4a1b      	ldr	r2, [pc, #108]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010b24:	4413      	add	r3, r2
 8010b26:	1d19      	adds	r1, r3, #4
 8010b28:	79fa      	ldrb	r2, [r7, #7]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	4413      	add	r3, r2
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	3308      	adds	r3, #8
 8010b34:	4a16      	ldr	r2, [pc, #88]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010b36:	4413      	add	r3, r2
 8010b38:	3304      	adds	r3, #4
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 fafb 	bl	8011138 <etharp_request_dst>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d109      	bne.n	8010b5c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010b48:	79fa      	ldrb	r2, [r7, #7]
 8010b4a:	4911      	ldr	r1, [pc, #68]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	4413      	add	r3, r2
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	440b      	add	r3, r1
 8010b56:	3314      	adds	r3, #20
 8010b58:	2203      	movs	r2, #3
 8010b5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010b62:	79fa      	ldrb	r2, [r7, #7]
 8010b64:	4613      	mov	r3, r2
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	00db      	lsls	r3, r3, #3
 8010b6c:	3308      	adds	r3, #8
 8010b6e:	4a08      	ldr	r2, [pc, #32]	; (8010b90 <etharp_output_to_arp_index+0x124>)
 8010b70:	4413      	add	r3, r2
 8010b72:	3304      	adds	r3, #4
 8010b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b78:	9200      	str	r2, [sp, #0]
 8010b7a:	460a      	mov	r2, r1
 8010b7c:	68b9      	ldr	r1, [r7, #8]
 8010b7e:	68f8      	ldr	r0, [r7, #12]
 8010b80:	f001 fe66 	bl	8012850 <ethernet_output>
 8010b84:	4603      	mov	r3, r0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3710      	adds	r7, #16
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	2400bd6c 	.word	0x2400bd6c
 8010b94:	080161d4 	.word	0x080161d4
 8010b98:	08016344 	.word	0x08016344
 8010b9c:	0801624c 	.word	0x0801624c

08010ba0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b08a      	sub	sp, #40	; 0x28
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	60b9      	str	r1, [r7, #8]
 8010baa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d106      	bne.n	8010bc4 <etharp_output+0x24>
 8010bb6:	4b73      	ldr	r3, [pc, #460]	; (8010d84 <etharp_output+0x1e4>)
 8010bb8:	f240 321e 	movw	r2, #798	; 0x31e
 8010bbc:	4972      	ldr	r1, [pc, #456]	; (8010d88 <etharp_output+0x1e8>)
 8010bbe:	4873      	ldr	r0, [pc, #460]	; (8010d8c <etharp_output+0x1ec>)
 8010bc0:	f002 f97c 	bl	8012ebc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d106      	bne.n	8010bd8 <etharp_output+0x38>
 8010bca:	4b6e      	ldr	r3, [pc, #440]	; (8010d84 <etharp_output+0x1e4>)
 8010bcc:	f240 321f 	movw	r2, #799	; 0x31f
 8010bd0:	496f      	ldr	r1, [pc, #444]	; (8010d90 <etharp_output+0x1f0>)
 8010bd2:	486e      	ldr	r0, [pc, #440]	; (8010d8c <etharp_output+0x1ec>)
 8010bd4:	f002 f972 	bl	8012ebc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d106      	bne.n	8010bec <etharp_output+0x4c>
 8010bde:	4b69      	ldr	r3, [pc, #420]	; (8010d84 <etharp_output+0x1e4>)
 8010be0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010be4:	496b      	ldr	r1, [pc, #428]	; (8010d94 <etharp_output+0x1f4>)
 8010be6:	4869      	ldr	r0, [pc, #420]	; (8010d8c <etharp_output+0x1ec>)
 8010be8:	f002 f968 	bl	8012ebc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	68f9      	ldr	r1, [r7, #12]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 ff1e 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d002      	beq.n	8010c04 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010bfe:	4b66      	ldr	r3, [pc, #408]	; (8010d98 <etharp_output+0x1f8>)
 8010c00:	61fb      	str	r3, [r7, #28]
 8010c02:	e0af      	b.n	8010d64 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010c0c:	2be0      	cmp	r3, #224	; 0xe0
 8010c0e:	d118      	bne.n	8010c42 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010c10:	2301      	movs	r3, #1
 8010c12:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010c14:	2300      	movs	r3, #0
 8010c16:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010c18:	235e      	movs	r3, #94	; 0x5e
 8010c1a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	3302      	adds	r3, #2
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	3303      	adds	r3, #3
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010c3a:	f107 0310 	add.w	r3, r7, #16
 8010c3e:	61fb      	str	r3, [r7, #28]
 8010c40:	e090      	b.n	8010d64 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681a      	ldr	r2, [r3, #0]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	3304      	adds	r3, #4
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	405a      	eors	r2, r3
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3308      	adds	r3, #8
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4013      	ands	r3, r2
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d012      	beq.n	8010c80 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010c60:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010c64:	4293      	cmp	r3, r2
 8010c66:	d00b      	beq.n	8010c80 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	330c      	adds	r3, #12
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	330c      	adds	r3, #12
 8010c76:	61bb      	str	r3, [r7, #24]
 8010c78:	e002      	b.n	8010c80 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010c7a:	f06f 0303 	mvn.w	r3, #3
 8010c7e:	e07d      	b.n	8010d7c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c80:	4b46      	ldr	r3, [pc, #280]	; (8010d9c <etharp_output+0x1fc>)
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	4619      	mov	r1, r3
 8010c86:	4a46      	ldr	r2, [pc, #280]	; (8010da0 <etharp_output+0x200>)
 8010c88:	460b      	mov	r3, r1
 8010c8a:	005b      	lsls	r3, r3, #1
 8010c8c:	440b      	add	r3, r1
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	4413      	add	r3, r2
 8010c92:	3314      	adds	r3, #20
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d925      	bls.n	8010ce6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010c9a:	4b40      	ldr	r3, [pc, #256]	; (8010d9c <etharp_output+0x1fc>)
 8010c9c:	781b      	ldrb	r3, [r3, #0]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	4a3f      	ldr	r2, [pc, #252]	; (8010da0 <etharp_output+0x200>)
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	005b      	lsls	r3, r3, #1
 8010ca6:	440b      	add	r3, r1
 8010ca8:	00db      	lsls	r3, r3, #3
 8010caa:	4413      	add	r3, r2
 8010cac:	3308      	adds	r3, #8
 8010cae:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d117      	bne.n	8010ce6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010cb6:	69bb      	ldr	r3, [r7, #24]
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	4b38      	ldr	r3, [pc, #224]	; (8010d9c <etharp_output+0x1fc>)
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	4937      	ldr	r1, [pc, #220]	; (8010da0 <etharp_output+0x200>)
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	4403      	add	r3, r0
 8010cc8:	00db      	lsls	r3, r3, #3
 8010cca:	440b      	add	r3, r1
 8010ccc:	3304      	adds	r3, #4
 8010cce:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d108      	bne.n	8010ce6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010cd4:	4b31      	ldr	r3, [pc, #196]	; (8010d9c <etharp_output+0x1fc>)
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	461a      	mov	r2, r3
 8010cda:	68b9      	ldr	r1, [r7, #8]
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f7ff fec5 	bl	8010a6c <etharp_output_to_arp_index>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	e04a      	b.n	8010d7c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	75fb      	strb	r3, [r7, #23]
 8010cea:	e031      	b.n	8010d50 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010cec:	7dfa      	ldrb	r2, [r7, #23]
 8010cee:	492c      	ldr	r1, [pc, #176]	; (8010da0 <etharp_output+0x200>)
 8010cf0:	4613      	mov	r3, r2
 8010cf2:	005b      	lsls	r3, r3, #1
 8010cf4:	4413      	add	r3, r2
 8010cf6:	00db      	lsls	r3, r3, #3
 8010cf8:	440b      	add	r3, r1
 8010cfa:	3314      	adds	r3, #20
 8010cfc:	781b      	ldrb	r3, [r3, #0]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d923      	bls.n	8010d4a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010d02:	7dfa      	ldrb	r2, [r7, #23]
 8010d04:	4926      	ldr	r1, [pc, #152]	; (8010da0 <etharp_output+0x200>)
 8010d06:	4613      	mov	r3, r2
 8010d08:	005b      	lsls	r3, r3, #1
 8010d0a:	4413      	add	r3, r2
 8010d0c:	00db      	lsls	r3, r3, #3
 8010d0e:	440b      	add	r3, r1
 8010d10:	3308      	adds	r3, #8
 8010d12:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d117      	bne.n	8010d4a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010d1a:	69bb      	ldr	r3, [r7, #24]
 8010d1c:	6819      	ldr	r1, [r3, #0]
 8010d1e:	7dfa      	ldrb	r2, [r7, #23]
 8010d20:	481f      	ldr	r0, [pc, #124]	; (8010da0 <etharp_output+0x200>)
 8010d22:	4613      	mov	r3, r2
 8010d24:	005b      	lsls	r3, r3, #1
 8010d26:	4413      	add	r3, r2
 8010d28:	00db      	lsls	r3, r3, #3
 8010d2a:	4403      	add	r3, r0
 8010d2c:	3304      	adds	r3, #4
 8010d2e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010d30:	4299      	cmp	r1, r3
 8010d32:	d10a      	bne.n	8010d4a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010d34:	4a19      	ldr	r2, [pc, #100]	; (8010d9c <etharp_output+0x1fc>)
 8010d36:	7dfb      	ldrb	r3, [r7, #23]
 8010d38:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010d3a:	7dfb      	ldrb	r3, [r7, #23]
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	68b9      	ldr	r1, [r7, #8]
 8010d40:	68f8      	ldr	r0, [r7, #12]
 8010d42:	f7ff fe93 	bl	8010a6c <etharp_output_to_arp_index>
 8010d46:	4603      	mov	r3, r0
 8010d48:	e018      	b.n	8010d7c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010d4a:	7dfb      	ldrb	r3, [r7, #23]
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	75fb      	strb	r3, [r7, #23]
 8010d50:	7dfb      	ldrb	r3, [r7, #23]
 8010d52:	2b09      	cmp	r3, #9
 8010d54:	d9ca      	bls.n	8010cec <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010d56:	68ba      	ldr	r2, [r7, #8]
 8010d58:	69b9      	ldr	r1, [r7, #24]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f000 f822 	bl	8010da4 <etharp_query>
 8010d60:	4603      	mov	r3, r0
 8010d62:	e00b      	b.n	8010d7c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d6e:	9300      	str	r3, [sp, #0]
 8010d70:	69fb      	ldr	r3, [r7, #28]
 8010d72:	68b9      	ldr	r1, [r7, #8]
 8010d74:	68f8      	ldr	r0, [r7, #12]
 8010d76:	f001 fd6b 	bl	8012850 <ethernet_output>
 8010d7a:	4603      	mov	r3, r0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3720      	adds	r7, #32
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	080161d4 	.word	0x080161d4
 8010d88:	08016324 	.word	0x08016324
 8010d8c:	0801624c 	.word	0x0801624c
 8010d90:	08016374 	.word	0x08016374
 8010d94:	08016314 	.word	0x08016314
 8010d98:	080169c8 	.word	0x080169c8
 8010d9c:	2400be5c 	.word	0x2400be5c
 8010da0:	2400bd6c 	.word	0x2400bd6c

08010da4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b08c      	sub	sp, #48	; 0x30
 8010da8:	af02      	add	r7, sp, #8
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	3326      	adds	r3, #38	; 0x26
 8010db4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010db6:	23ff      	movs	r3, #255	; 0xff
 8010db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68f9      	ldr	r1, [r7, #12]
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f000 fe34 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d10c      	bne.n	8010dec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010dda:	2be0      	cmp	r3, #224	; 0xe0
 8010ddc:	d006      	beq.n	8010dec <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d003      	beq.n	8010dec <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d102      	bne.n	8010df2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010dec:	f06f 030f 	mvn.w	r3, #15
 8010df0:	e101      	b.n	8010ff6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010df2:	68fa      	ldr	r2, [r7, #12]
 8010df4:	2101      	movs	r1, #1
 8010df6:	68b8      	ldr	r0, [r7, #8]
 8010df8:	f7ff fb60 	bl	80104bc <etharp_find_entry>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010e00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	da02      	bge.n	8010e0e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010e08:	8a7b      	ldrh	r3, [r7, #18]
 8010e0a:	b25b      	sxtb	r3, r3
 8010e0c:	e0f3      	b.n	8010ff6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010e0e:	8a7b      	ldrh	r3, [r7, #18]
 8010e10:	2b7e      	cmp	r3, #126	; 0x7e
 8010e12:	d906      	bls.n	8010e22 <etharp_query+0x7e>
 8010e14:	4b7a      	ldr	r3, [pc, #488]	; (8011000 <etharp_query+0x25c>)
 8010e16:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010e1a:	497a      	ldr	r1, [pc, #488]	; (8011004 <etharp_query+0x260>)
 8010e1c:	487a      	ldr	r0, [pc, #488]	; (8011008 <etharp_query+0x264>)
 8010e1e:	f002 f84d 	bl	8012ebc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010e22:	8a7b      	ldrh	r3, [r7, #18]
 8010e24:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010e26:	7c7a      	ldrb	r2, [r7, #17]
 8010e28:	4978      	ldr	r1, [pc, #480]	; (801100c <etharp_query+0x268>)
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	005b      	lsls	r3, r3, #1
 8010e2e:	4413      	add	r3, r2
 8010e30:	00db      	lsls	r3, r3, #3
 8010e32:	440b      	add	r3, r1
 8010e34:	3314      	adds	r3, #20
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d115      	bne.n	8010e68 <etharp_query+0xc4>
    is_new_entry = 1;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010e40:	7c7a      	ldrb	r2, [r7, #17]
 8010e42:	4972      	ldr	r1, [pc, #456]	; (801100c <etharp_query+0x268>)
 8010e44:	4613      	mov	r3, r2
 8010e46:	005b      	lsls	r3, r3, #1
 8010e48:	4413      	add	r3, r2
 8010e4a:	00db      	lsls	r3, r3, #3
 8010e4c:	440b      	add	r3, r1
 8010e4e:	3314      	adds	r3, #20
 8010e50:	2201      	movs	r2, #1
 8010e52:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010e54:	7c7a      	ldrb	r2, [r7, #17]
 8010e56:	496d      	ldr	r1, [pc, #436]	; (801100c <etharp_query+0x268>)
 8010e58:	4613      	mov	r3, r2
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	4413      	add	r3, r2
 8010e5e:	00db      	lsls	r3, r3, #3
 8010e60:	440b      	add	r3, r1
 8010e62:	3308      	adds	r3, #8
 8010e64:	68fa      	ldr	r2, [r7, #12]
 8010e66:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010e68:	7c7a      	ldrb	r2, [r7, #17]
 8010e6a:	4968      	ldr	r1, [pc, #416]	; (801100c <etharp_query+0x268>)
 8010e6c:	4613      	mov	r3, r2
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	4413      	add	r3, r2
 8010e72:	00db      	lsls	r3, r3, #3
 8010e74:	440b      	add	r3, r1
 8010e76:	3314      	adds	r3, #20
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d011      	beq.n	8010ea2 <etharp_query+0xfe>
 8010e7e:	7c7a      	ldrb	r2, [r7, #17]
 8010e80:	4962      	ldr	r1, [pc, #392]	; (801100c <etharp_query+0x268>)
 8010e82:	4613      	mov	r3, r2
 8010e84:	005b      	lsls	r3, r3, #1
 8010e86:	4413      	add	r3, r2
 8010e88:	00db      	lsls	r3, r3, #3
 8010e8a:	440b      	add	r3, r1
 8010e8c:	3314      	adds	r3, #20
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b01      	cmp	r3, #1
 8010e92:	d806      	bhi.n	8010ea2 <etharp_query+0xfe>
 8010e94:	4b5a      	ldr	r3, [pc, #360]	; (8011000 <etharp_query+0x25c>)
 8010e96:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010e9a:	495d      	ldr	r1, [pc, #372]	; (8011010 <etharp_query+0x26c>)
 8010e9c:	485a      	ldr	r0, [pc, #360]	; (8011008 <etharp_query+0x264>)
 8010e9e:	f002 f80d 	bl	8012ebc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010ea2:	6a3b      	ldr	r3, [r7, #32]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d102      	bne.n	8010eae <etharp_query+0x10a>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10c      	bne.n	8010ec8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010eae:	68b9      	ldr	r1, [r7, #8]
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f000 f963 	bl	801117c <etharp_request>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d102      	bne.n	8010ec8 <etharp_query+0x124>
      return result;
 8010ec2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ec6:	e096      	b.n	8010ff6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <etharp_query+0x138>
 8010ece:	4b4c      	ldr	r3, [pc, #304]	; (8011000 <etharp_query+0x25c>)
 8010ed0:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010ed4:	494f      	ldr	r1, [pc, #316]	; (8011014 <etharp_query+0x270>)
 8010ed6:	484c      	ldr	r0, [pc, #304]	; (8011008 <etharp_query+0x264>)
 8010ed8:	f001 fff0 	bl	8012ebc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010edc:	7c7a      	ldrb	r2, [r7, #17]
 8010ede:	494b      	ldr	r1, [pc, #300]	; (801100c <etharp_query+0x268>)
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	4413      	add	r3, r2
 8010ee6:	00db      	lsls	r3, r3, #3
 8010ee8:	440b      	add	r3, r1
 8010eea:	3314      	adds	r3, #20
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d917      	bls.n	8010f22 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010ef2:	4a49      	ldr	r2, [pc, #292]	; (8011018 <etharp_query+0x274>)
 8010ef4:	7c7b      	ldrb	r3, [r7, #17]
 8010ef6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010ef8:	7c7a      	ldrb	r2, [r7, #17]
 8010efa:	4613      	mov	r3, r2
 8010efc:	005b      	lsls	r3, r3, #1
 8010efe:	4413      	add	r3, r2
 8010f00:	00db      	lsls	r3, r3, #3
 8010f02:	3308      	adds	r3, #8
 8010f04:	4a41      	ldr	r2, [pc, #260]	; (801100c <etharp_query+0x268>)
 8010f06:	4413      	add	r3, r2
 8010f08:	3304      	adds	r3, #4
 8010f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010f0e:	9200      	str	r2, [sp, #0]
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	6879      	ldr	r1, [r7, #4]
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	f001 fc9b 	bl	8012850 <ethernet_output>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f20:	e067      	b.n	8010ff2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010f22:	7c7a      	ldrb	r2, [r7, #17]
 8010f24:	4939      	ldr	r1, [pc, #228]	; (801100c <etharp_query+0x268>)
 8010f26:	4613      	mov	r3, r2
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	4413      	add	r3, r2
 8010f2c:	00db      	lsls	r3, r3, #3
 8010f2e:	440b      	add	r3, r1
 8010f30:	3314      	adds	r3, #20
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d15c      	bne.n	8010ff2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010f40:	e01c      	b.n	8010f7c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	895a      	ldrh	r2, [r3, #10]
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	891b      	ldrh	r3, [r3, #8]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d10a      	bne.n	8010f64 <etharp_query+0x1c0>
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d006      	beq.n	8010f64 <etharp_query+0x1c0>
 8010f56:	4b2a      	ldr	r3, [pc, #168]	; (8011000 <etharp_query+0x25c>)
 8010f58:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010f5c:	492f      	ldr	r1, [pc, #188]	; (801101c <etharp_query+0x278>)
 8010f5e:	482a      	ldr	r0, [pc, #168]	; (8011008 <etharp_query+0x264>)
 8010f60:	f001 ffac 	bl	8012ebc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	7b1b      	ldrb	r3, [r3, #12]
 8010f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d002      	beq.n	8010f76 <etharp_query+0x1d2>
        copy_needed = 1;
 8010f70:	2301      	movs	r3, #1
 8010f72:	61bb      	str	r3, [r7, #24]
        break;
 8010f74:	e005      	b.n	8010f82 <etharp_query+0x1de>
      }
      p = p->next;
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d1df      	bne.n	8010f42 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010f82:	69bb      	ldr	r3, [r7, #24]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d007      	beq.n	8010f98 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010f8e:	200e      	movs	r0, #14
 8010f90:	f7f9 f9c8 	bl	800a324 <pbuf_clone>
 8010f94:	61f8      	str	r0, [r7, #28]
 8010f96:	e004      	b.n	8010fa2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010f9c:	69f8      	ldr	r0, [r7, #28]
 8010f9e:	f7f8 ffef 	bl	8009f80 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d021      	beq.n	8010fec <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010fa8:	7c7a      	ldrb	r2, [r7, #17]
 8010faa:	4918      	ldr	r1, [pc, #96]	; (801100c <etharp_query+0x268>)
 8010fac:	4613      	mov	r3, r2
 8010fae:	005b      	lsls	r3, r3, #1
 8010fb0:	4413      	add	r3, r2
 8010fb2:	00db      	lsls	r3, r3, #3
 8010fb4:	440b      	add	r3, r1
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00a      	beq.n	8010fd2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010fbc:	7c7a      	ldrb	r2, [r7, #17]
 8010fbe:	4913      	ldr	r1, [pc, #76]	; (801100c <etharp_query+0x268>)
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	4413      	add	r3, r2
 8010fc6:	00db      	lsls	r3, r3, #3
 8010fc8:	440b      	add	r3, r1
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7f8 ff31 	bl	8009e34 <pbuf_free>
      }
      arp_table[i].q = p;
 8010fd2:	7c7a      	ldrb	r2, [r7, #17]
 8010fd4:	490d      	ldr	r1, [pc, #52]	; (801100c <etharp_query+0x268>)
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	440b      	add	r3, r1
 8010fe0:	69fa      	ldr	r2, [r7, #28]
 8010fe2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fea:	e002      	b.n	8010ff2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010fec:	23ff      	movs	r3, #255	; 0xff
 8010fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3728      	adds	r7, #40	; 0x28
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	080161d4 	.word	0x080161d4
 8011004:	08016380 	.word	0x08016380
 8011008:	0801624c 	.word	0x0801624c
 801100c:	2400bd6c 	.word	0x2400bd6c
 8011010:	08016390 	.word	0x08016390
 8011014:	08016374 	.word	0x08016374
 8011018:	2400be5c 	.word	0x2400be5c
 801101c:	080163b8 	.word	0x080163b8

08011020 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b08a      	sub	sp, #40	; 0x28
 8011024:	af02      	add	r7, sp, #8
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
 801102c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801102e:	2300      	movs	r3, #0
 8011030:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d106      	bne.n	8011046 <etharp_raw+0x26>
 8011038:	4b3a      	ldr	r3, [pc, #232]	; (8011124 <etharp_raw+0x104>)
 801103a:	f240 4257 	movw	r2, #1111	; 0x457
 801103e:	493a      	ldr	r1, [pc, #232]	; (8011128 <etharp_raw+0x108>)
 8011040:	483a      	ldr	r0, [pc, #232]	; (801112c <etharp_raw+0x10c>)
 8011042:	f001 ff3b 	bl	8012ebc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011046:	f44f 7220 	mov.w	r2, #640	; 0x280
 801104a:	211c      	movs	r1, #28
 801104c:	200e      	movs	r0, #14
 801104e:	f7f8 fc0d 	bl	800986c <pbuf_alloc>
 8011052:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d102      	bne.n	8011060 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801105a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801105e:	e05d      	b.n	801111c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	895b      	ldrh	r3, [r3, #10]
 8011064:	2b1b      	cmp	r3, #27
 8011066:	d806      	bhi.n	8011076 <etharp_raw+0x56>
 8011068:	4b2e      	ldr	r3, [pc, #184]	; (8011124 <etharp_raw+0x104>)
 801106a:	f240 4262 	movw	r2, #1122	; 0x462
 801106e:	4930      	ldr	r1, [pc, #192]	; (8011130 <etharp_raw+0x110>)
 8011070:	482e      	ldr	r0, [pc, #184]	; (801112c <etharp_raw+0x10c>)
 8011072:	f001 ff23 	bl	8012ebc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801107c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801107e:	4618      	mov	r0, r3
 8011080:	f7f7 fa1e 	bl	80084c0 <lwip_htons>
 8011084:	4603      	mov	r3, r0
 8011086:	461a      	mov	r2, r3
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011092:	2b06      	cmp	r3, #6
 8011094:	d006      	beq.n	80110a4 <etharp_raw+0x84>
 8011096:	4b23      	ldr	r3, [pc, #140]	; (8011124 <etharp_raw+0x104>)
 8011098:	f240 4269 	movw	r2, #1129	; 0x469
 801109c:	4925      	ldr	r1, [pc, #148]	; (8011134 <etharp_raw+0x114>)
 801109e:	4823      	ldr	r0, [pc, #140]	; (801112c <etharp_raw+0x10c>)
 80110a0:	f001 ff0c 	bl	8012ebc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	3308      	adds	r3, #8
 80110a8:	2206      	movs	r2, #6
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f001 fe5a 	bl	8012d66 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	3312      	adds	r3, #18
 80110b6:	2206      	movs	r2, #6
 80110b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110ba:	4618      	mov	r0, r3
 80110bc:	f001 fe53 	bl	8012d66 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	330e      	adds	r3, #14
 80110c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110c6:	6812      	ldr	r2, [r2, #0]
 80110c8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	3318      	adds	r3, #24
 80110ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110d0:	6812      	ldr	r2, [r2, #0]
 80110d2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	2200      	movs	r2, #0
 80110d8:	701a      	strb	r2, [r3, #0]
 80110da:	2200      	movs	r2, #0
 80110dc:	f042 0201 	orr.w	r2, r2, #1
 80110e0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f042 0208 	orr.w	r2, r2, #8
 80110ea:	709a      	strb	r2, [r3, #2]
 80110ec:	2200      	movs	r2, #0
 80110ee:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	2206      	movs	r2, #6
 80110f4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	2204      	movs	r2, #4
 80110fa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80110fc:	f640 0306 	movw	r3, #2054	; 0x806
 8011100:	9300      	str	r3, [sp, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	69b9      	ldr	r1, [r7, #24]
 8011108:	68f8      	ldr	r0, [r7, #12]
 801110a:	f001 fba1 	bl	8012850 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801110e:	69b8      	ldr	r0, [r7, #24]
 8011110:	f7f8 fe90 	bl	8009e34 <pbuf_free>
  p = NULL;
 8011114:	2300      	movs	r3, #0
 8011116:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011118:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3720      	adds	r7, #32
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	080161d4 	.word	0x080161d4
 8011128:	08016324 	.word	0x08016324
 801112c:	0801624c 	.word	0x0801624c
 8011130:	080163d4 	.word	0x080163d4
 8011134:	08016408 	.word	0x08016408

08011138 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b088      	sub	sp, #32
 801113c:	af04      	add	r7, sp, #16
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011154:	2201      	movs	r2, #1
 8011156:	9203      	str	r2, [sp, #12]
 8011158:	68ba      	ldr	r2, [r7, #8]
 801115a:	9202      	str	r2, [sp, #8]
 801115c:	4a06      	ldr	r2, [pc, #24]	; (8011178 <etharp_request_dst+0x40>)
 801115e:	9201      	str	r2, [sp, #4]
 8011160:	9300      	str	r3, [sp, #0]
 8011162:	4603      	mov	r3, r0
 8011164:	687a      	ldr	r2, [r7, #4]
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f7ff ff5a 	bl	8011020 <etharp_raw>
 801116c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801116e:	4618      	mov	r0, r3
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	080169d0 	.word	0x080169d0

0801117c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011186:	4a05      	ldr	r2, [pc, #20]	; (801119c <etharp_request+0x20>)
 8011188:	6839      	ldr	r1, [r7, #0]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff ffd4 	bl	8011138 <etharp_request_dst>
 8011190:	4603      	mov	r3, r0
}
 8011192:	4618      	mov	r0, r3
 8011194:	3708      	adds	r7, #8
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	080169c8 	.word	0x080169c8

080111a0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b08e      	sub	sp, #56	; 0x38
 80111a4:	af04      	add	r7, sp, #16
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80111aa:	4b87      	ldr	r3, [pc, #540]	; (80113c8 <icmp_input+0x228>)
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80111b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f003 030f 	and.w	r3, r3, #15
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	009b      	lsls	r3, r3, #2
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80111c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111c2:	2b13      	cmp	r3, #19
 80111c4:	f240 80e8 	bls.w	8011398 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	895b      	ldrh	r3, [r3, #10]
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	f240 80e5 	bls.w	801139c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80111dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 80d2 	beq.w	801138a <icmp_input+0x1ea>
 80111e6:	2b08      	cmp	r3, #8
 80111e8:	f040 80d2 	bne.w	8011390 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80111ec:	4b77      	ldr	r3, [pc, #476]	; (80113cc <icmp_input+0x22c>)
 80111ee:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80111f0:	4b75      	ldr	r3, [pc, #468]	; (80113c8 <icmp_input+0x228>)
 80111f2:	695b      	ldr	r3, [r3, #20]
 80111f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80111f8:	2be0      	cmp	r3, #224	; 0xe0
 80111fa:	f000 80d6 	beq.w	80113aa <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80111fe:	4b72      	ldr	r3, [pc, #456]	; (80113c8 <icmp_input+0x228>)
 8011200:	695b      	ldr	r3, [r3, #20]
 8011202:	4a71      	ldr	r2, [pc, #452]	; (80113c8 <icmp_input+0x228>)
 8011204:	6812      	ldr	r2, [r2, #0]
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f000 fc13 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 801120e:	4603      	mov	r3, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	f040 80cc 	bne.w	80113ae <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	891b      	ldrh	r3, [r3, #8]
 801121a:	2b07      	cmp	r3, #7
 801121c:	f240 80c0 	bls.w	80113a0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7f7 f9ea 	bl	80085fa <inet_chksum_pbuf>
 8011226:	4603      	mov	r3, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	d003      	beq.n	8011234 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801122c:	6878      	ldr	r0, [r7, #4]
 801122e:	f7f8 fe01 	bl	8009e34 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8011232:	e0c5      	b.n	80113c0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011236:	330e      	adds	r3, #14
 8011238:	4619      	mov	r1, r3
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f7f8 fd64 	bl	8009d08 <pbuf_add_header>
 8011240:	4603      	mov	r3, r0
 8011242:	2b00      	cmp	r3, #0
 8011244:	d04b      	beq.n	80112de <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	891a      	ldrh	r2, [r3, #8]
 801124a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801124c:	4413      	add	r3, r2
 801124e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	891b      	ldrh	r3, [r3, #8]
 8011254:	8b7a      	ldrh	r2, [r7, #26]
 8011256:	429a      	cmp	r2, r3
 8011258:	f0c0 80ab 	bcc.w	80113b2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801125c:	8b7b      	ldrh	r3, [r7, #26]
 801125e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011262:	4619      	mov	r1, r3
 8011264:	200e      	movs	r0, #14
 8011266:	f7f8 fb01 	bl	800986c <pbuf_alloc>
 801126a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	2b00      	cmp	r3, #0
 8011270:	f000 80a1 	beq.w	80113b6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	895b      	ldrh	r3, [r3, #10]
 8011278:	461a      	mov	r2, r3
 801127a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801127c:	3308      	adds	r3, #8
 801127e:	429a      	cmp	r2, r3
 8011280:	d203      	bcs.n	801128a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011282:	6978      	ldr	r0, [r7, #20]
 8011284:	f7f8 fdd6 	bl	8009e34 <pbuf_free>
          goto icmperr;
 8011288:	e096      	b.n	80113b8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011292:	4618      	mov	r0, r3
 8011294:	f001 fd67 	bl	8012d66 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801129a:	4619      	mov	r1, r3
 801129c:	6978      	ldr	r0, [r7, #20]
 801129e:	f7f8 fd43 	bl	8009d28 <pbuf_remove_header>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d009      	beq.n	80112bc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80112a8:	4b49      	ldr	r3, [pc, #292]	; (80113d0 <icmp_input+0x230>)
 80112aa:	22b6      	movs	r2, #182	; 0xb6
 80112ac:	4949      	ldr	r1, [pc, #292]	; (80113d4 <icmp_input+0x234>)
 80112ae:	484a      	ldr	r0, [pc, #296]	; (80113d8 <icmp_input+0x238>)
 80112b0:	f001 fe04 	bl	8012ebc <iprintf>
          pbuf_free(r);
 80112b4:	6978      	ldr	r0, [r7, #20]
 80112b6:	f7f8 fdbd 	bl	8009e34 <pbuf_free>
          goto icmperr;
 80112ba:	e07d      	b.n	80113b8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80112bc:	6879      	ldr	r1, [r7, #4]
 80112be:	6978      	ldr	r0, [r7, #20]
 80112c0:	f7f8 feec 	bl	800a09c <pbuf_copy>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d003      	beq.n	80112d2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80112ca:	6978      	ldr	r0, [r7, #20]
 80112cc:	f7f8 fdb2 	bl	8009e34 <pbuf_free>
          goto icmperr;
 80112d0:	e072      	b.n	80113b8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7f8 fdae 	bl	8009e34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	607b      	str	r3, [r7, #4]
 80112dc:	e00f      	b.n	80112fe <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80112de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112e0:	330e      	adds	r3, #14
 80112e2:	4619      	mov	r1, r3
 80112e4:	6878      	ldr	r0, [r7, #4]
 80112e6:	f7f8 fd1f 	bl	8009d28 <pbuf_remove_header>
 80112ea:	4603      	mov	r3, r0
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d006      	beq.n	80112fe <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80112f0:	4b37      	ldr	r3, [pc, #220]	; (80113d0 <icmp_input+0x230>)
 80112f2:	22c7      	movs	r2, #199	; 0xc7
 80112f4:	4939      	ldr	r1, [pc, #228]	; (80113dc <icmp_input+0x23c>)
 80112f6:	4838      	ldr	r0, [pc, #224]	; (80113d8 <icmp_input+0x238>)
 80112f8:	f001 fde0 	bl	8012ebc <iprintf>
          goto icmperr;
 80112fc:	e05c      	b.n	80113b8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011306:	4619      	mov	r1, r3
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7f8 fcfd 	bl	8009d08 <pbuf_add_header>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d13c      	bne.n	801138e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011322:	4b29      	ldr	r3, [pc, #164]	; (80113c8 <icmp_input+0x228>)
 8011324:	691a      	ldr	r2, [r3, #16]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	2200      	movs	r2, #0
 801132e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	885b      	ldrh	r3, [r3, #2]
 8011334:	b29b      	uxth	r3, r3
 8011336:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801133a:	4293      	cmp	r3, r2
 801133c:	d907      	bls.n	801134e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	885b      	ldrh	r3, [r3, #2]
 8011342:	b29b      	uxth	r3, r3
 8011344:	3309      	adds	r3, #9
 8011346:	b29a      	uxth	r2, r3
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	805a      	strh	r2, [r3, #2]
 801134c:	e006      	b.n	801135c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	885b      	ldrh	r3, [r3, #2]
 8011352:	b29b      	uxth	r3, r3
 8011354:	3308      	adds	r3, #8
 8011356:	b29a      	uxth	r2, r3
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	22ff      	movs	r2, #255	; 0xff
 8011360:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2200      	movs	r2, #0
 8011366:	729a      	strb	r2, [r3, #10]
 8011368:	2200      	movs	r2, #0
 801136a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	9302      	str	r3, [sp, #8]
 8011370:	2301      	movs	r3, #1
 8011372:	9301      	str	r3, [sp, #4]
 8011374:	2300      	movs	r3, #0
 8011376:	9300      	str	r3, [sp, #0]
 8011378:	23ff      	movs	r3, #255	; 0xff
 801137a:	2200      	movs	r2, #0
 801137c:	69f9      	ldr	r1, [r7, #28]
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 fa80 	bl	8011884 <ip4_output_if>
 8011384:	4603      	mov	r3, r0
 8011386:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011388:	e001      	b.n	801138e <icmp_input+0x1ee>
      break;
 801138a:	bf00      	nop
 801138c:	e000      	b.n	8011390 <icmp_input+0x1f0>
      break;
 801138e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7f8 fd4f 	bl	8009e34 <pbuf_free>
  return;
 8011396:	e013      	b.n	80113c0 <icmp_input+0x220>
    goto lenerr;
 8011398:	bf00      	nop
 801139a:	e002      	b.n	80113a2 <icmp_input+0x202>
    goto lenerr;
 801139c:	bf00      	nop
 801139e:	e000      	b.n	80113a2 <icmp_input+0x202>
        goto lenerr;
 80113a0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7f8 fd46 	bl	8009e34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80113a8:	e00a      	b.n	80113c0 <icmp_input+0x220>
        goto icmperr;
 80113aa:	bf00      	nop
 80113ac:	e004      	b.n	80113b8 <icmp_input+0x218>
        goto icmperr;
 80113ae:	bf00      	nop
 80113b0:	e002      	b.n	80113b8 <icmp_input+0x218>
          goto icmperr;
 80113b2:	bf00      	nop
 80113b4:	e000      	b.n	80113b8 <icmp_input+0x218>
          goto icmperr;
 80113b6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7f8 fd3b 	bl	8009e34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80113be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80113c0:	3728      	adds	r7, #40	; 0x28
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	bf00      	nop
 80113c8:	24008c0c 	.word	0x24008c0c
 80113cc:	24008c20 	.word	0x24008c20
 80113d0:	0801644c 	.word	0x0801644c
 80113d4:	08016484 	.word	0x08016484
 80113d8:	080164bc 	.word	0x080164bc
 80113dc:	080164e4 	.word	0x080164e4

080113e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	460b      	mov	r3, r1
 80113ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80113ec:	78fb      	ldrb	r3, [r7, #3]
 80113ee:	461a      	mov	r2, r3
 80113f0:	2103      	movs	r1, #3
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 f814 	bl	8011420 <icmp_send_response>
}
 80113f8:	bf00      	nop
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	460b      	mov	r3, r1
 801140a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801140c:	78fb      	ldrb	r3, [r7, #3]
 801140e:	461a      	mov	r2, r3
 8011410:	210b      	movs	r1, #11
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f804 	bl	8011420 <icmp_send_response>
}
 8011418:	bf00      	nop
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b08c      	sub	sp, #48	; 0x30
 8011424:	af04      	add	r7, sp, #16
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	460b      	mov	r3, r1
 801142a:	70fb      	strb	r3, [r7, #3]
 801142c:	4613      	mov	r3, r2
 801142e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011430:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011434:	2124      	movs	r1, #36	; 0x24
 8011436:	2022      	movs	r0, #34	; 0x22
 8011438:	f7f8 fa18 	bl	800986c <pbuf_alloc>
 801143c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801143e:	69fb      	ldr	r3, [r7, #28]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d056      	beq.n	80114f2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	895b      	ldrh	r3, [r3, #10]
 8011448:	2b23      	cmp	r3, #35	; 0x23
 801144a:	d806      	bhi.n	801145a <icmp_send_response+0x3a>
 801144c:	4b2b      	ldr	r3, [pc, #172]	; (80114fc <icmp_send_response+0xdc>)
 801144e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8011452:	492b      	ldr	r1, [pc, #172]	; (8011500 <icmp_send_response+0xe0>)
 8011454:	482b      	ldr	r0, [pc, #172]	; (8011504 <icmp_send_response+0xe4>)
 8011456:	f001 fd31 	bl	8012ebc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	78fa      	ldrb	r2, [r7, #3]
 801146a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	78ba      	ldrb	r2, [r7, #2]
 8011470:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2200      	movs	r2, #0
 8011476:	711a      	strb	r2, [r3, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	2200      	movs	r2, #0
 8011480:	719a      	strb	r2, [r3, #6]
 8011482:	2200      	movs	r2, #0
 8011484:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	f103 0008 	add.w	r0, r3, #8
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	221c      	movs	r2, #28
 8011494:	4619      	mov	r1, r3
 8011496:	f001 fc66 	bl	8012d66 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80114a0:	f107 030c 	add.w	r3, r7, #12
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 f82f 	bl	8011508 <ip4_route>
 80114aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d01b      	beq.n	80114ea <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2200      	movs	r2, #0
 80114b6:	709a      	strb	r2, [r3, #2]
 80114b8:	2200      	movs	r2, #0
 80114ba:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80114bc:	69fb      	ldr	r3, [r7, #28]
 80114be:	895b      	ldrh	r3, [r3, #10]
 80114c0:	4619      	mov	r1, r3
 80114c2:	6978      	ldr	r0, [r7, #20]
 80114c4:	f7f7 f887 	bl	80085d6 <inet_chksum>
 80114c8:	4603      	mov	r3, r0
 80114ca:	461a      	mov	r2, r3
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80114d0:	f107 020c 	add.w	r2, r7, #12
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	9302      	str	r3, [sp, #8]
 80114d8:	2301      	movs	r3, #1
 80114da:	9301      	str	r3, [sp, #4]
 80114dc:	2300      	movs	r3, #0
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	23ff      	movs	r3, #255	; 0xff
 80114e2:	2100      	movs	r1, #0
 80114e4:	69f8      	ldr	r0, [r7, #28]
 80114e6:	f000 f9cd 	bl	8011884 <ip4_output_if>
  }
  pbuf_free(q);
 80114ea:	69f8      	ldr	r0, [r7, #28]
 80114ec:	f7f8 fca2 	bl	8009e34 <pbuf_free>
 80114f0:	e000      	b.n	80114f4 <icmp_send_response+0xd4>
    return;
 80114f2:	bf00      	nop
}
 80114f4:	3720      	adds	r7, #32
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	0801644c 	.word	0x0801644c
 8011500:	08016518 	.word	0x08016518
 8011504:	080164bc 	.word	0x080164bc

08011508 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011508:	b480      	push	{r7}
 801150a:	b085      	sub	sp, #20
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011510:	4b33      	ldr	r3, [pc, #204]	; (80115e0 <ip4_route+0xd8>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	60fb      	str	r3, [r7, #12]
 8011516:	e036      	b.n	8011586 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801151e:	f003 0301 	and.w	r3, r3, #1
 8011522:	b2db      	uxtb	r3, r3
 8011524:	2b00      	cmp	r3, #0
 8011526:	d02b      	beq.n	8011580 <ip4_route+0x78>
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801152e:	089b      	lsrs	r3, r3, #2
 8011530:	f003 0301 	and.w	r3, r3, #1
 8011534:	b2db      	uxtb	r3, r3
 8011536:	2b00      	cmp	r3, #0
 8011538:	d022      	beq.n	8011580 <ip4_route+0x78>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	3304      	adds	r3, #4
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d01d      	beq.n	8011580 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	3304      	adds	r3, #4
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	405a      	eors	r2, r3
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	3308      	adds	r3, #8
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	4013      	ands	r3, r2
 8011558:	2b00      	cmp	r3, #0
 801155a:	d101      	bne.n	8011560 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	e038      	b.n	80115d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011566:	f003 0302 	and.w	r3, r3, #2
 801156a:	2b00      	cmp	r3, #0
 801156c:	d108      	bne.n	8011580 <ip4_route+0x78>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	330c      	adds	r3, #12
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	429a      	cmp	r2, r3
 801157a:	d101      	bne.n	8011580 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	e028      	b.n	80115d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	60fb      	str	r3, [r7, #12]
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d1c5      	bne.n	8011518 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801158c:	4b15      	ldr	r3, [pc, #84]	; (80115e4 <ip4_route+0xdc>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d01a      	beq.n	80115ca <ip4_route+0xc2>
 8011594:	4b13      	ldr	r3, [pc, #76]	; (80115e4 <ip4_route+0xdc>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d012      	beq.n	80115ca <ip4_route+0xc2>
 80115a4:	4b0f      	ldr	r3, [pc, #60]	; (80115e4 <ip4_route+0xdc>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115ac:	f003 0304 	and.w	r3, r3, #4
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d00a      	beq.n	80115ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80115b4:	4b0b      	ldr	r3, [pc, #44]	; (80115e4 <ip4_route+0xdc>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	3304      	adds	r3, #4
 80115ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d004      	beq.n	80115ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	2b7f      	cmp	r3, #127	; 0x7f
 80115c8:	d101      	bne.n	80115ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80115ca:	2300      	movs	r3, #0
 80115cc:	e001      	b.n	80115d2 <ip4_route+0xca>
  }

  return netif_default;
 80115ce:	4b05      	ldr	r3, [pc, #20]	; (80115e4 <ip4_route+0xdc>)
 80115d0:	681b      	ldr	r3, [r3, #0]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3714      	adds	r7, #20
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop
 80115e0:	2400bd00 	.word	0x2400bd00
 80115e4:	2400bd04 	.word	0x2400bd04

080115e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115f6:	f003 0301 	and.w	r3, r3, #1
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d016      	beq.n	801162e <ip4_input_accept+0x46>
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	3304      	adds	r3, #4
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d011      	beq.n	801162e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801160a:	4b0b      	ldr	r3, [pc, #44]	; (8011638 <ip4_input_accept+0x50>)
 801160c:	695a      	ldr	r2, [r3, #20]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	3304      	adds	r3, #4
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	429a      	cmp	r2, r3
 8011616:	d008      	beq.n	801162a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011618:	4b07      	ldr	r3, [pc, #28]	; (8011638 <ip4_input_accept+0x50>)
 801161a:	695b      	ldr	r3, [r3, #20]
 801161c:	6879      	ldr	r1, [r7, #4]
 801161e:	4618      	mov	r0, r3
 8011620:	f000 fa08 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 8011624:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011626:	2b00      	cmp	r3, #0
 8011628:	d001      	beq.n	801162e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801162a:	2301      	movs	r3, #1
 801162c:	e000      	b.n	8011630 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801162e:	2300      	movs	r3, #0
}
 8011630:	4618      	mov	r0, r3
 8011632:	3708      	adds	r7, #8
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	24008c0c 	.word	0x24008c0c

0801163c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b086      	sub	sp, #24
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	091b      	lsrs	r3, r3, #4
 8011652:	b2db      	uxtb	r3, r3
 8011654:	2b04      	cmp	r3, #4
 8011656:	d004      	beq.n	8011662 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f7f8 fbeb 	bl	8009e34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	e107      	b.n	8011872 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	f003 030f 	and.w	r3, r3, #15
 801166a:	b2db      	uxtb	r3, r3
 801166c:	009b      	lsls	r3, r3, #2
 801166e:	b2db      	uxtb	r3, r3
 8011670:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	885b      	ldrh	r3, [r3, #2]
 8011676:	b29b      	uxth	r3, r3
 8011678:	4618      	mov	r0, r3
 801167a:	f7f6 ff21 	bl	80084c0 <lwip_htons>
 801167e:	4603      	mov	r3, r0
 8011680:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	891b      	ldrh	r3, [r3, #8]
 8011686:	89ba      	ldrh	r2, [r7, #12]
 8011688:	429a      	cmp	r2, r3
 801168a:	d204      	bcs.n	8011696 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801168c:	89bb      	ldrh	r3, [r7, #12]
 801168e:	4619      	mov	r1, r3
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7f8 fa49 	bl	8009b28 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	895b      	ldrh	r3, [r3, #10]
 801169a:	89fa      	ldrh	r2, [r7, #14]
 801169c:	429a      	cmp	r2, r3
 801169e:	d807      	bhi.n	80116b0 <ip4_input+0x74>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	891b      	ldrh	r3, [r3, #8]
 80116a4:	89ba      	ldrh	r2, [r7, #12]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d802      	bhi.n	80116b0 <ip4_input+0x74>
 80116aa:	89fb      	ldrh	r3, [r7, #14]
 80116ac:	2b13      	cmp	r3, #19
 80116ae:	d804      	bhi.n	80116ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7f8 fbbf 	bl	8009e34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80116b6:	2300      	movs	r3, #0
 80116b8:	e0db      	b.n	8011872 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	691b      	ldr	r3, [r3, #16]
 80116be:	4a6f      	ldr	r2, [pc, #444]	; (801187c <ip4_input+0x240>)
 80116c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	4a6d      	ldr	r2, [pc, #436]	; (801187c <ip4_input+0x240>)
 80116c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80116ca:	4b6c      	ldr	r3, [pc, #432]	; (801187c <ip4_input+0x240>)
 80116cc:	695b      	ldr	r3, [r3, #20]
 80116ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116d2:	2be0      	cmp	r3, #224	; 0xe0
 80116d4:	d112      	bne.n	80116fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116dc:	f003 0301 	and.w	r3, r3, #1
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d007      	beq.n	80116f6 <ip4_input+0xba>
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	3304      	adds	r3, #4
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d002      	beq.n	80116f6 <ip4_input+0xba>
      netif = inp;
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	613b      	str	r3, [r7, #16]
 80116f4:	e02a      	b.n	801174c <ip4_input+0x110>
    } else {
      netif = NULL;
 80116f6:	2300      	movs	r3, #0
 80116f8:	613b      	str	r3, [r7, #16]
 80116fa:	e027      	b.n	801174c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80116fc:	6838      	ldr	r0, [r7, #0]
 80116fe:	f7ff ff73 	bl	80115e8 <ip4_input_accept>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d002      	beq.n	801170e <ip4_input+0xd2>
      netif = inp;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	613b      	str	r3, [r7, #16]
 801170c:	e01e      	b.n	801174c <ip4_input+0x110>
    } else {
      netif = NULL;
 801170e:	2300      	movs	r3, #0
 8011710:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011712:	4b5a      	ldr	r3, [pc, #360]	; (801187c <ip4_input+0x240>)
 8011714:	695b      	ldr	r3, [r3, #20]
 8011716:	b2db      	uxtb	r3, r3
 8011718:	2b7f      	cmp	r3, #127	; 0x7f
 801171a:	d017      	beq.n	801174c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801171c:	4b58      	ldr	r3, [pc, #352]	; (8011880 <ip4_input+0x244>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	613b      	str	r3, [r7, #16]
 8011722:	e00e      	b.n	8011742 <ip4_input+0x106>
          if (netif == inp) {
 8011724:	693a      	ldr	r2, [r7, #16]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	429a      	cmp	r2, r3
 801172a:	d006      	beq.n	801173a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801172c:	6938      	ldr	r0, [r7, #16]
 801172e:	f7ff ff5b 	bl	80115e8 <ip4_input_accept>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	d108      	bne.n	801174a <ip4_input+0x10e>
 8011738:	e000      	b.n	801173c <ip4_input+0x100>
            continue;
 801173a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	613b      	str	r3, [r7, #16]
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d1ed      	bne.n	8011724 <ip4_input+0xe8>
 8011748:	e000      	b.n	801174c <ip4_input+0x110>
            break;
 801174a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801174c:	4b4b      	ldr	r3, [pc, #300]	; (801187c <ip4_input+0x240>)
 801174e:	691b      	ldr	r3, [r3, #16]
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	4618      	mov	r0, r3
 8011754:	f000 f96e 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d105      	bne.n	801176a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801175e:	4b47      	ldr	r3, [pc, #284]	; (801187c <ip4_input+0x240>)
 8011760:	691b      	ldr	r3, [r3, #16]
 8011762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011766:	2be0      	cmp	r3, #224	; 0xe0
 8011768:	d104      	bne.n	8011774 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7f8 fb62 	bl	8009e34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	e07e      	b.n	8011872 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011774:	693b      	ldr	r3, [r7, #16]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d104      	bne.n	8011784 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7f8 fb5a 	bl	8009e34 <pbuf_free>
    return ERR_OK;
 8011780:	2300      	movs	r3, #0
 8011782:	e076      	b.n	8011872 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	88db      	ldrh	r3, [r3, #6]
 8011788:	b29b      	uxth	r3, r3
 801178a:	461a      	mov	r2, r3
 801178c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011790:	4013      	ands	r3, r2
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00b      	beq.n	80117ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 fc92 	bl	80120c0 <ip4_reass>
 801179c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d101      	bne.n	80117a8 <ip4_input+0x16c>
      return ERR_OK;
 80117a4:	2300      	movs	r3, #0
 80117a6:	e064      	b.n	8011872 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80117ae:	4a33      	ldr	r2, [pc, #204]	; (801187c <ip4_input+0x240>)
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80117b4:	4a31      	ldr	r2, [pc, #196]	; (801187c <ip4_input+0x240>)
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80117ba:	4a30      	ldr	r2, [pc, #192]	; (801187c <ip4_input+0x240>)
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	781b      	ldrb	r3, [r3, #0]
 80117c4:	f003 030f 	and.w	r3, r3, #15
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	b2db      	uxtb	r3, r3
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	4b2a      	ldr	r3, [pc, #168]	; (801187c <ip4_input+0x240>)
 80117d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80117d4:	89fb      	ldrh	r3, [r7, #14]
 80117d6:	4619      	mov	r1, r3
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f7f8 faa5 	bl	8009d28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	7a5b      	ldrb	r3, [r3, #9]
 80117e2:	2b11      	cmp	r3, #17
 80117e4:	d006      	beq.n	80117f4 <ip4_input+0x1b8>
 80117e6:	2b11      	cmp	r3, #17
 80117e8:	dc13      	bgt.n	8011812 <ip4_input+0x1d6>
 80117ea:	2b01      	cmp	r3, #1
 80117ec:	d00c      	beq.n	8011808 <ip4_input+0x1cc>
 80117ee:	2b06      	cmp	r3, #6
 80117f0:	d005      	beq.n	80117fe <ip4_input+0x1c2>
 80117f2:	e00e      	b.n	8011812 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7fe f94a 	bl	800fa90 <udp_input>
        break;
 80117fc:	e026      	b.n	801184c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80117fe:	6839      	ldr	r1, [r7, #0]
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f7fa f95b 	bl	800babc <tcp_input>
        break;
 8011806:	e021      	b.n	801184c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff fcc8 	bl	80111a0 <icmp_input>
        break;
 8011810:	e01c      	b.n	801184c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011812:	4b1a      	ldr	r3, [pc, #104]	; (801187c <ip4_input+0x240>)
 8011814:	695b      	ldr	r3, [r3, #20]
 8011816:	6939      	ldr	r1, [r7, #16]
 8011818:	4618      	mov	r0, r3
 801181a:	f000 f90b 	bl	8011a34 <ip4_addr_isbroadcast_u32>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d10f      	bne.n	8011844 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011824:	4b15      	ldr	r3, [pc, #84]	; (801187c <ip4_input+0x240>)
 8011826:	695b      	ldr	r3, [r3, #20]
 8011828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801182c:	2be0      	cmp	r3, #224	; 0xe0
 801182e:	d009      	beq.n	8011844 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011834:	4619      	mov	r1, r3
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f7f8 fae9 	bl	8009e0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801183c:	2102      	movs	r1, #2
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f7ff fdce 	bl	80113e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7f8 faf5 	bl	8009e34 <pbuf_free>
        break;
 801184a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <ip4_input+0x240>)
 801184e:	2200      	movs	r2, #0
 8011850:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011852:	4b0a      	ldr	r3, [pc, #40]	; (801187c <ip4_input+0x240>)
 8011854:	2200      	movs	r2, #0
 8011856:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011858:	4b08      	ldr	r3, [pc, #32]	; (801187c <ip4_input+0x240>)
 801185a:	2200      	movs	r2, #0
 801185c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801185e:	4b07      	ldr	r3, [pc, #28]	; (801187c <ip4_input+0x240>)
 8011860:	2200      	movs	r2, #0
 8011862:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011864:	4b05      	ldr	r3, [pc, #20]	; (801187c <ip4_input+0x240>)
 8011866:	2200      	movs	r2, #0
 8011868:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801186a:	4b04      	ldr	r3, [pc, #16]	; (801187c <ip4_input+0x240>)
 801186c:	2200      	movs	r2, #0
 801186e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011870:	2300      	movs	r3, #0
}
 8011872:	4618      	mov	r0, r3
 8011874:	3718      	adds	r7, #24
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	24008c0c 	.word	0x24008c0c
 8011880:	2400bd00 	.word	0x2400bd00

08011884 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b08a      	sub	sp, #40	; 0x28
 8011888:	af04      	add	r7, sp, #16
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
 8011890:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d009      	beq.n	80118b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d003      	beq.n	80118aa <ip4_output_if+0x26>
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d102      	bne.n	80118b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80118aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ac:	3304      	adds	r3, #4
 80118ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80118b0:	78fa      	ldrb	r2, [r7, #3]
 80118b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b4:	9302      	str	r3, [sp, #8]
 80118b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80118ba:	9301      	str	r3, [sp, #4]
 80118bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	4613      	mov	r3, r2
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	6979      	ldr	r1, [r7, #20]
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f000 f805 	bl	80118d8 <ip4_output_if_src>
 80118ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3718      	adds	r7, #24
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b088      	sub	sp, #32
 80118dc:	af00      	add	r7, sp, #0
 80118de:	60f8      	str	r0, [r7, #12]
 80118e0:	60b9      	str	r1, [r7, #8]
 80118e2:	607a      	str	r2, [r7, #4]
 80118e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	7b9b      	ldrb	r3, [r3, #14]
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d006      	beq.n	80118fc <ip4_output_if_src+0x24>
 80118ee:	4b4b      	ldr	r3, [pc, #300]	; (8011a1c <ip4_output_if_src+0x144>)
 80118f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80118f4:	494a      	ldr	r1, [pc, #296]	; (8011a20 <ip4_output_if_src+0x148>)
 80118f6:	484b      	ldr	r0, [pc, #300]	; (8011a24 <ip4_output_if_src+0x14c>)
 80118f8:	f001 fae0 	bl	8012ebc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d060      	beq.n	80119c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011902:	2314      	movs	r3, #20
 8011904:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011906:	2114      	movs	r1, #20
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f7f8 f9fd 	bl	8009d08 <pbuf_add_header>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011914:	f06f 0301 	mvn.w	r3, #1
 8011918:	e07c      	b.n	8011a14 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	895b      	ldrh	r3, [r3, #10]
 8011924:	2b13      	cmp	r3, #19
 8011926:	d806      	bhi.n	8011936 <ip4_output_if_src+0x5e>
 8011928:	4b3c      	ldr	r3, [pc, #240]	; (8011a1c <ip4_output_if_src+0x144>)
 801192a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801192e:	493e      	ldr	r1, [pc, #248]	; (8011a28 <ip4_output_if_src+0x150>)
 8011930:	483c      	ldr	r0, [pc, #240]	; (8011a24 <ip4_output_if_src+0x14c>)
 8011932:	f001 fac3 	bl	8012ebc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	78fa      	ldrb	r2, [r7, #3]
 801193a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011942:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801194c:	8b7b      	ldrh	r3, [r7, #26]
 801194e:	089b      	lsrs	r3, r3, #2
 8011950:	b29b      	uxth	r3, r3
 8011952:	b2db      	uxtb	r3, r3
 8011954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011958:	b2da      	uxtb	r2, r3
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011964:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	891b      	ldrh	r3, [r3, #8]
 801196a:	4618      	mov	r0, r3
 801196c:	f7f6 fda8 	bl	80084c0 <lwip_htons>
 8011970:	4603      	mov	r3, r0
 8011972:	461a      	mov	r2, r3
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	2200      	movs	r2, #0
 801197c:	719a      	strb	r2, [r3, #6]
 801197e:	2200      	movs	r2, #0
 8011980:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011982:	4b2a      	ldr	r3, [pc, #168]	; (8011a2c <ip4_output_if_src+0x154>)
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	4618      	mov	r0, r3
 8011988:	f7f6 fd9a 	bl	80084c0 <lwip_htons>
 801198c:	4603      	mov	r3, r0
 801198e:	461a      	mov	r2, r3
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011994:	4b25      	ldr	r3, [pc, #148]	; (8011a2c <ip4_output_if_src+0x154>)
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	3301      	adds	r3, #1
 801199a:	b29a      	uxth	r2, r3
 801199c:	4b23      	ldr	r3, [pc, #140]	; (8011a2c <ip4_output_if_src+0x154>)
 801199e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d104      	bne.n	80119b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80119a6:	4b22      	ldr	r3, [pc, #136]	; (8011a30 <ip4_output_if_src+0x158>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	60da      	str	r2, [r3, #12]
 80119ae:	e003      	b.n	80119b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	681a      	ldr	r2, [r3, #0]
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80119b8:	69fb      	ldr	r3, [r7, #28]
 80119ba:	2200      	movs	r2, #0
 80119bc:	729a      	strb	r2, [r3, #10]
 80119be:	2200      	movs	r2, #0
 80119c0:	72da      	strb	r2, [r3, #11]
 80119c2:	e00f      	b.n	80119e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	895b      	ldrh	r3, [r3, #10]
 80119c8:	2b13      	cmp	r3, #19
 80119ca:	d802      	bhi.n	80119d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80119cc:	f06f 0301 	mvn.w	r3, #1
 80119d0:	e020      	b.n	8011a14 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	691b      	ldr	r3, [r3, #16]
 80119dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80119de:	f107 0314 	add.w	r3, r7, #20
 80119e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80119e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d00c      	beq.n	8011a06 <ip4_output_if_src+0x12e>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	891a      	ldrh	r2, [r3, #8]
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d906      	bls.n	8011a06 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 fd53 	bl	80124a8 <ip4_frag>
 8011a02:	4603      	mov	r3, r0
 8011a04:	e006      	b.n	8011a14 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	695b      	ldr	r3, [r3, #20]
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	68f9      	ldr	r1, [r7, #12]
 8011a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a10:	4798      	blx	r3
 8011a12:	4603      	mov	r3, r0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3720      	adds	r7, #32
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	08016544 	.word	0x08016544
 8011a20:	08016578 	.word	0x08016578
 8011a24:	08016584 	.word	0x08016584
 8011a28:	080165ac 	.word	0x080165ac
 8011a2c:	2400be5e 	.word	0x2400be5e
 8011a30:	080169c4 	.word	0x080169c4

08011a34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a48:	d002      	beq.n	8011a50 <ip4_addr_isbroadcast_u32+0x1c>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d101      	bne.n	8011a54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011a50:	2301      	movs	r3, #1
 8011a52:	e02a      	b.n	8011aaa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a5a:	f003 0302 	and.w	r3, r3, #2
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d101      	bne.n	8011a66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011a62:	2300      	movs	r3, #0
 8011a64:	e021      	b.n	8011aaa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d101      	bne.n	8011a76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011a72:	2300      	movs	r3, #0
 8011a74:	e019      	b.n	8011aaa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	3304      	adds	r3, #4
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	405a      	eors	r2, r3
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	3308      	adds	r3, #8
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	4013      	ands	r3, r2
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d10d      	bne.n	8011aa8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	3308      	adds	r3, #8
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	43da      	mvns	r2, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	3308      	adds	r3, #8
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d101      	bne.n	8011aa8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e000      	b.n	8011aaa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011aa8:	2300      	movs	r3, #0
  }
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
	...

08011ab8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011ac2:	4b12      	ldr	r3, [pc, #72]	; (8011b0c <ip_reass_tmr+0x54>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011ac8:	e018      	b.n	8011afc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	7fdb      	ldrb	r3, [r3, #31]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d00b      	beq.n	8011aea <ip_reass_tmr+0x32>
      r->timer--;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	7fdb      	ldrb	r3, [r3, #31]
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	b2da      	uxtb	r2, r3
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	60fb      	str	r3, [r7, #12]
 8011ae8:	e008      	b.n	8011afc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f000 f80a 	bl	8011b10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1e3      	bne.n	8011aca <ip_reass_tmr+0x12>
    }
  }
}
 8011b02:	bf00      	nop
 8011b04:	bf00      	nop
 8011b06:	3710      	adds	r7, #16
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	2400be60 	.word	0x2400be60

08011b10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b088      	sub	sp, #32
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011b1e:	683a      	ldr	r2, [r7, #0]
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d105      	bne.n	8011b32 <ip_reass_free_complete_datagram+0x22>
 8011b26:	4b45      	ldr	r3, [pc, #276]	; (8011c3c <ip_reass_free_complete_datagram+0x12c>)
 8011b28:	22ab      	movs	r2, #171	; 0xab
 8011b2a:	4945      	ldr	r1, [pc, #276]	; (8011c40 <ip_reass_free_complete_datagram+0x130>)
 8011b2c:	4845      	ldr	r0, [pc, #276]	; (8011c44 <ip_reass_free_complete_datagram+0x134>)
 8011b2e:	f001 f9c5 	bl	8012ebc <iprintf>
  if (prev != NULL) {
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d00a      	beq.n	8011b4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	687a      	ldr	r2, [r7, #4]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d005      	beq.n	8011b4e <ip_reass_free_complete_datagram+0x3e>
 8011b42:	4b3e      	ldr	r3, [pc, #248]	; (8011c3c <ip_reass_free_complete_datagram+0x12c>)
 8011b44:	22ad      	movs	r2, #173	; 0xad
 8011b46:	4940      	ldr	r1, [pc, #256]	; (8011c48 <ip_reass_free_complete_datagram+0x138>)
 8011b48:	483e      	ldr	r0, [pc, #248]	; (8011c44 <ip_reass_free_complete_datagram+0x134>)
 8011b4a:	f001 f9b7 	bl	8012ebc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	889b      	ldrh	r3, [r3, #4]
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d12a      	bne.n	8011bb6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	6858      	ldr	r0, [r3, #4]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	3308      	adds	r3, #8
 8011b76:	2214      	movs	r2, #20
 8011b78:	4619      	mov	r1, r3
 8011b7a:	f001 f8f4 	bl	8012d66 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011b7e:	2101      	movs	r1, #1
 8011b80:	69b8      	ldr	r0, [r7, #24]
 8011b82:	f7ff fc3d 	bl	8011400 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011b86:	69b8      	ldr	r0, [r7, #24]
 8011b88:	f7f8 f9e2 	bl	8009f50 <pbuf_clen>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011b90:	8bfa      	ldrh	r2, [r7, #30]
 8011b92:	8a7b      	ldrh	r3, [r7, #18]
 8011b94:	4413      	add	r3, r2
 8011b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b9a:	db05      	blt.n	8011ba8 <ip_reass_free_complete_datagram+0x98>
 8011b9c:	4b27      	ldr	r3, [pc, #156]	; (8011c3c <ip_reass_free_complete_datagram+0x12c>)
 8011b9e:	22bc      	movs	r2, #188	; 0xbc
 8011ba0:	492a      	ldr	r1, [pc, #168]	; (8011c4c <ip_reass_free_complete_datagram+0x13c>)
 8011ba2:	4828      	ldr	r0, [pc, #160]	; (8011c44 <ip_reass_free_complete_datagram+0x134>)
 8011ba4:	f001 f98a 	bl	8012ebc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ba8:	8bfa      	ldrh	r2, [r7, #30]
 8011baa:	8a7b      	ldrh	r3, [r7, #18]
 8011bac:	4413      	add	r3, r2
 8011bae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011bb0:	69b8      	ldr	r0, [r7, #24]
 8011bb2:	f7f8 f93f 	bl	8009e34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011bbc:	e01f      	b.n	8011bfe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	685b      	ldr	r3, [r3, #4]
 8011bc2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011bce:	68f8      	ldr	r0, [r7, #12]
 8011bd0:	f7f8 f9be 	bl	8009f50 <pbuf_clen>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011bd8:	8bfa      	ldrh	r2, [r7, #30]
 8011bda:	8a7b      	ldrh	r3, [r7, #18]
 8011bdc:	4413      	add	r3, r2
 8011bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011be2:	db05      	blt.n	8011bf0 <ip_reass_free_complete_datagram+0xe0>
 8011be4:	4b15      	ldr	r3, [pc, #84]	; (8011c3c <ip_reass_free_complete_datagram+0x12c>)
 8011be6:	22cc      	movs	r2, #204	; 0xcc
 8011be8:	4918      	ldr	r1, [pc, #96]	; (8011c4c <ip_reass_free_complete_datagram+0x13c>)
 8011bea:	4816      	ldr	r0, [pc, #88]	; (8011c44 <ip_reass_free_complete_datagram+0x134>)
 8011bec:	f001 f966 	bl	8012ebc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011bf0:	8bfa      	ldrh	r2, [r7, #30]
 8011bf2:	8a7b      	ldrh	r3, [r7, #18]
 8011bf4:	4413      	add	r3, r2
 8011bf6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011bf8:	68f8      	ldr	r0, [r7, #12]
 8011bfa:	f7f8 f91b 	bl	8009e34 <pbuf_free>
  while (p != NULL) {
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d1dc      	bne.n	8011bbe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f000 f8c2 	bl	8011d90 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011c0c:	4b10      	ldr	r3, [pc, #64]	; (8011c50 <ip_reass_free_complete_datagram+0x140>)
 8011c0e:	881b      	ldrh	r3, [r3, #0]
 8011c10:	8bfa      	ldrh	r2, [r7, #30]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d905      	bls.n	8011c22 <ip_reass_free_complete_datagram+0x112>
 8011c16:	4b09      	ldr	r3, [pc, #36]	; (8011c3c <ip_reass_free_complete_datagram+0x12c>)
 8011c18:	22d2      	movs	r2, #210	; 0xd2
 8011c1a:	490e      	ldr	r1, [pc, #56]	; (8011c54 <ip_reass_free_complete_datagram+0x144>)
 8011c1c:	4809      	ldr	r0, [pc, #36]	; (8011c44 <ip_reass_free_complete_datagram+0x134>)
 8011c1e:	f001 f94d 	bl	8012ebc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011c22:	4b0b      	ldr	r3, [pc, #44]	; (8011c50 <ip_reass_free_complete_datagram+0x140>)
 8011c24:	881a      	ldrh	r2, [r3, #0]
 8011c26:	8bfb      	ldrh	r3, [r7, #30]
 8011c28:	1ad3      	subs	r3, r2, r3
 8011c2a:	b29a      	uxth	r2, r3
 8011c2c:	4b08      	ldr	r3, [pc, #32]	; (8011c50 <ip_reass_free_complete_datagram+0x140>)
 8011c2e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011c30:	8bfb      	ldrh	r3, [r7, #30]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3720      	adds	r7, #32
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	080165dc 	.word	0x080165dc
 8011c40:	08016618 	.word	0x08016618
 8011c44:	08016624 	.word	0x08016624
 8011c48:	0801664c 	.word	0x0801664c
 8011c4c:	08016660 	.word	0x08016660
 8011c50:	2400be64 	.word	0x2400be64
 8011c54:	08016680 	.word	0x08016680

08011c58 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08a      	sub	sp, #40	; 0x28
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011c62:	2300      	movs	r3, #0
 8011c64:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011c66:	2300      	movs	r3, #0
 8011c68:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011c72:	2300      	movs	r3, #0
 8011c74:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011c76:	4b28      	ldr	r3, [pc, #160]	; (8011d18 <ip_reass_remove_oldest_datagram+0xc0>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011c7c:	e030      	b.n	8011ce0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c80:	695a      	ldr	r2, [r3, #20]
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d10c      	bne.n	8011ca4 <ip_reass_remove_oldest_datagram+0x4c>
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8c:	699a      	ldr	r2, [r3, #24]
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	691b      	ldr	r3, [r3, #16]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d106      	bne.n	8011ca4 <ip_reass_remove_oldest_datagram+0x4c>
 8011c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c98:	899a      	ldrh	r2, [r3, #12]
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	889b      	ldrh	r3, [r3, #4]
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d014      	beq.n	8011cce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011caa:	6a3b      	ldr	r3, [r7, #32]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d104      	bne.n	8011cba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	61bb      	str	r3, [r7, #24]
 8011cb8:	e009      	b.n	8011cce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	7fda      	ldrb	r2, [r3, #31]
 8011cbe:	6a3b      	ldr	r3, [r7, #32]
 8011cc0:	7fdb      	ldrb	r3, [r3, #31]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d803      	bhi.n	8011cce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d001      	beq.n	8011cda <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1cb      	bne.n	8011c7e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d008      	beq.n	8011cfe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011cec:	69b9      	ldr	r1, [r7, #24]
 8011cee:	6a38      	ldr	r0, [r7, #32]
 8011cf0:	f7ff ff0e 	bl	8011b10 <ip_reass_free_complete_datagram>
 8011cf4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011cf6:	697a      	ldr	r2, [r7, #20]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	4413      	add	r3, r2
 8011cfc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011cfe:	697a      	ldr	r2, [r7, #20]
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	da02      	bge.n	8011d0c <ip_reass_remove_oldest_datagram+0xb4>
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	dcac      	bgt.n	8011c66 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011d0c:	697b      	ldr	r3, [r7, #20]
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3728      	adds	r7, #40	; 0x28
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	2400be60 	.word	0x2400be60

08011d1c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d26:	2004      	movs	r0, #4
 8011d28:	f7f7 f96a 	bl	8009000 <memp_malloc>
 8011d2c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d110      	bne.n	8011d56 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f7ff ff8e 	bl	8011c58 <ip_reass_remove_oldest_datagram>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	4293      	cmp	r3, r2
 8011d42:	dc03      	bgt.n	8011d4c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011d44:	2004      	movs	r0, #4
 8011d46:	f7f7 f95b 	bl	8009000 <memp_malloc>
 8011d4a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d101      	bne.n	8011d56 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011d52:	2300      	movs	r3, #0
 8011d54:	e016      	b.n	8011d84 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011d56:	2220      	movs	r2, #32
 8011d58:	2100      	movs	r1, #0
 8011d5a:	68f8      	ldr	r0, [r7, #12]
 8011d5c:	f001 f811 	bl	8012d82 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	220f      	movs	r2, #15
 8011d64:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011d66:	4b09      	ldr	r3, [pc, #36]	; (8011d8c <ip_reass_enqueue_new_datagram+0x70>)
 8011d68:	681a      	ldr	r2, [r3, #0]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011d6e:	4a07      	ldr	r2, [pc, #28]	; (8011d8c <ip_reass_enqueue_new_datagram+0x70>)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	3308      	adds	r3, #8
 8011d78:	2214      	movs	r2, #20
 8011d7a:	6879      	ldr	r1, [r7, #4]
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f000 fff2 	bl	8012d66 <memcpy>
  return ipr;
 8011d82:	68fb      	ldr	r3, [r7, #12]
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	2400be60 	.word	0x2400be60

08011d90 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011d9a:	4b10      	ldr	r3, [pc, #64]	; (8011ddc <ip_reass_dequeue_datagram+0x4c>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d104      	bne.n	8011dae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4a0c      	ldr	r2, [pc, #48]	; (8011ddc <ip_reass_dequeue_datagram+0x4c>)
 8011daa:	6013      	str	r3, [r2, #0]
 8011dac:	e00d      	b.n	8011dca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d106      	bne.n	8011dc2 <ip_reass_dequeue_datagram+0x32>
 8011db4:	4b0a      	ldr	r3, [pc, #40]	; (8011de0 <ip_reass_dequeue_datagram+0x50>)
 8011db6:	f240 1245 	movw	r2, #325	; 0x145
 8011dba:	490a      	ldr	r1, [pc, #40]	; (8011de4 <ip_reass_dequeue_datagram+0x54>)
 8011dbc:	480a      	ldr	r0, [pc, #40]	; (8011de8 <ip_reass_dequeue_datagram+0x58>)
 8011dbe:	f001 f87d 	bl	8012ebc <iprintf>
    prev->next = ipr->next;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011dca:	6879      	ldr	r1, [r7, #4]
 8011dcc:	2004      	movs	r0, #4
 8011dce:	f7f7 f98d 	bl	80090ec <memp_free>
}
 8011dd2:	bf00      	nop
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	2400be60 	.word	0x2400be60
 8011de0:	080165dc 	.word	0x080165dc
 8011de4:	080166a4 	.word	0x080166a4
 8011de8:	08016624 	.word	0x08016624

08011dec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b08c      	sub	sp, #48	; 0x30
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	885b      	ldrh	r3, [r3, #2]
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7f6 fb57 	bl	80084c0 <lwip_htons>
 8011e12:	4603      	mov	r3, r0
 8011e14:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011e16:	69fb      	ldr	r3, [r7, #28]
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	f003 030f 	and.w	r3, r3, #15
 8011e1e:	b2db      	uxtb	r3, r3
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011e24:	7e7b      	ldrb	r3, [r7, #25]
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	8b7a      	ldrh	r2, [r7, #26]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d202      	bcs.n	8011e34 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e32:	e135      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011e34:	7e7b      	ldrb	r3, [r7, #25]
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	8b7a      	ldrh	r2, [r7, #26]
 8011e3a:	1ad3      	subs	r3, r2, r3
 8011e3c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	88db      	ldrh	r3, [r3, #6]
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7f6 fb3b 	bl	80084c0 <lwip_htons>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e50:	b29b      	uxth	r3, r3
 8011e52:	00db      	lsls	r3, r3, #3
 8011e54:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5e:	2200      	movs	r2, #0
 8011e60:	701a      	strb	r2, [r3, #0]
 8011e62:	2200      	movs	r2, #0
 8011e64:	705a      	strb	r2, [r3, #1]
 8011e66:	2200      	movs	r2, #0
 8011e68:	709a      	strb	r2, [r3, #2]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e70:	8afa      	ldrh	r2, [r7, #22]
 8011e72:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011e74:	8afa      	ldrh	r2, [r7, #22]
 8011e76:	8b7b      	ldrh	r3, [r7, #26]
 8011e78:	4413      	add	r3, r2
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	88db      	ldrh	r3, [r3, #6]
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	8afa      	ldrh	r2, [r7, #22]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d902      	bls.n	8011e92 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e90:	e106      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	627b      	str	r3, [r7, #36]	; 0x24
 8011e98:	e068      	b.n	8011f6c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea2:	889b      	ldrh	r3, [r3, #4]
 8011ea4:	b29a      	uxth	r2, r3
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	889b      	ldrh	r3, [r3, #4]
 8011eaa:	b29b      	uxth	r3, r3
 8011eac:	429a      	cmp	r2, r3
 8011eae:	d235      	bcs.n	8011f1c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d020      	beq.n	8011efe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	889b      	ldrh	r3, [r3, #4]
 8011ec0:	b29a      	uxth	r2, r3
 8011ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec4:	88db      	ldrh	r3, [r3, #6]
 8011ec6:	b29b      	uxth	r3, r3
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d307      	bcc.n	8011edc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ece:	88db      	ldrh	r3, [r3, #6]
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	889b      	ldrh	r3, [r3, #4]
 8011ed6:	b29b      	uxth	r3, r3
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d902      	bls.n	8011ee2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee0:	e0de      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee4:	68ba      	ldr	r2, [r7, #8]
 8011ee6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eea:	88db      	ldrh	r3, [r3, #6]
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef0:	889b      	ldrh	r3, [r3, #4]
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d03d      	beq.n	8011f74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011efc:	e03a      	b.n	8011f74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f00:	88db      	ldrh	r3, [r3, #6]
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	889b      	ldrh	r3, [r3, #4]
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d902      	bls.n	8011f14 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f12:	e0c5      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	605a      	str	r2, [r3, #4]
      break;
 8011f1a:	e02b      	b.n	8011f74 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1e:	889b      	ldrh	r3, [r3, #4]
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	889b      	ldrh	r3, [r3, #4]
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d102      	bne.n	8011f32 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f30:	e0b6      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f34:	889b      	ldrh	r3, [r3, #4]
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	88db      	ldrh	r3, [r3, #6]
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d202      	bcs.n	8011f48 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f46:	e0ab      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d009      	beq.n	8011f62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	88db      	ldrh	r3, [r3, #6]
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	889b      	ldrh	r3, [r3, #4]
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d001      	beq.n	8011f62 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d193      	bne.n	8011e9a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011f72:	e000      	b.n	8011f76 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011f74:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d12d      	bne.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d01c      	beq.n	8011fbc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f84:	88db      	ldrh	r3, [r3, #6]
 8011f86:	b29a      	uxth	r2, r3
 8011f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8a:	889b      	ldrh	r3, [r3, #4]
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d906      	bls.n	8011fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011f92:	4b45      	ldr	r3, [pc, #276]	; (80120a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f94:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011f98:	4944      	ldr	r1, [pc, #272]	; (80120ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011f9a:	4845      	ldr	r0, [pc, #276]	; (80120b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f9c:	f000 ff8e 	bl	8012ebc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa8:	88db      	ldrh	r3, [r3, #6]
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fae:	889b      	ldrh	r3, [r3, #4]
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d010      	beq.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	623b      	str	r3, [r7, #32]
 8011fba:	e00d      	b.n	8011fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d006      	beq.n	8011fd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011fc4:	4b38      	ldr	r3, [pc, #224]	; (80120a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011fc6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8011fca:	493a      	ldr	r1, [pc, #232]	; (80120b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011fcc:	4838      	ldr	r0, [pc, #224]	; (80120b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011fce:	f000 ff75 	bl	8012ebc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	68ba      	ldr	r2, [r7, #8]
 8011fd6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d105      	bne.n	8011fea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	7f9b      	ldrb	r3, [r3, #30]
 8011fe2:	f003 0301 	and.w	r3, r3, #1
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d059      	beq.n	801209e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011fea:	6a3b      	ldr	r3, [r7, #32]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d04f      	beq.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d006      	beq.n	8012006 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	889b      	ldrh	r3, [r3, #4]
 8012000:	b29b      	uxth	r3, r3
 8012002:	2b00      	cmp	r3, #0
 8012004:	d002      	beq.n	801200c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012006:	2300      	movs	r3, #0
 8012008:	623b      	str	r3, [r7, #32]
 801200a:	e041      	b.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012016:	e012      	b.n	801203e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012020:	88db      	ldrh	r3, [r3, #6]
 8012022:	b29a      	uxth	r2, r3
 8012024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012026:	889b      	ldrh	r3, [r3, #4]
 8012028:	b29b      	uxth	r3, r3
 801202a:	429a      	cmp	r2, r3
 801202c:	d002      	beq.n	8012034 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	623b      	str	r3, [r7, #32]
            break;
 8012032:	e007      	b.n	8012044 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012036:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1e9      	bne.n	8012018 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012044:	6a3b      	ldr	r3, [r7, #32]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d022      	beq.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012052:	4b15      	ldr	r3, [pc, #84]	; (80120a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012054:	f240 12df 	movw	r2, #479	; 0x1df
 8012058:	4917      	ldr	r1, [pc, #92]	; (80120b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801205a:	4815      	ldr	r0, [pc, #84]	; (80120b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801205c:	f000 ff2e 	bl	8012ebc <iprintf>
          LWIP_ASSERT("sanity check",
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012068:	429a      	cmp	r2, r3
 801206a:	d106      	bne.n	801207a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801206c:	4b0e      	ldr	r3, [pc, #56]	; (80120a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801206e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012072:	4911      	ldr	r1, [pc, #68]	; (80120b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012074:	480e      	ldr	r0, [pc, #56]	; (80120b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012076:	f000 ff21 	bl	8012ebc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d006      	beq.n	8012090 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012082:	4b09      	ldr	r3, [pc, #36]	; (80120a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012084:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012088:	490c      	ldr	r1, [pc, #48]	; (80120bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801208a:	4809      	ldr	r0, [pc, #36]	; (80120b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801208c:	f000 ff16 	bl	8012ebc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	2b00      	cmp	r3, #0
 8012094:	bf14      	ite	ne
 8012096:	2301      	movne	r3, #1
 8012098:	2300      	moveq	r3, #0
 801209a:	b2db      	uxtb	r3, r3
 801209c:	e000      	b.n	80120a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801209e:	2300      	movs	r3, #0
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3730      	adds	r7, #48	; 0x30
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	080165dc 	.word	0x080165dc
 80120ac:	080166c0 	.word	0x080166c0
 80120b0:	08016624 	.word	0x08016624
 80120b4:	080166e0 	.word	0x080166e0
 80120b8:	08016718 	.word	0x08016718
 80120bc:	08016728 	.word	0x08016728

080120c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b08e      	sub	sp, #56	; 0x38
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80120ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	f003 030f 	and.w	r3, r3, #15
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	2b14      	cmp	r3, #20
 80120de:	f040 8171 	bne.w	80123c4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80120e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e4:	88db      	ldrh	r3, [r3, #6]
 80120e6:	b29b      	uxth	r3, r3
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7f6 f9e9 	bl	80084c0 <lwip_htons>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	00db      	lsls	r3, r3, #3
 80120f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80120fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fc:	885b      	ldrh	r3, [r3, #2]
 80120fe:	b29b      	uxth	r3, r3
 8012100:	4618      	mov	r0, r3
 8012102:	f7f6 f9dd 	bl	80084c0 <lwip_htons>
 8012106:	4603      	mov	r3, r0
 8012108:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	f003 030f 	and.w	r3, r3, #15
 8012112:	b2db      	uxtb	r3, r3
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801211a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801211e:	b29b      	uxth	r3, r3
 8012120:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012122:	429a      	cmp	r2, r3
 8012124:	f0c0 8150 	bcc.w	80123c8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801212c:	b29b      	uxth	r3, r3
 801212e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012130:	1ad3      	subs	r3, r2, r3
 8012132:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f7f7 ff0b 	bl	8009f50 <pbuf_clen>
 801213a:	4603      	mov	r3, r0
 801213c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801213e:	4b8c      	ldr	r3, [pc, #560]	; (8012370 <ip4_reass+0x2b0>)
 8012140:	881b      	ldrh	r3, [r3, #0]
 8012142:	461a      	mov	r2, r3
 8012144:	8c3b      	ldrh	r3, [r7, #32]
 8012146:	4413      	add	r3, r2
 8012148:	2b0a      	cmp	r3, #10
 801214a:	dd10      	ble.n	801216e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801214c:	8c3b      	ldrh	r3, [r7, #32]
 801214e:	4619      	mov	r1, r3
 8012150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012152:	f7ff fd81 	bl	8011c58 <ip_reass_remove_oldest_datagram>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	f000 8137 	beq.w	80123cc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801215e:	4b84      	ldr	r3, [pc, #528]	; (8012370 <ip4_reass+0x2b0>)
 8012160:	881b      	ldrh	r3, [r3, #0]
 8012162:	461a      	mov	r2, r3
 8012164:	8c3b      	ldrh	r3, [r7, #32]
 8012166:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012168:	2b0a      	cmp	r3, #10
 801216a:	f300 812f 	bgt.w	80123cc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801216e:	4b81      	ldr	r3, [pc, #516]	; (8012374 <ip4_reass+0x2b4>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	633b      	str	r3, [r7, #48]	; 0x30
 8012174:	e015      	b.n	80121a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012178:	695a      	ldr	r2, [r3, #20]
 801217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	429a      	cmp	r2, r3
 8012180:	d10c      	bne.n	801219c <ip4_reass+0xdc>
 8012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012184:	699a      	ldr	r2, [r3, #24]
 8012186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	429a      	cmp	r2, r3
 801218c:	d106      	bne.n	801219c <ip4_reass+0xdc>
 801218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012190:	899a      	ldrh	r2, [r3, #12]
 8012192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012194:	889b      	ldrh	r3, [r3, #4]
 8012196:	b29b      	uxth	r3, r3
 8012198:	429a      	cmp	r2, r3
 801219a:	d006      	beq.n	80121aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	633b      	str	r3, [r7, #48]	; 0x30
 80121a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d1e6      	bne.n	8012176 <ip4_reass+0xb6>
 80121a8:	e000      	b.n	80121ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80121aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80121ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d109      	bne.n	80121c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80121b2:	8c3b      	ldrh	r3, [r7, #32]
 80121b4:	4619      	mov	r1, r3
 80121b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121b8:	f7ff fdb0 	bl	8011d1c <ip_reass_enqueue_new_datagram>
 80121bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80121be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d11c      	bne.n	80121fe <ip4_reass+0x13e>
      goto nullreturn;
 80121c4:	e105      	b.n	80123d2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80121c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c8:	88db      	ldrh	r3, [r3, #6]
 80121ca:	b29b      	uxth	r3, r3
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7f6 f977 	bl	80084c0 <lwip_htons>
 80121d2:	4603      	mov	r3, r0
 80121d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d110      	bne.n	80121fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80121dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121de:	89db      	ldrh	r3, [r3, #14]
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7f6 f96d 	bl	80084c0 <lwip_htons>
 80121e6:	4603      	mov	r3, r0
 80121e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d006      	beq.n	80121fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80121f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f2:	3308      	adds	r3, #8
 80121f4:	2214      	movs	r2, #20
 80121f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121f8:	4618      	mov	r0, r3
 80121fa:	f000 fdb4 	bl	8012d66 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80121fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012200:	88db      	ldrh	r3, [r3, #6]
 8012202:	b29b      	uxth	r3, r3
 8012204:	f003 0320 	and.w	r3, r3, #32
 8012208:	2b00      	cmp	r3, #0
 801220a:	bf0c      	ite	eq
 801220c:	2301      	moveq	r3, #1
 801220e:	2300      	movne	r3, #0
 8012210:	b2db      	uxtb	r3, r3
 8012212:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00e      	beq.n	8012238 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801221a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801221c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801221e:	4413      	add	r3, r2
 8012220:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012222:	8b7a      	ldrh	r2, [r7, #26]
 8012224:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012226:	429a      	cmp	r2, r3
 8012228:	f0c0 80a0 	bcc.w	801236c <ip4_reass+0x2ac>
 801222c:	8b7b      	ldrh	r3, [r7, #26]
 801222e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012232:	4293      	cmp	r3, r2
 8012234:	f200 809a 	bhi.w	801236c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012238:	69fa      	ldr	r2, [r7, #28]
 801223a:	6879      	ldr	r1, [r7, #4]
 801223c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801223e:	f7ff fdd5 	bl	8011dec <ip_reass_chain_frag_into_datagram_and_validate>
 8012242:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801224a:	f000 809b 	beq.w	8012384 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801224e:	4b48      	ldr	r3, [pc, #288]	; (8012370 <ip4_reass+0x2b0>)
 8012250:	881a      	ldrh	r2, [r3, #0]
 8012252:	8c3b      	ldrh	r3, [r7, #32]
 8012254:	4413      	add	r3, r2
 8012256:	b29a      	uxth	r2, r3
 8012258:	4b45      	ldr	r3, [pc, #276]	; (8012370 <ip4_reass+0x2b0>)
 801225a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00d      	beq.n	801227e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012262:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012266:	4413      	add	r3, r2
 8012268:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226c:	8a7a      	ldrh	r2, [r7, #18]
 801226e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012272:	7f9b      	ldrb	r3, [r3, #30]
 8012274:	f043 0301 	orr.w	r3, r3, #1
 8012278:	b2da      	uxtb	r2, r3
 801227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d171      	bne.n	8012368 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012286:	8b9b      	ldrh	r3, [r3, #28]
 8012288:	3314      	adds	r3, #20
 801228a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228e:	685b      	ldr	r3, [r3, #4]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a0:	3308      	adds	r3, #8
 80122a2:	2214      	movs	r2, #20
 80122a4:	4619      	mov	r1, r3
 80122a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122a8:	f000 fd5d 	bl	8012d66 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80122ac:	8a3b      	ldrh	r3, [r7, #16]
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7f6 f906 	bl	80084c0 <lwip_htons>
 80122b4:	4603      	mov	r3, r0
 80122b6:	461a      	mov	r2, r3
 80122b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80122bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122be:	2200      	movs	r2, #0
 80122c0:	719a      	strb	r2, [r3, #6]
 80122c2:	2200      	movs	r2, #0
 80122c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80122c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c8:	2200      	movs	r2, #0
 80122ca:	729a      	strb	r2, [r3, #10]
 80122cc:	2200      	movs	r2, #0
 80122ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80122d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80122d6:	e00d      	b.n	80122f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80122d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80122de:	2114      	movs	r1, #20
 80122e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80122e2:	f7f7 fd21 	bl	8009d28 <pbuf_remove_header>
      pbuf_cat(p, r);
 80122e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7f7 fe71 	bl	8009fd0 <pbuf_cat>
      r = iprh->next_pbuf;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80122f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d1ee      	bne.n	80122d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80122fa:	4b1e      	ldr	r3, [pc, #120]	; (8012374 <ip4_reass+0x2b4>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012300:	429a      	cmp	r2, r3
 8012302:	d102      	bne.n	801230a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012304:	2300      	movs	r3, #0
 8012306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012308:	e010      	b.n	801232c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801230a:	4b1a      	ldr	r3, [pc, #104]	; (8012374 <ip4_reass+0x2b4>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012310:	e007      	b.n	8012322 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012318:	429a      	cmp	r2, r3
 801231a:	d006      	beq.n	801232a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012324:	2b00      	cmp	r3, #0
 8012326:	d1f4      	bne.n	8012312 <ip4_reass+0x252>
 8012328:	e000      	b.n	801232c <ip4_reass+0x26c>
          break;
 801232a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801232c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801232e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012330:	f7ff fd2e 	bl	8011d90 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f7f7 fe0b 	bl	8009f50 <pbuf_clen>
 801233a:	4603      	mov	r3, r0
 801233c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801233e:	4b0c      	ldr	r3, [pc, #48]	; (8012370 <ip4_reass+0x2b0>)
 8012340:	881b      	ldrh	r3, [r3, #0]
 8012342:	8c3a      	ldrh	r2, [r7, #32]
 8012344:	429a      	cmp	r2, r3
 8012346:	d906      	bls.n	8012356 <ip4_reass+0x296>
 8012348:	4b0b      	ldr	r3, [pc, #44]	; (8012378 <ip4_reass+0x2b8>)
 801234a:	f240 229b 	movw	r2, #667	; 0x29b
 801234e:	490b      	ldr	r1, [pc, #44]	; (801237c <ip4_reass+0x2bc>)
 8012350:	480b      	ldr	r0, [pc, #44]	; (8012380 <ip4_reass+0x2c0>)
 8012352:	f000 fdb3 	bl	8012ebc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012356:	4b06      	ldr	r3, [pc, #24]	; (8012370 <ip4_reass+0x2b0>)
 8012358:	881a      	ldrh	r2, [r3, #0]
 801235a:	8c3b      	ldrh	r3, [r7, #32]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	b29a      	uxth	r2, r3
 8012360:	4b03      	ldr	r3, [pc, #12]	; (8012370 <ip4_reass+0x2b0>)
 8012362:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	e038      	b.n	80123da <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012368:	2300      	movs	r3, #0
 801236a:	e036      	b.n	80123da <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801236c:	bf00      	nop
 801236e:	e00a      	b.n	8012386 <ip4_reass+0x2c6>
 8012370:	2400be64 	.word	0x2400be64
 8012374:	2400be60 	.word	0x2400be60
 8012378:	080165dc 	.word	0x080165dc
 801237c:	0801674c 	.word	0x0801674c
 8012380:	08016624 	.word	0x08016624
    goto nullreturn_ipr;
 8012384:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012388:	2b00      	cmp	r3, #0
 801238a:	d106      	bne.n	801239a <ip4_reass+0x2da>
 801238c:	4b15      	ldr	r3, [pc, #84]	; (80123e4 <ip4_reass+0x324>)
 801238e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012392:	4915      	ldr	r1, [pc, #84]	; (80123e8 <ip4_reass+0x328>)
 8012394:	4815      	ldr	r0, [pc, #84]	; (80123ec <ip4_reass+0x32c>)
 8012396:	f000 fd91 	bl	8012ebc <iprintf>
  if (ipr->p == NULL) {
 801239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d116      	bne.n	80123d0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80123a2:	4b13      	ldr	r3, [pc, #76]	; (80123f0 <ip4_reass+0x330>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d006      	beq.n	80123ba <ip4_reass+0x2fa>
 80123ac:	4b0d      	ldr	r3, [pc, #52]	; (80123e4 <ip4_reass+0x324>)
 80123ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80123b2:	4910      	ldr	r1, [pc, #64]	; (80123f4 <ip4_reass+0x334>)
 80123b4:	480d      	ldr	r0, [pc, #52]	; (80123ec <ip4_reass+0x32c>)
 80123b6:	f000 fd81 	bl	8012ebc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80123ba:	2100      	movs	r1, #0
 80123bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123be:	f7ff fce7 	bl	8011d90 <ip_reass_dequeue_datagram>
 80123c2:	e006      	b.n	80123d2 <ip4_reass+0x312>
    goto nullreturn;
 80123c4:	bf00      	nop
 80123c6:	e004      	b.n	80123d2 <ip4_reass+0x312>
    goto nullreturn;
 80123c8:	bf00      	nop
 80123ca:	e002      	b.n	80123d2 <ip4_reass+0x312>
      goto nullreturn;
 80123cc:	bf00      	nop
 80123ce:	e000      	b.n	80123d2 <ip4_reass+0x312>
  }

nullreturn:
 80123d0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f7f7 fd2e 	bl	8009e34 <pbuf_free>
  return NULL;
 80123d8:	2300      	movs	r3, #0
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3738      	adds	r7, #56	; 0x38
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	080165dc 	.word	0x080165dc
 80123e8:	08016768 	.word	0x08016768
 80123ec:	08016624 	.word	0x08016624
 80123f0:	2400be60 	.word	0x2400be60
 80123f4:	08016774 	.word	0x08016774

080123f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80123fc:	2005      	movs	r0, #5
 80123fe:	f7f6 fdff 	bl	8009000 <memp_malloc>
 8012402:	4603      	mov	r3, r0
}
 8012404:	4618      	mov	r0, r3
 8012406:	bd80      	pop	{r7, pc}

08012408 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012416:	4b07      	ldr	r3, [pc, #28]	; (8012434 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012418:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801241c:	4906      	ldr	r1, [pc, #24]	; (8012438 <ip_frag_free_pbuf_custom_ref+0x30>)
 801241e:	4807      	ldr	r0, [pc, #28]	; (801243c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012420:	f000 fd4c 	bl	8012ebc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012424:	6879      	ldr	r1, [r7, #4]
 8012426:	2005      	movs	r0, #5
 8012428:	f7f6 fe60 	bl	80090ec <memp_free>
}
 801242c:	bf00      	nop
 801242e:	3708      	adds	r7, #8
 8012430:	46bd      	mov	sp, r7
 8012432:	bd80      	pop	{r7, pc}
 8012434:	080165dc 	.word	0x080165dc
 8012438:	08016794 	.word	0x08016794
 801243c:	08016624 	.word	0x08016624

08012440 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d106      	bne.n	8012460 <ipfrag_free_pbuf_custom+0x20>
 8012452:	4b11      	ldr	r3, [pc, #68]	; (8012498 <ipfrag_free_pbuf_custom+0x58>)
 8012454:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012458:	4910      	ldr	r1, [pc, #64]	; (801249c <ipfrag_free_pbuf_custom+0x5c>)
 801245a:	4811      	ldr	r0, [pc, #68]	; (80124a0 <ipfrag_free_pbuf_custom+0x60>)
 801245c:	f000 fd2e 	bl	8012ebc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d006      	beq.n	8012476 <ipfrag_free_pbuf_custom+0x36>
 8012468:	4b0b      	ldr	r3, [pc, #44]	; (8012498 <ipfrag_free_pbuf_custom+0x58>)
 801246a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801246e:	490d      	ldr	r1, [pc, #52]	; (80124a4 <ipfrag_free_pbuf_custom+0x64>)
 8012470:	480b      	ldr	r0, [pc, #44]	; (80124a0 <ipfrag_free_pbuf_custom+0x60>)
 8012472:	f000 fd23 	bl	8012ebc <iprintf>
  if (pcr->original != NULL) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	695b      	ldr	r3, [r3, #20]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d004      	beq.n	8012488 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	695b      	ldr	r3, [r3, #20]
 8012482:	4618      	mov	r0, r3
 8012484:	f7f7 fcd6 	bl	8009e34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012488:	68f8      	ldr	r0, [r7, #12]
 801248a:	f7ff ffbd 	bl	8012408 <ip_frag_free_pbuf_custom_ref>
}
 801248e:	bf00      	nop
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	080165dc 	.word	0x080165dc
 801249c:	080167a0 	.word	0x080167a0
 80124a0:	08016624 	.word	0x08016624
 80124a4:	080167ac 	.word	0x080167ac

080124a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b094      	sub	sp, #80	; 0x50
 80124ac:	af02      	add	r7, sp, #8
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80124b4:	2300      	movs	r3, #0
 80124b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80124be:	3b14      	subs	r3, #20
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	da00      	bge.n	80124c6 <ip4_frag+0x1e>
 80124c4:	3307      	adds	r3, #7
 80124c6:	10db      	asrs	r3, r3, #3
 80124c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80124ca:	2314      	movs	r3, #20
 80124cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80124d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80124d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	f003 030f 	and.w	r3, r3, #15
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	009b      	lsls	r3, r3, #2
 80124e4:	b2db      	uxtb	r3, r3
 80124e6:	2b14      	cmp	r3, #20
 80124e8:	d002      	beq.n	80124f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80124ea:	f06f 0305 	mvn.w	r3, #5
 80124ee:	e110      	b.n	8012712 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	895b      	ldrh	r3, [r3, #10]
 80124f4:	2b13      	cmp	r3, #19
 80124f6:	d809      	bhi.n	801250c <ip4_frag+0x64>
 80124f8:	4b88      	ldr	r3, [pc, #544]	; (801271c <ip4_frag+0x274>)
 80124fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80124fe:	4988      	ldr	r1, [pc, #544]	; (8012720 <ip4_frag+0x278>)
 8012500:	4888      	ldr	r0, [pc, #544]	; (8012724 <ip4_frag+0x27c>)
 8012502:	f000 fcdb 	bl	8012ebc <iprintf>
 8012506:	f06f 0305 	mvn.w	r3, #5
 801250a:	e102      	b.n	8012712 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801250e:	88db      	ldrh	r3, [r3, #6]
 8012510:	b29b      	uxth	r3, r3
 8012512:	4618      	mov	r0, r3
 8012514:	f7f5 ffd4 	bl	80084c0 <lwip_htons>
 8012518:	4603      	mov	r3, r0
 801251a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801251c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801251e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012522:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012526:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801252c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	891b      	ldrh	r3, [r3, #8]
 8012532:	3b14      	subs	r3, #20
 8012534:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012538:	e0e1      	b.n	80126fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801253a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801253c:	00db      	lsls	r3, r3, #3
 801253e:	b29b      	uxth	r3, r3
 8012540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012544:	4293      	cmp	r3, r2
 8012546:	bf28      	it	cs
 8012548:	4613      	movcs	r3, r2
 801254a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801254c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012550:	2114      	movs	r1, #20
 8012552:	200e      	movs	r0, #14
 8012554:	f7f7 f98a 	bl	800986c <pbuf_alloc>
 8012558:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801255c:	2b00      	cmp	r3, #0
 801255e:	f000 80d5 	beq.w	801270c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012564:	895b      	ldrh	r3, [r3, #10]
 8012566:	2b13      	cmp	r3, #19
 8012568:	d806      	bhi.n	8012578 <ip4_frag+0xd0>
 801256a:	4b6c      	ldr	r3, [pc, #432]	; (801271c <ip4_frag+0x274>)
 801256c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012570:	496d      	ldr	r1, [pc, #436]	; (8012728 <ip4_frag+0x280>)
 8012572:	486c      	ldr	r0, [pc, #432]	; (8012724 <ip4_frag+0x27c>)
 8012574:	f000 fca2 	bl	8012ebc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	2214      	movs	r2, #20
 801257e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012580:	4618      	mov	r0, r3
 8012582:	f000 fbf0 	bl	8012d66 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801258c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801258e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012592:	e064      	b.n	801265e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	895a      	ldrh	r2, [r3, #10]
 8012598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801259a:	1ad3      	subs	r3, r2, r3
 801259c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	895b      	ldrh	r3, [r3, #10]
 80125a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d906      	bls.n	80125b6 <ip4_frag+0x10e>
 80125a8:	4b5c      	ldr	r3, [pc, #368]	; (801271c <ip4_frag+0x274>)
 80125aa:	f240 322d 	movw	r2, #813	; 0x32d
 80125ae:	495f      	ldr	r1, [pc, #380]	; (801272c <ip4_frag+0x284>)
 80125b0:	485c      	ldr	r0, [pc, #368]	; (8012724 <ip4_frag+0x27c>)
 80125b2:	f000 fc83 	bl	8012ebc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80125b6:	8bfa      	ldrh	r2, [r7, #30]
 80125b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80125bc:	4293      	cmp	r3, r2
 80125be:	bf28      	it	cs
 80125c0:	4613      	movcs	r3, r2
 80125c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80125c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d105      	bne.n	80125da <ip4_frag+0x132>
        poff = 0;
 80125ce:	2300      	movs	r3, #0
 80125d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	60fb      	str	r3, [r7, #12]
        continue;
 80125d8:	e041      	b.n	801265e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80125da:	f7ff ff0d 	bl	80123f8 <ip_frag_alloc_pbuf_custom_ref>
 80125de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80125e0:	69bb      	ldr	r3, [r7, #24]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d103      	bne.n	80125ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80125e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125e8:	f7f7 fc24 	bl	8009e34 <pbuf_free>
        goto memerr;
 80125ec:	e08f      	b.n	801270e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80125ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80125f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80125f6:	4413      	add	r3, r2
 80125f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80125fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012600:	9201      	str	r2, [sp, #4]
 8012602:	9300      	str	r3, [sp, #0]
 8012604:	4603      	mov	r3, r0
 8012606:	2241      	movs	r2, #65	; 0x41
 8012608:	2000      	movs	r0, #0
 801260a:	f7f7 fa59 	bl	8009ac0 <pbuf_alloced_custom>
 801260e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d106      	bne.n	8012624 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012616:	69b8      	ldr	r0, [r7, #24]
 8012618:	f7ff fef6 	bl	8012408 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801261c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801261e:	f7f7 fc09 	bl	8009e34 <pbuf_free>
        goto memerr;
 8012622:	e074      	b.n	801270e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012624:	68f8      	ldr	r0, [r7, #12]
 8012626:	f7f7 fcab 	bl	8009f80 <pbuf_ref>
      pcr->original = p;
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	4a3f      	ldr	r2, [pc, #252]	; (8012730 <ip4_frag+0x288>)
 8012634:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012636:	6979      	ldr	r1, [r7, #20]
 8012638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801263a:	f7f7 fcc9 	bl	8009fd0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801263e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012642:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012646:	1ad3      	subs	r3, r2, r3
 8012648:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801264c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012650:	2b00      	cmp	r3, #0
 8012652:	d004      	beq.n	801265e <ip4_frag+0x1b6>
        poff = 0;
 8012654:	2300      	movs	r3, #0
 8012656:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801265e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012662:	2b00      	cmp	r3, #0
 8012664:	d196      	bne.n	8012594 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012666:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012668:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801266c:	4413      	add	r3, r2
 801266e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012674:	f1a3 0213 	sub.w	r2, r3, #19
 8012678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801267c:	429a      	cmp	r2, r3
 801267e:	bfcc      	ite	gt
 8012680:	2301      	movgt	r3, #1
 8012682:	2300      	movle	r3, #0
 8012684:	b2db      	uxtb	r3, r3
 8012686:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801268c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012690:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012692:	6a3b      	ldr	r3, [r7, #32]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <ip4_frag+0x1f6>
 8012698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269a:	2b00      	cmp	r3, #0
 801269c:	d003      	beq.n	80126a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801269e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80126a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80126a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7f5 ff09 	bl	80084c0 <lwip_htons>
 80126ae:	4603      	mov	r3, r0
 80126b0:	461a      	mov	r2, r3
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80126b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126b8:	3314      	adds	r3, #20
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	4618      	mov	r0, r3
 80126be:	f7f5 feff 	bl	80084c0 <lwip_htons>
 80126c2:	4603      	mov	r3, r0
 80126c4:	461a      	mov	r2, r3
 80126c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80126ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126cc:	2200      	movs	r2, #0
 80126ce:	729a      	strb	r2, [r3, #10]
 80126d0:	2200      	movs	r2, #0
 80126d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	695b      	ldr	r3, [r3, #20]
 80126d8:	687a      	ldr	r2, [r7, #4]
 80126da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126dc:	68b8      	ldr	r0, [r7, #8]
 80126de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80126e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80126e2:	f7f7 fba7 	bl	8009e34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80126e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80126ec:	1ad3      	subs	r3, r2, r3
 80126ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80126f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80126f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126f8:	4413      	add	r3, r2
 80126fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80126fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012702:	2b00      	cmp	r3, #0
 8012704:	f47f af19 	bne.w	801253a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012708:	2300      	movs	r3, #0
 801270a:	e002      	b.n	8012712 <ip4_frag+0x26a>
      goto memerr;
 801270c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801270e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012712:	4618      	mov	r0, r3
 8012714:	3748      	adds	r7, #72	; 0x48
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	080165dc 	.word	0x080165dc
 8012720:	080167b8 	.word	0x080167b8
 8012724:	08016624 	.word	0x08016624
 8012728:	080167d4 	.word	0x080167d4
 801272c:	080167f4 	.word	0x080167f4
 8012730:	08012441 	.word	0x08012441

08012734 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b086      	sub	sp, #24
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801273e:	230e      	movs	r3, #14
 8012740:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	895b      	ldrh	r3, [r3, #10]
 8012746:	2b0e      	cmp	r3, #14
 8012748:	d96e      	bls.n	8012828 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	7bdb      	ldrb	r3, [r3, #15]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d106      	bne.n	8012760 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012758:	3301      	adds	r3, #1
 801275a:	b2da      	uxtb	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	7b1a      	ldrb	r2, [r3, #12]
 801276a:	7b5b      	ldrb	r3, [r3, #13]
 801276c:	021b      	lsls	r3, r3, #8
 801276e:	4313      	orrs	r3, r2
 8012770:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	f003 0301 	and.w	r3, r3, #1
 801277a:	2b00      	cmp	r3, #0
 801277c:	d023      	beq.n	80127c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2b01      	cmp	r3, #1
 8012784:	d10f      	bne.n	80127a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	785b      	ldrb	r3, [r3, #1]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d11b      	bne.n	80127c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012792:	2b5e      	cmp	r3, #94	; 0x5e
 8012794:	d117      	bne.n	80127c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	7b5b      	ldrb	r3, [r3, #13]
 801279a:	f043 0310 	orr.w	r3, r3, #16
 801279e:	b2da      	uxtb	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	735a      	strb	r2, [r3, #13]
 80127a4:	e00f      	b.n	80127c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	2206      	movs	r2, #6
 80127aa:	4928      	ldr	r1, [pc, #160]	; (801284c <ethernet_input+0x118>)
 80127ac:	4618      	mov	r0, r3
 80127ae:	f000 faca 	bl	8012d46 <memcmp>
 80127b2:	4603      	mov	r3, r0
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d106      	bne.n	80127c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	7b5b      	ldrb	r3, [r3, #13]
 80127bc:	f043 0308 	orr.w	r3, r3, #8
 80127c0:	b2da      	uxtb	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80127c6:	89fb      	ldrh	r3, [r7, #14]
 80127c8:	2b08      	cmp	r3, #8
 80127ca:	d003      	beq.n	80127d4 <ethernet_input+0xa0>
 80127cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80127d0:	d014      	beq.n	80127fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80127d2:	e032      	b.n	801283a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127da:	f003 0308 	and.w	r3, r3, #8
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d024      	beq.n	801282c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80127e2:	8afb      	ldrh	r3, [r7, #22]
 80127e4:	4619      	mov	r1, r3
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f7f7 fa9e 	bl	8009d28 <pbuf_remove_header>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d11e      	bne.n	8012830 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80127f2:	6839      	ldr	r1, [r7, #0]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7fe ff21 	bl	801163c <ip4_input>
      break;
 80127fa:	e013      	b.n	8012824 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012802:	f003 0308 	and.w	r3, r3, #8
 8012806:	2b00      	cmp	r3, #0
 8012808:	d014      	beq.n	8012834 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801280a:	8afb      	ldrh	r3, [r7, #22]
 801280c:	4619      	mov	r1, r3
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7f7 fa8a 	bl	8009d28 <pbuf_remove_header>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10e      	bne.n	8012838 <ethernet_input+0x104>
        etharp_input(p, netif);
 801281a:	6839      	ldr	r1, [r7, #0]
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7fe f89b 	bl	8010958 <etharp_input>
      break;
 8012822:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012824:	2300      	movs	r3, #0
 8012826:	e00c      	b.n	8012842 <ethernet_input+0x10e>
    goto free_and_return;
 8012828:	bf00      	nop
 801282a:	e006      	b.n	801283a <ethernet_input+0x106>
        goto free_and_return;
 801282c:	bf00      	nop
 801282e:	e004      	b.n	801283a <ethernet_input+0x106>
        goto free_and_return;
 8012830:	bf00      	nop
 8012832:	e002      	b.n	801283a <ethernet_input+0x106>
        goto free_and_return;
 8012834:	bf00      	nop
 8012836:	e000      	b.n	801283a <ethernet_input+0x106>
        goto free_and_return;
 8012838:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7f7 fafa 	bl	8009e34 <pbuf_free>
  return ERR_OK;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3718      	adds	r7, #24
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	080169c8 	.word	0x080169c8

08012850 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
 801285c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801285e:	8c3b      	ldrh	r3, [r7, #32]
 8012860:	4618      	mov	r0, r3
 8012862:	f7f5 fe2d 	bl	80084c0 <lwip_htons>
 8012866:	4603      	mov	r3, r0
 8012868:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801286a:	210e      	movs	r1, #14
 801286c:	68b8      	ldr	r0, [r7, #8]
 801286e:	f7f7 fa4b 	bl	8009d08 <pbuf_add_header>
 8012872:	4603      	mov	r3, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	d125      	bne.n	80128c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	8afa      	ldrh	r2, [r7, #22]
 8012882:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	2206      	movs	r2, #6
 8012888:	6839      	ldr	r1, [r7, #0]
 801288a:	4618      	mov	r0, r3
 801288c:	f000 fa6b 	bl	8012d66 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	3306      	adds	r3, #6
 8012894:	2206      	movs	r2, #6
 8012896:	6879      	ldr	r1, [r7, #4]
 8012898:	4618      	mov	r0, r3
 801289a:	f000 fa64 	bl	8012d66 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128a4:	2b06      	cmp	r3, #6
 80128a6:	d006      	beq.n	80128b6 <ethernet_output+0x66>
 80128a8:	4b0a      	ldr	r3, [pc, #40]	; (80128d4 <ethernet_output+0x84>)
 80128aa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80128ae:	490a      	ldr	r1, [pc, #40]	; (80128d8 <ethernet_output+0x88>)
 80128b0:	480a      	ldr	r0, [pc, #40]	; (80128dc <ethernet_output+0x8c>)
 80128b2:	f000 fb03 	bl	8012ebc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	699b      	ldr	r3, [r3, #24]
 80128ba:	68b9      	ldr	r1, [r7, #8]
 80128bc:	68f8      	ldr	r0, [r7, #12]
 80128be:	4798      	blx	r3
 80128c0:	4603      	mov	r3, r0
 80128c2:	e002      	b.n	80128ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80128c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80128c6:	f06f 0301 	mvn.w	r3, #1
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3718      	adds	r7, #24
 80128ce:	46bd      	mov	sp, r7
 80128d0:	bd80      	pop	{r7, pc}
 80128d2:	bf00      	nop
 80128d4:	08016804 	.word	0x08016804
 80128d8:	0801683c 	.word	0x0801683c
 80128dc:	08016870 	.word	0x08016870

080128e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b086      	sub	sp, #24
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	60bb      	str	r3, [r7, #8]
 80128ee:	2304      	movs	r3, #4
 80128f0:	60fb      	str	r3, [r7, #12]
 80128f2:	2300      	movs	r3, #0
 80128f4:	613b      	str	r3, [r7, #16]
 80128f6:	2300      	movs	r3, #0
 80128f8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80128fa:	f107 0308 	add.w	r3, r7, #8
 80128fe:	2100      	movs	r1, #0
 8012900:	4618      	mov	r0, r3
 8012902:	f7f2 fefd 	bl	8005700 <osMessageCreate>
 8012906:	4602      	mov	r2, r0
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d102      	bne.n	801291a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012918:	e000      	b.n	801291c <sys_mbox_new+0x3c>

  return ERR_OK;
 801291a:	2300      	movs	r3, #0
}
 801291c:	4618      	mov	r0, r3
 801291e:	3718      	adds	r7, #24
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	6839      	ldr	r1, [r7, #0]
 8012934:	2200      	movs	r2, #0
 8012936:	4618      	mov	r0, r3
 8012938:	f7f2 ff0a 	bl	8005750 <osMessagePut>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d102      	bne.n	8012948 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012942:	2300      	movs	r3, #0
 8012944:	73fb      	strb	r3, [r7, #15]
 8012946:	e001      	b.n	801294c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012948:	23ff      	movs	r3, #255	; 0xff
 801294a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801294c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3710      	adds	r7, #16
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}

08012958 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b08c      	sub	sp, #48	; 0x30
 801295c:	af00      	add	r7, sp, #0
 801295e:	61f8      	str	r0, [r7, #28]
 8012960:	61b9      	str	r1, [r7, #24]
 8012962:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012964:	f7f2 fd3c 	bl	80053e0 <osKernelSysTick>
 8012968:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d017      	beq.n	80129a0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012970:	69fb      	ldr	r3, [r7, #28]
 8012972:	6819      	ldr	r1, [r3, #0]
 8012974:	f107 0320 	add.w	r3, r7, #32
 8012978:	697a      	ldr	r2, [r7, #20]
 801297a:	4618      	mov	r0, r3
 801297c:	f7f2 ff28 	bl	80057d0 <osMessageGet>

    if(event.status == osEventMessage)
 8012980:	6a3b      	ldr	r3, [r7, #32]
 8012982:	2b10      	cmp	r3, #16
 8012984:	d109      	bne.n	801299a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	461a      	mov	r2, r3
 801298a:	69bb      	ldr	r3, [r7, #24]
 801298c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801298e:	f7f2 fd27 	bl	80053e0 <osKernelSysTick>
 8012992:	4602      	mov	r2, r0
 8012994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012996:	1ad3      	subs	r3, r2, r3
 8012998:	e019      	b.n	80129ce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801299e:	e016      	b.n	80129ce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80129a0:	69fb      	ldr	r3, [r7, #28]
 80129a2:	6819      	ldr	r1, [r3, #0]
 80129a4:	463b      	mov	r3, r7
 80129a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7f2 ff10 	bl	80057d0 <osMessageGet>
 80129b0:	f107 0320 	add.w	r3, r7, #32
 80129b4:	463a      	mov	r2, r7
 80129b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80129b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80129bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129be:	461a      	mov	r2, r3
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80129c4:	f7f2 fd0c 	bl	80053e0 <osKernelSysTick>
 80129c8:	4602      	mov	r2, r0
 80129ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129cc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3730      	adds	r7, #48	; 0x30
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80129d6:	b480      	push	{r7}
 80129d8:	b083      	sub	sp, #12
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d101      	bne.n	80129ea <sys_mbox_valid+0x14>
    return 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	e000      	b.n	80129ec <sys_mbox_valid+0x16>
  else
    return 1;
 80129ea:	2301      	movs	r3, #1
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	370c      	adds	r7, #12
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80129fc:	4803      	ldr	r0, [pc, #12]	; (8012a0c <sys_init+0x14>)
 80129fe:	f7f2 fd5f 	bl	80054c0 <osMutexCreate>
 8012a02:	4603      	mov	r3, r0
 8012a04:	4a02      	ldr	r2, [pc, #8]	; (8012a10 <sys_init+0x18>)
 8012a06:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012a08:	bf00      	nop
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	080169d8 	.word	0x080169d8
 8012a10:	2400be68 	.word	0x2400be68

08012a14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b084      	sub	sp, #16
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	60bb      	str	r3, [r7, #8]
 8012a20:	2300      	movs	r3, #0
 8012a22:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012a24:	f107 0308 	add.w	r3, r7, #8
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7f2 fd49 	bl	80054c0 <osMutexCreate>
 8012a2e:	4602      	mov	r2, r0
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d102      	bne.n	8012a42 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a40:	e000      	b.n	8012a44 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012a42:	2300      	movs	r3, #0
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b082      	sub	sp, #8
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7f2 fd47 	bl	80054f0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012a62:	bf00      	nop
 8012a64:	3708      	adds	r7, #8
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b082      	sub	sp, #8
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f2 fd88 	bl	800558c <osMutexRelease>
}
 8012a7c:	bf00      	nop
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}

08012a84 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b08c      	sub	sp, #48	; 0x30
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	60f8      	str	r0, [r7, #12]
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
 8012a90:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012a92:	f107 0314 	add.w	r3, r7, #20
 8012a96:	2200      	movs	r2, #0
 8012a98:	601a      	str	r2, [r3, #0]
 8012a9a:	605a      	str	r2, [r3, #4]
 8012a9c:	609a      	str	r2, [r3, #8]
 8012a9e:	60da      	str	r2, [r3, #12]
 8012aa0:	611a      	str	r2, [r3, #16]
 8012aa2:	615a      	str	r2, [r3, #20]
 8012aa4:	619a      	str	r2, [r3, #24]
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	617b      	str	r3, [r7, #20]
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	61bb      	str	r3, [r7, #24]
 8012aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab0:	b21b      	sxth	r3, r3
 8012ab2:	83bb      	strh	r3, [r7, #28]
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012ab8:	f107 0314 	add.w	r3, r7, #20
 8012abc:	6879      	ldr	r1, [r7, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7f2 fc9e 	bl	8005400 <osThreadCreate>
 8012ac4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3730      	adds	r7, #48	; 0x30
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
	...

08012ad0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012ad4:	4b04      	ldr	r3, [pc, #16]	; (8012ae8 <sys_arch_protect+0x18>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7f2 fd07 	bl	80054f0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012ae2:	2301      	movs	r3, #1
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	2400be68 	.word	0x2400be68

08012aec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b082      	sub	sp, #8
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012af4:	4b04      	ldr	r3, [pc, #16]	; (8012b08 <sys_arch_unprotect+0x1c>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7f2 fd47 	bl	800558c <osMutexRelease>
}
 8012afe:	bf00      	nop
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	bf00      	nop
 8012b08:	2400be68 	.word	0x2400be68

08012b0c <std>:
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	b510      	push	{r4, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	e9c0 3300 	strd	r3, r3, [r0]
 8012b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b1a:	6083      	str	r3, [r0, #8]
 8012b1c:	8181      	strh	r1, [r0, #12]
 8012b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8012b20:	81c2      	strh	r2, [r0, #14]
 8012b22:	6183      	str	r3, [r0, #24]
 8012b24:	4619      	mov	r1, r3
 8012b26:	2208      	movs	r2, #8
 8012b28:	305c      	adds	r0, #92	; 0x5c
 8012b2a:	f000 f92a 	bl	8012d82 <memset>
 8012b2e:	4b05      	ldr	r3, [pc, #20]	; (8012b44 <std+0x38>)
 8012b30:	6263      	str	r3, [r4, #36]	; 0x24
 8012b32:	4b05      	ldr	r3, [pc, #20]	; (8012b48 <std+0x3c>)
 8012b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b36:	4b05      	ldr	r3, [pc, #20]	; (8012b4c <std+0x40>)
 8012b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b3a:	4b05      	ldr	r3, [pc, #20]	; (8012b50 <std+0x44>)
 8012b3c:	6224      	str	r4, [r4, #32]
 8012b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8012b40:	bd10      	pop	{r4, pc}
 8012b42:	bf00      	nop
 8012b44:	0801305d 	.word	0x0801305d
 8012b48:	0801307f 	.word	0x0801307f
 8012b4c:	080130b7 	.word	0x080130b7
 8012b50:	080130db 	.word	0x080130db

08012b54 <_cleanup_r>:
 8012b54:	4901      	ldr	r1, [pc, #4]	; (8012b5c <_cleanup_r+0x8>)
 8012b56:	f000 b8af 	b.w	8012cb8 <_fwalk_reent>
 8012b5a:	bf00      	nop
 8012b5c:	08013271 	.word	0x08013271

08012b60 <__sfmoreglue>:
 8012b60:	b570      	push	{r4, r5, r6, lr}
 8012b62:	2268      	movs	r2, #104	; 0x68
 8012b64:	1e4d      	subs	r5, r1, #1
 8012b66:	4355      	muls	r5, r2
 8012b68:	460e      	mov	r6, r1
 8012b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b6e:	f000 f931 	bl	8012dd4 <_malloc_r>
 8012b72:	4604      	mov	r4, r0
 8012b74:	b140      	cbz	r0, 8012b88 <__sfmoreglue+0x28>
 8012b76:	2100      	movs	r1, #0
 8012b78:	e9c0 1600 	strd	r1, r6, [r0]
 8012b7c:	300c      	adds	r0, #12
 8012b7e:	60a0      	str	r0, [r4, #8]
 8012b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012b84:	f000 f8fd 	bl	8012d82 <memset>
 8012b88:	4620      	mov	r0, r4
 8012b8a:	bd70      	pop	{r4, r5, r6, pc}

08012b8c <__sfp_lock_acquire>:
 8012b8c:	4801      	ldr	r0, [pc, #4]	; (8012b94 <__sfp_lock_acquire+0x8>)
 8012b8e:	f000 b8d8 	b.w	8012d42 <__retarget_lock_acquire_recursive>
 8012b92:	bf00      	nop
 8012b94:	2400be6d 	.word	0x2400be6d

08012b98 <__sfp_lock_release>:
 8012b98:	4801      	ldr	r0, [pc, #4]	; (8012ba0 <__sfp_lock_release+0x8>)
 8012b9a:	f000 b8d3 	b.w	8012d44 <__retarget_lock_release_recursive>
 8012b9e:	bf00      	nop
 8012ba0:	2400be6d 	.word	0x2400be6d

08012ba4 <__sinit_lock_acquire>:
 8012ba4:	4801      	ldr	r0, [pc, #4]	; (8012bac <__sinit_lock_acquire+0x8>)
 8012ba6:	f000 b8cc 	b.w	8012d42 <__retarget_lock_acquire_recursive>
 8012baa:	bf00      	nop
 8012bac:	2400be6e 	.word	0x2400be6e

08012bb0 <__sinit_lock_release>:
 8012bb0:	4801      	ldr	r0, [pc, #4]	; (8012bb8 <__sinit_lock_release+0x8>)
 8012bb2:	f000 b8c7 	b.w	8012d44 <__retarget_lock_release_recursive>
 8012bb6:	bf00      	nop
 8012bb8:	2400be6e 	.word	0x2400be6e

08012bbc <__sinit>:
 8012bbc:	b510      	push	{r4, lr}
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	f7ff fff0 	bl	8012ba4 <__sinit_lock_acquire>
 8012bc4:	69a3      	ldr	r3, [r4, #24]
 8012bc6:	b11b      	cbz	r3, 8012bd0 <__sinit+0x14>
 8012bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bcc:	f7ff bff0 	b.w	8012bb0 <__sinit_lock_release>
 8012bd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012bd4:	6523      	str	r3, [r4, #80]	; 0x50
 8012bd6:	4b13      	ldr	r3, [pc, #76]	; (8012c24 <__sinit+0x68>)
 8012bd8:	4a13      	ldr	r2, [pc, #76]	; (8012c28 <__sinit+0x6c>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	62a2      	str	r2, [r4, #40]	; 0x28
 8012bde:	42a3      	cmp	r3, r4
 8012be0:	bf04      	itt	eq
 8012be2:	2301      	moveq	r3, #1
 8012be4:	61a3      	streq	r3, [r4, #24]
 8012be6:	4620      	mov	r0, r4
 8012be8:	f000 f820 	bl	8012c2c <__sfp>
 8012bec:	6060      	str	r0, [r4, #4]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	f000 f81c 	bl	8012c2c <__sfp>
 8012bf4:	60a0      	str	r0, [r4, #8]
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	f000 f818 	bl	8012c2c <__sfp>
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	60e0      	str	r0, [r4, #12]
 8012c00:	2104      	movs	r1, #4
 8012c02:	6860      	ldr	r0, [r4, #4]
 8012c04:	f7ff ff82 	bl	8012b0c <std>
 8012c08:	68a0      	ldr	r0, [r4, #8]
 8012c0a:	2201      	movs	r2, #1
 8012c0c:	2109      	movs	r1, #9
 8012c0e:	f7ff ff7d 	bl	8012b0c <std>
 8012c12:	68e0      	ldr	r0, [r4, #12]
 8012c14:	2202      	movs	r2, #2
 8012c16:	2112      	movs	r1, #18
 8012c18:	f7ff ff78 	bl	8012b0c <std>
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	61a3      	str	r3, [r4, #24]
 8012c20:	e7d2      	b.n	8012bc8 <__sinit+0xc>
 8012c22:	bf00      	nop
 8012c24:	08016a40 	.word	0x08016a40
 8012c28:	08012b55 	.word	0x08012b55

08012c2c <__sfp>:
 8012c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2e:	4607      	mov	r7, r0
 8012c30:	f7ff ffac 	bl	8012b8c <__sfp_lock_acquire>
 8012c34:	4b1e      	ldr	r3, [pc, #120]	; (8012cb0 <__sfp+0x84>)
 8012c36:	681e      	ldr	r6, [r3, #0]
 8012c38:	69b3      	ldr	r3, [r6, #24]
 8012c3a:	b913      	cbnz	r3, 8012c42 <__sfp+0x16>
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	f7ff ffbd 	bl	8012bbc <__sinit>
 8012c42:	3648      	adds	r6, #72	; 0x48
 8012c44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c48:	3b01      	subs	r3, #1
 8012c4a:	d503      	bpl.n	8012c54 <__sfp+0x28>
 8012c4c:	6833      	ldr	r3, [r6, #0]
 8012c4e:	b30b      	cbz	r3, 8012c94 <__sfp+0x68>
 8012c50:	6836      	ldr	r6, [r6, #0]
 8012c52:	e7f7      	b.n	8012c44 <__sfp+0x18>
 8012c54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c58:	b9d5      	cbnz	r5, 8012c90 <__sfp+0x64>
 8012c5a:	4b16      	ldr	r3, [pc, #88]	; (8012cb4 <__sfp+0x88>)
 8012c5c:	60e3      	str	r3, [r4, #12]
 8012c5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c62:	6665      	str	r5, [r4, #100]	; 0x64
 8012c64:	f000 f86c 	bl	8012d40 <__retarget_lock_init_recursive>
 8012c68:	f7ff ff96 	bl	8012b98 <__sfp_lock_release>
 8012c6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c74:	6025      	str	r5, [r4, #0]
 8012c76:	61a5      	str	r5, [r4, #24]
 8012c78:	2208      	movs	r2, #8
 8012c7a:	4629      	mov	r1, r5
 8012c7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012c80:	f000 f87f 	bl	8012d82 <memset>
 8012c84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012c88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c90:	3468      	adds	r4, #104	; 0x68
 8012c92:	e7d9      	b.n	8012c48 <__sfp+0x1c>
 8012c94:	2104      	movs	r1, #4
 8012c96:	4638      	mov	r0, r7
 8012c98:	f7ff ff62 	bl	8012b60 <__sfmoreglue>
 8012c9c:	4604      	mov	r4, r0
 8012c9e:	6030      	str	r0, [r6, #0]
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	d1d5      	bne.n	8012c50 <__sfp+0x24>
 8012ca4:	f7ff ff78 	bl	8012b98 <__sfp_lock_release>
 8012ca8:	230c      	movs	r3, #12
 8012caa:	603b      	str	r3, [r7, #0]
 8012cac:	e7ee      	b.n	8012c8c <__sfp+0x60>
 8012cae:	bf00      	nop
 8012cb0:	08016a40 	.word	0x08016a40
 8012cb4:	ffff0001 	.word	0xffff0001

08012cb8 <_fwalk_reent>:
 8012cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cbc:	4606      	mov	r6, r0
 8012cbe:	4688      	mov	r8, r1
 8012cc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012cc4:	2700      	movs	r7, #0
 8012cc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012cca:	f1b9 0901 	subs.w	r9, r9, #1
 8012cce:	d505      	bpl.n	8012cdc <_fwalk_reent+0x24>
 8012cd0:	6824      	ldr	r4, [r4, #0]
 8012cd2:	2c00      	cmp	r4, #0
 8012cd4:	d1f7      	bne.n	8012cc6 <_fwalk_reent+0xe>
 8012cd6:	4638      	mov	r0, r7
 8012cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cdc:	89ab      	ldrh	r3, [r5, #12]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d907      	bls.n	8012cf2 <_fwalk_reent+0x3a>
 8012ce2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	d003      	beq.n	8012cf2 <_fwalk_reent+0x3a>
 8012cea:	4629      	mov	r1, r5
 8012cec:	4630      	mov	r0, r6
 8012cee:	47c0      	blx	r8
 8012cf0:	4307      	orrs	r7, r0
 8012cf2:	3568      	adds	r5, #104	; 0x68
 8012cf4:	e7e9      	b.n	8012cca <_fwalk_reent+0x12>
	...

08012cf8 <__libc_init_array>:
 8012cf8:	b570      	push	{r4, r5, r6, lr}
 8012cfa:	4d0d      	ldr	r5, [pc, #52]	; (8012d30 <__libc_init_array+0x38>)
 8012cfc:	4c0d      	ldr	r4, [pc, #52]	; (8012d34 <__libc_init_array+0x3c>)
 8012cfe:	1b64      	subs	r4, r4, r5
 8012d00:	10a4      	asrs	r4, r4, #2
 8012d02:	2600      	movs	r6, #0
 8012d04:	42a6      	cmp	r6, r4
 8012d06:	d109      	bne.n	8012d1c <__libc_init_array+0x24>
 8012d08:	4d0b      	ldr	r5, [pc, #44]	; (8012d38 <__libc_init_array+0x40>)
 8012d0a:	4c0c      	ldr	r4, [pc, #48]	; (8012d3c <__libc_init_array+0x44>)
 8012d0c:	f001 f802 	bl	8013d14 <_init>
 8012d10:	1b64      	subs	r4, r4, r5
 8012d12:	10a4      	asrs	r4, r4, #2
 8012d14:	2600      	movs	r6, #0
 8012d16:	42a6      	cmp	r6, r4
 8012d18:	d105      	bne.n	8012d26 <__libc_init_array+0x2e>
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}
 8012d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d20:	4798      	blx	r3
 8012d22:	3601      	adds	r6, #1
 8012d24:	e7ee      	b.n	8012d04 <__libc_init_array+0xc>
 8012d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d2a:	4798      	blx	r3
 8012d2c:	3601      	adds	r6, #1
 8012d2e:	e7f2      	b.n	8012d16 <__libc_init_array+0x1e>
 8012d30:	08016b28 	.word	0x08016b28
 8012d34:	08016b28 	.word	0x08016b28
 8012d38:	08016b28 	.word	0x08016b28
 8012d3c:	08016b2c 	.word	0x08016b2c

08012d40 <__retarget_lock_init_recursive>:
 8012d40:	4770      	bx	lr

08012d42 <__retarget_lock_acquire_recursive>:
 8012d42:	4770      	bx	lr

08012d44 <__retarget_lock_release_recursive>:
 8012d44:	4770      	bx	lr

08012d46 <memcmp>:
 8012d46:	b510      	push	{r4, lr}
 8012d48:	3901      	subs	r1, #1
 8012d4a:	4402      	add	r2, r0
 8012d4c:	4290      	cmp	r0, r2
 8012d4e:	d101      	bne.n	8012d54 <memcmp+0xe>
 8012d50:	2000      	movs	r0, #0
 8012d52:	e005      	b.n	8012d60 <memcmp+0x1a>
 8012d54:	7803      	ldrb	r3, [r0, #0]
 8012d56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012d5a:	42a3      	cmp	r3, r4
 8012d5c:	d001      	beq.n	8012d62 <memcmp+0x1c>
 8012d5e:	1b18      	subs	r0, r3, r4
 8012d60:	bd10      	pop	{r4, pc}
 8012d62:	3001      	adds	r0, #1
 8012d64:	e7f2      	b.n	8012d4c <memcmp+0x6>

08012d66 <memcpy>:
 8012d66:	440a      	add	r2, r1
 8012d68:	4291      	cmp	r1, r2
 8012d6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012d6e:	d100      	bne.n	8012d72 <memcpy+0xc>
 8012d70:	4770      	bx	lr
 8012d72:	b510      	push	{r4, lr}
 8012d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d7c:	4291      	cmp	r1, r2
 8012d7e:	d1f9      	bne.n	8012d74 <memcpy+0xe>
 8012d80:	bd10      	pop	{r4, pc}

08012d82 <memset>:
 8012d82:	4402      	add	r2, r0
 8012d84:	4603      	mov	r3, r0
 8012d86:	4293      	cmp	r3, r2
 8012d88:	d100      	bne.n	8012d8c <memset+0xa>
 8012d8a:	4770      	bx	lr
 8012d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8012d90:	e7f9      	b.n	8012d86 <memset+0x4>
	...

08012d94 <sbrk_aligned>:
 8012d94:	b570      	push	{r4, r5, r6, lr}
 8012d96:	4e0e      	ldr	r6, [pc, #56]	; (8012dd0 <sbrk_aligned+0x3c>)
 8012d98:	460c      	mov	r4, r1
 8012d9a:	6831      	ldr	r1, [r6, #0]
 8012d9c:	4605      	mov	r5, r0
 8012d9e:	b911      	cbnz	r1, 8012da6 <sbrk_aligned+0x12>
 8012da0:	f000 f94c 	bl	801303c <_sbrk_r>
 8012da4:	6030      	str	r0, [r6, #0]
 8012da6:	4621      	mov	r1, r4
 8012da8:	4628      	mov	r0, r5
 8012daa:	f000 f947 	bl	801303c <_sbrk_r>
 8012dae:	1c43      	adds	r3, r0, #1
 8012db0:	d00a      	beq.n	8012dc8 <sbrk_aligned+0x34>
 8012db2:	1cc4      	adds	r4, r0, #3
 8012db4:	f024 0403 	bic.w	r4, r4, #3
 8012db8:	42a0      	cmp	r0, r4
 8012dba:	d007      	beq.n	8012dcc <sbrk_aligned+0x38>
 8012dbc:	1a21      	subs	r1, r4, r0
 8012dbe:	4628      	mov	r0, r5
 8012dc0:	f000 f93c 	bl	801303c <_sbrk_r>
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	d101      	bne.n	8012dcc <sbrk_aligned+0x38>
 8012dc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012dcc:	4620      	mov	r0, r4
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	2400be74 	.word	0x2400be74

08012dd4 <_malloc_r>:
 8012dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd8:	1ccd      	adds	r5, r1, #3
 8012dda:	f025 0503 	bic.w	r5, r5, #3
 8012dde:	3508      	adds	r5, #8
 8012de0:	2d0c      	cmp	r5, #12
 8012de2:	bf38      	it	cc
 8012de4:	250c      	movcc	r5, #12
 8012de6:	2d00      	cmp	r5, #0
 8012de8:	4607      	mov	r7, r0
 8012dea:	db01      	blt.n	8012df0 <_malloc_r+0x1c>
 8012dec:	42a9      	cmp	r1, r5
 8012dee:	d905      	bls.n	8012dfc <_malloc_r+0x28>
 8012df0:	230c      	movs	r3, #12
 8012df2:	603b      	str	r3, [r7, #0]
 8012df4:	2600      	movs	r6, #0
 8012df6:	4630      	mov	r0, r6
 8012df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dfc:	4e2e      	ldr	r6, [pc, #184]	; (8012eb8 <_malloc_r+0xe4>)
 8012dfe:	f000 fa9f 	bl	8013340 <__malloc_lock>
 8012e02:	6833      	ldr	r3, [r6, #0]
 8012e04:	461c      	mov	r4, r3
 8012e06:	bb34      	cbnz	r4, 8012e56 <_malloc_r+0x82>
 8012e08:	4629      	mov	r1, r5
 8012e0a:	4638      	mov	r0, r7
 8012e0c:	f7ff ffc2 	bl	8012d94 <sbrk_aligned>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	4604      	mov	r4, r0
 8012e14:	d14d      	bne.n	8012eb2 <_malloc_r+0xde>
 8012e16:	6834      	ldr	r4, [r6, #0]
 8012e18:	4626      	mov	r6, r4
 8012e1a:	2e00      	cmp	r6, #0
 8012e1c:	d140      	bne.n	8012ea0 <_malloc_r+0xcc>
 8012e1e:	6823      	ldr	r3, [r4, #0]
 8012e20:	4631      	mov	r1, r6
 8012e22:	4638      	mov	r0, r7
 8012e24:	eb04 0803 	add.w	r8, r4, r3
 8012e28:	f000 f908 	bl	801303c <_sbrk_r>
 8012e2c:	4580      	cmp	r8, r0
 8012e2e:	d13a      	bne.n	8012ea6 <_malloc_r+0xd2>
 8012e30:	6821      	ldr	r1, [r4, #0]
 8012e32:	3503      	adds	r5, #3
 8012e34:	1a6d      	subs	r5, r5, r1
 8012e36:	f025 0503 	bic.w	r5, r5, #3
 8012e3a:	3508      	adds	r5, #8
 8012e3c:	2d0c      	cmp	r5, #12
 8012e3e:	bf38      	it	cc
 8012e40:	250c      	movcc	r5, #12
 8012e42:	4629      	mov	r1, r5
 8012e44:	4638      	mov	r0, r7
 8012e46:	f7ff ffa5 	bl	8012d94 <sbrk_aligned>
 8012e4a:	3001      	adds	r0, #1
 8012e4c:	d02b      	beq.n	8012ea6 <_malloc_r+0xd2>
 8012e4e:	6823      	ldr	r3, [r4, #0]
 8012e50:	442b      	add	r3, r5
 8012e52:	6023      	str	r3, [r4, #0]
 8012e54:	e00e      	b.n	8012e74 <_malloc_r+0xa0>
 8012e56:	6822      	ldr	r2, [r4, #0]
 8012e58:	1b52      	subs	r2, r2, r5
 8012e5a:	d41e      	bmi.n	8012e9a <_malloc_r+0xc6>
 8012e5c:	2a0b      	cmp	r2, #11
 8012e5e:	d916      	bls.n	8012e8e <_malloc_r+0xba>
 8012e60:	1961      	adds	r1, r4, r5
 8012e62:	42a3      	cmp	r3, r4
 8012e64:	6025      	str	r5, [r4, #0]
 8012e66:	bf18      	it	ne
 8012e68:	6059      	strne	r1, [r3, #4]
 8012e6a:	6863      	ldr	r3, [r4, #4]
 8012e6c:	bf08      	it	eq
 8012e6e:	6031      	streq	r1, [r6, #0]
 8012e70:	5162      	str	r2, [r4, r5]
 8012e72:	604b      	str	r3, [r1, #4]
 8012e74:	4638      	mov	r0, r7
 8012e76:	f104 060b 	add.w	r6, r4, #11
 8012e7a:	f000 fa67 	bl	801334c <__malloc_unlock>
 8012e7e:	f026 0607 	bic.w	r6, r6, #7
 8012e82:	1d23      	adds	r3, r4, #4
 8012e84:	1af2      	subs	r2, r6, r3
 8012e86:	d0b6      	beq.n	8012df6 <_malloc_r+0x22>
 8012e88:	1b9b      	subs	r3, r3, r6
 8012e8a:	50a3      	str	r3, [r4, r2]
 8012e8c:	e7b3      	b.n	8012df6 <_malloc_r+0x22>
 8012e8e:	6862      	ldr	r2, [r4, #4]
 8012e90:	42a3      	cmp	r3, r4
 8012e92:	bf0c      	ite	eq
 8012e94:	6032      	streq	r2, [r6, #0]
 8012e96:	605a      	strne	r2, [r3, #4]
 8012e98:	e7ec      	b.n	8012e74 <_malloc_r+0xa0>
 8012e9a:	4623      	mov	r3, r4
 8012e9c:	6864      	ldr	r4, [r4, #4]
 8012e9e:	e7b2      	b.n	8012e06 <_malloc_r+0x32>
 8012ea0:	4634      	mov	r4, r6
 8012ea2:	6876      	ldr	r6, [r6, #4]
 8012ea4:	e7b9      	b.n	8012e1a <_malloc_r+0x46>
 8012ea6:	230c      	movs	r3, #12
 8012ea8:	603b      	str	r3, [r7, #0]
 8012eaa:	4638      	mov	r0, r7
 8012eac:	f000 fa4e 	bl	801334c <__malloc_unlock>
 8012eb0:	e7a1      	b.n	8012df6 <_malloc_r+0x22>
 8012eb2:	6025      	str	r5, [r4, #0]
 8012eb4:	e7de      	b.n	8012e74 <_malloc_r+0xa0>
 8012eb6:	bf00      	nop
 8012eb8:	2400be70 	.word	0x2400be70

08012ebc <iprintf>:
 8012ebc:	b40f      	push	{r0, r1, r2, r3}
 8012ebe:	4b0a      	ldr	r3, [pc, #40]	; (8012ee8 <iprintf+0x2c>)
 8012ec0:	b513      	push	{r0, r1, r4, lr}
 8012ec2:	681c      	ldr	r4, [r3, #0]
 8012ec4:	b124      	cbz	r4, 8012ed0 <iprintf+0x14>
 8012ec6:	69a3      	ldr	r3, [r4, #24]
 8012ec8:	b913      	cbnz	r3, 8012ed0 <iprintf+0x14>
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f7ff fe76 	bl	8012bbc <__sinit>
 8012ed0:	ab05      	add	r3, sp, #20
 8012ed2:	9a04      	ldr	r2, [sp, #16]
 8012ed4:	68a1      	ldr	r1, [r4, #8]
 8012ed6:	9301      	str	r3, [sp, #4]
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f000 fab3 	bl	8013444 <_vfiprintf_r>
 8012ede:	b002      	add	sp, #8
 8012ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ee4:	b004      	add	sp, #16
 8012ee6:	4770      	bx	lr
 8012ee8:	24000034 	.word	0x24000034

08012eec <rand>:
 8012eec:	4b16      	ldr	r3, [pc, #88]	; (8012f48 <rand+0x5c>)
 8012eee:	b510      	push	{r4, lr}
 8012ef0:	681c      	ldr	r4, [r3, #0]
 8012ef2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012ef4:	b9b3      	cbnz	r3, 8012f24 <rand+0x38>
 8012ef6:	2018      	movs	r0, #24
 8012ef8:	f000 fa1a 	bl	8013330 <malloc>
 8012efc:	63a0      	str	r0, [r4, #56]	; 0x38
 8012efe:	b928      	cbnz	r0, 8012f0c <rand+0x20>
 8012f00:	4602      	mov	r2, r0
 8012f02:	4b12      	ldr	r3, [pc, #72]	; (8012f4c <rand+0x60>)
 8012f04:	4812      	ldr	r0, [pc, #72]	; (8012f50 <rand+0x64>)
 8012f06:	214e      	movs	r1, #78	; 0x4e
 8012f08:	f000 f8fe 	bl	8013108 <__assert_func>
 8012f0c:	4a11      	ldr	r2, [pc, #68]	; (8012f54 <rand+0x68>)
 8012f0e:	4b12      	ldr	r3, [pc, #72]	; (8012f58 <rand+0x6c>)
 8012f10:	e9c0 2300 	strd	r2, r3, [r0]
 8012f14:	4b11      	ldr	r3, [pc, #68]	; (8012f5c <rand+0x70>)
 8012f16:	6083      	str	r3, [r0, #8]
 8012f18:	230b      	movs	r3, #11
 8012f1a:	8183      	strh	r3, [r0, #12]
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	2300      	movs	r3, #0
 8012f20:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012f24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8012f26:	4a0e      	ldr	r2, [pc, #56]	; (8012f60 <rand+0x74>)
 8012f28:	6920      	ldr	r0, [r4, #16]
 8012f2a:	6963      	ldr	r3, [r4, #20]
 8012f2c:	490d      	ldr	r1, [pc, #52]	; (8012f64 <rand+0x78>)
 8012f2e:	4342      	muls	r2, r0
 8012f30:	fb01 2203 	mla	r2, r1, r3, r2
 8012f34:	fba0 0101 	umull	r0, r1, r0, r1
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	eb42 0001 	adc.w	r0, r2, r1
 8012f3e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8012f42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012f46:	bd10      	pop	{r4, pc}
 8012f48:	24000034 	.word	0x24000034
 8012f4c:	08016a44 	.word	0x08016a44
 8012f50:	08016a5b 	.word	0x08016a5b
 8012f54:	abcd330e 	.word	0xabcd330e
 8012f58:	e66d1234 	.word	0xe66d1234
 8012f5c:	0005deec 	.word	0x0005deec
 8012f60:	5851f42d 	.word	0x5851f42d
 8012f64:	4c957f2d 	.word	0x4c957f2d

08012f68 <cleanup_glue>:
 8012f68:	b538      	push	{r3, r4, r5, lr}
 8012f6a:	460c      	mov	r4, r1
 8012f6c:	6809      	ldr	r1, [r1, #0]
 8012f6e:	4605      	mov	r5, r0
 8012f70:	b109      	cbz	r1, 8012f76 <cleanup_glue+0xe>
 8012f72:	f7ff fff9 	bl	8012f68 <cleanup_glue>
 8012f76:	4621      	mov	r1, r4
 8012f78:	4628      	mov	r0, r5
 8012f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f7e:	f000 b9eb 	b.w	8013358 <_free_r>
	...

08012f84 <_reclaim_reent>:
 8012f84:	4b2c      	ldr	r3, [pc, #176]	; (8013038 <_reclaim_reent+0xb4>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4283      	cmp	r3, r0
 8012f8a:	b570      	push	{r4, r5, r6, lr}
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	d051      	beq.n	8013034 <_reclaim_reent+0xb0>
 8012f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012f92:	b143      	cbz	r3, 8012fa6 <_reclaim_reent+0x22>
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d14a      	bne.n	8013030 <_reclaim_reent+0xac>
 8012f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f9c:	6819      	ldr	r1, [r3, #0]
 8012f9e:	b111      	cbz	r1, 8012fa6 <_reclaim_reent+0x22>
 8012fa0:	4620      	mov	r0, r4
 8012fa2:	f000 f9d9 	bl	8013358 <_free_r>
 8012fa6:	6961      	ldr	r1, [r4, #20]
 8012fa8:	b111      	cbz	r1, 8012fb0 <_reclaim_reent+0x2c>
 8012faa:	4620      	mov	r0, r4
 8012fac:	f000 f9d4 	bl	8013358 <_free_r>
 8012fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012fb2:	b111      	cbz	r1, 8012fba <_reclaim_reent+0x36>
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f000 f9cf 	bl	8013358 <_free_r>
 8012fba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012fbc:	b111      	cbz	r1, 8012fc4 <_reclaim_reent+0x40>
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f000 f9ca 	bl	8013358 <_free_r>
 8012fc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012fc6:	b111      	cbz	r1, 8012fce <_reclaim_reent+0x4a>
 8012fc8:	4620      	mov	r0, r4
 8012fca:	f000 f9c5 	bl	8013358 <_free_r>
 8012fce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012fd0:	b111      	cbz	r1, 8012fd8 <_reclaim_reent+0x54>
 8012fd2:	4620      	mov	r0, r4
 8012fd4:	f000 f9c0 	bl	8013358 <_free_r>
 8012fd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012fda:	b111      	cbz	r1, 8012fe2 <_reclaim_reent+0x5e>
 8012fdc:	4620      	mov	r0, r4
 8012fde:	f000 f9bb 	bl	8013358 <_free_r>
 8012fe2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012fe4:	b111      	cbz	r1, 8012fec <_reclaim_reent+0x68>
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	f000 f9b6 	bl	8013358 <_free_r>
 8012fec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fee:	b111      	cbz	r1, 8012ff6 <_reclaim_reent+0x72>
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f000 f9b1 	bl	8013358 <_free_r>
 8012ff6:	69a3      	ldr	r3, [r4, #24]
 8012ff8:	b1e3      	cbz	r3, 8013034 <_reclaim_reent+0xb0>
 8012ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	4798      	blx	r3
 8013000:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013002:	b1b9      	cbz	r1, 8013034 <_reclaim_reent+0xb0>
 8013004:	4620      	mov	r0, r4
 8013006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801300a:	f7ff bfad 	b.w	8012f68 <cleanup_glue>
 801300e:	5949      	ldr	r1, [r1, r5]
 8013010:	b941      	cbnz	r1, 8013024 <_reclaim_reent+0xa0>
 8013012:	3504      	adds	r5, #4
 8013014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013016:	2d80      	cmp	r5, #128	; 0x80
 8013018:	68d9      	ldr	r1, [r3, #12]
 801301a:	d1f8      	bne.n	801300e <_reclaim_reent+0x8a>
 801301c:	4620      	mov	r0, r4
 801301e:	f000 f99b 	bl	8013358 <_free_r>
 8013022:	e7ba      	b.n	8012f9a <_reclaim_reent+0x16>
 8013024:	680e      	ldr	r6, [r1, #0]
 8013026:	4620      	mov	r0, r4
 8013028:	f000 f996 	bl	8013358 <_free_r>
 801302c:	4631      	mov	r1, r6
 801302e:	e7ef      	b.n	8013010 <_reclaim_reent+0x8c>
 8013030:	2500      	movs	r5, #0
 8013032:	e7ef      	b.n	8013014 <_reclaim_reent+0x90>
 8013034:	bd70      	pop	{r4, r5, r6, pc}
 8013036:	bf00      	nop
 8013038:	24000034 	.word	0x24000034

0801303c <_sbrk_r>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	4d06      	ldr	r5, [pc, #24]	; (8013058 <_sbrk_r+0x1c>)
 8013040:	2300      	movs	r3, #0
 8013042:	4604      	mov	r4, r0
 8013044:	4608      	mov	r0, r1
 8013046:	602b      	str	r3, [r5, #0]
 8013048:	f7ed fcdc 	bl	8000a04 <_sbrk>
 801304c:	1c43      	adds	r3, r0, #1
 801304e:	d102      	bne.n	8013056 <_sbrk_r+0x1a>
 8013050:	682b      	ldr	r3, [r5, #0]
 8013052:	b103      	cbz	r3, 8013056 <_sbrk_r+0x1a>
 8013054:	6023      	str	r3, [r4, #0]
 8013056:	bd38      	pop	{r3, r4, r5, pc}
 8013058:	2400be78 	.word	0x2400be78

0801305c <__sread>:
 801305c:	b510      	push	{r4, lr}
 801305e:	460c      	mov	r4, r1
 8013060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013064:	f000 fcb2 	bl	80139cc <_read_r>
 8013068:	2800      	cmp	r0, #0
 801306a:	bfab      	itete	ge
 801306c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801306e:	89a3      	ldrhlt	r3, [r4, #12]
 8013070:	181b      	addge	r3, r3, r0
 8013072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013076:	bfac      	ite	ge
 8013078:	6563      	strge	r3, [r4, #84]	; 0x54
 801307a:	81a3      	strhlt	r3, [r4, #12]
 801307c:	bd10      	pop	{r4, pc}

0801307e <__swrite>:
 801307e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013082:	461f      	mov	r7, r3
 8013084:	898b      	ldrh	r3, [r1, #12]
 8013086:	05db      	lsls	r3, r3, #23
 8013088:	4605      	mov	r5, r0
 801308a:	460c      	mov	r4, r1
 801308c:	4616      	mov	r6, r2
 801308e:	d505      	bpl.n	801309c <__swrite+0x1e>
 8013090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013094:	2302      	movs	r3, #2
 8013096:	2200      	movs	r2, #0
 8013098:	f000 f938 	bl	801330c <_lseek_r>
 801309c:	89a3      	ldrh	r3, [r4, #12]
 801309e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80130a6:	81a3      	strh	r3, [r4, #12]
 80130a8:	4632      	mov	r2, r6
 80130aa:	463b      	mov	r3, r7
 80130ac:	4628      	mov	r0, r5
 80130ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130b2:	f000 b817 	b.w	80130e4 <_write_r>

080130b6 <__sseek>:
 80130b6:	b510      	push	{r4, lr}
 80130b8:	460c      	mov	r4, r1
 80130ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130be:	f000 f925 	bl	801330c <_lseek_r>
 80130c2:	1c43      	adds	r3, r0, #1
 80130c4:	89a3      	ldrh	r3, [r4, #12]
 80130c6:	bf15      	itete	ne
 80130c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80130ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80130ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80130d2:	81a3      	strheq	r3, [r4, #12]
 80130d4:	bf18      	it	ne
 80130d6:	81a3      	strhne	r3, [r4, #12]
 80130d8:	bd10      	pop	{r4, pc}

080130da <__sclose>:
 80130da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130de:	f000 b831 	b.w	8013144 <_close_r>
	...

080130e4 <_write_r>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	4d07      	ldr	r5, [pc, #28]	; (8013104 <_write_r+0x20>)
 80130e8:	4604      	mov	r4, r0
 80130ea:	4608      	mov	r0, r1
 80130ec:	4611      	mov	r1, r2
 80130ee:	2200      	movs	r2, #0
 80130f0:	602a      	str	r2, [r5, #0]
 80130f2:	461a      	mov	r2, r3
 80130f4:	f7ed fc35 	bl	8000962 <_write>
 80130f8:	1c43      	adds	r3, r0, #1
 80130fa:	d102      	bne.n	8013102 <_write_r+0x1e>
 80130fc:	682b      	ldr	r3, [r5, #0]
 80130fe:	b103      	cbz	r3, 8013102 <_write_r+0x1e>
 8013100:	6023      	str	r3, [r4, #0]
 8013102:	bd38      	pop	{r3, r4, r5, pc}
 8013104:	2400be78 	.word	0x2400be78

08013108 <__assert_func>:
 8013108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801310a:	4614      	mov	r4, r2
 801310c:	461a      	mov	r2, r3
 801310e:	4b09      	ldr	r3, [pc, #36]	; (8013134 <__assert_func+0x2c>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4605      	mov	r5, r0
 8013114:	68d8      	ldr	r0, [r3, #12]
 8013116:	b14c      	cbz	r4, 801312c <__assert_func+0x24>
 8013118:	4b07      	ldr	r3, [pc, #28]	; (8013138 <__assert_func+0x30>)
 801311a:	9100      	str	r1, [sp, #0]
 801311c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013120:	4906      	ldr	r1, [pc, #24]	; (801313c <__assert_func+0x34>)
 8013122:	462b      	mov	r3, r5
 8013124:	f000 f8e0 	bl	80132e8 <fiprintf>
 8013128:	f000 fd22 	bl	8013b70 <abort>
 801312c:	4b04      	ldr	r3, [pc, #16]	; (8013140 <__assert_func+0x38>)
 801312e:	461c      	mov	r4, r3
 8013130:	e7f3      	b.n	801311a <__assert_func+0x12>
 8013132:	bf00      	nop
 8013134:	24000034 	.word	0x24000034
 8013138:	08016ab6 	.word	0x08016ab6
 801313c:	08016ac3 	.word	0x08016ac3
 8013140:	08016af1 	.word	0x08016af1

08013144 <_close_r>:
 8013144:	b538      	push	{r3, r4, r5, lr}
 8013146:	4d06      	ldr	r5, [pc, #24]	; (8013160 <_close_r+0x1c>)
 8013148:	2300      	movs	r3, #0
 801314a:	4604      	mov	r4, r0
 801314c:	4608      	mov	r0, r1
 801314e:	602b      	str	r3, [r5, #0]
 8013150:	f7ed fc23 	bl	800099a <_close>
 8013154:	1c43      	adds	r3, r0, #1
 8013156:	d102      	bne.n	801315e <_close_r+0x1a>
 8013158:	682b      	ldr	r3, [r5, #0]
 801315a:	b103      	cbz	r3, 801315e <_close_r+0x1a>
 801315c:	6023      	str	r3, [r4, #0]
 801315e:	bd38      	pop	{r3, r4, r5, pc}
 8013160:	2400be78 	.word	0x2400be78

08013164 <__sflush_r>:
 8013164:	898a      	ldrh	r2, [r1, #12]
 8013166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801316a:	4605      	mov	r5, r0
 801316c:	0710      	lsls	r0, r2, #28
 801316e:	460c      	mov	r4, r1
 8013170:	d458      	bmi.n	8013224 <__sflush_r+0xc0>
 8013172:	684b      	ldr	r3, [r1, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	dc05      	bgt.n	8013184 <__sflush_r+0x20>
 8013178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801317a:	2b00      	cmp	r3, #0
 801317c:	dc02      	bgt.n	8013184 <__sflush_r+0x20>
 801317e:	2000      	movs	r0, #0
 8013180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013186:	2e00      	cmp	r6, #0
 8013188:	d0f9      	beq.n	801317e <__sflush_r+0x1a>
 801318a:	2300      	movs	r3, #0
 801318c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013190:	682f      	ldr	r7, [r5, #0]
 8013192:	602b      	str	r3, [r5, #0]
 8013194:	d032      	beq.n	80131fc <__sflush_r+0x98>
 8013196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013198:	89a3      	ldrh	r3, [r4, #12]
 801319a:	075a      	lsls	r2, r3, #29
 801319c:	d505      	bpl.n	80131aa <__sflush_r+0x46>
 801319e:	6863      	ldr	r3, [r4, #4]
 80131a0:	1ac0      	subs	r0, r0, r3
 80131a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131a4:	b10b      	cbz	r3, 80131aa <__sflush_r+0x46>
 80131a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131a8:	1ac0      	subs	r0, r0, r3
 80131aa:	2300      	movs	r3, #0
 80131ac:	4602      	mov	r2, r0
 80131ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131b0:	6a21      	ldr	r1, [r4, #32]
 80131b2:	4628      	mov	r0, r5
 80131b4:	47b0      	blx	r6
 80131b6:	1c43      	adds	r3, r0, #1
 80131b8:	89a3      	ldrh	r3, [r4, #12]
 80131ba:	d106      	bne.n	80131ca <__sflush_r+0x66>
 80131bc:	6829      	ldr	r1, [r5, #0]
 80131be:	291d      	cmp	r1, #29
 80131c0:	d82c      	bhi.n	801321c <__sflush_r+0xb8>
 80131c2:	4a2a      	ldr	r2, [pc, #168]	; (801326c <__sflush_r+0x108>)
 80131c4:	40ca      	lsrs	r2, r1
 80131c6:	07d6      	lsls	r6, r2, #31
 80131c8:	d528      	bpl.n	801321c <__sflush_r+0xb8>
 80131ca:	2200      	movs	r2, #0
 80131cc:	6062      	str	r2, [r4, #4]
 80131ce:	04d9      	lsls	r1, r3, #19
 80131d0:	6922      	ldr	r2, [r4, #16]
 80131d2:	6022      	str	r2, [r4, #0]
 80131d4:	d504      	bpl.n	80131e0 <__sflush_r+0x7c>
 80131d6:	1c42      	adds	r2, r0, #1
 80131d8:	d101      	bne.n	80131de <__sflush_r+0x7a>
 80131da:	682b      	ldr	r3, [r5, #0]
 80131dc:	b903      	cbnz	r3, 80131e0 <__sflush_r+0x7c>
 80131de:	6560      	str	r0, [r4, #84]	; 0x54
 80131e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131e2:	602f      	str	r7, [r5, #0]
 80131e4:	2900      	cmp	r1, #0
 80131e6:	d0ca      	beq.n	801317e <__sflush_r+0x1a>
 80131e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131ec:	4299      	cmp	r1, r3
 80131ee:	d002      	beq.n	80131f6 <__sflush_r+0x92>
 80131f0:	4628      	mov	r0, r5
 80131f2:	f000 f8b1 	bl	8013358 <_free_r>
 80131f6:	2000      	movs	r0, #0
 80131f8:	6360      	str	r0, [r4, #52]	; 0x34
 80131fa:	e7c1      	b.n	8013180 <__sflush_r+0x1c>
 80131fc:	6a21      	ldr	r1, [r4, #32]
 80131fe:	2301      	movs	r3, #1
 8013200:	4628      	mov	r0, r5
 8013202:	47b0      	blx	r6
 8013204:	1c41      	adds	r1, r0, #1
 8013206:	d1c7      	bne.n	8013198 <__sflush_r+0x34>
 8013208:	682b      	ldr	r3, [r5, #0]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d0c4      	beq.n	8013198 <__sflush_r+0x34>
 801320e:	2b1d      	cmp	r3, #29
 8013210:	d001      	beq.n	8013216 <__sflush_r+0xb2>
 8013212:	2b16      	cmp	r3, #22
 8013214:	d101      	bne.n	801321a <__sflush_r+0xb6>
 8013216:	602f      	str	r7, [r5, #0]
 8013218:	e7b1      	b.n	801317e <__sflush_r+0x1a>
 801321a:	89a3      	ldrh	r3, [r4, #12]
 801321c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013220:	81a3      	strh	r3, [r4, #12]
 8013222:	e7ad      	b.n	8013180 <__sflush_r+0x1c>
 8013224:	690f      	ldr	r7, [r1, #16]
 8013226:	2f00      	cmp	r7, #0
 8013228:	d0a9      	beq.n	801317e <__sflush_r+0x1a>
 801322a:	0793      	lsls	r3, r2, #30
 801322c:	680e      	ldr	r6, [r1, #0]
 801322e:	bf08      	it	eq
 8013230:	694b      	ldreq	r3, [r1, #20]
 8013232:	600f      	str	r7, [r1, #0]
 8013234:	bf18      	it	ne
 8013236:	2300      	movne	r3, #0
 8013238:	eba6 0807 	sub.w	r8, r6, r7
 801323c:	608b      	str	r3, [r1, #8]
 801323e:	f1b8 0f00 	cmp.w	r8, #0
 8013242:	dd9c      	ble.n	801317e <__sflush_r+0x1a>
 8013244:	6a21      	ldr	r1, [r4, #32]
 8013246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013248:	4643      	mov	r3, r8
 801324a:	463a      	mov	r2, r7
 801324c:	4628      	mov	r0, r5
 801324e:	47b0      	blx	r6
 8013250:	2800      	cmp	r0, #0
 8013252:	dc06      	bgt.n	8013262 <__sflush_r+0xfe>
 8013254:	89a3      	ldrh	r3, [r4, #12]
 8013256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801325a:	81a3      	strh	r3, [r4, #12]
 801325c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013260:	e78e      	b.n	8013180 <__sflush_r+0x1c>
 8013262:	4407      	add	r7, r0
 8013264:	eba8 0800 	sub.w	r8, r8, r0
 8013268:	e7e9      	b.n	801323e <__sflush_r+0xda>
 801326a:	bf00      	nop
 801326c:	20400001 	.word	0x20400001

08013270 <_fflush_r>:
 8013270:	b538      	push	{r3, r4, r5, lr}
 8013272:	690b      	ldr	r3, [r1, #16]
 8013274:	4605      	mov	r5, r0
 8013276:	460c      	mov	r4, r1
 8013278:	b913      	cbnz	r3, 8013280 <_fflush_r+0x10>
 801327a:	2500      	movs	r5, #0
 801327c:	4628      	mov	r0, r5
 801327e:	bd38      	pop	{r3, r4, r5, pc}
 8013280:	b118      	cbz	r0, 801328a <_fflush_r+0x1a>
 8013282:	6983      	ldr	r3, [r0, #24]
 8013284:	b90b      	cbnz	r3, 801328a <_fflush_r+0x1a>
 8013286:	f7ff fc99 	bl	8012bbc <__sinit>
 801328a:	4b14      	ldr	r3, [pc, #80]	; (80132dc <_fflush_r+0x6c>)
 801328c:	429c      	cmp	r4, r3
 801328e:	d11b      	bne.n	80132c8 <_fflush_r+0x58>
 8013290:	686c      	ldr	r4, [r5, #4]
 8013292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d0ef      	beq.n	801327a <_fflush_r+0xa>
 801329a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801329c:	07d0      	lsls	r0, r2, #31
 801329e:	d404      	bmi.n	80132aa <_fflush_r+0x3a>
 80132a0:	0599      	lsls	r1, r3, #22
 80132a2:	d402      	bmi.n	80132aa <_fflush_r+0x3a>
 80132a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132a6:	f7ff fd4c 	bl	8012d42 <__retarget_lock_acquire_recursive>
 80132aa:	4628      	mov	r0, r5
 80132ac:	4621      	mov	r1, r4
 80132ae:	f7ff ff59 	bl	8013164 <__sflush_r>
 80132b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132b4:	07da      	lsls	r2, r3, #31
 80132b6:	4605      	mov	r5, r0
 80132b8:	d4e0      	bmi.n	801327c <_fflush_r+0xc>
 80132ba:	89a3      	ldrh	r3, [r4, #12]
 80132bc:	059b      	lsls	r3, r3, #22
 80132be:	d4dd      	bmi.n	801327c <_fflush_r+0xc>
 80132c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132c2:	f7ff fd3f 	bl	8012d44 <__retarget_lock_release_recursive>
 80132c6:	e7d9      	b.n	801327c <_fflush_r+0xc>
 80132c8:	4b05      	ldr	r3, [pc, #20]	; (80132e0 <_fflush_r+0x70>)
 80132ca:	429c      	cmp	r4, r3
 80132cc:	d101      	bne.n	80132d2 <_fflush_r+0x62>
 80132ce:	68ac      	ldr	r4, [r5, #8]
 80132d0:	e7df      	b.n	8013292 <_fflush_r+0x22>
 80132d2:	4b04      	ldr	r3, [pc, #16]	; (80132e4 <_fflush_r+0x74>)
 80132d4:	429c      	cmp	r4, r3
 80132d6:	bf08      	it	eq
 80132d8:	68ec      	ldreq	r4, [r5, #12]
 80132da:	e7da      	b.n	8013292 <_fflush_r+0x22>
 80132dc:	08016a00 	.word	0x08016a00
 80132e0:	08016a20 	.word	0x08016a20
 80132e4:	080169e0 	.word	0x080169e0

080132e8 <fiprintf>:
 80132e8:	b40e      	push	{r1, r2, r3}
 80132ea:	b503      	push	{r0, r1, lr}
 80132ec:	4601      	mov	r1, r0
 80132ee:	ab03      	add	r3, sp, #12
 80132f0:	4805      	ldr	r0, [pc, #20]	; (8013308 <fiprintf+0x20>)
 80132f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80132f6:	6800      	ldr	r0, [r0, #0]
 80132f8:	9301      	str	r3, [sp, #4]
 80132fa:	f000 f8a3 	bl	8013444 <_vfiprintf_r>
 80132fe:	b002      	add	sp, #8
 8013300:	f85d eb04 	ldr.w	lr, [sp], #4
 8013304:	b003      	add	sp, #12
 8013306:	4770      	bx	lr
 8013308:	24000034 	.word	0x24000034

0801330c <_lseek_r>:
 801330c:	b538      	push	{r3, r4, r5, lr}
 801330e:	4d07      	ldr	r5, [pc, #28]	; (801332c <_lseek_r+0x20>)
 8013310:	4604      	mov	r4, r0
 8013312:	4608      	mov	r0, r1
 8013314:	4611      	mov	r1, r2
 8013316:	2200      	movs	r2, #0
 8013318:	602a      	str	r2, [r5, #0]
 801331a:	461a      	mov	r2, r3
 801331c:	f7ed fb64 	bl	80009e8 <_lseek>
 8013320:	1c43      	adds	r3, r0, #1
 8013322:	d102      	bne.n	801332a <_lseek_r+0x1e>
 8013324:	682b      	ldr	r3, [r5, #0]
 8013326:	b103      	cbz	r3, 801332a <_lseek_r+0x1e>
 8013328:	6023      	str	r3, [r4, #0]
 801332a:	bd38      	pop	{r3, r4, r5, pc}
 801332c:	2400be78 	.word	0x2400be78

08013330 <malloc>:
 8013330:	4b02      	ldr	r3, [pc, #8]	; (801333c <malloc+0xc>)
 8013332:	4601      	mov	r1, r0
 8013334:	6818      	ldr	r0, [r3, #0]
 8013336:	f7ff bd4d 	b.w	8012dd4 <_malloc_r>
 801333a:	bf00      	nop
 801333c:	24000034 	.word	0x24000034

08013340 <__malloc_lock>:
 8013340:	4801      	ldr	r0, [pc, #4]	; (8013348 <__malloc_lock+0x8>)
 8013342:	f7ff bcfe 	b.w	8012d42 <__retarget_lock_acquire_recursive>
 8013346:	bf00      	nop
 8013348:	2400be6c 	.word	0x2400be6c

0801334c <__malloc_unlock>:
 801334c:	4801      	ldr	r0, [pc, #4]	; (8013354 <__malloc_unlock+0x8>)
 801334e:	f7ff bcf9 	b.w	8012d44 <__retarget_lock_release_recursive>
 8013352:	bf00      	nop
 8013354:	2400be6c 	.word	0x2400be6c

08013358 <_free_r>:
 8013358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801335a:	2900      	cmp	r1, #0
 801335c:	d044      	beq.n	80133e8 <_free_r+0x90>
 801335e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013362:	9001      	str	r0, [sp, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	f1a1 0404 	sub.w	r4, r1, #4
 801336a:	bfb8      	it	lt
 801336c:	18e4      	addlt	r4, r4, r3
 801336e:	f7ff ffe7 	bl	8013340 <__malloc_lock>
 8013372:	4a1e      	ldr	r2, [pc, #120]	; (80133ec <_free_r+0x94>)
 8013374:	9801      	ldr	r0, [sp, #4]
 8013376:	6813      	ldr	r3, [r2, #0]
 8013378:	b933      	cbnz	r3, 8013388 <_free_r+0x30>
 801337a:	6063      	str	r3, [r4, #4]
 801337c:	6014      	str	r4, [r2, #0]
 801337e:	b003      	add	sp, #12
 8013380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013384:	f7ff bfe2 	b.w	801334c <__malloc_unlock>
 8013388:	42a3      	cmp	r3, r4
 801338a:	d908      	bls.n	801339e <_free_r+0x46>
 801338c:	6825      	ldr	r5, [r4, #0]
 801338e:	1961      	adds	r1, r4, r5
 8013390:	428b      	cmp	r3, r1
 8013392:	bf01      	itttt	eq
 8013394:	6819      	ldreq	r1, [r3, #0]
 8013396:	685b      	ldreq	r3, [r3, #4]
 8013398:	1949      	addeq	r1, r1, r5
 801339a:	6021      	streq	r1, [r4, #0]
 801339c:	e7ed      	b.n	801337a <_free_r+0x22>
 801339e:	461a      	mov	r2, r3
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	b10b      	cbz	r3, 80133a8 <_free_r+0x50>
 80133a4:	42a3      	cmp	r3, r4
 80133a6:	d9fa      	bls.n	801339e <_free_r+0x46>
 80133a8:	6811      	ldr	r1, [r2, #0]
 80133aa:	1855      	adds	r5, r2, r1
 80133ac:	42a5      	cmp	r5, r4
 80133ae:	d10b      	bne.n	80133c8 <_free_r+0x70>
 80133b0:	6824      	ldr	r4, [r4, #0]
 80133b2:	4421      	add	r1, r4
 80133b4:	1854      	adds	r4, r2, r1
 80133b6:	42a3      	cmp	r3, r4
 80133b8:	6011      	str	r1, [r2, #0]
 80133ba:	d1e0      	bne.n	801337e <_free_r+0x26>
 80133bc:	681c      	ldr	r4, [r3, #0]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	6053      	str	r3, [r2, #4]
 80133c2:	4421      	add	r1, r4
 80133c4:	6011      	str	r1, [r2, #0]
 80133c6:	e7da      	b.n	801337e <_free_r+0x26>
 80133c8:	d902      	bls.n	80133d0 <_free_r+0x78>
 80133ca:	230c      	movs	r3, #12
 80133cc:	6003      	str	r3, [r0, #0]
 80133ce:	e7d6      	b.n	801337e <_free_r+0x26>
 80133d0:	6825      	ldr	r5, [r4, #0]
 80133d2:	1961      	adds	r1, r4, r5
 80133d4:	428b      	cmp	r3, r1
 80133d6:	bf04      	itt	eq
 80133d8:	6819      	ldreq	r1, [r3, #0]
 80133da:	685b      	ldreq	r3, [r3, #4]
 80133dc:	6063      	str	r3, [r4, #4]
 80133de:	bf04      	itt	eq
 80133e0:	1949      	addeq	r1, r1, r5
 80133e2:	6021      	streq	r1, [r4, #0]
 80133e4:	6054      	str	r4, [r2, #4]
 80133e6:	e7ca      	b.n	801337e <_free_r+0x26>
 80133e8:	b003      	add	sp, #12
 80133ea:	bd30      	pop	{r4, r5, pc}
 80133ec:	2400be70 	.word	0x2400be70

080133f0 <__sfputc_r>:
 80133f0:	6893      	ldr	r3, [r2, #8]
 80133f2:	3b01      	subs	r3, #1
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	b410      	push	{r4}
 80133f8:	6093      	str	r3, [r2, #8]
 80133fa:	da08      	bge.n	801340e <__sfputc_r+0x1e>
 80133fc:	6994      	ldr	r4, [r2, #24]
 80133fe:	42a3      	cmp	r3, r4
 8013400:	db01      	blt.n	8013406 <__sfputc_r+0x16>
 8013402:	290a      	cmp	r1, #10
 8013404:	d103      	bne.n	801340e <__sfputc_r+0x1e>
 8013406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801340a:	f000 baf1 	b.w	80139f0 <__swbuf_r>
 801340e:	6813      	ldr	r3, [r2, #0]
 8013410:	1c58      	adds	r0, r3, #1
 8013412:	6010      	str	r0, [r2, #0]
 8013414:	7019      	strb	r1, [r3, #0]
 8013416:	4608      	mov	r0, r1
 8013418:	f85d 4b04 	ldr.w	r4, [sp], #4
 801341c:	4770      	bx	lr

0801341e <__sfputs_r>:
 801341e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013420:	4606      	mov	r6, r0
 8013422:	460f      	mov	r7, r1
 8013424:	4614      	mov	r4, r2
 8013426:	18d5      	adds	r5, r2, r3
 8013428:	42ac      	cmp	r4, r5
 801342a:	d101      	bne.n	8013430 <__sfputs_r+0x12>
 801342c:	2000      	movs	r0, #0
 801342e:	e007      	b.n	8013440 <__sfputs_r+0x22>
 8013430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013434:	463a      	mov	r2, r7
 8013436:	4630      	mov	r0, r6
 8013438:	f7ff ffda 	bl	80133f0 <__sfputc_r>
 801343c:	1c43      	adds	r3, r0, #1
 801343e:	d1f3      	bne.n	8013428 <__sfputs_r+0xa>
 8013440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013444 <_vfiprintf_r>:
 8013444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013448:	460d      	mov	r5, r1
 801344a:	b09d      	sub	sp, #116	; 0x74
 801344c:	4614      	mov	r4, r2
 801344e:	4698      	mov	r8, r3
 8013450:	4606      	mov	r6, r0
 8013452:	b118      	cbz	r0, 801345c <_vfiprintf_r+0x18>
 8013454:	6983      	ldr	r3, [r0, #24]
 8013456:	b90b      	cbnz	r3, 801345c <_vfiprintf_r+0x18>
 8013458:	f7ff fbb0 	bl	8012bbc <__sinit>
 801345c:	4b89      	ldr	r3, [pc, #548]	; (8013684 <_vfiprintf_r+0x240>)
 801345e:	429d      	cmp	r5, r3
 8013460:	d11b      	bne.n	801349a <_vfiprintf_r+0x56>
 8013462:	6875      	ldr	r5, [r6, #4]
 8013464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013466:	07d9      	lsls	r1, r3, #31
 8013468:	d405      	bmi.n	8013476 <_vfiprintf_r+0x32>
 801346a:	89ab      	ldrh	r3, [r5, #12]
 801346c:	059a      	lsls	r2, r3, #22
 801346e:	d402      	bmi.n	8013476 <_vfiprintf_r+0x32>
 8013470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013472:	f7ff fc66 	bl	8012d42 <__retarget_lock_acquire_recursive>
 8013476:	89ab      	ldrh	r3, [r5, #12]
 8013478:	071b      	lsls	r3, r3, #28
 801347a:	d501      	bpl.n	8013480 <_vfiprintf_r+0x3c>
 801347c:	692b      	ldr	r3, [r5, #16]
 801347e:	b9eb      	cbnz	r3, 80134bc <_vfiprintf_r+0x78>
 8013480:	4629      	mov	r1, r5
 8013482:	4630      	mov	r0, r6
 8013484:	f000 fb06 	bl	8013a94 <__swsetup_r>
 8013488:	b1c0      	cbz	r0, 80134bc <_vfiprintf_r+0x78>
 801348a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801348c:	07dc      	lsls	r4, r3, #31
 801348e:	d50e      	bpl.n	80134ae <_vfiprintf_r+0x6a>
 8013490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013494:	b01d      	add	sp, #116	; 0x74
 8013496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801349a:	4b7b      	ldr	r3, [pc, #492]	; (8013688 <_vfiprintf_r+0x244>)
 801349c:	429d      	cmp	r5, r3
 801349e:	d101      	bne.n	80134a4 <_vfiprintf_r+0x60>
 80134a0:	68b5      	ldr	r5, [r6, #8]
 80134a2:	e7df      	b.n	8013464 <_vfiprintf_r+0x20>
 80134a4:	4b79      	ldr	r3, [pc, #484]	; (801368c <_vfiprintf_r+0x248>)
 80134a6:	429d      	cmp	r5, r3
 80134a8:	bf08      	it	eq
 80134aa:	68f5      	ldreq	r5, [r6, #12]
 80134ac:	e7da      	b.n	8013464 <_vfiprintf_r+0x20>
 80134ae:	89ab      	ldrh	r3, [r5, #12]
 80134b0:	0598      	lsls	r0, r3, #22
 80134b2:	d4ed      	bmi.n	8013490 <_vfiprintf_r+0x4c>
 80134b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134b6:	f7ff fc45 	bl	8012d44 <__retarget_lock_release_recursive>
 80134ba:	e7e9      	b.n	8013490 <_vfiprintf_r+0x4c>
 80134bc:	2300      	movs	r3, #0
 80134be:	9309      	str	r3, [sp, #36]	; 0x24
 80134c0:	2320      	movs	r3, #32
 80134c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ca:	2330      	movs	r3, #48	; 0x30
 80134cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013690 <_vfiprintf_r+0x24c>
 80134d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134d4:	f04f 0901 	mov.w	r9, #1
 80134d8:	4623      	mov	r3, r4
 80134da:	469a      	mov	sl, r3
 80134dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134e0:	b10a      	cbz	r2, 80134e6 <_vfiprintf_r+0xa2>
 80134e2:	2a25      	cmp	r2, #37	; 0x25
 80134e4:	d1f9      	bne.n	80134da <_vfiprintf_r+0x96>
 80134e6:	ebba 0b04 	subs.w	fp, sl, r4
 80134ea:	d00b      	beq.n	8013504 <_vfiprintf_r+0xc0>
 80134ec:	465b      	mov	r3, fp
 80134ee:	4622      	mov	r2, r4
 80134f0:	4629      	mov	r1, r5
 80134f2:	4630      	mov	r0, r6
 80134f4:	f7ff ff93 	bl	801341e <__sfputs_r>
 80134f8:	3001      	adds	r0, #1
 80134fa:	f000 80aa 	beq.w	8013652 <_vfiprintf_r+0x20e>
 80134fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013500:	445a      	add	r2, fp
 8013502:	9209      	str	r2, [sp, #36]	; 0x24
 8013504:	f89a 3000 	ldrb.w	r3, [sl]
 8013508:	2b00      	cmp	r3, #0
 801350a:	f000 80a2 	beq.w	8013652 <_vfiprintf_r+0x20e>
 801350e:	2300      	movs	r3, #0
 8013510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013518:	f10a 0a01 	add.w	sl, sl, #1
 801351c:	9304      	str	r3, [sp, #16]
 801351e:	9307      	str	r3, [sp, #28]
 8013520:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013524:	931a      	str	r3, [sp, #104]	; 0x68
 8013526:	4654      	mov	r4, sl
 8013528:	2205      	movs	r2, #5
 801352a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801352e:	4858      	ldr	r0, [pc, #352]	; (8013690 <_vfiprintf_r+0x24c>)
 8013530:	f7ec fede 	bl	80002f0 <memchr>
 8013534:	9a04      	ldr	r2, [sp, #16]
 8013536:	b9d8      	cbnz	r0, 8013570 <_vfiprintf_r+0x12c>
 8013538:	06d1      	lsls	r1, r2, #27
 801353a:	bf44      	itt	mi
 801353c:	2320      	movmi	r3, #32
 801353e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013542:	0713      	lsls	r3, r2, #28
 8013544:	bf44      	itt	mi
 8013546:	232b      	movmi	r3, #43	; 0x2b
 8013548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801354c:	f89a 3000 	ldrb.w	r3, [sl]
 8013550:	2b2a      	cmp	r3, #42	; 0x2a
 8013552:	d015      	beq.n	8013580 <_vfiprintf_r+0x13c>
 8013554:	9a07      	ldr	r2, [sp, #28]
 8013556:	4654      	mov	r4, sl
 8013558:	2000      	movs	r0, #0
 801355a:	f04f 0c0a 	mov.w	ip, #10
 801355e:	4621      	mov	r1, r4
 8013560:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013564:	3b30      	subs	r3, #48	; 0x30
 8013566:	2b09      	cmp	r3, #9
 8013568:	d94e      	bls.n	8013608 <_vfiprintf_r+0x1c4>
 801356a:	b1b0      	cbz	r0, 801359a <_vfiprintf_r+0x156>
 801356c:	9207      	str	r2, [sp, #28]
 801356e:	e014      	b.n	801359a <_vfiprintf_r+0x156>
 8013570:	eba0 0308 	sub.w	r3, r0, r8
 8013574:	fa09 f303 	lsl.w	r3, r9, r3
 8013578:	4313      	orrs	r3, r2
 801357a:	9304      	str	r3, [sp, #16]
 801357c:	46a2      	mov	sl, r4
 801357e:	e7d2      	b.n	8013526 <_vfiprintf_r+0xe2>
 8013580:	9b03      	ldr	r3, [sp, #12]
 8013582:	1d19      	adds	r1, r3, #4
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	9103      	str	r1, [sp, #12]
 8013588:	2b00      	cmp	r3, #0
 801358a:	bfbb      	ittet	lt
 801358c:	425b      	neglt	r3, r3
 801358e:	f042 0202 	orrlt.w	r2, r2, #2
 8013592:	9307      	strge	r3, [sp, #28]
 8013594:	9307      	strlt	r3, [sp, #28]
 8013596:	bfb8      	it	lt
 8013598:	9204      	strlt	r2, [sp, #16]
 801359a:	7823      	ldrb	r3, [r4, #0]
 801359c:	2b2e      	cmp	r3, #46	; 0x2e
 801359e:	d10c      	bne.n	80135ba <_vfiprintf_r+0x176>
 80135a0:	7863      	ldrb	r3, [r4, #1]
 80135a2:	2b2a      	cmp	r3, #42	; 0x2a
 80135a4:	d135      	bne.n	8013612 <_vfiprintf_r+0x1ce>
 80135a6:	9b03      	ldr	r3, [sp, #12]
 80135a8:	1d1a      	adds	r2, r3, #4
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	9203      	str	r2, [sp, #12]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	bfb8      	it	lt
 80135b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80135b6:	3402      	adds	r4, #2
 80135b8:	9305      	str	r3, [sp, #20]
 80135ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80136a0 <_vfiprintf_r+0x25c>
 80135be:	7821      	ldrb	r1, [r4, #0]
 80135c0:	2203      	movs	r2, #3
 80135c2:	4650      	mov	r0, sl
 80135c4:	f7ec fe94 	bl	80002f0 <memchr>
 80135c8:	b140      	cbz	r0, 80135dc <_vfiprintf_r+0x198>
 80135ca:	2340      	movs	r3, #64	; 0x40
 80135cc:	eba0 000a 	sub.w	r0, r0, sl
 80135d0:	fa03 f000 	lsl.w	r0, r3, r0
 80135d4:	9b04      	ldr	r3, [sp, #16]
 80135d6:	4303      	orrs	r3, r0
 80135d8:	3401      	adds	r4, #1
 80135da:	9304      	str	r3, [sp, #16]
 80135dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135e0:	482c      	ldr	r0, [pc, #176]	; (8013694 <_vfiprintf_r+0x250>)
 80135e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135e6:	2206      	movs	r2, #6
 80135e8:	f7ec fe82 	bl	80002f0 <memchr>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d03f      	beq.n	8013670 <_vfiprintf_r+0x22c>
 80135f0:	4b29      	ldr	r3, [pc, #164]	; (8013698 <_vfiprintf_r+0x254>)
 80135f2:	bb1b      	cbnz	r3, 801363c <_vfiprintf_r+0x1f8>
 80135f4:	9b03      	ldr	r3, [sp, #12]
 80135f6:	3307      	adds	r3, #7
 80135f8:	f023 0307 	bic.w	r3, r3, #7
 80135fc:	3308      	adds	r3, #8
 80135fe:	9303      	str	r3, [sp, #12]
 8013600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013602:	443b      	add	r3, r7
 8013604:	9309      	str	r3, [sp, #36]	; 0x24
 8013606:	e767      	b.n	80134d8 <_vfiprintf_r+0x94>
 8013608:	fb0c 3202 	mla	r2, ip, r2, r3
 801360c:	460c      	mov	r4, r1
 801360e:	2001      	movs	r0, #1
 8013610:	e7a5      	b.n	801355e <_vfiprintf_r+0x11a>
 8013612:	2300      	movs	r3, #0
 8013614:	3401      	adds	r4, #1
 8013616:	9305      	str	r3, [sp, #20]
 8013618:	4619      	mov	r1, r3
 801361a:	f04f 0c0a 	mov.w	ip, #10
 801361e:	4620      	mov	r0, r4
 8013620:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013624:	3a30      	subs	r2, #48	; 0x30
 8013626:	2a09      	cmp	r2, #9
 8013628:	d903      	bls.n	8013632 <_vfiprintf_r+0x1ee>
 801362a:	2b00      	cmp	r3, #0
 801362c:	d0c5      	beq.n	80135ba <_vfiprintf_r+0x176>
 801362e:	9105      	str	r1, [sp, #20]
 8013630:	e7c3      	b.n	80135ba <_vfiprintf_r+0x176>
 8013632:	fb0c 2101 	mla	r1, ip, r1, r2
 8013636:	4604      	mov	r4, r0
 8013638:	2301      	movs	r3, #1
 801363a:	e7f0      	b.n	801361e <_vfiprintf_r+0x1da>
 801363c:	ab03      	add	r3, sp, #12
 801363e:	9300      	str	r3, [sp, #0]
 8013640:	462a      	mov	r2, r5
 8013642:	4b16      	ldr	r3, [pc, #88]	; (801369c <_vfiprintf_r+0x258>)
 8013644:	a904      	add	r1, sp, #16
 8013646:	4630      	mov	r0, r6
 8013648:	f3af 8000 	nop.w
 801364c:	4607      	mov	r7, r0
 801364e:	1c78      	adds	r0, r7, #1
 8013650:	d1d6      	bne.n	8013600 <_vfiprintf_r+0x1bc>
 8013652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013654:	07d9      	lsls	r1, r3, #31
 8013656:	d405      	bmi.n	8013664 <_vfiprintf_r+0x220>
 8013658:	89ab      	ldrh	r3, [r5, #12]
 801365a:	059a      	lsls	r2, r3, #22
 801365c:	d402      	bmi.n	8013664 <_vfiprintf_r+0x220>
 801365e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013660:	f7ff fb70 	bl	8012d44 <__retarget_lock_release_recursive>
 8013664:	89ab      	ldrh	r3, [r5, #12]
 8013666:	065b      	lsls	r3, r3, #25
 8013668:	f53f af12 	bmi.w	8013490 <_vfiprintf_r+0x4c>
 801366c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801366e:	e711      	b.n	8013494 <_vfiprintf_r+0x50>
 8013670:	ab03      	add	r3, sp, #12
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	462a      	mov	r2, r5
 8013676:	4b09      	ldr	r3, [pc, #36]	; (801369c <_vfiprintf_r+0x258>)
 8013678:	a904      	add	r1, sp, #16
 801367a:	4630      	mov	r0, r6
 801367c:	f000 f880 	bl	8013780 <_printf_i>
 8013680:	e7e4      	b.n	801364c <_vfiprintf_r+0x208>
 8013682:	bf00      	nop
 8013684:	08016a00 	.word	0x08016a00
 8013688:	08016a20 	.word	0x08016a20
 801368c:	080169e0 	.word	0x080169e0
 8013690:	08016af2 	.word	0x08016af2
 8013694:	08016afc 	.word	0x08016afc
 8013698:	00000000 	.word	0x00000000
 801369c:	0801341f 	.word	0x0801341f
 80136a0:	08016af8 	.word	0x08016af8

080136a4 <_printf_common>:
 80136a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136a8:	4616      	mov	r6, r2
 80136aa:	4699      	mov	r9, r3
 80136ac:	688a      	ldr	r2, [r1, #8]
 80136ae:	690b      	ldr	r3, [r1, #16]
 80136b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136b4:	4293      	cmp	r3, r2
 80136b6:	bfb8      	it	lt
 80136b8:	4613      	movlt	r3, r2
 80136ba:	6033      	str	r3, [r6, #0]
 80136bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80136c0:	4607      	mov	r7, r0
 80136c2:	460c      	mov	r4, r1
 80136c4:	b10a      	cbz	r2, 80136ca <_printf_common+0x26>
 80136c6:	3301      	adds	r3, #1
 80136c8:	6033      	str	r3, [r6, #0]
 80136ca:	6823      	ldr	r3, [r4, #0]
 80136cc:	0699      	lsls	r1, r3, #26
 80136ce:	bf42      	ittt	mi
 80136d0:	6833      	ldrmi	r3, [r6, #0]
 80136d2:	3302      	addmi	r3, #2
 80136d4:	6033      	strmi	r3, [r6, #0]
 80136d6:	6825      	ldr	r5, [r4, #0]
 80136d8:	f015 0506 	ands.w	r5, r5, #6
 80136dc:	d106      	bne.n	80136ec <_printf_common+0x48>
 80136de:	f104 0a19 	add.w	sl, r4, #25
 80136e2:	68e3      	ldr	r3, [r4, #12]
 80136e4:	6832      	ldr	r2, [r6, #0]
 80136e6:	1a9b      	subs	r3, r3, r2
 80136e8:	42ab      	cmp	r3, r5
 80136ea:	dc26      	bgt.n	801373a <_printf_common+0x96>
 80136ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136f0:	1e13      	subs	r3, r2, #0
 80136f2:	6822      	ldr	r2, [r4, #0]
 80136f4:	bf18      	it	ne
 80136f6:	2301      	movne	r3, #1
 80136f8:	0692      	lsls	r2, r2, #26
 80136fa:	d42b      	bmi.n	8013754 <_printf_common+0xb0>
 80136fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013700:	4649      	mov	r1, r9
 8013702:	4638      	mov	r0, r7
 8013704:	47c0      	blx	r8
 8013706:	3001      	adds	r0, #1
 8013708:	d01e      	beq.n	8013748 <_printf_common+0xa4>
 801370a:	6823      	ldr	r3, [r4, #0]
 801370c:	68e5      	ldr	r5, [r4, #12]
 801370e:	6832      	ldr	r2, [r6, #0]
 8013710:	f003 0306 	and.w	r3, r3, #6
 8013714:	2b04      	cmp	r3, #4
 8013716:	bf08      	it	eq
 8013718:	1aad      	subeq	r5, r5, r2
 801371a:	68a3      	ldr	r3, [r4, #8]
 801371c:	6922      	ldr	r2, [r4, #16]
 801371e:	bf0c      	ite	eq
 8013720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013724:	2500      	movne	r5, #0
 8013726:	4293      	cmp	r3, r2
 8013728:	bfc4      	itt	gt
 801372a:	1a9b      	subgt	r3, r3, r2
 801372c:	18ed      	addgt	r5, r5, r3
 801372e:	2600      	movs	r6, #0
 8013730:	341a      	adds	r4, #26
 8013732:	42b5      	cmp	r5, r6
 8013734:	d11a      	bne.n	801376c <_printf_common+0xc8>
 8013736:	2000      	movs	r0, #0
 8013738:	e008      	b.n	801374c <_printf_common+0xa8>
 801373a:	2301      	movs	r3, #1
 801373c:	4652      	mov	r2, sl
 801373e:	4649      	mov	r1, r9
 8013740:	4638      	mov	r0, r7
 8013742:	47c0      	blx	r8
 8013744:	3001      	adds	r0, #1
 8013746:	d103      	bne.n	8013750 <_printf_common+0xac>
 8013748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013750:	3501      	adds	r5, #1
 8013752:	e7c6      	b.n	80136e2 <_printf_common+0x3e>
 8013754:	18e1      	adds	r1, r4, r3
 8013756:	1c5a      	adds	r2, r3, #1
 8013758:	2030      	movs	r0, #48	; 0x30
 801375a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801375e:	4422      	add	r2, r4
 8013760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013768:	3302      	adds	r3, #2
 801376a:	e7c7      	b.n	80136fc <_printf_common+0x58>
 801376c:	2301      	movs	r3, #1
 801376e:	4622      	mov	r2, r4
 8013770:	4649      	mov	r1, r9
 8013772:	4638      	mov	r0, r7
 8013774:	47c0      	blx	r8
 8013776:	3001      	adds	r0, #1
 8013778:	d0e6      	beq.n	8013748 <_printf_common+0xa4>
 801377a:	3601      	adds	r6, #1
 801377c:	e7d9      	b.n	8013732 <_printf_common+0x8e>
	...

08013780 <_printf_i>:
 8013780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013784:	7e0f      	ldrb	r7, [r1, #24]
 8013786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013788:	2f78      	cmp	r7, #120	; 0x78
 801378a:	4691      	mov	r9, r2
 801378c:	4680      	mov	r8, r0
 801378e:	460c      	mov	r4, r1
 8013790:	469a      	mov	sl, r3
 8013792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013796:	d807      	bhi.n	80137a8 <_printf_i+0x28>
 8013798:	2f62      	cmp	r7, #98	; 0x62
 801379a:	d80a      	bhi.n	80137b2 <_printf_i+0x32>
 801379c:	2f00      	cmp	r7, #0
 801379e:	f000 80d8 	beq.w	8013952 <_printf_i+0x1d2>
 80137a2:	2f58      	cmp	r7, #88	; 0x58
 80137a4:	f000 80a3 	beq.w	80138ee <_printf_i+0x16e>
 80137a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80137ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137b0:	e03a      	b.n	8013828 <_printf_i+0xa8>
 80137b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137b6:	2b15      	cmp	r3, #21
 80137b8:	d8f6      	bhi.n	80137a8 <_printf_i+0x28>
 80137ba:	a101      	add	r1, pc, #4	; (adr r1, 80137c0 <_printf_i+0x40>)
 80137bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137c0:	08013819 	.word	0x08013819
 80137c4:	0801382d 	.word	0x0801382d
 80137c8:	080137a9 	.word	0x080137a9
 80137cc:	080137a9 	.word	0x080137a9
 80137d0:	080137a9 	.word	0x080137a9
 80137d4:	080137a9 	.word	0x080137a9
 80137d8:	0801382d 	.word	0x0801382d
 80137dc:	080137a9 	.word	0x080137a9
 80137e0:	080137a9 	.word	0x080137a9
 80137e4:	080137a9 	.word	0x080137a9
 80137e8:	080137a9 	.word	0x080137a9
 80137ec:	08013939 	.word	0x08013939
 80137f0:	0801385d 	.word	0x0801385d
 80137f4:	0801391b 	.word	0x0801391b
 80137f8:	080137a9 	.word	0x080137a9
 80137fc:	080137a9 	.word	0x080137a9
 8013800:	0801395b 	.word	0x0801395b
 8013804:	080137a9 	.word	0x080137a9
 8013808:	0801385d 	.word	0x0801385d
 801380c:	080137a9 	.word	0x080137a9
 8013810:	080137a9 	.word	0x080137a9
 8013814:	08013923 	.word	0x08013923
 8013818:	682b      	ldr	r3, [r5, #0]
 801381a:	1d1a      	adds	r2, r3, #4
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	602a      	str	r2, [r5, #0]
 8013820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013828:	2301      	movs	r3, #1
 801382a:	e0a3      	b.n	8013974 <_printf_i+0x1f4>
 801382c:	6820      	ldr	r0, [r4, #0]
 801382e:	6829      	ldr	r1, [r5, #0]
 8013830:	0606      	lsls	r6, r0, #24
 8013832:	f101 0304 	add.w	r3, r1, #4
 8013836:	d50a      	bpl.n	801384e <_printf_i+0xce>
 8013838:	680e      	ldr	r6, [r1, #0]
 801383a:	602b      	str	r3, [r5, #0]
 801383c:	2e00      	cmp	r6, #0
 801383e:	da03      	bge.n	8013848 <_printf_i+0xc8>
 8013840:	232d      	movs	r3, #45	; 0x2d
 8013842:	4276      	negs	r6, r6
 8013844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013848:	485e      	ldr	r0, [pc, #376]	; (80139c4 <_printf_i+0x244>)
 801384a:	230a      	movs	r3, #10
 801384c:	e019      	b.n	8013882 <_printf_i+0x102>
 801384e:	680e      	ldr	r6, [r1, #0]
 8013850:	602b      	str	r3, [r5, #0]
 8013852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013856:	bf18      	it	ne
 8013858:	b236      	sxthne	r6, r6
 801385a:	e7ef      	b.n	801383c <_printf_i+0xbc>
 801385c:	682b      	ldr	r3, [r5, #0]
 801385e:	6820      	ldr	r0, [r4, #0]
 8013860:	1d19      	adds	r1, r3, #4
 8013862:	6029      	str	r1, [r5, #0]
 8013864:	0601      	lsls	r1, r0, #24
 8013866:	d501      	bpl.n	801386c <_printf_i+0xec>
 8013868:	681e      	ldr	r6, [r3, #0]
 801386a:	e002      	b.n	8013872 <_printf_i+0xf2>
 801386c:	0646      	lsls	r6, r0, #25
 801386e:	d5fb      	bpl.n	8013868 <_printf_i+0xe8>
 8013870:	881e      	ldrh	r6, [r3, #0]
 8013872:	4854      	ldr	r0, [pc, #336]	; (80139c4 <_printf_i+0x244>)
 8013874:	2f6f      	cmp	r7, #111	; 0x6f
 8013876:	bf0c      	ite	eq
 8013878:	2308      	moveq	r3, #8
 801387a:	230a      	movne	r3, #10
 801387c:	2100      	movs	r1, #0
 801387e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013882:	6865      	ldr	r5, [r4, #4]
 8013884:	60a5      	str	r5, [r4, #8]
 8013886:	2d00      	cmp	r5, #0
 8013888:	bfa2      	ittt	ge
 801388a:	6821      	ldrge	r1, [r4, #0]
 801388c:	f021 0104 	bicge.w	r1, r1, #4
 8013890:	6021      	strge	r1, [r4, #0]
 8013892:	b90e      	cbnz	r6, 8013898 <_printf_i+0x118>
 8013894:	2d00      	cmp	r5, #0
 8013896:	d04d      	beq.n	8013934 <_printf_i+0x1b4>
 8013898:	4615      	mov	r5, r2
 801389a:	fbb6 f1f3 	udiv	r1, r6, r3
 801389e:	fb03 6711 	mls	r7, r3, r1, r6
 80138a2:	5dc7      	ldrb	r7, [r0, r7]
 80138a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80138a8:	4637      	mov	r7, r6
 80138aa:	42bb      	cmp	r3, r7
 80138ac:	460e      	mov	r6, r1
 80138ae:	d9f4      	bls.n	801389a <_printf_i+0x11a>
 80138b0:	2b08      	cmp	r3, #8
 80138b2:	d10b      	bne.n	80138cc <_printf_i+0x14c>
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	07de      	lsls	r6, r3, #31
 80138b8:	d508      	bpl.n	80138cc <_printf_i+0x14c>
 80138ba:	6923      	ldr	r3, [r4, #16]
 80138bc:	6861      	ldr	r1, [r4, #4]
 80138be:	4299      	cmp	r1, r3
 80138c0:	bfde      	ittt	le
 80138c2:	2330      	movle	r3, #48	; 0x30
 80138c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80138c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80138cc:	1b52      	subs	r2, r2, r5
 80138ce:	6122      	str	r2, [r4, #16]
 80138d0:	f8cd a000 	str.w	sl, [sp]
 80138d4:	464b      	mov	r3, r9
 80138d6:	aa03      	add	r2, sp, #12
 80138d8:	4621      	mov	r1, r4
 80138da:	4640      	mov	r0, r8
 80138dc:	f7ff fee2 	bl	80136a4 <_printf_common>
 80138e0:	3001      	adds	r0, #1
 80138e2:	d14c      	bne.n	801397e <_printf_i+0x1fe>
 80138e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138e8:	b004      	add	sp, #16
 80138ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138ee:	4835      	ldr	r0, [pc, #212]	; (80139c4 <_printf_i+0x244>)
 80138f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80138f4:	6829      	ldr	r1, [r5, #0]
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80138fc:	6029      	str	r1, [r5, #0]
 80138fe:	061d      	lsls	r5, r3, #24
 8013900:	d514      	bpl.n	801392c <_printf_i+0x1ac>
 8013902:	07df      	lsls	r7, r3, #31
 8013904:	bf44      	itt	mi
 8013906:	f043 0320 	orrmi.w	r3, r3, #32
 801390a:	6023      	strmi	r3, [r4, #0]
 801390c:	b91e      	cbnz	r6, 8013916 <_printf_i+0x196>
 801390e:	6823      	ldr	r3, [r4, #0]
 8013910:	f023 0320 	bic.w	r3, r3, #32
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	2310      	movs	r3, #16
 8013918:	e7b0      	b.n	801387c <_printf_i+0xfc>
 801391a:	6823      	ldr	r3, [r4, #0]
 801391c:	f043 0320 	orr.w	r3, r3, #32
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	2378      	movs	r3, #120	; 0x78
 8013924:	4828      	ldr	r0, [pc, #160]	; (80139c8 <_printf_i+0x248>)
 8013926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801392a:	e7e3      	b.n	80138f4 <_printf_i+0x174>
 801392c:	0659      	lsls	r1, r3, #25
 801392e:	bf48      	it	mi
 8013930:	b2b6      	uxthmi	r6, r6
 8013932:	e7e6      	b.n	8013902 <_printf_i+0x182>
 8013934:	4615      	mov	r5, r2
 8013936:	e7bb      	b.n	80138b0 <_printf_i+0x130>
 8013938:	682b      	ldr	r3, [r5, #0]
 801393a:	6826      	ldr	r6, [r4, #0]
 801393c:	6961      	ldr	r1, [r4, #20]
 801393e:	1d18      	adds	r0, r3, #4
 8013940:	6028      	str	r0, [r5, #0]
 8013942:	0635      	lsls	r5, r6, #24
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	d501      	bpl.n	801394c <_printf_i+0x1cc>
 8013948:	6019      	str	r1, [r3, #0]
 801394a:	e002      	b.n	8013952 <_printf_i+0x1d2>
 801394c:	0670      	lsls	r0, r6, #25
 801394e:	d5fb      	bpl.n	8013948 <_printf_i+0x1c8>
 8013950:	8019      	strh	r1, [r3, #0]
 8013952:	2300      	movs	r3, #0
 8013954:	6123      	str	r3, [r4, #16]
 8013956:	4615      	mov	r5, r2
 8013958:	e7ba      	b.n	80138d0 <_printf_i+0x150>
 801395a:	682b      	ldr	r3, [r5, #0]
 801395c:	1d1a      	adds	r2, r3, #4
 801395e:	602a      	str	r2, [r5, #0]
 8013960:	681d      	ldr	r5, [r3, #0]
 8013962:	6862      	ldr	r2, [r4, #4]
 8013964:	2100      	movs	r1, #0
 8013966:	4628      	mov	r0, r5
 8013968:	f7ec fcc2 	bl	80002f0 <memchr>
 801396c:	b108      	cbz	r0, 8013972 <_printf_i+0x1f2>
 801396e:	1b40      	subs	r0, r0, r5
 8013970:	6060      	str	r0, [r4, #4]
 8013972:	6863      	ldr	r3, [r4, #4]
 8013974:	6123      	str	r3, [r4, #16]
 8013976:	2300      	movs	r3, #0
 8013978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801397c:	e7a8      	b.n	80138d0 <_printf_i+0x150>
 801397e:	6923      	ldr	r3, [r4, #16]
 8013980:	462a      	mov	r2, r5
 8013982:	4649      	mov	r1, r9
 8013984:	4640      	mov	r0, r8
 8013986:	47d0      	blx	sl
 8013988:	3001      	adds	r0, #1
 801398a:	d0ab      	beq.n	80138e4 <_printf_i+0x164>
 801398c:	6823      	ldr	r3, [r4, #0]
 801398e:	079b      	lsls	r3, r3, #30
 8013990:	d413      	bmi.n	80139ba <_printf_i+0x23a>
 8013992:	68e0      	ldr	r0, [r4, #12]
 8013994:	9b03      	ldr	r3, [sp, #12]
 8013996:	4298      	cmp	r0, r3
 8013998:	bfb8      	it	lt
 801399a:	4618      	movlt	r0, r3
 801399c:	e7a4      	b.n	80138e8 <_printf_i+0x168>
 801399e:	2301      	movs	r3, #1
 80139a0:	4632      	mov	r2, r6
 80139a2:	4649      	mov	r1, r9
 80139a4:	4640      	mov	r0, r8
 80139a6:	47d0      	blx	sl
 80139a8:	3001      	adds	r0, #1
 80139aa:	d09b      	beq.n	80138e4 <_printf_i+0x164>
 80139ac:	3501      	adds	r5, #1
 80139ae:	68e3      	ldr	r3, [r4, #12]
 80139b0:	9903      	ldr	r1, [sp, #12]
 80139b2:	1a5b      	subs	r3, r3, r1
 80139b4:	42ab      	cmp	r3, r5
 80139b6:	dcf2      	bgt.n	801399e <_printf_i+0x21e>
 80139b8:	e7eb      	b.n	8013992 <_printf_i+0x212>
 80139ba:	2500      	movs	r5, #0
 80139bc:	f104 0619 	add.w	r6, r4, #25
 80139c0:	e7f5      	b.n	80139ae <_printf_i+0x22e>
 80139c2:	bf00      	nop
 80139c4:	08016b03 	.word	0x08016b03
 80139c8:	08016b14 	.word	0x08016b14

080139cc <_read_r>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4d07      	ldr	r5, [pc, #28]	; (80139ec <_read_r+0x20>)
 80139d0:	4604      	mov	r4, r0
 80139d2:	4608      	mov	r0, r1
 80139d4:	4611      	mov	r1, r2
 80139d6:	2200      	movs	r2, #0
 80139d8:	602a      	str	r2, [r5, #0]
 80139da:	461a      	mov	r2, r3
 80139dc:	f7ec ffa4 	bl	8000928 <_read>
 80139e0:	1c43      	adds	r3, r0, #1
 80139e2:	d102      	bne.n	80139ea <_read_r+0x1e>
 80139e4:	682b      	ldr	r3, [r5, #0]
 80139e6:	b103      	cbz	r3, 80139ea <_read_r+0x1e>
 80139e8:	6023      	str	r3, [r4, #0]
 80139ea:	bd38      	pop	{r3, r4, r5, pc}
 80139ec:	2400be78 	.word	0x2400be78

080139f0 <__swbuf_r>:
 80139f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139f2:	460e      	mov	r6, r1
 80139f4:	4614      	mov	r4, r2
 80139f6:	4605      	mov	r5, r0
 80139f8:	b118      	cbz	r0, 8013a02 <__swbuf_r+0x12>
 80139fa:	6983      	ldr	r3, [r0, #24]
 80139fc:	b90b      	cbnz	r3, 8013a02 <__swbuf_r+0x12>
 80139fe:	f7ff f8dd 	bl	8012bbc <__sinit>
 8013a02:	4b21      	ldr	r3, [pc, #132]	; (8013a88 <__swbuf_r+0x98>)
 8013a04:	429c      	cmp	r4, r3
 8013a06:	d12b      	bne.n	8013a60 <__swbuf_r+0x70>
 8013a08:	686c      	ldr	r4, [r5, #4]
 8013a0a:	69a3      	ldr	r3, [r4, #24]
 8013a0c:	60a3      	str	r3, [r4, #8]
 8013a0e:	89a3      	ldrh	r3, [r4, #12]
 8013a10:	071a      	lsls	r2, r3, #28
 8013a12:	d52f      	bpl.n	8013a74 <__swbuf_r+0x84>
 8013a14:	6923      	ldr	r3, [r4, #16]
 8013a16:	b36b      	cbz	r3, 8013a74 <__swbuf_r+0x84>
 8013a18:	6923      	ldr	r3, [r4, #16]
 8013a1a:	6820      	ldr	r0, [r4, #0]
 8013a1c:	1ac0      	subs	r0, r0, r3
 8013a1e:	6963      	ldr	r3, [r4, #20]
 8013a20:	b2f6      	uxtb	r6, r6
 8013a22:	4283      	cmp	r3, r0
 8013a24:	4637      	mov	r7, r6
 8013a26:	dc04      	bgt.n	8013a32 <__swbuf_r+0x42>
 8013a28:	4621      	mov	r1, r4
 8013a2a:	4628      	mov	r0, r5
 8013a2c:	f7ff fc20 	bl	8013270 <_fflush_r>
 8013a30:	bb30      	cbnz	r0, 8013a80 <__swbuf_r+0x90>
 8013a32:	68a3      	ldr	r3, [r4, #8]
 8013a34:	3b01      	subs	r3, #1
 8013a36:	60a3      	str	r3, [r4, #8]
 8013a38:	6823      	ldr	r3, [r4, #0]
 8013a3a:	1c5a      	adds	r2, r3, #1
 8013a3c:	6022      	str	r2, [r4, #0]
 8013a3e:	701e      	strb	r6, [r3, #0]
 8013a40:	6963      	ldr	r3, [r4, #20]
 8013a42:	3001      	adds	r0, #1
 8013a44:	4283      	cmp	r3, r0
 8013a46:	d004      	beq.n	8013a52 <__swbuf_r+0x62>
 8013a48:	89a3      	ldrh	r3, [r4, #12]
 8013a4a:	07db      	lsls	r3, r3, #31
 8013a4c:	d506      	bpl.n	8013a5c <__swbuf_r+0x6c>
 8013a4e:	2e0a      	cmp	r6, #10
 8013a50:	d104      	bne.n	8013a5c <__swbuf_r+0x6c>
 8013a52:	4621      	mov	r1, r4
 8013a54:	4628      	mov	r0, r5
 8013a56:	f7ff fc0b 	bl	8013270 <_fflush_r>
 8013a5a:	b988      	cbnz	r0, 8013a80 <__swbuf_r+0x90>
 8013a5c:	4638      	mov	r0, r7
 8013a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a60:	4b0a      	ldr	r3, [pc, #40]	; (8013a8c <__swbuf_r+0x9c>)
 8013a62:	429c      	cmp	r4, r3
 8013a64:	d101      	bne.n	8013a6a <__swbuf_r+0x7a>
 8013a66:	68ac      	ldr	r4, [r5, #8]
 8013a68:	e7cf      	b.n	8013a0a <__swbuf_r+0x1a>
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <__swbuf_r+0xa0>)
 8013a6c:	429c      	cmp	r4, r3
 8013a6e:	bf08      	it	eq
 8013a70:	68ec      	ldreq	r4, [r5, #12]
 8013a72:	e7ca      	b.n	8013a0a <__swbuf_r+0x1a>
 8013a74:	4621      	mov	r1, r4
 8013a76:	4628      	mov	r0, r5
 8013a78:	f000 f80c 	bl	8013a94 <__swsetup_r>
 8013a7c:	2800      	cmp	r0, #0
 8013a7e:	d0cb      	beq.n	8013a18 <__swbuf_r+0x28>
 8013a80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013a84:	e7ea      	b.n	8013a5c <__swbuf_r+0x6c>
 8013a86:	bf00      	nop
 8013a88:	08016a00 	.word	0x08016a00
 8013a8c:	08016a20 	.word	0x08016a20
 8013a90:	080169e0 	.word	0x080169e0

08013a94 <__swsetup_r>:
 8013a94:	4b32      	ldr	r3, [pc, #200]	; (8013b60 <__swsetup_r+0xcc>)
 8013a96:	b570      	push	{r4, r5, r6, lr}
 8013a98:	681d      	ldr	r5, [r3, #0]
 8013a9a:	4606      	mov	r6, r0
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	b125      	cbz	r5, 8013aaa <__swsetup_r+0x16>
 8013aa0:	69ab      	ldr	r3, [r5, #24]
 8013aa2:	b913      	cbnz	r3, 8013aaa <__swsetup_r+0x16>
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f7ff f889 	bl	8012bbc <__sinit>
 8013aaa:	4b2e      	ldr	r3, [pc, #184]	; (8013b64 <__swsetup_r+0xd0>)
 8013aac:	429c      	cmp	r4, r3
 8013aae:	d10f      	bne.n	8013ad0 <__swsetup_r+0x3c>
 8013ab0:	686c      	ldr	r4, [r5, #4]
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013ab8:	0719      	lsls	r1, r3, #28
 8013aba:	d42c      	bmi.n	8013b16 <__swsetup_r+0x82>
 8013abc:	06dd      	lsls	r5, r3, #27
 8013abe:	d411      	bmi.n	8013ae4 <__swsetup_r+0x50>
 8013ac0:	2309      	movs	r3, #9
 8013ac2:	6033      	str	r3, [r6, #0]
 8013ac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013ac8:	81a3      	strh	r3, [r4, #12]
 8013aca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ace:	e03e      	b.n	8013b4e <__swsetup_r+0xba>
 8013ad0:	4b25      	ldr	r3, [pc, #148]	; (8013b68 <__swsetup_r+0xd4>)
 8013ad2:	429c      	cmp	r4, r3
 8013ad4:	d101      	bne.n	8013ada <__swsetup_r+0x46>
 8013ad6:	68ac      	ldr	r4, [r5, #8]
 8013ad8:	e7eb      	b.n	8013ab2 <__swsetup_r+0x1e>
 8013ada:	4b24      	ldr	r3, [pc, #144]	; (8013b6c <__swsetup_r+0xd8>)
 8013adc:	429c      	cmp	r4, r3
 8013ade:	bf08      	it	eq
 8013ae0:	68ec      	ldreq	r4, [r5, #12]
 8013ae2:	e7e6      	b.n	8013ab2 <__swsetup_r+0x1e>
 8013ae4:	0758      	lsls	r0, r3, #29
 8013ae6:	d512      	bpl.n	8013b0e <__swsetup_r+0x7a>
 8013ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013aea:	b141      	cbz	r1, 8013afe <__swsetup_r+0x6a>
 8013aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013af0:	4299      	cmp	r1, r3
 8013af2:	d002      	beq.n	8013afa <__swsetup_r+0x66>
 8013af4:	4630      	mov	r0, r6
 8013af6:	f7ff fc2f 	bl	8013358 <_free_r>
 8013afa:	2300      	movs	r3, #0
 8013afc:	6363      	str	r3, [r4, #52]	; 0x34
 8013afe:	89a3      	ldrh	r3, [r4, #12]
 8013b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b04:	81a3      	strh	r3, [r4, #12]
 8013b06:	2300      	movs	r3, #0
 8013b08:	6063      	str	r3, [r4, #4]
 8013b0a:	6923      	ldr	r3, [r4, #16]
 8013b0c:	6023      	str	r3, [r4, #0]
 8013b0e:	89a3      	ldrh	r3, [r4, #12]
 8013b10:	f043 0308 	orr.w	r3, r3, #8
 8013b14:	81a3      	strh	r3, [r4, #12]
 8013b16:	6923      	ldr	r3, [r4, #16]
 8013b18:	b94b      	cbnz	r3, 8013b2e <__swsetup_r+0x9a>
 8013b1a:	89a3      	ldrh	r3, [r4, #12]
 8013b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b24:	d003      	beq.n	8013b2e <__swsetup_r+0x9a>
 8013b26:	4621      	mov	r1, r4
 8013b28:	4630      	mov	r0, r6
 8013b2a:	f000 f84d 	bl	8013bc8 <__smakebuf_r>
 8013b2e:	89a0      	ldrh	r0, [r4, #12]
 8013b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b34:	f010 0301 	ands.w	r3, r0, #1
 8013b38:	d00a      	beq.n	8013b50 <__swsetup_r+0xbc>
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	60a3      	str	r3, [r4, #8]
 8013b3e:	6963      	ldr	r3, [r4, #20]
 8013b40:	425b      	negs	r3, r3
 8013b42:	61a3      	str	r3, [r4, #24]
 8013b44:	6923      	ldr	r3, [r4, #16]
 8013b46:	b943      	cbnz	r3, 8013b5a <__swsetup_r+0xc6>
 8013b48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013b4c:	d1ba      	bne.n	8013ac4 <__swsetup_r+0x30>
 8013b4e:	bd70      	pop	{r4, r5, r6, pc}
 8013b50:	0781      	lsls	r1, r0, #30
 8013b52:	bf58      	it	pl
 8013b54:	6963      	ldrpl	r3, [r4, #20]
 8013b56:	60a3      	str	r3, [r4, #8]
 8013b58:	e7f4      	b.n	8013b44 <__swsetup_r+0xb0>
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	e7f7      	b.n	8013b4e <__swsetup_r+0xba>
 8013b5e:	bf00      	nop
 8013b60:	24000034 	.word	0x24000034
 8013b64:	08016a00 	.word	0x08016a00
 8013b68:	08016a20 	.word	0x08016a20
 8013b6c:	080169e0 	.word	0x080169e0

08013b70 <abort>:
 8013b70:	b508      	push	{r3, lr}
 8013b72:	2006      	movs	r0, #6
 8013b74:	f000 f890 	bl	8013c98 <raise>
 8013b78:	2001      	movs	r0, #1
 8013b7a:	f7ec fecb 	bl	8000914 <_exit>

08013b7e <__swhatbuf_r>:
 8013b7e:	b570      	push	{r4, r5, r6, lr}
 8013b80:	460e      	mov	r6, r1
 8013b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b86:	2900      	cmp	r1, #0
 8013b88:	b096      	sub	sp, #88	; 0x58
 8013b8a:	4614      	mov	r4, r2
 8013b8c:	461d      	mov	r5, r3
 8013b8e:	da08      	bge.n	8013ba2 <__swhatbuf_r+0x24>
 8013b90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013b94:	2200      	movs	r2, #0
 8013b96:	602a      	str	r2, [r5, #0]
 8013b98:	061a      	lsls	r2, r3, #24
 8013b9a:	d410      	bmi.n	8013bbe <__swhatbuf_r+0x40>
 8013b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ba0:	e00e      	b.n	8013bc0 <__swhatbuf_r+0x42>
 8013ba2:	466a      	mov	r2, sp
 8013ba4:	f000 f894 	bl	8013cd0 <_fstat_r>
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	dbf1      	blt.n	8013b90 <__swhatbuf_r+0x12>
 8013bac:	9a01      	ldr	r2, [sp, #4]
 8013bae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013bb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013bb6:	425a      	negs	r2, r3
 8013bb8:	415a      	adcs	r2, r3
 8013bba:	602a      	str	r2, [r5, #0]
 8013bbc:	e7ee      	b.n	8013b9c <__swhatbuf_r+0x1e>
 8013bbe:	2340      	movs	r3, #64	; 0x40
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	6023      	str	r3, [r4, #0]
 8013bc4:	b016      	add	sp, #88	; 0x58
 8013bc6:	bd70      	pop	{r4, r5, r6, pc}

08013bc8 <__smakebuf_r>:
 8013bc8:	898b      	ldrh	r3, [r1, #12]
 8013bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bcc:	079d      	lsls	r5, r3, #30
 8013bce:	4606      	mov	r6, r0
 8013bd0:	460c      	mov	r4, r1
 8013bd2:	d507      	bpl.n	8013be4 <__smakebuf_r+0x1c>
 8013bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013bd8:	6023      	str	r3, [r4, #0]
 8013bda:	6123      	str	r3, [r4, #16]
 8013bdc:	2301      	movs	r3, #1
 8013bde:	6163      	str	r3, [r4, #20]
 8013be0:	b002      	add	sp, #8
 8013be2:	bd70      	pop	{r4, r5, r6, pc}
 8013be4:	ab01      	add	r3, sp, #4
 8013be6:	466a      	mov	r2, sp
 8013be8:	f7ff ffc9 	bl	8013b7e <__swhatbuf_r>
 8013bec:	9900      	ldr	r1, [sp, #0]
 8013bee:	4605      	mov	r5, r0
 8013bf0:	4630      	mov	r0, r6
 8013bf2:	f7ff f8ef 	bl	8012dd4 <_malloc_r>
 8013bf6:	b948      	cbnz	r0, 8013c0c <__smakebuf_r+0x44>
 8013bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bfc:	059a      	lsls	r2, r3, #22
 8013bfe:	d4ef      	bmi.n	8013be0 <__smakebuf_r+0x18>
 8013c00:	f023 0303 	bic.w	r3, r3, #3
 8013c04:	f043 0302 	orr.w	r3, r3, #2
 8013c08:	81a3      	strh	r3, [r4, #12]
 8013c0a:	e7e3      	b.n	8013bd4 <__smakebuf_r+0xc>
 8013c0c:	4b0d      	ldr	r3, [pc, #52]	; (8013c44 <__smakebuf_r+0x7c>)
 8013c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c10:	89a3      	ldrh	r3, [r4, #12]
 8013c12:	6020      	str	r0, [r4, #0]
 8013c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c18:	81a3      	strh	r3, [r4, #12]
 8013c1a:	9b00      	ldr	r3, [sp, #0]
 8013c1c:	6163      	str	r3, [r4, #20]
 8013c1e:	9b01      	ldr	r3, [sp, #4]
 8013c20:	6120      	str	r0, [r4, #16]
 8013c22:	b15b      	cbz	r3, 8013c3c <__smakebuf_r+0x74>
 8013c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c28:	4630      	mov	r0, r6
 8013c2a:	f000 f863 	bl	8013cf4 <_isatty_r>
 8013c2e:	b128      	cbz	r0, 8013c3c <__smakebuf_r+0x74>
 8013c30:	89a3      	ldrh	r3, [r4, #12]
 8013c32:	f023 0303 	bic.w	r3, r3, #3
 8013c36:	f043 0301 	orr.w	r3, r3, #1
 8013c3a:	81a3      	strh	r3, [r4, #12]
 8013c3c:	89a0      	ldrh	r0, [r4, #12]
 8013c3e:	4305      	orrs	r5, r0
 8013c40:	81a5      	strh	r5, [r4, #12]
 8013c42:	e7cd      	b.n	8013be0 <__smakebuf_r+0x18>
 8013c44:	08012b55 	.word	0x08012b55

08013c48 <_raise_r>:
 8013c48:	291f      	cmp	r1, #31
 8013c4a:	b538      	push	{r3, r4, r5, lr}
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	460d      	mov	r5, r1
 8013c50:	d904      	bls.n	8013c5c <_raise_r+0x14>
 8013c52:	2316      	movs	r3, #22
 8013c54:	6003      	str	r3, [r0, #0]
 8013c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c5a:	bd38      	pop	{r3, r4, r5, pc}
 8013c5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c5e:	b112      	cbz	r2, 8013c66 <_raise_r+0x1e>
 8013c60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c64:	b94b      	cbnz	r3, 8013c7a <_raise_r+0x32>
 8013c66:	4620      	mov	r0, r4
 8013c68:	f000 f830 	bl	8013ccc <_getpid_r>
 8013c6c:	462a      	mov	r2, r5
 8013c6e:	4601      	mov	r1, r0
 8013c70:	4620      	mov	r0, r4
 8013c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c76:	f000 b817 	b.w	8013ca8 <_kill_r>
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d00a      	beq.n	8013c94 <_raise_r+0x4c>
 8013c7e:	1c59      	adds	r1, r3, #1
 8013c80:	d103      	bne.n	8013c8a <_raise_r+0x42>
 8013c82:	2316      	movs	r3, #22
 8013c84:	6003      	str	r3, [r0, #0]
 8013c86:	2001      	movs	r0, #1
 8013c88:	e7e7      	b.n	8013c5a <_raise_r+0x12>
 8013c8a:	2400      	movs	r4, #0
 8013c8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013c90:	4628      	mov	r0, r5
 8013c92:	4798      	blx	r3
 8013c94:	2000      	movs	r0, #0
 8013c96:	e7e0      	b.n	8013c5a <_raise_r+0x12>

08013c98 <raise>:
 8013c98:	4b02      	ldr	r3, [pc, #8]	; (8013ca4 <raise+0xc>)
 8013c9a:	4601      	mov	r1, r0
 8013c9c:	6818      	ldr	r0, [r3, #0]
 8013c9e:	f7ff bfd3 	b.w	8013c48 <_raise_r>
 8013ca2:	bf00      	nop
 8013ca4:	24000034 	.word	0x24000034

08013ca8 <_kill_r>:
 8013ca8:	b538      	push	{r3, r4, r5, lr}
 8013caa:	4d07      	ldr	r5, [pc, #28]	; (8013cc8 <_kill_r+0x20>)
 8013cac:	2300      	movs	r3, #0
 8013cae:	4604      	mov	r4, r0
 8013cb0:	4608      	mov	r0, r1
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	602b      	str	r3, [r5, #0]
 8013cb6:	f7ec fe1b 	bl	80008f0 <_kill>
 8013cba:	1c43      	adds	r3, r0, #1
 8013cbc:	d102      	bne.n	8013cc4 <_kill_r+0x1c>
 8013cbe:	682b      	ldr	r3, [r5, #0]
 8013cc0:	b103      	cbz	r3, 8013cc4 <_kill_r+0x1c>
 8013cc2:	6023      	str	r3, [r4, #0]
 8013cc4:	bd38      	pop	{r3, r4, r5, pc}
 8013cc6:	bf00      	nop
 8013cc8:	2400be78 	.word	0x2400be78

08013ccc <_getpid_r>:
 8013ccc:	f7ec be08 	b.w	80008e0 <_getpid>

08013cd0 <_fstat_r>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	4d07      	ldr	r5, [pc, #28]	; (8013cf0 <_fstat_r+0x20>)
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	4608      	mov	r0, r1
 8013cda:	4611      	mov	r1, r2
 8013cdc:	602b      	str	r3, [r5, #0]
 8013cde:	f7ec fe68 	bl	80009b2 <_fstat>
 8013ce2:	1c43      	adds	r3, r0, #1
 8013ce4:	d102      	bne.n	8013cec <_fstat_r+0x1c>
 8013ce6:	682b      	ldr	r3, [r5, #0]
 8013ce8:	b103      	cbz	r3, 8013cec <_fstat_r+0x1c>
 8013cea:	6023      	str	r3, [r4, #0]
 8013cec:	bd38      	pop	{r3, r4, r5, pc}
 8013cee:	bf00      	nop
 8013cf0:	2400be78 	.word	0x2400be78

08013cf4 <_isatty_r>:
 8013cf4:	b538      	push	{r3, r4, r5, lr}
 8013cf6:	4d06      	ldr	r5, [pc, #24]	; (8013d10 <_isatty_r+0x1c>)
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	4608      	mov	r0, r1
 8013cfe:	602b      	str	r3, [r5, #0]
 8013d00:	f7ec fe67 	bl	80009d2 <_isatty>
 8013d04:	1c43      	adds	r3, r0, #1
 8013d06:	d102      	bne.n	8013d0e <_isatty_r+0x1a>
 8013d08:	682b      	ldr	r3, [r5, #0]
 8013d0a:	b103      	cbz	r3, 8013d0e <_isatty_r+0x1a>
 8013d0c:	6023      	str	r3, [r4, #0]
 8013d0e:	bd38      	pop	{r3, r4, r5, pc}
 8013d10:	2400be78 	.word	0x2400be78

08013d14 <_init>:
 8013d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d16:	bf00      	nop
 8013d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d1a:	bc08      	pop	{r3}
 8013d1c:	469e      	mov	lr, r3
 8013d1e:	4770      	bx	lr

08013d20 <_fini>:
 8013d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d22:	bf00      	nop
 8013d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d26:	bc08      	pop	{r3}
 8013d28:	469e      	mov	lr, r3
 8013d2a:	4770      	bx	lr
