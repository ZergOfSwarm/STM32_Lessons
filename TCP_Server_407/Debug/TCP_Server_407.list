
TCP_Server_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016eac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038e4  0801703c  0801703c  0002703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a920  0801a920  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801a920  0801a920  0002a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a928  0801a928  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a928  0801a928  0002a928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a92c  0801a92c  0002a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801a930  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030080  2**0
                  CONTENTS
 10 .bss          0000d80c  20000080  20000080  00030080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d88c  2000d88c  00030080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049686  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000084bb  00000000  00000000  00079736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002358  00000000  00000000  00081bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002218  00000000  00000000  00083f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011ffc  00000000  00000000  00086168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000364f2  00000000  00000000  00098164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1d69  00000000  00000000  000ce656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c03bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009cec  00000000  00000000  001c0414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017024 	.word	0x08017024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08017024 	.word	0x08017024

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d013      	beq.n	80005d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d00b      	beq.n	80005d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c0:	e000      	b.n	80005c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0f9      	beq.n	80005c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <_write>:
static void MX_USART3_UART_Init(void);
void StartDefaultTask(void *argument);
void StartTask(void *argument);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 50);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	2332      	movs	r3, #50	; 0x32
 80005fa:	68b9      	ldr	r1, [r7, #8]
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <_write+0x48>)
 80005fe:	f003 f878 	bl	80036f2 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	e009      	b.n	800061c <_write+0x34>
		ITM_SendChar(*ptr++);
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	60ba      	str	r2, [r7, #8]
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ffc1 	bl	8000598 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	3301      	adds	r3, #1
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	697a      	ldr	r2, [r7, #20]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <_write+0x20>
	}
	return len;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20004c24 	.word	0x20004c24

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fc30 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f82a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8bc 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000644:	f000 f890 	bl	8000768 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello world! \r\n");
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <main+0x44>)
 800064a:	f015 fc0d 	bl	8015e68 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800064e:	f004 f8cb 	bl	80047e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <main+0x48>)
 8000654:	2100      	movs	r1, #0
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0x4c>)
 8000658:	f004 f925 	bl	80048a6 <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a09      	ldr	r2, [pc, #36]	; (8000684 <main+0x50>)
 8000660:	6013      	str	r3, [r2, #0]

  /* creation of myTask */
  myTaskHandle = osThreadNew(StartTask, NULL, &myTask_attributes);
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <main+0x54>)
 8000664:	2100      	movs	r1, #0
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <main+0x58>)
 8000668:	f004 f91d 	bl	80048a6 <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <main+0x5c>)
 8000670:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000672:	f004 f8dd 	bl	8004830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x42>
 8000678:	08017050 	.word	0x08017050
 800067c:	0801a64c 	.word	0x0801a64c
 8000680:	08000861 	.word	0x08000861
 8000684:	20004c20 	.word	0x20004c20
 8000688:	0801a670 	.word	0x0801a670
 800068c:	08000879 	.word	0x08000879
 8000690:	20004c68 	.word	0x20004c68

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f015 faf7 	bl	8015c96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b28      	ldr	r3, [pc, #160]	; (8000760 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <SystemClock_Config+0xcc>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	; (8000760 <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b22      	ldr	r3, [pc, #136]	; (8000764 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1f      	ldr	r3, [pc, #124]	; (8000764 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000708:	23a8      	movs	r3, #168	; 0xa8
 800070a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000710:	2304      	movs	r3, #4
 8000712:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f002 f849 	bl	80027b0 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000724:	f000 f8c2 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000734:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2105      	movs	r1, #5
 8000746:	4618      	mov	r0, r3
 8000748:	f002 faaa 	bl	8002ca0 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000752:	f000 f8ab 	bl	80008ac <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART3_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 80007a0:	f002 ff5a 	bl	8003658 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f87f 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20004c24 	.word	0x20004c24
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <MX_GPIO_Init+0xa0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <MX_GPIO_Init+0xa0>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <MX_GPIO_Init+0xa0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <MX_GPIO_Init+0xa0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1d      	ldr	r2, [pc, #116]	; (800085c <MX_GPIO_Init+0xa0>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_GPIO_Init+0xa0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_GPIO_Init+0xa0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a16      	ldr	r2, [pc, #88]	; (800085c <MX_GPIO_Init+0xa0>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_GPIO_Init+0xa0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_GPIO_Init+0xa0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a0f      	ldr	r2, [pc, #60]	; (800085c <MX_GPIO_Init+0xa0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_GPIO_Init+0xa0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_GPIO_Init+0xa0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <MX_GPIO_Init+0xa0>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_GPIO_Init+0xa0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

}
 800084e:	bf00      	nop
 8000850:	371c      	adds	r7, #28
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000868:	f003 fa0c 	bl	8003c84 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 800086c:	f000 fad8 	bl	8000e20 <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f004 f8aa 	bl	80049ca <osDelay>
 8000876:	e7fb      	b.n	8000870 <StartDefaultTask+0x10>

08000878 <StartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask */
void StartTask(void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000880:	2001      	movs	r0, #1
 8000882:	f004 f8a2 	bl	80049ca <osDelay>
 8000886:	e7fb      	b.n	8000880 <StartTask+0x8>

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 fb21 	bl	8000ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40002000 	.word	0x40002000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <HAL_MspInit+0x54>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_MspInit+0x54>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f000 fbeb 	bl	80010d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <HAL_UART_MspInit+0xc4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d14b      	bne.n	80009ca <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a20      	ldr	r2, [pc, #128]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0xc8>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000998:	2307      	movs	r3, #7
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480e      	ldr	r0, [pc, #56]	; (80009dc <HAL_UART_MspInit+0xcc>)
 80009a4:	f001 fd68 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_UART_MspInit+0xd0>)
 80009c6:	f001 fd57 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004800 	.word	0x40004800
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	202d      	movs	r0, #45	; 0x2d
 80009fa:	f000 fb6d 	bl	80010d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009fe:	202d      	movs	r0, #45	; 0x2d
 8000a00:	f000 fb86 	bl	8001110 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <HAL_InitTick+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_InitTick+0xa4>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_InitTick+0xa4>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a20:	f107 0210 	add.w	r2, r7, #16
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f002 fb34 	bl	8003098 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a30:	f002 fb0a 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8000a34:	4603      	mov	r3, r0
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	3b01      	subs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_InitTick+0xac>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <HAL_InitTick+0xb0>)
 8000a4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_InitTick+0xac>)
 8000a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_InitTick+0xac>)
 8000a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_InitTick+0xac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_InitTick+0xac>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <HAL_InitTick+0xac>)
 8000a6a:	f002 fb47 	bl	80030fc <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d104      	bne.n	8000a7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <HAL_InitTick+0xac>)
 8000a76:	f002 fb9b 	bl	80031b0 <HAL_TIM_Base_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	20004c6c 	.word	0x20004c6c
 8000a94:	40002000 	.word	0x40002000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000aca:	f002 fbe1 	bl	8003290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20004c6c 	.word	0x20004c6c

08000ad8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <ETH_IRQHandler+0x10>)
 8000ade:	f000 ff09 	bl	80018f4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000672c 	.word	0x2000672c

08000aec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	return 1;
 8000af0:	2301      	movs	r3, #1
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_kill>:

int _kill(int pid, int sig)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <_kill+0x20>)
 8000b08:	2216      	movs	r2, #22
 8000b0a:	601a      	str	r2, [r3, #0]
	return -1;
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	2000d878 	.word	0x2000d878

08000b20 <_exit>:

void _exit (int status)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ffe5 	bl	8000afc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b32:	e7fe      	b.n	8000b32 <_exit+0x12>

08000b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
	}

return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
	return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d205      	bcs.n	8000c14 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <_sbrk+0x6c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	371c      	adds	r7, #28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	20020000 	.word	0x20020000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	2000009c 	.word	0x2000009c
 8000c40:	2000d890 	.word	0x2000d890
 8000c44:	2000d878 	.word	0x2000d878

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <tcp_thread>:
char smsg[200];


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0a2      	sub	sp, #136	; 0x88
 8000c70:	af02      	add	r7, sp, #8
 8000c72:	6078      	str	r0, [r7, #4]
	err_t err, accept_err, recv_error;
	int cleaned_len = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	67fb      	str	r3, [r7, #124]	; 0x7c
	char cleaned_msg[100];//переменную для хранения очищенного сообщения
	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2010      	movs	r0, #16
 8000c7e:	f007 fc5b 	bl	8008538 <netconn_new_with_proto_and_callback>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a58      	ldr	r2, [pc, #352]	; (8000de8 <tcp_thread+0x17c>)
 8000c86:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8000c88:	4b57      	ldr	r3, [pc, #348]	; (8000de8 <tcp_thread+0x17c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80a6 	beq.w	8000dde <tcp_thread+0x172>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, 10);// port
 8000c92:	4b55      	ldr	r3, [pc, #340]	; (8000de8 <tcp_thread+0x17c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	220a      	movs	r2, #10
 8000c98:	4954      	ldr	r1, [pc, #336]	; (8000dec <tcp_thread+0x180>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f007 fd06 	bl	80086ac <netconn_bind>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

		if (err == ERR_OK)
 8000ca6:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f040 8092 	bne.w	8000dd4 <tcp_thread+0x168>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <tcp_thread+0x17c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	21ff      	movs	r1, #255	; 0xff
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 fd30 	bl	800871c <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <tcp_thread+0x17c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	494b      	ldr	r1, [pc, #300]	; (8000df0 <tcp_thread+0x184>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f007 fd56 	bl	8008774 <netconn_accept>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8000cce:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f2      	bne.n	8000cbc <tcp_thread+0x50>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000cd6:	e069      	b.n	8000dac <tcp_thread+0x140>
					{
						/* Extrct the address and port in case they are required */
						ip_addr_t client_addr;
						ip_addr_copy(client_addr, *netbuf_fromaddr(buf));  // get the address of the client
 8000cd8:	4b46      	ldr	r3, [pc, #280]	; (8000df4 <tcp_thread+0x188>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	60fb      	str	r3, [r7, #12]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <tcp_thread+0x188>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	899a      	ldrh	r2, [r3, #12]
 8000ce6:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <tcp_thread+0x18c>)
 8000ce8:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <tcp_thread+0x188>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6859      	ldr	r1, [r3, #4]
 8000cf2:	4b40      	ldr	r3, [pc, #256]	; (8000df4 <tcp_thread+0x188>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	895b      	ldrh	r3, [r3, #10]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	483f      	ldr	r0, [pc, #252]	; (8000dfc <tcp_thread+0x190>)
 8000cfe:	f015 f9d8 	bl	80160b2 <strncpy>
							printf("We received a message - %s\r\n",msg);
 8000d02:	493e      	ldr	r1, [pc, #248]	; (8000dfc <tcp_thread+0x190>)
 8000d04:	483e      	ldr	r0, [pc, #248]	; (8000e00 <tcp_thread+0x194>)
 8000d06:	f015 f829 	bl	8015d5c <iprintf>

							// Сохраните очищенное сообщение в переменной msg
//							strncpy(msg, cleaned_msg, sizeof(msg)); // Уберем один байт для нулевого символа
//							msg[sizeof(msg) - 1] = '\0'; // Установим нулевой символ вручную

							if (strlen(msg) == 2 && strcmp(msg, "ON") == 0) {
 8000d0a:	483c      	ldr	r0, [pc, #240]	; (8000dfc <tcp_thread+0x190>)
 8000d0c:	f7ff fa6a 	bl	80001e4 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d10b      	bne.n	8000d2e <tcp_thread+0xc2>
 8000d16:	493b      	ldr	r1, [pc, #236]	; (8000e04 <tcp_thread+0x198>)
 8000d18:	4838      	ldr	r0, [pc, #224]	; (8000dfc <tcp_thread+0x190>)
 8000d1a:	f7ff fa59 	bl	80001d0 <strcmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <tcp_thread+0xc2>
								printf("LED is - %s\r\n",msg);
 8000d24:	4935      	ldr	r1, [pc, #212]	; (8000dfc <tcp_thread+0x190>)
 8000d26:	4838      	ldr	r0, [pc, #224]	; (8000e08 <tcp_thread+0x19c>)
 8000d28:	f015 f818 	bl	8015d5c <iprintf>
 8000d2c:	e015      	b.n	8000d5a <tcp_thread+0xee>
							} else if  (strlen(msg) == 3 && strcmp(msg, "OFF") == 0) {
 8000d2e:	4833      	ldr	r0, [pc, #204]	; (8000dfc <tcp_thread+0x190>)
 8000d30:	f7ff fa58 	bl	80001e4 <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d10b      	bne.n	8000d52 <tcp_thread+0xe6>
 8000d3a:	4934      	ldr	r1, [pc, #208]	; (8000e0c <tcp_thread+0x1a0>)
 8000d3c:	482f      	ldr	r0, [pc, #188]	; (8000dfc <tcp_thread+0x190>)
 8000d3e:	f7ff fa47 	bl	80001d0 <strcmp>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d104      	bne.n	8000d52 <tcp_thread+0xe6>
								printf("LED is - %s\r\n",msg);
 8000d48:	492c      	ldr	r1, [pc, #176]	; (8000dfc <tcp_thread+0x190>)
 8000d4a:	482f      	ldr	r0, [pc, #188]	; (8000e08 <tcp_thread+0x19c>)
 8000d4c:	f015 f806 	bl	8015d5c <iprintf>
 8000d50:	e003      	b.n	8000d5a <tcp_thread+0xee>
							} else {
							    // Код, выполняемый при неверном значении msg
							    printf("Incorrect value of msg: %s\n", msg);
 8000d52:	492a      	ldr	r1, [pc, #168]	; (8000dfc <tcp_thread+0x190>)
 8000d54:	482e      	ldr	r0, [pc, #184]	; (8000e10 <tcp_thread+0x1a4>)
 8000d56:	f015 f801 	bl	8015d5c <iprintf>
							}
						    printf("The number of characters: %d\n", strlen(msg));
 8000d5a:	4828      	ldr	r0, [pc, #160]	; (8000dfc <tcp_thread+0x190>)
 8000d5c:	f7ff fa42 	bl	80001e4 <strlen>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4619      	mov	r1, r3
 8000d64:	482b      	ldr	r0, [pc, #172]	; (8000e14 <tcp_thread+0x1a8>)
 8000d66:	f014 fff9 	bl	8015d5c <iprintf>
							// Or modify the message received, so that we can send it back to the client
							int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
 8000d6a:	4a24      	ldr	r2, [pc, #144]	; (8000dfc <tcp_thread+0x190>)
 8000d6c:	492a      	ldr	r1, [pc, #168]	; (8000e18 <tcp_thread+0x1ac>)
 8000d6e:	482b      	ldr	r0, [pc, #172]	; (8000e1c <tcp_thread+0x1b0>)
 8000d70:	f015 f93c 	bl	8015fec <siprintf>
 8000d74:	6778      	str	r0, [r7, #116]	; 0x74

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000d76:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <tcp_thread+0x184>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	4926      	ldr	r1, [pc, #152]	; (8000e1c <tcp_thread+0x1b0>)
 8000d84:	f007 ff78 	bl	8008c78 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 8000d88:	2264      	movs	r2, #100	; 0x64
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	481b      	ldr	r0, [pc, #108]	; (8000dfc <tcp_thread+0x190>)
 8000d8e:	f014 ff82 	bl	8015c96 <memset>
						}
						while (netbuf_next(buf) >0);
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <tcp_thread+0x188>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f009 fc8a 	bl	800a6b0 <netbuf_next>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	dca3      	bgt.n	8000cea <tcp_thread+0x7e>

						netbuf_delete(buf);
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <tcp_thread+0x188>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f009 fc62 	bl	800a670 <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <tcp_thread+0x184>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4910      	ldr	r1, [pc, #64]	; (8000df4 <tcp_thread+0x188>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f007 fee6 	bl	8008b84 <netconn_recv>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d08c      	beq.n	8000cd8 <tcp_thread+0x6c>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <tcp_thread+0x184>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f008 f85a 	bl	8008e7c <netconn_close>
					netconn_delete(newconn);
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <tcp_thread+0x184>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f007 fc51 	bl	8008674 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8000dd2:	e773      	b.n	8000cbc <tcp_thread+0x50>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <tcp_thread+0x17c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f007 fc4b 	bl	8008674 <netconn_delete>
		}
	}
}
 8000dde:	bf00      	nop
 8000de0:	3780      	adds	r7, #128	; 0x80
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000a0 	.word	0x200000a0
 8000dec:	0801a7c0 	.word	0x0801a7c0
 8000df0:	200000a4 	.word	0x200000a4
 8000df4:	200000a8 	.word	0x200000a8
 8000df8:	200000ac 	.word	0x200000ac
 8000dfc:	20004d7c 	.word	0x20004d7c
 8000e00:	08017060 	.word	0x08017060
 8000e04:	08017080 	.word	0x08017080
 8000e08:	08017084 	.word	0x08017084
 8000e0c:	08017094 	.word	0x08017094
 8000e10:	08017098 	.word	0x08017098
 8000e14:	080170b4 	.word	0x080170b4
 8000e18:	080170d4 	.word	0x080170d4
 8000e1c:	20004cb4 	.word	0x20004cb4

08000e20 <tcpserver_init>:


void tcpserver_init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af02      	add	r7, sp, #8
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000e26:	2318      	movs	r3, #24
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4903      	ldr	r1, [pc, #12]	; (8000e40 <tcpserver_init+0x20>)
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <tcpserver_init+0x24>)
 8000e34:	f014 fd9e 	bl	8015974 <sys_thread_new>
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	08000c6d 	.word	0x08000c6d
 8000e44:	080170f4 	.word	0x080170f4

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e72:	f7ff fee9 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f014 feb1 	bl	8015bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fbdb 	bl	8000634 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e8c:	0801a930 	.word	0x0801a930
  ldr r2, =_sbss
 8000e90:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e94:	2000d88c 	.word	0x2000d88c

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f8fc 	bl	80010c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f7ff fd8a 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fcf2 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20004de0 	.word	0x20004de0

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20004de0 	.word	0x20004de0

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff4c 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ea:	f7ff ff61 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	6978      	ldr	r0, [r7, #20]
 80010f6:	f7ff ffb1 	bl	800105c <NVIC_EncodePriority>
 80010fa:	4602      	mov	r2, r0
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff80 	bl	8001008 <__NVIC_SetPriority>
}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff54 	bl	8000fcc <__NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800113c:	4baa      	ldr	r3, [pc, #680]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 800113e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e183      	b.n	800145a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f002 feee 	bl	8003f48 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	4b9e      	ldr	r3, [pc, #632]	; (80013ec <HAL_ETH_Init+0x2c0>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a9d      	ldr	r2, [pc, #628]	; (80013ec <HAL_ETH_Init+0x2c0>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6453      	str	r3, [r2, #68]	; 0x44
 800117c:	4b9b      	ldr	r3, [pc, #620]	; (80013ec <HAL_ETH_Init+0x2c0>)
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001188:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a98      	ldr	r2, [pc, #608]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800118e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001192:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001194:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4994      	ldr	r1, [pc, #592]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011ba:	f7ff fea5 	bl	8000f08 <HAL_GetTick>
 80011be:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011c0:	e011      	b.n	80011e6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011c2:	f7ff fea1 	bl	8000f08 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011d0:	d909      	bls.n	80011e6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e139      	b.n	800145a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1e4      	bne.n	80011c2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f023 031c 	bic.w	r3, r3, #28
 8001206:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001208:	f001 ff12 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 800120c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4a78      	ldr	r2, [pc, #480]	; (80013f4 <HAL_ETH_Init+0x2c8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d908      	bls.n	8001228 <HAL_ETH_Init+0xfc>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4a77      	ldr	r2, [pc, #476]	; (80013f8 <HAL_ETH_Init+0x2cc>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d804      	bhi.n	8001228 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e027      	b.n	8001278 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	4a73      	ldr	r2, [pc, #460]	; (80013f8 <HAL_ETH_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d908      	bls.n	8001242 <HAL_ETH_Init+0x116>
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	4a6d      	ldr	r2, [pc, #436]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d204      	bcs.n	8001242 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f043 030c 	orr.w	r3, r3, #12
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	e01a      	b.n	8001278 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d303      	bcc.n	8001252 <HAL_ETH_Init+0x126>
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4a6b      	ldr	r2, [pc, #428]	; (80013fc <HAL_ETH_Init+0x2d0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d911      	bls.n	8001276 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4a69      	ldr	r2, [pc, #420]	; (80013fc <HAL_ETH_Init+0x2d0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d908      	bls.n	800126c <HAL_ETH_Init+0x140>
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4a68      	ldr	r2, [pc, #416]	; (8001400 <HAL_ETH_Init+0x2d4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d804      	bhi.n	800126c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e005      	b.n	8001278 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e000      	b.n	8001278 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001276:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001280:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001284:	2100      	movs	r1, #0
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fc17 	bl	8001aba <HAL_ETH_WritePHYRegister>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00b      	beq.n	80012aa <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001296:	6939      	ldr	r1, [r7, #16]
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fdcd 	bl	8001e38 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0d7      	b.n	800145a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012aa:	20ff      	movs	r0, #255	; 0xff
 80012ac:	f7ff fe38 	bl	8000f20 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a5 	beq.w	8001404 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fe25 	bl	8000f08 <HAL_GetTick>
 80012be:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	461a      	mov	r2, r3
 80012c6:	2101      	movs	r1, #1
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fb8e 	bl	80019ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012ce:	f7ff fe1b 	bl	8000f08 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d90f      	bls.n	8001300 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 fda6 	bl	8001e38 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e0ac      	b.n	800145a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0da      	beq.n	80012c0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800130a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fbd2 	bl	8001aba <HAL_ETH_WritePHYRegister>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001320:	6939      	ldr	r1, [r7, #16]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fd88 	bl	8001e38 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001330:	2301      	movs	r3, #1
 8001332:	e092      	b.n	800145a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001334:	f7ff fde8 	bl	8000f08 <HAL_GetTick>
 8001338:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	461a      	mov	r2, r3
 8001340:	2101      	movs	r1, #1
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fb51 	bl	80019ea <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001348:	f7ff fdde 	bl	8000f08 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4293      	cmp	r3, r2
 8001358:	d90f      	bls.n	800137a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800135e:	6939      	ldr	r1, [r7, #16]
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fd69 	bl	8001e38 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e06f      	b.n	800145a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0da      	beq.n	800133a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	461a      	mov	r2, r3
 800138a:	2110      	movs	r1, #16
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fb2c 	bl	80019ea <HAL_ETH_ReadPHYRegister>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fd4a 	bl	8001e38 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013ac:	2301      	movs	r3, #1
 80013ae:	e054      	b.n	800145a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	e002      	b.n	80013ca <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	e035      	b.n	8001448 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e030      	b.n	8001448 <HAL_ETH_Init+0x31c>
 80013e6:	bf00      	nop
 80013e8:	03938700 	.word	0x03938700
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40013800 	.word	0x40013800
 80013f4:	01312cff 	.word	0x01312cff
 80013f8:	02160ebf 	.word	0x02160ebf
 80013fc:	05f5e0ff 	.word	0x05f5e0ff
 8001400:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	085b      	lsrs	r3, r3, #1
 8001412:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001414:	4313      	orrs	r3, r2
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	2100      	movs	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fb4c 	bl	8001aba <HAL_ETH_WritePHYRegister>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800142c:	6939      	ldr	r1, [r7, #16]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fd02 	bl	8001e38 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e00c      	b.n	800145a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001440:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001444:	f7ff fd6c 	bl	8000f20 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001448:	6939      	ldr	r1, [r7, #16]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fcf4 	bl	8001e38 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop

08001464 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_ETH_DMATxDescListInit+0x20>
 8001480:	2302      	movs	r3, #2
 8001482:	e052      	b.n	800152a <HAL_ETH_DMATxDescListInit+0xc6>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e030      	b.n	8001502 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	015b      	lsls	r3, r3, #5
 80014a4:	68ba      	ldr	r2, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014b0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d105      	bne.n	80014da <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3b01      	subs	r3, #1
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d208      	bcs.n	80014f6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	3301      	adds	r3, #1
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	e002      	b.n	80014fc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	3301      	adds	r3, #1
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d3ca      	bcc.n	80014a0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001514:	3310      	adds	r3, #16
 8001516:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001536:	b480      	push	{r7}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ETH_DMARxDescListInit+0x20>
 8001552:	2302      	movs	r3, #2
 8001554:	e056      	b.n	8001604 <HAL_ETH_DMARxDescListInit+0xce>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e034      	b.n	80015dc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001582:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800158a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	461a      	mov	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d208      	bcs.n	80015d0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	015b      	lsls	r3, r3, #5
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	4413      	add	r3, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	e002      	b.n	80015d6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697a      	ldr	r2, [r7, #20]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3c6      	bcc.n	8001572 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	330c      	adds	r3, #12
 80015f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_ETH_TransmitFrame+0x24>
 8001630:	2302      	movs	r3, #2
 8001632:	e0cd      	b.n	80017d0 <HAL_ETH_TransmitFrame+0x1c0>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800165a:	2301      	movs	r3, #1
 800165c:	e0b8      	b.n	80017d0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	da09      	bge.n	800167c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2212      	movs	r2, #18
 800166c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0a9      	b.n	80017d0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001682:	4293      	cmp	r3, r2
 8001684:	d915      	bls.n	80016b2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	4a54      	ldr	r2, [pc, #336]	; (80017dc <HAL_ETH_TransmitFrame+0x1cc>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0a9b      	lsrs	r3, r3, #10
 8001690:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_ETH_TransmitFrame+0x1cc>)
 8001696:	fba3 1302 	umull	r1, r3, r3, r2
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e001      	b.n	80016b6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80016b2:	2301      	movs	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d11c      	bne.n	80016f6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016ca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016d6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016e6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f4:	e04b      	b.n	800178e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	e044      	b.n	8001786 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800170a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d107      	bne.n	8001722 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001720:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800172a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3b01      	subs	r3, #1
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	429a      	cmp	r2, r3
 8001734:	d116      	bne.n	8001764 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001744:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <HAL_ETH_TransmitFrame+0x1d0>)
 800174a:	fb02 f203 	mul.w	r2, r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4413      	add	r3, r2
 8001752:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001756:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001762:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001772:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	3301      	adds	r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	429a      	cmp	r2, r3
 800178c:	d3b6      	bcc.n	80016fc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	3314      	adds	r3, #20
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	3314      	adds	r3, #20
 80017ac:	2204      	movs	r2, #4
 80017ae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b8:	3304      	adds	r3, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	ac02b00b 	.word	0xac02b00b
 80017e0:	fffffa0c 	.word	0xfffffa0c

080017e4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e074      	b.n	80018e8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2202      	movs	r2, #2
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800180e:	e05a      	b.n	80018c6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001824:	d10d      	bne.n	8001842 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
 8001840:	e041      	b.n	80018c6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10b      	bne.n	8001868 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
 8001866:	e02e      	b.n	80018c6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187e:	2b01      	cmp	r3, #1
 8001880:	d103      	bne.n	800188a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001896:	1f1a      	subs	r2, r3, #4
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	461a      	mov	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e010      	b.n	80018e8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db02      	blt.n	80018d6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d99c      	bls.n	8001810 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001904:	3314      	adds	r3, #20
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190c:	2b40      	cmp	r3, #64	; 0x40
 800190e:	d112      	bne.n	8001936 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f002 fbc7 	bl	80040a4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191e:	3314      	adds	r3, #20
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001934:	e01b      	b.n	800196e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193e:	3314      	adds	r3, #20
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b01      	cmp	r3, #1
 8001948:	d111      	bne.n	800196e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f839 	bl	80019c2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	3314      	adds	r3, #20
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	3314      	adds	r3, #20
 8001978:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800197c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001986:	3314      	adds	r3, #20
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001992:	d112      	bne.n	80019ba <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f81e 	bl	80019d6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a2:	3314      	adds	r3, #20
 80019a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	460b      	mov	r3, r1
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b82      	cmp	r3, #130	; 0x82
 8001a0a:	d101      	bne.n	8001a10 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e050      	b.n	8001ab2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2282      	movs	r2, #130	; 0x82
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 031c 	and.w	r3, r3, #28
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8a1b      	ldrh	r3, [r3, #16]
 8001a2c:	02db      	lsls	r3, r3, #11
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	019b      	lsls	r3, r3, #6
 8001a3a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0302 	bic.w	r3, r3, #2
 8001a4a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a5c:	f7ff fa54 	bl	8000f08 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a62:	e015      	b.n	8001a90 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a64:	f7ff fa50 	bl	8000f08 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d309      	bcc.n	8001a88 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e014      	b.n	8001ab2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1e4      	bne.n	8001a64 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b42      	cmp	r3, #66	; 0x42
 8001ada:	d101      	bne.n	8001ae0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
 8001ade:	e04e      	b.n	8001b7e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2242      	movs	r2, #66	; 0x42
 8001ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 031c 	and.w	r3, r3, #28
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8a1b      	ldrh	r3, [r3, #16]
 8001afc:	02db      	lsls	r3, r3, #11
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b06:	897b      	ldrh	r3, [r7, #10]
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b36:	f7ff f9e7 	bl	8000f08 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b3c:	e015      	b.n	8001b6a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b3e:	f7ff f9e3 	bl	8000f08 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d309      	bcc.n	8001b62 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e00d      	b.n	8001b7e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1e4      	bne.n	8001b3e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_ETH_Start+0x16>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e01f      	b.n	8001bdc <HAL_ETH_Start+0x56>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fb45 	bl	800223c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fb7c 	bl	80022b0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fc13 	bl	80023e4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fbb0 	bl	8002324 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fbdd 	bl	8002384 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_ETH_Stop+0x16>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e01f      	b.n	8001c3a <HAL_ETH_Stop+0x56>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 fba2 	bl	8002354 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fbcf 	bl	80023b4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fb67 	bl	80022ea <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fbe1 	bl	80023e4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fb27 	bl	8002276 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_ETH_ConfigMAC+0x1c>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e0e4      	b.n	8001e2a <HAL_ETH_ConfigMAC+0x1e6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80b1 	beq.w	8001dda <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4b6c      	ldr	r3, [pc, #432]	; (8001e34 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c90:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c96:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c9c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ca2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ca8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001cae:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001cb4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001cba:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001cc0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001cc6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ccc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001cd2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f7ff f918 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d00:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d06:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d0c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d12:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d18:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d2a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d2c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f7ff f8f2 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d4c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d56:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d66:	4013      	ands	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d74:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d7a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d80:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d86:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d8c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff f8bb 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7ff f8a8 	bl	8000f20 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	61da      	str	r2, [r3, #28]
 8001dd8:	e01e      	b.n	8001e18 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001de8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f888 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	ff20810f 	.word	0xff20810f

08001e38 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0b0      	sub	sp, #192	; 0xc0
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e54:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e66:	2300      	movs	r3, #0
 8001e68:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e72:	2300      	movs	r3, #0
 8001e74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d103      	bne.n	8001e86 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e82:	663b      	str	r3, [r7, #96]	; 0x60
 8001e84:	e001      	b.n	8001e8a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e94:	2300      	movs	r3, #0
 8001e96:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ea4:	2340      	movs	r3, #64	; 0x40
 8001ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f10:	4bac      	ldr	r3, [pc, #688]	; (80021c4 <ETH_MACDMAConfig+0x38c>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f1c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f20:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f24:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f2a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f2e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f32:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f38:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f3c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f40:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f44:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f48:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f4c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f60:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7fe ffd7 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f7a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f7c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f80:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f84:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f8a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f90:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f96:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f9c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001fa0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fa8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001faa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f7fe ffb2 	bl	8000f20 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fce:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fd8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fe4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fec:	4013      	ands	r3, r2
 8001fee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ffc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ffe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002002:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002004:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002008:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800200a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800200e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002014:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002016:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002028:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002034:	2001      	movs	r0, #1
 8002036:	f7fe ff73 	bl	8000f20 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002044:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800205e:	2001      	movs	r0, #1
 8002060:	f7fe ff5e 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800207c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002080:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002092:	2304      	movs	r3, #4
 8002094:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800209c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020b6:	2300      	movs	r3, #0
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c2:	3318      	adds	r3, #24
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80020ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <ETH_MACDMAConfig+0x390>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020d6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020d8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020da:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020dc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020de:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020e0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020e2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020e4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020e6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020e8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020ea:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020ec:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020ee:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020f2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020f6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fc:	4313      	orrs	r3, r2
 80020fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210a:	3318      	adds	r3, #24
 800210c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002110:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211a:	3318      	adds	r3, #24
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe fefc 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002130:	3318      	adds	r3, #24
 8002132:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002136:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800213c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800213e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002140:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002144:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002148:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800214a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800214e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002152:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002170:	2001      	movs	r0, #1
 8002172:	f7fe fed5 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002182:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d10f      	bne.n	80021ac <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002194:	331c      	adds	r3, #28
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a8:	331c      	adds	r3, #28
 80021aa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	461a      	mov	r2, r3
 80021b2:	2100      	movs	r1, #0
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f809 	bl	80021cc <ETH_MACAddressConfig>
}
 80021ba:	bf00      	nop
 80021bc:	37c0      	adds	r7, #192	; 0xc0
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	ff20810f 	.word	0xff20810f
 80021c8:	f8de3f23 	.word	0xf8de3f23

080021cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3305      	adds	r3, #5
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	3204      	adds	r2, #4
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <ETH_MACAddressConfig+0x68>)
 80021ee:	4413      	add	r3, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3303      	adds	r3, #3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	061a      	lsls	r2, r3, #24
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3302      	adds	r3, #2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3301      	adds	r3, #1
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	4313      	orrs	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	7812      	ldrb	r2, [r2, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <ETH_MACAddressConfig+0x6c>)
 800221e:	4413      	add	r3, r2
 8002220:	461a      	mov	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40028040 	.word	0x40028040
 8002238:	40028044 	.word	0x40028044

0800223c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 f8e9 	bl	8002438 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0208 	bic.w	r2, r2, #8
 8002290:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800229a:	2001      	movs	r0, #1
 800229c:	f000 f8cc 	bl	8002438 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0204 	orr.w	r2, r2, #4
 80022ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022d4:	2001      	movs	r0, #1
 80022d6:	f000 f8af 	bl	8002438 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	601a      	str	r2, [r3, #0]
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0204 	bic.w	r2, r2, #4
 8002304:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800230e:	2001      	movs	r0, #1
 8002310:	f000 f892 	bl	8002438 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	3318      	adds	r3, #24
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	3318      	adds	r3, #24
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002364:	3318      	adds	r3, #24
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	3318      	adds	r3, #24
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	3318      	adds	r3, #24
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0202 	orr.w	r2, r2, #2
 80023a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a4:	3318      	adds	r3, #24
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c4:	3318      	adds	r3, #24
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0202 	bic.w	r2, r2, #2
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	3318      	adds	r3, #24
 80023d6:	601a      	str	r2, [r3, #0]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f8:	3318      	adds	r3, #24
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002408:	3318      	adds	r3, #24
 800240a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	3318      	adds	r3, #24
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 f80c 	bl	8002438 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242a:	3318      	adds	r3, #24
 800242c:	601a      	str	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <ETH_Delay+0x38>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <ETH_Delay+0x3c>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a5b      	lsrs	r3, r3, #9
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002454:	bf00      	nop
  } 
  while (Delay --);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <ETH_Delay+0x1c>
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000000 	.word	0x20000000
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e16b      	b.n	800276c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 815a 	bne.w	8002766 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d130      	bne.n	800252c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80b4 	beq.w	8002766 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b60      	ldr	r3, [pc, #384]	; (8002784 <HAL_GPIO_Init+0x30c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	4a5f      	ldr	r2, [pc, #380]	; (8002784 <HAL_GPIO_Init+0x30c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260c:	6453      	str	r3, [r2, #68]	; 0x44
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_GPIO_Init+0x30c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a5b      	ldr	r2, [pc, #364]	; (8002788 <HAL_GPIO_Init+0x310>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_GPIO_Init+0x314>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02b      	beq.n	800269e <HAL_GPIO_Init+0x226>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_GPIO_Init+0x318>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d025      	beq.n	800269a <HAL_GPIO_Init+0x222>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a50      	ldr	r2, [pc, #320]	; (8002794 <HAL_GPIO_Init+0x31c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01f      	beq.n	8002696 <HAL_GPIO_Init+0x21e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4f      	ldr	r2, [pc, #316]	; (8002798 <HAL_GPIO_Init+0x320>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x21a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4e      	ldr	r2, [pc, #312]	; (800279c <HAL_GPIO_Init+0x324>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x216>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4d      	ldr	r2, [pc, #308]	; (80027a0 <HAL_GPIO_Init+0x328>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x212>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_GPIO_Init+0x32c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x20e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4b      	ldr	r2, [pc, #300]	; (80027a8 <HAL_GPIO_Init+0x330>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x20a>
 800267e:	2307      	movs	r3, #7
 8002680:	e00e      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 8002682:	2308      	movs	r3, #8
 8002684:	e00c      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 8002686:	2306      	movs	r3, #6
 8002688:	e00a      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 800268a:	2305      	movs	r3, #5
 800268c:	e008      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 800268e:	2304      	movs	r3, #4
 8002690:	e006      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 8002692:	2303      	movs	r3, #3
 8002694:	e004      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 8002696:	2302      	movs	r3, #2
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_GPIO_Init+0x228>
 800269e:	2300      	movs	r3, #0
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f002 0203 	and.w	r2, r2, #3
 80026a6:	0092      	lsls	r2, r2, #2
 80026a8:	4093      	lsls	r3, r2
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b0:	4935      	ldr	r1, [pc, #212]	; (8002788 <HAL_GPIO_Init+0x310>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	089b      	lsrs	r3, r3, #2
 80026b6:	3302      	adds	r3, #2
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_GPIO_Init+0x334>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e2:	4a32      	ldr	r2, [pc, #200]	; (80027ac <HAL_GPIO_Init+0x334>)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_GPIO_Init+0x334>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800270c:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_GPIO_Init+0x334>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_GPIO_Init+0x334>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <HAL_GPIO_Init+0x334>)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_GPIO_Init+0x334>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002760:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_GPIO_Init+0x334>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3301      	adds	r3, #1
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2b0f      	cmp	r3, #15
 8002770:	f67f ae90 	bls.w	8002494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3724      	adds	r7, #36	; 0x24
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40013800 	.word	0x40013800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020400 	.word	0x40020400
 8002794:	40020800 	.word	0x40020800
 8002798:	40020c00 	.word	0x40020c00
 800279c:	40021000 	.word	0x40021000
 80027a0:	40021400 	.word	0x40021400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40021c00 	.word	0x40021c00
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e264      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d075      	beq.n	80028ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ce:	4ba3      	ldr	r3, [pc, #652]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d00c      	beq.n	80027f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	4ba0      	ldr	r3, [pc, #640]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d112      	bne.n	800280c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e6:	4b9d      	ldr	r3, [pc, #628]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f2:	d10b      	bne.n	800280c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	4b99      	ldr	r3, [pc, #612]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05b      	beq.n	80028b8 <HAL_RCC_OscConfig+0x108>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d157      	bne.n	80028b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e23f      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d106      	bne.n	8002824 <HAL_RCC_OscConfig+0x74>
 8002816:	4b91      	ldr	r3, [pc, #580]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a90      	ldr	r2, [pc, #576]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e01d      	b.n	8002860 <HAL_RCC_OscConfig+0xb0>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x98>
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a87      	ldr	r2, [pc, #540]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e00b      	b.n	8002860 <HAL_RCC_OscConfig+0xb0>
 8002848:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a83      	ldr	r2, [pc, #524]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800284e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a80      	ldr	r2, [pc, #512]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800285a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fb4e 	bl	8000f08 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002870:	f7fe fb4a 	bl	8000f08 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e204      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0xc0>
 800288e:	e014      	b.n	80028ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fb3a 	bl	8000f08 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fb36 	bl	8000f08 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1f0      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	4b6c      	ldr	r3, [pc, #432]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f0      	bne.n	8002898 <HAL_RCC_OscConfig+0xe8>
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d063      	beq.n	800298e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c6:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d2:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d11c      	bne.n	8002918 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028de:	4b5f      	ldr	r3, [pc, #380]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	4b5c      	ldr	r3, [pc, #368]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_RCC_OscConfig+0x152>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d001      	beq.n	8002902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e1c4      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4952      	ldr	r1, [pc, #328]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002916:	e03a      	b.n	800298e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d020      	beq.n	8002962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <HAL_RCC_OscConfig+0x2b0>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002926:	f7fe faef 	bl	8000f08 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe faeb 	bl	8000f08 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e1a5      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4940      	ldr	r1, [pc, #256]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	e015      	b.n	800298e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002962:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_RCC_OscConfig+0x2b0>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe face 	bl	8000f08 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002970:	f7fe faca 	bl	8000f08 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e184      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d030      	beq.n	80029fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a2:	4b30      	ldr	r3, [pc, #192]	; (8002a64 <HAL_RCC_OscConfig+0x2b4>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe faae 	bl	8000f08 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b0:	f7fe faaa 	bl	8000f08 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e164      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x200>
 80029ce:	e015      	b.n	80029fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d0:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <HAL_RCC_OscConfig+0x2b4>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fa97 	bl	8000f08 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029de:	f7fe fa93 	bl	8000f08 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e14d      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a0 	beq.w	8002b4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0e:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x2b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d121      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <HAL_RCC_OscConfig+0x2b8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <HAL_RCC_OscConfig+0x2b8>)
 8002a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a52:	f7fe fa59 	bl	8000f08 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a58:	e011      	b.n	8002a7e <HAL_RCC_OscConfig+0x2ce>
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	42470000 	.word	0x42470000
 8002a64:	42470e80 	.word	0x42470e80
 8002a68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe fa4c 	bl	8000f08 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e106      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b85      	ldr	r3, [pc, #532]	; (8002c94 <HAL_RCC_OscConfig+0x4e4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
 8002a92:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a80      	ldr	r2, [pc, #512]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	e01c      	b.n	8002ada <HAL_RCC_OscConfig+0x32a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b05      	cmp	r3, #5
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x312>
 8002aa8:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a7a      	ldr	r2, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002aae:	f043 0304 	orr.w	r3, r3, #4
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	e00b      	b.n	8002ada <HAL_RCC_OscConfig+0x32a>
 8002ac2:	4b75      	ldr	r3, [pc, #468]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	4a74      	ldr	r2, [pc, #464]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002ad4:	f023 0304 	bic.w	r3, r3, #4
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d015      	beq.n	8002b0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fa11 	bl	8000f08 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe fa0d 	bl	8000f08 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e0c5      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ee      	beq.n	8002aea <HAL_RCC_OscConfig+0x33a>
 8002b0c:	e014      	b.n	8002b38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0e:	f7fe f9fb 	bl	8000f08 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe f9f7 	bl	8000f08 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0af      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ee      	bne.n	8002b16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d105      	bne.n	8002b4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3e:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	4a55      	ldr	r2, [pc, #340]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 809b 	beq.w	8002c8a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d05c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d141      	bne.n	8002bec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b68:	4b4c      	ldr	r3, [pc, #304]	; (8002c9c <HAL_RCC_OscConfig+0x4ec>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe f9cb 	bl	8000f08 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe f9c7 	bl	8000f08 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e081      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69da      	ldr	r2, [r3, #28]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	019b      	lsls	r3, r3, #6
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	4937      	ldr	r1, [pc, #220]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_OscConfig+0x4ec>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe f9a0 	bl	8000f08 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe f99c 	bl	8000f08 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e056      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bde:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x41c>
 8002bea:	e04e      	b.n	8002c8a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_OscConfig+0x4ec>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe f989 	bl	8000f08 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fe f985 	bl	8000f08 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e03f      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1f0      	bne.n	8002bfa <HAL_RCC_OscConfig+0x44a>
 8002c18:	e037      	b.n	8002c8a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e032      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c26:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_RCC_OscConfig+0x4e8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d028      	beq.n	8002c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d121      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d11a      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c56:	4013      	ands	r3, r2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c5c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d111      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40007000 	.word	0x40007000
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	42470060 	.word	0x42470060

08002ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0cc      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b68      	ldr	r3, [pc, #416]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d90c      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d044      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d119      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d003      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	d107      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5e:	4b3f      	ldr	r3, [pc, #252]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e06f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e067      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d7e:	4b37      	ldr	r3, [pc, #220]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	4934      	ldr	r1, [pc, #208]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d90:	f7fe f8ba 	bl	8000f08 <HAL_GetTick>
 8002d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d96:	e00a      	b.n	8002dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d98:	f7fe f8b6 	bl	8000f08 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e04f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	4b2b      	ldr	r3, [pc, #172]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 020c 	and.w	r2, r3, #12
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d1eb      	bne.n	8002d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b25      	ldr	r3, [pc, #148]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d20c      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f821 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	490a      	ldr	r1, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c0>)
 8002e38:	5ccb      	ldrb	r3, [r1, r3]
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1c8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fdcc 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	0801a694 	.word	0x0801a694
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e70:	b084      	sub	sp, #16
 8002e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e84:	4b67      	ldr	r3, [pc, #412]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d00d      	beq.n	8002eac <HAL_RCC_GetSysClockFreq+0x40>
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	f200 80bd 	bhi.w	8003010 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e9e:	e0b7      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ea2:	60bb      	str	r3, [r7, #8]
       break;
 8002ea4:	e0b7      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ea6:	4b61      	ldr	r3, [pc, #388]	; (800302c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ea8:	60bb      	str	r3, [r7, #8]
      break;
 8002eaa:	e0b4      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eac:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d04d      	beq.n	8002f5e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec2:	4b58      	ldr	r3, [pc, #352]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	ea02 0800 	and.w	r8, r2, r0
 8002eda:	ea03 0901 	and.w	r9, r3, r1
 8002ede:	4640      	mov	r0, r8
 8002ee0:	4649      	mov	r1, r9
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	014b      	lsls	r3, r1, #5
 8002eec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ef0:	0142      	lsls	r2, r0, #5
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	ebb0 0008 	subs.w	r0, r0, r8
 8002efa:	eb61 0109 	sbc.w	r1, r1, r9
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	018b      	lsls	r3, r1, #6
 8002f08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f0c:	0182      	lsls	r2, r0, #6
 8002f0e:	1a12      	subs	r2, r2, r0
 8002f10:	eb63 0301 	sbc.w	r3, r3, r1
 8002f14:	f04f 0000 	mov.w	r0, #0
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	00d9      	lsls	r1, r3, #3
 8002f1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f22:	00d0      	lsls	r0, r2, #3
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	eb12 0208 	adds.w	r2, r2, r8
 8002f2c:	eb43 0309 	adc.w	r3, r3, r9
 8002f30:	f04f 0000 	mov.w	r0, #0
 8002f34:	f04f 0100 	mov.w	r1, #0
 8002f38:	0259      	lsls	r1, r3, #9
 8002f3a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f3e:	0250      	lsls	r0, r2, #9
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	f7fd f9a6 	bl	80002a0 <__aeabi_uldivmod>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	e04a      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	461a      	mov	r2, r3
 8002f66:	f04f 0300 	mov.w	r3, #0
 8002f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	ea02 0400 	and.w	r4, r2, r0
 8002f76:	ea03 0501 	and.w	r5, r3, r1
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	014b      	lsls	r3, r1, #5
 8002f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f8c:	0142      	lsls	r2, r0, #5
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	1b00      	subs	r0, r0, r4
 8002f94:	eb61 0105 	sbc.w	r1, r1, r5
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	018b      	lsls	r3, r1, #6
 8002fa2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fa6:	0182      	lsls	r2, r0, #6
 8002fa8:	1a12      	subs	r2, r2, r0
 8002faa:	eb63 0301 	sbc.w	r3, r3, r1
 8002fae:	f04f 0000 	mov.w	r0, #0
 8002fb2:	f04f 0100 	mov.w	r1, #0
 8002fb6:	00d9      	lsls	r1, r3, #3
 8002fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fbc:	00d0      	lsls	r0, r2, #3
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	1912      	adds	r2, r2, r4
 8002fc4:	eb45 0303 	adc.w	r3, r5, r3
 8002fc8:	f04f 0000 	mov.w	r0, #0
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	0299      	lsls	r1, r3, #10
 8002fd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fd6:	0290      	lsls	r0, r2, #10
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	f7fd f95a 	bl	80002a0 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	60bb      	str	r3, [r7, #8]
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003012:	60bb      	str	r3, [r7, #8]
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	68bb      	ldr	r3, [r7, #8]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff0 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	; (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	0801a6a4 	.word	0x0801a6a4

08003070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003074:	f7ff ffdc 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	0b5b      	lsrs	r3, r3, #13
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40023800 	.word	0x40023800
 8003094:	0801a6a4 	.word	0x0801a6a4

08003098 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	220f      	movs	r2, #15
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCC_GetClockConfig+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e041      	b.n	8003192 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f839 	bl	800319a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f000 f9d8 	bl	80034f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e04e      	b.n	8003266 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a23      	ldr	r2, [pc, #140]	; (8003274 <HAL_TIM_Base_Start_IT+0xc4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d022      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f2:	d01d      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_TIM_Base_Start_IT+0xc8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start_IT+0xcc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_TIM_Base_Start_IT+0xd0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1b      	ldr	r2, [pc, #108]	; (8003284 <HAL_TIM_Base_Start_IT+0xd4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <HAL_TIM_Base_Start_IT+0xd8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_Base_Start_IT+0x80>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <HAL_TIM_Base_Start_IT+0xdc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d010      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	e007      	b.n	8003264 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40010000 	.word	0x40010000
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40010400 	.word	0x40010400
 8003288:	40014000 	.word	0x40014000
 800328c:	40001800 	.word	0x40001800

08003290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0202 	mvn.w	r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8ee 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f8e0 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f8f1 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b04      	cmp	r3, #4
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0204 	mvn.w	r2, #4
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8c4 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f8b6 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8c7 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d122      	bne.n	8003394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b08      	cmp	r3, #8
 800335a:	d11b      	bne.n	8003394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0208 	mvn.w	r2, #8
 8003364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2204      	movs	r2, #4
 800336a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f89a 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 8003380:	e005      	b.n	800338e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f88c 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f89d 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d122      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d11b      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0210 	mvn.w	r2, #16
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2208      	movs	r2, #8
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f870 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f862 	bl	80034a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f873 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0201 	mvn.w	r2, #1
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd fa3a 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342c:	2b80      	cmp	r3, #128	; 0x80
 800342e:	d107      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f902 	bl	8003644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d10e      	bne.n	800346c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d107      	bne.n	800346c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f838 	bl	80034dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b20      	cmp	r3, #32
 8003478:	d10e      	bne.n	8003498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b20      	cmp	r3, #32
 8003486:	d107      	bne.n	8003498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0220 	mvn.w	r2, #32
 8003490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8cc 	bl	8003630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003498:	bf00      	nop
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <TIM_Base_SetConfig+0x114>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350e:	d00f      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <TIM_Base_SetConfig+0x118>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00b      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3c      	ldr	r2, [pc, #240]	; (800360c <TIM_Base_SetConfig+0x11c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3b      	ldr	r2, [pc, #236]	; (8003610 <TIM_Base_SetConfig+0x120>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_Base_SetConfig+0x40>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a3a      	ldr	r2, [pc, #232]	; (8003614 <TIM_Base_SetConfig+0x124>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d108      	bne.n	8003542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <TIM_Base_SetConfig+0x114>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02b      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003550:	d027      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <TIM_Base_SetConfig+0x118>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d023      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <TIM_Base_SetConfig+0x11c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <TIM_Base_SetConfig+0x120>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01b      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a29      	ldr	r2, [pc, #164]	; (8003614 <TIM_Base_SetConfig+0x124>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d017      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a28      	ldr	r2, [pc, #160]	; (8003618 <TIM_Base_SetConfig+0x128>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a27      	ldr	r2, [pc, #156]	; (800361c <TIM_Base_SetConfig+0x12c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00f      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <TIM_Base_SetConfig+0x130>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00b      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a25      	ldr	r2, [pc, #148]	; (8003624 <TIM_Base_SetConfig+0x134>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a24      	ldr	r2, [pc, #144]	; (8003628 <TIM_Base_SetConfig+0x138>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d003      	beq.n	80035a2 <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a23      	ldr	r2, [pc, #140]	; (800362c <TIM_Base_SetConfig+0x13c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d108      	bne.n	80035b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0a      	ldr	r2, [pc, #40]	; (8003604 <TIM_Base_SetConfig+0x114>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0xf8>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <TIM_Base_SetConfig+0x124>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d103      	bne.n	80035f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	615a      	str	r2, [r3, #20]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40010000 	.word	0x40010000
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800
 8003610:	40000c00 	.word	0x40000c00
 8003614:	40010400 	.word	0x40010400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800
 8003624:	40001800 	.word	0x40001800
 8003628:	40001c00 	.word	0x40001c00
 800362c:	40002000 	.word	0x40002000

08003630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e03f      	b.n	80036ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7fd f946 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800369a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f929 	bl	80038f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08a      	sub	sp, #40	; 0x28
 80036f6:	af02      	add	r7, sp, #8
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b20      	cmp	r3, #32
 8003710:	d17c      	bne.n	800380c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_UART_Transmit+0x2c>
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e075      	b.n	800380e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit+0x3e>
 800372c:	2302      	movs	r3, #2
 800372e:	e06e      	b.n	800380e <HAL_UART_Transmit+0x11c>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2221      	movs	r2, #33	; 0x21
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003746:	f7fd fbdf 	bl	8000f08 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d108      	bne.n	8003774 <HAL_UART_Transmit+0x82>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d104      	bne.n	8003774 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	e003      	b.n	800377c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003784:	e02a      	b.n	80037dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f840 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e036      	b.n	800380e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	3302      	adds	r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	e007      	b.n	80037ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	3301      	adds	r3, #1
 80037cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1cf      	bne.n	8003786 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2200      	movs	r2, #0
 80037ee:	2140      	movs	r1, #64	; 0x40
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f810 	bl	8003816 <UART_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e006      	b.n	800380e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b090      	sub	sp, #64	; 0x40
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003826:	e050      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800382e:	d04c      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0x30>
 8003836:	f7fd fb67 	bl	8000f08 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003842:	429a      	cmp	r2, r3
 8003844:	d241      	bcs.n	80038ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	330c      	adds	r3, #12
 8003864:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003866:	637a      	str	r2, [r7, #52]	; 0x34
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800386c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800386e:	e841 2300 	strex	r3, r2, [r1]
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1e5      	bne.n	8003846 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3314      	adds	r3, #20
 8003880:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	613b      	str	r3, [r7, #16]
   return(result);
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3314      	adds	r3, #20
 8003898:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800389a:	623a      	str	r2, [r7, #32]
 800389c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	69f9      	ldr	r1, [r7, #28]
 80038a0:	6a3a      	ldr	r2, [r7, #32]
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d09f      	beq.n	8003828 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3740      	adds	r7, #64	; 0x40
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	b09f      	sub	sp, #124	; 0x7c
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390a:	68d9      	ldr	r1, [r3, #12]
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	ea40 0301 	orr.w	r3, r0, r1
 8003914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	4313      	orrs	r3, r2
 800392c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003938:	f021 010c 	bic.w	r1, r1, #12
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003942:	430b      	orrs	r3, r1
 8003944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003952:	6999      	ldr	r1, [r3, #24]
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	ea40 0301 	orr.w	r3, r0, r1
 800395c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4bc5      	ldr	r3, [pc, #788]	; (8003c78 <UART_SetConfig+0x384>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d004      	beq.n	8003972 <UART_SetConfig+0x7e>
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4bc3      	ldr	r3, [pc, #780]	; (8003c7c <UART_SetConfig+0x388>)
 800396e:	429a      	cmp	r2, r3
 8003970:	d103      	bne.n	800397a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003972:	f7ff fb7d 	bl	8003070 <HAL_RCC_GetPCLK2Freq>
 8003976:	6778      	str	r0, [r7, #116]	; 0x74
 8003978:	e002      	b.n	8003980 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397a:	f7ff fb65 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 800397e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003988:	f040 80b6 	bne.w	8003af8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800398c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398e:	461c      	mov	r4, r3
 8003990:	f04f 0500 	mov.w	r5, #0
 8003994:	4622      	mov	r2, r4
 8003996:	462b      	mov	r3, r5
 8003998:	1891      	adds	r1, r2, r2
 800399a:	6439      	str	r1, [r7, #64]	; 0x40
 800399c:	415b      	adcs	r3, r3
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039a4:	1912      	adds	r2, r2, r4
 80039a6:	eb45 0303 	adc.w	r3, r5, r3
 80039aa:	f04f 0000 	mov.w	r0, #0
 80039ae:	f04f 0100 	mov.w	r1, #0
 80039b2:	00d9      	lsls	r1, r3, #3
 80039b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039b8:	00d0      	lsls	r0, r2, #3
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	1911      	adds	r1, r2, r4
 80039c0:	6639      	str	r1, [r7, #96]	; 0x60
 80039c2:	416b      	adcs	r3, r5
 80039c4:	667b      	str	r3, [r7, #100]	; 0x64
 80039c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80039d4:	415b      	adcs	r3, r3
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039e0:	f7fc fc5e 	bl	80002a0 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4ba5      	ldr	r3, [pc, #660]	; (8003c80 <UART_SetConfig+0x38c>)
 80039ea:	fba3 2302 	umull	r2, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	011e      	lsls	r6, r3, #4
 80039f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f4:	461c      	mov	r4, r3
 80039f6:	f04f 0500 	mov.w	r5, #0
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	1891      	adds	r1, r2, r2
 8003a00:	6339      	str	r1, [r7, #48]	; 0x30
 8003a02:	415b      	adcs	r3, r3
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
 8003a06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a0a:	1912      	adds	r2, r2, r4
 8003a0c:	eb45 0303 	adc.w	r3, r5, r3
 8003a10:	f04f 0000 	mov.w	r0, #0
 8003a14:	f04f 0100 	mov.w	r1, #0
 8003a18:	00d9      	lsls	r1, r3, #3
 8003a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a1e:	00d0      	lsls	r0, r2, #3
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	1911      	adds	r1, r2, r4
 8003a26:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a28:	416b      	adcs	r3, r5
 8003a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	461a      	mov	r2, r3
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a46:	f7fc fc2b 	bl	80002a0 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4b8c      	ldr	r3, [pc, #560]	; (8003c80 <UART_SetConfig+0x38c>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a87      	ldr	r2, [pc, #540]	; (8003c80 <UART_SetConfig+0x38c>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a70:	441e      	add	r6, r3
 8003a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a74:	4618      	mov	r0, r3
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	1894      	adds	r4, r2, r2
 8003a80:	623c      	str	r4, [r7, #32]
 8003a82:	415b      	adcs	r3, r3
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a8a:	1812      	adds	r2, r2, r0
 8003a8c:	eb41 0303 	adc.w	r3, r1, r3
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	f04f 0500 	mov.w	r5, #0
 8003a98:	00dd      	lsls	r5, r3, #3
 8003a9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a9e:	00d4      	lsls	r4, r2, #3
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	462b      	mov	r3, r5
 8003aa4:	1814      	adds	r4, r2, r0
 8003aa6:	653c      	str	r4, [r7, #80]	; 0x50
 8003aa8:	414b      	adcs	r3, r1
 8003aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8003aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	1891      	adds	r1, r2, r2
 8003ab8:	61b9      	str	r1, [r7, #24]
 8003aba:	415b      	adcs	r3, r3
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ac6:	f7fc fbeb 	bl	80002a0 <__aeabi_uldivmod>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <UART_SetConfig+0x38c>)
 8003ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	2164      	movs	r1, #100	; 0x64
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	3332      	adds	r3, #50	; 0x32
 8003ae2:	4a67      	ldr	r2, [pc, #412]	; (8003c80 <UART_SetConfig+0x38c>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	f003 0207 	and.w	r2, r3, #7
 8003aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4432      	add	r2, r6
 8003af4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003af6:	e0b9      	b.n	8003c6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003afa:	461c      	mov	r4, r3
 8003afc:	f04f 0500 	mov.w	r5, #0
 8003b00:	4622      	mov	r2, r4
 8003b02:	462b      	mov	r3, r5
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	6139      	str	r1, [r7, #16]
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003b10:	1912      	adds	r2, r2, r4
 8003b12:	eb45 0303 	adc.w	r3, r5, r3
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	00d9      	lsls	r1, r3, #3
 8003b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b24:	00d0      	lsls	r0, r2, #3
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	eb12 0804 	adds.w	r8, r2, r4
 8003b2e:	eb43 0905 	adc.w	r9, r3, r5
 8003b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	008b      	lsls	r3, r1, #2
 8003b46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b4a:	0082      	lsls	r2, r0, #2
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	4649      	mov	r1, r9
 8003b50:	f7fc fba6 	bl	80002a0 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4b49      	ldr	r3, [pc, #292]	; (8003c80 <UART_SetConfig+0x38c>)
 8003b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	011e      	lsls	r6, r3, #4
 8003b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b64:	4618      	mov	r0, r3
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	1894      	adds	r4, r2, r2
 8003b70:	60bc      	str	r4, [r7, #8]
 8003b72:	415b      	adcs	r3, r3
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b7a:	1812      	adds	r2, r2, r0
 8003b7c:	eb41 0303 	adc.w	r3, r1, r3
 8003b80:	f04f 0400 	mov.w	r4, #0
 8003b84:	f04f 0500 	mov.w	r5, #0
 8003b88:	00dd      	lsls	r5, r3, #3
 8003b8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b8e:	00d4      	lsls	r4, r2, #3
 8003b90:	4622      	mov	r2, r4
 8003b92:	462b      	mov	r3, r5
 8003b94:	1814      	adds	r4, r2, r0
 8003b96:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b98:	414b      	adcs	r3, r1
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	008b      	lsls	r3, r1, #2
 8003bb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bb4:	0082      	lsls	r2, r0, #2
 8003bb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003bba:	f7fc fb71 	bl	80002a0 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4b2f      	ldr	r3, [pc, #188]	; (8003c80 <UART_SetConfig+0x38c>)
 8003bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	2164      	movs	r1, #100	; 0x64
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	3332      	adds	r3, #50	; 0x32
 8003bd6:	4a2a      	ldr	r2, [pc, #168]	; (8003c80 <UART_SetConfig+0x38c>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be2:	441e      	add	r6, r3
 8003be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be6:	4618      	mov	r0, r3
 8003be8:	f04f 0100 	mov.w	r1, #0
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	1894      	adds	r4, r2, r2
 8003bf2:	603c      	str	r4, [r7, #0]
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bfc:	1812      	adds	r2, r2, r0
 8003bfe:	eb41 0303 	adc.w	r3, r1, r3
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	f04f 0500 	mov.w	r5, #0
 8003c0a:	00dd      	lsls	r5, r3, #3
 8003c0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c10:	00d4      	lsls	r4, r2, #3
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb12 0a00 	adds.w	sl, r2, r0
 8003c1a:	eb43 0b01 	adc.w	fp, r3, r1
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c36:	0082      	lsls	r2, r0, #2
 8003c38:	4650      	mov	r0, sl
 8003c3a:	4659      	mov	r1, fp
 8003c3c:	f7fc fb30 	bl	80002a0 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <UART_SetConfig+0x38c>)
 8003c46:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2164      	movs	r1, #100	; 0x64
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	3332      	adds	r3, #50	; 0x32
 8003c58:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <UART_SetConfig+0x38c>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 020f 	and.w	r2, r3, #15
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4432      	add	r2, r6
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	377c      	adds	r7, #124	; 0x7c
 8003c70:	46bd      	mov	sp, r7
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	bf00      	nop
 8003c78:	40011000 	.word	0x40011000
 8003c7c:	40011400 	.word	0x40011400
 8003c80:	51eb851f 	.word	0x51eb851f

08003c84 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003c8a:	4ba0      	ldr	r3, [pc, #640]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003c8c:	22c0      	movs	r2, #192	; 0xc0
 8003c8e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003c90:	4b9e      	ldr	r3, [pc, #632]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003c92:	22a8      	movs	r2, #168	; 0xa8
 8003c94:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8003c96:	4b9d      	ldr	r3, [pc, #628]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003c98:	2212      	movs	r2, #18
 8003c9a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
 8003c9c:	4b9b      	ldr	r3, [pc, #620]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003c9e:	2273      	movs	r2, #115	; 0x73
 8003ca0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003ca2:	4b9b      	ldr	r3, [pc, #620]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003ca4:	22ff      	movs	r2, #255	; 0xff
 8003ca6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ca8:	4b99      	ldr	r3, [pc, #612]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003caa:	22ff      	movs	r2, #255	; 0xff
 8003cac:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003cae:	4b98      	ldr	r3, [pc, #608]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003cb0:	22ff      	movs	r2, #255	; 0xff
 8003cb2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003cb4:	4b96      	ldr	r3, [pc, #600]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003cba:	4b96      	ldr	r3, [pc, #600]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003cbc:	22c0      	movs	r2, #192	; 0xc0
 8003cbe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003cc0:	4b94      	ldr	r3, [pc, #592]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003cc2:	22a8      	movs	r2, #168	; 0xa8
 8003cc4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8003cc6:	4b93      	ldr	r3, [pc, #588]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003cc8:	2212      	movs	r2, #18
 8003cca:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003ccc:	4b91      	ldr	r3, [pc, #580]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f006 fe89 	bl	800a9ec <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003cda:	4b8c      	ldr	r3, [pc, #560]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	061a      	lsls	r2, r3, #24
 8003ce0:	4b8a      	ldr	r3, [pc, #552]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	4b88      	ldr	r3, [pc, #544]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003cea:	789b      	ldrb	r3, [r3, #2]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	4a86      	ldr	r2, [pc, #536]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003cf2:	78d2      	ldrb	r2, [r2, #3]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	061a      	lsls	r2, r3, #24
 8003cf8:	4b84      	ldr	r3, [pc, #528]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	0619      	lsls	r1, r3, #24
 8003cfe:	4b83      	ldr	r3, [pc, #524]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d00:	785b      	ldrb	r3, [r3, #1]
 8003d02:	041b      	lsls	r3, r3, #16
 8003d04:	4319      	orrs	r1, r3
 8003d06:	4b81      	ldr	r3, [pc, #516]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d08:	789b      	ldrb	r3, [r3, #2]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	497f      	ldr	r1, [pc, #508]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d10:	78c9      	ldrb	r1, [r1, #3]
 8003d12:	430b      	orrs	r3, r1
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	4b7b      	ldr	r3, [pc, #492]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	0619      	lsls	r1, r3, #24
 8003d22:	4b7a      	ldr	r3, [pc, #488]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	041b      	lsls	r3, r3, #16
 8003d28:	4319      	orrs	r1, r3
 8003d2a:	4b78      	ldr	r3, [pc, #480]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d2c:	789b      	ldrb	r3, [r3, #2]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	430b      	orrs	r3, r1
 8003d32:	4976      	ldr	r1, [pc, #472]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d34:	78c9      	ldrb	r1, [r1, #3]
 8003d36:	430b      	orrs	r3, r1
 8003d38:	0a1b      	lsrs	r3, r3, #8
 8003d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	0619      	lsls	r1, r3, #24
 8003d46:	4b71      	ldr	r3, [pc, #452]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	4319      	orrs	r1, r3
 8003d4e:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d50:	789b      	ldrb	r3, [r3, #2]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	430b      	orrs	r3, r1
 8003d56:	496d      	ldr	r1, [pc, #436]	; (8003f0c <MX_LWIP_Init+0x288>)
 8003d58:	78c9      	ldrb	r1, [r1, #3]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	4a6d      	ldr	r2, [pc, #436]	; (8003f18 <MX_LWIP_Init+0x294>)
 8003d62:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003d64:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	061a      	lsls	r2, r3, #24
 8003d6a:	4b69      	ldr	r3, [pc, #420]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	431a      	orrs	r2, r3
 8003d72:	4b67      	ldr	r3, [pc, #412]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d74:	789b      	ldrb	r3, [r3, #2]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	4a65      	ldr	r2, [pc, #404]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d7c:	78d2      	ldrb	r2, [r2, #3]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	061a      	lsls	r2, r3, #24
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	0619      	lsls	r1, r3, #24
 8003d88:	4b61      	ldr	r3, [pc, #388]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d8a:	785b      	ldrb	r3, [r3, #1]
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	4319      	orrs	r1, r3
 8003d90:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d92:	789b      	ldrb	r3, [r3, #2]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	430b      	orrs	r3, r1
 8003d98:	495d      	ldr	r1, [pc, #372]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003d9a:	78c9      	ldrb	r1, [r1, #3]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	021b      	lsls	r3, r3, #8
 8003da0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003da4:	431a      	orrs	r2, r3
 8003da6:	4b5a      	ldr	r3, [pc, #360]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	0619      	lsls	r1, r3, #24
 8003dac:	4b58      	ldr	r3, [pc, #352]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	041b      	lsls	r3, r3, #16
 8003db2:	4319      	orrs	r1, r3
 8003db4:	4b56      	ldr	r3, [pc, #344]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003db6:	789b      	ldrb	r3, [r3, #2]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4954      	ldr	r1, [pc, #336]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003dbe:	78c9      	ldrb	r1, [r1, #3]
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	4b51      	ldr	r3, [pc, #324]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	0619      	lsls	r1, r3, #24
 8003dd0:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	4319      	orrs	r1, r3
 8003dd8:	4b4d      	ldr	r3, [pc, #308]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003dda:	789b      	ldrb	r3, [r3, #2]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	430b      	orrs	r3, r1
 8003de0:	494b      	ldr	r1, [pc, #300]	; (8003f10 <MX_LWIP_Init+0x28c>)
 8003de2:	78c9      	ldrb	r1, [r1, #3]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	0e1b      	lsrs	r3, r3, #24
 8003de8:	4313      	orrs	r3, r2
 8003dea:	4a4c      	ldr	r2, [pc, #304]	; (8003f1c <MX_LWIP_Init+0x298>)
 8003dec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003dee:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	061a      	lsls	r2, r3, #24
 8003df4:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	041b      	lsls	r3, r3, #16
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003dfe:	789b      	ldrb	r3, [r3, #2]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	4313      	orrs	r3, r2
 8003e04:	4a43      	ldr	r2, [pc, #268]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e06:	78d2      	ldrb	r2, [r2, #3]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	061a      	lsls	r2, r3, #24
 8003e0c:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	0619      	lsls	r1, r3, #24
 8003e12:	4b40      	ldr	r3, [pc, #256]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	041b      	lsls	r3, r3, #16
 8003e18:	4319      	orrs	r1, r3
 8003e1a:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e1c:	789b      	ldrb	r3, [r3, #2]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	430b      	orrs	r3, r1
 8003e22:	493c      	ldr	r1, [pc, #240]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e24:	78c9      	ldrb	r1, [r1, #3]
 8003e26:	430b      	orrs	r3, r1
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	0619      	lsls	r1, r3, #24
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	4319      	orrs	r1, r3
 8003e3e:	4b35      	ldr	r3, [pc, #212]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	021b      	lsls	r3, r3, #8
 8003e44:	430b      	orrs	r3, r1
 8003e46:	4933      	ldr	r1, [pc, #204]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e48:	78c9      	ldrb	r1, [r1, #3]
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	0a1b      	lsrs	r3, r3, #8
 8003e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e52:	431a      	orrs	r2, r3
 8003e54:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	0619      	lsls	r1, r3, #24
 8003e5a:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	041b      	lsls	r3, r3, #16
 8003e60:	4319      	orrs	r1, r3
 8003e62:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e64:	789b      	ldrb	r3, [r3, #2]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	492a      	ldr	r1, [pc, #168]	; (8003f14 <MX_LWIP_Init+0x290>)
 8003e6c:	78c9      	ldrb	r1, [r1, #3]
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	0e1b      	lsrs	r3, r3, #24
 8003e72:	4313      	orrs	r3, r2
 8003e74:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <MX_LWIP_Init+0x29c>)
 8003e76:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003e78:	4b2a      	ldr	r3, [pc, #168]	; (8003f24 <MX_LWIP_Init+0x2a0>)
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <MX_LWIP_Init+0x2a4>)
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	4b26      	ldr	r3, [pc, #152]	; (8003f20 <MX_LWIP_Init+0x29c>)
 8003e86:	4a25      	ldr	r2, [pc, #148]	; (8003f1c <MX_LWIP_Init+0x298>)
 8003e88:	4923      	ldr	r1, [pc, #140]	; (8003f18 <MX_LWIP_Init+0x294>)
 8003e8a:	4828      	ldr	r0, [pc, #160]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003e8c:	f007 fb32 	bl	800b4f4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003e90:	4826      	ldr	r0, [pc, #152]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003e92:	f007 fce1 	bl	800b858 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003e96:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003e98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003ea8:	4820      	ldr	r0, [pc, #128]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003eaa:	f007 fce5 	bl	800b878 <netif_set_up>
 8003eae:	e002      	b.n	8003eb6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003eb0:	481e      	ldr	r0, [pc, #120]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003eb2:	f007 fd4d 	bl	800b950 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003eb6:	491e      	ldr	r1, [pc, #120]	; (8003f30 <MX_LWIP_Init+0x2ac>)
 8003eb8:	481c      	ldr	r0, [pc, #112]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003eba:	f007 fddf 	bl	800ba7c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f000 feaa 	bl	8004c1c <osSemaphoreNew>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	4a1a      	ldr	r2, [pc, #104]	; (8003f34 <MX_LWIP_Init+0x2b0>)
 8003ecc:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003ece:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <MX_LWIP_Init+0x2b4>)
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <MX_LWIP_Init+0x2a8>)
 8003ed2:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <MX_LWIP_Init+0x2b0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a17      	ldr	r2, [pc, #92]	; (8003f38 <MX_LWIP_Init+0x2b4>)
 8003eda:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003edc:	2224      	movs	r2, #36	; 0x24
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4816      	ldr	r0, [pc, #88]	; (8003f3c <MX_LWIP_Init+0x2b8>)
 8003ee2:	f011 fed8 	bl	8015c96 <memset>
  attributes.name = "LinkThr";
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <MX_LWIP_Init+0x2b8>)
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <MX_LWIP_Init+0x2bc>)
 8003eea:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <MX_LWIP_Init+0x2b8>)
 8003eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <MX_LWIP_Init+0x2b8>)
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <MX_LWIP_Init+0x2b8>)
 8003efc:	490e      	ldr	r1, [pc, #56]	; (8003f38 <MX_LWIP_Init+0x2b4>)
 8003efe:	4811      	ldr	r0, [pc, #68]	; (8003f44 <MX_LWIP_Init+0x2c0>)
 8003f00:	f000 fcd1 	bl	80048a6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20004e50 	.word	0x20004e50
 8003f10:	20004e4c 	.word	0x20004e4c
 8003f14:	20004dec 	.word	0x20004dec
 8003f18:	20004e48 	.word	0x20004e48
 8003f1c:	20004e54 	.word	0x20004e54
 8003f20:	20004e58 	.word	0x20004e58
 8003f24:	0800a8fd 	.word	0x0800a8fd
 8003f28:	08004571 	.word	0x08004571
 8003f2c:	20004e14 	.word	0x20004e14
 8003f30:	08004655 	.word	0x08004655
 8003f34:	200000b0 	.word	0x200000b0
 8003f38:	20004de4 	.word	0x20004de4
 8003f3c:	20004df0 	.word	0x20004df0
 8003f40:	08017100 	.word	0x08017100
 8003f44:	080045dd 	.word	0x080045dd

08003f48 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	; 0x38
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a4a      	ldr	r2, [pc, #296]	; (8004090 <HAL_ETH_MspInit+0x148>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f040 808d 	bne.w	8004086 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	4b48      	ldr	r3, [pc, #288]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	4a47      	ldr	r2, [pc, #284]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	4b41      	ldr	r3, [pc, #260]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4a40      	ldr	r2, [pc, #256]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f96:	6313      	str	r3, [r2, #48]	; 0x30
 8003f98:	4b3e      	ldr	r3, [pc, #248]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	4a39      	ldr	r2, [pc, #228]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	4b33      	ldr	r3, [pc, #204]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	4a32      	ldr	r2, [pc, #200]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	4a2b      	ldr	r2, [pc, #172]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6313      	str	r3, [r2, #48]	; 0x30
 8003fec:	4b29      	ldr	r3, [pc, #164]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004000:	4a24      	ldr	r2, [pc, #144]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	6313      	str	r3, [r2, #48]	; 0x30
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_ETH_MspInit+0x14c>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004014:	2332      	movs	r3, #50	; 0x32
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004020:	2303      	movs	r3, #3
 8004022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004024:	230b      	movs	r3, #11
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402c:	4619      	mov	r1, r3
 800402e:	481a      	ldr	r0, [pc, #104]	; (8004098 <HAL_ETH_MspInit+0x150>)
 8004030:	f7fe fa22 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004034:	2386      	movs	r3, #134	; 0x86
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	2302      	movs	r3, #2
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004040:	2303      	movs	r3, #3
 8004042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004044:	230b      	movs	r3, #11
 8004046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404c:	4619      	mov	r1, r3
 800404e:	4813      	ldr	r0, [pc, #76]	; (800409c <HAL_ETH_MspInit+0x154>)
 8004050:	f7fe fa12 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004054:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405a:	2302      	movs	r3, #2
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405e:	2300      	movs	r3, #0
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004062:	2303      	movs	r3, #3
 8004064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004066:	230b      	movs	r3, #11
 8004068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800406e:	4619      	mov	r1, r3
 8004070:	480b      	ldr	r0, [pc, #44]	; (80040a0 <HAL_ETH_MspInit+0x158>)
 8004072:	f7fe fa01 	bl	8002478 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2105      	movs	r1, #5
 800407a:	203d      	movs	r0, #61	; 0x3d
 800407c:	f7fd f82c 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004080:	203d      	movs	r0, #61	; 0x3d
 8004082:	f7fd f845 	bl	8001110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004086:	bf00      	nop
 8004088:	3738      	adds	r7, #56	; 0x38
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40028000 	.word	0x40028000
 8004094:	40023800 	.word	0x40023800
 8004098:	40020800 	.word	0x40020800
 800409c:	40020000 	.word	0x40020000
 80040a0:	40020400 	.word	0x40020400

080040a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_ETH_RxCpltCallback+0x1c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe8f 	bl	8004dd4 <osSemaphoreRelease>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200000b4 	.word	0x200000b4

080040c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b090      	sub	sp, #64	; 0x40
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80040d0:	4b5d      	ldr	r3, [pc, #372]	; (8004248 <low_level_init+0x184>)
 80040d2:	4a5e      	ldr	r2, [pc, #376]	; (800424c <low_level_init+0x188>)
 80040d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80040d6:	4b5c      	ldr	r3, [pc, #368]	; (8004248 <low_level_init+0x184>)
 80040d8:	2201      	movs	r2, #1
 80040da:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80040dc:	4b5a      	ldr	r3, [pc, #360]	; (8004248 <low_level_init+0x184>)
 80040de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040e2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80040e4:	4b58      	ldr	r3, [pc, #352]	; (8004248 <low_level_init+0x184>)
 80040e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80040ec:	4b56      	ldr	r3, [pc, #344]	; (8004248 <low_level_init+0x184>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80040f2:	2300      	movs	r3, #0
 80040f4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80040fa:	23e1      	movs	r3, #225	; 0xe1
 80040fc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004102:	2300      	movs	r3, #0
 8004104:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004106:	2300      	movs	r3, #0
 8004108:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800410a:	4a4f      	ldr	r2, [pc, #316]	; (8004248 <low_level_init+0x184>)
 800410c:	f107 030c 	add.w	r3, r7, #12
 8004110:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004112:	4b4d      	ldr	r3, [pc, #308]	; (8004248 <low_level_init+0x184>)
 8004114:	2201      	movs	r2, #1
 8004116:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004118:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <low_level_init+0x184>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800411e:	4b4a      	ldr	r3, [pc, #296]	; (8004248 <low_level_init+0x184>)
 8004120:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004124:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004126:	4848      	ldr	r0, [pc, #288]	; (8004248 <low_level_init+0x184>)
 8004128:	f7fd f800 	bl	800112c <HAL_ETH_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004136:	2b00      	cmp	r3, #0
 8004138:	d108      	bne.n	800414c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	b2da      	uxtb	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800414c:	2304      	movs	r3, #4
 800414e:	4a40      	ldr	r2, [pc, #256]	; (8004250 <low_level_init+0x18c>)
 8004150:	4940      	ldr	r1, [pc, #256]	; (8004254 <low_level_init+0x190>)
 8004152:	483d      	ldr	r0, [pc, #244]	; (8004248 <low_level_init+0x184>)
 8004154:	f7fd f986 	bl	8001464 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004158:	2304      	movs	r3, #4
 800415a:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <low_level_init+0x194>)
 800415c:	493f      	ldr	r1, [pc, #252]	; (800425c <low_level_init+0x198>)
 800415e:	483a      	ldr	r0, [pc, #232]	; (8004248 <low_level_init+0x184>)
 8004160:	f7fd f9e9 	bl	8001536 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2206      	movs	r2, #6
 8004168:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800416c:	4b36      	ldr	r3, [pc, #216]	; (8004248 <low_level_init+0x184>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004178:	4b33      	ldr	r3, [pc, #204]	; (8004248 <low_level_init+0x184>)
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	785a      	ldrb	r2, [r3, #1]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004184:	4b30      	ldr	r3, [pc, #192]	; (8004248 <low_level_init+0x184>)
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	789a      	ldrb	r2, [r3, #2]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004190:	4b2d      	ldr	r3, [pc, #180]	; (8004248 <low_level_init+0x184>)
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	78da      	ldrb	r2, [r3, #3]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800419c:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <low_level_init+0x184>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	791a      	ldrb	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <low_level_init+0x184>)
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	795a      	ldrb	r2, [r3, #5]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80041ba:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041c2:	f043 030a 	orr.w	r3, r3, #10
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2101      	movs	r1, #1
 80041d2:	2001      	movs	r0, #1
 80041d4:	f000 fd22 	bl	8004c1c <osSemaphoreNew>
 80041d8:	4603      	mov	r3, r0
 80041da:	4a21      	ldr	r2, [pc, #132]	; (8004260 <low_level_init+0x19c>)
 80041dc:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80041de:	f107 0314 	add.w	r3, r7, #20
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f011 fd55 	bl	8015c96 <memset>
  attributes.name = "EthIf";
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <low_level_init+0x1a0>)
 80041ee:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80041f0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80041f6:	2330      	movs	r3, #48	; 0x30
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80041fa:	f107 0314 	add.w	r3, r7, #20
 80041fe:	461a      	mov	r2, r3
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4819      	ldr	r0, [pc, #100]	; (8004268 <low_level_init+0x1a4>)
 8004204:	f000 fb4f 	bl	80048a6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004208:	480f      	ldr	r0, [pc, #60]	; (8004248 <low_level_init+0x184>)
 800420a:	f7fd fcbc 	bl	8001b86 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800420e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004212:	461a      	mov	r2, r3
 8004214:	211d      	movs	r1, #29
 8004216:	480c      	ldr	r0, [pc, #48]	; (8004248 <low_level_init+0x184>)
 8004218:	f7fd fbe7 	bl	80019ea <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	f043 030b 	orr.w	r3, r3, #11
 8004222:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	461a      	mov	r2, r3
 8004228:	211d      	movs	r1, #29
 800422a:	4807      	ldr	r0, [pc, #28]	; (8004248 <low_level_init+0x184>)
 800422c:	f7fd fc45 	bl	8001aba <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004234:	461a      	mov	r2, r3
 8004236:	211d      	movs	r1, #29
 8004238:	4803      	ldr	r0, [pc, #12]	; (8004248 <low_level_init+0x184>)
 800423a:	f7fd fbd6 	bl	80019ea <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800423e:	bf00      	nop
 8004240:	3740      	adds	r7, #64	; 0x40
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2000672c 	.word	0x2000672c
 800424c:	40028000 	.word	0x40028000
 8004250:	20006774 	.word	0x20006774
 8004254:	20004e5c 	.word	0x20004e5c
 8004258:	20004edc 	.word	0x20004edc
 800425c:	200066ac 	.word	0x200066ac
 8004260:	200000b4 	.word	0x200000b4
 8004264:	08017108 	.word	0x08017108
 8004268:	08004511 	.word	0x08004511

0800426c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004276:	4b4b      	ldr	r3, [pc, #300]	; (80043a4 <low_level_output+0x138>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800428e:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <low_level_output+0x138>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	e05a      	b.n	8004354 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da03      	bge.n	80042ae <low_level_output+0x42>
      {
        errval = ERR_USE;
 80042a6:	23f8      	movs	r3, #248	; 0xf8
 80042a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80042ac:	e05c      	b.n	8004368 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	895b      	ldrh	r3, [r3, #10]
 80042b2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80042b8:	e02f      	b.n	800431a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	18d0      	adds	r0, r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	18d1      	adds	r1, r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80042ce:	3304      	adds	r3, #4
 80042d0:	461a      	mov	r2, r3
 80042d2:	f011 fcb8 	bl	8015c46 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	da03      	bge.n	80042ec <low_level_output+0x80>
        {
          errval = ERR_USE;
 80042e4:	23f8      	movs	r3, #248	; 0xf8
 80042e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80042ea:	e03d      	b.n	8004368 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80042fc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004308:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004314:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004324:	4293      	cmp	r3, r2
 8004326:	d8c8      	bhi.n	80042ba <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	18d0      	adds	r0, r2, r3
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4413      	add	r3, r2
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4619      	mov	r1, r3
 800433a:	f011 fc84 	bl	8015c46 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4413      	add	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	623b      	str	r3, [r7, #32]
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1a1      	bne.n	800429e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800435a:	6979      	ldr	r1, [r7, #20]
 800435c:	4811      	ldr	r0, [pc, #68]	; (80043a4 <low_level_output+0x138>)
 800435e:	f7fd f957 	bl	8001610 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004368:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <low_level_output+0x138>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004370:	3314      	adds	r3, #20
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <low_level_output+0x138>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004384:	3314      	adds	r3, #20
 8004386:	2220      	movs	r2, #32
 8004388:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <low_level_output+0x138>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004392:	3304      	adds	r3, #4
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004398:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800439c:	4618      	mov	r0, r3
 800439e:	3728      	adds	r7, #40	; 0x28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	2000672c 	.word	0x2000672c

080043a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08c      	sub	sp, #48	; 0x30
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80043cc:	484f      	ldr	r0, [pc, #316]	; (800450c <low_level_input+0x164>)
 80043ce:	f7fd fa09 	bl	80017e4 <HAL_ETH_GetReceivedFrame_IT>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <low_level_input+0x34>

    return NULL;
 80043d8:	2300      	movs	r3, #0
 80043da:	e092      	b.n	8004502 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80043dc:	4b4b      	ldr	r3, [pc, #300]	; (800450c <low_level_input+0x164>)
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80043e2:	4b4a      	ldr	r3, [pc, #296]	; (800450c <low_level_input+0x164>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80043e8:	89fb      	ldrh	r3, [r7, #14]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80043ee:	89fb      	ldrh	r3, [r7, #14]
 80043f0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80043f4:	4619      	mov	r1, r3
 80043f6:	2000      	movs	r0, #0
 80043f8:	f007 fc0a 	bl	800bc10 <pbuf_alloc>
 80043fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	d04b      	beq.n	800449c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004404:	4b41      	ldr	r3, [pc, #260]	; (800450c <low_level_input+0x164>)
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
 8004412:	e040      	b.n	8004496 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	895b      	ldrh	r3, [r3, #10]
 8004418:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800441e:	e021      	b.n	8004464 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	18d0      	adds	r0, r2, r3
 8004428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	18d1      	adds	r1, r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004434:	3304      	adds	r3, #4
 8004436:	461a      	mov	r2, r3
 8004438:	f011 fc05 	bl	8015c46 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	4413      	add	r3, r2
 800444e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004452:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800445e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800446e:	4293      	cmp	r3, r2
 8004470:	d8d6      	bhi.n	8004420 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	18d0      	adds	r0, r2, r3
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4619      	mov	r1, r3
 8004484:	f011 fbdf 	bl	8015c46 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4413      	add	r3, r2
 800448e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1bb      	bne.n	8004414 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <low_level_input+0x164>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e00b      	b.n	80044c0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	3301      	adds	r3, #1
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <low_level_input+0x164>)
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3ee      	bcc.n	80044a8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <low_level_input+0x164>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <low_level_input+0x164>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d8:	3314      	adds	r3, #20
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <low_level_input+0x164>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ec:	3314      	adds	r3, #20
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <low_level_input+0x164>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044fa:	3308      	adds	r3, #8
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004502:	4618      	mov	r0, r3
 8004504:	3730      	adds	r7, #48	; 0x30
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	2000672c 	.word	0x2000672c

08004510 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <ethernetif_input+0x58>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fc03 	bl	8004d30 <osSemaphoreAcquire>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f5      	bne.n	800451c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004530:	480e      	ldr	r0, [pc, #56]	; (800456c <ethernetif_input+0x5c>)
 8004532:	f011 fa03 	bl	801593c <sys_mutex_lock>
        p = low_level_input( netif );
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff ff36 	bl	80043a8 <low_level_input>
 800453c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	68b8      	ldr	r0, [r7, #8]
 800454c:	4798      	blx	r3
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f007 fe3f 	bl	800c1d8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800455a:	4804      	ldr	r0, [pc, #16]	; (800456c <ethernetif_input+0x5c>)
 800455c:	f011 f9fd 	bl	801595a <sys_mutex_unlock>
      } while(p!=NULL);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e4      	bne.n	8004530 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004566:	e7d9      	b.n	800451c <ethernetif_input+0xc>
 8004568:	200000b4 	.word	0x200000b4
 800456c:	20007f84 	.word	0x20007f84

08004570 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <ethernetif_init+0x1c>
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <ethernetif_init+0x48>)
 8004580:	f240 2231 	movw	r2, #561	; 0x231
 8004584:	490d      	ldr	r1, [pc, #52]	; (80045bc <ethernetif_init+0x4c>)
 8004586:	480e      	ldr	r0, [pc, #56]	; (80045c0 <ethernetif_init+0x50>)
 8004588:	f011 fbe8 	bl	8015d5c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2273      	movs	r2, #115	; 0x73
 8004590:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2274      	movs	r2, #116	; 0x74
 8004598:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <ethernetif_init+0x54>)
 80045a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <ethernetif_init+0x58>)
 80045a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff fd8b 	bl	80040c4 <low_level_init>

  return ERR_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	08017110 	.word	0x08017110
 80045bc:	0801712c 	.word	0x0801712c
 80045c0:	0801713c 	.word	0x0801713c
 80045c4:	0801399d 	.word	0x0801399d
 80045c8:	0800426d 	.word	0x0800426d

080045cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045d0:	f7fc fc9a 	bl	8000f08 <HAL_GetTick>
 80045d4:	4603      	mov	r3, r0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80045ec:	f107 0308 	add.w	r3, r7, #8
 80045f0:	461a      	mov	r2, r3
 80045f2:	2101      	movs	r1, #1
 80045f4:	4816      	ldr	r0, [pc, #88]	; (8004650 <ethernetif_set_link+0x74>)
 80045f6:	f7fd f9f8 	bl	80019ea <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <ethernetif_set_link+0x48>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f007 f9c9 	bl	800b9b4 <netif_set_link_up>
 8004622:	e011      	b.n	8004648 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800462c:	089b      	lsrs	r3, r3, #2
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <ethernetif_set_link+0x6c>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f007 f9ea 	bl	800ba1c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004648:	20c8      	movs	r0, #200	; 0xc8
 800464a:	f000 f9be 	bl	80049ca <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800464e:	e7cd      	b.n	80045ec <ethernetif_set_link+0x10>
 8004650:	2000672c 	.word	0x2000672c

08004654 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d05d      	beq.n	8004732 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004676:	4b34      	ldr	r3, [pc, #208]	; (8004748 <ethernetif_update_config+0xf4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d03f      	beq.n	80046fe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800467e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004682:	2100      	movs	r1, #0
 8004684:	4830      	ldr	r0, [pc, #192]	; (8004748 <ethernetif_update_config+0xf4>)
 8004686:	f7fd fa18 	bl	8001aba <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800468a:	f7fc fc3d 	bl	8000f08 <HAL_GetTick>
 800468e:	4603      	mov	r3, r0
 8004690:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	461a      	mov	r2, r3
 8004698:	2101      	movs	r1, #1
 800469a:	482b      	ldr	r0, [pc, #172]	; (8004748 <ethernetif_update_config+0xf4>)
 800469c:	f7fd f9a5 	bl	80019ea <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80046a0:	f7fc fc32 	bl	8000f08 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046ae:	d828      	bhi.n	8004702 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0eb      	beq.n	8004692 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	461a      	mov	r2, r3
 80046c0:	2110      	movs	r1, #16
 80046c2:	4821      	ldr	r0, [pc, #132]	; (8004748 <ethernetif_update_config+0xf4>)
 80046c4:	f7fd f991 	bl	80019ea <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <ethernetif_update_config+0xf4>)
 80046d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e002      	b.n	80046e2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <ethernetif_update_config+0xf4>)
 80046de:	2200      	movs	r2, #0
 80046e0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <ethernetif_update_config+0xf4>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	609a      	str	r2, [r3, #8]
 80046f2:	e016      	b.n	8004722 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80046f4:	4b14      	ldr	r3, [pc, #80]	; (8004748 <ethernetif_update_config+0xf4>)
 80046f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	e011      	b.n	8004722 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <ethernetif_update_config+0xb0>
          goto error;
 8004702:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <ethernetif_update_config+0xf4>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800470c:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <ethernetif_update_config+0xf4>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004714:	4313      	orrs	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	2100      	movs	r1, #0
 800471c:	480a      	ldr	r0, [pc, #40]	; (8004748 <ethernetif_update_config+0xf4>)
 800471e:	f7fd f9cc 	bl	8001aba <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004722:	2100      	movs	r1, #0
 8004724:	4808      	ldr	r0, [pc, #32]	; (8004748 <ethernetif_update_config+0xf4>)
 8004726:	f7fd fa8d 	bl	8001c44 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800472a:	4807      	ldr	r0, [pc, #28]	; (8004748 <ethernetif_update_config+0xf4>)
 800472c:	f7fd fa2b 	bl	8001b86 <HAL_ETH_Start>
 8004730:	e002      	b.n	8004738 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004732:	4805      	ldr	r0, [pc, #20]	; (8004748 <ethernetif_update_config+0xf4>)
 8004734:	f7fd fa56 	bl	8001be4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f807 	bl	800474c <ethernetif_notify_conn_changed>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	2000672c 	.word	0x2000672c

0800474c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <__NVIC_SetPriority>:
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	6039      	str	r1, [r7, #0]
 800476a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800476c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004770:	2b00      	cmp	r3, #0
 8004772:	db0a      	blt.n	800478a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	490c      	ldr	r1, [pc, #48]	; (80047ac <__NVIC_SetPriority+0x4c>)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	0112      	lsls	r2, r2, #4
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	440b      	add	r3, r1
 8004784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004788:	e00a      	b.n	80047a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <__NVIC_SetPriority+0x50>)
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	3b04      	subs	r3, #4
 8004798:	0112      	lsls	r2, r2, #4
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	440b      	add	r3, r1
 800479e:	761a      	strb	r2, [r3, #24]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000e100 	.word	0xe000e100
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <SysTick_Handler+0x1c>)
 80047ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047bc:	f002 fd3a 	bl	8007234 <xTaskGetSchedulerState>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80047c6:	f003 fc1f 	bl	8008008 <xPortSysTickHandler>
  }
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	e000e010 	.word	0xe000e010

080047d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80047d8:	2100      	movs	r1, #0
 80047da:	f06f 0004 	mvn.w	r0, #4
 80047de:	f7ff ffbf 	bl	8004760 <__NVIC_SetPriority>
#endif
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047ee:	f3ef 8305 	mrs	r3, IPSR
 80047f2:	603b      	str	r3, [r7, #0]
  return(result);
 80047f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80047fa:	f06f 0305 	mvn.w	r3, #5
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	e00c      	b.n	800481c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <osKernelInitialize+0x44>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d105      	bne.n	8004816 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <osKernelInitialize+0x44>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004810:	2300      	movs	r3, #0
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	e002      	b.n	800481c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800481a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800481c:	687b      	ldr	r3, [r7, #4]
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	200000b8 	.word	0x200000b8

08004830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004836:	f3ef 8305 	mrs	r3, IPSR
 800483a:	603b      	str	r3, [r7, #0]
  return(result);
 800483c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004842:	f06f 0305 	mvn.w	r3, #5
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e010      	b.n	800486c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <osKernelStart+0x48>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d109      	bne.n	8004866 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004852:	f7ff ffbf 	bl	80047d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <osKernelStart+0x48>)
 8004858:	2202      	movs	r2, #2
 800485a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800485c:	f002 f86c 	bl	8006938 <vTaskStartScheduler>
      stat = osOK;
 8004860:	2300      	movs	r3, #0
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	e002      	b.n	800486c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800486a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800486c:	687b      	ldr	r3, [r7, #4]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200000b8 	.word	0x200000b8

0800487c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004882:	f3ef 8305 	mrs	r3, IPSR
 8004886:	603b      	str	r3, [r7, #0]
  return(result);
 8004888:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800488e:	f002 f97f 	bl	8006b90 <xTaskGetTickCountFromISR>
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	e002      	b.n	800489c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004896:	f002 f96b 	bl	8006b70 <xTaskGetTickCount>
 800489a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800489c:	687b      	ldr	r3, [r7, #4]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b08e      	sub	sp, #56	; 0x38
 80048aa:	af04      	add	r7, sp, #16
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	617b      	str	r3, [r7, #20]
  return(result);
 80048bc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d17e      	bne.n	80049c0 <osThreadNew+0x11a>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d07b      	beq.n	80049c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048cc:	2318      	movs	r3, #24
 80048ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d045      	beq.n	800496c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <osThreadNew+0x48>
        name = attr->name;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <osThreadNew+0x6e>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b38      	cmp	r3, #56	; 0x38
 8004906:	d805      	bhi.n	8004914 <osThreadNew+0x6e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <osThreadNew+0x72>
        return (NULL);
 8004914:	2300      	movs	r3, #0
 8004916:	e054      	b.n	80049c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00e      	beq.n	800494e <osThreadNew+0xa8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2bbb      	cmp	r3, #187	; 0xbb
 8004936:	d90a      	bls.n	800494e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d002      	beq.n	800494e <osThreadNew+0xa8>
        mem = 1;
 8004948:	2301      	movs	r3, #1
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	e010      	b.n	8004970 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10c      	bne.n	8004970 <osThreadNew+0xca>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <osThreadNew+0xca>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <osThreadNew+0xca>
          mem = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e001      	b.n	8004970 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d110      	bne.n	8004998 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800497e:	9202      	str	r2, [sp, #8]
 8004980:	9301      	str	r3, [sp, #4]
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f001 fde7 	bl	8006560 <xTaskCreateStatic>
 8004992:	4603      	mov	r3, r0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e013      	b.n	80049c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d110      	bne.n	80049c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	f107 0310 	add.w	r3, r7, #16
 80049a6:	9301      	str	r3, [sp, #4]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f001 fe32 	bl	800661a <xTaskCreate>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <osThreadNew+0x11a>
            hTask = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3728      	adds	r7, #40	; 0x28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d2:	f3ef 8305 	mrs	r3, IPSR
 80049d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80049d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <osDelay+0x1c>
    stat = osErrorISR;
 80049de:	f06f 0305 	mvn.w	r3, #5
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e007      	b.n	80049f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 ff6d 	bl	80068d0 <vTaskDelay>
    }
  }

  return (stat);
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a0c:	f3ef 8305 	mrs	r3, IPSR
 8004a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a12:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d174      	bne.n	8004b02 <osMutexNew+0x102>
    if (attr != NULL) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	61bb      	str	r3, [r7, #24]
 8004a24:	e001      	b.n	8004a2a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <osMutexNew+0x3a>
      rmtx = 1U;
 8004a34:	2301      	movs	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	e001      	b.n	8004a3e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d15c      	bne.n	8004b02 <osMutexNew+0x102>
      mem = -1;
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d015      	beq.n	8004a80 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d006      	beq.n	8004a6a <osMutexNew+0x6a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	2b4f      	cmp	r3, #79	; 0x4f
 8004a62:	d902      	bls.n	8004a6a <osMutexNew+0x6a>
          mem = 1;
 8004a64:	2301      	movs	r3, #1
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	e00c      	b.n	8004a84 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <osMutexNew+0x84>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <osMutexNew+0x84>
            mem = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e001      	b.n	8004a84 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d112      	bne.n	8004ab0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4619      	mov	r1, r3
 8004a96:	2004      	movs	r0, #4
 8004a98:	f000 fdd1 	bl	800563e <xQueueCreateMutexStatic>
 8004a9c:	61f8      	str	r0, [r7, #28]
 8004a9e:	e016      	b.n	8004ace <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f000 fdc9 	bl	800563e <xQueueCreateMutexStatic>
 8004aac:	61f8      	str	r0, [r7, #28]
 8004aae:	e00e      	b.n	8004ace <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004abc:	2004      	movs	r0, #4
 8004abe:	f000 fda6 	bl	800560e <xQueueCreateMutex>
 8004ac2:	61f8      	str	r0, [r7, #28]
 8004ac4:	e003      	b.n	8004ace <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004ac6:	2001      	movs	r0, #1
 8004ac8:	f000 fda1 	bl	800560e <xQueueCreateMutex>
 8004acc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <osMutexNew+0xee>
        if (attr != NULL) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <osMutexNew+0xe2>
          name = attr->name;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	e001      	b.n	8004ae6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	69f8      	ldr	r0, [r7, #28]
 8004aea:	f001 fcb1 	bl	8006450 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d006      	beq.n	8004b02 <osMutexNew+0x102>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004b02:	69fb      	ldr	r3, [r7, #28]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3720      	adds	r7, #32
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2a:	f3ef 8305 	mrs	r3, IPSR
 8004b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b30:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004b36:	f06f 0305 	mvn.w	r3, #5
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	e02c      	b.n	8004b98 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d103      	bne.n	8004b4c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004b44:	f06f 0303 	mvn.w	r3, #3
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e025      	b.n	8004b98 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b52:	6839      	ldr	r1, [r7, #0]
 8004b54:	6938      	ldr	r0, [r7, #16]
 8004b56:	f000 fdc1 	bl	80056dc <xQueueTakeMutexRecursive>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d01b      	beq.n	8004b98 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004b66:	f06f 0301 	mvn.w	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e014      	b.n	8004b98 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b6e:	f06f 0302 	mvn.w	r3, #2
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	e010      	b.n	8004b98 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6938      	ldr	r0, [r7, #16]
 8004b7a:	f001 f955 	bl	8005e28 <xQueueSemaphoreTake>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d009      	beq.n	8004b98 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004b8a:	f06f 0301 	mvn.w	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e002      	b.n	8004b98 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004b92:	f06f 0302 	mvn.w	r3, #2
 8004b96:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
 8004bc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bc4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004bca:	f06f 0305 	mvn.w	r3, #5
 8004bce:	617b      	str	r3, [r7, #20]
 8004bd0:	e01f      	b.n	8004c12 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004bd8:	f06f 0303 	mvn.w	r3, #3
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e018      	b.n	8004c12 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004be6:	6938      	ldr	r0, [r7, #16]
 8004be8:	f000 fd44 	bl	8005674 <xQueueGiveMutexRecursive>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d00f      	beq.n	8004c12 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004bf2:	f06f 0302 	mvn.w	r3, #2
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e00b      	b.n	8004c12 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2100      	movs	r1, #0
 8004c00:	6938      	ldr	r0, [r7, #16]
 8004c02:	f000 fe0b 	bl	800581c <xQueueGenericSend>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d002      	beq.n	8004c12 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004c0c:	f06f 0302 	mvn.w	r3, #2
 8004c10:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004c12:	697b      	ldr	r3, [r7, #20]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c2c:	f3ef 8305 	mrs	r3, IPSR
 8004c30:	613b      	str	r3, [r7, #16]
  return(result);
 8004c32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d175      	bne.n	8004d24 <osSemaphoreNew+0x108>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d072      	beq.n	8004d24 <osSemaphoreNew+0x108>
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d86e      	bhi.n	8004d24 <osSemaphoreNew+0x108>
    mem = -1;
 8004c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d015      	beq.n	8004c7e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <osSemaphoreNew+0x4c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b4f      	cmp	r3, #79	; 0x4f
 8004c60:	d902      	bls.n	8004c68 <osSemaphoreNew+0x4c>
        mem = 1;
 8004c62:	2301      	movs	r3, #1
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e00c      	b.n	8004c82 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <osSemaphoreNew+0x66>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <osSemaphoreNew+0x66>
          mem = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e001      	b.n	8004c82 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c88:	d04c      	beq.n	8004d24 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d128      	bne.n	8004ce2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10a      	bne.n	8004cac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	9200      	str	r2, [sp, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f000 fbc4 	bl	8005430 <xQueueGenericCreateStatic>
 8004ca8:	61f8      	str	r0, [r7, #28]
 8004caa:	e005      	b.n	8004cb8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004cac:	2203      	movs	r2, #3
 8004cae:	2100      	movs	r1, #0
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	f000 fc35 	bl	8005520 <xQueueGenericCreate>
 8004cb6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d022      	beq.n	8004d04 <osSemaphoreNew+0xe8>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01f      	beq.n	8004d04 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2100      	movs	r1, #0
 8004cca:	69f8      	ldr	r0, [r7, #28]
 8004ccc:	f000 fda6 	bl	800581c <xQueueGenericSend>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d016      	beq.n	8004d04 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004cd6:	69f8      	ldr	r0, [r7, #28]
 8004cd8:	f001 fa6e 	bl	80061b8 <vQueueDelete>
            hSemaphore = NULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	e010      	b.n	8004d04 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	461a      	mov	r2, r3
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fd29 	bl	8005748 <xQueueCreateCountingSemaphoreStatic>
 8004cf6:	61f8      	str	r0, [r7, #28]
 8004cf8:	e004      	b.n	8004d04 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fd5a 	bl	80057b6 <xQueueCreateCountingSemaphore>
 8004d02:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e001      	b.n	8004d1c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d1c:	6979      	ldr	r1, [r7, #20]
 8004d1e:	69f8      	ldr	r0, [r7, #28]
 8004d20:	f001 fb96 	bl	8006450 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004d24:	69fb      	ldr	r3, [r7, #28]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004d48:	f06f 0303 	mvn.w	r3, #3
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e039      	b.n	8004dc4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d50:	f3ef 8305 	mrs	r3, IPSR
 8004d54:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d56:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d022      	beq.n	8004da2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004d62:	f06f 0303 	mvn.w	r3, #3
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	e02c      	b.n	8004dc4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004d6e:	f107 0308 	add.w	r3, r7, #8
 8004d72:	461a      	mov	r2, r3
 8004d74:	2100      	movs	r1, #0
 8004d76:	6938      	ldr	r0, [r7, #16]
 8004d78:	f001 f962 	bl	8006040 <xQueueReceiveFromISR>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004d82:	f06f 0302 	mvn.w	r3, #2
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e01c      	b.n	8004dc4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <osSemaphoreAcquire+0x94>
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <osSemaphoreAcquire+0xa0>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	e010      	b.n	8004dc4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6938      	ldr	r0, [r7, #16]
 8004da6:	f001 f83f 	bl	8005e28 <xQueueSemaphoreTake>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d009      	beq.n	8004dc4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004db6:	f06f 0301 	mvn.w	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e002      	b.n	8004dc4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004dbe:	f06f 0302 	mvn.w	r3, #2
 8004dc2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004dc4:	697b      	ldr	r3, [r7, #20]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004dea:	f06f 0303 	mvn.w	r3, #3
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e02c      	b.n	8004e4c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df2:	f3ef 8305 	mrs	r3, IPSR
 8004df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004df8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01a      	beq.n	8004e34 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e02:	f107 0308 	add.w	r3, r7, #8
 8004e06:	4619      	mov	r1, r3
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f000 fea0 	bl	8005b4e <xQueueGiveFromISR>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d003      	beq.n	8004e1c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004e14:	f06f 0302 	mvn.w	r3, #2
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e017      	b.n	8004e4c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d014      	beq.n	8004e4c <osSemaphoreRelease+0x78>
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <osSemaphoreRelease+0x84>)
 8004e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	e00b      	b.n	8004e4c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e34:	2300      	movs	r3, #0
 8004e36:	2200      	movs	r2, #0
 8004e38:	2100      	movs	r1, #0
 8004e3a:	6938      	ldr	r0, [r7, #16]
 8004e3c:	f000 fcee 	bl	800581c <xQueueGenericSend>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d002      	beq.n	8004e4c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004e46:	f06f 0302 	mvn.w	r3, #2
 8004e4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004e4c:	697b      	ldr	r3, [r7, #20]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	e000ed04 	.word	0xe000ed04

08004e5c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e68:	f3ef 8305 	mrs	r3, IPSR
 8004e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8004e74:	f06f 0305 	mvn.w	r3, #5
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	e00e      	b.n	8004e9a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8004e82:	f06f 0303 	mvn.w	r3, #3
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e007      	b.n	8004e9a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8004e8a:	6938      	ldr	r0, [r7, #16]
 8004e8c:	f001 fb0a 	bl	80064a4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8004e94:	6938      	ldr	r0, [r7, #16]
 8004e96:	f001 f98f 	bl	80061b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004e9a:	697b      	ldr	r3, [r7, #20]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b08a      	sub	sp, #40	; 0x28
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb4:	f3ef 8305 	mrs	r3, IPSR
 8004eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8004eba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d15f      	bne.n	8004f80 <osMessageQueueNew+0xdc>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d05c      	beq.n	8004f80 <osMessageQueueNew+0xdc>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d059      	beq.n	8004f80 <osMessageQueueNew+0xdc>
    mem = -1;
 8004ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ed0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d029      	beq.n	8004f2c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d012      	beq.n	8004f06 <osMessageQueueNew+0x62>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b4f      	cmp	r3, #79	; 0x4f
 8004ee6:	d90e      	bls.n	8004f06 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	fb01 f303 	mul.w	r3, r1, r3
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <osMessageQueueNew+0x62>
        mem = 1;
 8004f00:	2301      	movs	r3, #1
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e014      	b.n	8004f30 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d110      	bne.n	8004f30 <osMessageQueueNew+0x8c>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10c      	bne.n	8004f30 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d108      	bne.n	8004f30 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d104      	bne.n	8004f30 <osMessageQueueNew+0x8c>
          mem = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e001      	b.n	8004f30 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d10b      	bne.n	8004f4e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2100      	movs	r1, #0
 8004f40:	9100      	str	r1, [sp, #0]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fa73 	bl	8005430 <xQueueGenericCreateStatic>
 8004f4a:	61f8      	str	r0, [r7, #28]
 8004f4c:	e008      	b.n	8004f60 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004f54:	2200      	movs	r2, #0
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fae1 	bl	8005520 <xQueueGenericCreate>
 8004f5e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00c      	beq.n	8004f80 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e001      	b.n	8004f78 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004f78:	6979      	ldr	r1, [r7, #20]
 8004f7a:	69f8      	ldr	r0, [r7, #28]
 8004f7c:	f001 fa68 	bl	8006450 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004f80:	69fb      	ldr	r3, [r7, #28]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fa4:	f3ef 8305 	mrs	r3, IPSR
 8004fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8004faa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d028      	beq.n	8005002 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <osMessageQueuePut+0x36>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <osMessageQueuePut+0x36>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004fc2:	f06f 0303 	mvn.w	r3, #3
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	e038      	b.n	800503c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004fce:	f107 0210 	add.w	r2, r7, #16
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	69b8      	ldr	r0, [r7, #24]
 8004fd8:	f000 fd1e 	bl	8005a18 <xQueueGenericSendFromISR>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d003      	beq.n	8004fea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004fe2:	f06f 0302 	mvn.w	r3, #2
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e028      	b.n	800503c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d025      	beq.n	800503c <osMessageQueuePut+0xb0>
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <osMessageQueuePut+0xbc>)
 8004ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	e01c      	b.n	800503c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <osMessageQueuePut+0x82>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800500e:	f06f 0303 	mvn.w	r3, #3
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e012      	b.n	800503c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005016:	2300      	movs	r3, #0
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	69b8      	ldr	r0, [r7, #24]
 800501e:	f000 fbfd 	bl	800581c <xQueueGenericSend>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d009      	beq.n	800503c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800502e:	f06f 0301 	mvn.w	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	e002      	b.n	800503c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005036:	f06f 0302 	mvn.w	r3, #2
 800503a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800503c:	69fb      	ldr	r3, [r7, #28]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3720      	adds	r7, #32
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	e000ed04 	.word	0xe000ed04

0800504c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005062:	f3ef 8305 	mrs	r3, IPSR
 8005066:	617b      	str	r3, [r7, #20]
  return(result);
 8005068:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800506a:	2b00      	cmp	r3, #0
 800506c:	d028      	beq.n	80050c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <osMessageQueueGet+0x34>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <osMessageQueueGet+0x34>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005080:	f06f 0303 	mvn.w	r3, #3
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e037      	b.n	80050f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800508c:	f107 0310 	add.w	r3, r7, #16
 8005090:	461a      	mov	r2, r3
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	69b8      	ldr	r0, [r7, #24]
 8005096:	f000 ffd3 	bl	8006040 <xQueueReceiveFromISR>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d003      	beq.n	80050a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80050a0:	f06f 0302 	mvn.w	r3, #2
 80050a4:	61fb      	str	r3, [r7, #28]
 80050a6:	e027      	b.n	80050f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d024      	beq.n	80050f8 <osMessageQueueGet+0xac>
 80050ae:	4b15      	ldr	r3, [pc, #84]	; (8005104 <osMessageQueueGet+0xb8>)
 80050b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	e01b      	b.n	80050f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <osMessageQueueGet+0x80>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d103      	bne.n	80050d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80050cc:	f06f 0303 	mvn.w	r3, #3
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e011      	b.n	80050f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	68b9      	ldr	r1, [r7, #8]
 80050d8:	69b8      	ldr	r0, [r7, #24]
 80050da:	f000 fdc5 	bl	8005c68 <xQueueReceive>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d009      	beq.n	80050f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80050ea:	f06f 0301 	mvn.w	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	e002      	b.n	80050f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80050f2:	f06f 0302 	mvn.w	r3, #2
 80050f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80050f8:	69fb      	ldr	r3, [r7, #28]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	e000ed04 	.word	0xe000ed04

08005108 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <osMessageQueueGetCount+0x18>
    count = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e00e      	b.n	800513e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005120:	f3ef 8305 	mrs	r3, IPSR
 8005124:	60fb      	str	r3, [r7, #12]
  return(result);
 8005126:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005128:	2b00      	cmp	r3, #0
 800512a:	d004      	beq.n	8005136 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800512c:	6938      	ldr	r0, [r7, #16]
 800512e:	f001 f825 	bl	800617c <uxQueueMessagesWaitingFromISR>
 8005132:	6178      	str	r0, [r7, #20]
 8005134:	e003      	b.n	800513e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005136:	6938      	ldr	r0, [r7, #16]
 8005138:	f001 f802 	bl	8006140 <uxQueueMessagesWaiting>
 800513c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005154:	f3ef 8305 	mrs	r3, IPSR
 8005158:	60fb      	str	r3, [r7, #12]
  return(result);
 800515a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005160:	f06f 0305 	mvn.w	r3, #5
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e00e      	b.n	8005186 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800516e:	f06f 0303 	mvn.w	r3, #3
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e007      	b.n	8005186 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005176:	6938      	ldr	r0, [r7, #16]
 8005178:	f001 f994 	bl	80064a4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005180:	6938      	ldr	r0, [r7, #16]
 8005182:	f001 f819 	bl	80061b8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005186:	697b      	ldr	r3, [r7, #20]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a07      	ldr	r2, [pc, #28]	; (80051bc <vApplicationGetIdleTaskMemory+0x2c>)
 80051a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	4a06      	ldr	r2, [pc, #24]	; (80051c0 <vApplicationGetIdleTaskMemory+0x30>)
 80051a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2280      	movs	r2, #128	; 0x80
 80051ac:	601a      	str	r2, [r3, #0]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	200000bc 	.word	0x200000bc
 80051c0:	20000178 	.word	0x20000178

080051c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a07      	ldr	r2, [pc, #28]	; (80051f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80051d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4a06      	ldr	r2, [pc, #24]	; (80051f4 <vApplicationGetTimerTaskMemory+0x30>)
 80051da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	20000378 	.word	0x20000378
 80051f4:	20000434 	.word	0x20000434

080051f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f103 0208 	add.w	r2, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f103 0208 	add.w	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b0:	d103      	bne.n	80052ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e00c      	b.n	80052d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3308      	adds	r3, #8
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	e002      	b.n	80052c8 <vListInsert+0x2e>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d2f6      	bcs.n	80052c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
}
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6892      	ldr	r2, [r2, #8]
 8005322:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6852      	ldr	r2, [r2, #4]
 800532c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d103      	bne.n	8005340 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	1e5a      	subs	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800538a:	f002 fdab 	bl	8007ee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005396:	68f9      	ldr	r1, [r7, #12]
 8005398:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	3b01      	subs	r3, #1
 80053bc:	68f9      	ldr	r1, [r7, #12]
 80053be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053c0:	fb01 f303 	mul.w	r3, r1, r3
 80053c4:	441a      	add	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d114      	bne.n	800540a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01a      	beq.n	800541e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3310      	adds	r3, #16
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 fd4f 	bl	8006e90 <xTaskRemoveFromEventList>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053f8:	4b0c      	ldr	r3, [pc, #48]	; (800542c <xQueueGenericReset+0xcc>)
 80053fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	e009      	b.n	800541e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	3310      	adds	r3, #16
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fef2 	bl	80051f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3324      	adds	r3, #36	; 0x24
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff feed 	bl	80051f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800541e:	f002 fd91 	bl	8007f44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005422:	2301      	movs	r3, #1
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005456:	bf00      	nop
 8005458:	e7fe      	b.n	8005458 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <xQueueGenericCreateStatic+0x52>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <xQueueGenericCreateStatic+0x56>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <xQueueGenericCreateStatic+0x58>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10a      	bne.n	80054a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800548c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005490:	f383 8811 	msr	BASEPRI, r3
 8005494:	f3bf 8f6f 	isb	sy
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	623b      	str	r3, [r7, #32]
}
 800549e:	bf00      	nop
 80054a0:	e7fe      	b.n	80054a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <xQueueGenericCreateStatic+0x7e>
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <xQueueGenericCreateStatic+0x82>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <xQueueGenericCreateStatic+0x84>
 80054b2:	2300      	movs	r3, #0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61fb      	str	r3, [r7, #28]
}
 80054ca:	bf00      	nop
 80054cc:	e7fe      	b.n	80054cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054ce:	2350      	movs	r3, #80	; 0x50
 80054d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b50      	cmp	r3, #80	; 0x50
 80054d6:	d00a      	beq.n	80054ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054dc:	f383 8811 	msr	BASEPRI, r3
 80054e0:	f3bf 8f6f 	isb	sy
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	61bb      	str	r3, [r7, #24]
}
 80054ea:	bf00      	nop
 80054ec:	e7fe      	b.n	80054ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005502:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f83f 	bl	8005594 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005518:	4618      	mov	r0, r3
 800551a:	3730      	adds	r7, #48	; 0x30
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	3350      	adds	r3, #80	; 0x50
 8005558:	4618      	mov	r0, r3
 800555a:	f002 fde5 	bl	8008128 <pvPortMalloc>
 800555e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d011      	beq.n	800558a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	3350      	adds	r3, #80	; 0x50
 800556e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005578:	79fa      	ldrb	r2, [r7, #7]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4613      	mov	r3, r2
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f805 	bl	8005594 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800558a:	69bb      	ldr	r3, [r7, #24]
	}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055c2:	2101      	movs	r1, #1
 80055c4:	69b8      	ldr	r0, [r7, #24]
 80055c6:	f7ff fecb 	bl	8005360 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00e      	beq.n	8005606 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055fa:	2300      	movs	r3, #0
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f90b 	bl	800581c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005606:	bf00      	nop
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	4603      	mov	r3, r0
 8005616:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005618:	2301      	movs	r3, #1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	461a      	mov	r2, r3
 8005624:	6939      	ldr	r1, [r7, #16]
 8005626:	6978      	ldr	r0, [r7, #20]
 8005628:	f7ff ff7a 	bl	8005520 <xQueueGenericCreate>
 800562c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f7ff ffd3 	bl	80055da <prvInitialiseMutex>

		return xNewQueue;
 8005634:	68fb      	ldr	r3, [r7, #12]
	}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af02      	add	r7, sp, #8
 8005644:	4603      	mov	r3, r0
 8005646:	6039      	str	r1, [r7, #0]
 8005648:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800564a:	2301      	movs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
 800564e:	2300      	movs	r3, #0
 8005650:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2200      	movs	r2, #0
 800565a:	6939      	ldr	r1, [r7, #16]
 800565c:	6978      	ldr	r0, [r7, #20]
 800565e:	f7ff fee7 	bl	8005430 <xQueueGenericCreateStatic>
 8005662:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff ffb8 	bl	80055da <prvInitialiseMutex>

		return xNewQueue;
 800566a:	68fb      	ldr	r3, [r7, #12]
	}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60fb      	str	r3, [r7, #12]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	689c      	ldr	r4, [r3, #8]
 80056a0:	f001 fdb8 	bl	8007214 <xTaskGetCurrentTaskHandle>
 80056a4:	4603      	mov	r3, r0
 80056a6:	429c      	cmp	r4, r3
 80056a8:	d111      	bne.n	80056ce <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80056bc:	2300      	movs	r3, #0
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	6938      	ldr	r0, [r7, #16]
 80056c4:	f000 f8aa 	bl	800581c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80056c8:	2301      	movs	r3, #1
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	e001      	b.n	80056d2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80056d2:	697b      	ldr	r3, [r7, #20]
	}
 80056d4:	4618      	mov	r0, r3
 80056d6:	371c      	adds	r7, #28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd90      	pop	{r4, r7, pc}

080056dc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	689c      	ldr	r4, [r3, #8]
 800570a:	f001 fd83 	bl	8007214 <xTaskGetCurrentTaskHandle>
 800570e:	4603      	mov	r3, r0
 8005710:	429c      	cmp	r4, r3
 8005712:	d107      	bne.n	8005724 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800571e:	2301      	movs	r3, #1
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e00c      	b.n	800573e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f000 fb7e 	bl	8005e28 <xQueueSemaphoreTake>
 800572c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800573e:	697b      	ldr	r3, [r7, #20]
	}
 8005740:	4618      	mov	r0, r3
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	bd90      	pop	{r4, r7, pc}

08005748 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d10a      	bne.n	8005770 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800575a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	61bb      	str	r3, [r7, #24]
}
 800576c:	bf00      	nop
 800576e:	e7fe      	b.n	800576e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d90a      	bls.n	800578e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	617b      	str	r3, [r7, #20]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800578e:	2302      	movs	r3, #2
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	2100      	movs	r1, #0
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff fe49 	bl	8005430 <xQueueGenericCreateStatic>
 800579e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057ac:	69fb      	ldr	r3, [r7, #28]
	}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10a      	bne.n	80057dc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	613b      	str	r3, [r7, #16]
}
 80057d8:	bf00      	nop
 80057da:	e7fe      	b.n	80057da <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d90a      	bls.n	80057fa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	60fb      	str	r3, [r7, #12]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057fa:	2202      	movs	r2, #2
 80057fc:	2100      	movs	r1, #0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fe8e 	bl	8005520 <xQueueGenericCreate>
 8005804:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005812:	697b      	ldr	r3, [r7, #20]
	}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800582a:	2300      	movs	r3, #0
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xQueueGenericSend+0x32>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d103      	bne.n	800585c <xQueueGenericSend+0x40>
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <xQueueGenericSend+0x44>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <xQueueGenericSend+0x46>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <xQueueGenericSend+0x60>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <xQueueGenericSend+0x6e>
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <xQueueGenericSend+0x72>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSend+0x74>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xQueueGenericSend+0x8e>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058aa:	f001 fcc3 	bl	8007234 <xTaskGetSchedulerState>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <xQueueGenericSend+0x9e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <xQueueGenericSend+0xa2>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericSend+0xa4>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <xQueueGenericSend+0xbe>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61fb      	str	r3, [r7, #28]
}
 80058d6:	bf00      	nop
 80058d8:	e7fe      	b.n	80058d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058da:	f002 fb03 	bl	8007ee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d302      	bcc.n	80058f0 <xQueueGenericSend+0xd4>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d129      	bne.n	8005944 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058f6:	f000 fc9a 	bl	800622e <prvCopyDataToQueue>
 80058fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b00      	cmp	r3, #0
 8005902:	d010      	beq.n	8005926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	3324      	adds	r3, #36	; 0x24
 8005908:	4618      	mov	r0, r3
 800590a:	f001 fac1 	bl	8006e90 <xTaskRemoveFromEventList>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d013      	beq.n	800593c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005914:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <xQueueGenericSend+0x1f8>)
 8005916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	e00a      	b.n	800593c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800592c:	4b39      	ldr	r3, [pc, #228]	; (8005a14 <xQueueGenericSend+0x1f8>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800593c:	f002 fb02 	bl	8007f44 <vPortExitCritical>
				return pdPASS;
 8005940:	2301      	movs	r3, #1
 8005942:	e063      	b.n	8005a0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800594a:	f002 fafb 	bl	8007f44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800594e:	2300      	movs	r3, #0
 8005950:	e05c      	b.n	8005a0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005958:	f107 0314 	add.w	r3, r7, #20
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fafb 	bl	8006f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005962:	2301      	movs	r3, #1
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005966:	f002 faed 	bl	8007f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800596a:	f001 f855 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800596e:	f002 fab9 	bl	8007ee4 <vPortEnterCritical>
 8005972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597e:	d103      	bne.n	8005988 <xQueueGenericSend+0x16c>
 8005980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x182>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599e:	f002 fad1 	bl	8007f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059a2:	1d3a      	adds	r2, r7, #4
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f001 faea 	bl	8006f84 <xTaskCheckForTimeOut>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d124      	bne.n	8005a00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b8:	f000 fd31 	bl	800641e <prvIsQueueFull>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d018      	beq.n	80059f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	3310      	adds	r3, #16
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 fa10 	bl	8006df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d2:	f000 fcbc 	bl	800634e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059d6:	f001 f82d 	bl	8006a34 <xTaskResumeAll>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f47f af7c 	bne.w	80058da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <xQueueGenericSend+0x1f8>)
 80059e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	e772      	b.n	80058da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059f6:	f000 fcaa 	bl	800634e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059fa:	f001 f81b 	bl	8006a34 <xTaskResumeAll>
 80059fe:	e76c      	b.n	80058da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a02:	f000 fca4 	bl	800634e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a06:	f001 f815 	bl	8006a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3738      	adds	r7, #56	; 0x38
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b090      	sub	sp, #64	; 0x40
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <xQueueGenericSendFromISR+0x3c>
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <xQueueGenericSendFromISR+0x40>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <xQueueGenericSendFromISR+0x42>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSendFromISR+0x6a>
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <xQueueGenericSendFromISR+0x6e>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <xQueueGenericSendFromISR+0x70>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	623b      	str	r3, [r7, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aa2:	f002 fb01 	bl	80080a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	61fa      	str	r2, [r7, #28]
 8005abc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005abe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <xQueueGenericSendFromISR+0xbc>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d12f      	bne.n	8005b34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005aea:	f000 fba0 	bl	800622e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af6:	d112      	bne.n	8005b1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d016      	beq.n	8005b2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	3324      	adds	r3, #36	; 0x24
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 f9c3 	bl	8006e90 <xTaskRemoveFromEventList>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e007      	b.n	8005b2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b22:	3301      	adds	r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	b25a      	sxtb	r2, r3
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005b32:	e001      	b.n	8005b38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3740      	adds	r7, #64	; 0x40
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b08e      	sub	sp, #56	; 0x38
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	623b      	str	r3, [r7, #32]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	61fb      	str	r3, [r7, #28]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <xQueueGiveFromISR+0x58>
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <xQueueGiveFromISR+0x5c>
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <xQueueGiveFromISR+0x5e>
 8005baa:	2300      	movs	r3, #0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	61bb      	str	r3, [r7, #24]
}
 8005bc2:	bf00      	nop
 8005bc4:	e7fe      	b.n	8005bc4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bc6:	f002 fa6f 	bl	80080a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005bca:	f3ef 8211 	mrs	r2, BASEPRI
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	617a      	str	r2, [r7, #20]
 8005be0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005be2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d22b      	bcs.n	8005c4e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c10:	d112      	bne.n	8005c38 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d016      	beq.n	8005c48 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	3324      	adds	r3, #36	; 0x24
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 f936 	bl	8006e90 <xTaskRemoveFromEventList>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00e      	beq.n	8005c48 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
 8005c36:	e007      	b.n	8005c48 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	b25a      	sxtb	r2, r3
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	e001      	b.n	8005c52 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f383 8811 	msr	BASEPRI, r3
}
 8005c5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3738      	adds	r7, #56	; 0x38
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	; 0x30
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <xQueueReceive+0x30>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	623b      	str	r3, [r7, #32]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <xQueueReceive+0x3e>
 8005c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <xQueueReceive+0x42>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <xQueueReceive+0x44>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <xQueueReceive+0x5e>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	61fb      	str	r3, [r7, #28]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cc6:	f001 fab5 	bl	8007234 <xTaskGetSchedulerState>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d102      	bne.n	8005cd6 <xQueueReceive+0x6e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <xQueueReceive+0x72>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <xQueueReceive+0x74>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueReceive+0x8e>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	61bb      	str	r3, [r7, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cf6:	f002 f8f5 	bl	8007ee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01f      	beq.n	8005d46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d0a:	f000 fafa 	bl	8006302 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00f      	beq.n	8005d3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	3310      	adds	r3, #16
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 f8b4 	bl	8006e90 <xTaskRemoveFromEventList>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	; (8005e24 <xQueueReceive+0x1bc>)
 8005d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d3e:	f002 f901 	bl	8007f44 <vPortExitCritical>
				return pdPASS;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e069      	b.n	8005e1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d4c:	f002 f8fa 	bl	8007f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e062      	b.n	8005e1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 f8fa 	bl	8006f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d64:	2301      	movs	r3, #1
 8005d66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d68:	f002 f8ec 	bl	8007f44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d6c:	f000 fe54 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d70:	f002 f8b8 	bl	8007ee4 <vPortEnterCritical>
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d80:	d103      	bne.n	8005d8a <xQueueReceive+0x122>
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d96:	d103      	bne.n	8005da0 <xQueueReceive+0x138>
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005da0:	f002 f8d0 	bl	8007f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005da4:	1d3a      	adds	r2, r7, #4
 8005da6:	f107 0310 	add.w	r3, r7, #16
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 f8e9 	bl	8006f84 <xTaskCheckForTimeOut>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d123      	bne.n	8005e00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dba:	f000 fb1a 	bl	80063f2 <prvIsQueueEmpty>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d017      	beq.n	8005df4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	3324      	adds	r3, #36	; 0x24
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f80f 	bl	8006df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dd4:	f000 fabb 	bl	800634e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dd8:	f000 fe2c 	bl	8006a34 <xTaskResumeAll>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d189      	bne.n	8005cf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005de2:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <xQueueReceive+0x1bc>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	e780      	b.n	8005cf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f000 faaa 	bl	800634e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dfa:	f000 fe1b 	bl	8006a34 <xTaskResumeAll>
 8005dfe:	e77a      	b.n	8005cf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e02:	f000 faa4 	bl	800634e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e06:	f000 fe15 	bl	8006a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e0c:	f000 faf1 	bl	80063f2 <prvIsQueueEmpty>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f43f af6f 	beq.w	8005cf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3730      	adds	r7, #48	; 0x30
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	e000ed04 	.word	0xe000ed04

08005e28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08e      	sub	sp, #56	; 0x38
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	623b      	str	r3, [r7, #32]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	61fb      	str	r3, [r7, #28]
}
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e78:	f001 f9dc 	bl	8007234 <xTaskGetSchedulerState>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <xQueueSemaphoreTake+0x60>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <xQueueSemaphoreTake+0x64>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <xQueueSemaphoreTake+0x66>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	61bb      	str	r3, [r7, #24]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ea8:	f002 f81c 	bl	8007ee4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d024      	beq.n	8005f02 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	1e5a      	subs	r2, r3, #1
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005ec8:	f001 fb2a 	bl	8007520 <pvTaskIncrementMutexHeldCount>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00f      	beq.n	8005efa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	3310      	adds	r3, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 ffd6 	bl	8006e90 <xTaskRemoveFromEventList>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005eea:	4b54      	ldr	r3, [pc, #336]	; (800603c <xQueueSemaphoreTake+0x214>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005efa:	f002 f823 	bl	8007f44 <vPortExitCritical>
				return pdPASS;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e097      	b.n	8006032 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d111      	bne.n	8005f2c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	617b      	str	r3, [r7, #20]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f24:	f002 f80e 	bl	8007f44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	e082      	b.n	8006032 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f80e 	bl	8006f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f40:	f002 f800 	bl	8007f44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f44:	f000 fd68 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f48:	f001 ffcc 	bl	8007ee4 <vPortEnterCritical>
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f52:	b25b      	sxtb	r3, r3
 8005f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f58:	d103      	bne.n	8005f62 <xQueueSemaphoreTake+0x13a>
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f68:	b25b      	sxtb	r3, r3
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6e:	d103      	bne.n	8005f78 <xQueueSemaphoreTake+0x150>
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f78:	f001 ffe4 	bl	8007f44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fffd 	bl	8006f84 <xTaskCheckForTimeOut>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d132      	bne.n	8005ff6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f92:	f000 fa2e 	bl	80063f2 <prvIsQueueEmpty>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d026      	beq.n	8005fea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005fa4:	f001 ff9e 	bl	8007ee4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 f95f 	bl	8007270 <xTaskPriorityInherit>
 8005fb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005fb4:	f001 ffc6 	bl	8007f44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	3324      	adds	r3, #36	; 0x24
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 ff15 	bl	8006df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fc8:	f000 f9c1 	bl	800634e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fcc:	f000 fd32 	bl	8006a34 <xTaskResumeAll>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f47f af68 	bne.w	8005ea8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005fd8:	4b18      	ldr	r3, [pc, #96]	; (800603c <xQueueSemaphoreTake+0x214>)
 8005fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	e75e      	b.n	8005ea8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fec:	f000 f9af 	bl	800634e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ff0:	f000 fd20 	bl	8006a34 <xTaskResumeAll>
 8005ff4:	e758      	b.n	8005ea8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ff8:	f000 f9a9 	bl	800634e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ffc:	f000 fd1a 	bl	8006a34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006002:	f000 f9f6 	bl	80063f2 <prvIsQueueEmpty>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	f43f af4d 	beq.w	8005ea8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00d      	beq.n	8006030 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006014:	f001 ff66 	bl	8007ee4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800601a:	f000 f8f0 	bl	80061fe <prvGetDisinheritPriorityAfterTimeout>
 800601e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006026:	4618      	mov	r0, r3
 8006028:	f001 f9f8 	bl	800741c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800602c:	f001 ff8a 	bl	8007f44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006030:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006032:	4618      	mov	r0, r3
 8006034:	3738      	adds	r7, #56	; 0x38
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08e      	sub	sp, #56	; 0x38
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	623b      	str	r3, [r7, #32]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d103      	bne.n	800607a <xQueueReceiveFromISR+0x3a>
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <xQueueReceiveFromISR+0x3e>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <xQueueReceiveFromISR+0x40>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	61fb      	str	r3, [r7, #28]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800609a:	f002 f805 	bl	80080a8 <vPortValidateInterruptPriority>
	__asm volatile
 800609e:	f3ef 8211 	mrs	r2, BASEPRI
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	61ba      	str	r2, [r7, #24]
 80060b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d02f      	beq.n	8006126 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060d4:	f000 f915 	bl	8006302 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	1e5a      	subs	r2, r3, #1
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e8:	d112      	bne.n	8006110 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	3310      	adds	r3, #16
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 feca 	bl	8006e90 <xTaskRemoveFromEventList>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	e007      	b.n	8006120 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006114:	3301      	adds	r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	b25a      	sxtb	r2, r3
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006120:	2301      	movs	r3, #1
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
 8006124:	e001      	b.n	800612a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006126:	2300      	movs	r3, #0
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f383 8811 	msr	BASEPRI, r3
}
 8006134:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006138:	4618      	mov	r0, r3
 800613a:	3738      	adds	r7, #56	; 0x38
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60bb      	str	r3, [r7, #8]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006164:	f001 febe 	bl	8007ee4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800616e:	f001 fee9 	bl	8007f44 <vPortExitCritical>

	return uxReturn;
 8006172:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80061aa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80061ac:	4618      	mov	r0, r3
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10a      	bne.n	80061e0 <vQueueDelete+0x28>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	60bb      	str	r3, [r7, #8]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f95f 	bl	80064a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f002 f865 	bl	80082c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80061f6:	bf00      	nop
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80061fe:	b480      	push	{r7}
 8006200:	b085      	sub	sp, #20
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e001      	b.n	8006220 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006220:	68fb      	ldr	r3, [r7, #12]
	}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800623a:	2300      	movs	r3, #0
 800623c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10d      	bne.n	8006268 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d14d      	bne.n	80062f0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	4618      	mov	r0, r3
 800625a:	f001 f871 	bl	8007340 <xTaskPriorityDisinherit>
 800625e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	e043      	b.n	80062f0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d119      	bne.n	80062a2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6858      	ldr	r0, [r3, #4]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	461a      	mov	r2, r3
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	f00f fce4 	bl	8015c46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	441a      	add	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	d32b      	bcc.n	80062f0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	605a      	str	r2, [r3, #4]
 80062a0:	e026      	b.n	80062f0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68d8      	ldr	r0, [r3, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	461a      	mov	r2, r3
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	f00f fcca 	bl	8015c46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	425b      	negs	r3, r3
 80062bc:	441a      	add	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d207      	bcs.n	80062de <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	425b      	negs	r3, r3
 80062d8:	441a      	add	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d105      	bne.n	80062f0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80062f8:	697b      	ldr	r3, [r7, #20]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d018      	beq.n	8006346 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	d303      	bcc.n	8006336 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68d9      	ldr	r1, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	461a      	mov	r2, r3
 8006340:	6838      	ldr	r0, [r7, #0]
 8006342:	f00f fc80 	bl	8015c46 <memcpy>
	}
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006356:	f001 fdc5 	bl	8007ee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006360:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006362:	e011      	b.n	8006388 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d012      	beq.n	8006392 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	4618      	mov	r0, r3
 8006372:	f000 fd8d 	bl	8006e90 <xTaskRemoveFromEventList>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800637c:	f000 fe64 	bl	8007048 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	3b01      	subs	r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800638c:	2b00      	cmp	r3, #0
 800638e:	dce9      	bgt.n	8006364 <prvUnlockQueue+0x16>
 8006390:	e000      	b.n	8006394 <prvUnlockQueue+0x46>
					break;
 8006392:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	22ff      	movs	r2, #255	; 0xff
 8006398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800639c:	f001 fdd2 	bl	8007f44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063a0:	f001 fda0 	bl	8007ee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063aa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063ac:	e011      	b.n	80063d2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d012      	beq.n	80063dc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3310      	adds	r3, #16
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fd68 	bl	8006e90 <xTaskRemoveFromEventList>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063c6:	f000 fe3f 	bl	8007048 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	dce9      	bgt.n	80063ae <prvUnlockQueue+0x60>
 80063da:	e000      	b.n	80063de <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063dc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	22ff      	movs	r2, #255	; 0xff
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063e6:	f001 fdad 	bl	8007f44 <vPortExitCritical>
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063fa:	f001 fd73 	bl	8007ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	e001      	b.n	8006410 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006410:	f001 fd98 	bl	8007f44 <vPortExitCritical>

	return xReturn;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006426:	f001 fd5d 	bl	8007ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	429a      	cmp	r2, r3
 8006434:	d102      	bne.n	800643c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	e001      	b.n	8006440 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006440:	f001 fd80 	bl	8007f44 <vPortExitCritical>

	return xReturn;
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
	...

08006450 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e014      	b.n	800648a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006460:	4a0f      	ldr	r2, [pc, #60]	; (80064a0 <vQueueAddToRegistry+0x50>)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800646c:	490c      	ldr	r1, [pc, #48]	; (80064a0 <vQueueAddToRegistry+0x50>)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006476:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <vQueueAddToRegistry+0x50>)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	00db      	lsls	r3, r3, #3
 800647c:	4413      	add	r3, r2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006482:	e006      	b.n	8006492 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b07      	cmp	r3, #7
 800648e:	d9e7      	bls.n	8006460 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20007f44 	.word	0x20007f44

080064a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e016      	b.n	80064e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80064b2:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <vQueueUnregisterQueue+0x50>)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4413      	add	r3, r2
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d10b      	bne.n	80064da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80064c2:	4a0c      	ldr	r2, [pc, #48]	; (80064f4 <vQueueUnregisterQueue+0x50>)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2100      	movs	r1, #0
 80064c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80064cc:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <vQueueUnregisterQueue+0x50>)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	2200      	movs	r2, #0
 80064d6:	605a      	str	r2, [r3, #4]
				break;
 80064d8:	e006      	b.n	80064e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b07      	cmp	r3, #7
 80064e4:	d9e5      	bls.n	80064b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20007f44 	.word	0x20007f44

080064f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006508:	f001 fcec 	bl	8007ee4 <vPortEnterCritical>
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006512:	b25b      	sxtb	r3, r3
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006518:	d103      	bne.n	8006522 <vQueueWaitForMessageRestricted+0x2a>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006528:	b25b      	sxtb	r3, r3
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652e:	d103      	bne.n	8006538 <vQueueWaitForMessageRestricted+0x40>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006538:	f001 fd04 	bl	8007f44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d106      	bne.n	8006552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	3324      	adds	r3, #36	; 0x24
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	4618      	mov	r0, r3
 800654e:	f000 fc73 	bl	8006e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006552:	6978      	ldr	r0, [r7, #20]
 8006554:	f7ff fefb 	bl	800634e <prvUnlockQueue>
	}
 8006558:	bf00      	nop
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08e      	sub	sp, #56	; 0x38
 8006564:	af04      	add	r7, sp, #16
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10a      	bne.n	800658a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	623b      	str	r3, [r7, #32]
}
 8006586:	bf00      	nop
 8006588:	e7fe      	b.n	8006588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	61fb      	str	r3, [r7, #28]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80065a6:	23bc      	movs	r3, #188	; 0xbc
 80065a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2bbc      	cmp	r3, #188	; 0xbc
 80065ae:	d00a      	beq.n	80065c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	61bb      	str	r3, [r7, #24]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d01e      	beq.n	800660c <xTaskCreateStatic+0xac>
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065e6:	2300      	movs	r3, #0
 80065e8:	9303      	str	r3, [sp, #12]
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	9302      	str	r3, [sp, #8]
 80065ee:	f107 0314 	add.w	r3, r7, #20
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68b9      	ldr	r1, [r7, #8]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f850 	bl	80066a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006606:	f000 f8f3 	bl	80067f0 <prvAddNewTaskToReadyList>
 800660a:	e001      	b.n	8006610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800660c:	2300      	movs	r3, #0
 800660e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006610:	697b      	ldr	r3, [r7, #20]
	}
 8006612:	4618      	mov	r0, r3
 8006614:	3728      	adds	r7, #40	; 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800661a:	b580      	push	{r7, lr}
 800661c:	b08c      	sub	sp, #48	; 0x30
 800661e:	af04      	add	r7, sp, #16
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4618      	mov	r0, r3
 8006630:	f001 fd7a 	bl	8008128 <pvPortMalloc>
 8006634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800663c:	20bc      	movs	r0, #188	; 0xbc
 800663e:	f001 fd73 	bl	8008128 <pvPortMalloc>
 8006642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	631a      	str	r2, [r3, #48]	; 0x30
 8006650:	e005      	b.n	800665e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006652:	6978      	ldr	r0, [r7, #20]
 8006654:	f001 fe34 	bl	80082c0 <vPortFree>
 8006658:	e001      	b.n	800665e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d017      	beq.n	8006694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	2300      	movs	r3, #0
 8006670:	9303      	str	r3, [sp, #12]
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	9302      	str	r3, [sp, #8]
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 f80e 	bl	80066a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006688:	69f8      	ldr	r0, [r7, #28]
 800668a:	f000 f8b1 	bl	80067f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800668e:	2301      	movs	r3, #1
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	e002      	b.n	800669a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800669a:	69bb      	ldr	r3, [r7, #24]
	}
 800669c:	4618      	mov	r0, r3
 800669e:	3720      	adds	r7, #32
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	461a      	mov	r2, r3
 80066bc:	21a5      	movs	r1, #165	; 0xa5
 80066be:	f00f faea 	bl	8015c96 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066cc:	3b01      	subs	r3, #1
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f003 0307 	and.w	r3, r3, #7
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	617b      	str	r3, [r7, #20]
}
 80066f8:	bf00      	nop
 80066fa:	e7fe      	b.n	80066fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01f      	beq.n	8006742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e012      	b.n	800672e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	7819      	ldrb	r1, [r3, #0]
 8006710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	3334      	adds	r3, #52	; 0x34
 8006718:	460a      	mov	r2, r1
 800671a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	4413      	add	r3, r2
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d006      	beq.n	8006736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	3301      	adds	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2b0f      	cmp	r3, #15
 8006732:	d9e9      	bls.n	8006708 <prvInitialiseNewTask+0x64>
 8006734:	e000      	b.n	8006738 <prvInitialiseNewTask+0x94>
			{
				break;
 8006736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006740:	e003      	b.n	800674a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	2b37      	cmp	r3, #55	; 0x37
 800674e:	d901      	bls.n	8006754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006750:	2337      	movs	r3, #55	; 0x37
 8006752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800675e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	2200      	movs	r2, #0
 8006764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	3304      	adds	r3, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe fd64 	bl	8005238 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	3318      	adds	r3, #24
 8006774:	4618      	mov	r0, r3
 8006776:	f7fe fd5f 	bl	8005238 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800678e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	2200      	movs	r2, #0
 800679c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80067a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a2:	3354      	adds	r3, #84	; 0x54
 80067a4:	2260      	movs	r2, #96	; 0x60
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00f fa74 	bl	8015c96 <memset>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <prvInitialiseNewTask+0x140>)
 80067b2:	659a      	str	r2, [r3, #88]	; 0x58
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	4a0c      	ldr	r2, [pc, #48]	; (80067e8 <prvInitialiseNewTask+0x144>)
 80067b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	4a0b      	ldr	r2, [pc, #44]	; (80067ec <prvInitialiseNewTask+0x148>)
 80067be:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	68f9      	ldr	r1, [r7, #12]
 80067c4:	69b8      	ldr	r0, [r7, #24]
 80067c6:	f001 fa61 	bl	8007c8c <pxPortInitialiseStack>
 80067ca:	4602      	mov	r2, r0
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067dc:	bf00      	nop
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	0801a7f4 	.word	0x0801a7f4
 80067e8:	0801a814 	.word	0x0801a814
 80067ec:	0801a7d4 	.word	0x0801a7d4

080067f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067f8:	f001 fb74 	bl	8007ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067fc:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <prvAddNewTaskToReadyList+0xc4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	4a2c      	ldr	r2, [pc, #176]	; (80068b4 <prvAddNewTaskToReadyList+0xc4>)
 8006804:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006806:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <prvAddNewTaskToReadyList+0xc8>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800680e:	4a2a      	ldr	r2, [pc, #168]	; (80068b8 <prvAddNewTaskToReadyList+0xc8>)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006814:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <prvAddNewTaskToReadyList+0xc4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d110      	bne.n	800683e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800681c:	f000 fc38 	bl	8007090 <prvInitialiseTaskLists>
 8006820:	e00d      	b.n	800683e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <prvAddNewTaskToReadyList+0xcc>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d109      	bne.n	800683e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800682a:	4b23      	ldr	r3, [pc, #140]	; (80068b8 <prvAddNewTaskToReadyList+0xc8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	429a      	cmp	r2, r3
 8006836:	d802      	bhi.n	800683e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006838:	4a1f      	ldr	r2, [pc, #124]	; (80068b8 <prvAddNewTaskToReadyList+0xc8>)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800683e:	4b20      	ldr	r3, [pc, #128]	; (80068c0 <prvAddNewTaskToReadyList+0xd0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3301      	adds	r3, #1
 8006844:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <prvAddNewTaskToReadyList+0xd0>)
 8006846:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <prvAddNewTaskToReadyList+0xd0>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <prvAddNewTaskToReadyList+0xd4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d903      	bls.n	8006864 <prvAddNewTaskToReadyList+0x74>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a18      	ldr	r2, [pc, #96]	; (80068c4 <prvAddNewTaskToReadyList+0xd4>)
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <prvAddNewTaskToReadyList+0xd8>)
 8006872:	441a      	add	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7fe fce9 	bl	8005252 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006880:	f001 fb60 	bl	8007f44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006884:	4b0d      	ldr	r3, [pc, #52]	; (80068bc <prvAddNewTaskToReadyList+0xcc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00e      	beq.n	80068aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <prvAddNewTaskToReadyList+0xc8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	429a      	cmp	r2, r3
 8006898:	d207      	bcs.n	80068aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <prvAddNewTaskToReadyList+0xdc>)
 800689c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000d08 	.word	0x20000d08
 80068b8:	20000834 	.word	0x20000834
 80068bc:	20000d14 	.word	0x20000d14
 80068c0:	20000d24 	.word	0x20000d24
 80068c4:	20000d10 	.word	0x20000d10
 80068c8:	20000838 	.word	0x20000838
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80068e2:	4b13      	ldr	r3, [pc, #76]	; (8006930 <vTaskDelay+0x60>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <vTaskDelay+0x30>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	60bb      	str	r3, [r7, #8]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006900:	f000 f88a 	bl	8006a18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006904:	2100      	movs	r1, #0
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fe1e 	bl	8007548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800690c:	f000 f892 	bl	8006a34 <xTaskResumeAll>
 8006910:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d107      	bne.n	8006928 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <vTaskDelay+0x64>)
 800691a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20000d30 	.word	0x20000d30
 8006934:	e000ed04 	.word	0xe000ed04

08006938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	; 0x28
 800693c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006946:	463a      	mov	r2, r7
 8006948:	1d39      	adds	r1, r7, #4
 800694a:	f107 0308 	add.w	r3, r7, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fc1e 	bl	8005190 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	9202      	str	r2, [sp, #8]
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	2300      	movs	r3, #0
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	460a      	mov	r2, r1
 8006966:	4924      	ldr	r1, [pc, #144]	; (80069f8 <vTaskStartScheduler+0xc0>)
 8006968:	4824      	ldr	r0, [pc, #144]	; (80069fc <vTaskStartScheduler+0xc4>)
 800696a:	f7ff fdf9 	bl	8006560 <xTaskCreateStatic>
 800696e:	4603      	mov	r3, r0
 8006970:	4a23      	ldr	r2, [pc, #140]	; (8006a00 <vTaskStartScheduler+0xc8>)
 8006972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006974:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <vTaskStartScheduler+0xc8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e001      	b.n	8006986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d102      	bne.n	8006992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800698c:	f000 fe30 	bl	80075f0 <xTimerCreateTimerTask>
 8006990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d11b      	bne.n	80069d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	613b      	str	r3, [r7, #16]
}
 80069aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069ac:	4b15      	ldr	r3, [pc, #84]	; (8006a04 <vTaskStartScheduler+0xcc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3354      	adds	r3, #84	; 0x54
 80069b2:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <vTaskStartScheduler+0xd0>)
 80069b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <vTaskStartScheduler+0xd4>)
 80069b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069be:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <vTaskStartScheduler+0xd8>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <vTaskStartScheduler+0xdc>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ca:	f001 f9e9 	bl	8007da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ce:	e00e      	b.n	80069ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d6:	d10a      	bne.n	80069ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <vTaskStartScheduler+0xb4>
}
 80069ee:	bf00      	nop
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08017164 	.word	0x08017164
 80069fc:	08007061 	.word	0x08007061
 8006a00:	20000d2c 	.word	0x20000d2c
 8006a04:	20000834 	.word	0x20000834
 8006a08:	2000001c 	.word	0x2000001c
 8006a0c:	20000d28 	.word	0x20000d28
 8006a10:	20000d14 	.word	0x20000d14
 8006a14:	20000d0c 	.word	0x20000d0c

08006a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a1c:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <vTaskSuspendAll+0x18>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	4a03      	ldr	r2, [pc, #12]	; (8006a30 <vTaskSuspendAll+0x18>)
 8006a24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a26:	bf00      	nop
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000d30 	.word	0x20000d30

08006a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a42:	4b42      	ldr	r3, [pc, #264]	; (8006b4c <xTaskResumeAll+0x118>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <xTaskResumeAll+0x2c>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	603b      	str	r3, [r7, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a60:	f001 fa40 	bl	8007ee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a64:	4b39      	ldr	r3, [pc, #228]	; (8006b4c <xTaskResumeAll+0x118>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	4a38      	ldr	r2, [pc, #224]	; (8006b4c <xTaskResumeAll+0x118>)
 8006a6c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a6e:	4b37      	ldr	r3, [pc, #220]	; (8006b4c <xTaskResumeAll+0x118>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d162      	bne.n	8006b3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a76:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <xTaskResumeAll+0x11c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d05e      	beq.n	8006b3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a7e:	e02f      	b.n	8006ae0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a80:	4b34      	ldr	r3, [pc, #208]	; (8006b54 <xTaskResumeAll+0x120>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3318      	adds	r3, #24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fc3d 	bl	800530c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3304      	adds	r3, #4
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fc38 	bl	800530c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4b2d      	ldr	r3, [pc, #180]	; (8006b58 <xTaskResumeAll+0x124>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d903      	bls.n	8006ab0 <xTaskResumeAll+0x7c>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	4a2a      	ldr	r2, [pc, #168]	; (8006b58 <xTaskResumeAll+0x124>)
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4a27      	ldr	r2, [pc, #156]	; (8006b5c <xTaskResumeAll+0x128>)
 8006abe:	441a      	add	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f7fe fbc3 	bl	8005252 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad0:	4b23      	ldr	r3, [pc, #140]	; (8006b60 <xTaskResumeAll+0x12c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d302      	bcc.n	8006ae0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ada:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <xTaskResumeAll+0x130>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ae0:	4b1c      	ldr	r3, [pc, #112]	; (8006b54 <xTaskResumeAll+0x120>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1cb      	bne.n	8006a80 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006aee:	f000 fb71 	bl	80071d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <xTaskResumeAll+0x134>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d010      	beq.n	8006b20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006afe:	f000 f859 	bl	8006bb4 <xTaskIncrementTick>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006b08:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <xTaskResumeAll+0x130>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3b01      	subs	r3, #1
 8006b12:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f1      	bne.n	8006afe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006b1a:	4b13      	ldr	r3, [pc, #76]	; (8006b68 <xTaskResumeAll+0x134>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b20:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <xTaskResumeAll+0x130>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <xTaskResumeAll+0x138>)
 8006b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b3c:	f001 fa02 	bl	8007f44 <vPortExitCritical>

	return xAlreadyYielded;
 8006b40:	68bb      	ldr	r3, [r7, #8]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000d30 	.word	0x20000d30
 8006b50:	20000d08 	.word	0x20000d08
 8006b54:	20000cc8 	.word	0x20000cc8
 8006b58:	20000d10 	.word	0x20000d10
 8006b5c:	20000838 	.word	0x20000838
 8006b60:	20000834 	.word	0x20000834
 8006b64:	20000d1c 	.word	0x20000d1c
 8006b68:	20000d18 	.word	0x20000d18
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b76:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <xTaskGetTickCount+0x1c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b7c:	687b      	ldr	r3, [r7, #4]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20000d0c 	.word	0x20000d0c

08006b90 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b96:	f001 fa87 	bl	80080a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006b9e:	4b04      	ldr	r3, [pc, #16]	; (8006bb0 <xTaskGetTickCountFromISR+0x20>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ba4:	683b      	ldr	r3, [r7, #0]
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000d0c 	.word	0x20000d0c

08006bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bbe:	4b4f      	ldr	r3, [pc, #316]	; (8006cfc <xTaskIncrementTick+0x148>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f040 808f 	bne.w	8006ce6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bc8:	4b4d      	ldr	r3, [pc, #308]	; (8006d00 <xTaskIncrementTick+0x14c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bd0:	4a4b      	ldr	r2, [pc, #300]	; (8006d00 <xTaskIncrementTick+0x14c>)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d120      	bne.n	8006c1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bdc:	4b49      	ldr	r3, [pc, #292]	; (8006d04 <xTaskIncrementTick+0x150>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <xTaskIncrementTick+0x48>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	603b      	str	r3, [r7, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <xTaskIncrementTick+0x46>
 8006bfc:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <xTaskIncrementTick+0x150>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	4b41      	ldr	r3, [pc, #260]	; (8006d08 <xTaskIncrementTick+0x154>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a3f      	ldr	r2, [pc, #252]	; (8006d04 <xTaskIncrementTick+0x150>)
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4a3f      	ldr	r2, [pc, #252]	; (8006d08 <xTaskIncrementTick+0x154>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	4b3e      	ldr	r3, [pc, #248]	; (8006d0c <xTaskIncrementTick+0x158>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a3d      	ldr	r2, [pc, #244]	; (8006d0c <xTaskIncrementTick+0x158>)
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	f000 fadb 	bl	80071d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c1e:	4b3c      	ldr	r3, [pc, #240]	; (8006d10 <xTaskIncrementTick+0x15c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d349      	bcc.n	8006cbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c28:	4b36      	ldr	r3, [pc, #216]	; (8006d04 <xTaskIncrementTick+0x150>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c32:	4b37      	ldr	r3, [pc, #220]	; (8006d10 <xTaskIncrementTick+0x15c>)
 8006c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c38:	601a      	str	r2, [r3, #0]
					break;
 8006c3a:	e03f      	b.n	8006cbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3c:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <xTaskIncrementTick+0x150>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d203      	bcs.n	8006c5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c54:	4a2e      	ldr	r2, [pc, #184]	; (8006d10 <xTaskIncrementTick+0x15c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c5a:	e02f      	b.n	8006cbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fb53 	bl	800530c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3318      	adds	r3, #24
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fb4a 	bl	800530c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4b25      	ldr	r3, [pc, #148]	; (8006d14 <xTaskIncrementTick+0x160>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d903      	bls.n	8006c8c <xTaskIncrementTick+0xd8>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <xTaskIncrementTick+0x160>)
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4a1f      	ldr	r2, [pc, #124]	; (8006d18 <xTaskIncrementTick+0x164>)
 8006c9a:	441a      	add	r2, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f7fe fad5 	bl	8005252 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cac:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <xTaskIncrementTick+0x168>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d3b8      	bcc.n	8006c28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cba:	e7b5      	b.n	8006c28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006cbc:	4b17      	ldr	r3, [pc, #92]	; (8006d1c <xTaskIncrementTick+0x168>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	4915      	ldr	r1, [pc, #84]	; (8006d18 <xTaskIncrementTick+0x164>)
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d901      	bls.n	8006cd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cd8:	4b11      	ldr	r3, [pc, #68]	; (8006d20 <xTaskIncrementTick+0x16c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e004      	b.n	8006cf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <xTaskIncrementTick+0x170>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	4a0d      	ldr	r2, [pc, #52]	; (8006d24 <xTaskIncrementTick+0x170>)
 8006cee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cf0:	697b      	ldr	r3, [r7, #20]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	20000d30 	.word	0x20000d30
 8006d00:	20000d0c 	.word	0x20000d0c
 8006d04:	20000cc0 	.word	0x20000cc0
 8006d08:	20000cc4 	.word	0x20000cc4
 8006d0c:	20000d20 	.word	0x20000d20
 8006d10:	20000d28 	.word	0x20000d28
 8006d14:	20000d10 	.word	0x20000d10
 8006d18:	20000838 	.word	0x20000838
 8006d1c:	20000834 	.word	0x20000834
 8006d20:	20000d1c 	.word	0x20000d1c
 8006d24:	20000d18 	.word	0x20000d18

08006d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d2e:	4b2a      	ldr	r3, [pc, #168]	; (8006dd8 <vTaskSwitchContext+0xb0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d36:	4b29      	ldr	r3, [pc, #164]	; (8006ddc <vTaskSwitchContext+0xb4>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d3c:	e046      	b.n	8006dcc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006d3e:	4b27      	ldr	r3, [pc, #156]	; (8006ddc <vTaskSwitchContext+0xb4>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d44:	4b26      	ldr	r3, [pc, #152]	; (8006de0 <vTaskSwitchContext+0xb8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	e010      	b.n	8006d6e <vTaskSwitchContext+0x46>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <vTaskSwitchContext+0x40>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	607b      	str	r3, [r7, #4]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <vTaskSwitchContext+0x3e>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	491d      	ldr	r1, [pc, #116]	; (8006de4 <vTaskSwitchContext+0xbc>)
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0e4      	beq.n	8006d4c <vTaskSwitchContext+0x24>
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <vTaskSwitchContext+0xbc>)
 8006d8e:	4413      	add	r3, r2
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	605a      	str	r2, [r3, #4]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	3308      	adds	r3, #8
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d104      	bne.n	8006db2 <vTaskSwitchContext+0x8a>
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4a0b      	ldr	r2, [pc, #44]	; (8006de8 <vTaskSwitchContext+0xc0>)
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <vTaskSwitchContext+0xb8>)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dc2:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <vTaskSwitchContext+0xc0>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3354      	adds	r3, #84	; 0x54
 8006dc8:	4a08      	ldr	r2, [pc, #32]	; (8006dec <vTaskSwitchContext+0xc4>)
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	20000d30 	.word	0x20000d30
 8006ddc:	20000d1c 	.word	0x20000d1c
 8006de0:	20000d10 	.word	0x20000d10
 8006de4:	20000838 	.word	0x20000838
 8006de8:	20000834 	.word	0x20000834
 8006dec:	2000001c 	.word	0x2000001c

08006df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e16:	4b07      	ldr	r3, [pc, #28]	; (8006e34 <vTaskPlaceOnEventList+0x44>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3318      	adds	r3, #24
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fe fa3b 	bl	800529a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e24:	2101      	movs	r1, #1
 8006e26:	6838      	ldr	r0, [r7, #0]
 8006e28:	f000 fb8e 	bl	8007548 <prvAddCurrentTaskToDelayedList>
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000834 	.word	0x20000834

08006e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10a      	bne.n	8006e60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	617b      	str	r3, [r7, #20]
}
 8006e5c:	bf00      	nop
 8006e5e:	e7fe      	b.n	8006e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3318      	adds	r3, #24
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7fe f9f2 	bl	8005252 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	68b8      	ldr	r0, [r7, #8]
 8006e7e:	f000 fb63 	bl	8007548 <prvAddCurrentTaskToDelayedList>
	}
 8006e82:	bf00      	nop
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000834 	.word	0x20000834

08006e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60fb      	str	r3, [r7, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	3318      	adds	r3, #24
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe fa23 	bl	800530c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec6:	4b1e      	ldr	r3, [pc, #120]	; (8006f40 <xTaskRemoveFromEventList+0xb0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11d      	bne.n	8006f0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fa1a 	bl	800530c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006edc:	4b19      	ldr	r3, [pc, #100]	; (8006f44 <xTaskRemoveFromEventList+0xb4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d903      	bls.n	8006eec <xTaskRemoveFromEventList+0x5c>
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	4a16      	ldr	r2, [pc, #88]	; (8006f44 <xTaskRemoveFromEventList+0xb4>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <xTaskRemoveFromEventList+0xb8>)
 8006efa:	441a      	add	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe f9a5 	bl	8005252 <vListInsertEnd>
 8006f08:	e005      	b.n	8006f16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	3318      	adds	r3, #24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	480e      	ldr	r0, [pc, #56]	; (8006f4c <xTaskRemoveFromEventList+0xbc>)
 8006f12:	f7fe f99e 	bl	8005252 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <xTaskRemoveFromEventList+0xc0>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d905      	bls.n	8006f30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <xTaskRemoveFromEventList+0xc4>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e001      	b.n	8006f34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f34:	697b      	ldr	r3, [r7, #20]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000d30 	.word	0x20000d30
 8006f44:	20000d10 	.word	0x20000d10
 8006f48:	20000838 	.word	0x20000838
 8006f4c:	20000cc8 	.word	0x20000cc8
 8006f50:	20000834 	.word	0x20000834
 8006f54:	20000d1c 	.word	0x20000d1c

08006f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f60:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <vTaskInternalSetTimeOutState+0x24>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <vTaskInternalSetTimeOutState+0x28>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	605a      	str	r2, [r3, #4]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20000d20 	.word	0x20000d20
 8006f80:	20000d0c 	.word	0x20000d0c

08006f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	613b      	str	r3, [r7, #16]
}
 8006fa6:	bf00      	nop
 8006fa8:	e7fe      	b.n	8006fa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60fb      	str	r3, [r7, #12]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006fc6:	f000 ff8d 	bl	8007ee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fca:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <xTaskCheckForTimeOut+0xbc>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe2:	d102      	bne.n	8006fea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e023      	b.n	8007032 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <xTaskCheckForTimeOut+0xc0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d007      	beq.n	8007006 <xTaskCheckForTimeOut+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d302      	bcc.n	8007006 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007000:	2301      	movs	r3, #1
 8007002:	61fb      	str	r3, [r7, #28]
 8007004:	e015      	b.n	8007032 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	429a      	cmp	r2, r3
 800700e:	d20b      	bcs.n	8007028 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff ff9b 	bl	8006f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
 8007026:	e004      	b.n	8007032 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800702e:	2301      	movs	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007032:	f000 ff87 	bl	8007f44 <vPortExitCritical>

	return xReturn;
 8007036:	69fb      	ldr	r3, [r7, #28]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000d0c 	.word	0x20000d0c
 8007044:	20000d20 	.word	0x20000d20

08007048 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <vTaskMissedYield+0x14>)
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]
}
 8007052:	bf00      	nop
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000d1c 	.word	0x20000d1c

08007060 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007068:	f000 f852 	bl	8007110 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800706c:	4b06      	ldr	r3, [pc, #24]	; (8007088 <prvIdleTask+0x28>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d9f9      	bls.n	8007068 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <prvIdleTask+0x2c>)
 8007076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007084:	e7f0      	b.n	8007068 <prvIdleTask+0x8>
 8007086:	bf00      	nop
 8007088:	20000838 	.word	0x20000838
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	e00c      	b.n	80070b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <prvInitialiseTaskLists+0x60>)
 80070a8:	4413      	add	r3, r2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe f8a4 	bl	80051f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3301      	adds	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b37      	cmp	r3, #55	; 0x37
 80070ba:	d9ef      	bls.n	800709c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070bc:	480d      	ldr	r0, [pc, #52]	; (80070f4 <prvInitialiseTaskLists+0x64>)
 80070be:	f7fe f89b 	bl	80051f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070c2:	480d      	ldr	r0, [pc, #52]	; (80070f8 <prvInitialiseTaskLists+0x68>)
 80070c4:	f7fe f898 	bl	80051f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070c8:	480c      	ldr	r0, [pc, #48]	; (80070fc <prvInitialiseTaskLists+0x6c>)
 80070ca:	f7fe f895 	bl	80051f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070ce:	480c      	ldr	r0, [pc, #48]	; (8007100 <prvInitialiseTaskLists+0x70>)
 80070d0:	f7fe f892 	bl	80051f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070d4:	480b      	ldr	r0, [pc, #44]	; (8007104 <prvInitialiseTaskLists+0x74>)
 80070d6:	f7fe f88f 	bl	80051f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070da:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <prvInitialiseTaskLists+0x78>)
 80070dc:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <prvInitialiseTaskLists+0x64>)
 80070de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070e0:	4b0a      	ldr	r3, [pc, #40]	; (800710c <prvInitialiseTaskLists+0x7c>)
 80070e2:	4a05      	ldr	r2, [pc, #20]	; (80070f8 <prvInitialiseTaskLists+0x68>)
 80070e4:	601a      	str	r2, [r3, #0]
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000838 	.word	0x20000838
 80070f4:	20000c98 	.word	0x20000c98
 80070f8:	20000cac 	.word	0x20000cac
 80070fc:	20000cc8 	.word	0x20000cc8
 8007100:	20000cdc 	.word	0x20000cdc
 8007104:	20000cf4 	.word	0x20000cf4
 8007108:	20000cc0 	.word	0x20000cc0
 800710c:	20000cc4 	.word	0x20000cc4

08007110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007116:	e019      	b.n	800714c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007118:	f000 fee4 	bl	8007ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711c:	4b10      	ldr	r3, [pc, #64]	; (8007160 <prvCheckTasksWaitingTermination+0x50>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3304      	adds	r3, #4
 8007128:	4618      	mov	r0, r3
 800712a:	f7fe f8ef 	bl	800530c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800712e:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <prvCheckTasksWaitingTermination+0x54>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3b01      	subs	r3, #1
 8007134:	4a0b      	ldr	r2, [pc, #44]	; (8007164 <prvCheckTasksWaitingTermination+0x54>)
 8007136:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007138:	4b0b      	ldr	r3, [pc, #44]	; (8007168 <prvCheckTasksWaitingTermination+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3b01      	subs	r3, #1
 800713e:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <prvCheckTasksWaitingTermination+0x58>)
 8007140:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007142:	f000 feff 	bl	8007f44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f810 	bl	800716c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <prvCheckTasksWaitingTermination+0x58>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e1      	bne.n	8007118 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000cdc 	.word	0x20000cdc
 8007164:	20000d08 	.word	0x20000d08
 8007168:	20000cf0 	.word	0x20000cf0

0800716c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3354      	adds	r3, #84	; 0x54
 8007178:	4618      	mov	r0, r3
 800717a:	f00e fecb 	bl	8015f14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	4618      	mov	r0, r3
 800718e:	f001 f897 	bl	80082c0 <vPortFree>
				vPortFree( pxTCB );
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 f894 	bl	80082c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007198:	e018      	b.n	80071cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d103      	bne.n	80071ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f88b 	bl	80082c0 <vPortFree>
	}
 80071aa:	e00f      	b.n	80071cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d00a      	beq.n	80071cc <prvDeleteTCB+0x60>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	60fb      	str	r3, [r7, #12]
}
 80071c8:	bf00      	nop
 80071ca:	e7fe      	b.n	80071ca <prvDeleteTCB+0x5e>
	}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071da:	4b0c      	ldr	r3, [pc, #48]	; (800720c <prvResetNextTaskUnblockTime+0x38>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <prvResetNextTaskUnblockTime+0x3c>)
 80071e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071ec:	e008      	b.n	8007200 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <prvResetNextTaskUnblockTime+0x38>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	4a04      	ldr	r2, [pc, #16]	; (8007210 <prvResetNextTaskUnblockTime+0x3c>)
 80071fe:	6013      	str	r3, [r2, #0]
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000cc0 	.word	0x20000cc0
 8007210:	20000d28 	.word	0x20000d28

08007214 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <xTaskGetCurrentTaskHandle+0x1c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007220:	687b      	ldr	r3, [r7, #4]
	}
 8007222:	4618      	mov	r0, r3
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	20000834 	.word	0x20000834

08007234 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800723a:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <xTaskGetSchedulerState+0x34>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d102      	bne.n	8007248 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007242:	2301      	movs	r3, #1
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	e008      	b.n	800725a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007248:	4b08      	ldr	r3, [pc, #32]	; (800726c <xTaskGetSchedulerState+0x38>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007250:	2302      	movs	r3, #2
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	e001      	b.n	800725a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007256:	2300      	movs	r3, #0
 8007258:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800725a:	687b      	ldr	r3, [r7, #4]
	}
 800725c:	4618      	mov	r0, r3
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	20000d14 	.word	0x20000d14
 800726c:	20000d30 	.word	0x20000d30

08007270 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d051      	beq.n	800732a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <xTaskPriorityInherit+0xc4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	429a      	cmp	r2, r3
 8007292:	d241      	bcs.n	8007318 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	db06      	blt.n	80072aa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729c:	4b25      	ldr	r3, [pc, #148]	; (8007334 <xTaskPriorityInherit+0xc4>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6959      	ldr	r1, [r3, #20]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <xTaskPriorityInherit+0xc8>)
 80072bc:	4413      	add	r3, r2
 80072be:	4299      	cmp	r1, r3
 80072c0:	d122      	bne.n	8007308 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f820 	bl	800530c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <xTaskPriorityInherit+0xc4>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072da:	4b18      	ldr	r3, [pc, #96]	; (800733c <xTaskPriorityInherit+0xcc>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d903      	bls.n	80072ea <xTaskPriorityInherit+0x7a>
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	4a15      	ldr	r2, [pc, #84]	; (800733c <xTaskPriorityInherit+0xcc>)
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4a10      	ldr	r2, [pc, #64]	; (8007338 <xTaskPriorityInherit+0xc8>)
 80072f8:	441a      	add	r2, r3
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4619      	mov	r1, r3
 8007300:	4610      	mov	r0, r2
 8007302:	f7fd ffa6 	bl	8005252 <vListInsertEnd>
 8007306:	e004      	b.n	8007312 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <xTaskPriorityInherit+0xc4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007312:	2301      	movs	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e008      	b.n	800732a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <xTaskPriorityInherit+0xc4>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	429a      	cmp	r2, r3
 8007324:	d201      	bcs.n	800732a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007326:	2301      	movs	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800732a:	68fb      	ldr	r3, [r7, #12]
	}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000834 	.word	0x20000834
 8007338:	20000838 	.word	0x20000838
 800733c:	20000d10 	.word	0x20000d10

08007340 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d056      	beq.n	8007404 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007356:	4b2e      	ldr	r3, [pc, #184]	; (8007410 <xTaskPriorityDisinherit+0xd0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	429a      	cmp	r2, r3
 800735e:	d00a      	beq.n	8007376 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60fb      	str	r3, [r7, #12]
}
 8007372:	bf00      	nop
 8007374:	e7fe      	b.n	8007374 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60bb      	str	r3, [r7, #8]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007398:	1e5a      	subs	r2, r3, #1
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d02c      	beq.n	8007404 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d128      	bne.n	8007404 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fd ffa8 	bl	800530c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <xTaskPriorityDisinherit+0xd4>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d903      	bls.n	80073e4 <xTaskPriorityDisinherit+0xa4>
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	4a0c      	ldr	r2, [pc, #48]	; (8007414 <xTaskPriorityDisinherit+0xd4>)
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e8:	4613      	mov	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4a09      	ldr	r2, [pc, #36]	; (8007418 <xTaskPriorityDisinherit+0xd8>)
 80073f2:	441a      	add	r2, r3
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fd ff29 	bl	8005252 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007400:	2301      	movs	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007404:	697b      	ldr	r3, [r7, #20]
	}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000834 	.word	0x20000834
 8007414:	20000d10 	.word	0x20000d10
 8007418:	20000838 	.word	0x20000838

0800741c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d06a      	beq.n	800750a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10a      	bne.n	8007452 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
}
 800744e:	bf00      	nop
 8007450:	e7fe      	b.n	8007450 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007456:	683a      	ldr	r2, [r7, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d902      	bls.n	8007462 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	61fb      	str	r3, [r7, #28]
 8007460:	e002      	b.n	8007468 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007466:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	69fa      	ldr	r2, [r7, #28]
 800746e:	429a      	cmp	r2, r3
 8007470:	d04b      	beq.n	800750a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	429a      	cmp	r2, r3
 800747a:	d146      	bne.n	800750a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800747c:	4b25      	ldr	r3, [pc, #148]	; (8007514 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	429a      	cmp	r2, r3
 8007484:	d10a      	bne.n	800749c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60bb      	str	r3, [r7, #8]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	db04      	blt.n	80074ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	6959      	ldr	r1, [r3, #20]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4a13      	ldr	r2, [pc, #76]	; (8007518 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80074ca:	4413      	add	r3, r2
 80074cc:	4299      	cmp	r1, r3
 80074ce:	d11c      	bne.n	800750a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fd ff19 	bl	800530c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074de:	4b0f      	ldr	r3, [pc, #60]	; (800751c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d903      	bls.n	80074ee <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	4a0c      	ldr	r2, [pc, #48]	; (800751c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4a07      	ldr	r2, [pc, #28]	; (8007518 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80074fc:	441a      	add	r2, r3
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	3304      	adds	r3, #4
 8007502:	4619      	mov	r1, r3
 8007504:	4610      	mov	r0, r2
 8007506:	f7fd fea4 	bl	8005252 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800750a:	bf00      	nop
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000834 	.word	0x20000834
 8007518:	20000838 	.word	0x20000838
 800751c:	20000d10 	.word	0x20000d10

08007520 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007524:	4b07      	ldr	r3, [pc, #28]	; (8007544 <pvTaskIncrementMutexHeldCount+0x24>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <pvTaskIncrementMutexHeldCount+0x24>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007532:	3201      	adds	r2, #1
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <pvTaskIncrementMutexHeldCount+0x24>)
 8007538:	681b      	ldr	r3, [r3, #0]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	20000834 	.word	0x20000834

08007548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007552:	4b21      	ldr	r3, [pc, #132]	; (80075d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007558:	4b20      	ldr	r3, [pc, #128]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3304      	adds	r3, #4
 800755e:	4618      	mov	r0, r3
 8007560:	f7fd fed4 	bl	800530c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800756a:	d10a      	bne.n	8007582 <prvAddCurrentTaskToDelayedList+0x3a>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007572:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4819      	ldr	r0, [pc, #100]	; (80075e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800757c:	f7fd fe69 	bl	8005252 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007580:	e026      	b.n	80075d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	429a      	cmp	r2, r3
 8007598:	d209      	bcs.n	80075ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800759a:	4b12      	ldr	r3, [pc, #72]	; (80075e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4619      	mov	r1, r3
 80075a6:	4610      	mov	r0, r2
 80075a8:	f7fd fe77 	bl	800529a <vListInsert>
}
 80075ac:	e010      	b.n	80075d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <prvAddCurrentTaskToDelayedList+0x94>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3304      	adds	r3, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f7fd fe6d 	bl	800529a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d202      	bcs.n	80075d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075ca:	4a08      	ldr	r2, [pc, #32]	; (80075ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	6013      	str	r3, [r2, #0]
}
 80075d0:	bf00      	nop
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20000d0c 	.word	0x20000d0c
 80075dc:	20000834 	.word	0x20000834
 80075e0:	20000cf4 	.word	0x20000cf4
 80075e4:	20000cc4 	.word	0x20000cc4
 80075e8:	20000cc0 	.word	0x20000cc0
 80075ec:	20000d28 	.word	0x20000d28

080075f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075fa:	f000 fb07 	bl	8007c0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075fe:	4b1c      	ldr	r3, [pc, #112]	; (8007670 <xTimerCreateTimerTask+0x80>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d021      	beq.n	800764a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800760e:	1d3a      	adds	r2, r7, #4
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	f107 030c 	add.w	r3, r7, #12
 8007618:	4618      	mov	r0, r3
 800761a:	f7fd fdd3 	bl	80051c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	9202      	str	r2, [sp, #8]
 8007626:	9301      	str	r3, [sp, #4]
 8007628:	2302      	movs	r3, #2
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	460a      	mov	r2, r1
 8007630:	4910      	ldr	r1, [pc, #64]	; (8007674 <xTimerCreateTimerTask+0x84>)
 8007632:	4811      	ldr	r0, [pc, #68]	; (8007678 <xTimerCreateTimerTask+0x88>)
 8007634:	f7fe ff94 	bl	8006560 <xTaskCreateStatic>
 8007638:	4603      	mov	r3, r0
 800763a:	4a10      	ldr	r2, [pc, #64]	; (800767c <xTimerCreateTimerTask+0x8c>)
 800763c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800763e:	4b0f      	ldr	r3, [pc, #60]	; (800767c <xTimerCreateTimerTask+0x8c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007646:	2301      	movs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	613b      	str	r3, [r7, #16]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007666:	697b      	ldr	r3, [r7, #20]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000d64 	.word	0x20000d64
 8007674:	0801716c 	.word	0x0801716c
 8007678:	080077b5 	.word	0x080077b5
 800767c:	20000d68 	.word	0x20000d68

08007680 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	; 0x28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800768e:	2300      	movs	r3, #0
 8007690:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xTimerGenericCommand+0x2e>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	623b      	str	r3, [r7, #32]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80076ae:	4b1a      	ldr	r3, [pc, #104]	; (8007718 <xTimerGenericCommand+0x98>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d02a      	beq.n	800770c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b05      	cmp	r3, #5
 80076c6:	dc18      	bgt.n	80076fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076c8:	f7ff fdb4 	bl	8007234 <xTaskGetSchedulerState>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d109      	bne.n	80076e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <xTimerGenericCommand+0x98>)
 80076d4:	6818      	ldr	r0, [r3, #0]
 80076d6:	f107 0110 	add.w	r1, r7, #16
 80076da:	2300      	movs	r3, #0
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	f7fe f89d 	bl	800581c <xQueueGenericSend>
 80076e2:	6278      	str	r0, [r7, #36]	; 0x24
 80076e4:	e012      	b.n	800770c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <xTimerGenericCommand+0x98>)
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f107 0110 	add.w	r1, r7, #16
 80076ee:	2300      	movs	r3, #0
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7fe f893 	bl	800581c <xQueueGenericSend>
 80076f6:	6278      	str	r0, [r7, #36]	; 0x24
 80076f8:	e008      	b.n	800770c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076fa:	4b07      	ldr	r3, [pc, #28]	; (8007718 <xTimerGenericCommand+0x98>)
 80076fc:	6818      	ldr	r0, [r3, #0]
 80076fe:	f107 0110 	add.w	r1, r7, #16
 8007702:	2300      	movs	r3, #0
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	f7fe f987 	bl	8005a18 <xQueueGenericSendFromISR>
 800770a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000d64 	.word	0x20000d64

0800771c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af02      	add	r7, sp, #8
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007726:	4b22      	ldr	r3, [pc, #136]	; (80077b0 <prvProcessExpiredTimer+0x94>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	3304      	adds	r3, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fde9 	bl	800530c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d022      	beq.n	800778e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	699a      	ldr	r2, [r3, #24]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	18d1      	adds	r1, r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	6978      	ldr	r0, [r7, #20]
 8007756:	f000 f8d1 	bl	80078fc <prvInsertTimerInActiveList>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01f      	beq.n	80077a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007760:	2300      	movs	r3, #0
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	2100      	movs	r1, #0
 800776a:	6978      	ldr	r0, [r7, #20]
 800776c:	f7ff ff88 	bl	8007680 <xTimerGenericCommand>
 8007770:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d113      	bne.n	80077a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	60fb      	str	r3, [r7, #12]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007794:	f023 0301 	bic.w	r3, r3, #1
 8007798:	b2da      	uxtb	r2, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	6978      	ldr	r0, [r7, #20]
 80077a6:	4798      	blx	r3
}
 80077a8:	bf00      	nop
 80077aa:	3718      	adds	r7, #24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000d5c 	.word	0x20000d5c

080077b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077bc:	f107 0308 	add.w	r3, r7, #8
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f857 	bl	8007874 <prvGetNextExpireTime>
 80077c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	4619      	mov	r1, r3
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f803 	bl	80077d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077d2:	f000 f8d5 	bl	8007980 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077d6:	e7f1      	b.n	80077bc <prvTimerTask+0x8>

080077d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077e2:	f7ff f919 	bl	8006a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077e6:	f107 0308 	add.w	r3, r7, #8
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f866 	bl	80078bc <prvSampleTimeNow>
 80077f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d130      	bne.n	800785a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <prvProcessTimerOrBlockTask+0x3c>
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	429a      	cmp	r2, r3
 8007804:	d806      	bhi.n	8007814 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007806:	f7ff f915 	bl	8006a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800780a:	68f9      	ldr	r1, [r7, #12]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff85 	bl	800771c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007812:	e024      	b.n	800785e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d008      	beq.n	800782c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800781a:	4b13      	ldr	r3, [pc, #76]	; (8007868 <prvProcessTimerOrBlockTask+0x90>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <prvProcessTimerOrBlockTask+0x50>
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <prvProcessTimerOrBlockTask+0x52>
 8007828:	2300      	movs	r3, #0
 800782a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800782c:	4b0f      	ldr	r3, [pc, #60]	; (800786c <prvProcessTimerOrBlockTask+0x94>)
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	4619      	mov	r1, r3
 800783a:	f7fe fe5d 	bl	80064f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800783e:	f7ff f8f9 	bl	8006a34 <xTaskResumeAll>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007848:	4b09      	ldr	r3, [pc, #36]	; (8007870 <prvProcessTimerOrBlockTask+0x98>)
 800784a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	f3bf 8f6f 	isb	sy
}
 8007858:	e001      	b.n	800785e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800785a:	f7ff f8eb 	bl	8006a34 <xTaskResumeAll>
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20000d60 	.word	0x20000d60
 800786c:	20000d64 	.word	0x20000d64
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800787c:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <prvGetNextExpireTime+0x44>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <prvGetNextExpireTime+0x16>
 8007886:	2201      	movs	r2, #1
 8007888:	e000      	b.n	800788c <prvGetNextExpireTime+0x18>
 800788a:	2200      	movs	r2, #0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d105      	bne.n	80078a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007898:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <prvGetNextExpireTime+0x44>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e001      	b.n	80078a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078a8:	68fb      	ldr	r3, [r7, #12]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000d5c 	.word	0x20000d5c

080078bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078c4:	f7ff f954 	bl	8006b70 <xTaskGetTickCount>
 80078c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078ca:	4b0b      	ldr	r3, [pc, #44]	; (80078f8 <prvSampleTimeNow+0x3c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d205      	bcs.n	80078e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078d4:	f000 f936 	bl	8007b44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e002      	b.n	80078e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078e6:	4a04      	ldr	r2, [pc, #16]	; (80078f8 <prvSampleTimeNow+0x3c>)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	20000d6c 	.word	0x20000d6c

080078fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800790a:	2300      	movs	r3, #0
 800790c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	429a      	cmp	r2, r3
 8007920:	d812      	bhi.n	8007948 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	1ad2      	subs	r2, r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	429a      	cmp	r2, r3
 800792e:	d302      	bcc.n	8007936 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e01b      	b.n	800796e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007936:	4b10      	ldr	r3, [pc, #64]	; (8007978 <prvInsertTimerInActiveList+0x7c>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3304      	adds	r3, #4
 800793e:	4619      	mov	r1, r3
 8007940:	4610      	mov	r0, r2
 8007942:	f7fd fcaa 	bl	800529a <vListInsert>
 8007946:	e012      	b.n	800796e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d206      	bcs.n	800795e <prvInsertTimerInActiveList+0x62>
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e007      	b.n	800796e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800795e:	4b07      	ldr	r3, [pc, #28]	; (800797c <prvInsertTimerInActiveList+0x80>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7fd fc96 	bl	800529a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800796e:	697b      	ldr	r3, [r7, #20]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000d60 	.word	0x20000d60
 800797c:	20000d5c 	.word	0x20000d5c

08007980 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08e      	sub	sp, #56	; 0x38
 8007984:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007986:	e0ca      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da18      	bge.n	80079c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800798e:	1d3b      	adds	r3, r7, #4
 8007990:	3304      	adds	r3, #4
 8007992:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	61fb      	str	r3, [r7, #28]
}
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b6:	6850      	ldr	r0, [r2, #4]
 80079b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ba:	6892      	ldr	r2, [r2, #8]
 80079bc:	4611      	mov	r1, r2
 80079be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f2c0 80aa 	blt.w	8007b1c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd fc97 	bl	800530c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079de:	463b      	mov	r3, r7
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff ff6b 	bl	80078bc <prvSampleTimeNow>
 80079e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b09      	cmp	r3, #9
 80079ec:	f200 8097 	bhi.w	8007b1e <prvProcessReceivedCommands+0x19e>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <prvProcessReceivedCommands+0x78>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a21 	.word	0x08007a21
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a21 	.word	0x08007a21
 8007a04:	08007a95 	.word	0x08007a95
 8007a08:	08007aa9 	.word	0x08007aa9
 8007a0c:	08007af3 	.word	0x08007af3
 8007a10:	08007a21 	.word	0x08007a21
 8007a14:	08007a21 	.word	0x08007a21
 8007a18:	08007a95 	.word	0x08007a95
 8007a1c:	08007aa9 	.word	0x08007aa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a32:	68ba      	ldr	r2, [r7, #8]
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	18d1      	adds	r1, r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a40:	f7ff ff5c 	bl	80078fc <prvInsertTimerInActiveList>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d069      	beq.n	8007b1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d05e      	beq.n	8007b1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	441a      	add	r2, r3
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2100      	movs	r1, #0
 8007a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a72:	f7ff fe05 	bl	8007680 <xTimerGenericCommand>
 8007a76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d14f      	bne.n	8007b1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	61bb      	str	r3, [r7, #24]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a9a:	f023 0301 	bic.w	r3, r3, #1
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007aa6:	e03a      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10a      	bne.n	8007ade <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	617b      	str	r3, [r7, #20]
}
 8007ada:	bf00      	nop
 8007adc:	e7fe      	b.n	8007adc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	18d1      	adds	r1, r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aec:	f7ff ff06 	bl	80078fc <prvInsertTimerInActiveList>
					break;
 8007af0:	e015      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b02:	f000 fbdd 	bl	80082c0 <vPortFree>
 8007b06:	e00a      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b0e:	f023 0301 	bic.w	r3, r3, #1
 8007b12:	b2da      	uxtb	r2, r3
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b1a:	e000      	b.n	8007b1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b1e:	4b08      	ldr	r3, [pc, #32]	; (8007b40 <prvProcessReceivedCommands+0x1c0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	1d39      	adds	r1, r7, #4
 8007b24:	2200      	movs	r2, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe f89e 	bl	8005c68 <xQueueReceive>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f47f af2a 	bne.w	8007988 <prvProcessReceivedCommands+0x8>
	}
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop
 8007b38:	3730      	adds	r7, #48	; 0x30
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000d64 	.word	0x20000d64

08007b44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b4a:	e048      	b.n	8007bde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b4c:	4b2d      	ldr	r3, [pc, #180]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b56:	4b2b      	ldr	r3, [pc, #172]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fd fbd1 	bl	800530c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d02e      	beq.n	8007bde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d90e      	bls.n	8007bb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b9e:	4b19      	ldr	r3, [pc, #100]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7fd fb76 	bl	800529a <vListInsert>
 8007bae:	e016      	b.n	8007bde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	2100      	movs	r1, #0
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff fd60 	bl	8007680 <xTimerGenericCommand>
 8007bc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	603b      	str	r3, [r7, #0]
}
 8007bda:	bf00      	nop
 8007bdc:	e7fe      	b.n	8007bdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1b1      	bne.n	8007b4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bee:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <prvSwitchTimerLists+0xc4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <prvSwitchTimerLists+0xc0>)
 8007bf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bf6:	4a04      	ldr	r2, [pc, #16]	; (8007c08 <prvSwitchTimerLists+0xc4>)
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	6013      	str	r3, [r2, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000d5c 	.word	0x20000d5c
 8007c08:	20000d60 	.word	0x20000d60

08007c0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c12:	f000 f967 	bl	8007ee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c16:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d120      	bne.n	8007c60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c1e:	4814      	ldr	r0, [pc, #80]	; (8007c70 <prvCheckForValidListAndQueue+0x64>)
 8007c20:	f7fd faea 	bl	80051f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c24:	4813      	ldr	r0, [pc, #76]	; (8007c74 <prvCheckForValidListAndQueue+0x68>)
 8007c26:	f7fd fae7 	bl	80051f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c2a:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <prvCheckForValidListAndQueue+0x6c>)
 8007c2c:	4a10      	ldr	r2, [pc, #64]	; (8007c70 <prvCheckForValidListAndQueue+0x64>)
 8007c2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c30:	4b12      	ldr	r3, [pc, #72]	; (8007c7c <prvCheckForValidListAndQueue+0x70>)
 8007c32:	4a10      	ldr	r2, [pc, #64]	; (8007c74 <prvCheckForValidListAndQueue+0x68>)
 8007c34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c36:	2300      	movs	r3, #0
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <prvCheckForValidListAndQueue+0x74>)
 8007c3c:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <prvCheckForValidListAndQueue+0x78>)
 8007c3e:	2110      	movs	r1, #16
 8007c40:	200a      	movs	r0, #10
 8007c42:	f7fd fbf5 	bl	8005430 <xQueueGenericCreateStatic>
 8007c46:	4603      	mov	r3, r0
 8007c48:	4a08      	ldr	r2, [pc, #32]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c4c:	4b07      	ldr	r3, [pc, #28]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d005      	beq.n	8007c60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <prvCheckForValidListAndQueue+0x60>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	490b      	ldr	r1, [pc, #44]	; (8007c88 <prvCheckForValidListAndQueue+0x7c>)
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fbf8 	bl	8006450 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c60:	f000 f970 	bl	8007f44 <vPortExitCritical>
}
 8007c64:	bf00      	nop
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000d64 	.word	0x20000d64
 8007c70:	20000d34 	.word	0x20000d34
 8007c74:	20000d48 	.word	0x20000d48
 8007c78:	20000d5c 	.word	0x20000d5c
 8007c7c:	20000d60 	.word	0x20000d60
 8007c80:	20000e10 	.word	0x20000e10
 8007c84:	20000d70 	.word	0x20000d70
 8007c88:	08017174 	.word	0x08017174

08007c8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3b04      	subs	r3, #4
 8007c9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3b04      	subs	r3, #4
 8007caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f023 0201 	bic.w	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cbc:	4a0c      	ldr	r2, [pc, #48]	; (8007cf0 <pxPortInitialiseStack+0x64>)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3b14      	subs	r3, #20
 8007cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f06f 0202 	mvn.w	r2, #2
 8007cda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b20      	subs	r3, #32
 8007ce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	08007cf5 	.word	0x08007cf5

08007cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <prvTaskExitError+0x54>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d06:	d00a      	beq.n	8007d1e <prvTaskExitError+0x2a>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	60fb      	str	r3, [r7, #12]
}
 8007d1a:	bf00      	nop
 8007d1c:	e7fe      	b.n	8007d1c <prvTaskExitError+0x28>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	60bb      	str	r3, [r7, #8]
}
 8007d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d32:	bf00      	nop
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0fc      	beq.n	8007d34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	2000000c 	.word	0x2000000c
 8007d4c:	00000000 	.word	0x00000000

08007d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d50:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <pxCurrentTCBConst2>)
 8007d52:	6819      	ldr	r1, [r3, #0]
 8007d54:	6808      	ldr	r0, [r1, #0]
 8007d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	f380 8809 	msr	PSP, r0
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8811 	msr	BASEPRI, r0
 8007d6a:	4770      	bx	lr
 8007d6c:	f3af 8000 	nop.w

08007d70 <pxCurrentTCBConst2>:
 8007d70:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d74:	bf00      	nop
 8007d76:	bf00      	nop

08007d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d78:	4808      	ldr	r0, [pc, #32]	; (8007d9c <prvPortStartFirstTask+0x24>)
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	6800      	ldr	r0, [r0, #0]
 8007d7e:	f380 8808 	msr	MSP, r0
 8007d82:	f04f 0000 	mov.w	r0, #0
 8007d86:	f380 8814 	msr	CONTROL, r0
 8007d8a:	b662      	cpsie	i
 8007d8c:	b661      	cpsie	f
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	df00      	svc	0
 8007d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d9a:	bf00      	nop
 8007d9c:	e000ed08 	.word	0xe000ed08

08007da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007da6:	4b46      	ldr	r3, [pc, #280]	; (8007ec0 <xPortStartScheduler+0x120>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a46      	ldr	r2, [pc, #280]	; (8007ec4 <xPortStartScheduler+0x124>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d10a      	bne.n	8007dc6 <xPortStartScheduler+0x26>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007dc6:	4b3e      	ldr	r3, [pc, #248]	; (8007ec0 <xPortStartScheduler+0x120>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a3f      	ldr	r2, [pc, #252]	; (8007ec8 <xPortStartScheduler+0x128>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10a      	bne.n	8007de6 <xPortStartScheduler+0x46>
	__asm volatile
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	60fb      	str	r3, [r7, #12]
}
 8007de2:	bf00      	nop
 8007de4:	e7fe      	b.n	8007de4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007de6:	4b39      	ldr	r3, [pc, #228]	; (8007ecc <xPortStartScheduler+0x12c>)
 8007de8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	22ff      	movs	r2, #255	; 0xff
 8007df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	4b31      	ldr	r3, [pc, #196]	; (8007ed0 <xPortStartScheduler+0x130>)
 8007e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e0e:	4b31      	ldr	r3, [pc, #196]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e10:	2207      	movs	r2, #7
 8007e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e14:	e009      	b.n	8007e2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007e16:	4b2f      	ldr	r3, [pc, #188]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	4a2d      	ldr	r2, [pc, #180]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e20:	78fb      	ldrb	r3, [r7, #3]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	005b      	lsls	r3, r3, #1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b80      	cmp	r3, #128	; 0x80
 8007e34:	d0ef      	beq.n	8007e16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e36:	4b27      	ldr	r3, [pc, #156]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f1c3 0307 	rsb	r3, r3, #7
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d00a      	beq.n	8007e58 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60bb      	str	r3, [r7, #8]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e58:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e6a:	4a1a      	ldr	r2, [pc, #104]	; (8007ed4 <xPortStartScheduler+0x134>)
 8007e6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e76:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e82:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <xPortStartScheduler+0x138>)
 8007e88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e8e:	f000 f8dd 	bl	800804c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e92:	4b12      	ldr	r3, [pc, #72]	; (8007edc <xPortStartScheduler+0x13c>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e98:	f000 f8fc 	bl	8008094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e9c:	4b10      	ldr	r3, [pc, #64]	; (8007ee0 <xPortStartScheduler+0x140>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0f      	ldr	r2, [pc, #60]	; (8007ee0 <xPortStartScheduler+0x140>)
 8007ea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ea8:	f7ff ff66 	bl	8007d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eac:	f7fe ff3c 	bl	8006d28 <vTaskSwitchContext>
	prvTaskExitError();
 8007eb0:	f7ff ff20 	bl	8007cf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	e000ed00 	.word	0xe000ed00
 8007ec4:	410fc271 	.word	0x410fc271
 8007ec8:	410fc270 	.word	0x410fc270
 8007ecc:	e000e400 	.word	0xe000e400
 8007ed0:	20000e60 	.word	0x20000e60
 8007ed4:	20000e64 	.word	0x20000e64
 8007ed8:	e000ed20 	.word	0xe000ed20
 8007edc:	2000000c 	.word	0x2000000c
 8007ee0:	e000ef34 	.word	0xe000ef34

08007ee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	607b      	str	r3, [r7, #4]
}
 8007efc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007efe:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <vPortEnterCritical+0x58>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3301      	adds	r3, #1
 8007f04:	4a0d      	ldr	r2, [pc, #52]	; (8007f3c <vPortEnterCritical+0x58>)
 8007f06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f08:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <vPortEnterCritical+0x58>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d10f      	bne.n	8007f30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <vPortEnterCritical+0x5c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	603b      	str	r3, [r7, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <vPortEnterCritical+0x4a>
	}
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	2000000c 	.word	0x2000000c
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <vPortExitCritical+0x50>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10a      	bne.n	8007f68 <vPortExitCritical+0x24>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	607b      	str	r3, [r7, #4]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <vPortExitCritical+0x50>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	4a09      	ldr	r2, [pc, #36]	; (8007f94 <vPortExitCritical+0x50>)
 8007f70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f72:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <vPortExitCritical+0x50>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <vPortExitCritical+0x42>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	f383 8811 	msr	BASEPRI, r3
}
 8007f84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	2000000c 	.word	0x2000000c
	...

08007fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fa0:	f3ef 8009 	mrs	r0, PSP
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	4b15      	ldr	r3, [pc, #84]	; (8008000 <pxCurrentTCBConst>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	f01e 0f10 	tst.w	lr, #16
 8007fb0:	bf08      	it	eq
 8007fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fba:	6010      	str	r0, [r2, #0]
 8007fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fc4:	f380 8811 	msr	BASEPRI, r0
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f7fe feaa 	bl	8006d28 <vTaskSwitchContext>
 8007fd4:	f04f 0000 	mov.w	r0, #0
 8007fd8:	f380 8811 	msr	BASEPRI, r0
 8007fdc:	bc09      	pop	{r0, r3}
 8007fde:	6819      	ldr	r1, [r3, #0]
 8007fe0:	6808      	ldr	r0, [r1, #0]
 8007fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe6:	f01e 0f10 	tst.w	lr, #16
 8007fea:	bf08      	it	eq
 8007fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ff0:	f380 8809 	msr	PSP, r0
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w

08008000 <pxCurrentTCBConst>:
 8008000:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop

08008008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	607b      	str	r3, [r7, #4]
}
 8008020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008022:	f7fe fdc7 	bl	8006bb4 <xTaskIncrementTick>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800802c:	4b06      	ldr	r3, [pc, #24]	; (8008048 <xPortSysTickHandler+0x40>)
 800802e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	f383 8811 	msr	BASEPRI, r3
}
 800803e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <vPortSetupTimerInterrupt+0x38>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <vPortSetupTimerInterrupt+0x3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0a      	ldr	r2, [pc, #40]	; (800808c <vPortSetupTimerInterrupt+0x40>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <vPortSetupTimerInterrupt+0x44>)
 800806a:	3b01      	subs	r3, #1
 800806c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800806e:	4b04      	ldr	r3, [pc, #16]	; (8008080 <vPortSetupTimerInterrupt+0x34>)
 8008070:	2207      	movs	r2, #7
 8008072:	601a      	str	r2, [r3, #0]
}
 8008074:	bf00      	nop
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	e000e010 	.word	0xe000e010
 8008084:	e000e018 	.word	0xe000e018
 8008088:	20000000 	.word	0x20000000
 800808c:	10624dd3 	.word	0x10624dd3
 8008090:	e000e014 	.word	0xe000e014

08008094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80080a4 <vPortEnableVFP+0x10>
 8008098:	6801      	ldr	r1, [r0, #0]
 800809a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800809e:	6001      	str	r1, [r0, #0]
 80080a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080a2:	bf00      	nop
 80080a4:	e000ed88 	.word	0xe000ed88

080080a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ae:	f3ef 8305 	mrs	r3, IPSR
 80080b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b0f      	cmp	r3, #15
 80080b8:	d914      	bls.n	80080e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080ba:	4a17      	ldr	r2, [pc, #92]	; (8008118 <vPortValidateInterruptPriority+0x70>)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	4413      	add	r3, r2
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <vPortValidateInterruptPriority+0x74>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	7afa      	ldrb	r2, [r7, #11]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d20a      	bcs.n	80080e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	607b      	str	r3, [r7, #4]
}
 80080e0:	bf00      	nop
 80080e2:	e7fe      	b.n	80080e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080e4:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <vPortValidateInterruptPriority+0x78>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <vPortValidateInterruptPriority+0x7c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d90a      	bls.n	800810a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	603b      	str	r3, [r7, #0]
}
 8008106:	bf00      	nop
 8008108:	e7fe      	b.n	8008108 <vPortValidateInterruptPriority+0x60>
	}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	e000e3f0 	.word	0xe000e3f0
 800811c:	20000e60 	.word	0x20000e60
 8008120:	e000ed0c 	.word	0xe000ed0c
 8008124:	20000e64 	.word	0x20000e64

08008128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	; 0x28
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008134:	f7fe fc70 	bl	8006a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008138:	4b5b      	ldr	r3, [pc, #364]	; (80082a8 <pvPortMalloc+0x180>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008140:	f000 f920 	bl	8008384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008144:	4b59      	ldr	r3, [pc, #356]	; (80082ac <pvPortMalloc+0x184>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4013      	ands	r3, r2
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 8093 	bne.w	8008278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d01d      	beq.n	8008194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008158:	2208      	movs	r2, #8
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4413      	add	r3, r2
 800815e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	2b00      	cmp	r3, #0
 8008168:	d014      	beq.n	8008194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f023 0307 	bic.w	r3, r3, #7
 8008170:	3308      	adds	r3, #8
 8008172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <pvPortMalloc+0x6c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	617b      	str	r3, [r7, #20]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d06e      	beq.n	8008278 <pvPortMalloc+0x150>
 800819a:	4b45      	ldr	r3, [pc, #276]	; (80082b0 <pvPortMalloc+0x188>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d869      	bhi.n	8008278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081a4:	4b43      	ldr	r3, [pc, #268]	; (80082b4 <pvPortMalloc+0x18c>)
 80081a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081a8:	4b42      	ldr	r3, [pc, #264]	; (80082b4 <pvPortMalloc+0x18c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ae:	e004      	b.n	80081ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d903      	bls.n	80081cc <pvPortMalloc+0xa4>
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1f1      	bne.n	80081b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081cc:	4b36      	ldr	r3, [pc, #216]	; (80082a8 <pvPortMalloc+0x180>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d050      	beq.n	8008278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2208      	movs	r2, #8
 80081dc:	4413      	add	r3, r2
 80081de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	685a      	ldr	r2, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	2308      	movs	r3, #8
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d91f      	bls.n	8008238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4413      	add	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <pvPortMalloc+0xf8>
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	613b      	str	r3, [r7, #16]
}
 800821c:	bf00      	nop
 800821e:	e7fe      	b.n	800821e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008232:	69b8      	ldr	r0, [r7, #24]
 8008234:	f000 f908 	bl	8008448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008238:	4b1d      	ldr	r3, [pc, #116]	; (80082b0 <pvPortMalloc+0x188>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	4a1b      	ldr	r2, [pc, #108]	; (80082b0 <pvPortMalloc+0x188>)
 8008244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008246:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <pvPortMalloc+0x188>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b1b      	ldr	r3, [pc, #108]	; (80082b8 <pvPortMalloc+0x190>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d203      	bcs.n	800825a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008252:	4b17      	ldr	r3, [pc, #92]	; (80082b0 <pvPortMalloc+0x188>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <pvPortMalloc+0x190>)
 8008258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	4b13      	ldr	r3, [pc, #76]	; (80082ac <pvPortMalloc+0x184>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	431a      	orrs	r2, r3
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <pvPortMalloc+0x194>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	4a11      	ldr	r2, [pc, #68]	; (80082bc <pvPortMalloc+0x194>)
 8008276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008278:	f7fe fbdc 	bl	8006a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00a      	beq.n	800829c <pvPortMalloc+0x174>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60fb      	str	r3, [r7, #12]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <pvPortMalloc+0x172>
	return pvReturn;
 800829c:	69fb      	ldr	r3, [r7, #28]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3728      	adds	r7, #40	; 0x28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20004a70 	.word	0x20004a70
 80082ac:	20004a84 	.word	0x20004a84
 80082b0:	20004a74 	.word	0x20004a74
 80082b4:	20004a68 	.word	0x20004a68
 80082b8:	20004a78 	.word	0x20004a78
 80082bc:	20004a7c 	.word	0x20004a7c

080082c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d04d      	beq.n	800836e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082d2:	2308      	movs	r3, #8
 80082d4:	425b      	negs	r3, r3
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4413      	add	r3, r2
 80082da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	685a      	ldr	r2, [r3, #4]
 80082e4:	4b24      	ldr	r3, [pc, #144]	; (8008378 <vPortFree+0xb8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4013      	ands	r3, r2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <vPortFree+0x44>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60fb      	str	r3, [r7, #12]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <vPortFree+0x62>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60bb      	str	r3, [r7, #8]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	4b14      	ldr	r3, [pc, #80]	; (8008378 <vPortFree+0xb8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4013      	ands	r3, r2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01e      	beq.n	800836e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d11a      	bne.n	800836e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	685a      	ldr	r2, [r3, #4]
 800833c:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <vPortFree+0xb8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	43db      	mvns	r3, r3
 8008342:	401a      	ands	r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008348:	f7fe fb66 	bl	8006a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	4b0a      	ldr	r3, [pc, #40]	; (800837c <vPortFree+0xbc>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4413      	add	r3, r2
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <vPortFree+0xbc>)
 8008358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800835a:	6938      	ldr	r0, [r7, #16]
 800835c:	f000 f874 	bl	8008448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008360:	4b07      	ldr	r3, [pc, #28]	; (8008380 <vPortFree+0xc0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3301      	adds	r3, #1
 8008366:	4a06      	ldr	r2, [pc, #24]	; (8008380 <vPortFree+0xc0>)
 8008368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800836a:	f7fe fb63 	bl	8006a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800836e:	bf00      	nop
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20004a84 	.word	0x20004a84
 800837c:	20004a74 	.word	0x20004a74
 8008380:	20004a80 	.word	0x20004a80

08008384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800838a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800838e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008390:	4b27      	ldr	r3, [pc, #156]	; (8008430 <prvHeapInit+0xac>)
 8008392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00c      	beq.n	80083b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3307      	adds	r3, #7
 80083a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0307 	bic.w	r3, r3, #7
 80083aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	4a1f      	ldr	r2, [pc, #124]	; (8008430 <prvHeapInit+0xac>)
 80083b4:	4413      	add	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083bc:	4a1d      	ldr	r2, [pc, #116]	; (8008434 <prvHeapInit+0xb0>)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083c2:	4b1c      	ldr	r3, [pc, #112]	; (8008434 <prvHeapInit+0xb0>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	4413      	add	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083d0:	2208      	movs	r2, #8
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4a15      	ldr	r2, [pc, #84]	; (8008438 <prvHeapInit+0xb4>)
 80083e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083e6:	4b14      	ldr	r3, [pc, #80]	; (8008438 <prvHeapInit+0xb4>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <prvHeapInit+0xb4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <prvHeapInit+0xb4>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <prvHeapInit+0xb8>)
 8008412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	4a09      	ldr	r2, [pc, #36]	; (8008440 <prvHeapInit+0xbc>)
 800841a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800841c:	4b09      	ldr	r3, [pc, #36]	; (8008444 <prvHeapInit+0xc0>)
 800841e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	bf00      	nop
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	20000e68 	.word	0x20000e68
 8008434:	20004a68 	.word	0x20004a68
 8008438:	20004a70 	.word	0x20004a70
 800843c:	20004a78 	.word	0x20004a78
 8008440:	20004a74 	.word	0x20004a74
 8008444:	20004a84 	.word	0x20004a84

08008448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008450:	4b28      	ldr	r3, [pc, #160]	; (80084f4 <prvInsertBlockIntoFreeList+0xac>)
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e002      	b.n	800845c <prvInsertBlockIntoFreeList+0x14>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d8f7      	bhi.n	8008456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	4413      	add	r3, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d108      	bne.n	800848a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	441a      	add	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	441a      	add	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d118      	bne.n	80084d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	4b15      	ldr	r3, [pc, #84]	; (80084f8 <prvInsertBlockIntoFreeList+0xb0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d00d      	beq.n	80084c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	441a      	add	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	e008      	b.n	80084d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084c6:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <prvInsertBlockIntoFreeList+0xb0>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	e003      	b.n	80084d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d002      	beq.n	80084e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084e6:	bf00      	nop
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20004a68 	.word	0x20004a68
 80084f8:	20004a70 	.word	0x20004a70

080084fc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	330c      	adds	r3, #12
 800850c:	461a      	mov	r2, r3
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f002 fa55 	bl	800a9c0 <tcpip_send_msg_wait_sem>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800851a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d103      	bne.n	800852a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008528:	e001      	b.n	800852e <netconn_apimsg+0x32>
  }
  return err;
 800852a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	; 0x30
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	603a      	str	r2, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
 8008544:	460b      	mov	r3, r1
 8008546:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f001 f923 	bl	8009798 <netconn_alloc>
 8008552:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d054      	beq.n	8008604 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800855a:	79bb      	ldrb	r3, [r7, #6]
 800855c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008562:	f107 0308 	add.w	r3, r7, #8
 8008566:	4619      	mov	r1, r3
 8008568:	4829      	ldr	r0, [pc, #164]	; (8008610 <netconn_new_with_proto_and_callback+0xd8>)
 800856a:	f7ff ffc7 	bl	80084fc <netconn_apimsg>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008574:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008578:	2b00      	cmp	r3, #0
 800857a:	d043      	beq.n	8008604 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <netconn_new_with_proto_and_callback+0x58>
 8008584:	4b23      	ldr	r3, [pc, #140]	; (8008614 <netconn_new_with_proto_and_callback+0xdc>)
 8008586:	22a3      	movs	r2, #163	; 0xa3
 8008588:	4923      	ldr	r1, [pc, #140]	; (8008618 <netconn_new_with_proto_and_callback+0xe0>)
 800858a:	4824      	ldr	r0, [pc, #144]	; (800861c <netconn_new_with_proto_and_callback+0xe4>)
 800858c:	f00d fbe6 	bl	8015d5c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	3310      	adds	r3, #16
 8008594:	4618      	mov	r0, r3
 8008596:	f00d f903 	bl	80157a0 <sys_mbox_valid>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d105      	bne.n	80085ac <netconn_new_with_proto_and_callback+0x74>
 80085a0:	4b1c      	ldr	r3, [pc, #112]	; (8008614 <netconn_new_with_proto_and_callback+0xdc>)
 80085a2:	22a4      	movs	r2, #164	; 0xa4
 80085a4:	491e      	ldr	r1, [pc, #120]	; (8008620 <netconn_new_with_proto_and_callback+0xe8>)
 80085a6:	481d      	ldr	r0, [pc, #116]	; (800861c <netconn_new_with_proto_and_callback+0xe4>)
 80085a8:	f00d fbd8 	bl	8015d5c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80085ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ae:	3314      	adds	r3, #20
 80085b0:	4618      	mov	r0, r3
 80085b2:	f00d f8f5 	bl	80157a0 <sys_mbox_valid>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d005      	beq.n	80085c8 <netconn_new_with_proto_and_callback+0x90>
 80085bc:	4b15      	ldr	r3, [pc, #84]	; (8008614 <netconn_new_with_proto_and_callback+0xdc>)
 80085be:	22a6      	movs	r2, #166	; 0xa6
 80085c0:	4918      	ldr	r1, [pc, #96]	; (8008624 <netconn_new_with_proto_and_callback+0xec>)
 80085c2:	4816      	ldr	r0, [pc, #88]	; (800861c <netconn_new_with_proto_and_callback+0xe4>)
 80085c4:	f00d fbca 	bl	8015d5c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80085c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ca:	330c      	adds	r3, #12
 80085cc:	4618      	mov	r0, r3
 80085ce:	f00d f975 	bl	80158bc <sys_sem_valid>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d105      	bne.n	80085e4 <netconn_new_with_proto_and_callback+0xac>
 80085d8:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <netconn_new_with_proto_and_callback+0xdc>)
 80085da:	22a9      	movs	r2, #169	; 0xa9
 80085dc:	4912      	ldr	r1, [pc, #72]	; (8008628 <netconn_new_with_proto_and_callback+0xf0>)
 80085de:	480f      	ldr	r0, [pc, #60]	; (800861c <netconn_new_with_proto_and_callback+0xe4>)
 80085e0:	f00d fbbc 	bl	8015d5c <iprintf>
      sys_sem_free(&conn->op_completed);
 80085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e6:	330c      	adds	r3, #12
 80085e8:	4618      	mov	r0, r3
 80085ea:	f00d f95a 	bl	80158a2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	3310      	adds	r3, #16
 80085f2:	4618      	mov	r0, r3
 80085f4:	f00d f860 	bl	80156b8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80085f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085fa:	2007      	movs	r0, #7
 80085fc:	f002 ff48 	bl	800b490 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008600:	2300      	movs	r3, #0
 8008602:	e000      	b.n	8008606 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008606:	4618      	mov	r0, r3
 8008608:	3730      	adds	r7, #48	; 0x30
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	0800976d 	.word	0x0800976d
 8008614:	0801717c 	.word	0x0801717c
 8008618:	080171b0 	.word	0x080171b0
 800861c:	080171d4 	.word	0x080171d4
 8008620:	080171fc 	.word	0x080171fc
 8008624:	08017214 	.word	0x08017214
 8008628:	08017238 	.word	0x08017238

0800862c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08c      	sub	sp, #48	; 0x30
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e014      	b.n	8008668 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008642:	2329      	movs	r3, #41	; 0x29
 8008644:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008646:	f107 030c 	add.w	r3, r7, #12
 800864a:	4619      	mov	r1, r3
 800864c:	4808      	ldr	r0, [pc, #32]	; (8008670 <netconn_prepare_delete+0x44>)
 800864e:	f7ff ff55 	bl	80084fc <netconn_apimsg>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008658:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <netconn_prepare_delete+0x3a>
    return err;
 8008660:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008664:	e000      	b.n	8008668 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3730      	adds	r7, #48	; 0x30
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	08009cd1 	.word	0x08009cd1

08008674 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <netconn_delete+0x12>
    return ERR_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	e00d      	b.n	80086a2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7ff ffd0 	bl	800862c <netconn_prepare_delete>
 800868c:	4603      	mov	r3, r0
 800868e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <netconn_delete+0x2a>
    netconn_free(conn);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 f8eb 	bl	8009874 <netconn_free>
  }
  return err;
 800869e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08e      	sub	sp, #56	; 0x38
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <netconn_bind+0x28>
 80086c0:	4b11      	ldr	r3, [pc, #68]	; (8008708 <netconn_bind+0x5c>)
 80086c2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80086c6:	4911      	ldr	r1, [pc, #68]	; (800870c <netconn_bind+0x60>)
 80086c8:	4811      	ldr	r0, [pc, #68]	; (8008710 <netconn_bind+0x64>)
 80086ca:	f00d fb47 	bl	8015d5c <iprintf>
 80086ce:	f06f 030f 	mvn.w	r3, #15
 80086d2:	e015      	b.n	8008700 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <netconn_bind+0x68>)
 80086dc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80086ea:	f107 0314 	add.w	r3, r7, #20
 80086ee:	4619      	mov	r1, r3
 80086f0:	4809      	ldr	r0, [pc, #36]	; (8008718 <netconn_bind+0x6c>)
 80086f2:	f7ff ff03 	bl	80084fc <netconn_apimsg>
 80086f6:	4603      	mov	r3, r0
 80086f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80086fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008700:	4618      	mov	r0, r3
 8008702:	3738      	adds	r7, #56	; 0x38
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	0801717c 	.word	0x0801717c
 800870c:	080172b4 	.word	0x080172b4
 8008710:	080171d4 	.word	0x080171d4
 8008714:	0801a7c0 	.word	0x0801a7c0
 8008718:	08009e99 	.word	0x08009e99

0800871c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b08c      	sub	sp, #48	; 0x30
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d109      	bne.n	8008742 <netconn_listen_with_backlog+0x26>
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <netconn_listen_with_backlog+0x48>)
 8008730:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008734:	490c      	ldr	r1, [pc, #48]	; (8008768 <netconn_listen_with_backlog+0x4c>)
 8008736:	480d      	ldr	r0, [pc, #52]	; (800876c <netconn_listen_with_backlog+0x50>)
 8008738:	f00d fb10 	bl	8015d5c <iprintf>
 800873c:	f06f 030f 	mvn.w	r3, #15
 8008740:	e00c      	b.n	800875c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	4619      	mov	r1, r3
 800874c:	4808      	ldr	r0, [pc, #32]	; (8008770 <netconn_listen_with_backlog+0x54>)
 800874e:	f7ff fed5 	bl	80084fc <netconn_apimsg>
 8008752:	4603      	mov	r3, r0
 8008754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008758:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800875c:	4618      	mov	r0, r3
 800875e:	3730      	adds	r7, #48	; 0x30
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	0801717c 	.word	0x0801717c
 8008768:	08017334 	.word	0x08017334
 800876c:	080171d4 	.word	0x080171d4
 8008770:	08009f0d 	.word	0x08009f0d

08008774 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d109      	bne.n	8008798 <netconn_accept+0x24>
 8008784:	4b3d      	ldr	r3, [pc, #244]	; (800887c <netconn_accept+0x108>)
 8008786:	f240 12e1 	movw	r2, #481	; 0x1e1
 800878a:	493d      	ldr	r1, [pc, #244]	; (8008880 <netconn_accept+0x10c>)
 800878c:	483d      	ldr	r0, [pc, #244]	; (8008884 <netconn_accept+0x110>)
 800878e:	f00d fae5 	bl	8015d5c <iprintf>
 8008792:	f06f 030f 	mvn.w	r3, #15
 8008796:	e06c      	b.n	8008872 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d109      	bne.n	80087b8 <netconn_accept+0x44>
 80087a4:	4b35      	ldr	r3, [pc, #212]	; (800887c <netconn_accept+0x108>)
 80087a6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80087aa:	4937      	ldr	r1, [pc, #220]	; (8008888 <netconn_accept+0x114>)
 80087ac:	4835      	ldr	r0, [pc, #212]	; (8008884 <netconn_accept+0x110>)
 80087ae:	f00d fad5 	bl	8015d5c <iprintf>
 80087b2:	f06f 030f 	mvn.w	r3, #15
 80087b6:	e05c      	b.n	8008872 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fb6c 	bl	8008e96 <netconn_err>
 80087be:	4603      	mov	r3, r0
 80087c0:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80087c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80087ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087ce:	e050      	b.n	8008872 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3314      	adds	r3, #20
 80087d4:	4618      	mov	r0, r3
 80087d6:	f00c ffe3 	bl	80157a0 <sys_mbox_valid>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d005      	beq.n	80087ec <netconn_accept+0x78>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	7f1b      	ldrb	r3, [r3, #28]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80087ec:	f06f 030e 	mvn.w	r3, #14
 80087f0:	e03f      	b.n	8008872 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	7f1b      	ldrb	r3, [r3, #28]
 80087f6:	f003 0302 	and.w	r3, r3, #2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00e      	beq.n	800881c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3314      	adds	r3, #20
 8008802:	f107 020c 	add.w	r2, r7, #12
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f00c ffb2 	bl	8015772 <sys_arch_mbox_tryfetch>
 800880e:	4603      	mov	r3, r0
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008814:	d10a      	bne.n	800882c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008816:	f06f 0306 	mvn.w	r3, #6
 800881a:	e02a      	b.n	8008872 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	3314      	adds	r3, #20
 8008820:	f107 010c 	add.w	r1, r7, #12
 8008824:	2200      	movs	r2, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f00c ff72 	bl	8015710 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	2b00      	cmp	r3, #0
 8008832:	d005      	beq.n	8008840 <netconn_accept+0xcc>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2200      	movs	r2, #0
 800883a:	2101      	movs	r1, #1
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f107 0213 	add.w	r2, r7, #19
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f000 fb75 	bl	8008f38 <lwip_netconn_is_err_msg>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008854:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008858:	e00b      	b.n	8008872 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d102      	bne.n	8008866 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008860:	f06f 030e 	mvn.w	r3, #14
 8008864:	e005      	b.n	8008872 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008870:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	0801717c 	.word	0x0801717c
 8008880:	08017354 	.word	0x08017354
 8008884:	080171d4 	.word	0x080171d4
 8008888:	08017374 	.word	0x08017374

0800888c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d109      	bne.n	80088b8 <netconn_recv_data+0x2c>
 80088a4:	4b58      	ldr	r3, [pc, #352]	; (8008a08 <netconn_recv_data+0x17c>)
 80088a6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80088aa:	4958      	ldr	r1, [pc, #352]	; (8008a0c <netconn_recv_data+0x180>)
 80088ac:	4858      	ldr	r0, [pc, #352]	; (8008a10 <netconn_recv_data+0x184>)
 80088ae:	f00d fa55 	bl	8015d5c <iprintf>
 80088b2:	f06f 030f 	mvn.w	r3, #15
 80088b6:	e0a2      	b.n	80089fe <netconn_recv_data+0x172>
  *new_buf = NULL;
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d109      	bne.n	80088d8 <netconn_recv_data+0x4c>
 80088c4:	4b50      	ldr	r3, [pc, #320]	; (8008a08 <netconn_recv_data+0x17c>)
 80088c6:	f240 224a 	movw	r2, #586	; 0x24a
 80088ca:	4952      	ldr	r1, [pc, #328]	; (8008a14 <netconn_recv_data+0x188>)
 80088cc:	4850      	ldr	r0, [pc, #320]	; (8008a10 <netconn_recv_data+0x184>)
 80088ce:	f00d fa45 	bl	8015d5c <iprintf>
 80088d2:	f06f 030f 	mvn.w	r3, #15
 80088d6:	e092      	b.n	80089fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3310      	adds	r3, #16
 80088dc:	4618      	mov	r0, r3
 80088de:	f00c ff5f 	bl	80157a0 <sys_mbox_valid>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10e      	bne.n	8008906 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fad4 	bl	8008e96 <netconn_err>
 80088ee:	4603      	mov	r3, r0
 80088f0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80088f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d002      	beq.n	8008900 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80088fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80088fe:	e07e      	b.n	80089fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008900:	f06f 030a 	mvn.w	r3, #10
 8008904:	e07b      	b.n	80089fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	7f1b      	ldrb	r3, [r3, #28]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10f      	bne.n	8008932 <netconn_recv_data+0xa6>
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	7f1b      	ldrb	r3, [r3, #28]
 8008920:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d023      	beq.n	800897a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3310      	adds	r3, #16
 8008936:	f107 0218 	add.w	r2, r7, #24
 800893a:	4611      	mov	r1, r2
 800893c:	4618      	mov	r0, r3
 800893e:	f00c ff18 	bl	8015772 <sys_arch_mbox_tryfetch>
 8008942:	4603      	mov	r3, r0
 8008944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008948:	d11f      	bne.n	800898a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 faa3 	bl	8008e96 <netconn_err>
 8008950:	4603      	mov	r3, r0
 8008952:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008954:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800895c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008960:	e04d      	b.n	80089fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	7f1b      	ldrb	r3, [r3, #28]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800896e:	f06f 030a 	mvn.w	r3, #10
 8008972:	e044      	b.n	80089fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008974:	f06f 0306 	mvn.w	r3, #6
 8008978:	e041      	b.n	80089fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3310      	adds	r3, #16
 800897e:	f107 0118 	add.w	r1, r7, #24
 8008982:	2200      	movs	r2, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f00c fec3 	bl	8015710 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008992:	2b10      	cmp	r3, #16
 8008994:	d117      	bne.n	80089c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f107 0217 	add.w	r2, r7, #23
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 faca 	bl	8008f38 <lwip_netconn_is_err_msg>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d009      	beq.n	80089be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80089aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089ae:	f113 0f0f 	cmn.w	r3, #15
 80089b2:	d101      	bne.n	80089b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	e022      	b.n	80089fe <netconn_recv_data+0x172>
      }
      return err;
 80089b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089bc:	e01f      	b.n	80089fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	891b      	ldrh	r3, [r3, #8]
 80089c2:	83fb      	strh	r3, [r7, #30]
 80089c4:	e00d      	b.n	80089e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <netconn_recv_data+0x14e>
 80089cc:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <netconn_recv_data+0x17c>)
 80089ce:	f240 2291 	movw	r2, #657	; 0x291
 80089d2:	4911      	ldr	r1, [pc, #68]	; (8008a18 <netconn_recv_data+0x18c>)
 80089d4:	480e      	ldr	r0, [pc, #56]	; (8008a10 <netconn_recv_data+0x184>)
 80089d6:	f00d f9c1 	bl	8015d5c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	891b      	ldrh	r3, [r3, #8]
 80089e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d005      	beq.n	80089f6 <netconn_recv_data+0x16a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	8bfa      	ldrh	r2, [r7, #30]
 80089f0:	2101      	movs	r1, #1
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3720      	adds	r7, #32
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	0801717c 	.word	0x0801717c
 8008a0c:	08017394 	.word	0x08017394
 8008a10:	080171d4 	.word	0x080171d4
 8008a14:	080173b4 	.word	0x080173b4
 8008a18:	080173d0 	.word	0x080173d0

08008a1c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <netconn_tcp_recvd_msg+0x1e>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a36:	2b10      	cmp	r3, #16
 8008a38:	d009      	beq.n	8008a4e <netconn_tcp_recvd_msg+0x32>
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <netconn_tcp_recvd_msg+0x50>)
 8008a3c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008a40:	490b      	ldr	r1, [pc, #44]	; (8008a70 <netconn_tcp_recvd_msg+0x54>)
 8008a42:	480c      	ldr	r0, [pc, #48]	; (8008a74 <netconn_tcp_recvd_msg+0x58>)
 8008a44:	f00d f98a 	bl	8015d5c <iprintf>
 8008a48:	f06f 030f 	mvn.w	r3, #15
 8008a4c:	e00a      	b.n	8008a64 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4806      	ldr	r0, [pc, #24]	; (8008a78 <netconn_tcp_recvd_msg+0x5c>)
 8008a5e:	f7ff fd4d 	bl	80084fc <netconn_apimsg>
 8008a62:	4603      	mov	r3, r0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	0801717c 	.word	0x0801717c
 8008a70:	080173dc 	.word	0x080173dc
 8008a74:	080171d4 	.word	0x080171d4
 8008a78:	0800a03d 	.word	0x0800a03d

08008a7c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b090      	sub	sp, #64	; 0x40
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3310      	adds	r3, #16
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f00c fe86 	bl	80157a0 <sys_mbox_valid>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d102      	bne.n	8008aa0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008a9a:	f06f 030a 	mvn.w	r3, #10
 8008a9e:	e06d      	b.n	8008b7c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	7f1b      	ldrb	r3, [r3, #28]
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da07      	bge.n	8008aba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	7f1b      	ldrb	r3, [r3, #28]
 8008aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008ab8:	e039      	b.n	8008b2e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	461a      	mov	r2, r3
 8008abe:	68b9      	ldr	r1, [r7, #8]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fee3 	bl	800888c <netconn_recv_data>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008acc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008ad4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ad8:	e050      	b.n	8008b7c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10e      	bne.n	8008b08 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <netconn_recv_data_tcp+0x7a>
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	891b      	ldrh	r3, [r3, #8]
 8008af4:	e000      	b.n	8008af8 <netconn_recv_data_tcp+0x7c>
 8008af6:	2301      	movs	r3, #1
 8008af8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008afc:	f107 0214 	add.w	r2, r7, #20
 8008b00:	4619      	mov	r1, r3
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff ff8a 	bl	8008a1c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d134      	bne.n	8008b78 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	7f1b      	ldrb	r3, [r3, #28]
 8008b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008b26:	f06f 0306 	mvn.w	r3, #6
 8008b2a:	e027      	b.n	8008b7c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008b2c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d005      	beq.n	8008b42 <netconn_recv_data_tcp+0xc6>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10f      	bne.n	8008b6a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f9a3 	bl	8008e96 <netconn_err>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008b56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <netconn_recv_data_tcp+0xe8>
          return err;
 8008b5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b62:	e00b      	b.n	8008b7c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008b64:	f06f 030d 	mvn.w	r3, #13
 8008b68:	e008      	b.n	8008b7c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 f955 	bl	8008e1c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008b72:	f06f 030e 	mvn.w	r3, #14
 8008b76:	e001      	b.n	8008b7c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008b78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3740      	adds	r7, #64	; 0x40
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <netconn_recv+0x28>
 8008b98:	4b32      	ldr	r3, [pc, #200]	; (8008c64 <netconn_recv+0xe0>)
 8008b9a:	f240 3263 	movw	r2, #867	; 0x363
 8008b9e:	4932      	ldr	r1, [pc, #200]	; (8008c68 <netconn_recv+0xe4>)
 8008ba0:	4832      	ldr	r0, [pc, #200]	; (8008c6c <netconn_recv+0xe8>)
 8008ba2:	f00d f8db 	bl	8015d5c <iprintf>
 8008ba6:	f06f 030f 	mvn.w	r3, #15
 8008baa:	e056      	b.n	8008c5a <netconn_recv+0xd6>
  *new_buf = NULL;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <netconn_recv+0x48>
 8008bb8:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <netconn_recv+0xe0>)
 8008bba:	f240 3265 	movw	r2, #869	; 0x365
 8008bbe:	492c      	ldr	r1, [pc, #176]	; (8008c70 <netconn_recv+0xec>)
 8008bc0:	482a      	ldr	r0, [pc, #168]	; (8008c6c <netconn_recv+0xe8>)
 8008bc2:	f00d f8cb 	bl	8015d5c <iprintf>
 8008bc6:	f06f 030f 	mvn.w	r3, #15
 8008bca:	e046      	b.n	8008c5a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd4:	2b10      	cmp	r3, #16
 8008bd6:	d13a      	bne.n	8008c4e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008bdc:	2006      	movs	r0, #6
 8008bde:	f002 fc05 	bl	800b3ec <memp_malloc>
 8008be2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <netconn_recv+0x6c>
      return ERR_MEM;
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bee:	e034      	b.n	8008c5a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008bf0:	f107 030c 	add.w	r3, r7, #12
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff ff3f 	bl	8008a7c <netconn_recv_data_tcp>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008c02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d006      	beq.n	8008c18 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008c0a:	6979      	ldr	r1, [r7, #20]
 8008c0c:	2006      	movs	r0, #6
 8008c0e:	f002 fc3f 	bl	800b490 <memp_free>
      return err;
 8008c12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c16:	e020      	b.n	8008c5a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <netconn_recv+0xa8>
 8008c1e:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <netconn_recv+0xe0>)
 8008c20:	f240 3279 	movw	r2, #889	; 0x379
 8008c24:	4913      	ldr	r1, [pc, #76]	; (8008c74 <netconn_recv+0xf0>)
 8008c26:	4811      	ldr	r0, [pc, #68]	; (8008c6c <netconn_recv+0xe8>)
 8008c28:	f00d f898 	bl	8015d5c <iprintf>

    buf->p = p;
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2200      	movs	r2, #0
 8008c42:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	e005      	b.n	8008c5a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008c4e:	2200      	movs	r2, #0
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7ff fe1a 	bl	800888c <netconn_recv_data>
 8008c58:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	0801717c 	.word	0x0801717c
 8008c68:	08017394 	.word	0x08017394
 8008c6c:	080171d4 	.word	0x080171d4
 8008c70:	080173b4 	.word	0x080173b4
 8008c74:	0801742c 	.word	0x0801742c

08008c78 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b088      	sub	sp, #32
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008c8e:	78fa      	ldrb	r2, [r7, #3]
 8008c90:	f107 0110 	add.w	r1, r7, #16
 8008c94:	6a3b      	ldr	r3, [r7, #32]
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f805 	bl	8008cac <netconn_write_vectors_partly>
 8008ca2:	4603      	mov	r3, r0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b092      	sub	sp, #72	; 0x48
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	461a      	mov	r2, r3
 8008cba:	460b      	mov	r3, r1
 8008cbc:	80fb      	strh	r3, [r7, #6]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d109      	bne.n	8008cdc <netconn_write_vectors_partly+0x30>
 8008cc8:	4b4e      	ldr	r3, [pc, #312]	; (8008e04 <netconn_write_vectors_partly+0x158>)
 8008cca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008cce:	494e      	ldr	r1, [pc, #312]	; (8008e08 <netconn_write_vectors_partly+0x15c>)
 8008cd0:	484e      	ldr	r0, [pc, #312]	; (8008e0c <netconn_write_vectors_partly+0x160>)
 8008cd2:	f00d f843 	bl	8015d5c <iprintf>
 8008cd6:	f06f 030f 	mvn.w	r3, #15
 8008cda:	e08e      	b.n	8008dfa <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d009      	beq.n	8008cfc <netconn_write_vectors_partly+0x50>
 8008ce8:	4b46      	ldr	r3, [pc, #280]	; (8008e04 <netconn_write_vectors_partly+0x158>)
 8008cea:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008cee:	4948      	ldr	r1, [pc, #288]	; (8008e10 <netconn_write_vectors_partly+0x164>)
 8008cf0:	4846      	ldr	r0, [pc, #280]	; (8008e0c <netconn_write_vectors_partly+0x160>)
 8008cf2:	f00d f833 	bl	8015d5c <iprintf>
 8008cf6:	f06f 0305 	mvn.w	r3, #5
 8008cfa:	e07e      	b.n	8008dfa <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	7f1b      	ldrb	r3, [r3, #28]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d104      	bne.n	8008d12 <netconn_write_vectors_partly+0x66>
 8008d08:	797b      	ldrb	r3, [r7, #5]
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <netconn_write_vectors_partly+0x6a>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <netconn_write_vectors_partly+0x6c>
 8008d16:	2300      	movs	r3, #0
 8008d18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008d1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <netconn_write_vectors_partly+0x84>
 8008d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008d2a:	f06f 0305 	mvn.w	r3, #5
 8008d2e:	e064      	b.n	8008dfa <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008d34:	2300      	movs	r3, #0
 8008d36:	643b      	str	r3, [r7, #64]	; 0x40
 8008d38:	e015      	b.n	8008d66 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d46:	4413      	add	r3, r2
 8008d48:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	4413      	add	r3, r2
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d202      	bcs.n	8008d60 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008d5a:	f06f 0305 	mvn.w	r3, #5
 8008d5e:	e04c      	b.n	8008dfa <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d62:	3301      	adds	r3, #1
 8008d64:	643b      	str	r3, [r7, #64]	; 0x40
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	dbe5      	blt.n	8008d3a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e040      	b.n	8008dfa <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	da0a      	bge.n	8008d94 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d102      	bne.n	8008d8a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8008d84:	f06f 0305 	mvn.w	r3, #5
 8008d88:	e037      	b.n	8008dfa <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008d8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d8e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008d9c:	88fb      	ldrh	r3, [r7, #6]
 8008d9e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008da0:	2300      	movs	r3, #0
 8008da2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008da4:	797b      	ldrb	r3, [r7, #5]
 8008da6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008db2:	f107 0314 	add.w	r3, r7, #20
 8008db6:	4619      	mov	r1, r3
 8008db8:	4816      	ldr	r0, [pc, #88]	; (8008e14 <netconn_write_vectors_partly+0x168>)
 8008dba:	f7ff fb9f 	bl	80084fc <netconn_apimsg>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008dc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d114      	bne.n	8008df6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8008dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d002      	beq.n	8008dd8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d006      	beq.n	8008df6 <netconn_write_vectors_partly+0x14a>
 8008de8:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <netconn_write_vectors_partly+0x158>)
 8008dea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008dee:	490a      	ldr	r1, [pc, #40]	; (8008e18 <netconn_write_vectors_partly+0x16c>)
 8008df0:	4806      	ldr	r0, [pc, #24]	; (8008e0c <netconn_write_vectors_partly+0x160>)
 8008df2:	f00c ffb3 	bl	8015d5c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008df6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3748      	adds	r7, #72	; 0x48
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	0801717c 	.word	0x0801717c
 8008e08:	08017454 	.word	0x08017454
 8008e0c:	080171d4 	.word	0x080171d4
 8008e10:	08017470 	.word	0x08017470
 8008e14:	0800a441 	.word	0x0800a441
 8008e18:	08017494 	.word	0x08017494

08008e1c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08c      	sub	sp, #48	; 0x30
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d109      	bne.n	8008e42 <netconn_close_shutdown+0x26>
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <netconn_close_shutdown+0x50>)
 8008e30:	f240 4247 	movw	r2, #1095	; 0x447
 8008e34:	490e      	ldr	r1, [pc, #56]	; (8008e70 <netconn_close_shutdown+0x54>)
 8008e36:	480f      	ldr	r0, [pc, #60]	; (8008e74 <netconn_close_shutdown+0x58>)
 8008e38:	f00c ff90 	bl	8015d5c <iprintf>
 8008e3c:	f06f 030f 	mvn.w	r3, #15
 8008e40:	e010      	b.n	8008e64 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e4a:	2329      	movs	r3, #41	; 0x29
 8008e4c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008e4e:	f107 030c 	add.w	r3, r7, #12
 8008e52:	4619      	mov	r1, r3
 8008e54:	4808      	ldr	r0, [pc, #32]	; (8008e78 <netconn_close_shutdown+0x5c>)
 8008e56:	f7ff fb51 	bl	80084fc <netconn_apimsg>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3730      	adds	r7, #48	; 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	0801717c 	.word	0x0801717c
 8008e70:	080174b8 	.word	0x080174b8
 8008e74:	080171d4 	.word	0x080171d4
 8008e78:	0800a559 	.word	0x0800a559

08008e7c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008e84:	2103      	movs	r1, #3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ffc8 	bl	8008e1c <netconn_close_shutdown>
 8008e8c:	4603      	mov	r3, r0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <netconn_err+0x12>
    return ERR_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	e00d      	b.n	8008ec4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008ea8:	f00c fd84 	bl	80159b4 <sys_arch_protect>
 8008eac:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7a1b      	ldrb	r3, [r3, #8]
 8008eb2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f00c fd88 	bl	80159d0 <sys_arch_unprotect>
  return err;
 8008ec0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eda:	f113 0f0d 	cmn.w	r3, #13
 8008ede:	d009      	beq.n	8008ef4 <lwip_netconn_err_to_msg+0x28>
 8008ee0:	f113 0f0d 	cmn.w	r3, #13
 8008ee4:	dc0c      	bgt.n	8008f00 <lwip_netconn_err_to_msg+0x34>
 8008ee6:	f113 0f0f 	cmn.w	r3, #15
 8008eea:	d007      	beq.n	8008efc <lwip_netconn_err_to_msg+0x30>
 8008eec:	f113 0f0e 	cmn.w	r3, #14
 8008ef0:	d002      	beq.n	8008ef8 <lwip_netconn_err_to_msg+0x2c>
 8008ef2:	e005      	b.n	8008f00 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <lwip_netconn_err_to_msg+0x54>)
 8008ef6:	e00e      	b.n	8008f16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <lwip_netconn_err_to_msg+0x58>)
 8008efa:	e00c      	b.n	8008f16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <lwip_netconn_err_to_msg+0x5c>)
 8008efe:	e00a      	b.n	8008f16 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d005      	beq.n	8008f14 <lwip_netconn_err_to_msg+0x48>
 8008f08:	4b08      	ldr	r3, [pc, #32]	; (8008f2c <lwip_netconn_err_to_msg+0x60>)
 8008f0a:	227d      	movs	r2, #125	; 0x7d
 8008f0c:	4908      	ldr	r1, [pc, #32]	; (8008f30 <lwip_netconn_err_to_msg+0x64>)
 8008f0e:	4809      	ldr	r0, [pc, #36]	; (8008f34 <lwip_netconn_err_to_msg+0x68>)
 8008f10:	f00c ff24 	bl	8015d5c <iprintf>
      return NULL;
 8008f14:	2300      	movs	r3, #0
  }
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	0801a6ac 	.word	0x0801a6ac
 8008f24:	0801a6ad 	.word	0x0801a6ad
 8008f28:	0801a6ae 	.word	0x0801a6ae
 8008f2c:	080174d4 	.word	0x080174d4
 8008f30:	08017508 	.word	0x08017508
 8008f34:	08017518 	.word	0x08017518

08008f38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d105      	bne.n	8008f54 <lwip_netconn_is_err_msg+0x1c>
 8008f48:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <lwip_netconn_is_err_msg+0x5c>)
 8008f4a:	2285      	movs	r2, #133	; 0x85
 8008f4c:	4912      	ldr	r1, [pc, #72]	; (8008f98 <lwip_netconn_is_err_msg+0x60>)
 8008f4e:	4813      	ldr	r0, [pc, #76]	; (8008f9c <lwip_netconn_is_err_msg+0x64>)
 8008f50:	f00c ff04 	bl	8015d5c <iprintf>

  if (msg == &netconn_aborted) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a12      	ldr	r2, [pc, #72]	; (8008fa0 <lwip_netconn_is_err_msg+0x68>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d104      	bne.n	8008f66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	22f3      	movs	r2, #243	; 0xf3
 8008f60:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e012      	b.n	8008f8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a0e      	ldr	r2, [pc, #56]	; (8008fa4 <lwip_netconn_is_err_msg+0x6c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d104      	bne.n	8008f78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	22f2      	movs	r2, #242	; 0xf2
 8008f72:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e009      	b.n	8008f8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a0b      	ldr	r2, [pc, #44]	; (8008fa8 <lwip_netconn_is_err_msg+0x70>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d104      	bne.n	8008f8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	22f1      	movs	r2, #241	; 0xf1
 8008f84:	701a      	strb	r2, [r3, #0]
    return 1;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e000      	b.n	8008f8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	080174d4 	.word	0x080174d4
 8008f98:	08017540 	.word	0x08017540
 8008f9c:	08017518 	.word	0x08017518
 8008fa0:	0801a6ac 	.word	0x0801a6ac
 8008fa4:	0801a6ad 	.word	0x0801a6ad
 8008fa8:	0801a6ae 	.word	0x0801a6ae

08008fac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
 8008fb8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <recv_udp+0x20>
 8008fc0:	4b34      	ldr	r3, [pc, #208]	; (8009094 <recv_udp+0xe8>)
 8008fc2:	22e5      	movs	r2, #229	; 0xe5
 8008fc4:	4934      	ldr	r1, [pc, #208]	; (8009098 <recv_udp+0xec>)
 8008fc6:	4835      	ldr	r0, [pc, #212]	; (800909c <recv_udp+0xf0>)
 8008fc8:	f00c fec8 	bl	8015d5c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d105      	bne.n	8008fde <recv_udp+0x32>
 8008fd2:	4b30      	ldr	r3, [pc, #192]	; (8009094 <recv_udp+0xe8>)
 8008fd4:	22e6      	movs	r2, #230	; 0xe6
 8008fd6:	4932      	ldr	r1, [pc, #200]	; (80090a0 <recv_udp+0xf4>)
 8008fd8:	4830      	ldr	r0, [pc, #192]	; (800909c <recv_udp+0xf0>)
 8008fda:	f00c febf 	bl	8015d5c <iprintf>
  conn = (struct netconn *)arg;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d103      	bne.n	8008ff0 <recv_udp+0x44>
    pbuf_free(p);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f003 f8f5 	bl	800c1d8 <pbuf_free>
    return;
 8008fee:	e04d      	b.n	800908c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d005      	beq.n	8009006 <recv_udp+0x5a>
 8008ffa:	4b26      	ldr	r3, [pc, #152]	; (8009094 <recv_udp+0xe8>)
 8008ffc:	22ee      	movs	r2, #238	; 0xee
 8008ffe:	4929      	ldr	r1, [pc, #164]	; (80090a4 <recv_udp+0xf8>)
 8009000:	4826      	ldr	r0, [pc, #152]	; (800909c <recv_udp+0xf0>)
 8009002:	f00c feab 	bl	8015d5c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	3310      	adds	r3, #16
 800900a:	4618      	mov	r0, r3
 800900c:	f00c fbc8 	bl	80157a0 <sys_mbox_valid>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d103      	bne.n	800901e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f003 f8de 	bl	800c1d8 <pbuf_free>
    return;
 800901c:	e036      	b.n	800908c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800901e:	2006      	movs	r0, #6
 8009020:	f002 f9e4 	bl	800b3ec <memp_malloc>
 8009024:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d103      	bne.n	8009034 <recv_udp+0x88>
    pbuf_free(p);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f003 f8d3 	bl	800c1d8 <pbuf_free>
    return;
 8009032:	e02b      	b.n	800908c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009034:	69bb      	ldr	r3, [r7, #24]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <recv_udp+0xa0>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	e000      	b.n	800904e <recv_udp+0xa2>
 800904c:	2300      	movs	r3, #0
 800904e:	69ba      	ldr	r2, [r7, #24]
 8009050:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009056:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	891b      	ldrh	r3, [r3, #8]
 800905c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3310      	adds	r3, #16
 8009062:	69b9      	ldr	r1, [r7, #24]
 8009064:	4618      	mov	r0, r3
 8009066:	f00c fb39 	bl	80156dc <sys_mbox_trypost>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009070:	69b8      	ldr	r0, [r7, #24]
 8009072:	f001 fafd 	bl	800a670 <netbuf_delete>
    return;
 8009076:	e009      	b.n	800908c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <recv_udp+0xe0>
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	8afa      	ldrh	r2, [r7, #22]
 8009086:	2100      	movs	r1, #0
 8009088:	69f8      	ldr	r0, [r7, #28]
 800908a:	4798      	blx	r3
  }
}
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	080174d4 	.word	0x080174d4
 8009098:	0801754c 	.word	0x0801754c
 800909c:	08017518 	.word	0x08017518
 80090a0:	08017570 	.word	0x08017570
 80090a4:	08017590 	.word	0x08017590

080090a8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
 80090b4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d106      	bne.n	80090ca <recv_tcp+0x22>
 80090bc:	4b36      	ldr	r3, [pc, #216]	; (8009198 <recv_tcp+0xf0>)
 80090be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80090c2:	4936      	ldr	r1, [pc, #216]	; (800919c <recv_tcp+0xf4>)
 80090c4:	4836      	ldr	r0, [pc, #216]	; (80091a0 <recv_tcp+0xf8>)
 80090c6:	f00c fe49 	bl	8015d5c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d106      	bne.n	80090de <recv_tcp+0x36>
 80090d0:	4b31      	ldr	r3, [pc, #196]	; (8009198 <recv_tcp+0xf0>)
 80090d2:	f240 122d 	movw	r2, #301	; 0x12d
 80090d6:	4933      	ldr	r1, [pc, #204]	; (80091a4 <recv_tcp+0xfc>)
 80090d8:	4831      	ldr	r0, [pc, #196]	; (80091a0 <recv_tcp+0xf8>)
 80090da:	f00c fe3f 	bl	8015d5c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80090de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d006      	beq.n	80090f4 <recv_tcp+0x4c>
 80090e6:	4b2c      	ldr	r3, [pc, #176]	; (8009198 <recv_tcp+0xf0>)
 80090e8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80090ec:	492e      	ldr	r1, [pc, #184]	; (80091a8 <recv_tcp+0x100>)
 80090ee:	482c      	ldr	r0, [pc, #176]	; (80091a0 <recv_tcp+0xf8>)
 80090f0:	f00c fe34 	bl	8015d5c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d102      	bne.n	8009104 <recv_tcp+0x5c>
    return ERR_VAL;
 80090fe:	f06f 0305 	mvn.w	r3, #5
 8009102:	e045      	b.n	8009190 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	429a      	cmp	r2, r3
 800910c:	d006      	beq.n	800911c <recv_tcp+0x74>
 800910e:	4b22      	ldr	r3, [pc, #136]	; (8009198 <recv_tcp+0xf0>)
 8009110:	f240 1235 	movw	r2, #309	; 0x135
 8009114:	4925      	ldr	r1, [pc, #148]	; (80091ac <recv_tcp+0x104>)
 8009116:	4822      	ldr	r0, [pc, #136]	; (80091a0 <recv_tcp+0xf8>)
 8009118:	f00c fe20 	bl	8015d5c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	3310      	adds	r3, #16
 8009120:	4618      	mov	r0, r3
 8009122:	f00c fb3d 	bl	80157a0 <sys_mbox_valid>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10d      	bne.n	8009148 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d008      	beq.n	8009144 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	891b      	ldrh	r3, [r3, #8]
 8009136:	4619      	mov	r1, r3
 8009138:	68b8      	ldr	r0, [r7, #8]
 800913a:	f004 f805 	bl	800d148 <tcp_recved>
      pbuf_free(p);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f003 f84a 	bl	800c1d8 <pbuf_free>
    }
    return ERR_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	e023      	b.n	8009190 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <recv_tcp+0xb2>
    msg = p;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	891b      	ldrh	r3, [r3, #8]
 8009156:	83fb      	strh	r3, [r7, #30]
 8009158:	e003      	b.n	8009162 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800915a:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <recv_tcp+0x108>)
 800915c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3310      	adds	r3, #16
 8009166:	69b9      	ldr	r1, [r7, #24]
 8009168:	4618      	mov	r0, r3
 800916a:	f00c fab7 	bl	80156dc <sys_mbox_trypost>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009178:	e00a      	b.n	8009190 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917e:	2b00      	cmp	r3, #0
 8009180:	d005      	beq.n	800918e <recv_tcp+0xe6>
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	8bfa      	ldrh	r2, [r7, #30]
 8009188:	2100      	movs	r1, #0
 800918a:	6978      	ldr	r0, [r7, #20]
 800918c:	4798      	blx	r3
  }

  return ERR_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3720      	adds	r7, #32
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	080174d4 	.word	0x080174d4
 800919c:	080175b0 	.word	0x080175b0
 80091a0:	08017518 	.word	0x08017518
 80091a4:	080175d4 	.word	0x080175d4
 80091a8:	080175f4 	.word	0x080175f4
 80091ac:	0801760c 	.word	0x0801760c
 80091b0:	0801a6ae 	.word	0x0801a6ae

080091b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <poll_tcp+0x22>
 80091c8:	4b29      	ldr	r3, [pc, #164]	; (8009270 <poll_tcp+0xbc>)
 80091ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80091ce:	4929      	ldr	r1, [pc, #164]	; (8009274 <poll_tcp+0xc0>)
 80091d0:	4829      	ldr	r0, [pc, #164]	; (8009278 <poll_tcp+0xc4>)
 80091d2:	f00c fdc3 	bl	8015d5c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	785b      	ldrb	r3, [r3, #1]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d104      	bne.n	80091e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80091de:	2101      	movs	r1, #1
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 ff61 	bl	800a0a8 <lwip_netconn_do_writemore>
 80091e6:	e016      	b.n	8009216 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	785b      	ldrb	r3, [r3, #1]
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d112      	bne.n	8009216 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <poll_tcp+0x5a>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	7a5b      	ldrb	r3, [r3, #9]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	7a5a      	ldrb	r2, [r3, #9]
 8009208:	3a01      	subs	r2, #1
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800920e:	2101      	movs	r1, #1
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f000 fbf7 	bl	8009a04 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	7f1b      	ldrb	r3, [r3, #28]
 800921a:	f003 0310 	and.w	r3, r3, #16
 800921e:	2b00      	cmp	r3, #0
 8009220:	d021      	beq.n	8009266 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d01d      	beq.n	8009266 <poll_tcp+0xb2>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009232:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009236:	d316      	bcc.n	8009266 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009240:	2b04      	cmp	r3, #4
 8009242:	d810      	bhi.n	8009266 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	7f1b      	ldrb	r3, [r3, #28]
 8009248:	f023 0310 	bic.w	r3, r3, #16
 800924c:	b2da      	uxtb	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <poll_tcp+0xb2>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925e:	2200      	movs	r2, #0
 8009260:	2102      	movs	r1, #2
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	080174d4 	.word	0x080174d4
 8009274:	0801762c 	.word	0x0801762c
 8009278:	08017518 	.word	0x08017518

0800927c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d106      	bne.n	80092a2 <sent_tcp+0x26>
 8009294:	4b20      	ldr	r3, [pc, #128]	; (8009318 <sent_tcp+0x9c>)
 8009296:	f240 1293 	movw	r2, #403	; 0x193
 800929a:	4920      	ldr	r1, [pc, #128]	; (800931c <sent_tcp+0xa0>)
 800929c:	4820      	ldr	r0, [pc, #128]	; (8009320 <sent_tcp+0xa4>)
 800929e:	f00c fd5d 	bl	8015d5c <iprintf>

  if (conn) {
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d032      	beq.n	800930e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	785b      	ldrb	r3, [r3, #1]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d104      	bne.n	80092ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80092b0:	2101      	movs	r1, #1
 80092b2:	6978      	ldr	r0, [r7, #20]
 80092b4:	f000 fef8 	bl	800a0a8 <lwip_netconn_do_writemore>
 80092b8:	e007      	b.n	80092ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b04      	cmp	r3, #4
 80092c0:	d103      	bne.n	80092ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80092c2:	2101      	movs	r1, #1
 80092c4:	6978      	ldr	r0, [r7, #20]
 80092c6:	f000 fb9d 	bl	8009a04 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01d      	beq.n	800930e <sent_tcp+0x92>
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80092da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80092de:	d316      	bcc.n	800930e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d810      	bhi.n	800930e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	7f1b      	ldrb	r3, [r3, #28]
 80092f0:	f023 0310 	bic.w	r3, r3, #16
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <sent_tcp+0x92>
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	2102      	movs	r1, #2
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	080174d4 	.word	0x080174d4
 800931c:	0801762c 	.word	0x0801762c
 8009320:	08017518 	.word	0x08017518

08009324 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	460b      	mov	r3, r1
 800932e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d106      	bne.n	8009348 <err_tcp+0x24>
 800933a:	4b5f      	ldr	r3, [pc, #380]	; (80094b8 <err_tcp+0x194>)
 800933c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009340:	495e      	ldr	r1, [pc, #376]	; (80094bc <err_tcp+0x198>)
 8009342:	485f      	ldr	r0, [pc, #380]	; (80094c0 <err_tcp+0x19c>)
 8009344:	f00c fd0a 	bl	8015d5c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009348:	f00c fb34 	bl	80159b4 <sys_arch_protect>
 800934c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	2200      	movs	r2, #0
 8009352:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	7f1b      	ldrb	r3, [r3, #28]
 800935e:	f043 0301 	orr.w	r3, r3, #1
 8009362:	b2da      	uxtb	r2, r3
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	2200      	movs	r2, #0
 8009372:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009374:	69b8      	ldr	r0, [r7, #24]
 8009376:	f00c fb2b 	bl	80159d0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	d005      	beq.n	800938e <err_tcp+0x6a>
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	2200      	movs	r2, #0
 8009388:	2104      	movs	r1, #4
 800938a:	69f8      	ldr	r0, [r7, #28]
 800938c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	d005      	beq.n	80093a2 <err_tcp+0x7e>
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	2200      	movs	r2, #0
 800939c:	2100      	movs	r1, #0
 800939e:	69f8      	ldr	r0, [r7, #28]
 80093a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d005      	beq.n	80093b6 <err_tcp+0x92>
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2200      	movs	r2, #0
 80093b0:	2102      	movs	r1, #2
 80093b2:	69f8      	ldr	r0, [r7, #28]
 80093b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80093b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7ff fd86 	bl	8008ecc <lwip_netconn_err_to_msg>
 80093c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	3310      	adds	r3, #16
 80093c6:	4618      	mov	r0, r3
 80093c8:	f00c f9ea 	bl	80157a0 <sys_mbox_valid>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	3310      	adds	r3, #16
 80093d6:	6939      	ldr	r1, [r7, #16]
 80093d8:	4618      	mov	r0, r3
 80093da:	f00c f97f 	bl	80156dc <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3314      	adds	r3, #20
 80093e2:	4618      	mov	r0, r3
 80093e4:	f00c f9dc 	bl	80157a0 <sys_mbox_valid>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d005      	beq.n	80093fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	3314      	adds	r3, #20
 80093f2:	6939      	ldr	r1, [r7, #16]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f00c f971 	bl	80156dc <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d005      	beq.n	800940c <err_tcp+0xe8>
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	2b04      	cmp	r3, #4
 8009404:	d002      	beq.n	800940c <err_tcp+0xe8>
 8009406:	7dfb      	ldrb	r3, [r7, #23]
 8009408:	2b03      	cmp	r3, #3
 800940a:	d143      	bne.n	8009494 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	7f1b      	ldrb	r3, [r3, #28]
 8009410:	f003 0304 	and.w	r3, r3, #4
 8009414:	2b00      	cmp	r3, #0
 8009416:	bf14      	ite	ne
 8009418:	2301      	movne	r3, #1
 800941a:	2300      	moveq	r3, #0
 800941c:	b2db      	uxtb	r3, r3
 800941e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	7f1b      	ldrb	r3, [r3, #28]
 8009424:	f023 0304 	bic.w	r3, r3, #4
 8009428:	b2da      	uxtb	r2, r3
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d13b      	bne.n	80094ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <err_tcp+0x126>
 800943c:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <err_tcp+0x194>)
 800943e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009442:	4920      	ldr	r1, [pc, #128]	; (80094c4 <err_tcp+0x1a0>)
 8009444:	481e      	ldr	r0, [pc, #120]	; (80094c0 <err_tcp+0x19c>)
 8009446:	f00c fc89 	bl	8015d5c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	2b04      	cmp	r3, #4
 800944e:	d104      	bne.n	800945a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	2200      	movs	r2, #0
 8009456:	711a      	strb	r2, [r3, #4]
 8009458:	e003      	b.n	8009462 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	78fa      	ldrb	r2, [r7, #3]
 8009460:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	330c      	adds	r3, #12
 800946a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800946c:	68b8      	ldr	r0, [r7, #8]
 800946e:	f00c fa25 	bl	80158bc <sys_sem_valid>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <err_tcp+0x162>
 8009478:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <err_tcp+0x194>)
 800947a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800947e:	4912      	ldr	r1, [pc, #72]	; (80094c8 <err_tcp+0x1a4>)
 8009480:	480f      	ldr	r0, [pc, #60]	; (80094c0 <err_tcp+0x19c>)
 8009482:	f00c fc6b 	bl	8015d5c <iprintf>
      conn->current_msg = NULL;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	2200      	movs	r2, #0
 800948a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800948c:	68b8      	ldr	r0, [r7, #8]
 800948e:	f00c f9fb 	bl	8015888 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009492:	e00b      	b.n	80094ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	6a1b      	ldr	r3, [r3, #32]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d008      	beq.n	80094ae <err_tcp+0x18a>
 800949c:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <err_tcp+0x194>)
 800949e:	f240 12f7 	movw	r2, #503	; 0x1f7
 80094a2:	490a      	ldr	r1, [pc, #40]	; (80094cc <err_tcp+0x1a8>)
 80094a4:	4806      	ldr	r0, [pc, #24]	; (80094c0 <err_tcp+0x19c>)
 80094a6:	f00c fc59 	bl	8015d5c <iprintf>
  }
}
 80094aa:	e000      	b.n	80094ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 80094ac:	bf00      	nop
}
 80094ae:	bf00      	nop
 80094b0:	3720      	adds	r7, #32
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	080174d4 	.word	0x080174d4
 80094bc:	0801762c 	.word	0x0801762c
 80094c0:	08017518 	.word	0x08017518
 80094c4:	0801763c 	.word	0x0801763c
 80094c8:	08017658 	.word	0x08017658
 80094cc:	08017674 	.word	0x08017674

080094d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f004 fcf7 	bl	800ded4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80094e6:	490a      	ldr	r1, [pc, #40]	; (8009510 <setup_tcp+0x40>)
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f004 fd05 	bl	800def8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80094ee:	4909      	ldr	r1, [pc, #36]	; (8009514 <setup_tcp+0x44>)
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f004 fd23 	bl	800df3c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80094f6:	2202      	movs	r2, #2
 80094f8:	4907      	ldr	r1, [pc, #28]	; (8009518 <setup_tcp+0x48>)
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f004 fd7a 	bl	800dff4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009500:	4906      	ldr	r1, [pc, #24]	; (800951c <setup_tcp+0x4c>)
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f004 fd3c 	bl	800df80 <tcp_err>
}
 8009508:	bf00      	nop
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	080090a9 	.word	0x080090a9
 8009514:	0800927d 	.word	0x0800927d
 8009518:	080091b5 	.word	0x080091b5
 800951c:	08009325 	.word	0x08009325

08009520 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b089      	sub	sp, #36	; 0x24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	4613      	mov	r3, r2
 800952c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d102      	bne.n	800953e <accept_function+0x1e>
    return ERR_VAL;
 8009538:	f06f 0305 	mvn.w	r3, #5
 800953c:	e0a1      	b.n	8009682 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	3314      	adds	r3, #20
 8009542:	4618      	mov	r0, r3
 8009544:	f00c f92c 	bl	80157a0 <sys_mbox_valid>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d102      	bne.n	8009554 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800954e:	f06f 0305 	mvn.w	r3, #5
 8009552:	e096      	b.n	8009682 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d11b      	bne.n	8009592 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	f103 0414 	add.w	r4, r3, #20
 8009560:	f06f 000c 	mvn.w	r0, #12
 8009564:	f7ff fcb2 	bl	8008ecc <lwip_netconn_err_to_msg>
 8009568:	4603      	mov	r3, r0
 800956a:	4619      	mov	r1, r3
 800956c:	4620      	mov	r0, r4
 800956e:	f00c f8b5 	bl	80156dc <sys_mbox_trypost>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d109      	bne.n	800958c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <accept_function+0x6c>
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	2200      	movs	r2, #0
 8009586:	2100      	movs	r1, #0
 8009588:	69f8      	ldr	r0, [r7, #28]
 800958a:	4798      	blx	r3
    }
    return ERR_VAL;
 800958c:	f06f 0305 	mvn.w	r3, #5
 8009590:	e077      	b.n	8009682 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <accept_function+0x88>
 800959a:	4b3c      	ldr	r3, [pc, #240]	; (800968c <accept_function+0x16c>)
 800959c:	f240 222a 	movw	r2, #554	; 0x22a
 80095a0:	493b      	ldr	r1, [pc, #236]	; (8009690 <accept_function+0x170>)
 80095a2:	483c      	ldr	r0, [pc, #240]	; (8009694 <accept_function+0x174>)
 80095a4:	f00c fbda 	bl	8015d5c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	781a      	ldrb	r2, [r3, #0]
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f000 f8f0 	bl	8009798 <netconn_alloc>
 80095b8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d11b      	bne.n	80095f8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f103 0414 	add.w	r4, r3, #20
 80095c6:	f06f 000c 	mvn.w	r0, #12
 80095ca:	f7ff fc7f 	bl	8008ecc <lwip_netconn_err_to_msg>
 80095ce:	4603      	mov	r3, r0
 80095d0:	4619      	mov	r1, r3
 80095d2:	4620      	mov	r0, r4
 80095d4:	f00c f882 	bl	80156dc <sys_mbox_trypost>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d109      	bne.n	80095f2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <accept_function+0xd2>
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	2200      	movs	r2, #0
 80095ec:	2100      	movs	r1, #0
 80095ee:	69f8      	ldr	r0, [r7, #28]
 80095f0:	4798      	blx	r3
    }
    return ERR_MEM;
 80095f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095f6:	e044      	b.n	8009682 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80095fe:	69b8      	ldr	r0, [r7, #24]
 8009600:	f7ff ff66 	bl	80094d0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	3314      	adds	r3, #20
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	4618      	mov	r0, r3
 800960c:	f00c f866 	bl	80156dc <sys_mbox_trypost>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d02a      	beq.n	800966c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800961c:	2100      	movs	r1, #0
 800961e:	6978      	ldr	r0, [r7, #20]
 8009620:	f004 fc58 	bl	800ded4 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009624:	2100      	movs	r1, #0
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	f004 fc66 	bl	800def8 <tcp_recv>
    tcp_sent(pcb, NULL);
 800962c:	2100      	movs	r1, #0
 800962e:	6978      	ldr	r0, [r7, #20]
 8009630:	f004 fc84 	bl	800df3c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009634:	2200      	movs	r2, #0
 8009636:	2100      	movs	r1, #0
 8009638:	6978      	ldr	r0, [r7, #20]
 800963a:	f004 fcdb 	bl	800dff4 <tcp_poll>
    tcp_err(pcb, NULL);
 800963e:	2100      	movs	r1, #0
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	f004 fc9d 	bl	800df80 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2200      	movs	r2, #0
 800964a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	3310      	adds	r3, #16
 8009650:	4618      	mov	r0, r3
 8009652:	f00c f831 	bl	80156b8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	3310      	adds	r3, #16
 800965a:	4618      	mov	r0, r3
 800965c:	f00c f8b1 	bl	80157c2 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009660:	69b8      	ldr	r0, [r7, #24]
 8009662:	f000 f907 	bl	8009874 <netconn_free>
    return ERR_MEM;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800966a:	e00a      	b.n	8009682 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <accept_function+0x160>
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	2200      	movs	r2, #0
 800967a:	2100      	movs	r1, #0
 800967c:	69f8      	ldr	r0, [r7, #28]
 800967e:	4798      	blx	r3
  }

  return ERR_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3724      	adds	r7, #36	; 0x24
 8009686:	46bd      	mov	sp, r7
 8009688:	bd90      	pop	{r4, r7, pc}
 800968a:	bf00      	nop
 800968c:	080174d4 	.word	0x080174d4
 8009690:	08017690 	.word	0x08017690
 8009694:	08017518 	.word	0x08017518

08009698 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <pcb_new+0x24>
 80096ae:	4b2b      	ldr	r3, [pc, #172]	; (800975c <pcb_new+0xc4>)
 80096b0:	f240 2265 	movw	r2, #613	; 0x265
 80096b4:	492a      	ldr	r1, [pc, #168]	; (8009760 <pcb_new+0xc8>)
 80096b6:	482b      	ldr	r0, [pc, #172]	; (8009764 <pcb_new+0xcc>)
 80096b8:	f00c fb50 	bl	8015d5c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096c6:	2b10      	cmp	r3, #16
 80096c8:	d022      	beq.n	8009710 <pcb_new+0x78>
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	d133      	bne.n	8009736 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681c      	ldr	r4, [r3, #0]
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f009 fcd8 	bl	801308a <udp_new_ip_type>
 80096da:	4603      	mov	r3, r0
 80096dc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d02a      	beq.n	800973e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b22      	cmp	r3, #34	; 0x22
 80096f0:	d104      	bne.n	80096fc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6858      	ldr	r0, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	4917      	ldr	r1, [pc, #92]	; (8009768 <pcb_new+0xd0>)
 800970a:	f009 fc45 	bl	8012f98 <udp_recv>
      }
      break;
 800970e:	e016      	b.n	800973e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681c      	ldr	r4, [r3, #0]
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	4618      	mov	r0, r3
 8009718:	f004 fbce 	bl	800deb8 <tcp_new_ip_type>
 800971c:	4603      	mov	r3, r0
 800971e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00b      	beq.n	8009742 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fece 	bl	80094d0 <setup_tcp>
      }
      break;
 8009734:	e005      	b.n	8009742 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	22fa      	movs	r2, #250	; 0xfa
 800973a:	711a      	strb	r2, [r3, #4]
      return;
 800973c:	e00a      	b.n	8009754 <pcb_new+0xbc>
      break;
 800973e:	bf00      	nop
 8009740:	e000      	b.n	8009744 <pcb_new+0xac>
      break;
 8009742:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	22ff      	movs	r2, #255	; 0xff
 8009752:	711a      	strb	r2, [r3, #4]
  }
}
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	bd90      	pop	{r4, r7, pc}
 800975a:	bf00      	nop
 800975c:	080174d4 	.word	0x080174d4
 8009760:	080176b8 	.word	0x080176b8
 8009764:	08017518 	.word	0x08017518
 8009768:	08008fad 	.word	0x08008fad

0800976c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f7ff ff85 	bl	8009698 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	4603      	mov	r3, r0
 80097a0:	6039      	str	r1, [r7, #0]
 80097a2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80097a4:	2300      	movs	r3, #0
 80097a6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80097a8:	2007      	movs	r0, #7
 80097aa:	f001 fe1f 	bl	800b3ec <memp_malloc>
 80097ae:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <netconn_alloc+0x22>
    return NULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e052      	b.n	8009860 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	79fa      	ldrb	r2, [r7, #7]
 80097c4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80097cc:	79fb      	ldrb	r3, [r7, #7]
 80097ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097d2:	2b10      	cmp	r3, #16
 80097d4:	d004      	beq.n	80097e0 <netconn_alloc+0x48>
 80097d6:	2b20      	cmp	r3, #32
 80097d8:	d105      	bne.n	80097e6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80097da:	2306      	movs	r3, #6
 80097dc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80097de:	e00a      	b.n	80097f6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80097e0:	2306      	movs	r3, #6
 80097e2:	617b      	str	r3, [r7, #20]
      break;
 80097e4:	e007      	b.n	80097f6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80097e6:	4b20      	ldr	r3, [pc, #128]	; (8009868 <netconn_alloc+0xd0>)
 80097e8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80097ec:	491f      	ldr	r1, [pc, #124]	; (800986c <netconn_alloc+0xd4>)
 80097ee:	4820      	ldr	r0, [pc, #128]	; (8009870 <netconn_alloc+0xd8>)
 80097f0:	f00c fab4 	bl	8015d5c <iprintf>
      goto free_and_return;
 80097f4:	e02f      	b.n	8009856 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3310      	adds	r3, #16
 80097fa:	6979      	ldr	r1, [r7, #20]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f00b ff41 	bl	8015684 <sys_mbox_new>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d125      	bne.n	8009854 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	330c      	adds	r3, #12
 800980c:	2100      	movs	r1, #0
 800980e:	4618      	mov	r0, r3
 8009810:	f00b ffe4 	bl	80157dc <sys_sem_new>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	3310      	adds	r3, #16
 800981e:	4618      	mov	r0, r3
 8009820:	f00b ff4a 	bl	80156b8 <sys_mbox_free>
    goto free_and_return;
 8009824:	e017      	b.n	8009856 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3314      	adds	r3, #20
 800982a:	4618      	mov	r0, r3
 800982c:	f00b ffc9 	bl	80157c2 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800983c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	683a      	ldr	r2, [r7, #0]
 8009842:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	7cfa      	ldrb	r2, [r7, #19]
 800984e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	e005      	b.n	8009860 <netconn_alloc+0xc8>
    goto free_and_return;
 8009854:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009856:	68f9      	ldr	r1, [r7, #12]
 8009858:	2007      	movs	r0, #7
 800985a:	f001 fe19 	bl	800b490 <memp_free>
  return NULL;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	080174d4 	.word	0x080174d4
 800986c:	080176d8 	.word	0x080176d8
 8009870:	08017518 	.word	0x08017518

08009874 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <netconn_free+0x1e>
 8009884:	4b1b      	ldr	r3, [pc, #108]	; (80098f4 <netconn_free+0x80>)
 8009886:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800988a:	491b      	ldr	r1, [pc, #108]	; (80098f8 <netconn_free+0x84>)
 800988c:	481b      	ldr	r0, [pc, #108]	; (80098fc <netconn_free+0x88>)
 800988e:	f00c fa65 	bl	8015d5c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	3310      	adds	r3, #16
 8009896:	4618      	mov	r0, r3
 8009898:	f00b ff82 	bl	80157a0 <sys_mbox_valid>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d006      	beq.n	80098b0 <netconn_free+0x3c>
 80098a2:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <netconn_free+0x80>)
 80098a4:	f240 3223 	movw	r2, #803	; 0x323
 80098a8:	4915      	ldr	r1, [pc, #84]	; (8009900 <netconn_free+0x8c>)
 80098aa:	4814      	ldr	r0, [pc, #80]	; (80098fc <netconn_free+0x88>)
 80098ac:	f00c fa56 	bl	8015d5c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3314      	adds	r3, #20
 80098b4:	4618      	mov	r0, r3
 80098b6:	f00b ff73 	bl	80157a0 <sys_mbox_valid>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d006      	beq.n	80098ce <netconn_free+0x5a>
 80098c0:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <netconn_free+0x80>)
 80098c2:	f240 3226 	movw	r2, #806	; 0x326
 80098c6:	490f      	ldr	r1, [pc, #60]	; (8009904 <netconn_free+0x90>)
 80098c8:	480c      	ldr	r0, [pc, #48]	; (80098fc <netconn_free+0x88>)
 80098ca:	f00c fa47 	bl	8015d5c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	330c      	adds	r3, #12
 80098d2:	4618      	mov	r0, r3
 80098d4:	f00b ffe5 	bl	80158a2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	330c      	adds	r3, #12
 80098dc:	4618      	mov	r0, r3
 80098de:	f00b fffe 	bl	80158de <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	2007      	movs	r0, #7
 80098e6:	f001 fdd3 	bl	800b490 <memp_free>
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	080174d4 	.word	0x080174d4
 80098f8:	08017700 	.word	0x08017700
 80098fc:	08017518 	.word	0x08017518
 8009900:	08017730 	.word	0x08017730
 8009904:	0801776c 	.word	0x0801776c

08009908 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3310      	adds	r3, #16
 8009914:	4618      	mov	r0, r3
 8009916:	f00b ff43 	bl	80157a0 <sys_mbox_valid>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d02f      	beq.n	8009980 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009920:	e018      	b.n	8009954 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800992a:	2b10      	cmp	r3, #16
 800992c:	d10e      	bne.n	800994c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f107 020f 	add.w	r2, r7, #15
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff fafe 	bl	8008f38 <lwip_netconn_is_err_msg>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d108      	bne.n	8009954 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	4618      	mov	r0, r3
 8009946:	f002 fc47 	bl	800c1d8 <pbuf_free>
 800994a:	e003      	b.n	8009954 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fe8e 	bl	800a670 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3310      	adds	r3, #16
 8009958:	f107 0210 	add.w	r2, r7, #16
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f00b ff07 	bl	8015772 <sys_arch_mbox_tryfetch>
 8009964:	4603      	mov	r3, r0
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800996a:	d1da      	bne.n	8009922 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3310      	adds	r3, #16
 8009970:	4618      	mov	r0, r3
 8009972:	f00b fea1 	bl	80156b8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3310      	adds	r3, #16
 800997a:	4618      	mov	r0, r3
 800997c:	f00b ff21 	bl	80157c2 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3314      	adds	r3, #20
 8009984:	4618      	mov	r0, r3
 8009986:	f00b ff0b 	bl	80157a0 <sys_mbox_valid>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d034      	beq.n	80099fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009990:	e01d      	b.n	80099ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f107 020e 	add.w	r2, r7, #14
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7ff facc 	bl	8008f38 <lwip_netconn_is_err_msg>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d113      	bne.n	80099ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80099aa:	6978      	ldr	r0, [r7, #20]
 80099ac:	f7ff ffac 	bl	8009908 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d007      	beq.n	80099c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	4618      	mov	r0, r3
 80099be:	f003 f9fb 	bl	800cdb8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2200      	movs	r2, #0
 80099c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80099c8:	6978      	ldr	r0, [r7, #20]
 80099ca:	f7ff ff53 	bl	8009874 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3314      	adds	r3, #20
 80099d2:	f107 0210 	add.w	r2, r7, #16
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f00b feca 	bl	8015772 <sys_arch_mbox_tryfetch>
 80099de:	4603      	mov	r3, r0
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e4:	d1d5      	bne.n	8009992 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	3314      	adds	r3, #20
 80099ea:	4618      	mov	r0, r3
 80099ec:	f00b fe64 	bl	80156b8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3314      	adds	r3, #20
 80099f4:	4618      	mov	r0, r3
 80099f6:	f00b fee4 	bl	80157c2 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80099fa:	bf00      	nop
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d106      	bne.n	8009a28 <lwip_netconn_do_close_internal+0x24>
 8009a1a:	4ba1      	ldr	r3, [pc, #644]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009a1c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009a20:	49a0      	ldr	r1, [pc, #640]	; (8009ca4 <lwip_netconn_do_close_internal+0x2a0>)
 8009a22:	48a1      	ldr	r0, [pc, #644]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009a24:	f00c f99a 	bl	8015d5c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a30:	2b10      	cmp	r3, #16
 8009a32:	d006      	beq.n	8009a42 <lwip_netconn_do_close_internal+0x3e>
 8009a34:	4b9a      	ldr	r3, [pc, #616]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009a36:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009a3a:	499c      	ldr	r1, [pc, #624]	; (8009cac <lwip_netconn_do_close_internal+0x2a8>)
 8009a3c:	489a      	ldr	r0, [pc, #616]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009a3e:	f00c f98d 	bl	8015d5c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	785b      	ldrb	r3, [r3, #1]
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d006      	beq.n	8009a58 <lwip_netconn_do_close_internal+0x54>
 8009a4a:	4b95      	ldr	r3, [pc, #596]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009a4c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009a50:	4997      	ldr	r1, [pc, #604]	; (8009cb0 <lwip_netconn_do_close_internal+0x2ac>)
 8009a52:	4895      	ldr	r0, [pc, #596]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009a54:	f00c f982 	bl	8015d5c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d106      	bne.n	8009a6e <lwip_netconn_do_close_internal+0x6a>
 8009a60:	4b8f      	ldr	r3, [pc, #572]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009a62:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009a66:	4993      	ldr	r1, [pc, #588]	; (8009cb4 <lwip_netconn_do_close_internal+0x2b0>)
 8009a68:	488f      	ldr	r0, [pc, #572]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009a6a:	f00c f977 	bl	8015d5c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d106      	bne.n	8009a84 <lwip_netconn_do_close_internal+0x80>
 8009a76:	4b8a      	ldr	r3, [pc, #552]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009a78:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009a7c:	498e      	ldr	r1, [pc, #568]	; (8009cb8 <lwip_netconn_do_close_internal+0x2b4>)
 8009a7e:	488a      	ldr	r0, [pc, #552]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009a80:	f00c f96c 	bl	8015d5c <iprintf>

  tpcb = conn->pcb.tcp;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	7a1b      	ldrb	r3, [r3, #8]
 8009a90:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009a9a:	7bfb      	ldrb	r3, [r7, #15]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d102      	bne.n	8009aae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	75bb      	strb	r3, [r7, #22]
 8009aac:	e01f      	b.n	8009aee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00e      	beq.n	8009ad2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009ab8:	2b05      	cmp	r3, #5
 8009aba:	d007      	beq.n	8009acc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009ac0:	2b06      	cmp	r3, #6
 8009ac2:	d003      	beq.n	8009acc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d102      	bne.n	8009ad2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009acc:	2301      	movs	r3, #1
 8009ace:	75bb      	strb	r3, [r7, #22]
 8009ad0:	e00d      	b.n	8009aee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009ad2:	7b7b      	ldrb	r3, [r7, #13]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d008      	beq.n	8009aea <lwip_netconn_do_close_internal+0xe6>
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	8b5b      	ldrh	r3, [r3, #26]
 8009adc:	f003 0310 	and.w	r3, r3, #16
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	75bb      	strb	r3, [r7, #22]
 8009ae8:	e001      	b.n	8009aee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009aee:	7dbb      	ldrb	r3, [r7, #22]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009af4:	2100      	movs	r1, #0
 8009af6:	6938      	ldr	r0, [r7, #16]
 8009af8:	f004 f9ec 	bl	800ded4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	7d1b      	ldrb	r3, [r3, #20]
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d104      	bne.n	8009b0e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009b04:	2100      	movs	r1, #0
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f004 fa5c 	bl	800dfc4 <tcp_accept>
 8009b0c:	e01d      	b.n	8009b4a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d007      	beq.n	8009b24 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009b14:	2100      	movs	r1, #0
 8009b16:	6938      	ldr	r0, [r7, #16]
 8009b18:	f004 f9ee 	bl	800def8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	6938      	ldr	r0, [r7, #16]
 8009b20:	f004 fa50 	bl	800dfc4 <tcp_accept>
    }
    if (shut_tx) {
 8009b24:	7b7b      	ldrb	r3, [r7, #13]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6938      	ldr	r0, [r7, #16]
 8009b2e:	f004 fa05 	bl	800df3c <tcp_sent>
    }
    if (shut_close) {
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	6938      	ldr	r0, [r7, #16]
 8009b3e:	f004 fa59 	bl	800dff4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009b42:	2100      	movs	r1, #0
 8009b44:	6938      	ldr	r0, [r7, #16]
 8009b46:	f004 fa1b 	bl	800df80 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009b4a:	7dbb      	ldrb	r3, [r7, #22]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009b50:	6938      	ldr	r0, [r7, #16]
 8009b52:	f002 ffeb 	bl	800cb2c <tcp_close>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]
 8009b5a:	e007      	b.n	8009b6c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	7b7a      	ldrb	r2, [r7, #13]
 8009b60:	4619      	mov	r1, r3
 8009b62:	6938      	ldr	r0, [r7, #16]
 8009b64:	f003 f80e 	bl	800cb84 <tcp_shutdown>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009b74:	2301      	movs	r3, #1
 8009b76:	757b      	strb	r3, [r7, #21]
 8009b78:	e016      	b.n	8009ba8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b82:	d10f      	bne.n	8009ba4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	7a5b      	ldrb	r3, [r3, #9]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10c      	bne.n	8009ba8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009b92:	7dbb      	ldrb	r3, [r7, #22]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d007      	beq.n	8009ba8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009b98:	6938      	ldr	r0, [r7, #16]
 8009b9a:	f003 f90d 	bl	800cdb8 <tcp_abort>
          err = ERR_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	75fb      	strb	r3, [r7, #23]
 8009ba2:	e001      	b.n	8009ba8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009ba8:	7d7b      	ldrb	r3, [r7, #21]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d044      	beq.n	8009c38 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a1b      	ldr	r3, [r3, #32]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	7dfa      	ldrb	r2, [r7, #23]
 8009bbe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d129      	bne.n	8009c28 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009bd4:	7dbb      	ldrb	r3, [r7, #22]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d005      	beq.n	8009bf4 <lwip_netconn_do_close_internal+0x1f0>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2200      	movs	r2, #0
 8009bee:	2104      	movs	r1, #4
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	4798      	blx	r3
      }
      if (shut_rx) {
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d009      	beq.n	8009c0e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d005      	beq.n	8009c0e <lwip_netconn_do_close_internal+0x20a>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	2200      	movs	r2, #0
 8009c08:	2100      	movs	r1, #0
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	4798      	blx	r3
      }
      if (shut_tx) {
 8009c0e:	7b7b      	ldrb	r3, [r7, #13]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d005      	beq.n	8009c28 <lwip_netconn_do_close_internal+0x224>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2200      	movs	r2, #0
 8009c22:	2102      	movs	r1, #2
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009c2e:	68b8      	ldr	r0, [r7, #8]
 8009c30:	f00b fe2a 	bl	8015888 <sys_sem_signal>
    }
    return ERR_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	e02e      	b.n	8009c96 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009c38:	7d7b      	ldrb	r3, [r7, #21]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d11e      	bne.n	8009c7c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	7d1b      	ldrb	r3, [r3, #20]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d106      	bne.n	8009c54 <lwip_netconn_do_close_internal+0x250>
 8009c46:	4b16      	ldr	r3, [pc, #88]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009c48:	f240 4241 	movw	r2, #1089	; 0x441
 8009c4c:	491b      	ldr	r1, [pc, #108]	; (8009cbc <lwip_netconn_do_close_internal+0x2b8>)
 8009c4e:	4816      	ldr	r0, [pc, #88]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009c50:	f00c f884 	bl	8015d5c <iprintf>
    if (shut_tx) {
 8009c54:	7b7b      	ldrb	r3, [r7, #13]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009c5a:	4919      	ldr	r1, [pc, #100]	; (8009cc0 <lwip_netconn_do_close_internal+0x2bc>)
 8009c5c:	6938      	ldr	r0, [r7, #16]
 8009c5e:	f004 f96d 	bl	800df3c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009c62:	2201      	movs	r2, #1
 8009c64:	4917      	ldr	r1, [pc, #92]	; (8009cc4 <lwip_netconn_do_close_internal+0x2c0>)
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f004 f9c4 	bl	800dff4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009c6c:	4916      	ldr	r1, [pc, #88]	; (8009cc8 <lwip_netconn_do_close_internal+0x2c4>)
 8009c6e:	6938      	ldr	r0, [r7, #16]
 8009c70:	f004 f986 	bl	800df80 <tcp_err>
    tcp_arg(tpcb, conn);
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	6938      	ldr	r0, [r7, #16]
 8009c78:	f004 f92c 	bl	800ded4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d106      	bne.n	8009c92 <lwip_netconn_do_close_internal+0x28e>
 8009c84:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <lwip_netconn_do_close_internal+0x29c>)
 8009c86:	f240 424d 	movw	r2, #1101	; 0x44d
 8009c8a:	4910      	ldr	r1, [pc, #64]	; (8009ccc <lwip_netconn_do_close_internal+0x2c8>)
 8009c8c:	4806      	ldr	r0, [pc, #24]	; (8009ca8 <lwip_netconn_do_close_internal+0x2a4>)
 8009c8e:	f00c f865 	bl	8015d5c <iprintf>
  return err;
 8009c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	080174d4 	.word	0x080174d4
 8009ca4:	080177a8 	.word	0x080177a8
 8009ca8:	08017518 	.word	0x08017518
 8009cac:	080177b8 	.word	0x080177b8
 8009cb0:	080177d8 	.word	0x080177d8
 8009cb4:	080177fc 	.word	0x080177fc
 8009cb8:	0801763c 	.word	0x0801763c
 8009cbc:	08017810 	.word	0x08017810
 8009cc0:	0800927d 	.word	0x0800927d
 8009cc4:	080091b5 	.word	0x080091b5
 8009cc8:	08009325 	.word	0x08009325
 8009ccc:	08017834 	.word	0x08017834

08009cd0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	785b      	ldrb	r3, [r3, #1]
 8009ce2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009ce4:	7afb      	ldrb	r3, [r7, #11]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00d      	beq.n	8009d06 <lwip_netconn_do_delconn+0x36>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf4:	2b10      	cmp	r3, #16
 8009cf6:	d006      	beq.n	8009d06 <lwip_netconn_do_delconn+0x36>
 8009cf8:	4b60      	ldr	r3, [pc, #384]	; (8009e7c <lwip_netconn_do_delconn+0x1ac>)
 8009cfa:	f240 425e 	movw	r2, #1118	; 0x45e
 8009cfe:	4960      	ldr	r1, [pc, #384]	; (8009e80 <lwip_netconn_do_delconn+0x1b0>)
 8009d00:	4860      	ldr	r0, [pc, #384]	; (8009e84 <lwip_netconn_do_delconn+0x1b4>)
 8009d02:	f00c f82b 	bl	8015d5c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d005      	beq.n	8009d18 <lwip_netconn_do_delconn+0x48>
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d002      	beq.n	8009d18 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009d12:	7afb      	ldrb	r3, [r7, #11]
 8009d14:	2b03      	cmp	r3, #3
 8009d16:	d109      	bne.n	8009d2c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d10a      	bne.n	8009d34 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	7f1b      	ldrb	r3, [r3, #28]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d103      	bne.n	8009d34 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	22fb      	movs	r2, #251	; 0xfb
 8009d30:	711a      	strb	r2, [r3, #4]
 8009d32:	e097      	b.n	8009e64 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d10d      	bne.n	8009d56 <lwip_netconn_do_delconn+0x86>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	7f1b      	ldrb	r3, [r3, #28]
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d106      	bne.n	8009d56 <lwip_netconn_do_delconn+0x86>
 8009d48:	4b4c      	ldr	r3, [pc, #304]	; (8009e7c <lwip_netconn_do_delconn+0x1ac>)
 8009d4a:	f240 427a 	movw	r2, #1146	; 0x47a
 8009d4e:	494e      	ldr	r1, [pc, #312]	; (8009e88 <lwip_netconn_do_delconn+0x1b8>)
 8009d50:	484c      	ldr	r0, [pc, #304]	; (8009e84 <lwip_netconn_do_delconn+0x1b4>)
 8009d52:	f00c f803 	bl	8015d5c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fdd1 	bl	8009908 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d05f      	beq.n	8009e30 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d7a:	2b10      	cmp	r3, #16
 8009d7c:	d00d      	beq.n	8009d9a <lwip_netconn_do_delconn+0xca>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	d151      	bne.n	8009e26 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f009 f920 	bl	8012fd8 <udp_remove>
          break;
 8009d98:	e046      	b.n	8009e28 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d006      	beq.n	8009db2 <lwip_netconn_do_delconn+0xe2>
 8009da4:	4b35      	ldr	r3, [pc, #212]	; (8009e7c <lwip_netconn_do_delconn+0x1ac>)
 8009da6:	f240 4294 	movw	r2, #1172	; 0x494
 8009daa:	4938      	ldr	r1, [pc, #224]	; (8009e8c <lwip_netconn_do_delconn+0x1bc>)
 8009dac:	4835      	ldr	r0, [pc, #212]	; (8009e84 <lwip_netconn_do_delconn+0x1b4>)
 8009dae:	f00b ffd5 	bl	8015d5c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2204      	movs	r2, #4
 8009db8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2203      	movs	r2, #3
 8009dbe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2100      	movs	r1, #0
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fe18 	bl	8009a04 <lwip_netconn_do_close_internal>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d04b      	beq.n	8009e72 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d006      	beq.n	8009df2 <lwip_netconn_do_delconn+0x122>
 8009de4:	4b25      	ldr	r3, [pc, #148]	; (8009e7c <lwip_netconn_do_delconn+0x1ac>)
 8009de6:	f240 429a 	movw	r2, #1178	; 0x49a
 8009dea:	4929      	ldr	r1, [pc, #164]	; (8009e90 <lwip_netconn_do_delconn+0x1c0>)
 8009dec:	4825      	ldr	r0, [pc, #148]	; (8009e84 <lwip_netconn_do_delconn+0x1b4>)
 8009dee:	f00b ffb5 	bl	8015d5c <iprintf>
            UNLOCK_TCPIP_CORE();
 8009df2:	4828      	ldr	r0, [pc, #160]	; (8009e94 <lwip_netconn_do_delconn+0x1c4>)
 8009df4:	f00b fdb1 	bl	801595a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	330c      	adds	r3, #12
 8009dfe:	2100      	movs	r1, #0
 8009e00:	4618      	mov	r0, r3
 8009e02:	f00b fd10 	bl	8015826 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009e06:	4823      	ldr	r0, [pc, #140]	; (8009e94 <lwip_netconn_do_delconn+0x1c4>)
 8009e08:	f00b fd98 	bl	801593c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d02d      	beq.n	8009e72 <lwip_netconn_do_delconn+0x1a2>
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <lwip_netconn_do_delconn+0x1ac>)
 8009e18:	f240 429e 	movw	r2, #1182	; 0x49e
 8009e1c:	491c      	ldr	r1, [pc, #112]	; (8009e90 <lwip_netconn_do_delconn+0x1c0>)
 8009e1e:	4819      	ldr	r0, [pc, #100]	; (8009e84 <lwip_netconn_do_delconn+0x1b4>)
 8009e20:	f00b ff9c 	bl	8015d5c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009e24:	e025      	b.n	8009e72 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009e26:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <lwip_netconn_do_delconn+0x17a>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	6810      	ldr	r0, [r2, #0]
 8009e44:	2200      	movs	r2, #0
 8009e46:	2100      	movs	r1, #0
 8009e48:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <lwip_netconn_do_delconn+0x194>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	6810      	ldr	r0, [r2, #0]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2102      	movs	r1, #2
 8009e62:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f00b fd26 	bl	80158bc <sys_sem_valid>
 8009e70:	e000      	b.n	8009e74 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009e72:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	080174d4 	.word	0x080174d4
 8009e80:	08017844 	.word	0x08017844
 8009e84:	08017518 	.word	0x08017518
 8009e88:	08017858 	.word	0x08017858
 8009e8c:	08017878 	.word	0x08017878
 8009e90:	08017894 	.word	0x08017894
 8009e94:	20007f84 	.word	0x20007f84

08009e98 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d025      	beq.n	8009efa <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eb8:	2b10      	cmp	r3, #16
 8009eba:	d00e      	beq.n	8009eda <lwip_netconn_do_bind+0x42>
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	d119      	bne.n	8009ef4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6858      	ldr	r0, [r3, #4]
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	6899      	ldr	r1, [r3, #8]
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	899b      	ldrh	r3, [r3, #12]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f008 ffda 	bl	8012e88 <udp_bind>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	73fb      	strb	r3, [r7, #15]
        break;
 8009ed8:	e011      	b.n	8009efe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6858      	ldr	r0, [r3, #4]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6899      	ldr	r1, [r3, #8]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	899b      	ldrh	r3, [r3, #12]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	f002 ff71 	bl	800cdd0 <tcp_bind>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8009ef2:	e004      	b.n	8009efe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009ef4:	23fa      	movs	r3, #250	; 0xfa
 8009ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8009ef8:	e001      	b.n	8009efe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009efa:	23fa      	movs	r3, #250	; 0xfa
 8009efc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009f04:	bf00      	nop
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d07f      	beq.n	800a022 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f2c:	2b10      	cmp	r3, #16
 8009f2e:	d175      	bne.n	800a01c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d165      	bne.n	800a006 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	7d1b      	ldrb	r3, [r3, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009f46:	23fa      	movs	r3, #250	; 0xfa
 8009f48:	72fb      	strb	r3, [r7, #11]
 8009f4a:	e06c      	b.n	800a026 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009f4c:	23ff      	movs	r3, #255	; 0xff
 8009f4e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f107 020b 	add.w	r2, r7, #11
 8009f5a:	7cf9      	ldrb	r1, [r7, #19]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f002 ffef 	bl	800cf40 <tcp_listen_with_backlog_and_err>
 8009f62:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d05d      	beq.n	800a026 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3310      	adds	r3, #16
 8009f70:	4618      	mov	r0, r3
 8009f72:	f00b fc15 	bl	80157a0 <sys_mbox_valid>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3310      	adds	r3, #16
 8009f82:	4618      	mov	r0, r3
 8009f84:	f00b fb98 	bl	80156b8 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3310      	adds	r3, #16
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f00b fc17 	bl	80157c2 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f00b fbfe 	bl	80157a0 <sys_mbox_valid>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d108      	bne.n	8009fbc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3314      	adds	r3, #20
 8009fb0:	2106      	movs	r1, #6
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f00b fb66 	bl	8015684 <sys_mbox_new>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009fbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d118      	bne.n	8009ff6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f003 ff77 	bl	800ded4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	4912      	ldr	r1, [pc, #72]	; (800a038 <lwip_netconn_do_listen+0x12c>)
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f003 ffe8 	bl	800dfc4 <tcp_accept>
 8009ff4:	e017      	b.n	800a026 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f002 fd98 	bl	800cb2c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2200      	movs	r2, #0
 800a002:	605a      	str	r2, [r3, #4]
 800a004:	e00f      	b.n	800a026 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d102      	bne.n	800a016 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	72fb      	strb	r3, [r7, #11]
 800a014:	e007      	b.n	800a026 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a016:	23f5      	movs	r3, #245	; 0xf5
 800a018:	72fb      	strb	r3, [r7, #11]
 800a01a:	e004      	b.n	800a026 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a01c:	23f0      	movs	r3, #240	; 0xf0
 800a01e:	72fb      	strb	r3, [r7, #11]
 800a020:	e001      	b.n	800a026 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a022:	23f5      	movs	r3, #245	; 0xf5
 800a024:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a026:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a02e:	bf00      	nop
 800a030:	3718      	adds	r7, #24
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	08009521 	.word	0x08009521

0800a03c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	2200      	movs	r2, #0
 800a04c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d022      	beq.n	800a09e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a062:	2b10      	cmp	r3, #16
 800a064:	d11b      	bne.n	800a09e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a072:	d202      	bcs.n	800a07a <lwip_netconn_do_recv+0x3e>
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	b29b      	uxth	r3, r3
 800a078:	e001      	b.n	800a07e <lwip_netconn_do_recv+0x42>
 800a07a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a07e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	89fa      	ldrh	r2, [r7, #14]
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f003 f85c 	bl	800d148 <tcp_recved>
        remaining -= recved;
 800a090:	89fb      	ldrh	r3, [r7, #14]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e6      	bne.n	800a06c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a09e:	bf00      	nop
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b088      	sub	sp, #32
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d106      	bne.n	800a0cc <lwip_netconn_do_writemore+0x24>
 800a0be:	4b96      	ldr	r3, [pc, #600]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a0c0:	f240 6273 	movw	r2, #1651	; 0x673
 800a0c4:	4995      	ldr	r1, [pc, #596]	; (800a31c <lwip_netconn_do_writemore+0x274>)
 800a0c6:	4896      	ldr	r0, [pc, #600]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a0c8:	f00b fe48 	bl	8015d5c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	785b      	ldrb	r3, [r3, #1]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d006      	beq.n	800a0e2 <lwip_netconn_do_writemore+0x3a>
 800a0d4:	4b90      	ldr	r3, [pc, #576]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a0d6:	f240 6274 	movw	r2, #1652	; 0x674
 800a0da:	4992      	ldr	r1, [pc, #584]	; (800a324 <lwip_netconn_do_writemore+0x27c>)
 800a0dc:	4890      	ldr	r0, [pc, #576]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a0de:	f00b fe3d 	bl	8015d5c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <lwip_netconn_do_writemore+0x50>
 800a0ea:	4b8b      	ldr	r3, [pc, #556]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a0ec:	f240 6275 	movw	r2, #1653	; 0x675
 800a0f0:	498d      	ldr	r1, [pc, #564]	; (800a328 <lwip_netconn_do_writemore+0x280>)
 800a0f2:	488b      	ldr	r0, [pc, #556]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a0f4:	f00b fe32 	bl	8015d5c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d106      	bne.n	800a10e <lwip_netconn_do_writemore+0x66>
 800a100:	4b85      	ldr	r3, [pc, #532]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a102:	f240 6276 	movw	r2, #1654	; 0x676
 800a106:	4989      	ldr	r1, [pc, #548]	; (800a32c <lwip_netconn_do_writemore+0x284>)
 800a108:	4885      	ldr	r0, [pc, #532]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a10a:	f00b fe27 	bl	8015d5c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d306      	bcc.n	800a12c <lwip_netconn_do_writemore+0x84>
 800a11e:	4b7e      	ldr	r3, [pc, #504]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a120:	f240 6277 	movw	r2, #1655	; 0x677
 800a124:	4982      	ldr	r1, [pc, #520]	; (800a330 <lwip_netconn_do_writemore+0x288>)
 800a126:	487e      	ldr	r0, [pc, #504]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a128:	f00b fe18 	bl	8015d5c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	899b      	ldrh	r3, [r3, #12]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <lwip_netconn_do_writemore+0x9c>
 800a136:	4b78      	ldr	r3, [pc, #480]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a138:	f240 6279 	movw	r2, #1657	; 0x679
 800a13c:	497d      	ldr	r1, [pc, #500]	; (800a334 <lwip_netconn_do_writemore+0x28c>)
 800a13e:	4878      	ldr	r0, [pc, #480]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a140:	f00b fe0c 	bl	8015d5c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	7f1b      	ldrb	r3, [r3, #28]
 800a14a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	7f1b      	ldrb	r3, [r3, #28]
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b00      	cmp	r3, #0
 800a156:	d104      	bne.n	800a162 <lwip_netconn_do_writemore+0xba>
 800a158:	7ebb      	ldrb	r3, [r7, #26]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <lwip_netconn_do_writemore+0xbe>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <lwip_netconn_do_writemore+0xc0>
 800a166:	2300      	movs	r3, #0
 800a168:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a1b      	ldr	r3, [r3, #32]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	4413      	add	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a194:	d307      	bcc.n	800a1a6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a19a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a19c:	7ebb      	ldrb	r3, [r7, #26]
 800a19e:	f043 0302 	orr.w	r3, r3, #2
 800a1a2:	76bb      	strb	r3, [r7, #26]
 800a1a4:	e001      	b.n	800a1aa <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1b2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a1b4:	89fa      	ldrh	r2, [r7, #14]
 800a1b6:	8bbb      	ldrh	r3, [r7, #28]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d216      	bcs.n	800a1ea <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a1bc:	89fb      	ldrh	r3, [r7, #14]
 800a1be:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a1c0:	7e3b      	ldrb	r3, [r7, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00d      	beq.n	800a1e2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a1c6:	8bbb      	ldrh	r3, [r7, #28]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10e      	bne.n	800a1ea <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d102      	bne.n	800a1dc <lwip_netconn_do_writemore+0x134>
 800a1d6:	f06f 0306 	mvn.w	r3, #6
 800a1da:	e000      	b.n	800a1de <lwip_netconn_do_writemore+0x136>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a1e0:	e07d      	b.n	800a2de <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a1e2:	7ebb      	ldrb	r3, [r7, #26]
 800a1e4:	f043 0302 	orr.w	r3, r3, #2
 800a1e8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a1b      	ldr	r3, [r3, #32]
 800a1ee:	691a      	ldr	r2, [r3, #16]
 800a1f0:	8bbb      	ldrh	r3, [r7, #28]
 800a1f2:	441a      	add	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d906      	bls.n	800a20e <lwip_netconn_do_writemore+0x166>
 800a200:	4b45      	ldr	r3, [pc, #276]	; (800a318 <lwip_netconn_do_writemore+0x270>)
 800a202:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a206:	494c      	ldr	r1, [pc, #304]	; (800a338 <lwip_netconn_do_writemore+0x290>)
 800a208:	4845      	ldr	r0, [pc, #276]	; (800a320 <lwip_netconn_do_writemore+0x278>)
 800a20a:	f00b fda7 	bl	8015d5c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a20e:	8bbb      	ldrh	r3, [r7, #28]
 800a210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <lwip_netconn_do_writemore+0x178>
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a21e:	d209      	bcs.n	800a234 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a224:	8bba      	ldrh	r2, [r7, #28]
 800a226:	429a      	cmp	r2, r3
 800a228:	d10b      	bne.n	800a242 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6a1b      	ldr	r3, [r3, #32]
 800a22e:	899b      	ldrh	r3, [r3, #12]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d906      	bls.n	800a242 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a234:	2301      	movs	r3, #1
 800a236:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a238:	7ebb      	ldrb	r3, [r7, #26]
 800a23a:	f043 0302 	orr.w	r3, r3, #2
 800a23e:	76bb      	strb	r3, [r7, #26]
 800a240:	e001      	b.n	800a246 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6858      	ldr	r0, [r3, #4]
 800a24a:	7ebb      	ldrb	r3, [r7, #26]
 800a24c:	8bba      	ldrh	r2, [r7, #28]
 800a24e:	6979      	ldr	r1, [r7, #20]
 800a250:	f006 fd7e 	bl	8010d50 <tcp_write>
 800a254:	4603      	mov	r3, r0
 800a256:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a258:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d12c      	bne.n	800a2ba <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	6999      	ldr	r1, [r3, #24]
 800a266:	8bba      	ldrh	r2, [r7, #28]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a1b      	ldr	r3, [r3, #32]
 800a26c:	440a      	add	r2, r1
 800a26e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	6919      	ldr	r1, [r3, #16]
 800a276:	8bba      	ldrh	r2, [r7, #28]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a1b      	ldr	r3, [r3, #32]
 800a27c:	440a      	add	r2, r1
 800a27e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a1b      	ldr	r3, [r3, #32]
 800a284:	691a      	ldr	r2, [r3, #16]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a1b      	ldr	r3, [r3, #32]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d113      	bne.n	800a2ba <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1b      	ldr	r3, [r3, #32]
 800a296:	899a      	ldrh	r2, [r3, #12]
 800a298:	3a01      	subs	r2, #1
 800a29a:	b292      	uxth	r2, r2
 800a29c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	899b      	ldrh	r3, [r3, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d008      	beq.n	800a2ba <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	3208      	adds	r2, #8
 800a2b0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a2ba:	7e7b      	ldrb	r3, [r7, #25]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d004      	beq.n	800a2ca <lwip_netconn_do_writemore+0x222>
 800a2c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f43f af50 	beq.w	800a16a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a2ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d004      	beq.n	800a2dc <lwip_netconn_do_writemore+0x234>
 800a2d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2da:	d146      	bne.n	800a36a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800a2dc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a2de:	7e3b      	ldrb	r3, [r7, #24]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d02b      	beq.n	800a33c <lwip_netconn_do_writemore+0x294>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	699a      	ldr	r2, [r3, #24]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d223      	bcs.n	800a33c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <lwip_netconn_do_writemore+0x260>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2200      	movs	r2, #0
 800a302:	2103      	movs	r1, #3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7f1b      	ldrb	r3, [r3, #28]
 800a30c:	f043 0310 	orr.w	r3, r3, #16
 800a310:	b2da      	uxtb	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	771a      	strb	r2, [r3, #28]
 800a316:	e028      	b.n	800a36a <lwip_netconn_do_writemore+0x2c2>
 800a318:	080174d4 	.word	0x080174d4
 800a31c:	0801762c 	.word	0x0801762c
 800a320:	08017518 	.word	0x08017518
 800a324:	08017934 	.word	0x08017934
 800a328:	0801763c 	.word	0x0801763c
 800a32c:	08017954 	.word	0x08017954
 800a330:	0801796c 	.word	0x0801796c
 800a334:	080179ac 	.word	0x080179ac
 800a338:	080179d4 	.word	0x080179d4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a344:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a348:	d305      	bcc.n	800a356 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a352:	2b04      	cmp	r3, #4
 800a354:	d909      	bls.n	800a36a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d005      	beq.n	800a36a <lwip_netconn_do_writemore+0x2c2>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	2200      	movs	r2, #0
 800a364:	2103      	movs	r1, #3
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a36a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d11d      	bne.n	800a3ae <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	699a      	ldr	r2, [r3, #24]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d002      	beq.n	800a388 <lwip_netconn_do_writemore+0x2e0>
 800a382:	7e3b      	ldrb	r3, [r7, #24]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a388:	2301      	movs	r3, #1
 800a38a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	f007 fac7 	bl	8011924 <tcp_output>
 800a396:	4603      	mov	r3, r0
 800a398:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a39a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a39e:	f113 0f04 	cmn.w	r3, #4
 800a3a2:	d12c      	bne.n	800a3fe <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a3a4:	7b3b      	ldrb	r3, [r7, #12]
 800a3a6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	76fb      	strb	r3, [r7, #27]
 800a3ac:	e027      	b.n	800a3fe <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800a3ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b6:	d120      	bne.n	800a3fa <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f007 fab1 	bl	8011924 <tcp_output>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a3c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a3ca:	f113 0f04 	cmn.w	r3, #4
 800a3ce:	d104      	bne.n	800a3da <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a3d0:	7b7b      	ldrb	r3, [r7, #13]
 800a3d2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	76fb      	strb	r3, [r7, #27]
 800a3d8:	e011      	b.n	800a3fe <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800a3da:	7e3b      	ldrb	r3, [r7, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00e      	beq.n	800a3fe <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	699b      	ldr	r3, [r3, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <lwip_netconn_do_writemore+0x348>
 800a3ea:	f06f 0306 	mvn.w	r3, #6
 800a3ee:	e000      	b.n	800a3f2 <lwip_netconn_do_writemore+0x34a>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	76fb      	strb	r3, [r7, #27]
 800a3f8:	e001      	b.n	800a3fe <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a3fe:	7efb      	ldrb	r3, [r7, #27]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d015      	beq.n	800a430 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	330c      	adds	r3, #12
 800a40c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a1b      	ldr	r3, [r3, #32]
 800a412:	7ffa      	ldrb	r2, [r7, #31]
 800a414:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a422:	78fb      	ldrb	r3, [r7, #3]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d006      	beq.n	800a436 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a428:	68b8      	ldr	r0, [r7, #8]
 800a42a:	f00b fa2d 	bl	8015888 <sys_sem_signal>
 800a42e:	e002      	b.n	800a436 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a434:	e000      	b.n	800a438 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fd20 	bl	8008e96 <netconn_err>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d166      	bne.n	800a530 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a46c:	2b10      	cmp	r3, #16
 800a46e:	d15d      	bne.n	800a52c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	785b      	ldrb	r3, [r3, #1]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a47a:	23fb      	movs	r3, #251	; 0xfb
 800a47c:	73fb      	strb	r3, [r7, #15]
 800a47e:	e057      	b.n	800a530 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d04d      	beq.n	800a526 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2201      	movs	r2, #1
 800a490:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d006      	beq.n	800a4aa <lwip_netconn_do_write+0x6a>
 800a49c:	4b28      	ldr	r3, [pc, #160]	; (800a540 <lwip_netconn_do_write+0x100>)
 800a49e:	f240 7223 	movw	r2, #1827	; 0x723
 800a4a2:	4928      	ldr	r1, [pc, #160]	; (800a544 <lwip_netconn_do_write+0x104>)
 800a4a4:	4828      	ldr	r0, [pc, #160]	; (800a548 <lwip_netconn_do_write+0x108>)
 800a4a6:	f00b fc59 	bl	8015d5c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d106      	bne.n	800a4c0 <lwip_netconn_do_write+0x80>
 800a4b2:	4b23      	ldr	r3, [pc, #140]	; (800a540 <lwip_netconn_do_write+0x100>)
 800a4b4:	f240 7224 	movw	r2, #1828	; 0x724
 800a4b8:	4924      	ldr	r1, [pc, #144]	; (800a54c <lwip_netconn_do_write+0x10c>)
 800a4ba:	4823      	ldr	r0, [pc, #140]	; (800a548 <lwip_netconn_do_write+0x108>)
 800a4bc:	f00b fc4e 	bl	8015d5c <iprintf>
        msg->conn->current_msg = msg;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fdea 	bl	800a0a8 <lwip_netconn_do_writemore>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d02e      	beq.n	800a538 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d006      	beq.n	800a4f2 <lwip_netconn_do_write+0xb2>
 800a4e4:	4b16      	ldr	r3, [pc, #88]	; (800a540 <lwip_netconn_do_write+0x100>)
 800a4e6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a4ea:	4919      	ldr	r1, [pc, #100]	; (800a550 <lwip_netconn_do_write+0x110>)
 800a4ec:	4816      	ldr	r0, [pc, #88]	; (800a548 <lwip_netconn_do_write+0x108>)
 800a4ee:	f00b fc35 	bl	8015d5c <iprintf>
          UNLOCK_TCPIP_CORE();
 800a4f2:	4818      	ldr	r0, [pc, #96]	; (800a554 <lwip_netconn_do_write+0x114>)
 800a4f4:	f00b fa31 	bl	801595a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	330c      	adds	r3, #12
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f00b f990 	bl	8015826 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a506:	4813      	ldr	r0, [pc, #76]	; (800a554 <lwip_netconn_do_write+0x114>)
 800a508:	f00b fa18 	bl	801593c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d110      	bne.n	800a538 <lwip_netconn_do_write+0xf8>
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <lwip_netconn_do_write+0x100>)
 800a518:	f240 722c 	movw	r2, #1836	; 0x72c
 800a51c:	490c      	ldr	r1, [pc, #48]	; (800a550 <lwip_netconn_do_write+0x110>)
 800a51e:	480a      	ldr	r0, [pc, #40]	; (800a548 <lwip_netconn_do_write+0x108>)
 800a520:	f00b fc1c 	bl	8015d5c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a524:	e008      	b.n	800a538 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a526:	23f5      	movs	r3, #245	; 0xf5
 800a528:	73fb      	strb	r3, [r7, #15]
 800a52a:	e001      	b.n	800a530 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a52c:	23fa      	movs	r3, #250	; 0xfa
 800a52e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	7bfa      	ldrb	r2, [r7, #15]
 800a534:	711a      	strb	r2, [r3, #4]
 800a536:	e000      	b.n	800a53a <lwip_netconn_do_write+0xfa>
        return;
 800a538:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	080174d4 	.word	0x080174d4
 800a544:	08017878 	.word	0x08017878
 800a548:	08017518 	.word	0x08017518
 800a54c:	08017a00 	.word	0x08017a00
 800a550:	08017894 	.word	0x08017894
 800a554:	20007f84 	.word	0x20007f84

0800a558 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d069      	beq.n	800a64a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a580:	2b10      	cmp	r3, #16
 800a582:	d162      	bne.n	800a64a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d002      	beq.n	800a592 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a58c:	7afb      	ldrb	r3, [r7, #11]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d05b      	beq.n	800a64a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a592:	7afb      	ldrb	r3, [r7, #11]
 800a594:	2b03      	cmp	r3, #3
 800a596:	d103      	bne.n	800a5a0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	22f5      	movs	r2, #245	; 0xf5
 800a59c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a59e:	e059      	b.n	800a654 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d103      	bne.n	800a5ae <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	22fb      	movs	r2, #251	; 0xfb
 800a5aa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a5ac:	e052      	b.n	800a654 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	7a1b      	ldrb	r3, [r3, #8]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d004      	beq.n	800a5c4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7ff f9a2 	bl	8009908 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d006      	beq.n	800a5dc <lwip_netconn_do_close+0x84>
 800a5ce:	4b23      	ldr	r3, [pc, #140]	; (800a65c <lwip_netconn_do_close+0x104>)
 800a5d0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a5d4:	4922      	ldr	r1, [pc, #136]	; (800a660 <lwip_netconn_do_close+0x108>)
 800a5d6:	4823      	ldr	r0, [pc, #140]	; (800a664 <lwip_netconn_do_close+0x10c>)
 800a5d8:	f00b fbc0 	bl	8015d5c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff fa06 	bl	8009a04 <lwip_netconn_do_close_internal>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d029      	beq.n	800a652 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	2b04      	cmp	r3, #4
 800a606:	d006      	beq.n	800a616 <lwip_netconn_do_close+0xbe>
 800a608:	4b14      	ldr	r3, [pc, #80]	; (800a65c <lwip_netconn_do_close+0x104>)
 800a60a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a60e:	4916      	ldr	r1, [pc, #88]	; (800a668 <lwip_netconn_do_close+0x110>)
 800a610:	4814      	ldr	r0, [pc, #80]	; (800a664 <lwip_netconn_do_close+0x10c>)
 800a612:	f00b fba3 	bl	8015d5c <iprintf>
        UNLOCK_TCPIP_CORE();
 800a616:	4815      	ldr	r0, [pc, #84]	; (800a66c <lwip_netconn_do_close+0x114>)
 800a618:	f00b f99f 	bl	801595a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	330c      	adds	r3, #12
 800a622:	2100      	movs	r1, #0
 800a624:	4618      	mov	r0, r3
 800a626:	f00b f8fe 	bl	8015826 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a62a:	4810      	ldr	r0, [pc, #64]	; (800a66c <lwip_netconn_do_close+0x114>)
 800a62c:	f00b f986 	bl	801593c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <lwip_netconn_do_close+0xfa>
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <lwip_netconn_do_close+0x104>)
 800a63c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a640:	4909      	ldr	r1, [pc, #36]	; (800a668 <lwip_netconn_do_close+0x110>)
 800a642:	4808      	ldr	r0, [pc, #32]	; (800a664 <lwip_netconn_do_close+0x10c>)
 800a644:	f00b fb8a 	bl	8015d5c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a648:	e003      	b.n	800a652 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	22f5      	movs	r2, #245	; 0xf5
 800a64e:	711a      	strb	r2, [r3, #4]
 800a650:	e000      	b.n	800a654 <lwip_netconn_do_close+0xfc>
      return;
 800a652:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a654:	3710      	adds	r7, #16
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	080174d4 	.word	0x080174d4
 800a660:	08017878 	.word	0x08017878
 800a664:	08017518 	.word	0x08017518
 800a668:	08017894 	.word	0x08017894
 800a66c:	20007f84 	.word	0x20007f84

0800a670 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d013      	beq.n	800a6a6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00b      	beq.n	800a69e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f001 fda4 	bl	800c1d8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	605a      	str	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685a      	ldr	r2, [r3, #4]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	2006      	movs	r0, #6
 800a6a2:	f000 fef5 	bl	800b490 <memp_free>
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
	...

0800a6b0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d108      	bne.n	800a6d0 <netbuf_next+0x20>
 800a6be:	4b11      	ldr	r3, [pc, #68]	; (800a704 <netbuf_next+0x54>)
 800a6c0:	22e0      	movs	r2, #224	; 0xe0
 800a6c2:	4911      	ldr	r1, [pc, #68]	; (800a708 <netbuf_next+0x58>)
 800a6c4:	4811      	ldr	r0, [pc, #68]	; (800a70c <netbuf_next+0x5c>)
 800a6c6:	f00b fb49 	bl	8015d5c <iprintf>
 800a6ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ce:	e014      	b.n	800a6fa <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <netbuf_next+0x30>
    return -1;
 800a6da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6de:	e00c      	b.n	800a6fa <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <netbuf_next+0x48>
    return 1;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e000      	b.n	800a6fa <netbuf_next+0x4a>
  }
  return 0;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	08017a2c 	.word	0x08017a2c
 800a708:	08017b8c 	.word	0x08017b8c
 800a70c:	08017a7c 	.word	0x08017a7c

0800a710 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a71a:	f008 f9bb 	bl	8012a94 <sys_timeouts_sleeptime>
 800a71e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a726:	d10b      	bne.n	800a740 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a728:	4813      	ldr	r0, [pc, #76]	; (800a778 <tcpip_timeouts_mbox_fetch+0x68>)
 800a72a:	f00b f916 	bl	801595a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a72e:	2200      	movs	r2, #0
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f00a ffec 	bl	8015710 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a738:	480f      	ldr	r0, [pc, #60]	; (800a778 <tcpip_timeouts_mbox_fetch+0x68>)
 800a73a:	f00b f8ff 	bl	801593c <sys_mutex_lock>
    return;
 800a73e:	e018      	b.n	800a772 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d102      	bne.n	800a74c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a746:	f008 f96b 	bl	8012a20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a74a:	e7e6      	b.n	800a71a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a74c:	480a      	ldr	r0, [pc, #40]	; (800a778 <tcpip_timeouts_mbox_fetch+0x68>)
 800a74e:	f00b f904 	bl	801595a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f00a ffda 	bl	8015710 <sys_arch_mbox_fetch>
 800a75c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a75e:	4806      	ldr	r0, [pc, #24]	; (800a778 <tcpip_timeouts_mbox_fetch+0x68>)
 800a760:	f00b f8ec 	bl	801593c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76a:	d102      	bne.n	800a772 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a76c:	f008 f958 	bl	8012a20 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a770:	e7d3      	b.n	800a71a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20007f84 	.word	0x20007f84

0800a77c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a784:	4810      	ldr	r0, [pc, #64]	; (800a7c8 <tcpip_thread+0x4c>)
 800a786:	f00b f8d9 	bl	801593c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a78a:	4b10      	ldr	r3, [pc, #64]	; (800a7cc <tcpip_thread+0x50>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d005      	beq.n	800a79e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a792:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <tcpip_thread+0x50>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a0e      	ldr	r2, [pc, #56]	; (800a7d0 <tcpip_thread+0x54>)
 800a798:	6812      	ldr	r2, [r2, #0]
 800a79a:	4610      	mov	r0, r2
 800a79c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a79e:	f107 030c 	add.w	r3, r7, #12
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	480b      	ldr	r0, [pc, #44]	; (800a7d4 <tcpip_thread+0x58>)
 800a7a6:	f7ff ffb3 	bl	800a710 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d106      	bne.n	800a7be <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a7b0:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <tcpip_thread+0x5c>)
 800a7b2:	2291      	movs	r2, #145	; 0x91
 800a7b4:	4909      	ldr	r1, [pc, #36]	; (800a7dc <tcpip_thread+0x60>)
 800a7b6:	480a      	ldr	r0, [pc, #40]	; (800a7e0 <tcpip_thread+0x64>)
 800a7b8:	f00b fad0 	bl	8015d5c <iprintf>
      continue;
 800a7bc:	e003      	b.n	800a7c6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 f80f 	bl	800a7e4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a7c6:	e7ea      	b.n	800a79e <tcpip_thread+0x22>
 800a7c8:	20007f84 	.word	0x20007f84
 800a7cc:	20004a88 	.word	0x20004a88
 800a7d0:	20004a8c 	.word	0x20004a8c
 800a7d4:	20004a90 	.word	0x20004a90
 800a7d8:	08017bc4 	.word	0x08017bc4
 800a7dc:	08017bf4 	.word	0x08017bf4
 800a7e0:	08017c14 	.word	0x08017c14

0800a7e4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d026      	beq.n	800a842 <tcpip_thread_handle_msg+0x5e>
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	dc2b      	bgt.n	800a850 <tcpip_thread_handle_msg+0x6c>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <tcpip_thread_handle_msg+0x1e>
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d015      	beq.n	800a82c <tcpip_thread_handle_msg+0x48>
 800a800:	e026      	b.n	800a850 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	6850      	ldr	r0, [r2, #4]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	6892      	ldr	r2, [r2, #8]
 800a80e:	4611      	mov	r1, r2
 800a810:	4798      	blx	r3
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d004      	beq.n	800a822 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f001 fcdb 	bl	800c1d8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	2009      	movs	r0, #9
 800a826:	f000 fe33 	bl	800b490 <memp_free>
      break;
 800a82a:	e018      	b.n	800a85e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6892      	ldr	r2, [r2, #8]
 800a834:	4610      	mov	r0, r2
 800a836:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	2008      	movs	r0, #8
 800a83c:	f000 fe28 	bl	800b490 <memp_free>
      break;
 800a840:	e00d      	b.n	800a85e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6892      	ldr	r2, [r2, #8]
 800a84a:	4610      	mov	r0, r2
 800a84c:	4798      	blx	r3
      break;
 800a84e:	e006      	b.n	800a85e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a850:	4b05      	ldr	r3, [pc, #20]	; (800a868 <tcpip_thread_handle_msg+0x84>)
 800a852:	22cf      	movs	r2, #207	; 0xcf
 800a854:	4905      	ldr	r1, [pc, #20]	; (800a86c <tcpip_thread_handle_msg+0x88>)
 800a856:	4806      	ldr	r0, [pc, #24]	; (800a870 <tcpip_thread_handle_msg+0x8c>)
 800a858:	f00b fa80 	bl	8015d5c <iprintf>
      break;
 800a85c:	bf00      	nop
  }
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	08017bc4 	.word	0x08017bc4
 800a86c:	08017bf4 	.word	0x08017bf4
 800a870:	08017c14 	.word	0x08017c14

0800a874 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a880:	481a      	ldr	r0, [pc, #104]	; (800a8ec <tcpip_inpkt+0x78>)
 800a882:	f00a ff8d 	bl	80157a0 <sys_mbox_valid>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d105      	bne.n	800a898 <tcpip_inpkt+0x24>
 800a88c:	4b18      	ldr	r3, [pc, #96]	; (800a8f0 <tcpip_inpkt+0x7c>)
 800a88e:	22fc      	movs	r2, #252	; 0xfc
 800a890:	4918      	ldr	r1, [pc, #96]	; (800a8f4 <tcpip_inpkt+0x80>)
 800a892:	4819      	ldr	r0, [pc, #100]	; (800a8f8 <tcpip_inpkt+0x84>)
 800a894:	f00b fa62 	bl	8015d5c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a898:	2009      	movs	r0, #9
 800a89a:	f000 fda7 	bl	800b3ec <memp_malloc>
 800a89e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d102      	bne.n	800a8ac <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a8a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8aa:	e01a      	b.n	800a8e2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a8c4:	6979      	ldr	r1, [r7, #20]
 800a8c6:	4809      	ldr	r0, [pc, #36]	; (800a8ec <tcpip_inpkt+0x78>)
 800a8c8:	f00a ff08 	bl	80156dc <sys_mbox_trypost>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d006      	beq.n	800a8e0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a8d2:	6979      	ldr	r1, [r7, #20]
 800a8d4:	2009      	movs	r0, #9
 800a8d6:	f000 fddb 	bl	800b490 <memp_free>
    return ERR_MEM;
 800a8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8de:	e000      	b.n	800a8e2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a8e0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20004a90 	.word	0x20004a90
 800a8f0:	08017bc4 	.word	0x08017bc4
 800a8f4:	08017c3c 	.word	0x08017c3c
 800a8f8:	08017c14 	.word	0x08017c14

0800a8fc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a90c:	f003 0318 	and.w	r3, r3, #24
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a914:	4a08      	ldr	r2, [pc, #32]	; (800a938 <tcpip_input+0x3c>)
 800a916:	6839      	ldr	r1, [r7, #0]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ffab 	bl	800a874 <tcpip_inpkt>
 800a91e:	4603      	mov	r3, r0
 800a920:	e005      	b.n	800a92e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a922:	4a06      	ldr	r2, [pc, #24]	; (800a93c <tcpip_input+0x40>)
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7ff ffa4 	bl	800a874 <tcpip_inpkt>
 800a92c:	4603      	mov	r3, r0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	080154d9 	.word	0x080154d9
 800a93c:	080143ed 	.word	0x080143ed

0800a940 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a94a:	4819      	ldr	r0, [pc, #100]	; (800a9b0 <tcpip_try_callback+0x70>)
 800a94c:	f00a ff28 	bl	80157a0 <sys_mbox_valid>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <tcpip_try_callback+0x24>
 800a956:	4b17      	ldr	r3, [pc, #92]	; (800a9b4 <tcpip_try_callback+0x74>)
 800a958:	f240 125d 	movw	r2, #349	; 0x15d
 800a95c:	4916      	ldr	r1, [pc, #88]	; (800a9b8 <tcpip_try_callback+0x78>)
 800a95e:	4817      	ldr	r0, [pc, #92]	; (800a9bc <tcpip_try_callback+0x7c>)
 800a960:	f00b f9fc 	bl	8015d5c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a964:	2008      	movs	r0, #8
 800a966:	f000 fd41 	bl	800b3ec <memp_malloc>
 800a96a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d102      	bne.n	800a978 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a976:	e017      	b.n	800a9a8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	4808      	ldr	r0, [pc, #32]	; (800a9b0 <tcpip_try_callback+0x70>)
 800a98e:	f00a fea5 	bl	80156dc <sys_mbox_trypost>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d006      	beq.n	800a9a6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a998:	68f9      	ldr	r1, [r7, #12]
 800a99a:	2008      	movs	r0, #8
 800a99c:	f000 fd78 	bl	800b490 <memp_free>
    return ERR_MEM;
 800a9a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9a4:	e000      	b.n	800a9a8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20004a90 	.word	0x20004a90
 800a9b4:	08017bc4 	.word	0x08017bc4
 800a9b8:	08017c3c 	.word	0x08017c3c
 800a9bc:	08017c14 	.word	0x08017c14

0800a9c0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a9cc:	4806      	ldr	r0, [pc, #24]	; (800a9e8 <tcpip_send_msg_wait_sem+0x28>)
 800a9ce:	f00a ffb5 	bl	801593c <sys_mutex_lock>
  fn(apimsg);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68b8      	ldr	r0, [r7, #8]
 800a9d6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a9d8:	4803      	ldr	r0, [pc, #12]	; (800a9e8 <tcpip_send_msg_wait_sem+0x28>)
 800a9da:	f00a ffbe 	bl	801595a <sys_mutex_unlock>
  return ERR_OK;
 800a9de:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	20007f84 	.word	0x20007f84

0800a9ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af02      	add	r7, sp, #8
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a9f6:	f000 f871 	bl	800aadc <lwip_init>

  tcpip_init_done = initfunc;
 800a9fa:	4a17      	ldr	r2, [pc, #92]	; (800aa58 <tcpip_init+0x6c>)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800aa00:	4a16      	ldr	r2, [pc, #88]	; (800aa5c <tcpip_init+0x70>)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800aa06:	2106      	movs	r1, #6
 800aa08:	4815      	ldr	r0, [pc, #84]	; (800aa60 <tcpip_init+0x74>)
 800aa0a:	f00a fe3b 	bl	8015684 <sys_mbox_new>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d006      	beq.n	800aa22 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800aa14:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <tcpip_init+0x78>)
 800aa16:	f240 2261 	movw	r2, #609	; 0x261
 800aa1a:	4913      	ldr	r1, [pc, #76]	; (800aa68 <tcpip_init+0x7c>)
 800aa1c:	4813      	ldr	r0, [pc, #76]	; (800aa6c <tcpip_init+0x80>)
 800aa1e:	f00b f99d 	bl	8015d5c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aa22:	4813      	ldr	r0, [pc, #76]	; (800aa70 <tcpip_init+0x84>)
 800aa24:	f00a ff74 	bl	8015910 <sys_mutex_new>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d006      	beq.n	800aa3c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <tcpip_init+0x78>)
 800aa30:	f240 2265 	movw	r2, #613	; 0x265
 800aa34:	490f      	ldr	r1, [pc, #60]	; (800aa74 <tcpip_init+0x88>)
 800aa36:	480d      	ldr	r0, [pc, #52]	; (800aa6c <tcpip_init+0x80>)
 800aa38:	f00b f990 	bl	8015d5c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aa3c:	2318      	movs	r3, #24
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa44:	2200      	movs	r2, #0
 800aa46:	490c      	ldr	r1, [pc, #48]	; (800aa78 <tcpip_init+0x8c>)
 800aa48:	480c      	ldr	r0, [pc, #48]	; (800aa7c <tcpip_init+0x90>)
 800aa4a:	f00a ff93 	bl	8015974 <sys_thread_new>
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20004a88 	.word	0x20004a88
 800aa5c:	20004a8c 	.word	0x20004a8c
 800aa60:	20004a90 	.word	0x20004a90
 800aa64:	08017bc4 	.word	0x08017bc4
 800aa68:	08017c4c 	.word	0x08017c4c
 800aa6c:	08017c14 	.word	0x08017c14
 800aa70:	20007f84 	.word	0x20007f84
 800aa74:	08017c70 	.word	0x08017c70
 800aa78:	0800a77d 	.word	0x0800a77d
 800aa7c:	08017c94 	.word	0x08017c94

0800aa80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	4603      	mov	r3, r0
 800aa88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800aa8a:	88fb      	ldrh	r3, [r7, #6]
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	b21a      	sxth	r2, r3
 800aa90:	88fb      	ldrh	r3, [r7, #6]
 800aa92:	0a1b      	lsrs	r3, r3, #8
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	b21b      	sxth	r3, r3
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	b21b      	sxth	r3, r3
 800aa9c:	b29b      	uxth	r3, r3
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	061a      	lsls	r2, r3, #24
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	021b      	lsls	r3, r3, #8
 800aaba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aabe:	431a      	orrs	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	0a1b      	lsrs	r3, r3, #8
 800aac4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aac8:	431a      	orrs	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	0e1b      	lsrs	r3, r3, #24
 800aace:	4313      	orrs	r3, r2
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800aae6:	f00a ff07 	bl	80158f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800aaea:	f000 f8d5 	bl	800ac98 <mem_init>
  memp_init();
 800aaee:	f000 fc31 	bl	800b354 <memp_init>
  pbuf_init();
  netif_init();
 800aaf2:	f000 fcf7 	bl	800b4e4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aaf6:	f008 f805 	bl	8012b04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800aafa:	f001 fe07 	bl	800c70c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aafe:	f007 ff47 	bl	8012990 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	4603      	mov	r3, r0
 800ab14:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <ptr_to_mem+0x20>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	88fb      	ldrh	r3, [r7, #6]
 800ab1c:	4413      	add	r3, r2
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	20004a94 	.word	0x20004a94

0800ab30 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ab38:	4b05      	ldr	r3, [pc, #20]	; (800ab50 <mem_to_ptr+0x20>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	b29b      	uxth	r3, r3
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	20004a94 	.word	0x20004a94

0800ab54 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ab5c:	4b45      	ldr	r3, [pc, #276]	; (800ac74 <plug_holes+0x120>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d206      	bcs.n	800ab74 <plug_holes+0x20>
 800ab66:	4b44      	ldr	r3, [pc, #272]	; (800ac78 <plug_holes+0x124>)
 800ab68:	f240 12df 	movw	r2, #479	; 0x1df
 800ab6c:	4943      	ldr	r1, [pc, #268]	; (800ac7c <plug_holes+0x128>)
 800ab6e:	4844      	ldr	r0, [pc, #272]	; (800ac80 <plug_holes+0x12c>)
 800ab70:	f00b f8f4 	bl	8015d5c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ab74:	4b43      	ldr	r3, [pc, #268]	; (800ac84 <plug_holes+0x130>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d306      	bcc.n	800ab8c <plug_holes+0x38>
 800ab7e:	4b3e      	ldr	r3, [pc, #248]	; (800ac78 <plug_holes+0x124>)
 800ab80:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ab84:	4940      	ldr	r1, [pc, #256]	; (800ac88 <plug_holes+0x134>)
 800ab86:	483e      	ldr	r0, [pc, #248]	; (800ac80 <plug_holes+0x12c>)
 800ab88:	f00b f8e8 	bl	8015d5c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	791b      	ldrb	r3, [r3, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d006      	beq.n	800aba2 <plug_holes+0x4e>
 800ab94:	4b38      	ldr	r3, [pc, #224]	; (800ac78 <plug_holes+0x124>)
 800ab96:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ab9a:	493c      	ldr	r1, [pc, #240]	; (800ac8c <plug_holes+0x138>)
 800ab9c:	4838      	ldr	r0, [pc, #224]	; (800ac80 <plug_holes+0x12c>)
 800ab9e:	f00b f8dd 	bl	8015d5c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	881b      	ldrh	r3, [r3, #0]
 800aba6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800abaa:	d906      	bls.n	800abba <plug_holes+0x66>
 800abac:	4b32      	ldr	r3, [pc, #200]	; (800ac78 <plug_holes+0x124>)
 800abae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800abb2:	4937      	ldr	r1, [pc, #220]	; (800ac90 <plug_holes+0x13c>)
 800abb4:	4832      	ldr	r0, [pc, #200]	; (800ac80 <plug_holes+0x12c>)
 800abb6:	f00b f8d1 	bl	8015d5c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7ff ffa4 	bl	800ab0c <ptr_to_mem>
 800abc4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d024      	beq.n	800ac18 <plug_holes+0xc4>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d120      	bne.n	800ac18 <plug_holes+0xc4>
 800abd6:	4b2b      	ldr	r3, [pc, #172]	; (800ac84 <plug_holes+0x130>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d01b      	beq.n	800ac18 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800abe0:	4b2c      	ldr	r3, [pc, #176]	; (800ac94 <plug_holes+0x140>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d102      	bne.n	800abf0 <plug_holes+0x9c>
      lfree = mem;
 800abea:	4a2a      	ldr	r2, [pc, #168]	; (800ac94 <plug_holes+0x140>)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	881a      	ldrh	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	881b      	ldrh	r3, [r3, #0]
 800abfc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ac00:	d00a      	beq.n	800ac18 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff ff80 	bl	800ab0c <ptr_to_mem>
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff ff8e 	bl	800ab30 <mem_to_ptr>
 800ac14:	4603      	mov	r3, r0
 800ac16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	885b      	ldrh	r3, [r3, #2]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff ff75 	bl	800ab0c <ptr_to_mem>
 800ac22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d01f      	beq.n	800ac6c <plug_holes+0x118>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	791b      	ldrb	r3, [r3, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d11b      	bne.n	800ac6c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ac34:	4b17      	ldr	r3, [pc, #92]	; (800ac94 <plug_holes+0x140>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d102      	bne.n	800ac44 <plug_holes+0xf0>
      lfree = pmem;
 800ac3e:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <plug_holes+0x140>)
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	881a      	ldrh	r2, [r3, #0]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ac54:	d00a      	beq.n	800ac6c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff ff56 	bl	800ab0c <ptr_to_mem>
 800ac60:	4604      	mov	r4, r0
 800ac62:	68b8      	ldr	r0, [r7, #8]
 800ac64:	f7ff ff64 	bl	800ab30 <mem_to_ptr>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd90      	pop	{r4, r7, pc}
 800ac74:	20004a94 	.word	0x20004a94
 800ac78:	08017ca4 	.word	0x08017ca4
 800ac7c:	08017cd4 	.word	0x08017cd4
 800ac80:	08017cec 	.word	0x08017cec
 800ac84:	20004a98 	.word	0x20004a98
 800ac88:	08017d14 	.word	0x08017d14
 800ac8c:	08017d30 	.word	0x08017d30
 800ac90:	08017d4c 	.word	0x08017d4c
 800ac94:	20004aa0 	.word	0x20004aa0

0800ac98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac9e:	4b1f      	ldr	r3, [pc, #124]	; (800ad1c <mem_init+0x84>)
 800aca0:	3303      	adds	r3, #3
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	461a      	mov	r2, r3
 800aca8:	4b1d      	ldr	r3, [pc, #116]	; (800ad20 <mem_init+0x88>)
 800acaa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800acac:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <mem_init+0x88>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800acb8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800acc6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800acca:	f7ff ff1f 	bl	800ab0c <ptr_to_mem>
 800acce:	4603      	mov	r3, r0
 800acd0:	4a14      	ldr	r2, [pc, #80]	; (800ad24 <mem_init+0x8c>)
 800acd2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800acd4:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <mem_init+0x8c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2201      	movs	r2, #1
 800acda:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800acdc:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <mem_init+0x8c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ace4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <mem_init+0x8c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800acee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800acf0:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <mem_init+0x88>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a0c      	ldr	r2, [pc, #48]	; (800ad28 <mem_init+0x90>)
 800acf6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800acf8:	480c      	ldr	r0, [pc, #48]	; (800ad2c <mem_init+0x94>)
 800acfa:	f00a fe09 	bl	8015910 <sys_mutex_new>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <mem_init+0x98>)
 800ad06:	f240 221f 	movw	r2, #543	; 0x21f
 800ad0a:	490a      	ldr	r1, [pc, #40]	; (800ad34 <mem_init+0x9c>)
 800ad0c:	480a      	ldr	r0, [pc, #40]	; (800ad38 <mem_init+0xa0>)
 800ad0e:	f00b f825 	bl	8015d5c <iprintf>
  }
}
 800ad12:	bf00      	nop
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20007fa0 	.word	0x20007fa0
 800ad20:	20004a94 	.word	0x20004a94
 800ad24:	20004a98 	.word	0x20004a98
 800ad28:	20004aa0 	.word	0x20004aa0
 800ad2c:	20004a9c 	.word	0x20004a9c
 800ad30:	08017ca4 	.word	0x08017ca4
 800ad34:	08017d78 	.word	0x08017d78
 800ad38:	08017cec 	.word	0x08017cec

0800ad3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b086      	sub	sp, #24
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff fef3 	bl	800ab30 <mem_to_ptr>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff feda 	bl	800ab0c <ptr_to_mem>
 800ad58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	885b      	ldrh	r3, [r3, #2]
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff fed4 	bl	800ab0c <ptr_to_mem>
 800ad64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ad6e:	d818      	bhi.n	800ada2 <mem_link_valid+0x66>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	885b      	ldrh	r3, [r3, #2]
 800ad74:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ad78:	d813      	bhi.n	800ada2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ad7e:	8afa      	ldrh	r2, [r7, #22]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d004      	beq.n	800ad8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	8afa      	ldrh	r2, [r7, #22]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d109      	bne.n	800ada2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad8e:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <mem_link_valid+0x74>)
 800ad90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d006      	beq.n	800ada6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	885b      	ldrh	r3, [r3, #2]
 800ad9c:	8afa      	ldrh	r2, [r7, #22]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d001      	beq.n	800ada6 <mem_link_valid+0x6a>
    return 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e000      	b.n	800ada8 <mem_link_valid+0x6c>
  }
  return 1;
 800ada6:	2301      	movs	r3, #1
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20004a98 	.word	0x20004a98

0800adb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d070      	beq.n	800aea4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f003 0303 	and.w	r3, r3, #3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00d      	beq.n	800ade8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800adcc:	4b37      	ldr	r3, [pc, #220]	; (800aeac <mem_free+0xf8>)
 800adce:	f240 2273 	movw	r2, #627	; 0x273
 800add2:	4937      	ldr	r1, [pc, #220]	; (800aeb0 <mem_free+0xfc>)
 800add4:	4837      	ldr	r0, [pc, #220]	; (800aeb4 <mem_free+0x100>)
 800add6:	f00a ffc1 	bl	8015d5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800adda:	f00a fdeb 	bl	80159b4 <sys_arch_protect>
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f00a fdf5 	bl	80159d0 <sys_arch_unprotect>
    return;
 800ade6:	e05e      	b.n	800aea6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	3b08      	subs	r3, #8
 800adec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800adee:	4b32      	ldr	r3, [pc, #200]	; (800aeb8 <mem_free+0x104>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d306      	bcc.n	800ae06 <mem_free+0x52>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f103 020c 	add.w	r2, r3, #12
 800adfe:	4b2f      	ldr	r3, [pc, #188]	; (800aebc <mem_free+0x108>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d90d      	bls.n	800ae22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ae06:	4b29      	ldr	r3, [pc, #164]	; (800aeac <mem_free+0xf8>)
 800ae08:	f240 227f 	movw	r2, #639	; 0x27f
 800ae0c:	492c      	ldr	r1, [pc, #176]	; (800aec0 <mem_free+0x10c>)
 800ae0e:	4829      	ldr	r0, [pc, #164]	; (800aeb4 <mem_free+0x100>)
 800ae10:	f00a ffa4 	bl	8015d5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae14:	f00a fdce 	bl	80159b4 <sys_arch_protect>
 800ae18:	6138      	str	r0, [r7, #16]
 800ae1a:	6938      	ldr	r0, [r7, #16]
 800ae1c:	f00a fdd8 	bl	80159d0 <sys_arch_unprotect>
    return;
 800ae20:	e041      	b.n	800aea6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ae22:	4828      	ldr	r0, [pc, #160]	; (800aec4 <mem_free+0x110>)
 800ae24:	f00a fd8a 	bl	801593c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	791b      	ldrb	r3, [r3, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d110      	bne.n	800ae52 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ae30:	4b1e      	ldr	r3, [pc, #120]	; (800aeac <mem_free+0xf8>)
 800ae32:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ae36:	4924      	ldr	r1, [pc, #144]	; (800aec8 <mem_free+0x114>)
 800ae38:	481e      	ldr	r0, [pc, #120]	; (800aeb4 <mem_free+0x100>)
 800ae3a:	f00a ff8f 	bl	8015d5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae3e:	4821      	ldr	r0, [pc, #132]	; (800aec4 <mem_free+0x110>)
 800ae40:	f00a fd8b 	bl	801595a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae44:	f00a fdb6 	bl	80159b4 <sys_arch_protect>
 800ae48:	6178      	str	r0, [r7, #20]
 800ae4a:	6978      	ldr	r0, [r7, #20]
 800ae4c:	f00a fdc0 	bl	80159d0 <sys_arch_unprotect>
    return;
 800ae50:	e029      	b.n	800aea6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ae52:	69f8      	ldr	r0, [r7, #28]
 800ae54:	f7ff ff72 	bl	800ad3c <mem_link_valid>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d110      	bne.n	800ae80 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ae5e:	4b13      	ldr	r3, [pc, #76]	; (800aeac <mem_free+0xf8>)
 800ae60:	f240 2295 	movw	r2, #661	; 0x295
 800ae64:	4919      	ldr	r1, [pc, #100]	; (800aecc <mem_free+0x118>)
 800ae66:	4813      	ldr	r0, [pc, #76]	; (800aeb4 <mem_free+0x100>)
 800ae68:	f00a ff78 	bl	8015d5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ae6c:	4815      	ldr	r0, [pc, #84]	; (800aec4 <mem_free+0x110>)
 800ae6e:	f00a fd74 	bl	801595a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae72:	f00a fd9f 	bl	80159b4 <sys_arch_protect>
 800ae76:	61b8      	str	r0, [r7, #24]
 800ae78:	69b8      	ldr	r0, [r7, #24]
 800ae7a:	f00a fda9 	bl	80159d0 <sys_arch_unprotect>
    return;
 800ae7e:	e012      	b.n	800aea6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	2200      	movs	r2, #0
 800ae84:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ae86:	4b12      	ldr	r3, [pc, #72]	; (800aed0 <mem_free+0x11c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d202      	bcs.n	800ae96 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ae90:	4a0f      	ldr	r2, [pc, #60]	; (800aed0 <mem_free+0x11c>)
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae96:	69f8      	ldr	r0, [r7, #28]
 800ae98:	f7ff fe5c 	bl	800ab54 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae9c:	4809      	ldr	r0, [pc, #36]	; (800aec4 <mem_free+0x110>)
 800ae9e:	f00a fd5c 	bl	801595a <sys_mutex_unlock>
 800aea2:	e000      	b.n	800aea6 <mem_free+0xf2>
    return;
 800aea4:	bf00      	nop
}
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	08017ca4 	.word	0x08017ca4
 800aeb0:	08017d94 	.word	0x08017d94
 800aeb4:	08017cec 	.word	0x08017cec
 800aeb8:	20004a94 	.word	0x20004a94
 800aebc:	20004a98 	.word	0x20004a98
 800aec0:	08017db8 	.word	0x08017db8
 800aec4:	20004a9c 	.word	0x20004a9c
 800aec8:	08017dd4 	.word	0x08017dd4
 800aecc:	08017dfc 	.word	0x08017dfc
 800aed0:	20004aa0 	.word	0x20004aa0

0800aed4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aee0:	887b      	ldrh	r3, [r7, #2]
 800aee2:	3303      	adds	r3, #3
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aeec:	8bfb      	ldrh	r3, [r7, #30]
 800aeee:	2b0b      	cmp	r3, #11
 800aef0:	d801      	bhi.n	800aef6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aef2:	230c      	movs	r3, #12
 800aef4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aef6:	8bfb      	ldrh	r3, [r7, #30]
 800aef8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aefc:	d803      	bhi.n	800af06 <mem_trim+0x32>
 800aefe:	8bfa      	ldrh	r2, [r7, #30]
 800af00:	887b      	ldrh	r3, [r7, #2]
 800af02:	429a      	cmp	r2, r3
 800af04:	d201      	bcs.n	800af0a <mem_trim+0x36>
    return NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	e0d8      	b.n	800b0bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800af0a:	4b6e      	ldr	r3, [pc, #440]	; (800b0c4 <mem_trim+0x1f0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	429a      	cmp	r2, r3
 800af12:	d304      	bcc.n	800af1e <mem_trim+0x4a>
 800af14:	4b6c      	ldr	r3, [pc, #432]	; (800b0c8 <mem_trim+0x1f4>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d306      	bcc.n	800af2c <mem_trim+0x58>
 800af1e:	4b6b      	ldr	r3, [pc, #428]	; (800b0cc <mem_trim+0x1f8>)
 800af20:	f240 22d1 	movw	r2, #721	; 0x2d1
 800af24:	496a      	ldr	r1, [pc, #424]	; (800b0d0 <mem_trim+0x1fc>)
 800af26:	486b      	ldr	r0, [pc, #428]	; (800b0d4 <mem_trim+0x200>)
 800af28:	f00a ff18 	bl	8015d5c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800af2c:	4b65      	ldr	r3, [pc, #404]	; (800b0c4 <mem_trim+0x1f0>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	429a      	cmp	r2, r3
 800af34:	d304      	bcc.n	800af40 <mem_trim+0x6c>
 800af36:	4b64      	ldr	r3, [pc, #400]	; (800b0c8 <mem_trim+0x1f4>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d307      	bcc.n	800af50 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af40:	f00a fd38 	bl	80159b4 <sys_arch_protect>
 800af44:	60b8      	str	r0, [r7, #8]
 800af46:	68b8      	ldr	r0, [r7, #8]
 800af48:	f00a fd42 	bl	80159d0 <sys_arch_unprotect>
    return rmem;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	e0b5      	b.n	800b0bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	3b08      	subs	r3, #8
 800af54:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800af56:	69b8      	ldr	r0, [r7, #24]
 800af58:	f7ff fdea 	bl	800ab30 <mem_to_ptr>
 800af5c:	4603      	mov	r3, r0
 800af5e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	881a      	ldrh	r2, [r3, #0]
 800af64:	8afb      	ldrh	r3, [r7, #22]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	b29b      	uxth	r3, r3
 800af6a:	3b08      	subs	r3, #8
 800af6c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800af6e:	8bfa      	ldrh	r2, [r7, #30]
 800af70:	8abb      	ldrh	r3, [r7, #20]
 800af72:	429a      	cmp	r2, r3
 800af74:	d906      	bls.n	800af84 <mem_trim+0xb0>
 800af76:	4b55      	ldr	r3, [pc, #340]	; (800b0cc <mem_trim+0x1f8>)
 800af78:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800af7c:	4956      	ldr	r1, [pc, #344]	; (800b0d8 <mem_trim+0x204>)
 800af7e:	4855      	ldr	r0, [pc, #340]	; (800b0d4 <mem_trim+0x200>)
 800af80:	f00a feec 	bl	8015d5c <iprintf>
  if (newsize > size) {
 800af84:	8bfa      	ldrh	r2, [r7, #30]
 800af86:	8abb      	ldrh	r3, [r7, #20]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d901      	bls.n	800af90 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800af8c:	2300      	movs	r3, #0
 800af8e:	e095      	b.n	800b0bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800af90:	8bfa      	ldrh	r2, [r7, #30]
 800af92:	8abb      	ldrh	r3, [r7, #20]
 800af94:	429a      	cmp	r2, r3
 800af96:	d101      	bne.n	800af9c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	e08f      	b.n	800b0bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af9c:	484f      	ldr	r0, [pc, #316]	; (800b0dc <mem_trim+0x208>)
 800af9e:	f00a fccd 	bl	801593c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	881b      	ldrh	r3, [r3, #0]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fdb0 	bl	800ab0c <ptr_to_mem>
 800afac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	791b      	ldrb	r3, [r3, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d13f      	bne.n	800b036 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	881b      	ldrh	r3, [r3, #0]
 800afba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800afbe:	d106      	bne.n	800afce <mem_trim+0xfa>
 800afc0:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <mem_trim+0x1f8>)
 800afc2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800afc6:	4946      	ldr	r1, [pc, #280]	; (800b0e0 <mem_trim+0x20c>)
 800afc8:	4842      	ldr	r0, [pc, #264]	; (800b0d4 <mem_trim+0x200>)
 800afca:	f00a fec7 	bl	8015d5c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800afd4:	8afa      	ldrh	r2, [r7, #22]
 800afd6:	8bfb      	ldrh	r3, [r7, #30]
 800afd8:	4413      	add	r3, r2
 800afda:	b29b      	uxth	r3, r3
 800afdc:	3308      	adds	r3, #8
 800afde:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800afe0:	4b40      	ldr	r3, [pc, #256]	; (800b0e4 <mem_trim+0x210>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d106      	bne.n	800aff8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800afea:	89fb      	ldrh	r3, [r7, #14]
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fd8d 	bl	800ab0c <ptr_to_mem>
 800aff2:	4603      	mov	r3, r0
 800aff4:	4a3b      	ldr	r2, [pc, #236]	; (800b0e4 <mem_trim+0x210>)
 800aff6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aff8:	89fb      	ldrh	r3, [r7, #14]
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fd86 	bl	800ab0c <ptr_to_mem>
 800b000:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2200      	movs	r2, #0
 800b006:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	89ba      	ldrh	r2, [r7, #12]
 800b00c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	8afa      	ldrh	r2, [r7, #22]
 800b012:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	89fa      	ldrh	r2, [r7, #14]
 800b018:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	881b      	ldrh	r3, [r3, #0]
 800b01e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b022:	d047      	beq.n	800b0b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff fd6f 	bl	800ab0c <ptr_to_mem>
 800b02e:	4602      	mov	r2, r0
 800b030:	89fb      	ldrh	r3, [r7, #14]
 800b032:	8053      	strh	r3, [r2, #2]
 800b034:	e03e      	b.n	800b0b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b036:	8bfb      	ldrh	r3, [r7, #30]
 800b038:	f103 0214 	add.w	r2, r3, #20
 800b03c:	8abb      	ldrh	r3, [r7, #20]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d838      	bhi.n	800b0b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b042:	8afa      	ldrh	r2, [r7, #22]
 800b044:	8bfb      	ldrh	r3, [r7, #30]
 800b046:	4413      	add	r3, r2
 800b048:	b29b      	uxth	r3, r3
 800b04a:	3308      	adds	r3, #8
 800b04c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b056:	d106      	bne.n	800b066 <mem_trim+0x192>
 800b058:	4b1c      	ldr	r3, [pc, #112]	; (800b0cc <mem_trim+0x1f8>)
 800b05a:	f240 3216 	movw	r2, #790	; 0x316
 800b05e:	4920      	ldr	r1, [pc, #128]	; (800b0e0 <mem_trim+0x20c>)
 800b060:	481c      	ldr	r0, [pc, #112]	; (800b0d4 <mem_trim+0x200>)
 800b062:	f00a fe7b 	bl	8015d5c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b066:	89fb      	ldrh	r3, [r7, #14]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff fd4f 	bl	800ab0c <ptr_to_mem>
 800b06e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b070:	4b1c      	ldr	r3, [pc, #112]	; (800b0e4 <mem_trim+0x210>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	429a      	cmp	r2, r3
 800b078:	d202      	bcs.n	800b080 <mem_trim+0x1ac>
      lfree = mem2;
 800b07a:	4a1a      	ldr	r2, [pc, #104]	; (800b0e4 <mem_trim+0x210>)
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	2200      	movs	r2, #0
 800b084:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	881a      	ldrh	r2, [r3, #0]
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	8afa      	ldrh	r2, [r7, #22]
 800b092:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	89fa      	ldrh	r2, [r7, #14]
 800b098:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	881b      	ldrh	r3, [r3, #0]
 800b09e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b0a2:	d007      	beq.n	800b0b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff fd2f 	bl	800ab0c <ptr_to_mem>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	89fb      	ldrh	r3, [r7, #14]
 800b0b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b0b4:	4809      	ldr	r0, [pc, #36]	; (800b0dc <mem_trim+0x208>)
 800b0b6:	f00a fc50 	bl	801595a <sys_mutex_unlock>
  return rmem;
 800b0ba:	687b      	ldr	r3, [r7, #4]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3720      	adds	r7, #32
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20004a94 	.word	0x20004a94
 800b0c8:	20004a98 	.word	0x20004a98
 800b0cc:	08017ca4 	.word	0x08017ca4
 800b0d0:	08017e30 	.word	0x08017e30
 800b0d4:	08017cec 	.word	0x08017cec
 800b0d8:	08017e48 	.word	0x08017e48
 800b0dc:	20004a9c 	.word	0x20004a9c
 800b0e0:	08017e68 	.word	0x08017e68
 800b0e4:	20004aa0 	.word	0x20004aa0

0800b0e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <mem_malloc+0x14>
    return NULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e0e2      	b.n	800b2c2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	3303      	adds	r3, #3
 800b100:	b29b      	uxth	r3, r3
 800b102:	f023 0303 	bic.w	r3, r3, #3
 800b106:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b108:	8bbb      	ldrh	r3, [r7, #28]
 800b10a:	2b0b      	cmp	r3, #11
 800b10c:	d801      	bhi.n	800b112 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b10e:	230c      	movs	r3, #12
 800b110:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b112:	8bbb      	ldrh	r3, [r7, #28]
 800b114:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b118:	d803      	bhi.n	800b122 <mem_malloc+0x3a>
 800b11a:	8bba      	ldrh	r2, [r7, #28]
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d201      	bcs.n	800b126 <mem_malloc+0x3e>
    return NULL;
 800b122:	2300      	movs	r3, #0
 800b124:	e0cd      	b.n	800b2c2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b126:	4869      	ldr	r0, [pc, #420]	; (800b2cc <mem_malloc+0x1e4>)
 800b128:	f00a fc08 	bl	801593c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b12c:	4b68      	ldr	r3, [pc, #416]	; (800b2d0 <mem_malloc+0x1e8>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fcfd 	bl	800ab30 <mem_to_ptr>
 800b136:	4603      	mov	r3, r0
 800b138:	83fb      	strh	r3, [r7, #30]
 800b13a:	e0b7      	b.n	800b2ac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b13c:	8bfb      	ldrh	r3, [r7, #30]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7ff fce4 	bl	800ab0c <ptr_to_mem>
 800b144:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	791b      	ldrb	r3, [r3, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f040 80a7 	bne.w	800b29e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	461a      	mov	r2, r3
 800b156:	8bfb      	ldrh	r3, [r7, #30]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	f1a3 0208 	sub.w	r2, r3, #8
 800b15e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b160:	429a      	cmp	r2, r3
 800b162:	f0c0 809c 	bcc.w	800b29e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	8bfb      	ldrh	r3, [r7, #30]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	f1a3 0208 	sub.w	r2, r3, #8
 800b174:	8bbb      	ldrh	r3, [r7, #28]
 800b176:	3314      	adds	r3, #20
 800b178:	429a      	cmp	r2, r3
 800b17a:	d333      	bcc.n	800b1e4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b17c:	8bfa      	ldrh	r2, [r7, #30]
 800b17e:	8bbb      	ldrh	r3, [r7, #28]
 800b180:	4413      	add	r3, r2
 800b182:	b29b      	uxth	r3, r3
 800b184:	3308      	adds	r3, #8
 800b186:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b188:	8a7b      	ldrh	r3, [r7, #18]
 800b18a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b18e:	d106      	bne.n	800b19e <mem_malloc+0xb6>
 800b190:	4b50      	ldr	r3, [pc, #320]	; (800b2d4 <mem_malloc+0x1ec>)
 800b192:	f240 3287 	movw	r2, #903	; 0x387
 800b196:	4950      	ldr	r1, [pc, #320]	; (800b2d8 <mem_malloc+0x1f0>)
 800b198:	4850      	ldr	r0, [pc, #320]	; (800b2dc <mem_malloc+0x1f4>)
 800b19a:	f00a fddf 	bl	8015d5c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b19e:	8a7b      	ldrh	r3, [r7, #18]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff fcb3 	bl	800ab0c <ptr_to_mem>
 800b1a6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	881a      	ldrh	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	8bfa      	ldrh	r2, [r7, #30]
 800b1ba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	8a7a      	ldrh	r2, [r7, #18]
 800b1c0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800b1d0:	d00b      	beq.n	800b1ea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fc98 	bl	800ab0c <ptr_to_mem>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	8a7b      	ldrh	r3, [r7, #18]
 800b1e0:	8053      	strh	r3, [r2, #2]
 800b1e2:	e002      	b.n	800b1ea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b1ea:	4b39      	ldr	r3, [pc, #228]	; (800b2d0 <mem_malloc+0x1e8>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d127      	bne.n	800b244 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b1f4:	4b36      	ldr	r3, [pc, #216]	; (800b2d0 <mem_malloc+0x1e8>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b1fa:	e005      	b.n	800b208 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	881b      	ldrh	r3, [r3, #0]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fc83 	bl	800ab0c <ptr_to_mem>
 800b206:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	791b      	ldrb	r3, [r3, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d004      	beq.n	800b21a <mem_malloc+0x132>
 800b210:	4b33      	ldr	r3, [pc, #204]	; (800b2e0 <mem_malloc+0x1f8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	d1f0      	bne.n	800b1fc <mem_malloc+0x114>
          }
          lfree = cur;
 800b21a:	4a2d      	ldr	r2, [pc, #180]	; (800b2d0 <mem_malloc+0x1e8>)
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b220:	4b2b      	ldr	r3, [pc, #172]	; (800b2d0 <mem_malloc+0x1e8>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	4b2e      	ldr	r3, [pc, #184]	; (800b2e0 <mem_malloc+0x1f8>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d00b      	beq.n	800b244 <mem_malloc+0x15c>
 800b22c:	4b28      	ldr	r3, [pc, #160]	; (800b2d0 <mem_malloc+0x1e8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	791b      	ldrb	r3, [r3, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <mem_malloc+0x15c>
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <mem_malloc+0x1ec>)
 800b238:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b23c:	4929      	ldr	r1, [pc, #164]	; (800b2e4 <mem_malloc+0x1fc>)
 800b23e:	4827      	ldr	r0, [pc, #156]	; (800b2dc <mem_malloc+0x1f4>)
 800b240:	f00a fd8c 	bl	8015d5c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b244:	4821      	ldr	r0, [pc, #132]	; (800b2cc <mem_malloc+0x1e4>)
 800b246:	f00a fb88 	bl	801595a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b24a:	8bba      	ldrh	r2, [r7, #28]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	4413      	add	r3, r2
 800b250:	3308      	adds	r3, #8
 800b252:	4a23      	ldr	r2, [pc, #140]	; (800b2e0 <mem_malloc+0x1f8>)
 800b254:	6812      	ldr	r2, [r2, #0]
 800b256:	4293      	cmp	r3, r2
 800b258:	d906      	bls.n	800b268 <mem_malloc+0x180>
 800b25a:	4b1e      	ldr	r3, [pc, #120]	; (800b2d4 <mem_malloc+0x1ec>)
 800b25c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b260:	4921      	ldr	r1, [pc, #132]	; (800b2e8 <mem_malloc+0x200>)
 800b262:	481e      	ldr	r0, [pc, #120]	; (800b2dc <mem_malloc+0x1f4>)
 800b264:	f00a fd7a 	bl	8015d5c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f003 0303 	and.w	r3, r3, #3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d006      	beq.n	800b280 <mem_malloc+0x198>
 800b272:	4b18      	ldr	r3, [pc, #96]	; (800b2d4 <mem_malloc+0x1ec>)
 800b274:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b278:	491c      	ldr	r1, [pc, #112]	; (800b2ec <mem_malloc+0x204>)
 800b27a:	4818      	ldr	r0, [pc, #96]	; (800b2dc <mem_malloc+0x1f4>)
 800b27c:	f00a fd6e 	bl	8015d5c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f003 0303 	and.w	r3, r3, #3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d006      	beq.n	800b298 <mem_malloc+0x1b0>
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <mem_malloc+0x1ec>)
 800b28c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b290:	4917      	ldr	r1, [pc, #92]	; (800b2f0 <mem_malloc+0x208>)
 800b292:	4812      	ldr	r0, [pc, #72]	; (800b2dc <mem_malloc+0x1f4>)
 800b294:	f00a fd62 	bl	8015d5c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	3308      	adds	r3, #8
 800b29c:	e011      	b.n	800b2c2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b29e:	8bfb      	ldrh	r3, [r7, #30]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7ff fc33 	bl	800ab0c <ptr_to_mem>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b2ac:	8bfa      	ldrh	r2, [r7, #30]
 800b2ae:	8bbb      	ldrh	r3, [r7, #28]
 800b2b0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	f4ff af41 	bcc.w	800b13c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b2ba:	4804      	ldr	r0, [pc, #16]	; (800b2cc <mem_malloc+0x1e4>)
 800b2bc:	f00a fb4d 	bl	801595a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3720      	adds	r7, #32
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20004a9c 	.word	0x20004a9c
 800b2d0:	20004aa0 	.word	0x20004aa0
 800b2d4:	08017ca4 	.word	0x08017ca4
 800b2d8:	08017e68 	.word	0x08017e68
 800b2dc:	08017cec 	.word	0x08017cec
 800b2e0:	20004a98 	.word	0x20004a98
 800b2e4:	08017e7c 	.word	0x08017e7c
 800b2e8:	08017e98 	.word	0x08017e98
 800b2ec:	08017ec8 	.word	0x08017ec8
 800b2f0:	08017ef8 	.word	0x08017ef8

0800b2f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	3303      	adds	r3, #3
 800b30a:	f023 0303 	bic.w	r3, r3, #3
 800b30e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b310:	2300      	movs	r3, #0
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	e011      	b.n	800b33a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	4413      	add	r3, r2
 800b332:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	461a      	mov	r2, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4293      	cmp	r3, r2
 800b344:	dbe7      	blt.n	800b316 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b35a:	2300      	movs	r3, #0
 800b35c:	80fb      	strh	r3, [r7, #6]
 800b35e:	e009      	b.n	800b374 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b360:	88fb      	ldrh	r3, [r7, #6]
 800b362:	4a08      	ldr	r2, [pc, #32]	; (800b384 <memp_init+0x30>)
 800b364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff ffc3 	bl	800b2f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b36e:	88fb      	ldrh	r3, [r7, #6]
 800b370:	3301      	adds	r3, #1
 800b372:	80fb      	strh	r3, [r7, #6]
 800b374:	88fb      	ldrh	r3, [r7, #6]
 800b376:	2b0c      	cmp	r3, #12
 800b378:	d9f2      	bls.n	800b360 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b37a:	bf00      	nop
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	0801a74c 	.word	0x0801a74c

0800b388 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b390:	f00a fb10 	bl	80159b4 <sys_arch_protect>
 800b394:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d015      	beq.n	800b3d0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	6812      	ldr	r2, [r2, #0]
 800b3ac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f003 0303 	and.w	r3, r3, #3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d006      	beq.n	800b3c6 <do_memp_malloc_pool+0x3e>
 800b3b8:	4b09      	ldr	r3, [pc, #36]	; (800b3e0 <do_memp_malloc_pool+0x58>)
 800b3ba:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b3be:	4909      	ldr	r1, [pc, #36]	; (800b3e4 <do_memp_malloc_pool+0x5c>)
 800b3c0:	4809      	ldr	r0, [pc, #36]	; (800b3e8 <do_memp_malloc_pool+0x60>)
 800b3c2:	f00a fccb 	bl	8015d5c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f00a fb02 	bl	80159d0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	e003      	b.n	800b3d8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f00a fafd 	bl	80159d0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08017f1c 	.word	0x08017f1c
 800b3e4:	08017f4c 	.word	0x08017f4c
 800b3e8:	08017f70 	.word	0x08017f70

0800b3ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b3f6:	79fb      	ldrb	r3, [r7, #7]
 800b3f8:	2b0c      	cmp	r3, #12
 800b3fa:	d908      	bls.n	800b40e <memp_malloc+0x22>
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <memp_malloc+0x3c>)
 800b3fe:	f240 1257 	movw	r2, #343	; 0x157
 800b402:	490a      	ldr	r1, [pc, #40]	; (800b42c <memp_malloc+0x40>)
 800b404:	480a      	ldr	r0, [pc, #40]	; (800b430 <memp_malloc+0x44>)
 800b406:	f00a fca9 	bl	8015d5c <iprintf>
 800b40a:	2300      	movs	r3, #0
 800b40c:	e008      	b.n	800b420 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <memp_malloc+0x48>)
 800b412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ffb6 	bl	800b388 <do_memp_malloc_pool>
 800b41c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b41e:	68fb      	ldr	r3, [r7, #12]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	08017f1c 	.word	0x08017f1c
 800b42c:	08017fac 	.word	0x08017fac
 800b430:	08017f70 	.word	0x08017f70
 800b434:	0801a74c 	.word	0x0801a74c

0800b438 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	f003 0303 	and.w	r3, r3, #3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <do_memp_free_pool+0x22>
 800b44c:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <do_memp_free_pool+0x4c>)
 800b44e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b452:	490d      	ldr	r1, [pc, #52]	; (800b488 <do_memp_free_pool+0x50>)
 800b454:	480d      	ldr	r0, [pc, #52]	; (800b48c <do_memp_free_pool+0x54>)
 800b456:	f00a fc81 	bl	8015d5c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b45e:	f00a faa9 	bl	80159b4 <sys_arch_protect>
 800b462:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b476:	68b8      	ldr	r0, [r7, #8]
 800b478:	f00a faaa 	bl	80159d0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b47c:	bf00      	nop
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	08017f1c 	.word	0x08017f1c
 800b488:	08017fcc 	.word	0x08017fcc
 800b48c:	08017f70 	.word	0x08017f70

0800b490 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	6039      	str	r1, [r7, #0]
 800b49a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	2b0c      	cmp	r3, #12
 800b4a0:	d907      	bls.n	800b4b2 <memp_free+0x22>
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <memp_free+0x44>)
 800b4a4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b4a8:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <memp_free+0x48>)
 800b4aa:	480c      	ldr	r0, [pc, #48]	; (800b4dc <memp_free+0x4c>)
 800b4ac:	f00a fc56 	bl	8015d5c <iprintf>
 800b4b0:	e00c      	b.n	800b4cc <memp_free+0x3c>

  if (mem == NULL) {
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	4a09      	ldr	r2, [pc, #36]	; (800b4e0 <memp_free+0x50>)
 800b4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff ffb8 	bl	800b438 <do_memp_free_pool>
 800b4c8:	e000      	b.n	800b4cc <memp_free+0x3c>
    return;
 800b4ca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	08017f1c 	.word	0x08017f1c
 800b4d8:	08017fec 	.word	0x08017fec
 800b4dc:	08017f70 	.word	0x08017f70
 800b4e0:	0801a74c 	.word	0x0801a74c

0800b4e4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b4e8:	bf00      	nop
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d108      	bne.n	800b51a <netif_add+0x26>
 800b508:	4b57      	ldr	r3, [pc, #348]	; (800b668 <netif_add+0x174>)
 800b50a:	f240 1227 	movw	r2, #295	; 0x127
 800b50e:	4957      	ldr	r1, [pc, #348]	; (800b66c <netif_add+0x178>)
 800b510:	4857      	ldr	r0, [pc, #348]	; (800b670 <netif_add+0x17c>)
 800b512:	f00a fc23 	bl	8015d5c <iprintf>
 800b516:	2300      	movs	r3, #0
 800b518:	e0a2      	b.n	800b660 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d108      	bne.n	800b532 <netif_add+0x3e>
 800b520:	4b51      	ldr	r3, [pc, #324]	; (800b668 <netif_add+0x174>)
 800b522:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b526:	4953      	ldr	r1, [pc, #332]	; (800b674 <netif_add+0x180>)
 800b528:	4851      	ldr	r0, [pc, #324]	; (800b670 <netif_add+0x17c>)
 800b52a:	f00a fc17 	bl	8015d5c <iprintf>
 800b52e:	2300      	movs	r3, #0
 800b530:	e096      	b.n	800b660 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d101      	bne.n	800b53c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b538:	4b4f      	ldr	r3, [pc, #316]	; (800b678 <netif_add+0x184>)
 800b53a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d101      	bne.n	800b546 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b542:	4b4d      	ldr	r3, [pc, #308]	; (800b678 <netif_add+0x184>)
 800b544:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d101      	bne.n	800b550 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b54c:	4b4a      	ldr	r3, [pc, #296]	; (800b678 <netif_add+0x184>)
 800b54e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2200      	movs	r2, #0
 800b554:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4a45      	ldr	r2, [pc, #276]	; (800b67c <netif_add+0x188>)
 800b566:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6a3a      	ldr	r2, [r7, #32]
 800b580:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b582:	4b3f      	ldr	r3, [pc, #252]	; (800b680 <netif_add+0x18c>)
 800b584:	781a      	ldrb	r2, [r3, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b590:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	68b9      	ldr	r1, [r7, #8]
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 f913 	bl	800b7c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	4798      	blx	r3
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <netif_add+0xba>
    return NULL;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e058      	b.n	800b660 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5b4:	2bff      	cmp	r3, #255	; 0xff
 800b5b6:	d103      	bne.n	800b5c0 <netif_add+0xcc>
        netif->num = 0;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b5c4:	4b2f      	ldr	r3, [pc, #188]	; (800b684 <netif_add+0x190>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	617b      	str	r3, [r7, #20]
 800b5ca:	e02b      	b.n	800b624 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d106      	bne.n	800b5e2 <netif_add+0xee>
 800b5d4:	4b24      	ldr	r3, [pc, #144]	; (800b668 <netif_add+0x174>)
 800b5d6:	f240 128b 	movw	r2, #395	; 0x18b
 800b5da:	492b      	ldr	r1, [pc, #172]	; (800b688 <netif_add+0x194>)
 800b5dc:	4824      	ldr	r0, [pc, #144]	; (800b670 <netif_add+0x17c>)
 800b5de:	f00a fbbd 	bl	8015d5c <iprintf>
        num_netifs++;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	2bff      	cmp	r3, #255	; 0xff
 800b5ec:	dd06      	ble.n	800b5fc <netif_add+0x108>
 800b5ee:	4b1e      	ldr	r3, [pc, #120]	; (800b668 <netif_add+0x174>)
 800b5f0:	f240 128d 	movw	r2, #397	; 0x18d
 800b5f4:	4925      	ldr	r1, [pc, #148]	; (800b68c <netif_add+0x198>)
 800b5f6:	481e      	ldr	r0, [pc, #120]	; (800b670 <netif_add+0x17c>)
 800b5f8:	f00a fbb0 	bl	8015d5c <iprintf>
        if (netif2->num == netif->num) {
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b608:	429a      	cmp	r2, r3
 800b60a:	d108      	bne.n	800b61e <netif_add+0x12a>
          netif->num++;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b612:	3301      	adds	r3, #1
 800b614:	b2da      	uxtb	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b61c:	e005      	b.n	800b62a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1d0      	bne.n	800b5cc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1be      	bne.n	800b5ae <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b636:	2bfe      	cmp	r3, #254	; 0xfe
 800b638:	d103      	bne.n	800b642 <netif_add+0x14e>
    netif_num = 0;
 800b63a:	4b11      	ldr	r3, [pc, #68]	; (800b680 <netif_add+0x18c>)
 800b63c:	2200      	movs	r2, #0
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	e006      	b.n	800b650 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b648:	3301      	adds	r3, #1
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	4b0c      	ldr	r3, [pc, #48]	; (800b680 <netif_add+0x18c>)
 800b64e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b650:	4b0c      	ldr	r3, [pc, #48]	; (800b684 <netif_add+0x190>)
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b658:	4a0a      	ldr	r2, [pc, #40]	; (800b684 <netif_add+0x190>)
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b65e:	68fb      	ldr	r3, [r7, #12]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	08018008 	.word	0x08018008
 800b66c:	0801809c 	.word	0x0801809c
 800b670:	08018058 	.word	0x08018058
 800b674:	080180b8 	.word	0x080180b8
 800b678:	0801a7c0 	.word	0x0801a7c0
 800b67c:	0800ba9f 	.word	0x0800ba9f
 800b680:	20004ad8 	.word	0x20004ad8
 800b684:	2000d84c 	.word	0x2000d84c
 800b688:	080180dc 	.word	0x080180dc
 800b68c:	080180f0 	.word	0x080180f0

0800b690 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b69a:	6839      	ldr	r1, [r7, #0]
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f002 fe4f 	bl	800e340 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f007 fcfd 	bl	80130a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
	...

0800b6b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d106      	bne.n	800b6d4 <netif_do_set_ipaddr+0x20>
 800b6c6:	4b1d      	ldr	r3, [pc, #116]	; (800b73c <netif_do_set_ipaddr+0x88>)
 800b6c8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b6cc:	491c      	ldr	r1, [pc, #112]	; (800b740 <netif_do_set_ipaddr+0x8c>)
 800b6ce:	481d      	ldr	r0, [pc, #116]	; (800b744 <netif_do_set_ipaddr+0x90>)
 800b6d0:	f00a fb44 	bl	8015d5c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d106      	bne.n	800b6e8 <netif_do_set_ipaddr+0x34>
 800b6da:	4b18      	ldr	r3, [pc, #96]	; (800b73c <netif_do_set_ipaddr+0x88>)
 800b6dc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b6e0:	4917      	ldr	r1, [pc, #92]	; (800b740 <netif_do_set_ipaddr+0x8c>)
 800b6e2:	4818      	ldr	r0, [pc, #96]	; (800b744 <netif_do_set_ipaddr+0x90>)
 800b6e4:	f00a fb3a 	bl	8015d5c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d01c      	beq.n	800b730 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	3304      	adds	r3, #4
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b706:	f107 0314 	add.w	r3, r7, #20
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff ffbf 	bl	800b690 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <netif_do_set_ipaddr+0x6a>
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	e000      	b.n	800b720 <netif_do_set_ipaddr+0x6c>
 800b71e:	2300      	movs	r3, #0
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b724:	2101      	movs	r1, #1
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f000 f8d2 	bl	800b8d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b72c:	2301      	movs	r3, #1
 800b72e:	e000      	b.n	800b732 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	08018008 	.word	0x08018008
 800b740:	08018120 	.word	0x08018120
 800b744:	08018058 	.word	0x08018058

0800b748 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3308      	adds	r3, #8
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	429a      	cmp	r2, r3
 800b760:	d00a      	beq.n	800b778 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <netif_do_set_netmask+0x26>
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	e000      	b.n	800b770 <netif_do_set_netmask+0x28>
 800b76e:	2300      	movs	r3, #0
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b774:	2301      	movs	r3, #1
 800b776:	e000      	b.n	800b77a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b786:	b480      	push	{r7}
 800b788:	b085      	sub	sp, #20
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	60b9      	str	r1, [r7, #8]
 800b790:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	330c      	adds	r3, #12
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d00a      	beq.n	800b7b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <netif_do_set_gw+0x26>
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	e000      	b.n	800b7ae <netif_do_set_gw+0x28>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e000      	b.n	800b7b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b088      	sub	sp, #32
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b7e0:	4b1c      	ldr	r3, [pc, #112]	; (800b854 <netif_set_addr+0x90>)
 800b7e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b7ea:	4b1a      	ldr	r3, [pc, #104]	; (800b854 <netif_set_addr+0x90>)
 800b7ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b7f4:	4b17      	ldr	r3, [pc, #92]	; (800b854 <netif_set_addr+0x90>)
 800b7f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <netif_set_addr+0x42>
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <netif_set_addr+0x46>
 800b806:	2301      	movs	r3, #1
 800b808:	e000      	b.n	800b80c <netif_set_addr+0x48>
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d006      	beq.n	800b822 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b814:	f107 0310 	add.w	r3, r7, #16
 800b818:	461a      	mov	r2, r3
 800b81a:	68b9      	ldr	r1, [r7, #8]
 800b81c:	68f8      	ldr	r0, [r7, #12]
 800b81e:	f7ff ff49 	bl	800b6b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f7ff ff8e 	bl	800b748 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b82c:	69ba      	ldr	r2, [r7, #24]
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f7ff ffa8 	bl	800b786 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d106      	bne.n	800b84a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b83c:	f107 0310 	add.w	r3, r7, #16
 800b840:	461a      	mov	r2, r3
 800b842:	68b9      	ldr	r1, [r7, #8]
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff ff35 	bl	800b6b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b84a:	bf00      	nop
 800b84c:	3720      	adds	r7, #32
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	0801a7c0 	.word	0x0801a7c0

0800b858 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b860:	4a04      	ldr	r2, [pc, #16]	; (800b874 <netif_set_default+0x1c>)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	2000d850 	.word	0x2000d850

0800b878 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d107      	bne.n	800b896 <netif_set_up+0x1e>
 800b886:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <netif_set_up+0x4c>)
 800b888:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b88c:	490e      	ldr	r1, [pc, #56]	; (800b8c8 <netif_set_up+0x50>)
 800b88e:	480f      	ldr	r0, [pc, #60]	; (800b8cc <netif_set_up+0x54>)
 800b890:	f00a fa64 	bl	8015d5c <iprintf>
 800b894:	e013      	b.n	800b8be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10c      	bne.n	800b8be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b8b6:	2103      	movs	r1, #3
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f809 	bl	800b8d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	08018008 	.word	0x08018008
 800b8c8:	08018190 	.word	0x08018190
 800b8cc:	08018058 	.word	0x08018058

0800b8d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d106      	bne.n	800b8f0 <netif_issue_reports+0x20>
 800b8e2:	4b18      	ldr	r3, [pc, #96]	; (800b944 <netif_issue_reports+0x74>)
 800b8e4:	f240 326d 	movw	r2, #877	; 0x36d
 800b8e8:	4917      	ldr	r1, [pc, #92]	; (800b948 <netif_issue_reports+0x78>)
 800b8ea:	4818      	ldr	r0, [pc, #96]	; (800b94c <netif_issue_reports+0x7c>)
 800b8ec:	f00a fa36 	bl	8015d5c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8f6:	f003 0304 	and.w	r3, r3, #4
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d01e      	beq.n	800b93c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b904:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d017      	beq.n	800b93c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b90c:	78fb      	ldrb	r3, [r7, #3]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d013      	beq.n	800b93e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	3304      	adds	r3, #4
 800b91a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00e      	beq.n	800b93e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b926:	f003 0308 	and.w	r3, r3, #8
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d007      	beq.n	800b93e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	3304      	adds	r3, #4
 800b932:	4619      	mov	r1, r3
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f008 fb1f 	bl	8013f78 <etharp_request>
 800b93a:	e000      	b.n	800b93e <netif_issue_reports+0x6e>
    return;
 800b93c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b93e:	3708      	adds	r7, #8
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	08018008 	.word	0x08018008
 800b948:	080181ac 	.word	0x080181ac
 800b94c:	08018058 	.word	0x08018058

0800b950 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d107      	bne.n	800b96e <netif_set_down+0x1e>
 800b95e:	4b12      	ldr	r3, [pc, #72]	; (800b9a8 <netif_set_down+0x58>)
 800b960:	f240 329b 	movw	r2, #923	; 0x39b
 800b964:	4911      	ldr	r1, [pc, #68]	; (800b9ac <netif_set_down+0x5c>)
 800b966:	4812      	ldr	r0, [pc, #72]	; (800b9b0 <netif_set_down+0x60>)
 800b968:	f00a f9f8 	bl	8015d5c <iprintf>
 800b96c:	e019      	b.n	800b9a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b974:	f003 0301 	and.w	r3, r3, #1
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d012      	beq.n	800b9a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b982:	f023 0301 	bic.w	r3, r3, #1
 800b986:	b2da      	uxtb	r2, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b994:	f003 0308 	and.w	r3, r3, #8
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f007 fea9 	bl	80136f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b9a2:	3708      	adds	r7, #8
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	08018008 	.word	0x08018008
 800b9ac:	080181d0 	.word	0x080181d0
 800b9b0:	08018058 	.word	0x08018058

0800b9b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d107      	bne.n	800b9d2 <netif_set_link_up+0x1e>
 800b9c2:	4b13      	ldr	r3, [pc, #76]	; (800ba10 <netif_set_link_up+0x5c>)
 800b9c4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b9c8:	4912      	ldr	r1, [pc, #72]	; (800ba14 <netif_set_link_up+0x60>)
 800b9ca:	4813      	ldr	r0, [pc, #76]	; (800ba18 <netif_set_link_up+0x64>)
 800b9cc:	f00a f9c6 	bl	8015d5c <iprintf>
 800b9d0:	e01b      	b.n	800ba0a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9d8:	f003 0304 	and.w	r3, r3, #4
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d114      	bne.n	800ba0a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9e6:	f043 0304 	orr.w	r3, r3, #4
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9f2:	2103      	movs	r1, #3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff ff6b 	bl	800b8d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <netif_set_link_up+0x56>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	08018008 	.word	0x08018008
 800ba14:	080181f0 	.word	0x080181f0
 800ba18:	08018058 	.word	0x08018058

0800ba1c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d107      	bne.n	800ba3a <netif_set_link_down+0x1e>
 800ba2a:	4b11      	ldr	r3, [pc, #68]	; (800ba70 <netif_set_link_down+0x54>)
 800ba2c:	f240 4206 	movw	r2, #1030	; 0x406
 800ba30:	4910      	ldr	r1, [pc, #64]	; (800ba74 <netif_set_link_down+0x58>)
 800ba32:	4811      	ldr	r0, [pc, #68]	; (800ba78 <netif_set_link_down+0x5c>)
 800ba34:	f00a f992 	bl	8015d5c <iprintf>
 800ba38:	e017      	b.n	800ba6a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba40:	f003 0304 	and.w	r3, r3, #4
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d010      	beq.n	800ba6a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba4e:	f023 0304 	bic.w	r3, r3, #4
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <netif_set_link_down+0x4e>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	08018008 	.word	0x08018008
 800ba74:	08018214 	.word	0x08018214
 800ba78:	08018058 	.word	0x08018058

0800ba7c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	61da      	str	r2, [r3, #28]
  }
}
 800ba92:	bf00      	nop
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b085      	sub	sp, #20
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	60f8      	str	r0, [r7, #12]
 800baa6:	60b9      	str	r1, [r7, #8]
 800baa8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800baaa:	f06f 030b 	mvn.w	r3, #11
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
	...

0800babc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d013      	beq.n	800baf4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bacc:	4b0d      	ldr	r3, [pc, #52]	; (800bb04 <netif_get_by_index+0x48>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	60fb      	str	r3, [r7, #12]
 800bad2:	e00c      	b.n	800baee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bada:	3301      	adds	r3, #1
 800badc:	b2db      	uxtb	r3, r3
 800bade:	79fa      	ldrb	r2, [r7, #7]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d101      	bne.n	800bae8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	e006      	b.n	800baf6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1ef      	bne.n	800bad4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	2000d84c 	.word	0x2000d84c

0800bb08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bb0e:	f009 ff51 	bl	80159b4 <sys_arch_protect>
 800bb12:	6038      	str	r0, [r7, #0]
 800bb14:	4b0d      	ldr	r3, [pc, #52]	; (800bb4c <pbuf_free_ooseq+0x44>)
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
 800bb1a:	6838      	ldr	r0, [r7, #0]
 800bb1c:	f009 ff58 	bl	80159d0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb20:	4b0b      	ldr	r3, [pc, #44]	; (800bb50 <pbuf_free_ooseq+0x48>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	607b      	str	r3, [r7, #4]
 800bb26:	e00a      	b.n	800bb3e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f002 fc43 	bl	800e3bc <tcp_free_ooseq>
      return;
 800bb36:	e005      	b.n	800bb44 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	607b      	str	r3, [r7, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d1f1      	bne.n	800bb28 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bb44:	3708      	adds	r7, #8
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	2000d854 	.word	0x2000d854
 800bb50:	2000d85c 	.word	0x2000d85c

0800bb54 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bb5c:	f7ff ffd4 	bl	800bb08 <pbuf_free_ooseq>
}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bb6e:	f009 ff21 	bl	80159b4 <sys_arch_protect>
 800bb72:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bb74:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <pbuf_pool_is_empty+0x4c>)
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bb7a:	4b0e      	ldr	r3, [pc, #56]	; (800bbb4 <pbuf_pool_is_empty+0x4c>)
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f009 ff25 	bl	80159d0 <sys_arch_unprotect>

  if (!queued) {
 800bb86:	78fb      	ldrb	r3, [r7, #3]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10f      	bne.n	800bbac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	480a      	ldr	r0, [pc, #40]	; (800bbb8 <pbuf_pool_is_empty+0x50>)
 800bb90:	f7fe fed6 	bl	800a940 <tcpip_try_callback>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d008      	beq.n	800bbac <pbuf_pool_is_empty+0x44>
 800bb9a:	f009 ff0b 	bl	80159b4 <sys_arch_protect>
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	4b04      	ldr	r3, [pc, #16]	; (800bbb4 <pbuf_pool_is_empty+0x4c>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	701a      	strb	r2, [r3, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f009 ff12 	bl	80159d0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	2000d854 	.word	0x2000d854
 800bbb8:	0800bb55 	.word	0x0800bb55

0800bbbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	461a      	mov	r2, r3
 800bbca:	460b      	mov	r3, r1
 800bbcc:	80fb      	strh	r3, [r7, #6]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68ba      	ldr	r2, [r7, #8]
 800bbdc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	88fa      	ldrh	r2, [r7, #6]
 800bbe2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	88ba      	ldrh	r2, [r7, #4]
 800bbe8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bbea:	8b3b      	ldrh	r3, [r7, #24]
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	7f3a      	ldrb	r2, [r7, #28]
 800bbf6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	73da      	strb	r2, [r3, #15]
}
 800bc04:	bf00      	nop
 800bc06:	3714      	adds	r7, #20
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08c      	sub	sp, #48	; 0x30
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	4603      	mov	r3, r0
 800bc18:	71fb      	strb	r3, [r7, #7]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	80bb      	strh	r3, [r7, #4]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc26:	887b      	ldrh	r3, [r7, #2]
 800bc28:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc2c:	d07f      	beq.n	800bd2e <pbuf_alloc+0x11e>
 800bc2e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc32:	f300 80c8 	bgt.w	800bdc6 <pbuf_alloc+0x1b6>
 800bc36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc3a:	d010      	beq.n	800bc5e <pbuf_alloc+0x4e>
 800bc3c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc40:	f300 80c1 	bgt.w	800bdc6 <pbuf_alloc+0x1b6>
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	d002      	beq.n	800bc4e <pbuf_alloc+0x3e>
 800bc48:	2b41      	cmp	r3, #65	; 0x41
 800bc4a:	f040 80bc 	bne.w	800bdc6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc4e:	887a      	ldrh	r2, [r7, #2]
 800bc50:	88bb      	ldrh	r3, [r7, #4]
 800bc52:	4619      	mov	r1, r3
 800bc54:	2000      	movs	r0, #0
 800bc56:	f000 f8d1 	bl	800bdfc <pbuf_alloc_reference>
 800bc5a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bc5c:	e0bd      	b.n	800bdda <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bc66:	88bb      	ldrh	r3, [r7, #4]
 800bc68:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc6a:	200c      	movs	r0, #12
 800bc6c:	f7ff fbbe 	bl	800b3ec <memp_malloc>
 800bc70:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d109      	bne.n	800bc8c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bc78:	f7ff ff76 	bl	800bb68 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bc82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc84:	f000 faa8 	bl	800c1d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	e0a7      	b.n	800bddc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bc8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc8e:	3303      	adds	r3, #3
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	f023 0303 	bic.w	r3, r3, #3
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	8b7a      	ldrh	r2, [r7, #26]
 800bca0:	4293      	cmp	r3, r2
 800bca2:	bf28      	it	cs
 800bca4:	4613      	movcs	r3, r2
 800bca6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcaa:	3310      	adds	r3, #16
 800bcac:	693a      	ldr	r2, [r7, #16]
 800bcae:	4413      	add	r3, r2
 800bcb0:	3303      	adds	r3, #3
 800bcb2:	f023 0303 	bic.w	r3, r3, #3
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	89f9      	ldrh	r1, [r7, #14]
 800bcba:	8b7a      	ldrh	r2, [r7, #26]
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	887b      	ldrh	r3, [r7, #2]
 800bcc2:	9300      	str	r3, [sp, #0]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	6938      	ldr	r0, [r7, #16]
 800bcca:	f7ff ff77 	bl	800bbbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d006      	beq.n	800bce8 <pbuf_alloc+0xd8>
 800bcda:	4b42      	ldr	r3, [pc, #264]	; (800bde4 <pbuf_alloc+0x1d4>)
 800bcdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bce0:	4941      	ldr	r1, [pc, #260]	; (800bde8 <pbuf_alloc+0x1d8>)
 800bce2:	4842      	ldr	r0, [pc, #264]	; (800bdec <pbuf_alloc+0x1dc>)
 800bce4:	f00a f83a 	bl	8015d5c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bce8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcea:	3303      	adds	r3, #3
 800bcec:	f023 0303 	bic.w	r3, r3, #3
 800bcf0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bcf4:	d106      	bne.n	800bd04 <pbuf_alloc+0xf4>
 800bcf6:	4b3b      	ldr	r3, [pc, #236]	; (800bde4 <pbuf_alloc+0x1d4>)
 800bcf8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bcfc:	493c      	ldr	r1, [pc, #240]	; (800bdf0 <pbuf_alloc+0x1e0>)
 800bcfe:	483b      	ldr	r0, [pc, #236]	; (800bdec <pbuf_alloc+0x1dc>)
 800bd00:	f00a f82c 	bl	8015d5c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d102      	bne.n	800bd10 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd0e:	e002      	b.n	800bd16 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	693a      	ldr	r2, [r7, #16]
 800bd14:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd1a:	8b7a      	ldrh	r2, [r7, #26]
 800bd1c:	89fb      	ldrh	r3, [r7, #14]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd26:	8b7b      	ldrh	r3, [r7, #26]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d19e      	bne.n	800bc6a <pbuf_alloc+0x5a>
      break;
 800bd2c:	e055      	b.n	800bdda <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd30:	3303      	adds	r3, #3
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f023 0303 	bic.w	r3, r3, #3
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	88bb      	ldrh	r3, [r7, #4]
 800bd3c:	3303      	adds	r3, #3
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	f023 0303 	bic.w	r3, r3, #3
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4413      	add	r3, r2
 800bd48:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd4a:	8b3b      	ldrh	r3, [r7, #24]
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd50:	8b3a      	ldrh	r2, [r7, #24]
 800bd52:	88bb      	ldrh	r3, [r7, #4]
 800bd54:	3303      	adds	r3, #3
 800bd56:	f023 0303 	bic.w	r3, r3, #3
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d306      	bcc.n	800bd6c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bd5e:	8afa      	ldrh	r2, [r7, #22]
 800bd60:	88bb      	ldrh	r3, [r7, #4]
 800bd62:	3303      	adds	r3, #3
 800bd64:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d201      	bcs.n	800bd70 <pbuf_alloc+0x160>
        return NULL;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e035      	b.n	800bddc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bd70:	8afb      	ldrh	r3, [r7, #22]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff f9b8 	bl	800b0e8 <mem_malloc>
 800bd78:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <pbuf_alloc+0x174>
        return NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	e02b      	b.n	800bddc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bd84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd86:	3310      	adds	r3, #16
 800bd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd8a:	4413      	add	r3, r2
 800bd8c:	3303      	adds	r3, #3
 800bd8e:	f023 0303 	bic.w	r3, r3, #3
 800bd92:	4618      	mov	r0, r3
 800bd94:	88b9      	ldrh	r1, [r7, #4]
 800bd96:	88ba      	ldrh	r2, [r7, #4]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	887b      	ldrh	r3, [r7, #2]
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	460b      	mov	r3, r1
 800bda2:	4601      	mov	r1, r0
 800bda4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bda6:	f7ff ff09 	bl	800bbbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	f003 0303 	and.w	r3, r3, #3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d010      	beq.n	800bdd8 <pbuf_alloc+0x1c8>
 800bdb6:	4b0b      	ldr	r3, [pc, #44]	; (800bde4 <pbuf_alloc+0x1d4>)
 800bdb8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bdbc:	490d      	ldr	r1, [pc, #52]	; (800bdf4 <pbuf_alloc+0x1e4>)
 800bdbe:	480b      	ldr	r0, [pc, #44]	; (800bdec <pbuf_alloc+0x1dc>)
 800bdc0:	f009 ffcc 	bl	8015d5c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bdc4:	e008      	b.n	800bdd8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bdc6:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <pbuf_alloc+0x1d4>)
 800bdc8:	f240 1227 	movw	r2, #295	; 0x127
 800bdcc:	490a      	ldr	r1, [pc, #40]	; (800bdf8 <pbuf_alloc+0x1e8>)
 800bdce:	4807      	ldr	r0, [pc, #28]	; (800bdec <pbuf_alloc+0x1dc>)
 800bdd0:	f009 ffc4 	bl	8015d5c <iprintf>
      return NULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e001      	b.n	800bddc <pbuf_alloc+0x1cc>
      break;
 800bdd8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3728      	adds	r7, #40	; 0x28
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	08018238 	.word	0x08018238
 800bde8:	08018268 	.word	0x08018268
 800bdec:	08018298 	.word	0x08018298
 800bdf0:	080182c0 	.word	0x080182c0
 800bdf4:	080182f4 	.word	0x080182f4
 800bdf8:	08018320 	.word	0x08018320

0800bdfc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af02      	add	r7, sp, #8
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	807b      	strh	r3, [r7, #2]
 800be08:	4613      	mov	r3, r2
 800be0a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be0c:	883b      	ldrh	r3, [r7, #0]
 800be0e:	2b41      	cmp	r3, #65	; 0x41
 800be10:	d009      	beq.n	800be26 <pbuf_alloc_reference+0x2a>
 800be12:	883b      	ldrh	r3, [r7, #0]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d006      	beq.n	800be26 <pbuf_alloc_reference+0x2a>
 800be18:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <pbuf_alloc_reference+0x5c>)
 800be1a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be1e:	490f      	ldr	r1, [pc, #60]	; (800be5c <pbuf_alloc_reference+0x60>)
 800be20:	480f      	ldr	r0, [pc, #60]	; (800be60 <pbuf_alloc_reference+0x64>)
 800be22:	f009 ff9b 	bl	8015d5c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be26:	200b      	movs	r0, #11
 800be28:	f7ff fae0 	bl	800b3ec <memp_malloc>
 800be2c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800be34:	2300      	movs	r3, #0
 800be36:	e00b      	b.n	800be50 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be38:	8879      	ldrh	r1, [r7, #2]
 800be3a:	887a      	ldrh	r2, [r7, #2]
 800be3c:	2300      	movs	r3, #0
 800be3e:	9301      	str	r3, [sp, #4]
 800be40:	883b      	ldrh	r3, [r7, #0]
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	460b      	mov	r3, r1
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f7ff feb7 	bl	800bbbc <pbuf_init_alloced_pbuf>
  return p;
 800be4e:	68fb      	ldr	r3, [r7, #12]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	08018238 	.word	0x08018238
 800be5c:	0801833c 	.word	0x0801833c
 800be60:	08018298 	.word	0x08018298

0800be64 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b088      	sub	sp, #32
 800be68:	af02      	add	r7, sp, #8
 800be6a:	607b      	str	r3, [r7, #4]
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]
 800be70:	460b      	mov	r3, r1
 800be72:	81bb      	strh	r3, [r7, #12]
 800be74:	4613      	mov	r3, r2
 800be76:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800be7c:	8a7b      	ldrh	r3, [r7, #18]
 800be7e:	3303      	adds	r3, #3
 800be80:	f023 0203 	bic.w	r2, r3, #3
 800be84:	89bb      	ldrh	r3, [r7, #12]
 800be86:	441a      	add	r2, r3
 800be88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d901      	bls.n	800be92 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800be8e:	2300      	movs	r3, #0
 800be90:	e018      	b.n	800bec4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800be92:	6a3b      	ldr	r3, [r7, #32]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d007      	beq.n	800bea8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800be98:	8a7b      	ldrh	r3, [r7, #18]
 800be9a:	3303      	adds	r3, #3
 800be9c:	f023 0303 	bic.w	r3, r3, #3
 800bea0:	6a3a      	ldr	r2, [r7, #32]
 800bea2:	4413      	add	r3, r2
 800bea4:	617b      	str	r3, [r7, #20]
 800bea6:	e001      	b.n	800beac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bea8:	2300      	movs	r3, #0
 800beaa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	89b9      	ldrh	r1, [r7, #12]
 800beb0:	89ba      	ldrh	r2, [r7, #12]
 800beb2:	2302      	movs	r3, #2
 800beb4:	9301      	str	r3, [sp, #4]
 800beb6:	897b      	ldrh	r3, [r7, #10]
 800beb8:	9300      	str	r3, [sp, #0]
 800beba:	460b      	mov	r3, r1
 800bebc:	6979      	ldr	r1, [r7, #20]
 800bebe:	f7ff fe7d 	bl	800bbbc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bec2:	687b      	ldr	r3, [r7, #4]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3718      	adds	r7, #24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	460b      	mov	r3, r1
 800bed6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d106      	bne.n	800beec <pbuf_realloc+0x20>
 800bede:	4b3a      	ldr	r3, [pc, #232]	; (800bfc8 <pbuf_realloc+0xfc>)
 800bee0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bee4:	4939      	ldr	r1, [pc, #228]	; (800bfcc <pbuf_realloc+0x100>)
 800bee6:	483a      	ldr	r0, [pc, #232]	; (800bfd0 <pbuf_realloc+0x104>)
 800bee8:	f009 ff38 	bl	8015d5c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	891b      	ldrh	r3, [r3, #8]
 800bef0:	887a      	ldrh	r2, [r7, #2]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d263      	bcs.n	800bfbe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	891a      	ldrh	r2, [r3, #8]
 800befa:	887b      	ldrh	r3, [r7, #2]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf00:	887b      	ldrh	r3, [r7, #2]
 800bf02:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf08:	e018      	b.n	800bf3c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	895b      	ldrh	r3, [r3, #10]
 800bf0e:	897a      	ldrh	r2, [r7, #10]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	891a      	ldrh	r2, [r3, #8]
 800bf18:	893b      	ldrh	r3, [r7, #8]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d106      	bne.n	800bf3c <pbuf_realloc+0x70>
 800bf2e:	4b26      	ldr	r3, [pc, #152]	; (800bfc8 <pbuf_realloc+0xfc>)
 800bf30:	f240 12af 	movw	r2, #431	; 0x1af
 800bf34:	4927      	ldr	r1, [pc, #156]	; (800bfd4 <pbuf_realloc+0x108>)
 800bf36:	4826      	ldr	r0, [pc, #152]	; (800bfd0 <pbuf_realloc+0x104>)
 800bf38:	f009 ff10 	bl	8015d5c <iprintf>
  while (rem_len > q->len) {
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	895b      	ldrh	r3, [r3, #10]
 800bf40:	897a      	ldrh	r2, [r7, #10]
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d8e1      	bhi.n	800bf0a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	7b1b      	ldrb	r3, [r3, #12]
 800bf4a:	f003 030f 	and.w	r3, r3, #15
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d121      	bne.n	800bf96 <pbuf_realloc+0xca>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	895b      	ldrh	r3, [r3, #10]
 800bf56:	897a      	ldrh	r2, [r7, #10]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d01c      	beq.n	800bf96 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	7b5b      	ldrb	r3, [r3, #13]
 800bf60:	f003 0302 	and.w	r3, r3, #2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d116      	bne.n	800bf96 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	b29a      	uxth	r2, r3
 800bf72:	897b      	ldrh	r3, [r7, #10]
 800bf74:	4413      	add	r3, r2
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7fe ffaa 	bl	800aed4 <mem_trim>
 800bf80:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <pbuf_realloc+0xca>
 800bf88:	4b0f      	ldr	r3, [pc, #60]	; (800bfc8 <pbuf_realloc+0xfc>)
 800bf8a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bf8e:	4912      	ldr	r1, [pc, #72]	; (800bfd8 <pbuf_realloc+0x10c>)
 800bf90:	480f      	ldr	r0, [pc, #60]	; (800bfd0 <pbuf_realloc+0x104>)
 800bf92:	f009 fee3 	bl	8015d5c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	897a      	ldrh	r2, [r7, #10]
 800bf9a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	895a      	ldrh	r2, [r3, #10]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d004      	beq.n	800bfb6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f000 f911 	bl	800c1d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
 800bfbc:	e000      	b.n	800bfc0 <pbuf_realloc+0xf4>
    return;
 800bfbe:	bf00      	nop

}
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	08018238 	.word	0x08018238
 800bfcc:	08018350 	.word	0x08018350
 800bfd0:	08018298 	.word	0x08018298
 800bfd4:	08018368 	.word	0x08018368
 800bfd8:	08018380 	.word	0x08018380

0800bfdc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d106      	bne.n	800bffe <pbuf_add_header_impl+0x22>
 800bff0:	4b2b      	ldr	r3, [pc, #172]	; (800c0a0 <pbuf_add_header_impl+0xc4>)
 800bff2:	f240 12df 	movw	r2, #479	; 0x1df
 800bff6:	492b      	ldr	r1, [pc, #172]	; (800c0a4 <pbuf_add_header_impl+0xc8>)
 800bff8:	482b      	ldr	r0, [pc, #172]	; (800c0a8 <pbuf_add_header_impl+0xcc>)
 800bffa:	f009 feaf 	bl	8015d5c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d003      	beq.n	800c00c <pbuf_add_header_impl+0x30>
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c00a:	d301      	bcc.n	800c010 <pbuf_add_header_impl+0x34>
    return 1;
 800c00c:	2301      	movs	r3, #1
 800c00e:	e043      	b.n	800c098 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <pbuf_add_header_impl+0x3e>
    return 0;
 800c016:	2300      	movs	r3, #0
 800c018:	e03e      	b.n	800c098 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	891a      	ldrh	r2, [r3, #8]
 800c022:	8a7b      	ldrh	r3, [r7, #18]
 800c024:	4413      	add	r3, r2
 800c026:	b29b      	uxth	r3, r3
 800c028:	8a7a      	ldrh	r2, [r7, #18]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d901      	bls.n	800c032 <pbuf_add_header_impl+0x56>
    return 1;
 800c02e:	2301      	movs	r3, #1
 800c030:	e032      	b.n	800c098 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	7b1b      	ldrb	r3, [r3, #12]
 800c036:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c038:	8a3b      	ldrh	r3, [r7, #16]
 800c03a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00c      	beq.n	800c05c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	425b      	negs	r3, r3
 800c04a:	4413      	add	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3310      	adds	r3, #16
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	429a      	cmp	r2, r3
 800c056:	d20d      	bcs.n	800c074 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c058:	2301      	movs	r3, #1
 800c05a:	e01d      	b.n	800c098 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c05c:	79fb      	ldrb	r3, [r7, #7]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d006      	beq.n	800c070 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	425b      	negs	r3, r3
 800c06a:	4413      	add	r3, r2
 800c06c:	617b      	str	r3, [r7, #20]
 800c06e:	e001      	b.n	800c074 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c070:	2301      	movs	r3, #1
 800c072:	e011      	b.n	800c098 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	895a      	ldrh	r2, [r3, #10]
 800c07e:	8a7b      	ldrh	r3, [r7, #18]
 800c080:	4413      	add	r3, r2
 800c082:	b29a      	uxth	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	891a      	ldrh	r2, [r3, #8]
 800c08c:	8a7b      	ldrh	r3, [r7, #18]
 800c08e:	4413      	add	r3, r2
 800c090:	b29a      	uxth	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	811a      	strh	r2, [r3, #8]


  return 0;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	08018238 	.word	0x08018238
 800c0a4:	0801839c 	.word	0x0801839c
 800c0a8:	08018298 	.word	0x08018298

0800c0ac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7ff ff8e 	bl	800bfdc <pbuf_add_header_impl>
 800c0c0:	4603      	mov	r3, r0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <pbuf_remove_header+0x1e>
 800c0dc:	4b20      	ldr	r3, [pc, #128]	; (800c160 <pbuf_remove_header+0x94>)
 800c0de:	f240 224b 	movw	r2, #587	; 0x24b
 800c0e2:	4920      	ldr	r1, [pc, #128]	; (800c164 <pbuf_remove_header+0x98>)
 800c0e4:	4820      	ldr	r0, [pc, #128]	; (800c168 <pbuf_remove_header+0x9c>)
 800c0e6:	f009 fe39 	bl	8015d5c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d003      	beq.n	800c0f8 <pbuf_remove_header+0x2c>
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f6:	d301      	bcc.n	800c0fc <pbuf_remove_header+0x30>
    return 1;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	e02c      	b.n	800c156 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <pbuf_remove_header+0x3a>
    return 0;
 800c102:	2300      	movs	r3, #0
 800c104:	e027      	b.n	800c156 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	895b      	ldrh	r3, [r3, #10]
 800c10e:	89fa      	ldrh	r2, [r7, #14]
 800c110:	429a      	cmp	r2, r3
 800c112:	d908      	bls.n	800c126 <pbuf_remove_header+0x5a>
 800c114:	4b12      	ldr	r3, [pc, #72]	; (800c160 <pbuf_remove_header+0x94>)
 800c116:	f240 2255 	movw	r2, #597	; 0x255
 800c11a:	4914      	ldr	r1, [pc, #80]	; (800c16c <pbuf_remove_header+0xa0>)
 800c11c:	4812      	ldr	r0, [pc, #72]	; (800c168 <pbuf_remove_header+0x9c>)
 800c11e:	f009 fe1d 	bl	8015d5c <iprintf>
 800c122:	2301      	movs	r3, #1
 800c124:	e017      	b.n	800c156 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	441a      	add	r2, r3
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	895a      	ldrh	r2, [r3, #10]
 800c13c:	89fb      	ldrh	r3, [r7, #14]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	b29a      	uxth	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	891a      	ldrh	r2, [r3, #8]
 800c14a:	89fb      	ldrh	r3, [r7, #14]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	b29a      	uxth	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	08018238 	.word	0x08018238
 800c164:	0801839c 	.word	0x0801839c
 800c168:	08018298 	.word	0x08018298
 800c16c:	080183a8 	.word	0x080183a8

0800c170 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	807b      	strh	r3, [r7, #2]
 800c17c:	4613      	mov	r3, r2
 800c17e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c180:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c184:	2b00      	cmp	r3, #0
 800c186:	da08      	bge.n	800c19a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c188:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c18c:	425b      	negs	r3, r3
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff ff9b 	bl	800c0cc <pbuf_remove_header>
 800c196:	4603      	mov	r3, r0
 800c198:	e007      	b.n	800c1aa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c19a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c19e:	787a      	ldrb	r2, [r7, #1]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f7ff ff1a 	bl	800bfdc <pbuf_add_header_impl>
 800c1a8:	4603      	mov	r3, r0
  }
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3708      	adds	r7, #8
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c1be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7ff ffd2 	bl	800c170 <pbuf_header_impl>
 800c1cc:	4603      	mov	r3, r0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b088      	sub	sp, #32
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10b      	bne.n	800c1fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d106      	bne.n	800c1fa <pbuf_free+0x22>
 800c1ec:	4b3b      	ldr	r3, [pc, #236]	; (800c2dc <pbuf_free+0x104>)
 800c1ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c1f2:	493b      	ldr	r1, [pc, #236]	; (800c2e0 <pbuf_free+0x108>)
 800c1f4:	483b      	ldr	r0, [pc, #236]	; (800c2e4 <pbuf_free+0x10c>)
 800c1f6:	f009 fdb1 	bl	8015d5c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e069      	b.n	800c2d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c202:	e062      	b.n	800c2ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c204:	f009 fbd6 	bl	80159b4 <sys_arch_protect>
 800c208:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	7b9b      	ldrb	r3, [r3, #14]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <pbuf_free+0x48>
 800c212:	4b32      	ldr	r3, [pc, #200]	; (800c2dc <pbuf_free+0x104>)
 800c214:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c218:	4933      	ldr	r1, [pc, #204]	; (800c2e8 <pbuf_free+0x110>)
 800c21a:	4832      	ldr	r0, [pc, #200]	; (800c2e4 <pbuf_free+0x10c>)
 800c21c:	f009 fd9e 	bl	8015d5c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	7b9b      	ldrb	r3, [r3, #14]
 800c224:	3b01      	subs	r3, #1
 800c226:	b2da      	uxtb	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	739a      	strb	r2, [r3, #14]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	7b9b      	ldrb	r3, [r3, #14]
 800c230:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c232:	69b8      	ldr	r0, [r7, #24]
 800c234:	f009 fbcc 	bl	80159d0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d143      	bne.n	800c2c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7b1b      	ldrb	r3, [r3, #12]
 800c248:	f003 030f 	and.w	r3, r3, #15
 800c24c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	7b5b      	ldrb	r3, [r3, #13]
 800c252:	f003 0302 	and.w	r3, r3, #2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d011      	beq.n	800c27e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d106      	bne.n	800c274 <pbuf_free+0x9c>
 800c266:	4b1d      	ldr	r3, [pc, #116]	; (800c2dc <pbuf_free+0x104>)
 800c268:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c26c:	491f      	ldr	r1, [pc, #124]	; (800c2ec <pbuf_free+0x114>)
 800c26e:	481d      	ldr	r0, [pc, #116]	; (800c2e4 <pbuf_free+0x10c>)
 800c270:	f009 fd74 	bl	8015d5c <iprintf>
        pc->custom_free_function(p);
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4798      	blx	r3
 800c27c:	e01d      	b.n	800c2ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d104      	bne.n	800c28e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	200c      	movs	r0, #12
 800c288:	f7ff f902 	bl	800b490 <memp_free>
 800c28c:	e015      	b.n	800c2ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c28e:	7bfb      	ldrb	r3, [r7, #15]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d104      	bne.n	800c29e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c294:	6879      	ldr	r1, [r7, #4]
 800c296:	200b      	movs	r0, #11
 800c298:	f7ff f8fa 	bl	800b490 <memp_free>
 800c29c:	e00d      	b.n	800c2ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d103      	bne.n	800c2ac <pbuf_free+0xd4>
          mem_free(p);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f7fe fd85 	bl	800adb4 <mem_free>
 800c2aa:	e006      	b.n	800c2ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c2ac:	4b0b      	ldr	r3, [pc, #44]	; (800c2dc <pbuf_free+0x104>)
 800c2ae:	f240 320f 	movw	r2, #783	; 0x30f
 800c2b2:	490f      	ldr	r1, [pc, #60]	; (800c2f0 <pbuf_free+0x118>)
 800c2b4:	480b      	ldr	r0, [pc, #44]	; (800c2e4 <pbuf_free+0x10c>)
 800c2b6:	f009 fd51 	bl	8015d5c <iprintf>
        }
      }
      count++;
 800c2ba:	7ffb      	ldrb	r3, [r7, #31]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	607b      	str	r3, [r7, #4]
 800c2c4:	e001      	b.n	800c2ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d199      	bne.n	800c204 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c2d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3720      	adds	r7, #32
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	08018238 	.word	0x08018238
 800c2e0:	0801839c 	.word	0x0801839c
 800c2e4:	08018298 	.word	0x08018298
 800c2e8:	080183c8 	.word	0x080183c8
 800c2ec:	080183e0 	.word	0x080183e0
 800c2f0:	08018404 	.word	0x08018404

0800c2f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c300:	e005      	b.n	800c30e <pbuf_clen+0x1a>
    ++len;
 800c302:	89fb      	ldrh	r3, [r7, #14]
 800c304:	3301      	adds	r3, #1
 800c306:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1f6      	bne.n	800c302 <pbuf_clen+0xe>
  }
  return len;
 800c314:	89fb      	ldrh	r3, [r7, #14]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
	...

0800c324 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d016      	beq.n	800c360 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c332:	f009 fb3f 	bl	80159b4 <sys_arch_protect>
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7b9b      	ldrb	r3, [r3, #14]
 800c33c:	3301      	adds	r3, #1
 800c33e:	b2da      	uxtb	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	739a      	strb	r2, [r3, #14]
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f009 fb43 	bl	80159d0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7b9b      	ldrb	r3, [r3, #14]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <pbuf_ref+0x3c>
 800c352:	4b05      	ldr	r3, [pc, #20]	; (800c368 <pbuf_ref+0x44>)
 800c354:	f240 3242 	movw	r2, #834	; 0x342
 800c358:	4904      	ldr	r1, [pc, #16]	; (800c36c <pbuf_ref+0x48>)
 800c35a:	4805      	ldr	r0, [pc, #20]	; (800c370 <pbuf_ref+0x4c>)
 800c35c:	f009 fcfe 	bl	8015d5c <iprintf>
  }
}
 800c360:	bf00      	nop
 800c362:	3710      	adds	r7, #16
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	08018238 	.word	0x08018238
 800c36c:	08018418 	.word	0x08018418
 800c370:	08018298 	.word	0x08018298

0800c374 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <pbuf_cat+0x16>
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d107      	bne.n	800c39a <pbuf_cat+0x26>
 800c38a:	4b20      	ldr	r3, [pc, #128]	; (800c40c <pbuf_cat+0x98>)
 800c38c:	f240 3259 	movw	r2, #857	; 0x359
 800c390:	491f      	ldr	r1, [pc, #124]	; (800c410 <pbuf_cat+0x9c>)
 800c392:	4820      	ldr	r0, [pc, #128]	; (800c414 <pbuf_cat+0xa0>)
 800c394:	f009 fce2 	bl	8015d5c <iprintf>
 800c398:	e034      	b.n	800c404 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e00a      	b.n	800c3b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	891a      	ldrh	r2, [r3, #8]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	891b      	ldrh	r3, [r3, #8]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1f0      	bne.n	800c3a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	891a      	ldrh	r2, [r3, #8]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	895b      	ldrh	r3, [r3, #10]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d006      	beq.n	800c3d8 <pbuf_cat+0x64>
 800c3ca:	4b10      	ldr	r3, [pc, #64]	; (800c40c <pbuf_cat+0x98>)
 800c3cc:	f240 3262 	movw	r2, #866	; 0x362
 800c3d0:	4911      	ldr	r1, [pc, #68]	; (800c418 <pbuf_cat+0xa4>)
 800c3d2:	4810      	ldr	r0, [pc, #64]	; (800c414 <pbuf_cat+0xa0>)
 800c3d4:	f009 fcc2 	bl	8015d5c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d006      	beq.n	800c3ee <pbuf_cat+0x7a>
 800c3e0:	4b0a      	ldr	r3, [pc, #40]	; (800c40c <pbuf_cat+0x98>)
 800c3e2:	f240 3263 	movw	r2, #867	; 0x363
 800c3e6:	490d      	ldr	r1, [pc, #52]	; (800c41c <pbuf_cat+0xa8>)
 800c3e8:	480a      	ldr	r0, [pc, #40]	; (800c414 <pbuf_cat+0xa0>)
 800c3ea:	f009 fcb7 	bl	8015d5c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	891a      	ldrh	r2, [r3, #8]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	891b      	ldrh	r3, [r3, #8]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	08018238 	.word	0x08018238
 800c410:	0801842c 	.word	0x0801842c
 800c414:	08018298 	.word	0x08018298
 800c418:	08018464 	.word	0x08018464
 800c41c:	08018494 	.word	0x08018494

0800c420 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c42a:	2300      	movs	r3, #0
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	2300      	movs	r3, #0
 800c430:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d008      	beq.n	800c44a <pbuf_copy+0x2a>
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d005      	beq.n	800c44a <pbuf_copy+0x2a>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	891a      	ldrh	r2, [r3, #8]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	891b      	ldrh	r3, [r3, #8]
 800c446:	429a      	cmp	r2, r3
 800c448:	d209      	bcs.n	800c45e <pbuf_copy+0x3e>
 800c44a:	4b57      	ldr	r3, [pc, #348]	; (800c5a8 <pbuf_copy+0x188>)
 800c44c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c450:	4956      	ldr	r1, [pc, #344]	; (800c5ac <pbuf_copy+0x18c>)
 800c452:	4857      	ldr	r0, [pc, #348]	; (800c5b0 <pbuf_copy+0x190>)
 800c454:	f009 fc82 	bl	8015d5c <iprintf>
 800c458:	f06f 030f 	mvn.w	r3, #15
 800c45c:	e09f      	b.n	800c59e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	895b      	ldrh	r3, [r3, #10]
 800c462:	461a      	mov	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	1ad2      	subs	r2, r2, r3
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	895b      	ldrh	r3, [r3, #10]
 800c46c:	4619      	mov	r1, r3
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	1acb      	subs	r3, r1, r3
 800c472:	429a      	cmp	r2, r3
 800c474:	d306      	bcc.n	800c484 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	895b      	ldrh	r3, [r3, #10]
 800c47a:	461a      	mov	r2, r3
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	e005      	b.n	800c490 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	895b      	ldrh	r3, [r3, #10]
 800c488:	461a      	mov	r2, r3
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	18d0      	adds	r0, r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	4413      	add	r3, r2
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	f009 fbcf 	bl	8015c46 <memcpy>
    offset_to += len;
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	4413      	add	r3, r2
 800c4ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	895b      	ldrh	r3, [r3, #10]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d906      	bls.n	800c4d2 <pbuf_copy+0xb2>
 800c4c4:	4b38      	ldr	r3, [pc, #224]	; (800c5a8 <pbuf_copy+0x188>)
 800c4c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c4ca:	493a      	ldr	r1, [pc, #232]	; (800c5b4 <pbuf_copy+0x194>)
 800c4cc:	4838      	ldr	r0, [pc, #224]	; (800c5b0 <pbuf_copy+0x190>)
 800c4ce:	f009 fc45 	bl	8015d5c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	895b      	ldrh	r3, [r3, #10]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d906      	bls.n	800c4ec <pbuf_copy+0xcc>
 800c4de:	4b32      	ldr	r3, [pc, #200]	; (800c5a8 <pbuf_copy+0x188>)
 800c4e0:	f240 32da 	movw	r2, #986	; 0x3da
 800c4e4:	4934      	ldr	r1, [pc, #208]	; (800c5b8 <pbuf_copy+0x198>)
 800c4e6:	4832      	ldr	r0, [pc, #200]	; (800c5b0 <pbuf_copy+0x190>)
 800c4e8:	f009 fc38 	bl	8015d5c <iprintf>
    if (offset_from >= p_from->len) {
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	895b      	ldrh	r3, [r3, #10]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d304      	bcc.n	800c502 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	895b      	ldrh	r3, [r3, #10]
 800c506:	461a      	mov	r2, r3
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d114      	bne.n	800c538 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10c      	bne.n	800c538 <pbuf_copy+0x118>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d009      	beq.n	800c538 <pbuf_copy+0x118>
 800c524:	4b20      	ldr	r3, [pc, #128]	; (800c5a8 <pbuf_copy+0x188>)
 800c526:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c52a:	4924      	ldr	r1, [pc, #144]	; (800c5bc <pbuf_copy+0x19c>)
 800c52c:	4820      	ldr	r0, [pc, #128]	; (800c5b0 <pbuf_copy+0x190>)
 800c52e:	f009 fc15 	bl	8015d5c <iprintf>
 800c532:	f06f 030f 	mvn.w	r3, #15
 800c536:	e032      	b.n	800c59e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d013      	beq.n	800c566 <pbuf_copy+0x146>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	895a      	ldrh	r2, [r3, #10]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	891b      	ldrh	r3, [r3, #8]
 800c546:	429a      	cmp	r2, r3
 800c548:	d10d      	bne.n	800c566 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d009      	beq.n	800c566 <pbuf_copy+0x146>
 800c552:	4b15      	ldr	r3, [pc, #84]	; (800c5a8 <pbuf_copy+0x188>)
 800c554:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c558:	4919      	ldr	r1, [pc, #100]	; (800c5c0 <pbuf_copy+0x1a0>)
 800c55a:	4815      	ldr	r0, [pc, #84]	; (800c5b0 <pbuf_copy+0x190>)
 800c55c:	f009 fbfe 	bl	8015d5c <iprintf>
 800c560:	f06f 0305 	mvn.w	r3, #5
 800c564:	e01b      	b.n	800c59e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d013      	beq.n	800c594 <pbuf_copy+0x174>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	895a      	ldrh	r2, [r3, #10]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	891b      	ldrh	r3, [r3, #8]
 800c574:	429a      	cmp	r2, r3
 800c576:	d10d      	bne.n	800c594 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d009      	beq.n	800c594 <pbuf_copy+0x174>
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <pbuf_copy+0x188>)
 800c582:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c586:	490e      	ldr	r1, [pc, #56]	; (800c5c0 <pbuf_copy+0x1a0>)
 800c588:	4809      	ldr	r0, [pc, #36]	; (800c5b0 <pbuf_copy+0x190>)
 800c58a:	f009 fbe7 	bl	8015d5c <iprintf>
 800c58e:	f06f 0305 	mvn.w	r3, #5
 800c592:	e004      	b.n	800c59e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f47f af61 	bne.w	800c45e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	08018238 	.word	0x08018238
 800c5ac:	080184e0 	.word	0x080184e0
 800c5b0:	08018298 	.word	0x08018298
 800c5b4:	08018510 	.word	0x08018510
 800c5b8:	08018528 	.word	0x08018528
 800c5bc:	08018544 	.word	0x08018544
 800c5c0:	08018554 	.word	0x08018554

0800c5c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b088      	sub	sp, #32
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	80fb      	strh	r3, [r7, #6]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d108      	bne.n	800c5fa <pbuf_copy_partial+0x36>
 800c5e8:	4b2b      	ldr	r3, [pc, #172]	; (800c698 <pbuf_copy_partial+0xd4>)
 800c5ea:	f240 420a 	movw	r2, #1034	; 0x40a
 800c5ee:	492b      	ldr	r1, [pc, #172]	; (800c69c <pbuf_copy_partial+0xd8>)
 800c5f0:	482b      	ldr	r0, [pc, #172]	; (800c6a0 <pbuf_copy_partial+0xdc>)
 800c5f2:	f009 fbb3 	bl	8015d5c <iprintf>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	e04a      	b.n	800c690 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d108      	bne.n	800c612 <pbuf_copy_partial+0x4e>
 800c600:	4b25      	ldr	r3, [pc, #148]	; (800c698 <pbuf_copy_partial+0xd4>)
 800c602:	f240 420b 	movw	r2, #1035	; 0x40b
 800c606:	4927      	ldr	r1, [pc, #156]	; (800c6a4 <pbuf_copy_partial+0xe0>)
 800c608:	4825      	ldr	r0, [pc, #148]	; (800c6a0 <pbuf_copy_partial+0xdc>)
 800c60a:	f009 fba7 	bl	8015d5c <iprintf>
 800c60e:	2300      	movs	r3, #0
 800c610:	e03e      	b.n	800c690 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	61fb      	str	r3, [r7, #28]
 800c616:	e034      	b.n	800c682 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c618:	88bb      	ldrh	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00a      	beq.n	800c634 <pbuf_copy_partial+0x70>
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	895b      	ldrh	r3, [r3, #10]
 800c622:	88ba      	ldrh	r2, [r7, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d305      	bcc.n	800c634 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	895b      	ldrh	r3, [r3, #10]
 800c62c:	88ba      	ldrh	r2, [r7, #4]
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	80bb      	strh	r3, [r7, #4]
 800c632:	e023      	b.n	800c67c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	895a      	ldrh	r2, [r3, #10]
 800c638:	88bb      	ldrh	r3, [r7, #4]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c63e:	8b3a      	ldrh	r2, [r7, #24]
 800c640:	88fb      	ldrh	r3, [r7, #6]
 800c642:	429a      	cmp	r2, r3
 800c644:	d901      	bls.n	800c64a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c646:	88fb      	ldrh	r3, [r7, #6]
 800c648:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c64a:	8b7b      	ldrh	r3, [r7, #26]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	18d0      	adds	r0, r2, r3
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	88bb      	ldrh	r3, [r7, #4]
 800c656:	4413      	add	r3, r2
 800c658:	8b3a      	ldrh	r2, [r7, #24]
 800c65a:	4619      	mov	r1, r3
 800c65c:	f009 faf3 	bl	8015c46 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c660:	8afa      	ldrh	r2, [r7, #22]
 800c662:	8b3b      	ldrh	r3, [r7, #24]
 800c664:	4413      	add	r3, r2
 800c666:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c668:	8b7a      	ldrh	r2, [r7, #26]
 800c66a:	8b3b      	ldrh	r3, [r7, #24]
 800c66c:	4413      	add	r3, r2
 800c66e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c670:	88fa      	ldrh	r2, [r7, #6]
 800c672:	8b3b      	ldrh	r3, [r7, #24]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	88fb      	ldrh	r3, [r7, #6]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <pbuf_copy_partial+0xca>
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1c4      	bne.n	800c618 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c68e:	8afb      	ldrh	r3, [r7, #22]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3720      	adds	r7, #32
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	08018238 	.word	0x08018238
 800c69c:	08018580 	.word	0x08018580
 800c6a0:	08018298 	.word	0x08018298
 800c6a4:	080185a0 	.word	0x080185a0

0800c6a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	603a      	str	r2, [r7, #0]
 800c6b2:	71fb      	strb	r3, [r7, #7]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	8919      	ldrh	r1, [r3, #8]
 800c6bc:	88ba      	ldrh	r2, [r7, #4]
 800c6be:	79fb      	ldrb	r3, [r7, #7]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff faa5 	bl	800bc10 <pbuf_alloc>
 800c6c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <pbuf_clone+0x2a>
    return NULL;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e011      	b.n	800c6f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f7ff fea3 	bl	800c420 <pbuf_copy>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c6de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d006      	beq.n	800c6f4 <pbuf_clone+0x4c>
 800c6e6:	4b06      	ldr	r3, [pc, #24]	; (800c700 <pbuf_clone+0x58>)
 800c6e8:	f240 5224 	movw	r2, #1316	; 0x524
 800c6ec:	4905      	ldr	r1, [pc, #20]	; (800c704 <pbuf_clone+0x5c>)
 800c6ee:	4806      	ldr	r0, [pc, #24]	; (800c708 <pbuf_clone+0x60>)
 800c6f0:	f009 fb34 	bl	8015d5c <iprintf>
  return q;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3710      	adds	r7, #16
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	08018238 	.word	0x08018238
 800c704:	080186ac 	.word	0x080186ac
 800c708:	08018298 	.word	0x08018298

0800c70c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c710:	f009 fbb2 	bl	8015e78 <rand>
 800c714:	4603      	mov	r3, r0
 800c716:	b29b      	uxth	r3, r3
 800c718:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c722:	b29a      	uxth	r2, r3
 800c724:	4b01      	ldr	r3, [pc, #4]	; (800c72c <tcp_init+0x20>)
 800c726:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c728:	bf00      	nop
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20000010 	.word	0x20000010

0800c730 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7d1b      	ldrb	r3, [r3, #20]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d105      	bne.n	800c74c <tcp_free+0x1c>
 800c740:	4b06      	ldr	r3, [pc, #24]	; (800c75c <tcp_free+0x2c>)
 800c742:	22d4      	movs	r2, #212	; 0xd4
 800c744:	4906      	ldr	r1, [pc, #24]	; (800c760 <tcp_free+0x30>)
 800c746:	4807      	ldr	r0, [pc, #28]	; (800c764 <tcp_free+0x34>)
 800c748:	f009 fb08 	bl	8015d5c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c74c:	6879      	ldr	r1, [r7, #4]
 800c74e:	2001      	movs	r0, #1
 800c750:	f7fe fe9e 	bl	800b490 <memp_free>
}
 800c754:	bf00      	nop
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	08018738 	.word	0x08018738
 800c760:	08018768 	.word	0x08018768
 800c764:	0801877c 	.word	0x0801877c

0800c768 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7d1b      	ldrb	r3, [r3, #20]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d105      	bne.n	800c784 <tcp_free_listen+0x1c>
 800c778:	4b06      	ldr	r3, [pc, #24]	; (800c794 <tcp_free_listen+0x2c>)
 800c77a:	22df      	movs	r2, #223	; 0xdf
 800c77c:	4906      	ldr	r1, [pc, #24]	; (800c798 <tcp_free_listen+0x30>)
 800c77e:	4807      	ldr	r0, [pc, #28]	; (800c79c <tcp_free_listen+0x34>)
 800c780:	f009 faec 	bl	8015d5c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c784:	6879      	ldr	r1, [r7, #4]
 800c786:	2002      	movs	r0, #2
 800c788:	f7fe fe82 	bl	800b490 <memp_free>
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	08018738 	.word	0x08018738
 800c798:	080187a4 	.word	0x080187a4
 800c79c:	0801877c 	.word	0x0801877c

0800c7a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c7a4:	f001 f8a6 	bl	800d8f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <tcp_tmr+0x28>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <tcp_tmr+0x28>)
 800c7b2:	701a      	strb	r2, [r3, #0]
 800c7b4:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <tcp_tmr+0x28>)
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c7c0:	f000 fd58 	bl	800d274 <tcp_slowtmr>
  }
}
 800c7c4:	bf00      	nop
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20004ad9 	.word	0x20004ad9

0800c7cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d105      	bne.n	800c7e8 <tcp_remove_listener+0x1c>
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <tcp_remove_listener+0x48>)
 800c7de:	22ff      	movs	r2, #255	; 0xff
 800c7e0:	490d      	ldr	r1, [pc, #52]	; (800c818 <tcp_remove_listener+0x4c>)
 800c7e2:	480e      	ldr	r0, [pc, #56]	; (800c81c <tcp_remove_listener+0x50>)
 800c7e4:	f009 faba 	bl	8015d5c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	60fb      	str	r3, [r7, #12]
 800c7ec:	e00a      	b.n	800c804 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d102      	bne.n	800c7fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f1      	bne.n	800c7ee <tcp_remove_listener+0x22>
    }
  }
}
 800c80a:	bf00      	nop
 800c80c:	bf00      	nop
 800c80e:	3710      	adds	r7, #16
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	08018738 	.word	0x08018738
 800c818:	080187c0 	.word	0x080187c0
 800c81c:	0801877c 	.word	0x0801877c

0800c820 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d106      	bne.n	800c83c <tcp_listen_closed+0x1c>
 800c82e:	4b14      	ldr	r3, [pc, #80]	; (800c880 <tcp_listen_closed+0x60>)
 800c830:	f240 1211 	movw	r2, #273	; 0x111
 800c834:	4913      	ldr	r1, [pc, #76]	; (800c884 <tcp_listen_closed+0x64>)
 800c836:	4814      	ldr	r0, [pc, #80]	; (800c888 <tcp_listen_closed+0x68>)
 800c838:	f009 fa90 	bl	8015d5c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7d1b      	ldrb	r3, [r3, #20]
 800c840:	2b01      	cmp	r3, #1
 800c842:	d006      	beq.n	800c852 <tcp_listen_closed+0x32>
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <tcp_listen_closed+0x60>)
 800c846:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c84a:	4910      	ldr	r1, [pc, #64]	; (800c88c <tcp_listen_closed+0x6c>)
 800c84c:	480e      	ldr	r0, [pc, #56]	; (800c888 <tcp_listen_closed+0x68>)
 800c84e:	f009 fa85 	bl	8015d5c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c852:	2301      	movs	r3, #1
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e00b      	b.n	800c870 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c858:	4a0d      	ldr	r2, [pc, #52]	; (800c890 <tcp_listen_closed+0x70>)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6879      	ldr	r1, [r7, #4]
 800c864:	4618      	mov	r0, r3
 800c866:	f7ff ffb1 	bl	800c7cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	3301      	adds	r3, #1
 800c86e:	60fb      	str	r3, [r7, #12]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b03      	cmp	r3, #3
 800c874:	d9f0      	bls.n	800c858 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c876:	bf00      	nop
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08018738 	.word	0x08018738
 800c884:	080187e8 	.word	0x080187e8
 800c888:	0801877c 	.word	0x0801877c
 800c88c:	080187f4 	.word	0x080187f4
 800c890:	0801a798 	.word	0x0801a798

0800c894 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c894:	b5b0      	push	{r4, r5, r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af04      	add	r7, sp, #16
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	460b      	mov	r3, r1
 800c89e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <tcp_close_shutdown+0x20>
 800c8a6:	4b63      	ldr	r3, [pc, #396]	; (800ca34 <tcp_close_shutdown+0x1a0>)
 800c8a8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c8ac:	4962      	ldr	r1, [pc, #392]	; (800ca38 <tcp_close_shutdown+0x1a4>)
 800c8ae:	4863      	ldr	r0, [pc, #396]	; (800ca3c <tcp_close_shutdown+0x1a8>)
 800c8b0:	f009 fa54 	bl	8015d5c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d066      	beq.n	800c988 <tcp_close_shutdown+0xf4>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7d1b      	ldrb	r3, [r3, #20]
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d003      	beq.n	800c8ca <tcp_close_shutdown+0x36>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	7d1b      	ldrb	r3, [r3, #20]
 800c8c6:	2b07      	cmp	r3, #7
 800c8c8:	d15e      	bne.n	800c988 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d104      	bne.n	800c8dc <tcp_close_shutdown+0x48>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c8da:	d055      	beq.n	800c988 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	8b5b      	ldrh	r3, [r3, #26]
 800c8e0:	f003 0310 	and.w	r3, r3, #16
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d106      	bne.n	800c8f6 <tcp_close_shutdown+0x62>
 800c8e8:	4b52      	ldr	r3, [pc, #328]	; (800ca34 <tcp_close_shutdown+0x1a0>)
 800c8ea:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c8ee:	4954      	ldr	r1, [pc, #336]	; (800ca40 <tcp_close_shutdown+0x1ac>)
 800c8f0:	4852      	ldr	r0, [pc, #328]	; (800ca3c <tcp_close_shutdown+0x1a8>)
 800c8f2:	f009 fa33 	bl	8015d5c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c8fe:	687d      	ldr	r5, [r7, #4]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3304      	adds	r3, #4
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	8ad2      	ldrh	r2, [r2, #22]
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	8b09      	ldrh	r1, [r1, #24]
 800c90c:	9102      	str	r1, [sp, #8]
 800c90e:	9201      	str	r2, [sp, #4]
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462b      	mov	r3, r5
 800c914:	4622      	mov	r2, r4
 800c916:	4601      	mov	r1, r0
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f005 fdb7 	bl	801248c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f001 fb98 	bl	800e054 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c924:	4b47      	ldr	r3, [pc, #284]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d105      	bne.n	800c93a <tcp_close_shutdown+0xa6>
 800c92e:	4b45      	ldr	r3, [pc, #276]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	68db      	ldr	r3, [r3, #12]
 800c934:	4a43      	ldr	r2, [pc, #268]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	e013      	b.n	800c962 <tcp_close_shutdown+0xce>
 800c93a:	4b42      	ldr	r3, [pc, #264]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e00c      	b.n	800c95c <tcp_close_shutdown+0xc8>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d104      	bne.n	800c956 <tcp_close_shutdown+0xc2>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	60da      	str	r2, [r3, #12]
 800c954:	e005      	b.n	800c962 <tcp_close_shutdown+0xce>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	60fb      	str	r3, [r7, #12]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1ef      	bne.n	800c942 <tcp_close_shutdown+0xae>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2200      	movs	r2, #0
 800c966:	60da      	str	r2, [r3, #12]
 800c968:	4b37      	ldr	r3, [pc, #220]	; (800ca48 <tcp_close_shutdown+0x1b4>)
 800c96a:	2201      	movs	r2, #1
 800c96c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c96e:	4b37      	ldr	r3, [pc, #220]	; (800ca4c <tcp_close_shutdown+0x1b8>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	429a      	cmp	r2, r3
 800c976:	d102      	bne.n	800c97e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c978:	f004 f82c 	bl	80109d4 <tcp_trigger_input_pcb_close>
 800c97c:	e002      	b.n	800c984 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7ff fed6 	bl	800c730 <tcp_free>
      }
      return ERR_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	e050      	b.n	800ca2a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	7d1b      	ldrb	r3, [r3, #20]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d03b      	beq.n	800ca08 <tcp_close_shutdown+0x174>
 800c990:	2b02      	cmp	r3, #2
 800c992:	dc44      	bgt.n	800ca1e <tcp_close_shutdown+0x18a>
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <tcp_close_shutdown+0x10a>
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d02a      	beq.n	800c9f2 <tcp_close_shutdown+0x15e>
 800c99c:	e03f      	b.n	800ca1e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	8adb      	ldrh	r3, [r3, #22]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d021      	beq.n	800c9ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9a6:	4b2a      	ldr	r3, [pc, #168]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d105      	bne.n	800c9bc <tcp_close_shutdown+0x128>
 800c9b0:	4b27      	ldr	r3, [pc, #156]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	68db      	ldr	r3, [r3, #12]
 800c9b6:	4a26      	ldr	r2, [pc, #152]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9b8:	6013      	str	r3, [r2, #0]
 800c9ba:	e013      	b.n	800c9e4 <tcp_close_shutdown+0x150>
 800c9bc:	4b24      	ldr	r3, [pc, #144]	; (800ca50 <tcp_close_shutdown+0x1bc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60bb      	str	r3, [r7, #8]
 800c9c2:	e00c      	b.n	800c9de <tcp_close_shutdown+0x14a>
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	429a      	cmp	r2, r3
 800c9cc:	d104      	bne.n	800c9d8 <tcp_close_shutdown+0x144>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	60da      	str	r2, [r3, #12]
 800c9d6:	e005      	b.n	800c9e4 <tcp_close_shutdown+0x150>
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	68db      	ldr	r3, [r3, #12]
 800c9dc:	60bb      	str	r3, [r7, #8]
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1ef      	bne.n	800c9c4 <tcp_close_shutdown+0x130>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7ff fea0 	bl	800c730 <tcp_free>
      break;
 800c9f0:	e01a      	b.n	800ca28 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f7ff ff14 	bl	800c820 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c9f8:	6879      	ldr	r1, [r7, #4]
 800c9fa:	4816      	ldr	r0, [pc, #88]	; (800ca54 <tcp_close_shutdown+0x1c0>)
 800c9fc:	f001 fb7a 	bl	800e0f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7ff feb1 	bl	800c768 <tcp_free_listen>
      break;
 800ca06:	e00f      	b.n	800ca28 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca08:	6879      	ldr	r1, [r7, #4]
 800ca0a:	480e      	ldr	r0, [pc, #56]	; (800ca44 <tcp_close_shutdown+0x1b0>)
 800ca0c:	f001 fb72 	bl	800e0f4 <tcp_pcb_remove>
 800ca10:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <tcp_close_shutdown+0x1b4>)
 800ca12:	2201      	movs	r2, #1
 800ca14:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff fe8a 	bl	800c730 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca1c:	e004      	b.n	800ca28 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f81a 	bl	800ca58 <tcp_close_shutdown_fin>
 800ca24:	4603      	mov	r3, r0
 800ca26:	e000      	b.n	800ca2a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bdb0      	pop	{r4, r5, r7, pc}
 800ca32:	bf00      	nop
 800ca34:	08018738 	.word	0x08018738
 800ca38:	0801880c 	.word	0x0801880c
 800ca3c:	0801877c 	.word	0x0801877c
 800ca40:	0801882c 	.word	0x0801882c
 800ca44:	2000d85c 	.word	0x2000d85c
 800ca48:	2000d858 	.word	0x2000d858
 800ca4c:	2000d870 	.word	0x2000d870
 800ca50:	2000d868 	.word	0x2000d868
 800ca54:	2000d864 	.word	0x2000d864

0800ca58 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d106      	bne.n	800ca74 <tcp_close_shutdown_fin+0x1c>
 800ca66:	4b2e      	ldr	r3, [pc, #184]	; (800cb20 <tcp_close_shutdown_fin+0xc8>)
 800ca68:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ca6c:	492d      	ldr	r1, [pc, #180]	; (800cb24 <tcp_close_shutdown_fin+0xcc>)
 800ca6e:	482e      	ldr	r0, [pc, #184]	; (800cb28 <tcp_close_shutdown_fin+0xd0>)
 800ca70:	f009 f974 	bl	8015d5c <iprintf>

  switch (pcb->state) {
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7d1b      	ldrb	r3, [r3, #20]
 800ca78:	2b07      	cmp	r3, #7
 800ca7a:	d020      	beq.n	800cabe <tcp_close_shutdown_fin+0x66>
 800ca7c:	2b07      	cmp	r3, #7
 800ca7e:	dc2b      	bgt.n	800cad8 <tcp_close_shutdown_fin+0x80>
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d002      	beq.n	800ca8a <tcp_close_shutdown_fin+0x32>
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d00d      	beq.n	800caa4 <tcp_close_shutdown_fin+0x4c>
 800ca88:	e026      	b.n	800cad8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f004 fe0c 	bl	80116a8 <tcp_send_fin>
 800ca90:	4603      	mov	r3, r0
 800ca92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ca94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d11f      	bne.n	800cadc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2205      	movs	r2, #5
 800caa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800caa2:	e01b      	b.n	800cadc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f004 fdff 	bl	80116a8 <tcp_send_fin>
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800caae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d114      	bne.n	800cae0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2205      	movs	r2, #5
 800caba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cabc:	e010      	b.n	800cae0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f004 fdf2 	bl	80116a8 <tcp_send_fin>
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d109      	bne.n	800cae4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2209      	movs	r2, #9
 800cad4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cad6:	e005      	b.n	800cae4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cad8:	2300      	movs	r3, #0
 800cada:	e01c      	b.n	800cb16 <tcp_close_shutdown_fin+0xbe>
      break;
 800cadc:	bf00      	nop
 800cade:	e002      	b.n	800cae6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <tcp_close_shutdown_fin+0x8e>
      break;
 800cae4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d103      	bne.n	800caf6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f004 ff18 	bl	8011924 <tcp_output>
 800caf4:	e00d      	b.n	800cb12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800caf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cafa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cafe:	d108      	bne.n	800cb12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	8b5b      	ldrh	r3, [r3, #26]
 800cb04:	f043 0308 	orr.w	r3, r3, #8
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e001      	b.n	800cb16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	08018738 	.word	0x08018738
 800cb24:	080187e8 	.word	0x080187e8
 800cb28:	0801877c 	.word	0x0801877c

0800cb2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d109      	bne.n	800cb4e <tcp_close+0x22>
 800cb3a:	4b0f      	ldr	r3, [pc, #60]	; (800cb78 <tcp_close+0x4c>)
 800cb3c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb40:	490e      	ldr	r1, [pc, #56]	; (800cb7c <tcp_close+0x50>)
 800cb42:	480f      	ldr	r0, [pc, #60]	; (800cb80 <tcp_close+0x54>)
 800cb44:	f009 f90a 	bl	8015d5c <iprintf>
 800cb48:	f06f 030f 	mvn.w	r3, #15
 800cb4c:	e00f      	b.n	800cb6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7d1b      	ldrb	r3, [r3, #20]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d006      	beq.n	800cb64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8b5b      	ldrh	r3, [r3, #26]
 800cb5a:	f043 0310 	orr.w	r3, r3, #16
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cb64:	2101      	movs	r1, #1
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7ff fe94 	bl	800c894 <tcp_close_shutdown>
 800cb6c:	4603      	mov	r3, r0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	08018738 	.word	0x08018738
 800cb7c:	08018848 	.word	0x08018848
 800cb80:	0801877c 	.word	0x0801877c

0800cb84 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d109      	bne.n	800cbaa <tcp_shutdown+0x26>
 800cb96:	4b26      	ldr	r3, [pc, #152]	; (800cc30 <tcp_shutdown+0xac>)
 800cb98:	f240 2207 	movw	r2, #519	; 0x207
 800cb9c:	4925      	ldr	r1, [pc, #148]	; (800cc34 <tcp_shutdown+0xb0>)
 800cb9e:	4826      	ldr	r0, [pc, #152]	; (800cc38 <tcp_shutdown+0xb4>)
 800cba0:	f009 f8dc 	bl	8015d5c <iprintf>
 800cba4:	f06f 030f 	mvn.w	r3, #15
 800cba8:	e03d      	b.n	800cc26 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	7d1b      	ldrb	r3, [r3, #20]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d102      	bne.n	800cbb8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800cbb2:	f06f 030a 	mvn.w	r3, #10
 800cbb6:	e036      	b.n	800cc26 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01b      	beq.n	800cbf6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	8b5b      	ldrh	r3, [r3, #26]
 800cbc2:	f043 0310 	orr.w	r3, r3, #16
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d005      	beq.n	800cbde <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cbd2:	2101      	movs	r1, #1
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f7ff fe5d 	bl	800c894 <tcp_close_shutdown>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	e023      	b.n	800cc26 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d007      	beq.n	800cbf6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff faf4 	bl	800c1d8 <pbuf_free>
      pcb->refused_data = NULL;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d013      	beq.n	800cc24 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	7d1b      	ldrb	r3, [r3, #20]
 800cc00:	2b04      	cmp	r3, #4
 800cc02:	dc02      	bgt.n	800cc0a <tcp_shutdown+0x86>
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	da02      	bge.n	800cc0e <tcp_shutdown+0x8a>
 800cc08:	e009      	b.n	800cc1e <tcp_shutdown+0x9a>
 800cc0a:	2b07      	cmp	r3, #7
 800cc0c:	d107      	bne.n	800cc1e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	4619      	mov	r1, r3
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fe3d 	bl	800c894 <tcp_close_shutdown>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	e003      	b.n	800cc26 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800cc1e:	f06f 030a 	mvn.w	r3, #10
 800cc22:	e000      	b.n	800cc26 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	08018738 	.word	0x08018738
 800cc34:	08018860 	.word	0x08018860
 800cc38:	0801877c 	.word	0x0801877c

0800cc3c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b08e      	sub	sp, #56	; 0x38
 800cc40:	af04      	add	r7, sp, #16
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d107      	bne.n	800cc5c <tcp_abandon+0x20>
 800cc4c:	4b52      	ldr	r3, [pc, #328]	; (800cd98 <tcp_abandon+0x15c>)
 800cc4e:	f240 223d 	movw	r2, #573	; 0x23d
 800cc52:	4952      	ldr	r1, [pc, #328]	; (800cd9c <tcp_abandon+0x160>)
 800cc54:	4852      	ldr	r0, [pc, #328]	; (800cda0 <tcp_abandon+0x164>)
 800cc56:	f009 f881 	bl	8015d5c <iprintf>
 800cc5a:	e099      	b.n	800cd90 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7d1b      	ldrb	r3, [r3, #20]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d106      	bne.n	800cc72 <tcp_abandon+0x36>
 800cc64:	4b4c      	ldr	r3, [pc, #304]	; (800cd98 <tcp_abandon+0x15c>)
 800cc66:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cc6a:	494e      	ldr	r1, [pc, #312]	; (800cda4 <tcp_abandon+0x168>)
 800cc6c:	484c      	ldr	r0, [pc, #304]	; (800cda0 <tcp_abandon+0x164>)
 800cc6e:	f009 f875 	bl	8015d5c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	7d1b      	ldrb	r3, [r3, #20]
 800cc76:	2b0a      	cmp	r3, #10
 800cc78:	d107      	bne.n	800cc8a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc7a:	6879      	ldr	r1, [r7, #4]
 800cc7c:	484a      	ldr	r0, [pc, #296]	; (800cda8 <tcp_abandon+0x16c>)
 800cc7e:	f001 fa39 	bl	800e0f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff fd54 	bl	800c730 <tcp_free>
 800cc88:	e082      	b.n	800cd90 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc96:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc9c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cca4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	691b      	ldr	r3, [r3, #16]
 800ccaa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	7d1b      	ldrb	r3, [r3, #20]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d126      	bne.n	800cd02 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	8adb      	ldrh	r3, [r3, #22]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d02e      	beq.n	800cd1a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ccbc:	4b3b      	ldr	r3, [pc, #236]	; (800cdac <tcp_abandon+0x170>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d105      	bne.n	800ccd2 <tcp_abandon+0x96>
 800ccc6:	4b39      	ldr	r3, [pc, #228]	; (800cdac <tcp_abandon+0x170>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	4a37      	ldr	r2, [pc, #220]	; (800cdac <tcp_abandon+0x170>)
 800ccce:	6013      	str	r3, [r2, #0]
 800ccd0:	e013      	b.n	800ccfa <tcp_abandon+0xbe>
 800ccd2:	4b36      	ldr	r3, [pc, #216]	; (800cdac <tcp_abandon+0x170>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	61fb      	str	r3, [r7, #28]
 800ccd8:	e00c      	b.n	800ccf4 <tcp_abandon+0xb8>
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d104      	bne.n	800ccee <tcp_abandon+0xb2>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68da      	ldr	r2, [r3, #12]
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	60da      	str	r2, [r3, #12]
 800ccec:	e005      	b.n	800ccfa <tcp_abandon+0xbe>
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	61fb      	str	r3, [r7, #28]
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1ef      	bne.n	800ccda <tcp_abandon+0x9e>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	60da      	str	r2, [r3, #12]
 800cd00:	e00b      	b.n	800cd1a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	8adb      	ldrh	r3, [r3, #22]
 800cd0a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cd0c:	6879      	ldr	r1, [r7, #4]
 800cd0e:	4828      	ldr	r0, [pc, #160]	; (800cdb0 <tcp_abandon+0x174>)
 800cd10:	f001 f9f0 	bl	800e0f4 <tcp_pcb_remove>
 800cd14:	4b27      	ldr	r3, [pc, #156]	; (800cdb4 <tcp_abandon+0x178>)
 800cd16:	2201      	movs	r2, #1
 800cd18:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d004      	beq.n	800cd2c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd26:	4618      	mov	r0, r3
 800cd28:	f000 fec4 	bl	800dab4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d004      	beq.n	800cd3e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 febb 	bl	800dab4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d004      	beq.n	800cd50 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 feb2 	bl	800dab4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00e      	beq.n	800cd74 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	8b12      	ldrh	r2, [r2, #24]
 800cd60:	9202      	str	r2, [sp, #8]
 800cd62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd64:	9201      	str	r2, [sp, #4]
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	460b      	mov	r3, r1
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	69b9      	ldr	r1, [r7, #24]
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f005 fb8c 	bl	801248c <tcp_rst>
    }
    last_state = pcb->state;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7d1b      	ldrb	r3, [r3, #20]
 800cd78:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f7ff fcd8 	bl	800c730 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d004      	beq.n	800cd90 <tcp_abandon+0x154>
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f06f 010c 	mvn.w	r1, #12
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	4798      	blx	r3
  }
}
 800cd90:	3728      	adds	r7, #40	; 0x28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	08018738 	.word	0x08018738
 800cd9c:	0801887c 	.word	0x0801887c
 800cda0:	0801877c 	.word	0x0801877c
 800cda4:	08018898 	.word	0x08018898
 800cda8:	2000d86c 	.word	0x2000d86c
 800cdac:	2000d868 	.word	0x2000d868
 800cdb0:	2000d85c 	.word	0x2000d85c
 800cdb4:	2000d858 	.word	0x2000d858

0800cdb8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff ff3a 	bl	800cc3c <tcp_abandon>
}
 800cdc8:	bf00      	nop
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b088      	sub	sp, #32
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	4613      	mov	r3, r2
 800cddc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cdde:	2304      	movs	r3, #4
 800cde0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cde8:	4b3e      	ldr	r3, [pc, #248]	; (800cee4 <tcp_bind+0x114>)
 800cdea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d109      	bne.n	800ce06 <tcp_bind+0x36>
 800cdf2:	4b3d      	ldr	r3, [pc, #244]	; (800cee8 <tcp_bind+0x118>)
 800cdf4:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cdf8:	493c      	ldr	r1, [pc, #240]	; (800ceec <tcp_bind+0x11c>)
 800cdfa:	483d      	ldr	r0, [pc, #244]	; (800cef0 <tcp_bind+0x120>)
 800cdfc:	f008 ffae 	bl	8015d5c <iprintf>
 800ce00:	f06f 030f 	mvn.w	r3, #15
 800ce04:	e06a      	b.n	800cedc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	7d1b      	ldrb	r3, [r3, #20]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d009      	beq.n	800ce22 <tcp_bind+0x52>
 800ce0e:	4b36      	ldr	r3, [pc, #216]	; (800cee8 <tcp_bind+0x118>)
 800ce10:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ce14:	4937      	ldr	r1, [pc, #220]	; (800cef4 <tcp_bind+0x124>)
 800ce16:	4836      	ldr	r0, [pc, #216]	; (800cef0 <tcp_bind+0x120>)
 800ce18:	f008 ffa0 	bl	8015d5c <iprintf>
 800ce1c:	f06f 0305 	mvn.w	r3, #5
 800ce20:	e05c      	b.n	800cedc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ce22:	88fb      	ldrh	r3, [r7, #6]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <tcp_bind+0x6c>
    port = tcp_new_port();
 800ce28:	f000 f9de 	bl	800d1e8 <tcp_new_port>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d135      	bne.n	800cea2 <tcp_bind+0xd2>
      return ERR_BUF;
 800ce36:	f06f 0301 	mvn.w	r3, #1
 800ce3a:	e04f      	b.n	800cedc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	61fb      	str	r3, [r7, #28]
 800ce40:	e02b      	b.n	800ce9a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce42:	4a2d      	ldr	r2, [pc, #180]	; (800cef8 <tcp_bind+0x128>)
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	61bb      	str	r3, [r7, #24]
 800ce4e:	e01e      	b.n	800ce8e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	8adb      	ldrh	r3, [r3, #22]
 800ce54:	88fa      	ldrh	r2, [r7, #6]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d116      	bne.n	800ce88 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce5a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d010      	beq.n	800ce82 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00c      	beq.n	800ce82 <tcp_bind+0xb2>
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d009      	beq.n	800ce82 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d005      	beq.n	800ce82 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d102      	bne.n	800ce88 <tcp_bind+0xb8>
              return ERR_USE;
 800ce82:	f06f 0307 	mvn.w	r3, #7
 800ce86:	e029      	b.n	800cedc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	61bb      	str	r3, [r7, #24]
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1dd      	bne.n	800ce50 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	3301      	adds	r3, #1
 800ce98:	61fb      	str	r3, [r7, #28]
 800ce9a:	69fa      	ldr	r2, [r7, #28]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	dbcf      	blt.n	800ce42 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00c      	beq.n	800cec2 <tcp_bind+0xf2>
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d008      	beq.n	800cec2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <tcp_bind+0xec>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	e000      	b.n	800cebe <tcp_bind+0xee>
 800cebc:	2300      	movs	r3, #0
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	88fa      	ldrh	r2, [r7, #6]
 800cec6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <tcp_bind+0x12c>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	60da      	str	r2, [r3, #12]
 800ced0:	4a0a      	ldr	r2, [pc, #40]	; (800cefc <tcp_bind+0x12c>)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6013      	str	r3, [r2, #0]
 800ced6:	f005 fc9b 	bl	8012810 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3720      	adds	r7, #32
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	0801a7c0 	.word	0x0801a7c0
 800cee8:	08018738 	.word	0x08018738
 800ceec:	080188cc 	.word	0x080188cc
 800cef0:	0801877c 	.word	0x0801877c
 800cef4:	080188e4 	.word	0x080188e4
 800cef8:	0801a798 	.word	0x0801a798
 800cefc:	2000d868 	.word	0x2000d868

0800cf00 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <tcp_accept_null+0x22>
 800cf14:	4b07      	ldr	r3, [pc, #28]	; (800cf34 <tcp_accept_null+0x34>)
 800cf16:	f240 320f 	movw	r2, #783	; 0x30f
 800cf1a:	4907      	ldr	r1, [pc, #28]	; (800cf38 <tcp_accept_null+0x38>)
 800cf1c:	4807      	ldr	r0, [pc, #28]	; (800cf3c <tcp_accept_null+0x3c>)
 800cf1e:	f008 ff1d 	bl	8015d5c <iprintf>

  tcp_abort(pcb);
 800cf22:	68b8      	ldr	r0, [r7, #8]
 800cf24:	f7ff ff48 	bl	800cdb8 <tcp_abort>

  return ERR_ABRT;
 800cf28:	f06f 030c 	mvn.w	r3, #12
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	08018738 	.word	0x08018738
 800cf38:	0801890c 	.word	0x0801890c
 800cf3c:	0801877c 	.word	0x0801877c

0800cf40 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b088      	sub	sp, #32
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <tcp_listen_with_backlog_and_err+0x2c>
 800cf58:	4b47      	ldr	r3, [pc, #284]	; (800d078 <tcp_listen_with_backlog_and_err+0x138>)
 800cf5a:	f240 3259 	movw	r2, #857	; 0x359
 800cf5e:	4947      	ldr	r1, [pc, #284]	; (800d07c <tcp_listen_with_backlog_and_err+0x13c>)
 800cf60:	4847      	ldr	r0, [pc, #284]	; (800d080 <tcp_listen_with_backlog_and_err+0x140>)
 800cf62:	f008 fefb 	bl	8015d5c <iprintf>
 800cf66:	23f0      	movs	r3, #240	; 0xf0
 800cf68:	76fb      	strb	r3, [r7, #27]
 800cf6a:	e079      	b.n	800d060 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	7d1b      	ldrb	r3, [r3, #20]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d009      	beq.n	800cf88 <tcp_listen_with_backlog_and_err+0x48>
 800cf74:	4b40      	ldr	r3, [pc, #256]	; (800d078 <tcp_listen_with_backlog_and_err+0x138>)
 800cf76:	f240 325a 	movw	r2, #858	; 0x35a
 800cf7a:	4942      	ldr	r1, [pc, #264]	; (800d084 <tcp_listen_with_backlog_and_err+0x144>)
 800cf7c:	4840      	ldr	r0, [pc, #256]	; (800d080 <tcp_listen_with_backlog_and_err+0x140>)
 800cf7e:	f008 feed 	bl	8015d5c <iprintf>
 800cf82:	23f1      	movs	r3, #241	; 0xf1
 800cf84:	76fb      	strb	r3, [r7, #27]
 800cf86:	e06b      	b.n	800d060 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	7d1b      	ldrb	r3, [r3, #20]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d104      	bne.n	800cf9a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cf94:	23f7      	movs	r3, #247	; 0xf7
 800cf96:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf98:	e062      	b.n	800d060 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cf9a:	2002      	movs	r0, #2
 800cf9c:	f7fe fa26 	bl	800b3ec <memp_malloc>
 800cfa0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cfa8:	23ff      	movs	r3, #255	; 0xff
 800cfaa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cfac:	e058      	b.n	800d060 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	691a      	ldr	r2, [r3, #16]
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	8ada      	ldrh	r2, [r3, #22]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	7d5a      	ldrb	r2, [r3, #21]
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	7a5a      	ldrb	r2, [r3, #9]
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	7ada      	ldrb	r2, [r3, #11]
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	7a9a      	ldrb	r2, [r3, #10]
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	8adb      	ldrh	r3, [r3, #22]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d021      	beq.n	800d03e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cffa:	4b23      	ldr	r3, [pc, #140]	; (800d088 <tcp_listen_with_backlog_and_err+0x148>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	429a      	cmp	r2, r3
 800d002:	d105      	bne.n	800d010 <tcp_listen_with_backlog_and_err+0xd0>
 800d004:	4b20      	ldr	r3, [pc, #128]	; (800d088 <tcp_listen_with_backlog_and_err+0x148>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	4a1f      	ldr	r2, [pc, #124]	; (800d088 <tcp_listen_with_backlog_and_err+0x148>)
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	e013      	b.n	800d038 <tcp_listen_with_backlog_and_err+0xf8>
 800d010:	4b1d      	ldr	r3, [pc, #116]	; (800d088 <tcp_listen_with_backlog_and_err+0x148>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	e00c      	b.n	800d032 <tcp_listen_with_backlog_and_err+0xf2>
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	429a      	cmp	r2, r3
 800d020:	d104      	bne.n	800d02c <tcp_listen_with_backlog_and_err+0xec>
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	68da      	ldr	r2, [r3, #12]
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	60da      	str	r2, [r3, #12]
 800d02a:	e005      	b.n	800d038 <tcp_listen_with_backlog_and_err+0xf8>
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	617b      	str	r3, [r7, #20]
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1ef      	bne.n	800d018 <tcp_listen_with_backlog_and_err+0xd8>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2200      	movs	r2, #0
 800d03c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7ff fb76 	bl	800c730 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	4a11      	ldr	r2, [pc, #68]	; (800d08c <tcp_listen_with_backlog_and_err+0x14c>)
 800d048:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d04a:	4b11      	ldr	r3, [pc, #68]	; (800d090 <tcp_listen_with_backlog_and_err+0x150>)
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	60da      	str	r2, [r3, #12]
 800d052:	4a0f      	ldr	r2, [pc, #60]	; (800d090 <tcp_listen_with_backlog_and_err+0x150>)
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	f005 fbda 	bl	8012810 <tcp_timer_needed>
  res = ERR_OK;
 800d05c:	2300      	movs	r3, #0
 800d05e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d002      	beq.n	800d06c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	7efa      	ldrb	r2, [r7, #27]
 800d06a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d06c:	69fb      	ldr	r3, [r7, #28]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3720      	adds	r7, #32
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	08018738 	.word	0x08018738
 800d07c:	0801892c 	.word	0x0801892c
 800d080:	0801877c 	.word	0x0801877c
 800d084:	0801895c 	.word	0x0801895c
 800d088:	2000d868 	.word	0x2000d868
 800d08c:	0800cf01 	.word	0x0800cf01
 800d090:	2000d864 	.word	0x2000d864

0800d094 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <tcp_update_rcv_ann_wnd+0x1c>
 800d0a2:	4b25      	ldr	r3, [pc, #148]	; (800d138 <tcp_update_rcv_ann_wnd+0xa4>)
 800d0a4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d0a8:	4924      	ldr	r1, [pc, #144]	; (800d13c <tcp_update_rcv_ann_wnd+0xa8>)
 800d0aa:	4825      	ldr	r0, [pc, #148]	; (800d140 <tcp_update_rcv_ann_wnd+0xac>)
 800d0ac:	f008 fe56 	bl	8015d5c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d0b8:	4413      	add	r3, r2
 800d0ba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d0c4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d0c8:	bf28      	it	cs
 800d0ca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d0ce:	b292      	uxth	r2, r2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	1ad3      	subs	r3, r2, r3
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	db08      	blt.n	800d0ec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	e020      	b.n	800d12e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	dd03      	ble.n	800d102 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d100:	e014      	b.n	800d12c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d114:	d306      	bcc.n	800d124 <tcp_update_rcv_ann_wnd+0x90>
 800d116:	4b08      	ldr	r3, [pc, #32]	; (800d138 <tcp_update_rcv_ann_wnd+0xa4>)
 800d118:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d11c:	4909      	ldr	r1, [pc, #36]	; (800d144 <tcp_update_rcv_ann_wnd+0xb0>)
 800d11e:	4808      	ldr	r0, [pc, #32]	; (800d140 <tcp_update_rcv_ann_wnd+0xac>)
 800d120:	f008 fe1c 	bl	8015d5c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d12c:	2300      	movs	r3, #0
  }
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3710      	adds	r7, #16
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	08018738 	.word	0x08018738
 800d13c:	08018994 	.word	0x08018994
 800d140:	0801877c 	.word	0x0801877c
 800d144:	080189b8 	.word	0x080189b8

0800d148 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d107      	bne.n	800d16a <tcp_recved+0x22>
 800d15a:	4b1f      	ldr	r3, [pc, #124]	; (800d1d8 <tcp_recved+0x90>)
 800d15c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d160:	491e      	ldr	r1, [pc, #120]	; (800d1dc <tcp_recved+0x94>)
 800d162:	481f      	ldr	r0, [pc, #124]	; (800d1e0 <tcp_recved+0x98>)
 800d164:	f008 fdfa 	bl	8015d5c <iprintf>
 800d168:	e032      	b.n	800d1d0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	7d1b      	ldrb	r3, [r3, #20]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d106      	bne.n	800d180 <tcp_recved+0x38>
 800d172:	4b19      	ldr	r3, [pc, #100]	; (800d1d8 <tcp_recved+0x90>)
 800d174:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d178:	491a      	ldr	r1, [pc, #104]	; (800d1e4 <tcp_recved+0x9c>)
 800d17a:	4819      	ldr	r0, [pc, #100]	; (800d1e0 <tcp_recved+0x98>)
 800d17c:	f008 fdee 	bl	8015d5c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d184:	887b      	ldrh	r3, [r7, #2]
 800d186:	4413      	add	r3, r2
 800d188:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d18a:	89fb      	ldrh	r3, [r7, #14]
 800d18c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d190:	d804      	bhi.n	800d19c <tcp_recved+0x54>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d196:	89fa      	ldrh	r2, [r7, #14]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d204      	bcs.n	800d1a6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d1a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d1a4:	e002      	b.n	800d1ac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	89fa      	ldrh	r2, [r7, #14]
 800d1aa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff ff71 	bl	800d094 <tcp_update_rcv_ann_wnd>
 800d1b2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d1ba:	d309      	bcc.n	800d1d0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	8b5b      	ldrh	r3, [r3, #26]
 800d1c0:	f043 0302 	orr.w	r3, r3, #2
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f004 fbaa 	bl	8011924 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	08018738 	.word	0x08018738
 800d1dc:	080189d4 	.word	0x080189d4
 800d1e0:	0801877c 	.word	0x0801877c
 800d1e4:	080189ec 	.word	0x080189ec

0800d1e8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d1f2:	4b1e      	ldr	r3, [pc, #120]	; (800d26c <tcp_new_port+0x84>)
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	4b1c      	ldr	r3, [pc, #112]	; (800d26c <tcp_new_port+0x84>)
 800d1fc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d1fe:	4b1b      	ldr	r3, [pc, #108]	; (800d26c <tcp_new_port+0x84>)
 800d200:	881b      	ldrh	r3, [r3, #0]
 800d202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d206:	4293      	cmp	r3, r2
 800d208:	d103      	bne.n	800d212 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d20a:	4b18      	ldr	r3, [pc, #96]	; (800d26c <tcp_new_port+0x84>)
 800d20c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d210:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d212:	2300      	movs	r3, #0
 800d214:	71fb      	strb	r3, [r7, #7]
 800d216:	e01e      	b.n	800d256 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d218:	79fb      	ldrb	r3, [r7, #7]
 800d21a:	4a15      	ldr	r2, [pc, #84]	; (800d270 <tcp_new_port+0x88>)
 800d21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	603b      	str	r3, [r7, #0]
 800d224:	e011      	b.n	800d24a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	8ada      	ldrh	r2, [r3, #22]
 800d22a:	4b10      	ldr	r3, [pc, #64]	; (800d26c <tcp_new_port+0x84>)
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d108      	bne.n	800d244 <tcp_new_port+0x5c>
        n++;
 800d232:	88bb      	ldrh	r3, [r7, #4]
 800d234:	3301      	adds	r3, #1
 800d236:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d238:	88bb      	ldrh	r3, [r7, #4]
 800d23a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d23e:	d3d8      	bcc.n	800d1f2 <tcp_new_port+0xa>
          return 0;
 800d240:	2300      	movs	r3, #0
 800d242:	e00d      	b.n	800d260 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	603b      	str	r3, [r7, #0]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d1ea      	bne.n	800d226 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	3301      	adds	r3, #1
 800d254:	71fb      	strb	r3, [r7, #7]
 800d256:	79fb      	ldrb	r3, [r7, #7]
 800d258:	2b03      	cmp	r3, #3
 800d25a:	d9dd      	bls.n	800d218 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d25c:	4b03      	ldr	r3, [pc, #12]	; (800d26c <tcp_new_port+0x84>)
 800d25e:	881b      	ldrh	r3, [r3, #0]
}
 800d260:	4618      	mov	r0, r3
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20000010 	.word	0x20000010
 800d270:	0801a798 	.word	0x0801a798

0800d274 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d274:	b5b0      	push	{r4, r5, r7, lr}
 800d276:	b090      	sub	sp, #64	; 0x40
 800d278:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d280:	4b94      	ldr	r3, [pc, #592]	; (800d4d4 <tcp_slowtmr+0x260>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3301      	adds	r3, #1
 800d286:	4a93      	ldr	r2, [pc, #588]	; (800d4d4 <tcp_slowtmr+0x260>)
 800d288:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d28a:	4b93      	ldr	r3, [pc, #588]	; (800d4d8 <tcp_slowtmr+0x264>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	3301      	adds	r3, #1
 800d290:	b2da      	uxtb	r2, r3
 800d292:	4b91      	ldr	r3, [pc, #580]	; (800d4d8 <tcp_slowtmr+0x264>)
 800d294:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d29a:	4b90      	ldr	r3, [pc, #576]	; (800d4dc <tcp_slowtmr+0x268>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d2a0:	e29f      	b.n	800d7e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a4:	7d1b      	ldrb	r3, [r3, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d106      	bne.n	800d2b8 <tcp_slowtmr+0x44>
 800d2aa:	4b8d      	ldr	r3, [pc, #564]	; (800d4e0 <tcp_slowtmr+0x26c>)
 800d2ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800d2b0:	498c      	ldr	r1, [pc, #560]	; (800d4e4 <tcp_slowtmr+0x270>)
 800d2b2:	488d      	ldr	r0, [pc, #564]	; (800d4e8 <tcp_slowtmr+0x274>)
 800d2b4:	f008 fd52 	bl	8015d5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	7d1b      	ldrb	r3, [r3, #20]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d106      	bne.n	800d2ce <tcp_slowtmr+0x5a>
 800d2c0:	4b87      	ldr	r3, [pc, #540]	; (800d4e0 <tcp_slowtmr+0x26c>)
 800d2c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d2c6:	4989      	ldr	r1, [pc, #548]	; (800d4ec <tcp_slowtmr+0x278>)
 800d2c8:	4887      	ldr	r0, [pc, #540]	; (800d4e8 <tcp_slowtmr+0x274>)
 800d2ca:	f008 fd47 	bl	8015d5c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	7d1b      	ldrb	r3, [r3, #20]
 800d2d2:	2b0a      	cmp	r3, #10
 800d2d4:	d106      	bne.n	800d2e4 <tcp_slowtmr+0x70>
 800d2d6:	4b82      	ldr	r3, [pc, #520]	; (800d4e0 <tcp_slowtmr+0x26c>)
 800d2d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d2dc:	4984      	ldr	r1, [pc, #528]	; (800d4f0 <tcp_slowtmr+0x27c>)
 800d2de:	4882      	ldr	r0, [pc, #520]	; (800d4e8 <tcp_slowtmr+0x274>)
 800d2e0:	f008 fd3c 	bl	8015d5c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	7f9a      	ldrb	r2, [r3, #30]
 800d2e8:	4b7b      	ldr	r3, [pc, #492]	; (800d4d8 <tcp_slowtmr+0x264>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d105      	bne.n	800d2fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d2fa:	e272      	b.n	800d7e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d2fc:	4b76      	ldr	r3, [pc, #472]	; (800d4d8 <tcp_slowtmr+0x264>)
 800d2fe:	781a      	ldrb	r2, [r3, #0]
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d302:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d304:	2300      	movs	r3, #0
 800d306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d312:	7d1b      	ldrb	r3, [r3, #20]
 800d314:	2b02      	cmp	r3, #2
 800d316:	d10a      	bne.n	800d32e <tcp_slowtmr+0xba>
 800d318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d31e:	2b05      	cmp	r3, #5
 800d320:	d905      	bls.n	800d32e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d326:	3301      	adds	r3, #1
 800d328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d32c:	e11e      	b.n	800d56c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d334:	2b0b      	cmp	r3, #11
 800d336:	d905      	bls.n	800d344 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d33c:	3301      	adds	r3, #1
 800d33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d342:	e113      	b.n	800d56c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d075      	beq.n	800d43a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d352:	2b00      	cmp	r3, #0
 800d354:	d006      	beq.n	800d364 <tcp_slowtmr+0xf0>
 800d356:	4b62      	ldr	r3, [pc, #392]	; (800d4e0 <tcp_slowtmr+0x26c>)
 800d358:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d35c:	4965      	ldr	r1, [pc, #404]	; (800d4f4 <tcp_slowtmr+0x280>)
 800d35e:	4862      	ldr	r0, [pc, #392]	; (800d4e8 <tcp_slowtmr+0x274>)
 800d360:	f008 fcfc 	bl	8015d5c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d106      	bne.n	800d37a <tcp_slowtmr+0x106>
 800d36c:	4b5c      	ldr	r3, [pc, #368]	; (800d4e0 <tcp_slowtmr+0x26c>)
 800d36e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d372:	4961      	ldr	r1, [pc, #388]	; (800d4f8 <tcp_slowtmr+0x284>)
 800d374:	485c      	ldr	r0, [pc, #368]	; (800d4e8 <tcp_slowtmr+0x274>)
 800d376:	f008 fcf1 	bl	8015d5c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d380:	2b0b      	cmp	r3, #11
 800d382:	d905      	bls.n	800d390 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d388:	3301      	adds	r3, #1
 800d38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d38e:	e0ed      	b.n	800d56c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d396:	3b01      	subs	r3, #1
 800d398:	4a58      	ldr	r2, [pc, #352]	; (800d4fc <tcp_slowtmr+0x288>)
 800d39a:	5cd3      	ldrb	r3, [r2, r3]
 800d39c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d3a4:	7c7a      	ldrb	r2, [r7, #17]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d907      	bls.n	800d3ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d3c0:	7c7a      	ldrb	r2, [r7, #17]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	f200 80d2 	bhi.w	800d56c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d108      	bne.n	800d3e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d3d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d8:	f005 f94c 	bl	8012674 <tcp_zero_window_probe>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d014      	beq.n	800d40c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	623b      	str	r3, [r7, #32]
 800d3e6:	e011      	b.n	800d40c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3f2:	f004 f811 	bl	8011418 <tcp_split_unsent_seg>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d107      	bne.n	800d40c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3fe:	f004 fa91 	bl	8011924 <tcp_output>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d408:	2300      	movs	r3, #0
 800d40a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 80ac 	beq.w	800d56c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d416:	2200      	movs	r2, #0
 800d418:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d422:	2b06      	cmp	r3, #6
 800d424:	f200 80a2 	bhi.w	800d56c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d42e:	3301      	adds	r3, #1
 800d430:	b2da      	uxtb	r2, r3
 800d432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d434:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d438:	e098      	b.n	800d56c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d440:	2b00      	cmp	r3, #0
 800d442:	db0f      	blt.n	800d464 <tcp_slowtmr+0x1f0>
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d44a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d44e:	4293      	cmp	r3, r2
 800d450:	d008      	beq.n	800d464 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3301      	adds	r3, #1
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	b21a      	sxth	r2, r3
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d466:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d470:	429a      	cmp	r2, r3
 800d472:	db7b      	blt.n	800d56c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d476:	f004 fd47 	bl	8011f08 <tcp_rexmit_rto_prepare>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d007      	beq.n	800d490 <tcp_slowtmr+0x21c>
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d484:	2b00      	cmp	r3, #0
 800d486:	d171      	bne.n	800d56c <tcp_slowtmr+0x2f8>
 800d488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d06d      	beq.n	800d56c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d492:	7d1b      	ldrb	r3, [r3, #20]
 800d494:	2b02      	cmp	r3, #2
 800d496:	d03a      	beq.n	800d50e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d49e:	2b0c      	cmp	r3, #12
 800d4a0:	bf28      	it	cs
 800d4a2:	230c      	movcs	r3, #12
 800d4a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d4ac:	10db      	asrs	r3, r3, #3
 800d4ae:	b21b      	sxth	r3, r3
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4b8:	4413      	add	r3, r2
 800d4ba:	7efa      	ldrb	r2, [r7, #27]
 800d4bc:	4910      	ldr	r1, [pc, #64]	; (800d500 <tcp_slowtmr+0x28c>)
 800d4be:	5c8a      	ldrb	r2, [r1, r2]
 800d4c0:	4093      	lsls	r3, r2
 800d4c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	dc1a      	bgt.n	800d504 <tcp_slowtmr+0x290>
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	b21a      	sxth	r2, r3
 800d4d2:	e019      	b.n	800d508 <tcp_slowtmr+0x294>
 800d4d4:	2000d860 	.word	0x2000d860
 800d4d8:	20004ada 	.word	0x20004ada
 800d4dc:	2000d85c 	.word	0x2000d85c
 800d4e0:	08018738 	.word	0x08018738
 800d4e4:	08018a7c 	.word	0x08018a7c
 800d4e8:	0801877c 	.word	0x0801877c
 800d4ec:	08018aa8 	.word	0x08018aa8
 800d4f0:	08018ad4 	.word	0x08018ad4
 800d4f4:	08018b04 	.word	0x08018b04
 800d4f8:	08018b38 	.word	0x08018b38
 800d4fc:	0801a790 	.word	0x0801a790
 800d500:	0801a780 	.word	0x0801a780
 800d504:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	2200      	movs	r2, #0
 800d512:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d520:	4293      	cmp	r3, r2
 800d522:	bf28      	it	cs
 800d524:	4613      	movcs	r3, r2
 800d526:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d528:	8a7b      	ldrh	r3, [r7, #18]
 800d52a:	085b      	lsrs	r3, r3, #1
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	b29b      	uxth	r3, r3
 800d542:	429a      	cmp	r2, r3
 800d544:	d206      	bcs.n	800d554 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	2200      	movs	r2, #0
 800d562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d568:	f004 fd3e 	bl	8011fe8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	7d1b      	ldrb	r3, [r3, #20]
 800d570:	2b06      	cmp	r3, #6
 800d572:	d111      	bne.n	800d598 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	8b5b      	ldrh	r3, [r3, #26]
 800d578:	f003 0310 	and.w	r3, r3, #16
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00b      	beq.n	800d598 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d580:	4b9d      	ldr	r3, [pc, #628]	; (800d7f8 <tcp_slowtmr+0x584>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	2b28      	cmp	r3, #40	; 0x28
 800d58c:	d904      	bls.n	800d598 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d592:	3301      	adds	r3, #1
 800d594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d59a:	7a5b      	ldrb	r3, [r3, #9]
 800d59c:	f003 0308 	and.w	r3, r3, #8
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d04c      	beq.n	800d63e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d003      	beq.n	800d5b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d5b0:	2b07      	cmp	r3, #7
 800d5b2:	d144      	bne.n	800d63e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5b4:	4b90      	ldr	r3, [pc, #576]	; (800d7f8 <tcp_slowtmr+0x584>)
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	6a1b      	ldr	r3, [r3, #32]
 800d5bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d5c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d5cc:	498b      	ldr	r1, [pc, #556]	; (800d7fc <tcp_slowtmr+0x588>)
 800d5ce:	fba1 1303 	umull	r1, r3, r1, r3
 800d5d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d90a      	bls.n	800d5ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5dc:	3301      	adds	r3, #1
 800d5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d5e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5ec:	e027      	b.n	800d63e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5ee:	4b82      	ldr	r3, [pc, #520]	; (800d7f8 <tcp_slowtmr+0x584>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	6a1b      	ldr	r3, [r3, #32]
 800d5f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d600:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d604:	4618      	mov	r0, r3
 800d606:	4b7e      	ldr	r3, [pc, #504]	; (800d800 <tcp_slowtmr+0x58c>)
 800d608:	fb03 f300 	mul.w	r3, r3, r0
 800d60c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d60e:	497b      	ldr	r1, [pc, #492]	; (800d7fc <tcp_slowtmr+0x588>)
 800d610:	fba1 1303 	umull	r1, r3, r1, r3
 800d614:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d616:	429a      	cmp	r2, r3
 800d618:	d911      	bls.n	800d63e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d61a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d61c:	f004 ffea 	bl	80125f4 <tcp_keepalive>
 800d620:	4603      	mov	r3, r0
 800d622:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d626:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d107      	bne.n	800d63e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d630:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d634:	3301      	adds	r3, #1
 800d636:	b2da      	uxtb	r2, r3
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d642:	2b00      	cmp	r3, #0
 800d644:	d011      	beq.n	800d66a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d646:	4b6c      	ldr	r3, [pc, #432]	; (800d7f8 <tcp_slowtmr+0x584>)
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	6a1b      	ldr	r3, [r3, #32]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d656:	4619      	mov	r1, r3
 800d658:	460b      	mov	r3, r1
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	440b      	add	r3, r1
 800d65e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d660:	429a      	cmp	r2, r3
 800d662:	d302      	bcc.n	800d66a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d666:	f000 fea9 	bl	800e3bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66c:	7d1b      	ldrb	r3, [r3, #20]
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d10b      	bne.n	800d68a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d672:	4b61      	ldr	r3, [pc, #388]	; (800d7f8 <tcp_slowtmr+0x584>)
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	2b28      	cmp	r3, #40	; 0x28
 800d67e:	d904      	bls.n	800d68a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d684:	3301      	adds	r3, #1
 800d686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	7d1b      	ldrb	r3, [r3, #20]
 800d68e:	2b09      	cmp	r3, #9
 800d690:	d10b      	bne.n	800d6aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d692:	4b59      	ldr	r3, [pc, #356]	; (800d7f8 <tcp_slowtmr+0x584>)
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d698:	6a1b      	ldr	r3, [r3, #32]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	2bf0      	cmp	r3, #240	; 0xf0
 800d69e:	d904      	bls.n	800d6aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d6aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d060      	beq.n	800d774 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d6ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6bc:	f000 fcca 	bl	800e054 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d010      	beq.n	800d6e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d6c6:	4b4f      	ldr	r3, [pc, #316]	; (800d804 <tcp_slowtmr+0x590>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	d106      	bne.n	800d6de <tcp_slowtmr+0x46a>
 800d6d0:	4b4d      	ldr	r3, [pc, #308]	; (800d808 <tcp_slowtmr+0x594>)
 800d6d2:	f240 526d 	movw	r2, #1389	; 0x56d
 800d6d6:	494d      	ldr	r1, [pc, #308]	; (800d80c <tcp_slowtmr+0x598>)
 800d6d8:	484d      	ldr	r0, [pc, #308]	; (800d810 <tcp_slowtmr+0x59c>)
 800d6da:	f008 fb3f 	bl	8015d5c <iprintf>
        prev->next = pcb->next;
 800d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e0:	68da      	ldr	r2, [r3, #12]
 800d6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e4:	60da      	str	r2, [r3, #12]
 800d6e6:	e00f      	b.n	800d708 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d6e8:	4b46      	ldr	r3, [pc, #280]	; (800d804 <tcp_slowtmr+0x590>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d006      	beq.n	800d700 <tcp_slowtmr+0x48c>
 800d6f2:	4b45      	ldr	r3, [pc, #276]	; (800d808 <tcp_slowtmr+0x594>)
 800d6f4:	f240 5271 	movw	r2, #1393	; 0x571
 800d6f8:	4946      	ldr	r1, [pc, #280]	; (800d814 <tcp_slowtmr+0x5a0>)
 800d6fa:	4845      	ldr	r0, [pc, #276]	; (800d810 <tcp_slowtmr+0x59c>)
 800d6fc:	f008 fb2e 	bl	8015d5c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	4a3f      	ldr	r2, [pc, #252]	; (800d804 <tcp_slowtmr+0x590>)
 800d706:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d013      	beq.n	800d738 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d712:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d716:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d718:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	3304      	adds	r3, #4
 800d71e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d720:	8ad2      	ldrh	r2, [r2, #22]
 800d722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d724:	8b09      	ldrh	r1, [r1, #24]
 800d726:	9102      	str	r1, [sp, #8]
 800d728:	9201      	str	r2, [sp, #4]
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	462b      	mov	r3, r5
 800d72e:	4622      	mov	r2, r4
 800d730:	4601      	mov	r1, r0
 800d732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d734:	f004 feaa 	bl	801248c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d740:	7d1b      	ldrb	r3, [r3, #20]
 800d742:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d746:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d74e:	6838      	ldr	r0, [r7, #0]
 800d750:	f7fe ffee 	bl	800c730 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d754:	4b30      	ldr	r3, [pc, #192]	; (800d818 <tcp_slowtmr+0x5a4>)
 800d756:	2200      	movs	r2, #0
 800d758:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d004      	beq.n	800d76a <tcp_slowtmr+0x4f6>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f06f 010c 	mvn.w	r1, #12
 800d766:	68b8      	ldr	r0, [r7, #8]
 800d768:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d76a:	4b2b      	ldr	r3, [pc, #172]	; (800d818 <tcp_slowtmr+0x5a4>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d037      	beq.n	800d7e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d772:	e590      	b.n	800d296 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d776:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	7f1b      	ldrb	r3, [r3, #28]
 800d782:	3301      	adds	r3, #1
 800d784:	b2da      	uxtb	r2, r3
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78c:	7f1a      	ldrb	r2, [r3, #28]
 800d78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d790:	7f5b      	ldrb	r3, [r3, #29]
 800d792:	429a      	cmp	r2, r3
 800d794:	d325      	bcc.n	800d7e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d798:	2200      	movs	r2, #0
 800d79a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d79c:	4b1e      	ldr	r3, [pc, #120]	; (800d818 <tcp_slowtmr+0x5a4>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00b      	beq.n	800d7c4 <tcp_slowtmr+0x550>
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7b4:	6912      	ldr	r2, [r2, #16]
 800d7b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	4798      	blx	r3
 800d7bc:	4603      	mov	r3, r0
 800d7be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d7c2:	e002      	b.n	800d7ca <tcp_slowtmr+0x556>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d7ca:	4b13      	ldr	r3, [pc, #76]	; (800d818 <tcp_slowtmr+0x5a4>)
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d000      	beq.n	800d7d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d7d2:	e560      	b.n	800d296 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d7d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d102      	bne.n	800d7e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7de:	f004 f8a1 	bl	8011924 <tcp_output>
  while (pcb != NULL) {
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f47f ad5c 	bne.w	800d2a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d7ee:	4b0b      	ldr	r3, [pc, #44]	; (800d81c <tcp_slowtmr+0x5a8>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d7f4:	e067      	b.n	800d8c6 <tcp_slowtmr+0x652>
 800d7f6:	bf00      	nop
 800d7f8:	2000d860 	.word	0x2000d860
 800d7fc:	10624dd3 	.word	0x10624dd3
 800d800:	000124f8 	.word	0x000124f8
 800d804:	2000d85c 	.word	0x2000d85c
 800d808:	08018738 	.word	0x08018738
 800d80c:	08018b70 	.word	0x08018b70
 800d810:	0801877c 	.word	0x0801877c
 800d814:	08018b9c 	.word	0x08018b9c
 800d818:	2000d858 	.word	0x2000d858
 800d81c:	2000d86c 	.word	0x2000d86c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d822:	7d1b      	ldrb	r3, [r3, #20]
 800d824:	2b0a      	cmp	r3, #10
 800d826:	d006      	beq.n	800d836 <tcp_slowtmr+0x5c2>
 800d828:	4b2b      	ldr	r3, [pc, #172]	; (800d8d8 <tcp_slowtmr+0x664>)
 800d82a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d82e:	492b      	ldr	r1, [pc, #172]	; (800d8dc <tcp_slowtmr+0x668>)
 800d830:	482b      	ldr	r0, [pc, #172]	; (800d8e0 <tcp_slowtmr+0x66c>)
 800d832:	f008 fa93 	bl	8015d5c <iprintf>
    pcb_remove = 0;
 800d836:	2300      	movs	r3, #0
 800d838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d83c:	4b29      	ldr	r3, [pc, #164]	; (800d8e4 <tcp_slowtmr+0x670>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	6a1b      	ldr	r3, [r3, #32]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	2bf0      	cmp	r3, #240	; 0xf0
 800d848:	d904      	bls.n	800d854 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d84a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d84e:	3301      	adds	r3, #1
 800d850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d02f      	beq.n	800d8bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d85c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d85e:	f000 fbf9 	bl	800e054 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	2b00      	cmp	r3, #0
 800d866:	d010      	beq.n	800d88a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d868:	4b1f      	ldr	r3, [pc, #124]	; (800d8e8 <tcp_slowtmr+0x674>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86e:	429a      	cmp	r2, r3
 800d870:	d106      	bne.n	800d880 <tcp_slowtmr+0x60c>
 800d872:	4b19      	ldr	r3, [pc, #100]	; (800d8d8 <tcp_slowtmr+0x664>)
 800d874:	f240 52af 	movw	r2, #1455	; 0x5af
 800d878:	491c      	ldr	r1, [pc, #112]	; (800d8ec <tcp_slowtmr+0x678>)
 800d87a:	4819      	ldr	r0, [pc, #100]	; (800d8e0 <tcp_slowtmr+0x66c>)
 800d87c:	f008 fa6e 	bl	8015d5c <iprintf>
        prev->next = pcb->next;
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	60da      	str	r2, [r3, #12]
 800d888:	e00f      	b.n	800d8aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d88a:	4b17      	ldr	r3, [pc, #92]	; (800d8e8 <tcp_slowtmr+0x674>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d890:	429a      	cmp	r2, r3
 800d892:	d006      	beq.n	800d8a2 <tcp_slowtmr+0x62e>
 800d894:	4b10      	ldr	r3, [pc, #64]	; (800d8d8 <tcp_slowtmr+0x664>)
 800d896:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d89a:	4915      	ldr	r1, [pc, #84]	; (800d8f0 <tcp_slowtmr+0x67c>)
 800d89c:	4810      	ldr	r0, [pc, #64]	; (800d8e0 <tcp_slowtmr+0x66c>)
 800d89e:	f008 fa5d 	bl	8015d5c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	4a10      	ldr	r2, [pc, #64]	; (800d8e8 <tcp_slowtmr+0x674>)
 800d8a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d8b4:	69f8      	ldr	r0, [r7, #28]
 800d8b6:	f7fe ff3b 	bl	800c730 <tcp_free>
 800d8ba:	e004      	b.n	800d8c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1a9      	bne.n	800d820 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d8cc:	bf00      	nop
 800d8ce:	bf00      	nop
 800d8d0:	3730      	adds	r7, #48	; 0x30
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	08018738 	.word	0x08018738
 800d8dc:	08018bc8 	.word	0x08018bc8
 800d8e0:	0801877c 	.word	0x0801877c
 800d8e4:	2000d860 	.word	0x2000d860
 800d8e8:	2000d86c 	.word	0x2000d86c
 800d8ec:	08018bf8 	.word	0x08018bf8
 800d8f0:	08018c20 	.word	0x08018c20

0800d8f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d8fa:	4b2d      	ldr	r3, [pc, #180]	; (800d9b0 <tcp_fasttmr+0xbc>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	3301      	adds	r3, #1
 800d900:	b2da      	uxtb	r2, r3
 800d902:	4b2b      	ldr	r3, [pc, #172]	; (800d9b0 <tcp_fasttmr+0xbc>)
 800d904:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d906:	4b2b      	ldr	r3, [pc, #172]	; (800d9b4 <tcp_fasttmr+0xc0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d90c:	e048      	b.n	800d9a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7f9a      	ldrb	r2, [r3, #30]
 800d912:	4b27      	ldr	r3, [pc, #156]	; (800d9b0 <tcp_fasttmr+0xbc>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d03f      	beq.n	800d99a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d91a:	4b25      	ldr	r3, [pc, #148]	; (800d9b0 <tcp_fasttmr+0xbc>)
 800d91c:	781a      	ldrb	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8b5b      	ldrh	r3, [r3, #26]
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d010      	beq.n	800d950 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	8b5b      	ldrh	r3, [r3, #26]
 800d932:	f043 0302 	orr.w	r3, r3, #2
 800d936:	b29a      	uxth	r2, r3
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f003 fff1 	bl	8011924 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	8b5b      	ldrh	r3, [r3, #26]
 800d946:	f023 0303 	bic.w	r3, r3, #3
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	8b5b      	ldrh	r3, [r3, #26]
 800d954:	f003 0308 	and.w	r3, r3, #8
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d009      	beq.n	800d970 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	8b5b      	ldrh	r3, [r3, #26]
 800d960:	f023 0308 	bic.w	r3, r3, #8
 800d964:	b29a      	uxth	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff f874 	bl	800ca58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00a      	beq.n	800d994 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d97e:	4b0e      	ldr	r3, [pc, #56]	; (800d9b8 <tcp_fasttmr+0xc4>)
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f819 	bl	800d9bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d98a:	4b0b      	ldr	r3, [pc, #44]	; (800d9b8 <tcp_fasttmr+0xc4>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d000      	beq.n	800d994 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d992:	e7b8      	b.n	800d906 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	607b      	str	r3, [r7, #4]
 800d998:	e002      	b.n	800d9a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1b3      	bne.n	800d90e <tcp_fasttmr+0x1a>
    }
  }
}
 800d9a6:	bf00      	nop
 800d9a8:	bf00      	nop
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}
 800d9b0:	20004ada 	.word	0x20004ada
 800d9b4:	2000d85c 	.word	0x2000d85c
 800d9b8:	2000d858 	.word	0x2000d858

0800d9bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d9bc:	b590      	push	{r4, r7, lr}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d109      	bne.n	800d9de <tcp_process_refused_data+0x22>
 800d9ca:	4b37      	ldr	r3, [pc, #220]	; (800daa8 <tcp_process_refused_data+0xec>)
 800d9cc:	f240 6209 	movw	r2, #1545	; 0x609
 800d9d0:	4936      	ldr	r1, [pc, #216]	; (800daac <tcp_process_refused_data+0xf0>)
 800d9d2:	4837      	ldr	r0, [pc, #220]	; (800dab0 <tcp_process_refused_data+0xf4>)
 800d9d4:	f008 f9c2 	bl	8015d5c <iprintf>
 800d9d8:	f06f 030f 	mvn.w	r3, #15
 800d9dc:	e060      	b.n	800daa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9e2:	7b5b      	ldrb	r3, [r3, #13]
 800d9e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00b      	beq.n	800da14 <tcp_process_refused_data+0x58>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6918      	ldr	r0, [r3, #16]
 800da06:	2300      	movs	r3, #0
 800da08:	68ba      	ldr	r2, [r7, #8]
 800da0a:	6879      	ldr	r1, [r7, #4]
 800da0c:	47a0      	blx	r4
 800da0e:	4603      	mov	r3, r0
 800da10:	73fb      	strb	r3, [r7, #15]
 800da12:	e007      	b.n	800da24 <tcp_process_refused_data+0x68>
 800da14:	2300      	movs	r3, #0
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	6879      	ldr	r1, [r7, #4]
 800da1a:	2000      	movs	r0, #0
 800da1c:	f000 f8a4 	bl	800db68 <tcp_recv_null>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800da24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d12a      	bne.n	800da82 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800da2c:	7bbb      	ldrb	r3, [r7, #14]
 800da2e:	f003 0320 	and.w	r3, r3, #32
 800da32:	2b00      	cmp	r3, #0
 800da34:	d033      	beq.n	800da9e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da3e:	d005      	beq.n	800da4c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da44:	3301      	adds	r3, #1
 800da46:	b29a      	uxth	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00b      	beq.n	800da6e <tcp_process_refused_data+0xb2>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6918      	ldr	r0, [r3, #16]
 800da60:	2300      	movs	r3, #0
 800da62:	2200      	movs	r2, #0
 800da64:	6879      	ldr	r1, [r7, #4]
 800da66:	47a0      	blx	r4
 800da68:	4603      	mov	r3, r0
 800da6a:	73fb      	strb	r3, [r7, #15]
 800da6c:	e001      	b.n	800da72 <tcp_process_refused_data+0xb6>
 800da6e:	2300      	movs	r3, #0
 800da70:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800da72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da76:	f113 0f0d 	cmn.w	r3, #13
 800da7a:	d110      	bne.n	800da9e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800da7c:	f06f 030c 	mvn.w	r3, #12
 800da80:	e00e      	b.n	800daa0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800da82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da86:	f113 0f0d 	cmn.w	r3, #13
 800da8a:	d102      	bne.n	800da92 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800da8c:	f06f 030c 	mvn.w	r3, #12
 800da90:	e006      	b.n	800daa0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800da98:	f06f 0304 	mvn.w	r3, #4
 800da9c:	e000      	b.n	800daa0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3714      	adds	r7, #20
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd90      	pop	{r4, r7, pc}
 800daa8:	08018738 	.word	0x08018738
 800daac:	08018c48 	.word	0x08018c48
 800dab0:	0801877c 	.word	0x0801877c

0800dab4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dabc:	e007      	b.n	800dace <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 f80a 	bl	800dade <tcp_seg_free>
    seg = next;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1f4      	bne.n	800dabe <tcp_segs_free+0xa>
  }
}
 800dad4:	bf00      	nop
 800dad6:	bf00      	nop
 800dad8:	3710      	adds	r7, #16
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00c      	beq.n	800db06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d004      	beq.n	800dafe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe fb6d 	bl	800c1d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dafe:	6879      	ldr	r1, [r7, #4]
 800db00:	2003      	movs	r0, #3
 800db02:	f7fd fcc5 	bl	800b490 <memp_free>
  }
}
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
	...

0800db10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <tcp_seg_copy+0x1c>
 800db1e:	4b0f      	ldr	r3, [pc, #60]	; (800db5c <tcp_seg_copy+0x4c>)
 800db20:	f240 6282 	movw	r2, #1666	; 0x682
 800db24:	490e      	ldr	r1, [pc, #56]	; (800db60 <tcp_seg_copy+0x50>)
 800db26:	480f      	ldr	r0, [pc, #60]	; (800db64 <tcp_seg_copy+0x54>)
 800db28:	f008 f918 	bl	8015d5c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800db2c:	2003      	movs	r0, #3
 800db2e:	f7fd fc5d 	bl	800b3ec <memp_malloc>
 800db32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <tcp_seg_copy+0x2e>
    return NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	e00a      	b.n	800db54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800db3e:	2210      	movs	r2, #16
 800db40:	6879      	ldr	r1, [r7, #4]
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f008 f87f 	bl	8015c46 <memcpy>
  pbuf_ref(cseg->p);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fbe9 	bl	800c324 <pbuf_ref>
  return cseg;
 800db52:	68fb      	ldr	r3, [r7, #12]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	08018738 	.word	0x08018738
 800db60:	08018c8c 	.word	0x08018c8c
 800db64:	0801877c 	.word	0x0801877c

0800db68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d109      	bne.n	800db90 <tcp_recv_null+0x28>
 800db7c:	4b12      	ldr	r3, [pc, #72]	; (800dbc8 <tcp_recv_null+0x60>)
 800db7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800db82:	4912      	ldr	r1, [pc, #72]	; (800dbcc <tcp_recv_null+0x64>)
 800db84:	4812      	ldr	r0, [pc, #72]	; (800dbd0 <tcp_recv_null+0x68>)
 800db86:	f008 f8e9 	bl	8015d5c <iprintf>
 800db8a:	f06f 030f 	mvn.w	r3, #15
 800db8e:	e016      	b.n	800dbbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d009      	beq.n	800dbaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	891b      	ldrh	r3, [r3, #8]
 800db9a:	4619      	mov	r1, r3
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f7ff fad3 	bl	800d148 <tcp_recved>
    pbuf_free(p);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7fe fb18 	bl	800c1d8 <pbuf_free>
 800dba8:	e008      	b.n	800dbbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dbaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d104      	bne.n	800dbbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dbb2:	68b8      	ldr	r0, [r7, #8]
 800dbb4:	f7fe ffba 	bl	800cb2c <tcp_close>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	e000      	b.n	800dbbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	08018738 	.word	0x08018738
 800dbcc:	08018ca8 	.word	0x08018ca8
 800dbd0:	0801877c 	.word	0x0801877c

0800dbd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	4603      	mov	r3, r0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	db01      	blt.n	800dbea <tcp_kill_prio+0x16>
 800dbe6:	79fb      	ldrb	r3, [r7, #7]
 800dbe8:	e000      	b.n	800dbec <tcp_kill_prio+0x18>
 800dbea:	237f      	movs	r3, #127	; 0x7f
 800dbec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dbee:	7afb      	ldrb	r3, [r7, #11]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d034      	beq.n	800dc5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dbf4:	7afb      	ldrb	r3, [r7, #11]
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc02:	4b19      	ldr	r3, [pc, #100]	; (800dc68 <tcp_kill_prio+0x94>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	e01f      	b.n	800dc4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	7d5b      	ldrb	r3, [r3, #21]
 800dc0e:	7afa      	ldrb	r2, [r7, #11]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d80c      	bhi.n	800dc2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dc18:	7afa      	ldrb	r2, [r7, #11]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d112      	bne.n	800dc44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc1e:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <tcp_kill_prio+0x98>)
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d80a      	bhi.n	800dc44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dc2e:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <tcp_kill_prio+0x98>)
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	7d5b      	ldrb	r3, [r3, #21]
 800dc42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	617b      	str	r3, [r7, #20]
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1dc      	bne.n	800dc0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dc56:	6938      	ldr	r0, [r7, #16]
 800dc58:	f7ff f8ae 	bl	800cdb8 <tcp_abort>
 800dc5c:	e000      	b.n	800dc60 <tcp_kill_prio+0x8c>
    return;
 800dc5e:	bf00      	nop
  }
}
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	2000d85c 	.word	0x2000d85c
 800dc6c:	2000d860 	.word	0x2000d860

0800dc70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b08      	cmp	r3, #8
 800dc7e:	d009      	beq.n	800dc94 <tcp_kill_state+0x24>
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	2b09      	cmp	r3, #9
 800dc84:	d006      	beq.n	800dc94 <tcp_kill_state+0x24>
 800dc86:	4b1a      	ldr	r3, [pc, #104]	; (800dcf0 <tcp_kill_state+0x80>)
 800dc88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dc8c:	4919      	ldr	r1, [pc, #100]	; (800dcf4 <tcp_kill_state+0x84>)
 800dc8e:	481a      	ldr	r0, [pc, #104]	; (800dcf8 <tcp_kill_state+0x88>)
 800dc90:	f008 f864 	bl	8015d5c <iprintf>

  inactivity = 0;
 800dc94:	2300      	movs	r3, #0
 800dc96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc9c:	4b17      	ldr	r3, [pc, #92]	; (800dcfc <tcp_kill_state+0x8c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	617b      	str	r3, [r7, #20]
 800dca2:	e017      	b.n	800dcd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
 800dca8:	79fa      	ldrb	r2, [r7, #7]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d10f      	bne.n	800dcce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcae:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <tcp_kill_state+0x90>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d807      	bhi.n	800dcce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dcbe:	4b10      	ldr	r3, [pc, #64]	; (800dd00 <tcp_kill_state+0x90>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1e4      	bne.n	800dca4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dce0:	2100      	movs	r1, #0
 800dce2:	6938      	ldr	r0, [r7, #16]
 800dce4:	f7fe ffaa 	bl	800cc3c <tcp_abandon>
  }
}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	08018738 	.word	0x08018738
 800dcf4:	08018cc4 	.word	0x08018cc4
 800dcf8:	0801877c 	.word	0x0801877c
 800dcfc:	2000d85c 	.word	0x2000d85c
 800dd00:	2000d860 	.word	0x2000d860

0800dd04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <tcp_kill_timewait+0x58>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e012      	b.n	800dd40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd1a:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <tcp_kill_timewait+0x5c>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6a1b      	ldr	r3, [r3, #32]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d807      	bhi.n	800dd3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <tcp_kill_timewait+0x5c>)
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1e9      	bne.n	800dd1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd4c:	68b8      	ldr	r0, [r7, #8]
 800dd4e:	f7ff f833 	bl	800cdb8 <tcp_abort>
  }
}
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	2000d86c 	.word	0x2000d86c
 800dd60:	2000d860 	.word	0x2000d860

0800dd64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dd6a:	4b10      	ldr	r3, [pc, #64]	; (800ddac <tcp_handle_closepend+0x48>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd70:	e014      	b.n	800dd9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8b5b      	ldrh	r3, [r3, #26]
 800dd7c:	f003 0308 	and.w	r3, r3, #8
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d009      	beq.n	800dd98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	8b5b      	ldrh	r3, [r3, #26]
 800dd88:	f023 0308 	bic.w	r3, r3, #8
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7fe fe60 	bl	800ca58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e7      	bne.n	800dd72 <tcp_handle_closepend+0xe>
  }
}
 800dda2:	bf00      	nop
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	2000d85c 	.word	0x2000d85c

0800ddb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddba:	2001      	movs	r0, #1
 800ddbc:	f7fd fb16 	bl	800b3ec <memp_malloc>
 800ddc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d126      	bne.n	800de16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ddc8:	f7ff ffcc 	bl	800dd64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ddcc:	f7ff ff9a 	bl	800dd04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	f7fd fb0b 	bl	800b3ec <memp_malloc>
 800ddd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d11b      	bne.n	800de16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ddde:	2009      	movs	r0, #9
 800dde0:	f7ff ff46 	bl	800dc70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dde4:	2001      	movs	r0, #1
 800dde6:	f7fd fb01 	bl	800b3ec <memp_malloc>
 800ddea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d111      	bne.n	800de16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ddf2:	2008      	movs	r0, #8
 800ddf4:	f7ff ff3c 	bl	800dc70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f7fd faf7 	bl	800b3ec <memp_malloc>
 800ddfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d107      	bne.n	800de16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	4618      	mov	r0, r3
 800de0a:	f7ff fee3 	bl	800dbd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de0e:	2001      	movs	r0, #1
 800de10:	f7fd faec 	bl	800b3ec <memp_malloc>
 800de14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d03f      	beq.n	800de9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800de1c:	229c      	movs	r2, #156	; 0x9c
 800de1e:	2100      	movs	r1, #0
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f007 ff38 	bl	8015c96 <memset>
    pcb->prio = prio;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	79fa      	ldrb	r2, [r7, #7]
 800de2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	22ff      	movs	r2, #255	; 0xff
 800de4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2206      	movs	r2, #6
 800de58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2206      	movs	r2, #6
 800de60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800de72:	4b0d      	ldr	r3, [pc, #52]	; (800dea8 <tcp_alloc+0xf8>)
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800de7a:	4b0c      	ldr	r3, [pc, #48]	; (800deac <tcp_alloc+0xfc>)
 800de7c:	781a      	ldrb	r2, [r3, #0]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4a08      	ldr	r2, [pc, #32]	; (800deb0 <tcp_alloc+0x100>)
 800de90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4a07      	ldr	r2, [pc, #28]	; (800deb4 <tcp_alloc+0x104>)
 800de98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800de9c:	68fb      	ldr	r3, [r7, #12]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	2000d860 	.word	0x2000d860
 800deac:	20004ada 	.word	0x20004ada
 800deb0:	0800db69 	.word	0x0800db69
 800deb4:	006ddd00 	.word	0x006ddd00

0800deb8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dec2:	2040      	movs	r0, #64	; 0x40
 800dec4:	f7ff ff74 	bl	800ddb0 <tcp_alloc>
 800dec8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800deca:	68fb      	ldr	r3, [r7, #12]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	611a      	str	r2, [r3, #16]
  }
}
 800deea:	bf00      	nop
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
	...

0800def8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00e      	beq.n	800df26 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d106      	bne.n	800df1e <tcp_recv+0x26>
 800df10:	4b07      	ldr	r3, [pc, #28]	; (800df30 <tcp_recv+0x38>)
 800df12:	f240 72df 	movw	r2, #2015	; 0x7df
 800df16:	4907      	ldr	r1, [pc, #28]	; (800df34 <tcp_recv+0x3c>)
 800df18:	4807      	ldr	r0, [pc, #28]	; (800df38 <tcp_recv+0x40>)
 800df1a:	f007 ff1f 	bl	8015d5c <iprintf>
    pcb->recv = recv;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800df26:	bf00      	nop
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	08018738 	.word	0x08018738
 800df34:	08018cd4 	.word	0x08018cd4
 800df38:	0801877c 	.word	0x0801877c

0800df3c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00e      	beq.n	800df6a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7d1b      	ldrb	r3, [r3, #20]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d106      	bne.n	800df62 <tcp_sent+0x26>
 800df54:	4b07      	ldr	r3, [pc, #28]	; (800df74 <tcp_sent+0x38>)
 800df56:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800df5a:	4907      	ldr	r1, [pc, #28]	; (800df78 <tcp_sent+0x3c>)
 800df5c:	4807      	ldr	r0, [pc, #28]	; (800df7c <tcp_sent+0x40>)
 800df5e:	f007 fefd 	bl	8015d5c <iprintf>
    pcb->sent = sent;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800df6a:	bf00      	nop
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	08018738 	.word	0x08018738
 800df78:	08018cfc 	.word	0x08018cfc
 800df7c:	0801877c 	.word	0x0801877c

0800df80 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d106      	bne.n	800dfa6 <tcp_err+0x26>
 800df98:	4b07      	ldr	r3, [pc, #28]	; (800dfb8 <tcp_err+0x38>)
 800df9a:	f640 020d 	movw	r2, #2061	; 0x80d
 800df9e:	4907      	ldr	r1, [pc, #28]	; (800dfbc <tcp_err+0x3c>)
 800dfa0:	4807      	ldr	r0, [pc, #28]	; (800dfc0 <tcp_err+0x40>)
 800dfa2:	f007 fedb 	bl	8015d5c <iprintf>
    pcb->errf = err;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	08018738 	.word	0x08018738
 800dfbc:	08018d24 	.word	0x08018d24
 800dfc0:	0801877c 	.word	0x0801877c

0800dfc4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d008      	beq.n	800dfe6 <tcp_accept+0x22>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7d1b      	ldrb	r3, [r3, #20]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d104      	bne.n	800dfe6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	619a      	str	r2, [r3, #24]
  }
}
 800dfe6:	bf00      	nop
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d107      	bne.n	800e018 <tcp_poll+0x24>
 800e008:	4b0e      	ldr	r3, [pc, #56]	; (800e044 <tcp_poll+0x50>)
 800e00a:	f640 023d 	movw	r2, #2109	; 0x83d
 800e00e:	490e      	ldr	r1, [pc, #56]	; (800e048 <tcp_poll+0x54>)
 800e010:	480e      	ldr	r0, [pc, #56]	; (800e04c <tcp_poll+0x58>)
 800e012:	f007 fea3 	bl	8015d5c <iprintf>
 800e016:	e011      	b.n	800e03c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d106      	bne.n	800e02e <tcp_poll+0x3a>
 800e020:	4b08      	ldr	r3, [pc, #32]	; (800e044 <tcp_poll+0x50>)
 800e022:	f640 023e 	movw	r2, #2110	; 0x83e
 800e026:	490a      	ldr	r1, [pc, #40]	; (800e050 <tcp_poll+0x5c>)
 800e028:	4808      	ldr	r0, [pc, #32]	; (800e04c <tcp_poll+0x58>)
 800e02a:	f007 fe97 	bl	8015d5c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	79fa      	ldrb	r2, [r7, #7]
 800e03a:	775a      	strb	r2, [r3, #29]
}
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	08018738 	.word	0x08018738
 800e048:	08018d4c 	.word	0x08018d4c
 800e04c:	0801877c 	.word	0x0801877c
 800e050:	08018d64 	.word	0x08018d64

0800e054 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d107      	bne.n	800e072 <tcp_pcb_purge+0x1e>
 800e062:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <tcp_pcb_purge+0x94>)
 800e064:	f640 0251 	movw	r2, #2129	; 0x851
 800e068:	4920      	ldr	r1, [pc, #128]	; (800e0ec <tcp_pcb_purge+0x98>)
 800e06a:	4821      	ldr	r0, [pc, #132]	; (800e0f0 <tcp_pcb_purge+0x9c>)
 800e06c:	f007 fe76 	bl	8015d5c <iprintf>
 800e070:	e037      	b.n	800e0e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d033      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e07e:	2b0a      	cmp	r3, #10
 800e080:	d02f      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e086:	2b01      	cmp	r3, #1
 800e088:	d02b      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d007      	beq.n	800e0a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe f89e 	bl	800c1d8 <pbuf_free>
      pcb->refused_data = NULL;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f986 	bl	800e3bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff fcf9 	bl	800dab4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fcf4 	bl	800dab4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	08018738 	.word	0x08018738
 800e0ec:	08018d84 	.word	0x08018d84
 800e0f0:	0801877c 	.word	0x0801877c

0800e0f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <tcp_pcb_remove+0x1e>
 800e104:	4b3e      	ldr	r3, [pc, #248]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e106:	f640 0283 	movw	r2, #2179	; 0x883
 800e10a:	493e      	ldr	r1, [pc, #248]	; (800e204 <tcp_pcb_remove+0x110>)
 800e10c:	483e      	ldr	r0, [pc, #248]	; (800e208 <tcp_pcb_remove+0x114>)
 800e10e:	f007 fe25 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <tcp_pcb_remove+0x32>
 800e118:	4b39      	ldr	r3, [pc, #228]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e11a:	f640 0284 	movw	r2, #2180	; 0x884
 800e11e:	493b      	ldr	r1, [pc, #236]	; (800e20c <tcp_pcb_remove+0x118>)
 800e120:	4839      	ldr	r0, [pc, #228]	; (800e208 <tcp_pcb_remove+0x114>)
 800e122:	f007 fe1b 	bl	8015d5c <iprintf>

  TCP_RMV(pcblist, pcb);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d105      	bne.n	800e13c <tcp_pcb_remove+0x48>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	e013      	b.n	800e164 <tcp_pcb_remove+0x70>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	e00c      	b.n	800e15e <tcp_pcb_remove+0x6a>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d104      	bne.n	800e158 <tcp_pcb_remove+0x64>
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	68da      	ldr	r2, [r3, #12]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	60da      	str	r2, [r3, #12]
 800e156:	e005      	b.n	800e164 <tcp_pcb_remove+0x70>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1ef      	bne.n	800e144 <tcp_pcb_remove+0x50>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2200      	movs	r2, #0
 800e168:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f7ff ff72 	bl	800e054 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	2b0a      	cmp	r3, #10
 800e176:	d013      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d00f      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	8b5b      	ldrh	r3, [r3, #26]
 800e184:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d009      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	8b5b      	ldrh	r3, [r3, #26]
 800e190:	f043 0302 	orr.w	r3, r3, #2
 800e194:	b29a      	uxth	r2, r3
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e19a:	6838      	ldr	r0, [r7, #0]
 800e19c:	f003 fbc2 	bl	8011924 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	7d1b      	ldrb	r3, [r3, #20]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d020      	beq.n	800e1ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d006      	beq.n	800e1be <tcp_pcb_remove+0xca>
 800e1b0:	4b13      	ldr	r3, [pc, #76]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1b2:	f640 0293 	movw	r2, #2195	; 0x893
 800e1b6:	4916      	ldr	r1, [pc, #88]	; (800e210 <tcp_pcb_remove+0x11c>)
 800e1b8:	4813      	ldr	r0, [pc, #76]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1ba:	f007 fdcf 	bl	8015d5c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d006      	beq.n	800e1d4 <tcp_pcb_remove+0xe0>
 800e1c6:	4b0e      	ldr	r3, [pc, #56]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1c8:	f640 0294 	movw	r2, #2196	; 0x894
 800e1cc:	4911      	ldr	r1, [pc, #68]	; (800e214 <tcp_pcb_remove+0x120>)
 800e1ce:	480e      	ldr	r0, [pc, #56]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1d0:	f007 fdc4 	bl	8015d5c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d006      	beq.n	800e1ea <tcp_pcb_remove+0xf6>
 800e1dc:	4b08      	ldr	r3, [pc, #32]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1de:	f640 0296 	movw	r2, #2198	; 0x896
 800e1e2:	490d      	ldr	r1, [pc, #52]	; (800e218 <tcp_pcb_remove+0x124>)
 800e1e4:	4808      	ldr	r0, [pc, #32]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1e6:	f007 fdb9 	bl	8015d5c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	08018738 	.word	0x08018738
 800e204:	08018da0 	.word	0x08018da0
 800e208:	0801877c 	.word	0x0801877c
 800e20c:	08018dbc 	.word	0x08018dbc
 800e210:	08018ddc 	.word	0x08018ddc
 800e214:	08018df4 	.word	0x08018df4
 800e218:	08018e10 	.word	0x08018e10

0800e21c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d106      	bne.n	800e238 <tcp_next_iss+0x1c>
 800e22a:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <tcp_next_iss+0x38>)
 800e22c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e230:	4909      	ldr	r1, [pc, #36]	; (800e258 <tcp_next_iss+0x3c>)
 800e232:	480a      	ldr	r0, [pc, #40]	; (800e25c <tcp_next_iss+0x40>)
 800e234:	f007 fd92 	bl	8015d5c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <tcp_next_iss+0x44>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	4b09      	ldr	r3, [pc, #36]	; (800e264 <tcp_next_iss+0x48>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4413      	add	r3, r2
 800e242:	4a07      	ldr	r2, [pc, #28]	; (800e260 <tcp_next_iss+0x44>)
 800e244:	6013      	str	r3, [r2, #0]
  return iss;
 800e246:	4b06      	ldr	r3, [pc, #24]	; (800e260 <tcp_next_iss+0x44>)
 800e248:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	08018738 	.word	0x08018738
 800e258:	08018e28 	.word	0x08018e28
 800e25c:	0801877c 	.word	0x0801877c
 800e260:	20000014 	.word	0x20000014
 800e264:	2000d860 	.word	0x2000d860

0800e268 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <tcp_eff_send_mss_netif+0x22>
 800e27c:	4b14      	ldr	r3, [pc, #80]	; (800e2d0 <tcp_eff_send_mss_netif+0x68>)
 800e27e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e282:	4914      	ldr	r1, [pc, #80]	; (800e2d4 <tcp_eff_send_mss_netif+0x6c>)
 800e284:	4814      	ldr	r0, [pc, #80]	; (800e2d8 <tcp_eff_send_mss_netif+0x70>)
 800e286:	f007 fd69 	bl	8015d5c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	e019      	b.n	800e2c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e298:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e29a:	8afb      	ldrh	r3, [r7, #22]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d012      	beq.n	800e2c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e2a0:	2328      	movs	r3, #40	; 0x28
 800e2a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e2a4:	8afa      	ldrh	r2, [r7, #22]
 800e2a6:	8abb      	ldrh	r3, [r7, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d904      	bls.n	800e2b6 <tcp_eff_send_mss_netif+0x4e>
 800e2ac:	8afa      	ldrh	r2, [r7, #22]
 800e2ae:	8abb      	ldrh	r3, [r7, #20]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	e000      	b.n	800e2b8 <tcp_eff_send_mss_netif+0x50>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2ba:	8a7a      	ldrh	r2, [r7, #18]
 800e2bc:	89fb      	ldrh	r3, [r7, #14]
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	bf28      	it	cs
 800e2c2:	4613      	movcs	r3, r2
 800e2c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e2c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	08018738 	.word	0x08018738
 800e2d4:	08018e44 	.word	0x08018e44
 800e2d8:	0801877c 	.word	0x0801877c

0800e2dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d119      	bne.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e2f0:	4b10      	ldr	r3, [pc, #64]	; (800e334 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e2f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e2f6:	4910      	ldr	r1, [pc, #64]	; (800e338 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e2f8:	4810      	ldr	r0, [pc, #64]	; (800e33c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e2fa:	f007 fd2f 	bl	8015d5c <iprintf>

  while (pcb != NULL) {
 800e2fe:	e011      	b.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d108      	bne.n	800e31e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7fe fd50 	bl	800cdb8 <tcp_abort>
      pcb = next;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e002      	b.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1ea      	bne.n	800e300 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	08018738 	.word	0x08018738
 800e338:	08018e6c 	.word	0x08018e6c
 800e33c:	0801877c 	.word	0x0801877c

0800e340 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d02a      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d026      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e358:	4b15      	ldr	r3, [pc, #84]	; (800e3b0 <tcp_netif_ip_addr_changed+0x70>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff ffbc 	bl	800e2dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e364:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <tcp_netif_ip_addr_changed+0x74>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ffb6 	bl	800e2dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d017      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d013      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <tcp_netif_ip_addr_changed+0x78>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	e00c      	b.n	800e3a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d103      	bne.n	800e39a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1ef      	bne.n	800e386 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e3a6:	bf00      	nop
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	2000d85c 	.word	0x2000d85c
 800e3b4:	2000d868 	.word	0x2000d868
 800e3b8:	2000d864 	.word	0x2000d864

0800e3bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d007      	beq.n	800e3dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff fb6f 	bl	800dab4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b08d      	sub	sp, #52	; 0x34
 800e3e8:	af04      	add	r7, sp, #16
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d105      	bne.n	800e400 <tcp_input+0x1c>
 800e3f4:	4b9b      	ldr	r3, [pc, #620]	; (800e664 <tcp_input+0x280>)
 800e3f6:	2283      	movs	r2, #131	; 0x83
 800e3f8:	499b      	ldr	r1, [pc, #620]	; (800e668 <tcp_input+0x284>)
 800e3fa:	489c      	ldr	r0, [pc, #624]	; (800e66c <tcp_input+0x288>)
 800e3fc:	f007 fcae 	bl	8015d5c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4a9a      	ldr	r2, [pc, #616]	; (800e670 <tcp_input+0x28c>)
 800e406:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	895b      	ldrh	r3, [r3, #10]
 800e40c:	2b13      	cmp	r3, #19
 800e40e:	f240 83c4 	bls.w	800eb9a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e412:	4b98      	ldr	r3, [pc, #608]	; (800e674 <tcp_input+0x290>)
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	4a97      	ldr	r2, [pc, #604]	; (800e674 <tcp_input+0x290>)
 800e418:	6812      	ldr	r2, [r2, #0]
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f006 f9e1 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	f040 83ba 	bne.w	800eb9e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e42a:	4b92      	ldr	r3, [pc, #584]	; (800e674 <tcp_input+0x290>)
 800e42c:	695b      	ldr	r3, [r3, #20]
 800e42e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e432:	2be0      	cmp	r3, #224	; 0xe0
 800e434:	f000 83b3 	beq.w	800eb9e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e438:	4b8d      	ldr	r3, [pc, #564]	; (800e670 <tcp_input+0x28c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	899b      	ldrh	r3, [r3, #12]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	4618      	mov	r0, r3
 800e442:	f7fc fb1d 	bl	800aa80 <lwip_htons>
 800e446:	4603      	mov	r3, r0
 800e448:	0b1b      	lsrs	r3, r3, #12
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e452:	7cbb      	ldrb	r3, [r7, #18]
 800e454:	2b13      	cmp	r3, #19
 800e456:	f240 83a4 	bls.w	800eba2 <tcp_input+0x7be>
 800e45a:	7cbb      	ldrb	r3, [r7, #18]
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	891b      	ldrh	r3, [r3, #8]
 800e462:	429a      	cmp	r2, r3
 800e464:	f200 839d 	bhi.w	800eba2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e468:	7cbb      	ldrb	r3, [r7, #18]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	3b14      	subs	r3, #20
 800e46e:	b29a      	uxth	r2, r3
 800e470:	4b81      	ldr	r3, [pc, #516]	; (800e678 <tcp_input+0x294>)
 800e472:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e474:	4b81      	ldr	r3, [pc, #516]	; (800e67c <tcp_input+0x298>)
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	895a      	ldrh	r2, [r3, #10]
 800e47e:	7cbb      	ldrb	r3, [r7, #18]
 800e480:	b29b      	uxth	r3, r3
 800e482:	429a      	cmp	r2, r3
 800e484:	d309      	bcc.n	800e49a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e486:	4b7c      	ldr	r3, [pc, #496]	; (800e678 <tcp_input+0x294>)
 800e488:	881a      	ldrh	r2, [r3, #0]
 800e48a:	4b7d      	ldr	r3, [pc, #500]	; (800e680 <tcp_input+0x29c>)
 800e48c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e48e:	7cbb      	ldrb	r3, [r7, #18]
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7fd fe1a 	bl	800c0cc <pbuf_remove_header>
 800e498:	e04e      	b.n	800e538 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d105      	bne.n	800e4ae <tcp_input+0xca>
 800e4a2:	4b70      	ldr	r3, [pc, #448]	; (800e664 <tcp_input+0x280>)
 800e4a4:	22c2      	movs	r2, #194	; 0xc2
 800e4a6:	4977      	ldr	r1, [pc, #476]	; (800e684 <tcp_input+0x2a0>)
 800e4a8:	4870      	ldr	r0, [pc, #448]	; (800e66c <tcp_input+0x288>)
 800e4aa:	f007 fc57 	bl	8015d5c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e4ae:	2114      	movs	r1, #20
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fd fe0b 	bl	800c0cc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	895a      	ldrh	r2, [r3, #10]
 800e4ba:	4b71      	ldr	r3, [pc, #452]	; (800e680 <tcp_input+0x29c>)
 800e4bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e4be:	4b6e      	ldr	r3, [pc, #440]	; (800e678 <tcp_input+0x294>)
 800e4c0:	881a      	ldrh	r2, [r3, #0]
 800e4c2:	4b6f      	ldr	r3, [pc, #444]	; (800e680 <tcp_input+0x29c>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e4ca:	4b6d      	ldr	r3, [pc, #436]	; (800e680 <tcp_input+0x29c>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fd fdfb 	bl	800c0cc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	895b      	ldrh	r3, [r3, #10]
 800e4dc:	8a3a      	ldrh	r2, [r7, #16]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	f200 8361 	bhi.w	800eba6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	4a64      	ldr	r2, [pc, #400]	; (800e67c <tcp_input+0x298>)
 800e4ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	8a3a      	ldrh	r2, [r7, #16]
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fd fde8 	bl	800c0cc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	891a      	ldrh	r2, [r3, #8]
 800e500:	8a3b      	ldrh	r3, [r7, #16]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	b29a      	uxth	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	895b      	ldrh	r3, [r3, #10]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d005      	beq.n	800e51e <tcp_input+0x13a>
 800e512:	4b54      	ldr	r3, [pc, #336]	; (800e664 <tcp_input+0x280>)
 800e514:	22df      	movs	r2, #223	; 0xdf
 800e516:	495c      	ldr	r1, [pc, #368]	; (800e688 <tcp_input+0x2a4>)
 800e518:	4854      	ldr	r0, [pc, #336]	; (800e66c <tcp_input+0x288>)
 800e51a:	f007 fc1f 	bl	8015d5c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	891a      	ldrh	r2, [r3, #8]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	891b      	ldrh	r3, [r3, #8]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d005      	beq.n	800e538 <tcp_input+0x154>
 800e52c:	4b4d      	ldr	r3, [pc, #308]	; (800e664 <tcp_input+0x280>)
 800e52e:	22e0      	movs	r2, #224	; 0xe0
 800e530:	4956      	ldr	r1, [pc, #344]	; (800e68c <tcp_input+0x2a8>)
 800e532:	484e      	ldr	r0, [pc, #312]	; (800e66c <tcp_input+0x288>)
 800e534:	f007 fc12 	bl	8015d5c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e538:	4b4d      	ldr	r3, [pc, #308]	; (800e670 <tcp_input+0x28c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4a4b      	ldr	r2, [pc, #300]	; (800e670 <tcp_input+0x28c>)
 800e542:	6814      	ldr	r4, [r2, #0]
 800e544:	4618      	mov	r0, r3
 800e546:	f7fc fa9b 	bl	800aa80 <lwip_htons>
 800e54a:	4603      	mov	r3, r0
 800e54c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e54e:	4b48      	ldr	r3, [pc, #288]	; (800e670 <tcp_input+0x28c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	885b      	ldrh	r3, [r3, #2]
 800e554:	b29b      	uxth	r3, r3
 800e556:	4a46      	ldr	r2, [pc, #280]	; (800e670 <tcp_input+0x28c>)
 800e558:	6814      	ldr	r4, [r2, #0]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fc fa90 	bl	800aa80 <lwip_htons>
 800e560:	4603      	mov	r3, r0
 800e562:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e564:	4b42      	ldr	r3, [pc, #264]	; (800e670 <tcp_input+0x28c>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	4a41      	ldr	r2, [pc, #260]	; (800e670 <tcp_input+0x28c>)
 800e56c:	6814      	ldr	r4, [r2, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fc fa9b 	bl	800aaaa <lwip_htonl>
 800e574:	4603      	mov	r3, r0
 800e576:	6063      	str	r3, [r4, #4]
 800e578:	6863      	ldr	r3, [r4, #4]
 800e57a:	4a45      	ldr	r2, [pc, #276]	; (800e690 <tcp_input+0x2ac>)
 800e57c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e57e:	4b3c      	ldr	r3, [pc, #240]	; (800e670 <tcp_input+0x28c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	4a3a      	ldr	r2, [pc, #232]	; (800e670 <tcp_input+0x28c>)
 800e586:	6814      	ldr	r4, [r2, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fc fa8e 	bl	800aaaa <lwip_htonl>
 800e58e:	4603      	mov	r3, r0
 800e590:	60a3      	str	r3, [r4, #8]
 800e592:	68a3      	ldr	r3, [r4, #8]
 800e594:	4a3f      	ldr	r2, [pc, #252]	; (800e694 <tcp_input+0x2b0>)
 800e596:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e598:	4b35      	ldr	r3, [pc, #212]	; (800e670 <tcp_input+0x28c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	89db      	ldrh	r3, [r3, #14]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	4a33      	ldr	r2, [pc, #204]	; (800e670 <tcp_input+0x28c>)
 800e5a2:	6814      	ldr	r4, [r2, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fc fa6b 	bl	800aa80 <lwip_htons>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e5ae:	4b30      	ldr	r3, [pc, #192]	; (800e670 <tcp_input+0x28c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	899b      	ldrh	r3, [r3, #12]
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fc fa62 	bl	800aa80 <lwip_htons>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	4b34      	ldr	r3, [pc, #208]	; (800e698 <tcp_input+0x2b4>)
 800e5c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	891a      	ldrh	r2, [r3, #8]
 800e5ce:	4b33      	ldr	r3, [pc, #204]	; (800e69c <tcp_input+0x2b8>)
 800e5d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e5d2:	4b31      	ldr	r3, [pc, #196]	; (800e698 <tcp_input+0x2b4>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	f003 0303 	and.w	r3, r3, #3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00c      	beq.n	800e5f8 <tcp_input+0x214>
    tcplen++;
 800e5de:	4b2f      	ldr	r3, [pc, #188]	; (800e69c <tcp_input+0x2b8>)
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	4b2d      	ldr	r3, [pc, #180]	; (800e69c <tcp_input+0x2b8>)
 800e5e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	891a      	ldrh	r2, [r3, #8]
 800e5ee:	4b2b      	ldr	r3, [pc, #172]	; (800e69c <tcp_input+0x2b8>)
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	f200 82d9 	bhi.w	800ebaa <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5fc:	4b28      	ldr	r3, [pc, #160]	; (800e6a0 <tcp_input+0x2bc>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	61fb      	str	r3, [r7, #28]
 800e602:	e09d      	b.n	800e740 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	7d1b      	ldrb	r3, [r3, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d105      	bne.n	800e618 <tcp_input+0x234>
 800e60c:	4b15      	ldr	r3, [pc, #84]	; (800e664 <tcp_input+0x280>)
 800e60e:	22fb      	movs	r2, #251	; 0xfb
 800e610:	4924      	ldr	r1, [pc, #144]	; (800e6a4 <tcp_input+0x2c0>)
 800e612:	4816      	ldr	r0, [pc, #88]	; (800e66c <tcp_input+0x288>)
 800e614:	f007 fba2 	bl	8015d5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	7d1b      	ldrb	r3, [r3, #20]
 800e61c:	2b0a      	cmp	r3, #10
 800e61e:	d105      	bne.n	800e62c <tcp_input+0x248>
 800e620:	4b10      	ldr	r3, [pc, #64]	; (800e664 <tcp_input+0x280>)
 800e622:	22fc      	movs	r2, #252	; 0xfc
 800e624:	4920      	ldr	r1, [pc, #128]	; (800e6a8 <tcp_input+0x2c4>)
 800e626:	4811      	ldr	r0, [pc, #68]	; (800e66c <tcp_input+0x288>)
 800e628:	f007 fb98 	bl	8015d5c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
 800e630:	2b01      	cmp	r3, #1
 800e632:	d105      	bne.n	800e640 <tcp_input+0x25c>
 800e634:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <tcp_input+0x280>)
 800e636:	22fd      	movs	r2, #253	; 0xfd
 800e638:	491c      	ldr	r1, [pc, #112]	; (800e6ac <tcp_input+0x2c8>)
 800e63a:	480c      	ldr	r0, [pc, #48]	; (800e66c <tcp_input+0x288>)
 800e63c:	f007 fb8e 	bl	8015d5c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	7a1b      	ldrb	r3, [r3, #8]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d033      	beq.n	800e6b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	7a1a      	ldrb	r2, [r3, #8]
 800e64c:	4b09      	ldr	r3, [pc, #36]	; (800e674 <tcp_input+0x290>)
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e654:	3301      	adds	r3, #1
 800e656:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e658:	429a      	cmp	r2, r3
 800e65a:	d029      	beq.n	800e6b0 <tcp_input+0x2cc>
      prev = pcb;
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	61bb      	str	r3, [r7, #24]
      continue;
 800e660:	e06b      	b.n	800e73a <tcp_input+0x356>
 800e662:	bf00      	nop
 800e664:	08018ea0 	.word	0x08018ea0
 800e668:	08018ed4 	.word	0x08018ed4
 800e66c:	08018eec 	.word	0x08018eec
 800e670:	20004aec 	.word	0x20004aec
 800e674:	20007f88 	.word	0x20007f88
 800e678:	20004af0 	.word	0x20004af0
 800e67c:	20004af4 	.word	0x20004af4
 800e680:	20004af2 	.word	0x20004af2
 800e684:	08018f14 	.word	0x08018f14
 800e688:	08018f24 	.word	0x08018f24
 800e68c:	08018f30 	.word	0x08018f30
 800e690:	20004afc 	.word	0x20004afc
 800e694:	20004b00 	.word	0x20004b00
 800e698:	20004b08 	.word	0x20004b08
 800e69c:	20004b06 	.word	0x20004b06
 800e6a0:	2000d85c 	.word	0x2000d85c
 800e6a4:	08018f50 	.word	0x08018f50
 800e6a8:	08018f78 	.word	0x08018f78
 800e6ac:	08018fa4 	.word	0x08018fa4
    }

    if (pcb->remote_port == tcphdr->src &&
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	8b1a      	ldrh	r2, [r3, #24]
 800e6b4:	4b94      	ldr	r3, [pc, #592]	; (800e908 <tcp_input+0x524>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d13a      	bne.n	800e736 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	8ada      	ldrh	r2, [r3, #22]
 800e6c4:	4b90      	ldr	r3, [pc, #576]	; (800e908 <tcp_input+0x524>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	885b      	ldrh	r3, [r3, #2]
 800e6ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d132      	bne.n	800e736 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	685a      	ldr	r2, [r3, #4]
 800e6d4:	4b8d      	ldr	r3, [pc, #564]	; (800e90c <tcp_input+0x528>)
 800e6d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d12c      	bne.n	800e736 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	4b8a      	ldr	r3, [pc, #552]	; (800e90c <tcp_input+0x528>)
 800e6e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d126      	bne.n	800e736 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	69fa      	ldr	r2, [r7, #28]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d106      	bne.n	800e700 <tcp_input+0x31c>
 800e6f2:	4b87      	ldr	r3, [pc, #540]	; (800e910 <tcp_input+0x52c>)
 800e6f4:	f240 120d 	movw	r2, #269	; 0x10d
 800e6f8:	4986      	ldr	r1, [pc, #536]	; (800e914 <tcp_input+0x530>)
 800e6fa:	4887      	ldr	r0, [pc, #540]	; (800e918 <tcp_input+0x534>)
 800e6fc:	f007 fb2e 	bl	8015d5c <iprintf>
      if (prev != NULL) {
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00a      	beq.n	800e71c <tcp_input+0x338>
        prev->next = pcb->next;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	68da      	ldr	r2, [r3, #12]
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e70e:	4b83      	ldr	r3, [pc, #524]	; (800e91c <tcp_input+0x538>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e716:	4a81      	ldr	r2, [pc, #516]	; (800e91c <tcp_input+0x538>)
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	69fa      	ldr	r2, [r7, #28]
 800e722:	429a      	cmp	r2, r3
 800e724:	d111      	bne.n	800e74a <tcp_input+0x366>
 800e726:	4b7a      	ldr	r3, [pc, #488]	; (800e910 <tcp_input+0x52c>)
 800e728:	f240 1215 	movw	r2, #277	; 0x115
 800e72c:	497c      	ldr	r1, [pc, #496]	; (800e920 <tcp_input+0x53c>)
 800e72e:	487a      	ldr	r0, [pc, #488]	; (800e918 <tcp_input+0x534>)
 800e730:	f007 fb14 	bl	8015d5c <iprintf>
      break;
 800e734:	e009      	b.n	800e74a <tcp_input+0x366>
    }
    prev = pcb;
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	2b00      	cmp	r3, #0
 800e744:	f47f af5e 	bne.w	800e604 <tcp_input+0x220>
 800e748:	e000      	b.n	800e74c <tcp_input+0x368>
      break;
 800e74a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 8095 	bne.w	800e87e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e754:	4b73      	ldr	r3, [pc, #460]	; (800e924 <tcp_input+0x540>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	61fb      	str	r3, [r7, #28]
 800e75a:	e03f      	b.n	800e7dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	7d1b      	ldrb	r3, [r3, #20]
 800e760:	2b0a      	cmp	r3, #10
 800e762:	d006      	beq.n	800e772 <tcp_input+0x38e>
 800e764:	4b6a      	ldr	r3, [pc, #424]	; (800e910 <tcp_input+0x52c>)
 800e766:	f240 121f 	movw	r2, #287	; 0x11f
 800e76a:	496f      	ldr	r1, [pc, #444]	; (800e928 <tcp_input+0x544>)
 800e76c:	486a      	ldr	r0, [pc, #424]	; (800e918 <tcp_input+0x534>)
 800e76e:	f007 faf5 	bl	8015d5c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	7a1b      	ldrb	r3, [r3, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d009      	beq.n	800e78e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	7a1a      	ldrb	r2, [r3, #8]
 800e77e:	4b63      	ldr	r3, [pc, #396]	; (800e90c <tcp_input+0x528>)
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e786:	3301      	adds	r3, #1
 800e788:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d122      	bne.n	800e7d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	8b1a      	ldrh	r2, [r3, #24]
 800e792:	4b5d      	ldr	r3, [pc, #372]	; (800e908 <tcp_input+0x524>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d11b      	bne.n	800e7d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	8ada      	ldrh	r2, [r3, #22]
 800e7a2:	4b59      	ldr	r3, [pc, #356]	; (800e908 <tcp_input+0x524>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d113      	bne.n	800e7d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	4b56      	ldr	r3, [pc, #344]	; (800e90c <tcp_input+0x528>)
 800e7b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d10d      	bne.n	800e7d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	4b53      	ldr	r3, [pc, #332]	; (800e90c <tcp_input+0x528>)
 800e7c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d107      	bne.n	800e7d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e7c6:	69f8      	ldr	r0, [r7, #28]
 800e7c8:	f000 fb54 	bl	800ee74 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7fd fd03 	bl	800c1d8 <pbuf_free>
        return;
 800e7d2:	e1f0      	b.n	800ebb6 <tcp_input+0x7d2>
        continue;
 800e7d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	61fb      	str	r3, [r7, #28]
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1bc      	bne.n	800e75c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7e6:	4b51      	ldr	r3, [pc, #324]	; (800e92c <tcp_input+0x548>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	e02a      	b.n	800e844 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	7a1b      	ldrb	r3, [r3, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00c      	beq.n	800e810 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	7a1a      	ldrb	r2, [r3, #8]
 800e7fa:	4b44      	ldr	r3, [pc, #272]	; (800e90c <tcp_input+0x528>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e802:	3301      	adds	r3, #1
 800e804:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e806:	429a      	cmp	r2, r3
 800e808:	d002      	beq.n	800e810 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	61bb      	str	r3, [r7, #24]
        continue;
 800e80e:	e016      	b.n	800e83e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	8ada      	ldrh	r2, [r3, #22]
 800e814:	4b3c      	ldr	r3, [pc, #240]	; (800e908 <tcp_input+0x524>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	885b      	ldrh	r3, [r3, #2]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d10c      	bne.n	800e83a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	4b39      	ldr	r3, [pc, #228]	; (800e90c <tcp_input+0x528>)
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d00f      	beq.n	800e84c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00d      	beq.n	800e84e <tcp_input+0x46a>
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d009      	beq.n	800e84e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1d1      	bne.n	800e7ee <tcp_input+0x40a>
 800e84a:	e000      	b.n	800e84e <tcp_input+0x46a>
            break;
 800e84c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d014      	beq.n	800e87e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e862:	4b32      	ldr	r3, [pc, #200]	; (800e92c <tcp_input+0x548>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e86a:	4a30      	ldr	r2, [pc, #192]	; (800e92c <tcp_input+0x548>)
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e870:	6978      	ldr	r0, [r7, #20]
 800e872:	f000 fa01 	bl	800ec78 <tcp_listen_input>
      }
      pbuf_free(p);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7fd fcae 	bl	800c1d8 <pbuf_free>
      return;
 800e87c:	e19b      	b.n	800ebb6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 8160 	beq.w	800eb46 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e886:	4b2a      	ldr	r3, [pc, #168]	; (800e930 <tcp_input+0x54c>)
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	891a      	ldrh	r2, [r3, #8]
 800e890:	4b27      	ldr	r3, [pc, #156]	; (800e930 <tcp_input+0x54c>)
 800e892:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e894:	4a26      	ldr	r2, [pc, #152]	; (800e930 <tcp_input+0x54c>)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e89a:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <tcp_input+0x524>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a24      	ldr	r2, [pc, #144]	; (800e930 <tcp_input+0x54c>)
 800e8a0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e8a2:	4b24      	ldr	r3, [pc, #144]	; (800e934 <tcp_input+0x550>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e8a8:	4b23      	ldr	r3, [pc, #140]	; (800e938 <tcp_input+0x554>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e8ae:	4b23      	ldr	r3, [pc, #140]	; (800e93c <tcp_input+0x558>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e8b4:	4b22      	ldr	r3, [pc, #136]	; (800e940 <tcp_input+0x55c>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0308 	and.w	r3, r3, #8
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d006      	beq.n	800e8ce <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7b5b      	ldrb	r3, [r3, #13]
 800e8c4:	f043 0301 	orr.w	r3, r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d038      	beq.n	800e948 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8d6:	69f8      	ldr	r0, [r7, #28]
 800e8d8:	f7ff f870 	bl	800d9bc <tcp_process_refused_data>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f113 0f0d 	cmn.w	r3, #13
 800e8e2:	d007      	beq.n	800e8f4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d02d      	beq.n	800e948 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8ec:	4b15      	ldr	r3, [pc, #84]	; (800e944 <tcp_input+0x560>)
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d029      	beq.n	800e948 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f040 8104 	bne.w	800eb06 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e8fe:	69f8      	ldr	r0, [r7, #28]
 800e900:	f003 fe16 	bl	8012530 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e904:	e0ff      	b.n	800eb06 <tcp_input+0x722>
 800e906:	bf00      	nop
 800e908:	20004aec 	.word	0x20004aec
 800e90c:	20007f88 	.word	0x20007f88
 800e910:	08018ea0 	.word	0x08018ea0
 800e914:	08018fcc 	.word	0x08018fcc
 800e918:	08018eec 	.word	0x08018eec
 800e91c:	2000d85c 	.word	0x2000d85c
 800e920:	08018ff8 	.word	0x08018ff8
 800e924:	2000d86c 	.word	0x2000d86c
 800e928:	08019024 	.word	0x08019024
 800e92c:	2000d864 	.word	0x2000d864
 800e930:	20004adc 	.word	0x20004adc
 800e934:	20004b0c 	.word	0x20004b0c
 800e938:	20004b09 	.word	0x20004b09
 800e93c:	20004b04 	.word	0x20004b04
 800e940:	20004b08 	.word	0x20004b08
 800e944:	20004b06 	.word	0x20004b06
      }
    }
    tcp_input_pcb = pcb;
 800e948:	4a9c      	ldr	r2, [pc, #624]	; (800ebbc <tcp_input+0x7d8>)
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e94e:	69f8      	ldr	r0, [r7, #28]
 800e950:	f000 fb0a 	bl	800ef68 <tcp_process>
 800e954:	4603      	mov	r3, r0
 800e956:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e958:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e95c:	f113 0f0d 	cmn.w	r3, #13
 800e960:	f000 80d3 	beq.w	800eb0a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e964:	4b96      	ldr	r3, [pc, #600]	; (800ebc0 <tcp_input+0x7dc>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 0308 	and.w	r3, r3, #8
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d015      	beq.n	800e99c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e976:	2b00      	cmp	r3, #0
 800e978:	d008      	beq.n	800e98c <tcp_input+0x5a8>
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	6912      	ldr	r2, [r2, #16]
 800e984:	f06f 010d 	mvn.w	r1, #13
 800e988:	4610      	mov	r0, r2
 800e98a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e98c:	69f9      	ldr	r1, [r7, #28]
 800e98e:	488d      	ldr	r0, [pc, #564]	; (800ebc4 <tcp_input+0x7e0>)
 800e990:	f7ff fbb0 	bl	800e0f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e994:	69f8      	ldr	r0, [r7, #28]
 800e996:	f7fd fecb 	bl	800c730 <tcp_free>
 800e99a:	e0c1      	b.n	800eb20 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e9a0:	4b89      	ldr	r3, [pc, #548]	; (800ebc8 <tcp_input+0x7e4>)
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01d      	beq.n	800e9e4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e9a8:	4b87      	ldr	r3, [pc, #540]	; (800ebc8 <tcp_input+0x7e4>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <tcp_input+0x5ea>
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9be:	69fa      	ldr	r2, [r7, #28]
 800e9c0:	6910      	ldr	r0, [r2, #16]
 800e9c2:	89fa      	ldrh	r2, [r7, #14]
 800e9c4:	69f9      	ldr	r1, [r7, #28]
 800e9c6:	4798      	blx	r3
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	74fb      	strb	r3, [r7, #19]
 800e9cc:	e001      	b.n	800e9d2 <tcp_input+0x5ee>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9d6:	f113 0f0d 	cmn.w	r3, #13
 800e9da:	f000 8098 	beq.w	800eb0e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e9de:	4b7a      	ldr	r3, [pc, #488]	; (800ebc8 <tcp_input+0x7e4>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e9e4:	69f8      	ldr	r0, [r7, #28]
 800e9e6:	f000 f907 	bl	800ebf8 <tcp_input_delayed_close>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f040 8090 	bne.w	800eb12 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e9f2:	4b76      	ldr	r3, [pc, #472]	; (800ebcc <tcp_input+0x7e8>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d041      	beq.n	800ea7e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d006      	beq.n	800ea10 <tcp_input+0x62c>
 800ea02:	4b73      	ldr	r3, [pc, #460]	; (800ebd0 <tcp_input+0x7ec>)
 800ea04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ea08:	4972      	ldr	r1, [pc, #456]	; (800ebd4 <tcp_input+0x7f0>)
 800ea0a:	4873      	ldr	r0, [pc, #460]	; (800ebd8 <tcp_input+0x7f4>)
 800ea0c:	f007 f9a6 	bl	8015d5c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d008      	beq.n	800ea2e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ea1c:	4b6b      	ldr	r3, [pc, #428]	; (800ebcc <tcp_input+0x7e8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fd fbd9 	bl	800c1d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ea26:	69f8      	ldr	r0, [r7, #28]
 800ea28:	f7fe f9c6 	bl	800cdb8 <tcp_abort>
            goto aborted;
 800ea2c:	e078      	b.n	800eb20 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00c      	beq.n	800ea52 <tcp_input+0x66e>
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	6918      	ldr	r0, [r3, #16]
 800ea42:	4b62      	ldr	r3, [pc, #392]	; (800ebcc <tcp_input+0x7e8>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	2300      	movs	r3, #0
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	47a0      	blx	r4
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	74fb      	strb	r3, [r7, #19]
 800ea50:	e008      	b.n	800ea64 <tcp_input+0x680>
 800ea52:	4b5e      	ldr	r3, [pc, #376]	; (800ebcc <tcp_input+0x7e8>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	2300      	movs	r3, #0
 800ea58:	69f9      	ldr	r1, [r7, #28]
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	f7ff f884 	bl	800db68 <tcp_recv_null>
 800ea60:	4603      	mov	r3, r0
 800ea62:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ea64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea68:	f113 0f0d 	cmn.w	r3, #13
 800ea6c:	d053      	beq.n	800eb16 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea76:	4b55      	ldr	r3, [pc, #340]	; (800ebcc <tcp_input+0x7e8>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea7e:	4b50      	ldr	r3, [pc, #320]	; (800ebc0 <tcp_input+0x7dc>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d030      	beq.n	800eaec <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea96:	7b5a      	ldrb	r2, [r3, #13]
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea9c:	f042 0220 	orr.w	r2, r2, #32
 800eaa0:	b2d2      	uxtb	r2, r2
 800eaa2:	735a      	strb	r2, [r3, #13]
 800eaa4:	e022      	b.n	800eaec <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eaae:	d005      	beq.n	800eabc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eab4:	3301      	adds	r3, #1
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00b      	beq.n	800eade <tcp_input+0x6fa>
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	6918      	ldr	r0, [r3, #16]
 800ead0:	2300      	movs	r3, #0
 800ead2:	2200      	movs	r2, #0
 800ead4:	69f9      	ldr	r1, [r7, #28]
 800ead6:	47a0      	blx	r4
 800ead8:	4603      	mov	r3, r0
 800eada:	74fb      	strb	r3, [r7, #19]
 800eadc:	e001      	b.n	800eae2 <tcp_input+0x6fe>
 800eade:	2300      	movs	r3, #0
 800eae0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eae6:	f113 0f0d 	cmn.w	r3, #13
 800eaea:	d016      	beq.n	800eb1a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eaec:	4b33      	ldr	r3, [pc, #204]	; (800ebbc <tcp_input+0x7d8>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eaf2:	69f8      	ldr	r0, [r7, #28]
 800eaf4:	f000 f880 	bl	800ebf8 <tcp_input_delayed_close>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10f      	bne.n	800eb1e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eafe:	69f8      	ldr	r0, [r7, #28]
 800eb00:	f002 ff10 	bl	8011924 <tcp_output>
 800eb04:	e00c      	b.n	800eb20 <tcp_input+0x73c>
        goto aborted;
 800eb06:	bf00      	nop
 800eb08:	e00a      	b.n	800eb20 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eb0a:	bf00      	nop
 800eb0c:	e008      	b.n	800eb20 <tcp_input+0x73c>
              goto aborted;
 800eb0e:	bf00      	nop
 800eb10:	e006      	b.n	800eb20 <tcp_input+0x73c>
          goto aborted;
 800eb12:	bf00      	nop
 800eb14:	e004      	b.n	800eb20 <tcp_input+0x73c>
            goto aborted;
 800eb16:	bf00      	nop
 800eb18:	e002      	b.n	800eb20 <tcp_input+0x73c>
              goto aborted;
 800eb1a:	bf00      	nop
 800eb1c:	e000      	b.n	800eb20 <tcp_input+0x73c>
          goto aborted;
 800eb1e:	bf00      	nop
    tcp_input_pcb = NULL;
 800eb20:	4b26      	ldr	r3, [pc, #152]	; (800ebbc <tcp_input+0x7d8>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eb26:	4b29      	ldr	r3, [pc, #164]	; (800ebcc <tcp_input+0x7e8>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eb2c:	4b2b      	ldr	r3, [pc, #172]	; (800ebdc <tcp_input+0x7f8>)
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d03f      	beq.n	800ebb4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800eb34:	4b29      	ldr	r3, [pc, #164]	; (800ebdc <tcp_input+0x7f8>)
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fd fb4d 	bl	800c1d8 <pbuf_free>
      inseg.p = NULL;
 800eb3e:	4b27      	ldr	r3, [pc, #156]	; (800ebdc <tcp_input+0x7f8>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eb44:	e036      	b.n	800ebb4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eb46:	4b26      	ldr	r3, [pc, #152]	; (800ebe0 <tcp_input+0x7fc>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fb ff96 	bl	800aa80 <lwip_htons>
 800eb54:	4603      	mov	r3, r0
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f003 0304 	and.w	r3, r3, #4
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d118      	bne.n	800eb92 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb60:	4b20      	ldr	r3, [pc, #128]	; (800ebe4 <tcp_input+0x800>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	4b20      	ldr	r3, [pc, #128]	; (800ebe8 <tcp_input+0x804>)
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	4b20      	ldr	r3, [pc, #128]	; (800ebec <tcp_input+0x808>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb70:	4b1b      	ldr	r3, [pc, #108]	; (800ebe0 <tcp_input+0x7fc>)
 800eb72:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb78:	4a19      	ldr	r2, [pc, #100]	; (800ebe0 <tcp_input+0x7fc>)
 800eb7a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb7c:	8812      	ldrh	r2, [r2, #0]
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	9202      	str	r2, [sp, #8]
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <tcp_input+0x80c>)
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	4b1a      	ldr	r3, [pc, #104]	; (800ebf4 <tcp_input+0x810>)
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	f003 fc7d 	bl	801248c <tcp_rst>
    pbuf_free(p);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7fd fb20 	bl	800c1d8 <pbuf_free>
  return;
 800eb98:	e00c      	b.n	800ebb4 <tcp_input+0x7d0>
    goto dropped;
 800eb9a:	bf00      	nop
 800eb9c:	e006      	b.n	800ebac <tcp_input+0x7c8>
    goto dropped;
 800eb9e:	bf00      	nop
 800eba0:	e004      	b.n	800ebac <tcp_input+0x7c8>
    goto dropped;
 800eba2:	bf00      	nop
 800eba4:	e002      	b.n	800ebac <tcp_input+0x7c8>
      goto dropped;
 800eba6:	bf00      	nop
 800eba8:	e000      	b.n	800ebac <tcp_input+0x7c8>
      goto dropped;
 800ebaa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7fd fb13 	bl	800c1d8 <pbuf_free>
 800ebb2:	e000      	b.n	800ebb6 <tcp_input+0x7d2>
  return;
 800ebb4:	bf00      	nop
}
 800ebb6:	3724      	adds	r7, #36	; 0x24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}
 800ebbc:	2000d870 	.word	0x2000d870
 800ebc0:	20004b09 	.word	0x20004b09
 800ebc4:	2000d85c 	.word	0x2000d85c
 800ebc8:	20004b04 	.word	0x20004b04
 800ebcc:	20004b0c 	.word	0x20004b0c
 800ebd0:	08018ea0 	.word	0x08018ea0
 800ebd4:	08019054 	.word	0x08019054
 800ebd8:	08018eec 	.word	0x08018eec
 800ebdc:	20004adc 	.word	0x20004adc
 800ebe0:	20004aec 	.word	0x20004aec
 800ebe4:	20004b00 	.word	0x20004b00
 800ebe8:	20004b06 	.word	0x20004b06
 800ebec:	20004afc 	.word	0x20004afc
 800ebf0:	20007f98 	.word	0x20007f98
 800ebf4:	20007f9c 	.word	0x20007f9c

0800ebf8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d106      	bne.n	800ec14 <tcp_input_delayed_close+0x1c>
 800ec06:	4b17      	ldr	r3, [pc, #92]	; (800ec64 <tcp_input_delayed_close+0x6c>)
 800ec08:	f240 225a 	movw	r2, #602	; 0x25a
 800ec0c:	4916      	ldr	r1, [pc, #88]	; (800ec68 <tcp_input_delayed_close+0x70>)
 800ec0e:	4817      	ldr	r0, [pc, #92]	; (800ec6c <tcp_input_delayed_close+0x74>)
 800ec10:	f007 f8a4 	bl	8015d5c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ec14:	4b16      	ldr	r3, [pc, #88]	; (800ec70 <tcp_input_delayed_close+0x78>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d01c      	beq.n	800ec5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	8b5b      	ldrh	r3, [r3, #26]
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10d      	bne.n	800ec48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d008      	beq.n	800ec48 <tcp_input_delayed_close+0x50>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	6912      	ldr	r2, [r2, #16]
 800ec40:	f06f 010e 	mvn.w	r1, #14
 800ec44:	4610      	mov	r0, r2
 800ec46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	480a      	ldr	r0, [pc, #40]	; (800ec74 <tcp_input_delayed_close+0x7c>)
 800ec4c:	f7ff fa52 	bl	800e0f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7fd fd6d 	bl	800c730 <tcp_free>
    return 1;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	08018ea0 	.word	0x08018ea0
 800ec68:	08019070 	.word	0x08019070
 800ec6c:	08018eec 	.word	0x08018eec
 800ec70:	20004b09 	.word	0x20004b09
 800ec74:	2000d85c 	.word	0x2000d85c

0800ec78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec78:	b590      	push	{r4, r7, lr}
 800ec7a:	b08b      	sub	sp, #44	; 0x2c
 800ec7c:	af04      	add	r7, sp, #16
 800ec7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ec80:	4b6f      	ldr	r3, [pc, #444]	; (800ee40 <tcp_listen_input+0x1c8>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f003 0304 	and.w	r3, r3, #4
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f040 80d2 	bne.w	800ee32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <tcp_listen_input+0x2a>
 800ec94:	4b6b      	ldr	r3, [pc, #428]	; (800ee44 <tcp_listen_input+0x1cc>)
 800ec96:	f240 2281 	movw	r2, #641	; 0x281
 800ec9a:	496b      	ldr	r1, [pc, #428]	; (800ee48 <tcp_listen_input+0x1d0>)
 800ec9c:	486b      	ldr	r0, [pc, #428]	; (800ee4c <tcp_listen_input+0x1d4>)
 800ec9e:	f007 f85d 	bl	8015d5c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eca2:	4b67      	ldr	r3, [pc, #412]	; (800ee40 <tcp_listen_input+0x1c8>)
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	f003 0310 	and.w	r3, r3, #16
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d019      	beq.n	800ece2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecae:	4b68      	ldr	r3, [pc, #416]	; (800ee50 <tcp_listen_input+0x1d8>)
 800ecb0:	6819      	ldr	r1, [r3, #0]
 800ecb2:	4b68      	ldr	r3, [pc, #416]	; (800ee54 <tcp_listen_input+0x1dc>)
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	4b67      	ldr	r3, [pc, #412]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecbe:	4b67      	ldr	r3, [pc, #412]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecc2:	885b      	ldrh	r3, [r3, #2]
 800ecc4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc6:	4a65      	ldr	r2, [pc, #404]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ecc8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecca:	8812      	ldrh	r2, [r2, #0]
 800eccc:	b292      	uxth	r2, r2
 800ecce:	9202      	str	r2, [sp, #8]
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	4b63      	ldr	r3, [pc, #396]	; (800ee60 <tcp_listen_input+0x1e8>)
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	4b63      	ldr	r3, [pc, #396]	; (800ee64 <tcp_listen_input+0x1ec>)
 800ecd8:	4602      	mov	r2, r0
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f003 fbd6 	bl	801248c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ece0:	e0a9      	b.n	800ee36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ece2:	4b57      	ldr	r3, [pc, #348]	; (800ee40 <tcp_listen_input+0x1c8>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 0302 	and.w	r3, r3, #2
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 80a3 	beq.w	800ee36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7d5b      	ldrb	r3, [r3, #21]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f85b 	bl	800ddb0 <tcp_alloc>
 800ecfa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d111      	bne.n	800ed26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <tcp_listen_input+0xa8>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	6910      	ldr	r0, [r2, #16]
 800ed12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed16:	2100      	movs	r1, #0
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73bb      	strb	r3, [r7, #14]
      return;
 800ed1e:	e08b      	b.n	800ee38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed20:	23f0      	movs	r3, #240	; 0xf0
 800ed22:	73bb      	strb	r3, [r7, #14]
      return;
 800ed24:	e088      	b.n	800ee38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed26:	4b50      	ldr	r3, [pc, #320]	; (800ee68 <tcp_listen_input+0x1f0>)
 800ed28:	695a      	ldr	r2, [r3, #20]
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ed2e:	4b4e      	ldr	r3, [pc, #312]	; (800ee68 <tcp_listen_input+0x1f0>)
 800ed30:	691a      	ldr	r2, [r3, #16]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	8ada      	ldrh	r2, [r3, #22]
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ed3e:	4b47      	ldr	r3, [pc, #284]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2203      	movs	r2, #3
 800ed4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ed50:	4b41      	ldr	r3, [pc, #260]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ed62:	6978      	ldr	r0, [r7, #20]
 800ed64:	f7ff fa5a 	bl	800e21c <tcp_next_iss>
 800ed68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	693a      	ldr	r2, [r7, #16]
 800ed6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed82:	4b35      	ldr	r3, [pc, #212]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	1e5a      	subs	r2, r3, #1
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	691a      	ldr	r2, [r3, #16]
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	7a5b      	ldrb	r3, [r3, #9]
 800ed9e:	f003 030c 	and.w	r3, r3, #12
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7a1a      	ldrb	r2, [r3, #8]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800edb0:	4b2e      	ldr	r3, [pc, #184]	; (800ee6c <tcp_listen_input+0x1f4>)
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	60da      	str	r2, [r3, #12]
 800edb8:	4a2c      	ldr	r2, [pc, #176]	; (800ee6c <tcp_listen_input+0x1f4>)
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	f003 fd27 	bl	8012810 <tcp_timer_needed>
 800edc2:	4b2b      	ldr	r3, [pc, #172]	; (800ee70 <tcp_listen_input+0x1f8>)
 800edc4:	2201      	movs	r2, #1
 800edc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800edc8:	6978      	ldr	r0, [r7, #20]
 800edca:	f001 fd8d 	bl	80108e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800edce:	4b23      	ldr	r3, [pc, #140]	; (800ee5c <tcp_listen_input+0x1e4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	89db      	ldrh	r3, [r3, #14]
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	3304      	adds	r3, #4
 800edf0:	4618      	mov	r0, r3
 800edf2:	f005 fa61 	bl	80142b8 <ip4_route>
 800edf6:	4601      	mov	r1, r0
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	3304      	adds	r3, #4
 800edfc:	461a      	mov	r2, r3
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff fa32 	bl	800e268 <tcp_eff_send_mss_netif>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ee0c:	2112      	movs	r1, #18
 800ee0e:	6978      	ldr	r0, [r7, #20]
 800ee10:	f002 fc9a 	bl	8011748 <tcp_enqueue_flags>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ee18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ee20:	2100      	movs	r1, #0
 800ee22:	6978      	ldr	r0, [r7, #20]
 800ee24:	f7fd ff0a 	bl	800cc3c <tcp_abandon>
      return;
 800ee28:	e006      	b.n	800ee38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ee2a:	6978      	ldr	r0, [r7, #20]
 800ee2c:	f002 fd7a 	bl	8011924 <tcp_output>
  return;
 800ee30:	e001      	b.n	800ee36 <tcp_listen_input+0x1be>
    return;
 800ee32:	bf00      	nop
 800ee34:	e000      	b.n	800ee38 <tcp_listen_input+0x1c0>
  return;
 800ee36:	bf00      	nop
}
 800ee38:	371c      	adds	r7, #28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd90      	pop	{r4, r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20004b08 	.word	0x20004b08
 800ee44:	08018ea0 	.word	0x08018ea0
 800ee48:	08019098 	.word	0x08019098
 800ee4c:	08018eec 	.word	0x08018eec
 800ee50:	20004b00 	.word	0x20004b00
 800ee54:	20004b06 	.word	0x20004b06
 800ee58:	20004afc 	.word	0x20004afc
 800ee5c:	20004aec 	.word	0x20004aec
 800ee60:	20007f98 	.word	0x20007f98
 800ee64:	20007f9c 	.word	0x20007f9c
 800ee68:	20007f88 	.word	0x20007f88
 800ee6c:	2000d85c 	.word	0x2000d85c
 800ee70:	2000d858 	.word	0x2000d858

0800ee74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af04      	add	r7, sp, #16
 800ee7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ee7c:	4b2f      	ldr	r3, [pc, #188]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d153      	bne.n	800ef30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcp_timewait_input+0x28>
 800ee8e:	4b2c      	ldr	r3, [pc, #176]	; (800ef40 <tcp_timewait_input+0xcc>)
 800ee90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee94:	492b      	ldr	r1, [pc, #172]	; (800ef44 <tcp_timewait_input+0xd0>)
 800ee96:	482c      	ldr	r0, [pc, #176]	; (800ef48 <tcp_timewait_input+0xd4>)
 800ee98:	f006 ff60 	bl	8015d5c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee9c:	4b27      	ldr	r3, [pc, #156]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d02a      	beq.n	800eefe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eea8:	4b28      	ldr	r3, [pc, #160]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	db2d      	blt.n	800ef12 <tcp_timewait_input+0x9e>
 800eeb6:	4b25      	ldr	r3, [pc, #148]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebe:	6879      	ldr	r1, [r7, #4]
 800eec0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eec2:	440b      	add	r3, r1
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	dc23      	bgt.n	800ef12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeca:	4b21      	ldr	r3, [pc, #132]	; (800ef50 <tcp_timewait_input+0xdc>)
 800eecc:	6819      	ldr	r1, [r3, #0]
 800eece:	4b21      	ldr	r3, [pc, #132]	; (800ef54 <tcp_timewait_input+0xe0>)
 800eed0:	881b      	ldrh	r3, [r3, #0]
 800eed2:	461a      	mov	r2, r3
 800eed4:	4b1d      	ldr	r3, [pc, #116]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeda:	4b1f      	ldr	r3, [pc, #124]	; (800ef58 <tcp_timewait_input+0xe4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eede:	885b      	ldrh	r3, [r3, #2]
 800eee0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eee2:	4a1d      	ldr	r2, [pc, #116]	; (800ef58 <tcp_timewait_input+0xe4>)
 800eee4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eee6:	8812      	ldrh	r2, [r2, #0]
 800eee8:	b292      	uxth	r2, r2
 800eeea:	9202      	str	r2, [sp, #8]
 800eeec:	9301      	str	r3, [sp, #4]
 800eeee:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <tcp_timewait_input+0xe8>)
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	4b1b      	ldr	r3, [pc, #108]	; (800ef60 <tcp_timewait_input+0xec>)
 800eef4:	4602      	mov	r2, r0
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f003 fac8 	bl	801248c <tcp_rst>
      return;
 800eefc:	e01b      	b.n	800ef36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800eefe:	4b0f      	ldr	r3, [pc, #60]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ef0a:	4b16      	ldr	r3, [pc, #88]	; (800ef64 <tcp_timewait_input+0xf0>)
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ef12:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <tcp_timewait_input+0xe0>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8b5b      	ldrh	r3, [r3, #26]
 800ef1e:	f043 0302 	orr.w	r3, r3, #2
 800ef22:	b29a      	uxth	r2, r3
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f002 fcfb 	bl	8011924 <tcp_output>
  }
  return;
 800ef2e:	e001      	b.n	800ef34 <tcp_timewait_input+0xc0>
    return;
 800ef30:	bf00      	nop
 800ef32:	e000      	b.n	800ef36 <tcp_timewait_input+0xc2>
  return;
 800ef34:	bf00      	nop
}
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	20004b08 	.word	0x20004b08
 800ef40:	08018ea0 	.word	0x08018ea0
 800ef44:	080190b8 	.word	0x080190b8
 800ef48:	08018eec 	.word	0x08018eec
 800ef4c:	20004afc 	.word	0x20004afc
 800ef50:	20004b00 	.word	0x20004b00
 800ef54:	20004b06 	.word	0x20004b06
 800ef58:	20004aec 	.word	0x20004aec
 800ef5c:	20007f98 	.word	0x20007f98
 800ef60:	20007f9c 	.word	0x20007f9c
 800ef64:	2000d860 	.word	0x2000d860

0800ef68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b08d      	sub	sp, #52	; 0x34
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <tcp_process+0x24>
 800ef7e:	4ba5      	ldr	r3, [pc, #660]	; (800f214 <tcp_process+0x2ac>)
 800ef80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef84:	49a4      	ldr	r1, [pc, #656]	; (800f218 <tcp_process+0x2b0>)
 800ef86:	48a5      	ldr	r0, [pc, #660]	; (800f21c <tcp_process+0x2b4>)
 800ef88:	f006 fee8 	bl	8015d5c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ef8c:	4ba4      	ldr	r3, [pc, #656]	; (800f220 <tcp_process+0x2b8>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0304 	and.w	r3, r3, #4
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d04e      	beq.n	800f036 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7d1b      	ldrb	r3, [r3, #20]
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d108      	bne.n	800efb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efa4:	4b9f      	ldr	r3, [pc, #636]	; (800f224 <tcp_process+0x2bc>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d123      	bne.n	800eff4 <tcp_process+0x8c>
        acceptable = 1;
 800efac:	2301      	movs	r3, #1
 800efae:	76fb      	strb	r3, [r7, #27]
 800efb0:	e020      	b.n	800eff4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efb6:	4b9c      	ldr	r3, [pc, #624]	; (800f228 <tcp_process+0x2c0>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d102      	bne.n	800efc4 <tcp_process+0x5c>
        acceptable = 1;
 800efbe:	2301      	movs	r3, #1
 800efc0:	76fb      	strb	r3, [r7, #27]
 800efc2:	e017      	b.n	800eff4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efc4:	4b98      	ldr	r3, [pc, #608]	; (800f228 <tcp_process+0x2c0>)
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	db10      	blt.n	800eff4 <tcp_process+0x8c>
 800efd2:	4b95      	ldr	r3, [pc, #596]	; (800f228 <tcp_process+0x2c0>)
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efde:	440b      	add	r3, r1
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dc06      	bgt.n	800eff4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8b5b      	ldrh	r3, [r3, #26]
 800efea:	f043 0302 	orr.w	r3, r3, #2
 800efee:	b29a      	uxth	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eff4:	7efb      	ldrb	r3, [r7, #27]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01b      	beq.n	800f032 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7d1b      	ldrb	r3, [r3, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <tcp_process+0xa8>
 800f002:	4b84      	ldr	r3, [pc, #528]	; (800f214 <tcp_process+0x2ac>)
 800f004:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f008:	4988      	ldr	r1, [pc, #544]	; (800f22c <tcp_process+0x2c4>)
 800f00a:	4884      	ldr	r0, [pc, #528]	; (800f21c <tcp_process+0x2b4>)
 800f00c:	f006 fea6 	bl	8015d5c <iprintf>
      recv_flags |= TF_RESET;
 800f010:	4b87      	ldr	r3, [pc, #540]	; (800f230 <tcp_process+0x2c8>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	f043 0308 	orr.w	r3, r3, #8
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	4b85      	ldr	r3, [pc, #532]	; (800f230 <tcp_process+0x2c8>)
 800f01c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8b5b      	ldrh	r3, [r3, #26]
 800f022:	f023 0301 	bic.w	r3, r3, #1
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f02c:	f06f 030d 	mvn.w	r3, #13
 800f030:	e37a      	b.n	800f728 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	e378      	b.n	800f728 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f036:	4b7a      	ldr	r3, [pc, #488]	; (800f220 <tcp_process+0x2b8>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	f003 0302 	and.w	r3, r3, #2
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d010      	beq.n	800f064 <tcp_process+0xfc>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	7d1b      	ldrb	r3, [r3, #20]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d00c      	beq.n	800f064 <tcp_process+0xfc>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	7d1b      	ldrb	r3, [r3, #20]
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d008      	beq.n	800f064 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8b5b      	ldrh	r3, [r3, #26]
 800f056:	f043 0302 	orr.w	r3, r3, #2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	e361      	b.n	800f728 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	8b5b      	ldrh	r3, [r3, #26]
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d103      	bne.n	800f078 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f070:	4b70      	ldr	r3, [pc, #448]	; (800f234 <tcp_process+0x2cc>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f001 fc2d 	bl	80108e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	3b02      	subs	r3, #2
 800f094:	2b07      	cmp	r3, #7
 800f096:	f200 8337 	bhi.w	800f708 <tcp_process+0x7a0>
 800f09a:	a201      	add	r2, pc, #4	; (adr r2, 800f0a0 <tcp_process+0x138>)
 800f09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a0:	0800f0c1 	.word	0x0800f0c1
 800f0a4:	0800f2f1 	.word	0x0800f2f1
 800f0a8:	0800f469 	.word	0x0800f469
 800f0ac:	0800f493 	.word	0x0800f493
 800f0b0:	0800f5b7 	.word	0x0800f5b7
 800f0b4:	0800f469 	.word	0x0800f469
 800f0b8:	0800f643 	.word	0x0800f643
 800f0bc:	0800f6d3 	.word	0x0800f6d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f0c0:	4b57      	ldr	r3, [pc, #348]	; (800f220 <tcp_process+0x2b8>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 80e4 	beq.w	800f296 <tcp_process+0x32e>
 800f0ce:	4b54      	ldr	r3, [pc, #336]	; (800f220 <tcp_process+0x2b8>)
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	f003 0302 	and.w	r3, r3, #2
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f000 80dd 	beq.w	800f296 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	4b50      	ldr	r3, [pc, #320]	; (800f224 <tcp_process+0x2bc>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	f040 80d5 	bne.w	800f296 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f0ec:	4b4e      	ldr	r3, [pc, #312]	; (800f228 <tcp_process+0x2c0>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	1c5a      	adds	r2, r3, #1
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f0fe:	4b49      	ldr	r3, [pc, #292]	; (800f224 <tcp_process+0x2bc>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f106:	4b4c      	ldr	r3, [pc, #304]	; (800f238 <tcp_process+0x2d0>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	89db      	ldrh	r3, [r3, #14]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f120:	4b41      	ldr	r3, [pc, #260]	; (800f228 <tcp_process+0x2c0>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	1e5a      	subs	r2, r3, #1
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2204      	movs	r2, #4
 800f12e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3304      	adds	r3, #4
 800f138:	4618      	mov	r0, r3
 800f13a:	f005 f8bd 	bl	80142b8 <ip4_route>
 800f13e:	4601      	mov	r1, r0
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	3304      	adds	r3, #4
 800f144:	461a      	mov	r2, r3
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff f88e 	bl	800e268 <tcp_eff_send_mss_netif>
 800f14c:	4603      	mov	r3, r0
 800f14e:	461a      	mov	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f158:	009a      	lsls	r2, r3, #2
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	f241 111c 	movw	r1, #4380	; 0x111c
 800f164:	428b      	cmp	r3, r1
 800f166:	bf38      	it	cc
 800f168:	460b      	movcc	r3, r1
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d204      	bcs.n	800f178 <tcp_process+0x210>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	b29b      	uxth	r3, r3
 800f176:	e00d      	b.n	800f194 <tcp_process+0x22c>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f182:	4293      	cmp	r3, r2
 800f184:	d904      	bls.n	800f190 <tcp_process+0x228>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	e001      	b.n	800f194 <tcp_process+0x22c>
 800f190:	f241 131c 	movw	r3, #4380	; 0x111c
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <tcp_process+0x24a>
 800f1a4:	4b1b      	ldr	r3, [pc, #108]	; (800f214 <tcp_process+0x2ac>)
 800f1a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f1aa:	4924      	ldr	r1, [pc, #144]	; (800f23c <tcp_process+0x2d4>)
 800f1ac:	481b      	ldr	r0, [pc, #108]	; (800f21c <tcp_process+0x2b4>)
 800f1ae:	f006 fdd5 	bl	8015d5c <iprintf>
        --pcb->snd_queuelen;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d111      	bne.n	800f1f2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <tcp_process+0x280>
 800f1da:	4b0e      	ldr	r3, [pc, #56]	; (800f214 <tcp_process+0x2ac>)
 800f1dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f1e0:	4917      	ldr	r1, [pc, #92]	; (800f240 <tcp_process+0x2d8>)
 800f1e2:	480e      	ldr	r0, [pc, #56]	; (800f21c <tcp_process+0x2b4>)
 800f1e4:	f006 fdba 	bl	8015d5c <iprintf>
          pcb->unsent = rseg->next;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1f0:	e003      	b.n	800f1fa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f1fa:	69f8      	ldr	r0, [r7, #28]
 800f1fc:	f7fe fc6f 	bl	800dade <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f204:	2b00      	cmp	r3, #0
 800f206:	d11d      	bne.n	800f244 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f20e:	861a      	strh	r2, [r3, #48]	; 0x30
 800f210:	e01f      	b.n	800f252 <tcp_process+0x2ea>
 800f212:	bf00      	nop
 800f214:	08018ea0 	.word	0x08018ea0
 800f218:	080190d8 	.word	0x080190d8
 800f21c:	08018eec 	.word	0x08018eec
 800f220:	20004b08 	.word	0x20004b08
 800f224:	20004b00 	.word	0x20004b00
 800f228:	20004afc 	.word	0x20004afc
 800f22c:	080190f4 	.word	0x080190f4
 800f230:	20004b09 	.word	0x20004b09
 800f234:	2000d860 	.word	0x2000d860
 800f238:	20004aec 	.word	0x20004aec
 800f23c:	08019114 	.word	0x08019114
 800f240:	0801912c 	.word	0x0801912c
        } else {
          pcb->rtime = 0;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <tcp_process+0x30a>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	6910      	ldr	r0, [r2, #16]
 800f266:	2200      	movs	r2, #0
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	4798      	blx	r3
 800f26c:	4603      	mov	r3, r0
 800f26e:	76bb      	strb	r3, [r7, #26]
 800f270:	e001      	b.n	800f276 <tcp_process+0x30e>
 800f272:	2300      	movs	r3, #0
 800f274:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f276:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f27a:	f113 0f0d 	cmn.w	r3, #13
 800f27e:	d102      	bne.n	800f286 <tcp_process+0x31e>
          return ERR_ABRT;
 800f280:	f06f 030c 	mvn.w	r3, #12
 800f284:	e250      	b.n	800f728 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8b5b      	ldrh	r3, [r3, #26]
 800f28a:	f043 0302 	orr.w	r3, r3, #2
 800f28e:	b29a      	uxth	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f294:	e23a      	b.n	800f70c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f296:	4b9d      	ldr	r3, [pc, #628]	; (800f50c <tcp_process+0x5a4>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0310 	and.w	r3, r3, #16
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 8234 	beq.w	800f70c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2a4:	4b9a      	ldr	r3, [pc, #616]	; (800f510 <tcp_process+0x5a8>)
 800f2a6:	6819      	ldr	r1, [r3, #0]
 800f2a8:	4b9a      	ldr	r3, [pc, #616]	; (800f514 <tcp_process+0x5ac>)
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4b9a      	ldr	r3, [pc, #616]	; (800f518 <tcp_process+0x5b0>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2b4:	4b99      	ldr	r3, [pc, #612]	; (800f51c <tcp_process+0x5b4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2b8:	885b      	ldrh	r3, [r3, #2]
 800f2ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2bc:	4a97      	ldr	r2, [pc, #604]	; (800f51c <tcp_process+0x5b4>)
 800f2be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c0:	8812      	ldrh	r2, [r2, #0]
 800f2c2:	b292      	uxth	r2, r2
 800f2c4:	9202      	str	r2, [sp, #8]
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	4b95      	ldr	r3, [pc, #596]	; (800f520 <tcp_process+0x5b8>)
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4b95      	ldr	r3, [pc, #596]	; (800f524 <tcp_process+0x5bc>)
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f003 f8db 	bl	801248c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2dc:	2b05      	cmp	r3, #5
 800f2de:	f200 8215 	bhi.w	800f70c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f002 fea5 	bl	8012038 <tcp_rexmit_rto>
      break;
 800f2ee:	e20d      	b.n	800f70c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f2f0:	4b86      	ldr	r3, [pc, #536]	; (800f50c <tcp_process+0x5a4>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 80a1 	beq.w	800f440 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2fe:	4b84      	ldr	r3, [pc, #528]	; (800f510 <tcp_process+0x5a8>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	3b01      	subs	r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	db7e      	blt.n	800f40c <tcp_process+0x4a4>
 800f30e:	4b80      	ldr	r3, [pc, #512]	; (800f510 <tcp_process+0x5a8>)
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc77      	bgt.n	800f40c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2204      	movs	r2, #4
 800f320:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f32a:	23fa      	movs	r3, #250	; 0xfa
 800f32c:	76bb      	strb	r3, [r7, #26]
 800f32e:	e01d      	b.n	800f36c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d106      	bne.n	800f348 <tcp_process+0x3e0>
 800f33a:	4b7b      	ldr	r3, [pc, #492]	; (800f528 <tcp_process+0x5c0>)
 800f33c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f340:	497a      	ldr	r1, [pc, #488]	; (800f52c <tcp_process+0x5c4>)
 800f342:	487b      	ldr	r0, [pc, #492]	; (800f530 <tcp_process+0x5c8>)
 800f344:	f006 fd0a 	bl	8015d5c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34c:	699b      	ldr	r3, [r3, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00a      	beq.n	800f368 <tcp_process+0x400>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	6910      	ldr	r0, [r2, #16]
 800f35c:	2200      	movs	r2, #0
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	4798      	blx	r3
 800f362:	4603      	mov	r3, r0
 800f364:	76bb      	strb	r3, [r7, #26]
 800f366:	e001      	b.n	800f36c <tcp_process+0x404>
 800f368:	23f0      	movs	r3, #240	; 0xf0
 800f36a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f36c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00a      	beq.n	800f38a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f378:	f113 0f0d 	cmn.w	r3, #13
 800f37c:	d002      	beq.n	800f384 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7fd fd1a 	bl	800cdb8 <tcp_abort>
            }
            return ERR_ABRT;
 800f384:	f06f 030c 	mvn.w	r3, #12
 800f388:	e1ce      	b.n	800f728 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 fae0 	bl	800f950 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f390:	4b68      	ldr	r3, [pc, #416]	; (800f534 <tcp_process+0x5cc>)
 800f392:	881b      	ldrh	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d005      	beq.n	800f3a4 <tcp_process+0x43c>
            recv_acked--;
 800f398:	4b66      	ldr	r3, [pc, #408]	; (800f534 <tcp_process+0x5cc>)
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	4b64      	ldr	r3, [pc, #400]	; (800f534 <tcp_process+0x5cc>)
 800f3a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3a8:	009a      	lsls	r2, r3, #2
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3b4:	428b      	cmp	r3, r1
 800f3b6:	bf38      	it	cc
 800f3b8:	460b      	movcc	r3, r1
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d204      	bcs.n	800f3c8 <tcp_process+0x460>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	e00d      	b.n	800f3e4 <tcp_process+0x47c>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d904      	bls.n	800f3e0 <tcp_process+0x478>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	e001      	b.n	800f3e4 <tcp_process+0x47c>
 800f3e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f3ea:	4b53      	ldr	r3, [pc, #332]	; (800f538 <tcp_process+0x5d0>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f003 0320 	and.w	r3, r3, #32
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d037      	beq.n	800f466 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	8b5b      	ldrh	r3, [r3, #26]
 800f3fa:	f043 0302 	orr.w	r3, r3, #2
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2207      	movs	r2, #7
 800f408:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f40a:	e02c      	b.n	800f466 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f40c:	4b40      	ldr	r3, [pc, #256]	; (800f510 <tcp_process+0x5a8>)
 800f40e:	6819      	ldr	r1, [r3, #0]
 800f410:	4b40      	ldr	r3, [pc, #256]	; (800f514 <tcp_process+0x5ac>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	4b40      	ldr	r3, [pc, #256]	; (800f518 <tcp_process+0x5b0>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f41c:	4b3f      	ldr	r3, [pc, #252]	; (800f51c <tcp_process+0x5b4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f420:	885b      	ldrh	r3, [r3, #2]
 800f422:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f424:	4a3d      	ldr	r2, [pc, #244]	; (800f51c <tcp_process+0x5b4>)
 800f426:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f428:	8812      	ldrh	r2, [r2, #0]
 800f42a:	b292      	uxth	r2, r2
 800f42c:	9202      	str	r2, [sp, #8]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <tcp_process+0x5b8>)
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	4b3b      	ldr	r3, [pc, #236]	; (800f524 <tcp_process+0x5bc>)
 800f436:	4602      	mov	r2, r0
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f003 f827 	bl	801248c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f43e:	e167      	b.n	800f710 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f440:	4b32      	ldr	r3, [pc, #200]	; (800f50c <tcp_process+0x5a4>)
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 8161 	beq.w	800f710 <tcp_process+0x7a8>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f452:	1e5a      	subs	r2, r3, #1
 800f454:	4b30      	ldr	r3, [pc, #192]	; (800f518 <tcp_process+0x5b0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	429a      	cmp	r2, r3
 800f45a:	f040 8159 	bne.w	800f710 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f002 fe0c 	bl	801207c <tcp_rexmit>
      break;
 800f464:	e154      	b.n	800f710 <tcp_process+0x7a8>
 800f466:	e153      	b.n	800f710 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fa71 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f46e:	4b32      	ldr	r3, [pc, #200]	; (800f538 <tcp_process+0x5d0>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 814c 	beq.w	800f714 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	8b5b      	ldrh	r3, [r3, #26]
 800f480:	f043 0302 	orr.w	r3, r3, #2
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2207      	movs	r2, #7
 800f48e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f490:	e140      	b.n	800f714 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fa5c 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f498:	4b27      	ldr	r3, [pc, #156]	; (800f538 <tcp_process+0x5d0>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	f003 0320 	and.w	r3, r3, #32
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d071      	beq.n	800f588 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4a4:	4b19      	ldr	r3, [pc, #100]	; (800f50c <tcp_process+0x5a4>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 0310 	and.w	r3, r3, #16
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d060      	beq.n	800f572 <tcp_process+0x60a>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4b4:	4b16      	ldr	r3, [pc, #88]	; (800f510 <tcp_process+0x5a8>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d15a      	bne.n	800f572 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d156      	bne.n	800f572 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8b5b      	ldrh	r3, [r3, #26]
 800f4c8:	f043 0302 	orr.w	r3, r3, #2
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7fe fdbe 	bl	800e054 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f4d8:	4b18      	ldr	r3, [pc, #96]	; (800f53c <tcp_process+0x5d4>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d105      	bne.n	800f4ee <tcp_process+0x586>
 800f4e2:	4b16      	ldr	r3, [pc, #88]	; (800f53c <tcp_process+0x5d4>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	4a14      	ldr	r2, [pc, #80]	; (800f53c <tcp_process+0x5d4>)
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	e02e      	b.n	800f54c <tcp_process+0x5e4>
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <tcp_process+0x5d4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e027      	b.n	800f546 <tcp_process+0x5de>
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d11f      	bne.n	800f540 <tcp_process+0x5d8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68da      	ldr	r2, [r3, #12]
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	60da      	str	r2, [r3, #12]
 800f508:	e020      	b.n	800f54c <tcp_process+0x5e4>
 800f50a:	bf00      	nop
 800f50c:	20004b08 	.word	0x20004b08
 800f510:	20004b00 	.word	0x20004b00
 800f514:	20004b06 	.word	0x20004b06
 800f518:	20004afc 	.word	0x20004afc
 800f51c:	20004aec 	.word	0x20004aec
 800f520:	20007f98 	.word	0x20007f98
 800f524:	20007f9c 	.word	0x20007f9c
 800f528:	08018ea0 	.word	0x08018ea0
 800f52c:	08019140 	.word	0x08019140
 800f530:	08018eec 	.word	0x08018eec
 800f534:	20004b04 	.word	0x20004b04
 800f538:	20004b09 	.word	0x20004b09
 800f53c:	2000d85c 	.word	0x2000d85c
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1d4      	bne.n	800f4f6 <tcp_process+0x58e>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	60da      	str	r2, [r3, #12]
 800f552:	4b77      	ldr	r3, [pc, #476]	; (800f730 <tcp_process+0x7c8>)
 800f554:	2201      	movs	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	220a      	movs	r2, #10
 800f55c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f55e:	4b75      	ldr	r3, [pc, #468]	; (800f734 <tcp_process+0x7cc>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	4a73      	ldr	r2, [pc, #460]	; (800f734 <tcp_process+0x7cc>)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f003 f950 	bl	8012810 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f570:	e0d2      	b.n	800f718 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8b5b      	ldrh	r3, [r3, #26]
 800f576:	f043 0302 	orr.w	r3, r3, #2
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2208      	movs	r2, #8
 800f584:	751a      	strb	r2, [r3, #20]
      break;
 800f586:	e0c7      	b.n	800f718 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f588:	4b6b      	ldr	r3, [pc, #428]	; (800f738 <tcp_process+0x7d0>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 0310 	and.w	r3, r3, #16
 800f590:	2b00      	cmp	r3, #0
 800f592:	f000 80c1 	beq.w	800f718 <tcp_process+0x7b0>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f59a:	4b68      	ldr	r3, [pc, #416]	; (800f73c <tcp_process+0x7d4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	f040 80ba 	bne.w	800f718 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f040 80b5 	bne.w	800f718 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	751a      	strb	r2, [r3, #20]
      break;
 800f5b4:	e0b0      	b.n	800f718 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 f9ca 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5bc:	4b60      	ldr	r3, [pc, #384]	; (800f740 <tcp_process+0x7d8>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 0320 	and.w	r3, r3, #32
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 80a9 	beq.w	800f71c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	8b5b      	ldrh	r3, [r3, #26]
 800f5ce:	f043 0302 	orr.w	r3, r3, #2
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fe fd3b 	bl	800e054 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5de:	4b59      	ldr	r3, [pc, #356]	; (800f744 <tcp_process+0x7dc>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d105      	bne.n	800f5f4 <tcp_process+0x68c>
 800f5e8:	4b56      	ldr	r3, [pc, #344]	; (800f744 <tcp_process+0x7dc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	4a55      	ldr	r2, [pc, #340]	; (800f744 <tcp_process+0x7dc>)
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e013      	b.n	800f61c <tcp_process+0x6b4>
 800f5f4:	4b53      	ldr	r3, [pc, #332]	; (800f744 <tcp_process+0x7dc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	e00c      	b.n	800f616 <tcp_process+0x6ae>
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	429a      	cmp	r2, r3
 800f604:	d104      	bne.n	800f610 <tcp_process+0x6a8>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68da      	ldr	r2, [r3, #12]
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	60da      	str	r2, [r3, #12]
 800f60e:	e005      	b.n	800f61c <tcp_process+0x6b4>
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	613b      	str	r3, [r7, #16]
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1ef      	bne.n	800f5fc <tcp_process+0x694>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	4b43      	ldr	r3, [pc, #268]	; (800f730 <tcp_process+0x7c8>)
 800f624:	2201      	movs	r2, #1
 800f626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	220a      	movs	r2, #10
 800f62c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f62e:	4b41      	ldr	r3, [pc, #260]	; (800f734 <tcp_process+0x7cc>)
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	60da      	str	r2, [r3, #12]
 800f636:	4a3f      	ldr	r2, [pc, #252]	; (800f734 <tcp_process+0x7cc>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	f003 f8e8 	bl	8012810 <tcp_timer_needed>
      }
      break;
 800f640:	e06c      	b.n	800f71c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f984 	bl	800f950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f648:	4b3b      	ldr	r3, [pc, #236]	; (800f738 <tcp_process+0x7d0>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	f003 0310 	and.w	r3, r3, #16
 800f650:	2b00      	cmp	r3, #0
 800f652:	d065      	beq.n	800f720 <tcp_process+0x7b8>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f658:	4b38      	ldr	r3, [pc, #224]	; (800f73c <tcp_process+0x7d4>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d15f      	bne.n	800f720 <tcp_process+0x7b8>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d15b      	bne.n	800f720 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7fe fcf3 	bl	800e054 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f66e:	4b35      	ldr	r3, [pc, #212]	; (800f744 <tcp_process+0x7dc>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d105      	bne.n	800f684 <tcp_process+0x71c>
 800f678:	4b32      	ldr	r3, [pc, #200]	; (800f744 <tcp_process+0x7dc>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	4a31      	ldr	r2, [pc, #196]	; (800f744 <tcp_process+0x7dc>)
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e013      	b.n	800f6ac <tcp_process+0x744>
 800f684:	4b2f      	ldr	r3, [pc, #188]	; (800f744 <tcp_process+0x7dc>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	e00c      	b.n	800f6a6 <tcp_process+0x73e>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	429a      	cmp	r2, r3
 800f694:	d104      	bne.n	800f6a0 <tcp_process+0x738>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68da      	ldr	r2, [r3, #12]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	60da      	str	r2, [r3, #12]
 800f69e:	e005      	b.n	800f6ac <tcp_process+0x744>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1ef      	bne.n	800f68c <tcp_process+0x724>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	60da      	str	r2, [r3, #12]
 800f6b2:	4b1f      	ldr	r3, [pc, #124]	; (800f730 <tcp_process+0x7c8>)
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	220a      	movs	r2, #10
 800f6bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f6be:	4b1d      	ldr	r3, [pc, #116]	; (800f734 <tcp_process+0x7cc>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	60da      	str	r2, [r3, #12]
 800f6c6:	4a1b      	ldr	r2, [pc, #108]	; (800f734 <tcp_process+0x7cc>)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	f003 f8a0 	bl	8012810 <tcp_timer_needed>
      }
      break;
 800f6d0:	e026      	b.n	800f720 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f93c 	bl	800f950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6d8:	4b17      	ldr	r3, [pc, #92]	; (800f738 <tcp_process+0x7d0>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0310 	and.w	r3, r3, #16
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01f      	beq.n	800f724 <tcp_process+0x7bc>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6e8:	4b14      	ldr	r3, [pc, #80]	; (800f73c <tcp_process+0x7d4>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d119      	bne.n	800f724 <tcp_process+0x7bc>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d115      	bne.n	800f724 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f6f8:	4b11      	ldr	r3, [pc, #68]	; (800f740 <tcp_process+0x7d8>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	f043 0310 	orr.w	r3, r3, #16
 800f700:	b2da      	uxtb	r2, r3
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <tcp_process+0x7d8>)
 800f704:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f706:	e00d      	b.n	800f724 <tcp_process+0x7bc>
    default:
      break;
 800f708:	bf00      	nop
 800f70a:	e00c      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f70c:	bf00      	nop
 800f70e:	e00a      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f710:	bf00      	nop
 800f712:	e008      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f714:	bf00      	nop
 800f716:	e006      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f718:	bf00      	nop
 800f71a:	e004      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f71c:	bf00      	nop
 800f71e:	e002      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f720:	bf00      	nop
 800f722:	e000      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f724:	bf00      	nop
  }
  return ERR_OK;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3724      	adds	r7, #36	; 0x24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd90      	pop	{r4, r7, pc}
 800f730:	2000d858 	.word	0x2000d858
 800f734:	2000d86c 	.word	0x2000d86c
 800f738:	20004b08 	.word	0x20004b08
 800f73c:	20004b00 	.word	0x20004b00
 800f740:	20004b09 	.word	0x20004b09
 800f744:	2000d85c 	.word	0x2000d85c

0800f748 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcp_oos_insert_segment+0x1e>
 800f758:	4b3b      	ldr	r3, [pc, #236]	; (800f848 <tcp_oos_insert_segment+0x100>)
 800f75a:	f240 421f 	movw	r2, #1055	; 0x41f
 800f75e:	493b      	ldr	r1, [pc, #236]	; (800f84c <tcp_oos_insert_segment+0x104>)
 800f760:	483b      	ldr	r0, [pc, #236]	; (800f850 <tcp_oos_insert_segment+0x108>)
 800f762:	f006 fafb 	bl	8015d5c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	899b      	ldrh	r3, [r3, #12]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fb f986 	bl	800aa80 <lwip_htons>
 800f774:	4603      	mov	r3, r0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f003 0301 	and.w	r3, r3, #1
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d028      	beq.n	800f7d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f780:	6838      	ldr	r0, [r7, #0]
 800f782:	f7fe f997 	bl	800dab4 <tcp_segs_free>
    next = NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	603b      	str	r3, [r7, #0]
 800f78a:	e056      	b.n	800f83a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	899b      	ldrh	r3, [r3, #12]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4618      	mov	r0, r3
 800f796:	f7fb f973 	bl	800aa80 <lwip_htons>
 800f79a:	4603      	mov	r3, r0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00d      	beq.n	800f7c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	899b      	ldrh	r3, [r3, #12]
 800f7ac:	b29c      	uxth	r4, r3
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	f7fb f966 	bl	800aa80 <lwip_htons>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	4322      	orrs	r2, r4
 800f7be:	b292      	uxth	r2, r2
 800f7c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f7fe f986 	bl	800dade <tcp_seg_free>
    while (next &&
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00e      	beq.n	800f7f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	891b      	ldrh	r3, [r3, #8]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b1d      	ldr	r3, [pc, #116]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	441a      	add	r2, r3
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	8909      	ldrh	r1, [r1, #8]
 800f7ee:	440b      	add	r3, r1
 800f7f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	daca      	bge.n	800f78c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d01e      	beq.n	800f83a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	461a      	mov	r2, r3
 800f802:	4b14      	ldr	r3, [pc, #80]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	441a      	add	r2, r3
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f810:	2b00      	cmp	r3, #0
 800f812:	dd12      	ble.n	800f83a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	4b0d      	ldr	r3, [pc, #52]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	b29b      	uxth	r3, r3
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	b29a      	uxth	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	685a      	ldr	r2, [r3, #4]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	891b      	ldrh	r3, [r3, #8]
 800f832:	4619      	mov	r1, r3
 800f834:	4610      	mov	r0, r2
 800f836:	f7fc fb49 	bl	800becc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	601a      	str	r2, [r3, #0]
}
 800f840:	bf00      	nop
 800f842:	3714      	adds	r7, #20
 800f844:	46bd      	mov	sp, r7
 800f846:	bd90      	pop	{r4, r7, pc}
 800f848:	08018ea0 	.word	0x08018ea0
 800f84c:	08019160 	.word	0x08019160
 800f850:	08018eec 	.word	0x08018eec
 800f854:	20004afc 	.word	0x20004afc

0800f858 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f858:	b5b0      	push	{r4, r5, r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f866:	e03e      	b.n	800f8e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	f7fc fd3c 	bl	800c2f4 <pbuf_clen>
 800f87c:	4603      	mov	r3, r0
 800f87e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f886:	8a7a      	ldrh	r2, [r7, #18]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d906      	bls.n	800f89a <tcp_free_acked_segments+0x42>
 800f88c:	4b2a      	ldr	r3, [pc, #168]	; (800f938 <tcp_free_acked_segments+0xe0>)
 800f88e:	f240 4257 	movw	r2, #1111	; 0x457
 800f892:	492a      	ldr	r1, [pc, #168]	; (800f93c <tcp_free_acked_segments+0xe4>)
 800f894:	482a      	ldr	r0, [pc, #168]	; (800f940 <tcp_free_acked_segments+0xe8>)
 800f896:	f006 fa61 	bl	8015d5c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f8a0:	8a7b      	ldrh	r3, [r7, #18]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	891a      	ldrh	r2, [r3, #8]
 800f8b0:	4b24      	ldr	r3, [pc, #144]	; (800f944 <tcp_free_acked_segments+0xec>)
 800f8b2:	881b      	ldrh	r3, [r3, #0]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	4b22      	ldr	r3, [pc, #136]	; (800f944 <tcp_free_acked_segments+0xec>)
 800f8ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f8bc:	6978      	ldr	r0, [r7, #20]
 800f8be:	f7fe f90e 	bl	800dade <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00c      	beq.n	800f8e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d109      	bne.n	800f8e6 <tcp_free_acked_segments+0x8e>
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d106      	bne.n	800f8e6 <tcp_free_acked_segments+0x8e>
 800f8d8:	4b17      	ldr	r3, [pc, #92]	; (800f938 <tcp_free_acked_segments+0xe0>)
 800f8da:	f240 4261 	movw	r2, #1121	; 0x461
 800f8de:	491a      	ldr	r1, [pc, #104]	; (800f948 <tcp_free_acked_segments+0xf0>)
 800f8e0:	4817      	ldr	r0, [pc, #92]	; (800f940 <tcp_free_acked_segments+0xe8>)
 800f8e2:	f006 fa3b 	bl	8015d5c <iprintf>
  while (seg_list != NULL &&
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d020      	beq.n	800f92e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fb f8d9 	bl	800aaaa <lwip_htonl>
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	891b      	ldrh	r3, [r3, #8]
 800f8fe:	461d      	mov	r5, r3
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	899b      	ldrh	r3, [r3, #12]
 800f906:	b29b      	uxth	r3, r3
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fb f8b9 	bl	800aa80 <lwip_htons>
 800f90e:	4603      	mov	r3, r0
 800f910:	b2db      	uxtb	r3, r3
 800f912:	f003 0303 	and.w	r3, r3, #3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <tcp_free_acked_segments+0xc6>
 800f91a:	2301      	movs	r3, #1
 800f91c:	e000      	b.n	800f920 <tcp_free_acked_segments+0xc8>
 800f91e:	2300      	movs	r3, #0
 800f920:	442b      	add	r3, r5
 800f922:	18e2      	adds	r2, r4, r3
 800f924:	4b09      	ldr	r3, [pc, #36]	; (800f94c <tcp_free_acked_segments+0xf4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd9c      	ble.n	800f868 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f92e:	68bb      	ldr	r3, [r7, #8]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3718      	adds	r7, #24
 800f934:	46bd      	mov	sp, r7
 800f936:	bdb0      	pop	{r4, r5, r7, pc}
 800f938:	08018ea0 	.word	0x08018ea0
 800f93c:	08019188 	.word	0x08019188
 800f940:	08018eec 	.word	0x08018eec
 800f944:	20004b04 	.word	0x20004b04
 800f948:	080191b0 	.word	0x080191b0
 800f94c:	20004b00 	.word	0x20004b00

0800f950 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f950:	b5b0      	push	{r4, r5, r7, lr}
 800f952:	b094      	sub	sp, #80	; 0x50
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <tcp_receive+0x20>
 800f962:	4ba6      	ldr	r3, [pc, #664]	; (800fbfc <tcp_receive+0x2ac>)
 800f964:	f240 427b 	movw	r2, #1147	; 0x47b
 800f968:	49a5      	ldr	r1, [pc, #660]	; (800fc00 <tcp_receive+0x2b0>)
 800f96a:	48a6      	ldr	r0, [pc, #664]	; (800fc04 <tcp_receive+0x2b4>)
 800f96c:	f006 f9f6 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b03      	cmp	r3, #3
 800f976:	d806      	bhi.n	800f986 <tcp_receive+0x36>
 800f978:	4ba0      	ldr	r3, [pc, #640]	; (800fbfc <tcp_receive+0x2ac>)
 800f97a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f97e:	49a2      	ldr	r1, [pc, #648]	; (800fc08 <tcp_receive+0x2b8>)
 800f980:	48a0      	ldr	r0, [pc, #640]	; (800fc04 <tcp_receive+0x2b4>)
 800f982:	f006 f9eb 	bl	8015d5c <iprintf>

  if (flags & TCP_ACK) {
 800f986:	4ba1      	ldr	r3, [pc, #644]	; (800fc0c <tcp_receive+0x2bc>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	f003 0310 	and.w	r3, r3, #16
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8263 	beq.w	800fe5a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f99a:	461a      	mov	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9a0:	4413      	add	r3, r2
 800f9a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9a8:	4b99      	ldr	r3, [pc, #612]	; (800fc10 <tcp_receive+0x2c0>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	db1b      	blt.n	800f9ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9b6:	4b96      	ldr	r3, [pc, #600]	; (800fc10 <tcp_receive+0x2c0>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d106      	bne.n	800f9cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9c2:	4b94      	ldr	r3, [pc, #592]	; (800fc14 <tcp_receive+0x2c4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	db0e      	blt.n	800f9ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9d0:	4b90      	ldr	r3, [pc, #576]	; (800fc14 <tcp_receive+0x2c4>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d125      	bne.n	800fa24 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9d8:	4b8f      	ldr	r3, [pc, #572]	; (800fc18 <tcp_receive+0x2c8>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	89db      	ldrh	r3, [r3, #14]
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d91c      	bls.n	800fa24 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f9ea:	4b8b      	ldr	r3, [pc, #556]	; (800fc18 <tcp_receive+0x2c8>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	89db      	ldrh	r3, [r3, #14]
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d205      	bcs.n	800fa14 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fa14:	4b7e      	ldr	r3, [pc, #504]	; (800fc10 <tcp_receive+0x2c0>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fa1c:	4b7d      	ldr	r3, [pc, #500]	; (800fc14 <tcp_receive+0x2c4>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa24:	4b7b      	ldr	r3, [pc, #492]	; (800fc14 <tcp_receive+0x2c4>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	dc58      	bgt.n	800fae4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa32:	4b7a      	ldr	r3, [pc, #488]	; (800fc1c <tcp_receive+0x2cc>)
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d14b      	bne.n	800fad2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fa44:	4413      	add	r3, r2
 800fa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d142      	bne.n	800fad2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	db3d      	blt.n	800fad2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa5a:	4b6e      	ldr	r3, [pc, #440]	; (800fc14 <tcp_receive+0x2c4>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d137      	bne.n	800fad2 <tcp_receive+0x182>
              found_dupack = 1;
 800fa62:	2301      	movs	r3, #1
 800fa64:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa6c:	2bff      	cmp	r3, #255	; 0xff
 800fa6e:	d007      	beq.n	800fa80 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa76:	3301      	adds	r3, #1
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	d91b      	bls.n	800fac2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa94:	4413      	add	r3, r2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d30a      	bcc.n	800fab8 <tcp_receive+0x168>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faac:	4413      	add	r3, r2
 800faae:	b29a      	uxth	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fab6:	e004      	b.n	800fac2 <tcp_receive+0x172>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fabe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d902      	bls.n	800fad2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f002 fb41 	bl	8012154 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f040 8160 	bne.w	800fd9a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fae2:	e15a      	b.n	800fd9a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fae4:	4b4b      	ldr	r3, [pc, #300]	; (800fc14 <tcp_receive+0x2c4>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	3b01      	subs	r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f2c0 814d 	blt.w	800fd90 <tcp_receive+0x440>
 800faf6:	4b47      	ldr	r3, [pc, #284]	; (800fc14 <tcp_receive+0x2c4>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f300 8145 	bgt.w	800fd90 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8b5b      	ldrh	r3, [r3, #26]
 800fb0a:	f003 0304 	and.w	r3, r3, #4
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d010      	beq.n	800fb34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8b5b      	ldrh	r3, [r3, #26]
 800fb16:	f023 0304 	bic.w	r3, r3, #4
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb42:	10db      	asrs	r3, r3, #3
 800fb44:	b21b      	sxth	r3, r3
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4413      	add	r3, r2
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	b21a      	sxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fb5c:	4b2d      	ldr	r3, [pc, #180]	; (800fc14 <tcp_receive+0x2c4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb74:	4b27      	ldr	r3, [pc, #156]	; (800fc14 <tcp_receive+0x2c4>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b03      	cmp	r3, #3
 800fb82:	f240 8096 	bls.w	800fcb2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d244      	bcs.n	800fc20 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	8b5b      	ldrh	r3, [r3, #26]
 800fb9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <tcp_receive+0x256>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e000      	b.n	800fba8 <tcp_receive+0x258>
 800fba6:	2302      	movs	r3, #2
 800fba8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fbac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb6:	fb12 f303 	smulbb	r3, r2, r3
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	bf28      	it	cs
 800fbc2:	4613      	movcs	r3, r2
 800fbc4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbce:	4413      	add	r3, r2
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d309      	bcc.n	800fbf0 <tcp_receive+0x2a0>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbe4:	4413      	add	r3, r2
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbee:	e060      	b.n	800fcb2 <tcp_receive+0x362>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbfa:	e05a      	b.n	800fcb2 <tcp_receive+0x362>
 800fbfc:	08018ea0 	.word	0x08018ea0
 800fc00:	080191d0 	.word	0x080191d0
 800fc04:	08018eec 	.word	0x08018eec
 800fc08:	080191ec 	.word	0x080191ec
 800fc0c:	20004b08 	.word	0x20004b08
 800fc10:	20004afc 	.word	0x20004afc
 800fc14:	20004b00 	.word	0x20004b00
 800fc18:	20004aec 	.word	0x20004aec
 800fc1c:	20004b06 	.word	0x20004b06
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc28:	4413      	add	r3, r2
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d309      	bcc.n	800fc4a <tcp_receive+0x2fa>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc3e:	4413      	add	r3, r2
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc48:	e004      	b.n	800fc54 <tcp_receive+0x304>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d326      	bcc.n	800fcb2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc84:	4413      	add	r3, r2
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d30a      	bcc.n	800fca8 <tcp_receive+0x358>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc9c:	4413      	add	r3, r2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fca6:	e004      	b.n	800fcb2 <tcp_receive+0x362>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcba:	4a98      	ldr	r2, [pc, #608]	; (800ff1c <tcp_receive+0x5cc>)
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fdcb 	bl	800f858 <tcp_free_acked_segments>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcd0:	4a93      	ldr	r2, [pc, #588]	; (800ff20 <tcp_receive+0x5d0>)
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7ff fdc0 	bl	800f858 <tcp_free_acked_segments>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d104      	bne.n	800fcf0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcec:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcee:	e002      	b.n	800fcf6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fd12:	4b84      	ldr	r3, [pc, #528]	; (800ff24 <tcp_receive+0x5d4>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	4413      	add	r3, r2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8b5b      	ldrh	r3, [r3, #26]
 800fd24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d035      	beq.n	800fd98 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d118      	bne.n	800fd66 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00c      	beq.n	800fd56 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fa feae 	bl	800aaaa <lwip_htonl>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dc20      	bgt.n	800fd98 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8b5b      	ldrh	r3, [r3, #26]
 800fd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd64:	e018      	b.n	800fd98 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fa fe99 	bl	800aaaa <lwip_htonl>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	1ae3      	subs	r3, r4, r3
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dc0b      	bgt.n	800fd98 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	8b5b      	ldrh	r3, [r3, #26]
 800fd84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd8e:	e003      	b.n	800fd98 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f002 fbcd 	bl	8012530 <tcp_send_empty_ack>
 800fd96:	e000      	b.n	800fd9a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd98:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d05b      	beq.n	800fe5a <tcp_receive+0x50a>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fda6:	4b60      	ldr	r3, [pc, #384]	; (800ff28 <tcp_receive+0x5d8>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da54      	bge.n	800fe5a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fdb0:	4b5e      	ldr	r3, [pc, #376]	; (800ff2c <tcp_receive+0x5dc>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fdc4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdce:	10db      	asrs	r3, r3, #3
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fde8:	4413      	add	r3, r2
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	b21a      	sxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fdf2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	da05      	bge.n	800fe06 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fdfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdfe:	425b      	negs	r3, r3
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fe06:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe10:	109b      	asrs	r3, r3, #2
 800fe12:	b21b      	sxth	r3, r3
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	1ad3      	subs	r3, r2, r3
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe2a:	4413      	add	r3, r2
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	b21a      	sxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe3a:	10db      	asrs	r3, r3, #3
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4413      	add	r3, r2
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	b21a      	sxth	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe5a:	4b35      	ldr	r3, [pc, #212]	; (800ff30 <tcp_receive+0x5e0>)
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f000 84e1 	beq.w	8010826 <tcp_receive+0xed6>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7d1b      	ldrb	r3, [r3, #20]
 800fe68:	2b06      	cmp	r3, #6
 800fe6a:	f200 84dc 	bhi.w	8010826 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe72:	4b30      	ldr	r3, [pc, #192]	; (800ff34 <tcp_receive+0x5e4>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f2c0 808e 	blt.w	800ff9c <tcp_receive+0x64c>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe84:	4b2a      	ldr	r3, [pc, #168]	; (800ff30 <tcp_receive+0x5e0>)
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4b2a      	ldr	r3, [pc, #168]	; (800ff34 <tcp_receive+0x5e4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	3301      	adds	r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f300 8081 	bgt.w	800ff9c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe9a:	4b27      	ldr	r3, [pc, #156]	; (800ff38 <tcp_receive+0x5e8>)
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea4:	4b23      	ldr	r3, [pc, #140]	; (800ff34 <tcp_receive+0x5e4>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800feac:	4b22      	ldr	r3, [pc, #136]	; (800ff38 <tcp_receive+0x5e8>)
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <tcp_receive+0x572>
 800feb4:	4b21      	ldr	r3, [pc, #132]	; (800ff3c <tcp_receive+0x5ec>)
 800feb6:	f240 5294 	movw	r2, #1428	; 0x594
 800feba:	4921      	ldr	r1, [pc, #132]	; (800ff40 <tcp_receive+0x5f0>)
 800febc:	4821      	ldr	r0, [pc, #132]	; (800ff44 <tcp_receive+0x5f4>)
 800febe:	f005 ff4d 	bl	8015d5c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fec8:	4293      	cmp	r3, r2
 800feca:	d906      	bls.n	800feda <tcp_receive+0x58a>
 800fecc:	4b1b      	ldr	r3, [pc, #108]	; (800ff3c <tcp_receive+0x5ec>)
 800fece:	f240 5295 	movw	r2, #1429	; 0x595
 800fed2:	491d      	ldr	r1, [pc, #116]	; (800ff48 <tcp_receive+0x5f8>)
 800fed4:	481b      	ldr	r0, [pc, #108]	; (800ff44 <tcp_receive+0x5f4>)
 800fed6:	f005 ff41 	bl	8015d5c <iprintf>
      off = (u16_t)off32;
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fee0:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <tcp_receive+0x5e8>)
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	891b      	ldrh	r3, [r3, #8]
 800fee6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feea:	429a      	cmp	r2, r3
 800feec:	d906      	bls.n	800fefc <tcp_receive+0x5ac>
 800feee:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <tcp_receive+0x5ec>)
 800fef0:	f240 5297 	movw	r2, #1431	; 0x597
 800fef4:	4915      	ldr	r1, [pc, #84]	; (800ff4c <tcp_receive+0x5fc>)
 800fef6:	4813      	ldr	r0, [pc, #76]	; (800ff44 <tcp_receive+0x5f4>)
 800fef8:	f005 ff30 	bl	8015d5c <iprintf>
      inseg.len -= off;
 800fefc:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <tcp_receive+0x5e8>)
 800fefe:	891a      	ldrh	r2, [r3, #8]
 800ff00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	4b0b      	ldr	r3, [pc, #44]	; (800ff38 <tcp_receive+0x5e8>)
 800ff0a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	; (800ff38 <tcp_receive+0x5e8>)
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	891a      	ldrh	r2, [r3, #8]
 800ff12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ff1a:	e029      	b.n	800ff70 <tcp_receive+0x620>
 800ff1c:	08019208 	.word	0x08019208
 800ff20:	08019210 	.word	0x08019210
 800ff24:	20004b04 	.word	0x20004b04
 800ff28:	20004b00 	.word	0x20004b00
 800ff2c:	2000d860 	.word	0x2000d860
 800ff30:	20004b06 	.word	0x20004b06
 800ff34:	20004afc 	.word	0x20004afc
 800ff38:	20004adc 	.word	0x20004adc
 800ff3c:	08018ea0 	.word	0x08018ea0
 800ff40:	08019218 	.word	0x08019218
 800ff44:	08018eec 	.word	0x08018eec
 800ff48:	08019228 	.word	0x08019228
 800ff4c:	08019238 	.word	0x08019238
        off -= p->len;
 800ff50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff52:	895b      	ldrh	r3, [r3, #10]
 800ff54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ff5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ff64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff66:	2200      	movs	r2, #0
 800ff68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ff6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff72:	895b      	ldrh	r3, [r3, #10]
 800ff74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d8e9      	bhi.n	800ff50 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ff7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff80:	4619      	mov	r1, r3
 800ff82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff84:	f7fc f8a2 	bl	800c0cc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8c:	4a91      	ldr	r2, [pc, #580]	; (80101d4 <tcp_receive+0x884>)
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	4b91      	ldr	r3, [pc, #580]	; (80101d8 <tcp_receive+0x888>)
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	4a8f      	ldr	r2, [pc, #572]	; (80101d4 <tcp_receive+0x884>)
 800ff96:	6812      	ldr	r2, [r2, #0]
 800ff98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff9a:	e00d      	b.n	800ffb8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff9c:	4b8d      	ldr	r3, [pc, #564]	; (80101d4 <tcp_receive+0x884>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	da06      	bge.n	800ffb8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8b5b      	ldrh	r3, [r3, #26]
 800ffae:	f043 0302 	orr.w	r3, r3, #2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffb8:	4b86      	ldr	r3, [pc, #536]	; (80101d4 <tcp_receive+0x884>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f2c0 842a 	blt.w	801081c <tcp_receive+0xecc>
 800ffc8:	4b82      	ldr	r3, [pc, #520]	; (80101d4 <tcp_receive+0x884>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd0:	6879      	ldr	r1, [r7, #4]
 800ffd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffd4:	440b      	add	r3, r1
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	3301      	adds	r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f300 841e 	bgt.w	801081c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe4:	4b7b      	ldr	r3, [pc, #492]	; (80101d4 <tcp_receive+0x884>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	f040 829a 	bne.w	8010522 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ffee:	4b7a      	ldr	r3, [pc, #488]	; (80101d8 <tcp_receive+0x888>)
 800fff0:	891c      	ldrh	r4, [r3, #8]
 800fff2:	4b79      	ldr	r3, [pc, #484]	; (80101d8 <tcp_receive+0x888>)
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fa fd40 	bl	800aa80 <lwip_htons>
 8010000:	4603      	mov	r3, r0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	f003 0303 	and.w	r3, r3, #3
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <tcp_receive+0x6c0>
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <tcp_receive+0x6c2>
 8010010:	2300      	movs	r3, #0
 8010012:	4423      	add	r3, r4
 8010014:	b29a      	uxth	r2, r3
 8010016:	4b71      	ldr	r3, [pc, #452]	; (80101dc <tcp_receive+0x88c>)
 8010018:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801001e:	4b6f      	ldr	r3, [pc, #444]	; (80101dc <tcp_receive+0x88c>)
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	429a      	cmp	r2, r3
 8010024:	d275      	bcs.n	8010112 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010026:	4b6c      	ldr	r3, [pc, #432]	; (80101d8 <tcp_receive+0x888>)
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	899b      	ldrh	r3, [r3, #12]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4618      	mov	r0, r3
 8010030:	f7fa fd26 	bl	800aa80 <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01f      	beq.n	8010080 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010040:	4b65      	ldr	r3, [pc, #404]	; (80101d8 <tcp_receive+0x888>)
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	b21b      	sxth	r3, r3
 801004a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801004e:	b21c      	sxth	r4, r3
 8010050:	4b61      	ldr	r3, [pc, #388]	; (80101d8 <tcp_receive+0x888>)
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	899b      	ldrh	r3, [r3, #12]
 8010056:	b29b      	uxth	r3, r3
 8010058:	4618      	mov	r0, r3
 801005a:	f7fa fd11 	bl	800aa80 <lwip_htons>
 801005e:	4603      	mov	r3, r0
 8010060:	b2db      	uxtb	r3, r3
 8010062:	b29b      	uxth	r3, r3
 8010064:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010068:	b29b      	uxth	r3, r3
 801006a:	4618      	mov	r0, r3
 801006c:	f7fa fd08 	bl	800aa80 <lwip_htons>
 8010070:	4603      	mov	r3, r0
 8010072:	b21b      	sxth	r3, r3
 8010074:	4323      	orrs	r3, r4
 8010076:	b21a      	sxth	r2, r3
 8010078:	4b57      	ldr	r3, [pc, #348]	; (80101d8 <tcp_receive+0x888>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	b292      	uxth	r2, r2
 801007e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010084:	4b54      	ldr	r3, [pc, #336]	; (80101d8 <tcp_receive+0x888>)
 8010086:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010088:	4b53      	ldr	r3, [pc, #332]	; (80101d8 <tcp_receive+0x888>)
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	899b      	ldrh	r3, [r3, #12]
 801008e:	b29b      	uxth	r3, r3
 8010090:	4618      	mov	r0, r3
 8010092:	f7fa fcf5 	bl	800aa80 <lwip_htons>
 8010096:	4603      	mov	r3, r0
 8010098:	b2db      	uxtb	r3, r3
 801009a:	f003 0302 	and.w	r3, r3, #2
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d005      	beq.n	80100ae <tcp_receive+0x75e>
            inseg.len -= 1;
 80100a2:	4b4d      	ldr	r3, [pc, #308]	; (80101d8 <tcp_receive+0x888>)
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	4b4b      	ldr	r3, [pc, #300]	; (80101d8 <tcp_receive+0x888>)
 80100ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80100ae:	4b4a      	ldr	r3, [pc, #296]	; (80101d8 <tcp_receive+0x888>)
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	4a49      	ldr	r2, [pc, #292]	; (80101d8 <tcp_receive+0x888>)
 80100b4:	8912      	ldrh	r2, [r2, #8]
 80100b6:	4611      	mov	r1, r2
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fb ff07 	bl	800becc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100be:	4b46      	ldr	r3, [pc, #280]	; (80101d8 <tcp_receive+0x888>)
 80100c0:	891c      	ldrh	r4, [r3, #8]
 80100c2:	4b45      	ldr	r3, [pc, #276]	; (80101d8 <tcp_receive+0x888>)
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	899b      	ldrh	r3, [r3, #12]
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fa fcd8 	bl	800aa80 <lwip_htons>
 80100d0:	4603      	mov	r3, r0
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	f003 0303 	and.w	r3, r3, #3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <tcp_receive+0x790>
 80100dc:	2301      	movs	r3, #1
 80100de:	e000      	b.n	80100e2 <tcp_receive+0x792>
 80100e0:	2300      	movs	r3, #0
 80100e2:	4423      	add	r3, r4
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	4b3d      	ldr	r3, [pc, #244]	; (80101dc <tcp_receive+0x88c>)
 80100e8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100ea:	4b3c      	ldr	r3, [pc, #240]	; (80101dc <tcp_receive+0x88c>)
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b38      	ldr	r3, [pc, #224]	; (80101d4 <tcp_receive+0x884>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	441a      	add	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100fe:	440b      	add	r3, r1
 8010100:	429a      	cmp	r2, r3
 8010102:	d006      	beq.n	8010112 <tcp_receive+0x7c2>
 8010104:	4b36      	ldr	r3, [pc, #216]	; (80101e0 <tcp_receive+0x890>)
 8010106:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801010a:	4936      	ldr	r1, [pc, #216]	; (80101e4 <tcp_receive+0x894>)
 801010c:	4836      	ldr	r0, [pc, #216]	; (80101e8 <tcp_receive+0x898>)
 801010e:	f005 fe25 	bl	8015d5c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80e7 	beq.w	80102ea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801011c:	4b2e      	ldr	r3, [pc, #184]	; (80101d8 <tcp_receive+0x888>)
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7fa fcab 	bl	800aa80 <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	f003 0301 	and.w	r3, r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	d010      	beq.n	8010158 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010136:	e00a      	b.n	801014e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f7fd fcc8 	bl	800dade <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1f0      	bne.n	8010138 <tcp_receive+0x7e8>
 8010156:	e0c8      	b.n	80102ea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801015e:	e052      	b.n	8010206 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	899b      	ldrh	r3, [r3, #12]
 8010166:	b29b      	uxth	r3, r3
 8010168:	4618      	mov	r0, r3
 801016a:	f7fa fc89 	bl	800aa80 <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	f003 0301 	and.w	r3, r3, #1
 8010176:	2b00      	cmp	r3, #0
 8010178:	d03d      	beq.n	80101f6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801017a:	4b17      	ldr	r3, [pc, #92]	; (80101d8 <tcp_receive+0x888>)
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	899b      	ldrh	r3, [r3, #12]
 8010180:	b29b      	uxth	r3, r3
 8010182:	4618      	mov	r0, r3
 8010184:	f7fa fc7c 	bl	800aa80 <lwip_htons>
 8010188:	4603      	mov	r3, r0
 801018a:	b2db      	uxtb	r3, r3
 801018c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010190:	2b00      	cmp	r3, #0
 8010192:	d130      	bne.n	80101f6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010194:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <tcp_receive+0x888>)
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	899b      	ldrh	r3, [r3, #12]
 801019a:	b29c      	uxth	r4, r3
 801019c:	2001      	movs	r0, #1
 801019e:	f7fa fc6f 	bl	800aa80 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	461a      	mov	r2, r3
 80101a6:	4b0c      	ldr	r3, [pc, #48]	; (80101d8 <tcp_receive+0x888>)
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	4322      	orrs	r2, r4
 80101ac:	b292      	uxth	r2, r2
 80101ae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101b0:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <tcp_receive+0x888>)
 80101b2:	891c      	ldrh	r4, [r3, #8]
 80101b4:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <tcp_receive+0x888>)
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	899b      	ldrh	r3, [r3, #12]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fa fc5f 	bl	800aa80 <lwip_htons>
 80101c2:	4603      	mov	r3, r0
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	f003 0303 	and.w	r3, r3, #3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <tcp_receive+0x89c>
 80101ce:	2301      	movs	r3, #1
 80101d0:	e00d      	b.n	80101ee <tcp_receive+0x89e>
 80101d2:	bf00      	nop
 80101d4:	20004afc 	.word	0x20004afc
 80101d8:	20004adc 	.word	0x20004adc
 80101dc:	20004b06 	.word	0x20004b06
 80101e0:	08018ea0 	.word	0x08018ea0
 80101e4:	08019248 	.word	0x08019248
 80101e8:	08018eec 	.word	0x08018eec
 80101ec:	2300      	movs	r3, #0
 80101ee:	4423      	add	r3, r4
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	4b98      	ldr	r3, [pc, #608]	; (8010454 <tcp_receive+0xb04>)
 80101f4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80101fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010200:	6938      	ldr	r0, [r7, #16]
 8010202:	f7fd fc6c 	bl	800dade <tcp_seg_free>
            while (next &&
 8010206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00e      	beq.n	801022a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801020c:	4b91      	ldr	r3, [pc, #580]	; (8010454 <tcp_receive+0xb04>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	4b91      	ldr	r3, [pc, #580]	; (8010458 <tcp_receive+0xb08>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	441a      	add	r2, r3
 8010218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010220:	8909      	ldrh	r1, [r1, #8]
 8010222:	440b      	add	r3, r1
 8010224:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010226:	2b00      	cmp	r3, #0
 8010228:	da9a      	bge.n	8010160 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801022a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801022c:	2b00      	cmp	r3, #0
 801022e:	d059      	beq.n	80102e4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010230:	4b88      	ldr	r3, [pc, #544]	; (8010454 <tcp_receive+0xb04>)
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	4b88      	ldr	r3, [pc, #544]	; (8010458 <tcp_receive+0xb08>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	441a      	add	r2, r3
 801023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010244:	2b00      	cmp	r3, #0
 8010246:	dd4d      	ble.n	80102e4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	b29a      	uxth	r2, r3
 8010250:	4b81      	ldr	r3, [pc, #516]	; (8010458 <tcp_receive+0xb08>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	b29b      	uxth	r3, r3
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	b29a      	uxth	r2, r3
 801025a:	4b80      	ldr	r3, [pc, #512]	; (801045c <tcp_receive+0xb0c>)
 801025c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801025e:	4b7f      	ldr	r3, [pc, #508]	; (801045c <tcp_receive+0xb0c>)
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fa fc0a 	bl	800aa80 <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d005      	beq.n	8010284 <tcp_receive+0x934>
                inseg.len -= 1;
 8010278:	4b78      	ldr	r3, [pc, #480]	; (801045c <tcp_receive+0xb0c>)
 801027a:	891b      	ldrh	r3, [r3, #8]
 801027c:	3b01      	subs	r3, #1
 801027e:	b29a      	uxth	r2, r3
 8010280:	4b76      	ldr	r3, [pc, #472]	; (801045c <tcp_receive+0xb0c>)
 8010282:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010284:	4b75      	ldr	r3, [pc, #468]	; (801045c <tcp_receive+0xb0c>)
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	4a74      	ldr	r2, [pc, #464]	; (801045c <tcp_receive+0xb0c>)
 801028a:	8912      	ldrh	r2, [r2, #8]
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fb fe1c 	bl	800becc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010294:	4b71      	ldr	r3, [pc, #452]	; (801045c <tcp_receive+0xb0c>)
 8010296:	891c      	ldrh	r4, [r3, #8]
 8010298:	4b70      	ldr	r3, [pc, #448]	; (801045c <tcp_receive+0xb0c>)
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	899b      	ldrh	r3, [r3, #12]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fa fbed 	bl	800aa80 <lwip_htons>
 80102a6:	4603      	mov	r3, r0
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	f003 0303 	and.w	r3, r3, #3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <tcp_receive+0x966>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <tcp_receive+0x968>
 80102b6:	2300      	movs	r3, #0
 80102b8:	4423      	add	r3, r4
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	4b65      	ldr	r3, [pc, #404]	; (8010454 <tcp_receive+0xb04>)
 80102be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102c0:	4b64      	ldr	r3, [pc, #400]	; (8010454 <tcp_receive+0xb04>)
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b64      	ldr	r3, [pc, #400]	; (8010458 <tcp_receive+0xb08>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	441a      	add	r2, r3
 80102cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d006      	beq.n	80102e4 <tcp_receive+0x994>
 80102d6:	4b62      	ldr	r3, [pc, #392]	; (8010460 <tcp_receive+0xb10>)
 80102d8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80102dc:	4961      	ldr	r1, [pc, #388]	; (8010464 <tcp_receive+0xb14>)
 80102de:	4862      	ldr	r0, [pc, #392]	; (8010468 <tcp_receive+0xb18>)
 80102e0:	f005 fd3c 	bl	8015d5c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102e8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80102ea:	4b5a      	ldr	r3, [pc, #360]	; (8010454 <tcp_receive+0xb04>)
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	4b59      	ldr	r3, [pc, #356]	; (8010458 <tcp_receive+0xb08>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	441a      	add	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102fe:	4b55      	ldr	r3, [pc, #340]	; (8010454 <tcp_receive+0xb04>)
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	429a      	cmp	r2, r3
 8010304:	d206      	bcs.n	8010314 <tcp_receive+0x9c4>
 8010306:	4b56      	ldr	r3, [pc, #344]	; (8010460 <tcp_receive+0xb10>)
 8010308:	f240 6207 	movw	r2, #1543	; 0x607
 801030c:	4957      	ldr	r1, [pc, #348]	; (801046c <tcp_receive+0xb1c>)
 801030e:	4856      	ldr	r0, [pc, #344]	; (8010468 <tcp_receive+0xb18>)
 8010310:	f005 fd24 	bl	8015d5c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010318:	4b4e      	ldr	r3, [pc, #312]	; (8010454 <tcp_receive+0xb04>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7fc feb5 	bl	800d094 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801032a:	4b4c      	ldr	r3, [pc, #304]	; (801045c <tcp_receive+0xb0c>)
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	891b      	ldrh	r3, [r3, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010334:	4b49      	ldr	r3, [pc, #292]	; (801045c <tcp_receive+0xb0c>)
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	4a4d      	ldr	r2, [pc, #308]	; (8010470 <tcp_receive+0xb20>)
 801033a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801033c:	4b47      	ldr	r3, [pc, #284]	; (801045c <tcp_receive+0xb0c>)
 801033e:	2200      	movs	r2, #0
 8010340:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010342:	4b46      	ldr	r3, [pc, #280]	; (801045c <tcp_receive+0xb0c>)
 8010344:	68db      	ldr	r3, [r3, #12]
 8010346:	899b      	ldrh	r3, [r3, #12]
 8010348:	b29b      	uxth	r3, r3
 801034a:	4618      	mov	r0, r3
 801034c:	f7fa fb98 	bl	800aa80 <lwip_htons>
 8010350:	4603      	mov	r3, r0
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	f000 80b8 	beq.w	80104ce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801035e:	4b45      	ldr	r3, [pc, #276]	; (8010474 <tcp_receive+0xb24>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	f043 0320 	orr.w	r3, r3, #32
 8010366:	b2da      	uxtb	r2, r3
 8010368:	4b42      	ldr	r3, [pc, #264]	; (8010474 <tcp_receive+0xb24>)
 801036a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801036c:	e0af      	b.n	80104ce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010372:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	4a36      	ldr	r2, [pc, #216]	; (8010458 <tcp_receive+0xb08>)
 801037e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	891b      	ldrh	r3, [r3, #8]
 8010384:	461c      	mov	r4, r3
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	899b      	ldrh	r3, [r3, #12]
 801038c:	b29b      	uxth	r3, r3
 801038e:	4618      	mov	r0, r3
 8010390:	f7fa fb76 	bl	800aa80 <lwip_htons>
 8010394:	4603      	mov	r3, r0
 8010396:	b2db      	uxtb	r3, r3
 8010398:	f003 0303 	and.w	r3, r3, #3
 801039c:	2b00      	cmp	r3, #0
 801039e:	d001      	beq.n	80103a4 <tcp_receive+0xa54>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e000      	b.n	80103a6 <tcp_receive+0xa56>
 80103a4:	2300      	movs	r3, #0
 80103a6:	191a      	adds	r2, r3, r4
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	441a      	add	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103b6:	461c      	mov	r4, r3
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	891b      	ldrh	r3, [r3, #8]
 80103bc:	461d      	mov	r5, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	899b      	ldrh	r3, [r3, #12]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fa fb5a 	bl	800aa80 <lwip_htons>
 80103cc:	4603      	mov	r3, r0
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	f003 0303 	and.w	r3, r3, #3
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <tcp_receive+0xa8c>
 80103d8:	2301      	movs	r3, #1
 80103da:	e000      	b.n	80103de <tcp_receive+0xa8e>
 80103dc:	2300      	movs	r3, #0
 80103de:	442b      	add	r3, r5
 80103e0:	429c      	cmp	r4, r3
 80103e2:	d206      	bcs.n	80103f2 <tcp_receive+0xaa2>
 80103e4:	4b1e      	ldr	r3, [pc, #120]	; (8010460 <tcp_receive+0xb10>)
 80103e6:	f240 622b 	movw	r2, #1579	; 0x62b
 80103ea:	4923      	ldr	r1, [pc, #140]	; (8010478 <tcp_receive+0xb28>)
 80103ec:	481e      	ldr	r0, [pc, #120]	; (8010468 <tcp_receive+0xb18>)
 80103ee:	f005 fcb5 	bl	8015d5c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	891b      	ldrh	r3, [r3, #8]
 80103f6:	461c      	mov	r4, r3
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	899b      	ldrh	r3, [r3, #12]
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4618      	mov	r0, r3
 8010402:	f7fa fb3d 	bl	800aa80 <lwip_htons>
 8010406:	4603      	mov	r3, r0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	f003 0303 	and.w	r3, r3, #3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <tcp_receive+0xac6>
 8010412:	2301      	movs	r3, #1
 8010414:	e000      	b.n	8010418 <tcp_receive+0xac8>
 8010416:	2300      	movs	r3, #0
 8010418:	1919      	adds	r1, r3, r4
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801041e:	b28b      	uxth	r3, r1
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7fc fe33 	bl	800d094 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	891b      	ldrh	r3, [r3, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d028      	beq.n	801048a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010438:	4b0d      	ldr	r3, [pc, #52]	; (8010470 <tcp_receive+0xb20>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01d      	beq.n	801047c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010440:	4b0b      	ldr	r3, [pc, #44]	; (8010470 <tcp_receive+0xb20>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	4619      	mov	r1, r3
 801044a:	4610      	mov	r0, r2
 801044c:	f7fb ff92 	bl	800c374 <pbuf_cat>
 8010450:	e018      	b.n	8010484 <tcp_receive+0xb34>
 8010452:	bf00      	nop
 8010454:	20004b06 	.word	0x20004b06
 8010458:	20004afc 	.word	0x20004afc
 801045c:	20004adc 	.word	0x20004adc
 8010460:	08018ea0 	.word	0x08018ea0
 8010464:	08019280 	.word	0x08019280
 8010468:	08018eec 	.word	0x08018eec
 801046c:	080192bc 	.word	0x080192bc
 8010470:	20004b0c 	.word	0x20004b0c
 8010474:	20004b09 	.word	0x20004b09
 8010478:	080192dc 	.word	0x080192dc
            } else {
              recv_data = cseg->p;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	4a70      	ldr	r2, [pc, #448]	; (8010644 <tcp_receive+0xcf4>)
 8010482:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	2200      	movs	r2, #0
 8010488:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	899b      	ldrh	r3, [r3, #12]
 8010490:	b29b      	uxth	r3, r3
 8010492:	4618      	mov	r0, r3
 8010494:	f7fa faf4 	bl	800aa80 <lwip_htons>
 8010498:	4603      	mov	r3, r0
 801049a:	b2db      	uxtb	r3, r3
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00d      	beq.n	80104c0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80104a4:	4b68      	ldr	r3, [pc, #416]	; (8010648 <tcp_receive+0xcf8>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	f043 0320 	orr.w	r3, r3, #32
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	4b66      	ldr	r3, [pc, #408]	; (8010648 <tcp_receive+0xcf8>)
 80104b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	7d1b      	ldrb	r3, [r3, #20]
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	d102      	bne.n	80104c0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2207      	movs	r2, #7
 80104be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80104c8:	68b8      	ldr	r0, [r7, #8]
 80104ca:	f7fd fb08 	bl	800dade <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d008      	beq.n	80104e8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80104e2:	429a      	cmp	r2, r3
 80104e4:	f43f af43 	beq.w	801036e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8b5b      	ldrh	r3, [r3, #26]
 80104ec:	f003 0301 	and.w	r3, r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00e      	beq.n	8010512 <tcp_receive+0xbc2>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f023 0301 	bic.w	r3, r3, #1
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	835a      	strh	r2, [r3, #26]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	8b5b      	ldrh	r3, [r3, #26]
 8010506:	f043 0302 	orr.w	r3, r3, #2
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010510:	e188      	b.n	8010824 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8b5b      	ldrh	r3, [r3, #26]
 8010516:	f043 0301 	orr.w	r3, r3, #1
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010520:	e180      	b.n	8010824 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801052a:	4848      	ldr	r0, [pc, #288]	; (801064c <tcp_receive+0xcfc>)
 801052c:	f7fd faf0 	bl	800db10 <tcp_seg_copy>
 8010530:	4602      	mov	r2, r0
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	675a      	str	r2, [r3, #116]	; 0x74
 8010536:	e16d      	b.n	8010814 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010538:	2300      	movs	r3, #0
 801053a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010540:	63bb      	str	r3, [r7, #56]	; 0x38
 8010542:	e157      	b.n	80107f4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	685a      	ldr	r2, [r3, #4]
 801054a:	4b41      	ldr	r3, [pc, #260]	; (8010650 <tcp_receive+0xd00>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	429a      	cmp	r2, r3
 8010550:	d11d      	bne.n	801058e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010552:	4b3e      	ldr	r3, [pc, #248]	; (801064c <tcp_receive+0xcfc>)
 8010554:	891a      	ldrh	r2, [r3, #8]
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	891b      	ldrh	r3, [r3, #8]
 801055a:	429a      	cmp	r2, r3
 801055c:	f240 814f 	bls.w	80107fe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010560:	483a      	ldr	r0, [pc, #232]	; (801064c <tcp_receive+0xcfc>)
 8010562:	f7fd fad5 	bl	800db10 <tcp_seg_copy>
 8010566:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	f000 8149 	beq.w	8010802 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010572:	2b00      	cmp	r3, #0
 8010574:	d003      	beq.n	801057e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	601a      	str	r2, [r3, #0]
 801057c:	e002      	b.n	8010584 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010586:	6978      	ldr	r0, [r7, #20]
 8010588:	f7ff f8de 	bl	800f748 <tcp_oos_insert_segment>
                }
                break;
 801058c:	e139      	b.n	8010802 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010590:	2b00      	cmp	r3, #0
 8010592:	d117      	bne.n	80105c4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010594:	4b2e      	ldr	r3, [pc, #184]	; (8010650 <tcp_receive+0xd00>)
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da57      	bge.n	8010654 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105a4:	4829      	ldr	r0, [pc, #164]	; (801064c <tcp_receive+0xcfc>)
 80105a6:	f7fd fab3 	bl	800db10 <tcp_seg_copy>
 80105aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 8129 	beq.w	8010806 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	69ba      	ldr	r2, [r7, #24]
 80105b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80105ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105bc:	69b8      	ldr	r0, [r7, #24]
 80105be:	f7ff f8c3 	bl	800f748 <tcp_oos_insert_segment>
                  }
                  break;
 80105c2:	e120      	b.n	8010806 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80105c4:	4b22      	ldr	r3, [pc, #136]	; (8010650 <tcp_receive+0xd00>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	db3e      	blt.n	8010654 <tcp_receive+0xd04>
 80105d6:	4b1e      	ldr	r3, [pc, #120]	; (8010650 <tcp_receive+0xd00>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	3301      	adds	r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	dc35      	bgt.n	8010654 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105e8:	4818      	ldr	r0, [pc, #96]	; (801064c <tcp_receive+0xcfc>)
 80105ea:	f7fd fa91 	bl	800db10 <tcp_seg_copy>
 80105ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f000 8109 	beq.w	801080a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010600:	8912      	ldrh	r2, [r2, #8]
 8010602:	441a      	add	r2, r3
 8010604:	4b12      	ldr	r3, [pc, #72]	; (8010650 <tcp_receive+0xd00>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd12      	ble.n	8010634 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801060e:	4b10      	ldr	r3, [pc, #64]	; (8010650 <tcp_receive+0xd00>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	b29a      	uxth	r2, r3
 8010614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	b29b      	uxth	r3, r3
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	b29a      	uxth	r2, r3
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	891b      	ldrh	r3, [r3, #8]
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fb fc4c 	bl	800becc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010636:	69fa      	ldr	r2, [r7, #28]
 8010638:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801063a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801063c:	69f8      	ldr	r0, [r7, #28]
 801063e:	f7ff f883 	bl	800f748 <tcp_oos_insert_segment>
                  }
                  break;
 8010642:	e0e2      	b.n	801080a <tcp_receive+0xeba>
 8010644:	20004b0c 	.word	0x20004b0c
 8010648:	20004b09 	.word	0x20004b09
 801064c:	20004adc 	.word	0x20004adc
 8010650:	20004afc 	.word	0x20004afc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f040 80c6 	bne.w	80107ee <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010662:	4b80      	ldr	r3, [pc, #512]	; (8010864 <tcp_receive+0xf14>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801066e:	2b00      	cmp	r3, #0
 8010670:	f340 80bd 	ble.w	80107ee <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	b29b      	uxth	r3, r3
 801067c:	4618      	mov	r0, r3
 801067e:	f7fa f9ff 	bl	800aa80 <lwip_htons>
 8010682:	4603      	mov	r3, r0
 8010684:	b2db      	uxtb	r3, r3
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	f040 80bf 	bne.w	801080e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010690:	4875      	ldr	r0, [pc, #468]	; (8010868 <tcp_receive+0xf18>)
 8010692:	f7fd fa3d 	bl	800db10 <tcp_seg_copy>
 8010696:	4602      	mov	r2, r0
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f000 80b6 	beq.w	8010812 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80106a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106ae:	8912      	ldrh	r2, [r2, #8]
 80106b0:	441a      	add	r2, r3
 80106b2:	4b6c      	ldr	r3, [pc, #432]	; (8010864 <tcp_receive+0xf14>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	1ad3      	subs	r3, r2, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	dd12      	ble.n	80106e2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106bc:	4b69      	ldr	r3, [pc, #420]	; (8010864 <tcp_receive+0xf14>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	891b      	ldrh	r3, [r3, #8]
 80106da:	4619      	mov	r1, r3
 80106dc:	4610      	mov	r0, r2
 80106de:	f7fb fbf5 	bl	800becc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80106e2:	4b62      	ldr	r3, [pc, #392]	; (801086c <tcp_receive+0xf1c>)
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	4b5e      	ldr	r3, [pc, #376]	; (8010864 <tcp_receive+0xf14>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	441a      	add	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f2:	6879      	ldr	r1, [r7, #4]
 80106f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106f6:	440b      	add	r3, r1
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f340 8089 	ble.w	8010812 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	899b      	ldrh	r3, [r3, #12]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4618      	mov	r0, r3
 801070c:	f7fa f9b8 	bl	800aa80 <lwip_htons>
 8010710:	4603      	mov	r3, r0
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d022      	beq.n	8010762 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	899b      	ldrh	r3, [r3, #12]
 8010724:	b29b      	uxth	r3, r3
 8010726:	b21b      	sxth	r3, r3
 8010728:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801072c:	b21c      	sxth	r4, r3
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fa f9a1 	bl	800aa80 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	b29b      	uxth	r3, r3
 8010744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7fa f998 	bl	800aa80 <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	b21b      	sxth	r3, r3
 8010754:	4323      	orrs	r3, r4
 8010756:	b21a      	sxth	r2, r3
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	b292      	uxth	r2, r2
 8010760:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801076c:	4413      	add	r3, r2
 801076e:	b299      	uxth	r1, r3
 8010770:	4b3c      	ldr	r3, [pc, #240]	; (8010864 <tcp_receive+0xf14>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	b29a      	uxth	r2, r3
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	1a8a      	subs	r2, r1, r2
 801077c:	b292      	uxth	r2, r2
 801077e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	685a      	ldr	r2, [r3, #4]
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	4619      	mov	r1, r3
 801078e:	4610      	mov	r0, r2
 8010790:	f7fb fb9c 	bl	800becc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	891c      	ldrh	r4, [r3, #8]
 801079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fa f96b 	bl	800aa80 <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	f003 0303 	and.w	r3, r3, #3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d001      	beq.n	80107ba <tcp_receive+0xe6a>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e000      	b.n	80107bc <tcp_receive+0xe6c>
 80107ba:	2300      	movs	r3, #0
 80107bc:	4423      	add	r3, r4
 80107be:	b29a      	uxth	r2, r3
 80107c0:	4b2a      	ldr	r3, [pc, #168]	; (801086c <tcp_receive+0xf1c>)
 80107c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107c4:	4b29      	ldr	r3, [pc, #164]	; (801086c <tcp_receive+0xf1c>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	4b26      	ldr	r3, [pc, #152]	; (8010864 <tcp_receive+0xf14>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	441a      	add	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d4:	6879      	ldr	r1, [r7, #4]
 80107d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107d8:	440b      	add	r3, r1
 80107da:	429a      	cmp	r2, r3
 80107dc:	d019      	beq.n	8010812 <tcp_receive+0xec2>
 80107de:	4b24      	ldr	r3, [pc, #144]	; (8010870 <tcp_receive+0xf20>)
 80107e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80107e4:	4923      	ldr	r1, [pc, #140]	; (8010874 <tcp_receive+0xf24>)
 80107e6:	4824      	ldr	r0, [pc, #144]	; (8010878 <tcp_receive+0xf28>)
 80107e8:	f005 fab8 	bl	8015d5c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80107ec:	e011      	b.n	8010812 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80107ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80107f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f47f aea4 	bne.w	8010544 <tcp_receive+0xbf4>
 80107fc:	e00a      	b.n	8010814 <tcp_receive+0xec4>
                break;
 80107fe:	bf00      	nop
 8010800:	e008      	b.n	8010814 <tcp_receive+0xec4>
                break;
 8010802:	bf00      	nop
 8010804:	e006      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 8010806:	bf00      	nop
 8010808:	e004      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 801080a:	bf00      	nop
 801080c:	e002      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 801080e:	bf00      	nop
 8010810:	e000      	b.n	8010814 <tcp_receive+0xec4>
                break;
 8010812:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f001 fe8b 	bl	8012530 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801081a:	e003      	b.n	8010824 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f001 fe87 	bl	8012530 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010822:	e01a      	b.n	801085a <tcp_receive+0xf0a>
 8010824:	e019      	b.n	801085a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010826:	4b0f      	ldr	r3, [pc, #60]	; (8010864 <tcp_receive+0xf14>)
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	2b00      	cmp	r3, #0
 8010832:	db0a      	blt.n	801084a <tcp_receive+0xefa>
 8010834:	4b0b      	ldr	r3, [pc, #44]	; (8010864 <tcp_receive+0xf14>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	6879      	ldr	r1, [r7, #4]
 801083e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010840:	440b      	add	r3, r1
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	3301      	adds	r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	dd07      	ble.n	801085a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	8b5b      	ldrh	r3, [r3, #26]
 801084e:	f043 0302 	orr.w	r3, r3, #2
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010858:	e7ff      	b.n	801085a <tcp_receive+0xf0a>
 801085a:	bf00      	nop
 801085c:	3750      	adds	r7, #80	; 0x50
 801085e:	46bd      	mov	sp, r7
 8010860:	bdb0      	pop	{r4, r5, r7, pc}
 8010862:	bf00      	nop
 8010864:	20004afc 	.word	0x20004afc
 8010868:	20004adc 	.word	0x20004adc
 801086c:	20004b06 	.word	0x20004b06
 8010870:	08018ea0 	.word	0x08018ea0
 8010874:	08019248 	.word	0x08019248
 8010878:	08018eec 	.word	0x08018eec

0801087c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010882:	4b15      	ldr	r3, [pc, #84]	; (80108d8 <tcp_get_next_optbyte+0x5c>)
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	1c5a      	adds	r2, r3, #1
 8010888:	b291      	uxth	r1, r2
 801088a:	4a13      	ldr	r2, [pc, #76]	; (80108d8 <tcp_get_next_optbyte+0x5c>)
 801088c:	8011      	strh	r1, [r2, #0]
 801088e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010890:	4b12      	ldr	r3, [pc, #72]	; (80108dc <tcp_get_next_optbyte+0x60>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <tcp_get_next_optbyte+0x26>
 8010898:	4b11      	ldr	r3, [pc, #68]	; (80108e0 <tcp_get_next_optbyte+0x64>)
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	88fa      	ldrh	r2, [r7, #6]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d208      	bcs.n	80108b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80108a2:	4b10      	ldr	r3, [pc, #64]	; (80108e4 <tcp_get_next_optbyte+0x68>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3314      	adds	r3, #20
 80108a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80108aa:	88fb      	ldrh	r3, [r7, #6]
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	4413      	add	r3, r2
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	e00b      	b.n	80108cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80108b4:	88fb      	ldrh	r3, [r7, #6]
 80108b6:	b2da      	uxtb	r2, r3
 80108b8:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <tcp_get_next_optbyte+0x64>)
 80108ba:	881b      	ldrh	r3, [r3, #0]
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80108c2:	4b06      	ldr	r3, [pc, #24]	; (80108dc <tcp_get_next_optbyte+0x60>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	797b      	ldrb	r3, [r7, #5]
 80108c8:	4413      	add	r3, r2
 80108ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	20004af8 	.word	0x20004af8
 80108dc:	20004af4 	.word	0x20004af4
 80108e0:	20004af2 	.word	0x20004af2
 80108e4:	20004aec 	.word	0x20004aec

080108e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcp_parseopt+0x1c>
 80108f6:	4b32      	ldr	r3, [pc, #200]	; (80109c0 <tcp_parseopt+0xd8>)
 80108f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80108fc:	4931      	ldr	r1, [pc, #196]	; (80109c4 <tcp_parseopt+0xdc>)
 80108fe:	4832      	ldr	r0, [pc, #200]	; (80109c8 <tcp_parseopt+0xe0>)
 8010900:	f005 fa2c 	bl	8015d5c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010904:	4b31      	ldr	r3, [pc, #196]	; (80109cc <tcp_parseopt+0xe4>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d055      	beq.n	80109b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801090c:	4b30      	ldr	r3, [pc, #192]	; (80109d0 <tcp_parseopt+0xe8>)
 801090e:	2200      	movs	r2, #0
 8010910:	801a      	strh	r2, [r3, #0]
 8010912:	e045      	b.n	80109a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010914:	f7ff ffb2 	bl	801087c <tcp_get_next_optbyte>
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801091c:	7bfb      	ldrb	r3, [r7, #15]
 801091e:	2b02      	cmp	r3, #2
 8010920:	d006      	beq.n	8010930 <tcp_parseopt+0x48>
 8010922:	2b02      	cmp	r3, #2
 8010924:	dc2b      	bgt.n	801097e <tcp_parseopt+0x96>
 8010926:	2b00      	cmp	r3, #0
 8010928:	d041      	beq.n	80109ae <tcp_parseopt+0xc6>
 801092a:	2b01      	cmp	r3, #1
 801092c:	d127      	bne.n	801097e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801092e:	e037      	b.n	80109a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010930:	f7ff ffa4 	bl	801087c <tcp_get_next_optbyte>
 8010934:	4603      	mov	r3, r0
 8010936:	2b04      	cmp	r3, #4
 8010938:	d13b      	bne.n	80109b2 <tcp_parseopt+0xca>
 801093a:	4b25      	ldr	r3, [pc, #148]	; (80109d0 <tcp_parseopt+0xe8>)
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	3301      	adds	r3, #1
 8010940:	4a22      	ldr	r2, [pc, #136]	; (80109cc <tcp_parseopt+0xe4>)
 8010942:	8812      	ldrh	r2, [r2, #0]
 8010944:	4293      	cmp	r3, r2
 8010946:	da34      	bge.n	80109b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010948:	f7ff ff98 	bl	801087c <tcp_get_next_optbyte>
 801094c:	4603      	mov	r3, r0
 801094e:	b29b      	uxth	r3, r3
 8010950:	021b      	lsls	r3, r3, #8
 8010952:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010954:	f7ff ff92 	bl	801087c <tcp_get_next_optbyte>
 8010958:	4603      	mov	r3, r0
 801095a:	b29a      	uxth	r2, r3
 801095c:	89bb      	ldrh	r3, [r7, #12]
 801095e:	4313      	orrs	r3, r2
 8010960:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010962:	89bb      	ldrh	r3, [r7, #12]
 8010964:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010968:	d804      	bhi.n	8010974 <tcp_parseopt+0x8c>
 801096a:	89bb      	ldrh	r3, [r7, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <tcp_parseopt+0x8c>
 8010970:	89ba      	ldrh	r2, [r7, #12]
 8010972:	e001      	b.n	8010978 <tcp_parseopt+0x90>
 8010974:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801097c:	e010      	b.n	80109a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801097e:	f7ff ff7d 	bl	801087c <tcp_get_next_optbyte>
 8010982:	4603      	mov	r3, r0
 8010984:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010986:	7afb      	ldrb	r3, [r7, #11]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d914      	bls.n	80109b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801098c:	7afb      	ldrb	r3, [r7, #11]
 801098e:	b29a      	uxth	r2, r3
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <tcp_parseopt+0xe8>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	4413      	add	r3, r2
 8010996:	b29b      	uxth	r3, r3
 8010998:	3b02      	subs	r3, #2
 801099a:	b29a      	uxth	r2, r3
 801099c:	4b0c      	ldr	r3, [pc, #48]	; (80109d0 <tcp_parseopt+0xe8>)
 801099e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109a0:	4b0b      	ldr	r3, [pc, #44]	; (80109d0 <tcp_parseopt+0xe8>)
 80109a2:	881a      	ldrh	r2, [r3, #0]
 80109a4:	4b09      	ldr	r3, [pc, #36]	; (80109cc <tcp_parseopt+0xe4>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d3b3      	bcc.n	8010914 <tcp_parseopt+0x2c>
 80109ac:	e004      	b.n	80109b8 <tcp_parseopt+0xd0>
          return;
 80109ae:	bf00      	nop
 80109b0:	e002      	b.n	80109b8 <tcp_parseopt+0xd0>
            return;
 80109b2:	bf00      	nop
 80109b4:	e000      	b.n	80109b8 <tcp_parseopt+0xd0>
            return;
 80109b6:	bf00      	nop
      }
    }
  }
}
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	08018ea0 	.word	0x08018ea0
 80109c4:	08019304 	.word	0x08019304
 80109c8:	08018eec 	.word	0x08018eec
 80109cc:	20004af0 	.word	0x20004af0
 80109d0:	20004af8 	.word	0x20004af8

080109d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109d4:	b480      	push	{r7}
 80109d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80109d8:	4b05      	ldr	r3, [pc, #20]	; (80109f0 <tcp_trigger_input_pcb_close+0x1c>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	f043 0310 	orr.w	r3, r3, #16
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	4b03      	ldr	r3, [pc, #12]	; (80109f0 <tcp_trigger_input_pcb_close+0x1c>)
 80109e4:	701a      	strb	r2, [r3, #0]
}
 80109e6:	bf00      	nop
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr
 80109f0:	20004b09 	.word	0x20004b09

080109f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00a      	beq.n	8010a1c <tcp_route+0x28>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	7a1b      	ldrb	r3, [r3, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d006      	beq.n	8010a1c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	7a1b      	ldrb	r3, [r3, #8]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fb f852 	bl	800babc <netif_get_by_index>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	e003      	b.n	8010a24 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f003 fc4b 	bl	80142b8 <ip4_route>
 8010a22:	4603      	mov	r3, r0
  }
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	603b      	str	r3, [r7, #0]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d105      	bne.n	8010a4e <tcp_create_segment+0x22>
 8010a42:	4b44      	ldr	r3, [pc, #272]	; (8010b54 <tcp_create_segment+0x128>)
 8010a44:	22a3      	movs	r2, #163	; 0xa3
 8010a46:	4944      	ldr	r1, [pc, #272]	; (8010b58 <tcp_create_segment+0x12c>)
 8010a48:	4844      	ldr	r0, [pc, #272]	; (8010b5c <tcp_create_segment+0x130>)
 8010a4a:	f005 f987 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d105      	bne.n	8010a60 <tcp_create_segment+0x34>
 8010a54:	4b3f      	ldr	r3, [pc, #252]	; (8010b54 <tcp_create_segment+0x128>)
 8010a56:	22a4      	movs	r2, #164	; 0xa4
 8010a58:	4941      	ldr	r1, [pc, #260]	; (8010b60 <tcp_create_segment+0x134>)
 8010a5a:	4840      	ldr	r0, [pc, #256]	; (8010b5c <tcp_create_segment+0x130>)
 8010a5c:	f005 f97e 	bl	8015d5c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	f003 0304 	and.w	r3, r3, #4
 8010a6c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a6e:	2003      	movs	r0, #3
 8010a70:	f7fa fcbc 	bl	800b3ec <memp_malloc>
 8010a74:	6138      	str	r0, [r7, #16]
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d104      	bne.n	8010a86 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010a7c:	68b8      	ldr	r0, [r7, #8]
 8010a7e:	f7fb fbab 	bl	800c1d8 <pbuf_free>
    return NULL;
 8010a82:	2300      	movs	r3, #0
 8010a84:	e061      	b.n	8010b4a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a8c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	2200      	movs	r2, #0
 8010a92:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	891a      	ldrh	r2, [r3, #8]
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d205      	bcs.n	8010ab2 <tcp_create_segment+0x86>
 8010aa6:	4b2b      	ldr	r3, [pc, #172]	; (8010b54 <tcp_create_segment+0x128>)
 8010aa8:	22b0      	movs	r2, #176	; 0xb0
 8010aaa:	492e      	ldr	r1, [pc, #184]	; (8010b64 <tcp_create_segment+0x138>)
 8010aac:	482b      	ldr	r0, [pc, #172]	; (8010b5c <tcp_create_segment+0x130>)
 8010aae:	f005 f955 	bl	8015d5c <iprintf>
  seg->len = p->tot_len - optlen;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	891a      	ldrh	r2, [r3, #8]
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010ac2:	2114      	movs	r1, #20
 8010ac4:	68b8      	ldr	r0, [r7, #8]
 8010ac6:	f7fb faf1 	bl	800c0ac <pbuf_add_header>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d004      	beq.n	8010ada <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ad0:	6938      	ldr	r0, [r7, #16]
 8010ad2:	f7fd f804 	bl	800dade <tcp_seg_free>
    return NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e037      	b.n	8010b4a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	8ada      	ldrh	r2, [r3, #22]
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	68dc      	ldr	r4, [r3, #12]
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7f9 ffc7 	bl	800aa80 <lwip_htons>
 8010af2:	4603      	mov	r3, r0
 8010af4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	8b1a      	ldrh	r2, [r3, #24]
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	68dc      	ldr	r4, [r3, #12]
 8010afe:	4610      	mov	r0, r2
 8010b00:	f7f9 ffbe 	bl	800aa80 <lwip_htons>
 8010b04:	4603      	mov	r3, r0
 8010b06:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	68dc      	ldr	r4, [r3, #12]
 8010b0c:	6838      	ldr	r0, [r7, #0]
 8010b0e:	f7f9 ffcc 	bl	800aaaa <lwip_htonl>
 8010b12:	4603      	mov	r3, r0
 8010b14:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
 8010b18:	089b      	lsrs	r3, r3, #2
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	3305      	adds	r3, #5
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	031b      	lsls	r3, r3, #12
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	68dc      	ldr	r4, [r3, #12]
 8010b32:	4610      	mov	r0, r2
 8010b34:	f7f9 ffa4 	bl	800aa80 <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	749a      	strb	r2, [r3, #18]
 8010b44:	2200      	movs	r2, #0
 8010b46:	74da      	strb	r2, [r3, #19]
  return seg;
 8010b48:	693b      	ldr	r3, [r7, #16]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	371c      	adds	r7, #28
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd90      	pop	{r4, r7, pc}
 8010b52:	bf00      	nop
 8010b54:	08019320 	.word	0x08019320
 8010b58:	08019354 	.word	0x08019354
 8010b5c:	08019374 	.word	0x08019374
 8010b60:	0801939c 	.word	0x0801939c
 8010b64:	080193c0 	.word	0x080193c0

08010b68 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	607b      	str	r3, [r7, #4]
 8010b70:	4603      	mov	r3, r0
 8010b72:	73fb      	strb	r3, [r7, #15]
 8010b74:	460b      	mov	r3, r1
 8010b76:	81bb      	strh	r3, [r7, #12]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010b7c:	89bb      	ldrh	r3, [r7, #12]
 8010b7e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d105      	bne.n	8010b92 <tcp_pbuf_prealloc+0x2a>
 8010b86:	4b30      	ldr	r3, [pc, #192]	; (8010c48 <tcp_pbuf_prealloc+0xe0>)
 8010b88:	22e8      	movs	r2, #232	; 0xe8
 8010b8a:	4930      	ldr	r1, [pc, #192]	; (8010c4c <tcp_pbuf_prealloc+0xe4>)
 8010b8c:	4830      	ldr	r0, [pc, #192]	; (8010c50 <tcp_pbuf_prealloc+0xe8>)
 8010b8e:	f005 f8e5 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d105      	bne.n	8010ba4 <tcp_pbuf_prealloc+0x3c>
 8010b98:	4b2b      	ldr	r3, [pc, #172]	; (8010c48 <tcp_pbuf_prealloc+0xe0>)
 8010b9a:	22e9      	movs	r2, #233	; 0xe9
 8010b9c:	492d      	ldr	r1, [pc, #180]	; (8010c54 <tcp_pbuf_prealloc+0xec>)
 8010b9e:	482c      	ldr	r0, [pc, #176]	; (8010c50 <tcp_pbuf_prealloc+0xe8>)
 8010ba0:	f005 f8dc 	bl	8015d5c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010ba4:	89ba      	ldrh	r2, [r7, #12]
 8010ba6:	897b      	ldrh	r3, [r7, #10]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d221      	bcs.n	8010bf0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010bb0:	f003 0302 	and.w	r3, r3, #2
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d111      	bne.n	8010bdc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	8b5b      	ldrh	r3, [r3, #26]
 8010bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d115      	bne.n	8010bf0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010bc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d007      	beq.n	8010bdc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d103      	bne.n	8010bdc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d009      	beq.n	8010bf0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010bdc:	89bb      	ldrh	r3, [r7, #12]
 8010bde:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010be2:	f023 0203 	bic.w	r2, r3, #3
 8010be6:	897b      	ldrh	r3, [r7, #10]
 8010be8:	4293      	cmp	r3, r2
 8010bea:	bf28      	it	cs
 8010bec:	4613      	movcs	r3, r2
 8010bee:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010bf0:	8af9      	ldrh	r1, [r7, #22]
 8010bf2:	7bfb      	ldrb	r3, [r7, #15]
 8010bf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fb f809 	bl	800bc10 <pbuf_alloc>
 8010bfe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d101      	bne.n	8010c0a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010c06:	2300      	movs	r3, #0
 8010c08:	e019      	b.n	8010c3e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d006      	beq.n	8010c20 <tcp_pbuf_prealloc+0xb8>
 8010c12:	4b0d      	ldr	r3, [pc, #52]	; (8010c48 <tcp_pbuf_prealloc+0xe0>)
 8010c14:	f240 120b 	movw	r2, #267	; 0x10b
 8010c18:	490f      	ldr	r1, [pc, #60]	; (8010c58 <tcp_pbuf_prealloc+0xf0>)
 8010c1a:	480d      	ldr	r0, [pc, #52]	; (8010c50 <tcp_pbuf_prealloc+0xe8>)
 8010c1c:	f005 f89e 	bl	8015d5c <iprintf>
  *oversize = p->len - length;
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	895a      	ldrh	r2, [r3, #10]
 8010c24:	89bb      	ldrh	r3, [r7, #12]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	89ba      	ldrh	r2, [r7, #12]
 8010c32:	811a      	strh	r2, [r3, #8]
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	891a      	ldrh	r2, [r3, #8]
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	815a      	strh	r2, [r3, #10]
  return p;
 8010c3c:	693b      	ldr	r3, [r7, #16]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3718      	adds	r7, #24
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	08019320 	.word	0x08019320
 8010c4c:	080193d8 	.word	0x080193d8
 8010c50:	08019374 	.word	0x08019374
 8010c54:	080193fc 	.word	0x080193fc
 8010c58:	0801941c 	.word	0x0801941c

08010c5c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	460b      	mov	r3, r1
 8010c66:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d106      	bne.n	8010c7c <tcp_write_checks+0x20>
 8010c6e:	4b33      	ldr	r3, [pc, #204]	; (8010d3c <tcp_write_checks+0xe0>)
 8010c70:	f240 1233 	movw	r2, #307	; 0x133
 8010c74:	4932      	ldr	r1, [pc, #200]	; (8010d40 <tcp_write_checks+0xe4>)
 8010c76:	4833      	ldr	r0, [pc, #204]	; (8010d44 <tcp_write_checks+0xe8>)
 8010c78:	f005 f870 	bl	8015d5c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	7d1b      	ldrb	r3, [r3, #20]
 8010c80:	2b04      	cmp	r3, #4
 8010c82:	d00e      	beq.n	8010ca2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010c88:	2b07      	cmp	r3, #7
 8010c8a:	d00a      	beq.n	8010ca2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010c90:	2b02      	cmp	r3, #2
 8010c92:	d006      	beq.n	8010ca2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010c98:	2b03      	cmp	r3, #3
 8010c9a:	d002      	beq.n	8010ca2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010c9c:	f06f 030a 	mvn.w	r3, #10
 8010ca0:	e048      	b.n	8010d34 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010ca2:	887b      	ldrh	r3, [r7, #2]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <tcp_write_checks+0x50>
    return ERR_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e043      	b.n	8010d34 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010cb2:	887a      	ldrh	r2, [r7, #2]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d909      	bls.n	8010ccc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	8b5b      	ldrh	r3, [r3, #26]
 8010cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cca:	e033      	b.n	8010d34 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cd2:	2b08      	cmp	r3, #8
 8010cd4:	d909      	bls.n	8010cea <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8b5b      	ldrh	r3, [r3, #26]
 8010cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ce8:	e024      	b.n	8010d34 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00f      	beq.n	8010d14 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d11a      	bne.n	8010d32 <tcp_write_checks+0xd6>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d116      	bne.n	8010d32 <tcp_write_checks+0xd6>
 8010d04:	4b0d      	ldr	r3, [pc, #52]	; (8010d3c <tcp_write_checks+0xe0>)
 8010d06:	f240 1255 	movw	r2, #341	; 0x155
 8010d0a:	490f      	ldr	r1, [pc, #60]	; (8010d48 <tcp_write_checks+0xec>)
 8010d0c:	480d      	ldr	r0, [pc, #52]	; (8010d44 <tcp_write_checks+0xe8>)
 8010d0e:	f005 f825 	bl	8015d5c <iprintf>
 8010d12:	e00e      	b.n	8010d32 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d103      	bne.n	8010d24 <tcp_write_checks+0xc8>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d006      	beq.n	8010d32 <tcp_write_checks+0xd6>
 8010d24:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <tcp_write_checks+0xe0>)
 8010d26:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010d2a:	4908      	ldr	r1, [pc, #32]	; (8010d4c <tcp_write_checks+0xf0>)
 8010d2c:	4805      	ldr	r0, [pc, #20]	; (8010d44 <tcp_write_checks+0xe8>)
 8010d2e:	f005 f815 	bl	8015d5c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	08019320 	.word	0x08019320
 8010d40:	08019430 	.word	0x08019430
 8010d44:	08019374 	.word	0x08019374
 8010d48:	08019450 	.word	0x08019450
 8010d4c:	0801948c 	.word	0x0801948c

08010d50 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010d50:	b590      	push	{r4, r7, lr}
 8010d52:	b09b      	sub	sp, #108	; 0x6c
 8010d54:	af04      	add	r7, sp, #16
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	460b      	mov	r3, r1
 8010d60:	80fb      	strh	r3, [r7, #6]
 8010d62:	4613      	mov	r3, r2
 8010d64:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010d66:	2300      	movs	r3, #0
 8010d68:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	653b      	str	r3, [r7, #80]	; 0x50
 8010d6e:	2300      	movs	r3, #0
 8010d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d72:	2300      	movs	r3, #0
 8010d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d76:	2300      	movs	r3, #0
 8010d78:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010d80:	2300      	movs	r3, #0
 8010d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010d86:	2300      	movs	r3, #0
 8010d88:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d109      	bne.n	8010dac <tcp_write+0x5c>
 8010d98:	4ba4      	ldr	r3, [pc, #656]	; (801102c <tcp_write+0x2dc>)
 8010d9a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010d9e:	49a4      	ldr	r1, [pc, #656]	; (8011030 <tcp_write+0x2e0>)
 8010da0:	48a4      	ldr	r0, [pc, #656]	; (8011034 <tcp_write+0x2e4>)
 8010da2:	f004 ffdb 	bl	8015d5c <iprintf>
 8010da6:	f06f 030f 	mvn.w	r3, #15
 8010daa:	e32a      	b.n	8011402 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010db2:	085b      	lsrs	r3, r3, #1
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	bf28      	it	cs
 8010dbe:	4613      	movcs	r3, r2
 8010dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <tcp_write+0x7e>
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dcc:	e000      	b.n	8010dd0 <tcp_write+0x80>
 8010dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <tcp_write+0x9c>
 8010dd8:	4b94      	ldr	r3, [pc, #592]	; (801102c <tcp_write+0x2dc>)
 8010dda:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010dde:	4996      	ldr	r1, [pc, #600]	; (8011038 <tcp_write+0x2e8>)
 8010de0:	4894      	ldr	r0, [pc, #592]	; (8011034 <tcp_write+0x2e4>)
 8010de2:	f004 ffbb 	bl	8015d5c <iprintf>
 8010de6:	f06f 030f 	mvn.w	r3, #15
 8010dea:	e30a      	b.n	8011402 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010dec:	88fb      	ldrh	r3, [r7, #6]
 8010dee:	4619      	mov	r1, r3
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f7ff ff33 	bl	8010c5c <tcp_write_checks>
 8010df6:	4603      	mov	r3, r0
 8010df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010dfc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <tcp_write+0xba>
    return err;
 8010e04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e08:	e2fb      	b.n	8011402 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e14:	2300      	movs	r3, #0
 8010e16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 80f6 	beq.w	8011010 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e28:	653b      	str	r3, [r7, #80]	; 0x50
 8010e2a:	e002      	b.n	8010e32 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1f8      	bne.n	8010e2c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e3c:	7a9b      	ldrb	r3, [r3, #10]
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	f003 0304 	and.w	r3, r3, #4
 8010e46:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010e48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e4c:	891b      	ldrh	r3, [r3, #8]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	8c3b      	ldrh	r3, [r7, #32]
 8010e52:	440b      	add	r3, r1
 8010e54:	429a      	cmp	r2, r3
 8010e56:	da06      	bge.n	8010e66 <tcp_write+0x116>
 8010e58:	4b74      	ldr	r3, [pc, #464]	; (801102c <tcp_write+0x2dc>)
 8010e5a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e5e:	4977      	ldr	r1, [pc, #476]	; (801103c <tcp_write+0x2ec>)
 8010e60:	4874      	ldr	r0, [pc, #464]	; (8011034 <tcp_write+0x2e4>)
 8010e62:	f004 ff7b 	bl	8015d5c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e68:	891a      	ldrh	r2, [r3, #8]
 8010e6a:	8c3b      	ldrh	r3, [r7, #32]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e7c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010e7e:	8a7b      	ldrh	r3, [r7, #18]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d026      	beq.n	8010ed2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010e84:	8a7b      	ldrh	r3, [r7, #18]
 8010e86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d206      	bcs.n	8010e9a <tcp_write+0x14a>
 8010e8c:	4b67      	ldr	r3, [pc, #412]	; (801102c <tcp_write+0x2dc>)
 8010e8e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010e92:	496b      	ldr	r1, [pc, #428]	; (8011040 <tcp_write+0x2f0>)
 8010e94:	4867      	ldr	r0, [pc, #412]	; (8011034 <tcp_write+0x2e4>)
 8010e96:	f004 ff61 	bl	8015d5c <iprintf>
      seg = last_unsent;
 8010e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010e9e:	8a7b      	ldrh	r3, [r7, #18]
 8010ea0:	88fa      	ldrh	r2, [r7, #6]
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	bf28      	it	cs
 8010ea6:	4613      	movcs	r3, r2
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010eac:	4293      	cmp	r3, r2
 8010eae:	bf28      	it	cs
 8010eb0:	4613      	movcs	r3, r2
 8010eb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010eb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010eba:	4413      	add	r3, r2
 8010ebc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010ec0:	8a7a      	ldrh	r2, [r7, #18]
 8010ec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010eca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ecc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010ed2:	8a7b      	ldrh	r3, [r7, #18]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00b      	beq.n	8010ef0 <tcp_write+0x1a0>
 8010ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010edc:	88fb      	ldrh	r3, [r7, #6]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d006      	beq.n	8010ef0 <tcp_write+0x1a0>
 8010ee2:	4b52      	ldr	r3, [pc, #328]	; (801102c <tcp_write+0x2dc>)
 8010ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ee8:	4956      	ldr	r1, [pc, #344]	; (8011044 <tcp_write+0x2f4>)
 8010eea:	4852      	ldr	r0, [pc, #328]	; (8011034 <tcp_write+0x2e4>)
 8010eec:	f004 ff36 	bl	8015d5c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010ef0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ef4:	88fb      	ldrh	r3, [r7, #6]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	f080 8167 	bcs.w	80111ca <tcp_write+0x47a>
 8010efc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 8163 	beq.w	80111ca <tcp_write+0x47a>
 8010f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f06:	891b      	ldrh	r3, [r3, #8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 815e 	beq.w	80111ca <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010f0e:	88fa      	ldrh	r2, [r7, #6]
 8010f10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f14:	1ad2      	subs	r2, r2, r3
 8010f16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	bfa8      	it	ge
 8010f1c:	4613      	movge	r3, r2
 8010f1e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f22:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f24:	797b      	ldrb	r3, [r7, #5]
 8010f26:	f003 0301 	and.w	r3, r3, #1
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d027      	beq.n	8010f7e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010f2e:	f107 0012 	add.w	r0, r7, #18
 8010f32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f34:	8bf9      	ldrh	r1, [r7, #30]
 8010f36:	2301      	movs	r3, #1
 8010f38:	9302      	str	r3, [sp, #8]
 8010f3a:	797b      	ldrb	r3, [r7, #5]
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	4603      	mov	r3, r0
 8010f44:	2000      	movs	r0, #0
 8010f46:	f7ff fe0f 	bl	8010b68 <tcp_pbuf_prealloc>
 8010f4a:	6578      	str	r0, [r7, #84]	; 0x54
 8010f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f000 8225 	beq.w	801139e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f56:	6858      	ldr	r0, [r3, #4]
 8010f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	4413      	add	r3, r2
 8010f60:	8bfa      	ldrh	r2, [r7, #30]
 8010f62:	4619      	mov	r1, r3
 8010f64:	f004 fe6f 	bl	8015c46 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010f68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f6a:	f7fb f9c3 	bl	800c2f4 <pbuf_clen>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	461a      	mov	r2, r3
 8010f72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f76:	4413      	add	r3, r2
 8010f78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010f7c:	e041      	b.n	8011002 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	637b      	str	r3, [r7, #52]	; 0x34
 8010f84:	e002      	b.n	8010f8c <tcp_write+0x23c>
 8010f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d1f8      	bne.n	8010f86 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f96:	7b1b      	ldrb	r3, [r3, #12]
 8010f98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d115      	bne.n	8010fcc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fa6:	8952      	ldrh	r2, [r2, #10]
 8010fa8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010faa:	68ba      	ldr	r2, [r7, #8]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d10d      	bne.n	8010fcc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010fb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d006      	beq.n	8010fc6 <tcp_write+0x276>
 8010fb8:	4b1c      	ldr	r3, [pc, #112]	; (801102c <tcp_write+0x2dc>)
 8010fba:	f240 2231 	movw	r2, #561	; 0x231
 8010fbe:	4922      	ldr	r1, [pc, #136]	; (8011048 <tcp_write+0x2f8>)
 8010fc0:	481c      	ldr	r0, [pc, #112]	; (8011034 <tcp_write+0x2e4>)
 8010fc2:	f004 fecb 	bl	8015d5c <iprintf>
          extendlen = seglen;
 8010fc6:	8bfb      	ldrh	r3, [r7, #30]
 8010fc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010fca:	e01a      	b.n	8011002 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010fcc:	8bfb      	ldrh	r3, [r7, #30]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	f7fa fe1c 	bl	800bc10 <pbuf_alloc>
 8010fd8:	6578      	str	r0, [r7, #84]	; 0x54
 8010fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 81e0 	beq.w	80113a2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	441a      	add	r2, r3
 8010fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fec:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010fee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010ff0:	f7fb f980 	bl	800c2f4 <pbuf_clen>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011002:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011006:	8bfb      	ldrh	r3, [r7, #30]
 8011008:	4413      	add	r3, r2
 801100a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801100e:	e0dc      	b.n	80111ca <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80d7 	beq.w	80111ca <tcp_write+0x47a>
 801101c:	4b03      	ldr	r3, [pc, #12]	; (801102c <tcp_write+0x2dc>)
 801101e:	f240 224a 	movw	r2, #586	; 0x24a
 8011022:	490a      	ldr	r1, [pc, #40]	; (801104c <tcp_write+0x2fc>)
 8011024:	4803      	ldr	r0, [pc, #12]	; (8011034 <tcp_write+0x2e4>)
 8011026:	f004 fe99 	bl	8015d5c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801102a:	e0ce      	b.n	80111ca <tcp_write+0x47a>
 801102c:	08019320 	.word	0x08019320
 8011030:	080194c0 	.word	0x080194c0
 8011034:	08019374 	.word	0x08019374
 8011038:	080194d8 	.word	0x080194d8
 801103c:	0801950c 	.word	0x0801950c
 8011040:	08019524 	.word	0x08019524
 8011044:	08019544 	.word	0x08019544
 8011048:	08019564 	.word	0x08019564
 801104c:	08019590 	.word	0x08019590
    struct pbuf *p;
    u16_t left = len - pos;
 8011050:	88fa      	ldrh	r2, [r7, #6]
 8011052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801105a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801105e:	b29b      	uxth	r3, r3
 8011060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011066:	8b7a      	ldrh	r2, [r7, #26]
 8011068:	8bbb      	ldrh	r3, [r7, #28]
 801106a:	4293      	cmp	r3, r2
 801106c:	bf28      	it	cs
 801106e:	4613      	movcs	r3, r2
 8011070:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011072:	797b      	ldrb	r3, [r7, #5]
 8011074:	f003 0301 	and.w	r3, r3, #1
 8011078:	2b00      	cmp	r3, #0
 801107a:	d036      	beq.n	80110ea <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801107c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011080:	b29a      	uxth	r2, r3
 8011082:	8b3b      	ldrh	r3, [r7, #24]
 8011084:	4413      	add	r3, r2
 8011086:	b299      	uxth	r1, r3
 8011088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801108a:	2b00      	cmp	r3, #0
 801108c:	bf0c      	ite	eq
 801108e:	2301      	moveq	r3, #1
 8011090:	2300      	movne	r3, #0
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f107 0012 	add.w	r0, r7, #18
 8011098:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801109a:	9302      	str	r3, [sp, #8]
 801109c:	797b      	ldrb	r3, [r7, #5]
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	4603      	mov	r3, r0
 80110a6:	2036      	movs	r0, #54	; 0x36
 80110a8:	f7ff fd5e 	bl	8010b68 <tcp_pbuf_prealloc>
 80110ac:	6338      	str	r0, [r7, #48]	; 0x30
 80110ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 8178 	beq.w	80113a6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80110b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b8:	895b      	ldrh	r3, [r3, #10]
 80110ba:	8b3a      	ldrh	r2, [r7, #24]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d906      	bls.n	80110ce <tcp_write+0x37e>
 80110c0:	4b8c      	ldr	r3, [pc, #560]	; (80112f4 <tcp_write+0x5a4>)
 80110c2:	f240 2266 	movw	r2, #614	; 0x266
 80110c6:	498c      	ldr	r1, [pc, #560]	; (80112f8 <tcp_write+0x5a8>)
 80110c8:	488c      	ldr	r0, [pc, #560]	; (80112fc <tcp_write+0x5ac>)
 80110ca:	f004 fe47 	bl	8015d5c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110d6:	18d0      	adds	r0, r2, r3
 80110d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	4413      	add	r3, r2
 80110e0:	8b3a      	ldrh	r2, [r7, #24]
 80110e2:	4619      	mov	r1, r3
 80110e4:	f004 fdaf 	bl	8015c46 <memcpy>
 80110e8:	e02f      	b.n	801114a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80110ea:	8a7b      	ldrh	r3, [r7, #18]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d006      	beq.n	80110fe <tcp_write+0x3ae>
 80110f0:	4b80      	ldr	r3, [pc, #512]	; (80112f4 <tcp_write+0x5a4>)
 80110f2:	f240 2271 	movw	r2, #625	; 0x271
 80110f6:	4982      	ldr	r1, [pc, #520]	; (8011300 <tcp_write+0x5b0>)
 80110f8:	4880      	ldr	r0, [pc, #512]	; (80112fc <tcp_write+0x5ac>)
 80110fa:	f004 fe2f 	bl	8015d5c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80110fe:	8b3b      	ldrh	r3, [r7, #24]
 8011100:	2201      	movs	r2, #1
 8011102:	4619      	mov	r1, r3
 8011104:	2036      	movs	r0, #54	; 0x36
 8011106:	f7fa fd83 	bl	800bc10 <pbuf_alloc>
 801110a:	6178      	str	r0, [r7, #20]
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f000 814b 	beq.w	80113aa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011114:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011118:	68ba      	ldr	r2, [r7, #8]
 801111a:	441a      	add	r2, r3
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011124:	b29b      	uxth	r3, r3
 8011126:	f44f 7220 	mov.w	r2, #640	; 0x280
 801112a:	4619      	mov	r1, r3
 801112c:	2036      	movs	r0, #54	; 0x36
 801112e:	f7fa fd6f 	bl	800bc10 <pbuf_alloc>
 8011132:	6338      	str	r0, [r7, #48]	; 0x30
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	2b00      	cmp	r3, #0
 8011138:	d103      	bne.n	8011142 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801113a:	6978      	ldr	r0, [r7, #20]
 801113c:	f7fb f84c 	bl	800c1d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011140:	e136      	b.n	80113b0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011142:	6979      	ldr	r1, [r7, #20]
 8011144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011146:	f7fb f915 	bl	800c374 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801114a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801114c:	f7fb f8d2 	bl	800c2f4 <pbuf_clen>
 8011150:	4603      	mov	r3, r0
 8011152:	461a      	mov	r2, r3
 8011154:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011158:	4413      	add	r3, r2
 801115a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801115e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011162:	2b09      	cmp	r3, #9
 8011164:	d903      	bls.n	801116e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011168:	f7fb f836 	bl	800c1d8 <pbuf_free>
      goto memerr;
 801116c:	e120      	b.n	80113b0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011172:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011176:	441a      	add	r2, r3
 8011178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	4613      	mov	r3, r2
 8011180:	2200      	movs	r2, #0
 8011182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f7ff fc51 	bl	8010a2c <tcp_create_segment>
 801118a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801118c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 810d 	beq.w	80113ae <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011196:	2b00      	cmp	r3, #0
 8011198:	d102      	bne.n	80111a0 <tcp_write+0x450>
      queue = seg;
 801119a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801119c:	647b      	str	r3, [r7, #68]	; 0x44
 801119e:	e00c      	b.n	80111ba <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80111a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <tcp_write+0x464>
 80111a6:	4b53      	ldr	r3, [pc, #332]	; (80112f4 <tcp_write+0x5a4>)
 80111a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111ac:	4955      	ldr	r1, [pc, #340]	; (8011304 <tcp_write+0x5b4>)
 80111ae:	4853      	ldr	r0, [pc, #332]	; (80112fc <tcp_write+0x5ac>)
 80111b0:	f004 fdd4 	bl	8015d5c <iprintf>
      prev_seg->next = seg;
 80111b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111b8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80111ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111bc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80111be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111c2:	8b3b      	ldrh	r3, [r7, #24]
 80111c4:	4413      	add	r3, r2
 80111c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80111ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111ce:	88fb      	ldrh	r3, [r7, #6]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	f4ff af3d 	bcc.w	8011050 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80111d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d02c      	beq.n	8011236 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80111dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111e2:	e01e      	b.n	8011222 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	891a      	ldrh	r2, [r3, #8]
 80111e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111ea:	4413      	add	r3, r2
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80111f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d110      	bne.n	801121c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011200:	8952      	ldrh	r2, [r2, #10]
 8011202:	4413      	add	r3, r2
 8011204:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011206:	68b9      	ldr	r1, [r7, #8]
 8011208:	4618      	mov	r0, r3
 801120a:	f004 fd1c 	bl	8015c46 <memcpy>
        p->len += oversize_used;
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	895a      	ldrh	r2, [r3, #10]
 8011212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011214:	4413      	add	r3, r2
 8011216:	b29a      	uxth	r2, r3
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1dd      	bne.n	80111e4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801122a:	891a      	ldrh	r2, [r3, #8]
 801122c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801122e:	4413      	add	r3, r2
 8011230:	b29a      	uxth	r2, r3
 8011232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011234:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011236:	8a7a      	ldrh	r2, [r7, #18]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801123e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011240:	2b00      	cmp	r3, #0
 8011242:	d018      	beq.n	8011276 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011246:	2b00      	cmp	r3, #0
 8011248:	d106      	bne.n	8011258 <tcp_write+0x508>
 801124a:	4b2a      	ldr	r3, [pc, #168]	; (80112f4 <tcp_write+0x5a4>)
 801124c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011250:	492d      	ldr	r1, [pc, #180]	; (8011308 <tcp_write+0x5b8>)
 8011252:	482a      	ldr	r0, [pc, #168]	; (80112fc <tcp_write+0x5ac>)
 8011254:	f004 fd82 	bl	8015d5c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801125e:	4618      	mov	r0, r3
 8011260:	f7fb f888 	bl	800c374 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011266:	891a      	ldrh	r2, [r3, #8]
 8011268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801126a:	891b      	ldrh	r3, [r3, #8]
 801126c:	4413      	add	r3, r2
 801126e:	b29a      	uxth	r2, r3
 8011270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011272:	811a      	strh	r2, [r3, #8]
 8011274:	e037      	b.n	80112e6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011276:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011278:	2b00      	cmp	r3, #0
 801127a:	d034      	beq.n	80112e6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801127c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801127e:	2b00      	cmp	r3, #0
 8011280:	d003      	beq.n	801128a <tcp_write+0x53a>
 8011282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <tcp_write+0x548>
 801128a:	4b1a      	ldr	r3, [pc, #104]	; (80112f4 <tcp_write+0x5a4>)
 801128c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011290:	491e      	ldr	r1, [pc, #120]	; (801130c <tcp_write+0x5bc>)
 8011292:	481a      	ldr	r0, [pc, #104]	; (80112fc <tcp_write+0x5ac>)
 8011294:	f004 fd62 	bl	8015d5c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	62bb      	str	r3, [r7, #40]	; 0x28
 801129e:	e009      	b.n	80112b4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	891a      	ldrh	r2, [r3, #8]
 80112a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112a6:	4413      	add	r3, r2
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80112ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1f1      	bne.n	80112a0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80112bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112be:	891a      	ldrh	r2, [r3, #8]
 80112c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112c2:	4413      	add	r3, r2
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80112ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112cc:	895a      	ldrh	r2, [r3, #10]
 80112ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112d0:	4413      	add	r3, r2
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80112d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112da:	891a      	ldrh	r2, [r3, #8]
 80112dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112de:	4413      	add	r3, r2
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112e4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80112e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d111      	bne.n	8011310 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80112f2:	e010      	b.n	8011316 <tcp_write+0x5c6>
 80112f4:	08019320 	.word	0x08019320
 80112f8:	080195c0 	.word	0x080195c0
 80112fc:	08019374 	.word	0x08019374
 8011300:	08019600 	.word	0x08019600
 8011304:	08019610 	.word	0x08019610
 8011308:	08019624 	.word	0x08019624
 801130c:	0801965c 	.word	0x0801965c
  } else {
    last_unsent->next = queue;
 8011310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011314:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801131a:	88fb      	ldrh	r3, [r7, #6]
 801131c:	441a      	add	r2, r3
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011328:	88fb      	ldrh	r3, [r7, #6]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	b29a      	uxth	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801133a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00e      	beq.n	8011366 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134c:	2b00      	cmp	r3, #0
 801134e:	d10a      	bne.n	8011366 <tcp_write+0x616>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_write+0x616>
 8011358:	4b2c      	ldr	r3, [pc, #176]	; (801140c <tcp_write+0x6bc>)
 801135a:	f240 3212 	movw	r2, #786	; 0x312
 801135e:	492c      	ldr	r1, [pc, #176]	; (8011410 <tcp_write+0x6c0>)
 8011360:	482c      	ldr	r0, [pc, #176]	; (8011414 <tcp_write+0x6c4>)
 8011362:	f004 fcfb 	bl	8015d5c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d016      	beq.n	801139a <tcp_write+0x64a>
 801136c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d012      	beq.n	801139a <tcp_write+0x64a>
 8011374:	797b      	ldrb	r3, [r7, #5]
 8011376:	f003 0302 	and.w	r3, r3, #2
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10d      	bne.n	801139a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801137e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	899b      	ldrh	r3, [r3, #12]
 8011384:	b29c      	uxth	r4, r3
 8011386:	2008      	movs	r0, #8
 8011388:	f7f9 fb7a 	bl	800aa80 <lwip_htons>
 801138c:	4603      	mov	r3, r0
 801138e:	461a      	mov	r2, r3
 8011390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	4322      	orrs	r2, r4
 8011396:	b292      	uxth	r2, r2
 8011398:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801139a:	2300      	movs	r3, #0
 801139c:	e031      	b.n	8011402 <tcp_write+0x6b2>
          goto memerr;
 801139e:	bf00      	nop
 80113a0:	e006      	b.n	80113b0 <tcp_write+0x660>
            goto memerr;
 80113a2:	bf00      	nop
 80113a4:	e004      	b.n	80113b0 <tcp_write+0x660>
        goto memerr;
 80113a6:	bf00      	nop
 80113a8:	e002      	b.n	80113b0 <tcp_write+0x660>
        goto memerr;
 80113aa:	bf00      	nop
 80113ac:	e000      	b.n	80113b0 <tcp_write+0x660>
      goto memerr;
 80113ae:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	8b5b      	ldrh	r3, [r3, #26]
 80113b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80113be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d002      	beq.n	80113ca <tcp_write+0x67a>
    pbuf_free(concat_p);
 80113c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113c6:	f7fa ff07 	bl	800c1d8 <pbuf_free>
  }
  if (queue != NULL) {
 80113ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80113d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113d2:	f7fc fb6f 	bl	800dab4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00e      	beq.n	80113fe <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10a      	bne.n	80113fe <tcp_write+0x6ae>
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d106      	bne.n	80113fe <tcp_write+0x6ae>
 80113f0:	4b06      	ldr	r3, [pc, #24]	; (801140c <tcp_write+0x6bc>)
 80113f2:	f240 3227 	movw	r2, #807	; 0x327
 80113f6:	4906      	ldr	r1, [pc, #24]	; (8011410 <tcp_write+0x6c0>)
 80113f8:	4806      	ldr	r0, [pc, #24]	; (8011414 <tcp_write+0x6c4>)
 80113fa:	f004 fcaf 	bl	8015d5c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011402:	4618      	mov	r0, r3
 8011404:	375c      	adds	r7, #92	; 0x5c
 8011406:	46bd      	mov	sp, r7
 8011408:	bd90      	pop	{r4, r7, pc}
 801140a:	bf00      	nop
 801140c:	08019320 	.word	0x08019320
 8011410:	08019694 	.word	0x08019694
 8011414:	08019374 	.word	0x08019374

08011418 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b08b      	sub	sp, #44	; 0x2c
 801141c:	af02      	add	r7, sp, #8
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	460b      	mov	r3, r1
 8011422:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011424:	2300      	movs	r3, #0
 8011426:	61fb      	str	r3, [r7, #28]
 8011428:	2300      	movs	r3, #0
 801142a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801142c:	2300      	movs	r3, #0
 801142e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <tcp_split_unsent_seg+0x2c>
 8011436:	4b95      	ldr	r3, [pc, #596]	; (801168c <tcp_split_unsent_seg+0x274>)
 8011438:	f240 324b 	movw	r2, #843	; 0x34b
 801143c:	4994      	ldr	r1, [pc, #592]	; (8011690 <tcp_split_unsent_seg+0x278>)
 801143e:	4895      	ldr	r0, [pc, #596]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011440:	f004 fc8c 	bl	8015d5c <iprintf>

  useg = pcb->unsent;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011448:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011454:	e116      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011456:	887b      	ldrh	r3, [r7, #2]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d109      	bne.n	8011470 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801145c:	4b8b      	ldr	r3, [pc, #556]	; (801168c <tcp_split_unsent_seg+0x274>)
 801145e:	f240 3253 	movw	r2, #851	; 0x353
 8011462:	498d      	ldr	r1, [pc, #564]	; (8011698 <tcp_split_unsent_seg+0x280>)
 8011464:	488b      	ldr	r0, [pc, #556]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011466:	f004 fc79 	bl	8015d5c <iprintf>
    return ERR_VAL;
 801146a:	f06f 0305 	mvn.w	r3, #5
 801146e:	e109      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	891b      	ldrh	r3, [r3, #8]
 8011474:	887a      	ldrh	r2, [r7, #2]
 8011476:	429a      	cmp	r2, r3
 8011478:	d301      	bcc.n	801147e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	e102      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011482:	887a      	ldrh	r2, [r7, #2]
 8011484:	429a      	cmp	r2, r3
 8011486:	d906      	bls.n	8011496 <tcp_split_unsent_seg+0x7e>
 8011488:	4b80      	ldr	r3, [pc, #512]	; (801168c <tcp_split_unsent_seg+0x274>)
 801148a:	f240 325b 	movw	r2, #859	; 0x35b
 801148e:	4983      	ldr	r1, [pc, #524]	; (801169c <tcp_split_unsent_seg+0x284>)
 8011490:	4880      	ldr	r0, [pc, #512]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011492:	f004 fc63 	bl	8015d5c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	891b      	ldrh	r3, [r3, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <tcp_split_unsent_seg+0x94>
 801149e:	4b7b      	ldr	r3, [pc, #492]	; (801168c <tcp_split_unsent_seg+0x274>)
 80114a0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80114a4:	497e      	ldr	r1, [pc, #504]	; (80116a0 <tcp_split_unsent_seg+0x288>)
 80114a6:	487b      	ldr	r0, [pc, #492]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 80114a8:	f004 fc58 	bl	8015d5c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	7a9b      	ldrb	r3, [r3, #10]
 80114b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	f003 0304 	and.w	r3, r3, #4
 80114bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	891a      	ldrh	r2, [r3, #8]
 80114c2:	887b      	ldrh	r3, [r7, #2]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80114c8:	7bbb      	ldrb	r3, [r7, #14]
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	89bb      	ldrh	r3, [r7, #12]
 80114ce:	4413      	add	r3, r2
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114d6:	4619      	mov	r1, r3
 80114d8:	2036      	movs	r0, #54	; 0x36
 80114da:	f7fa fb99 	bl	800bc10 <pbuf_alloc>
 80114de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 80b7 	beq.w	8011656 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	891a      	ldrh	r2, [r3, #8]
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	891b      	ldrh	r3, [r3, #8]
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	887b      	ldrh	r3, [r7, #2]
 80114f8:	4413      	add	r3, r2
 80114fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	6858      	ldr	r0, [r3, #4]
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	685a      	ldr	r2, [r3, #4]
 8011504:	7bbb      	ldrb	r3, [r7, #14]
 8011506:	18d1      	adds	r1, r2, r3
 8011508:	897b      	ldrh	r3, [r7, #10]
 801150a:	89ba      	ldrh	r2, [r7, #12]
 801150c:	f7fb f85a 	bl	800c5c4 <pbuf_copy_partial>
 8011510:	4603      	mov	r3, r0
 8011512:	461a      	mov	r2, r3
 8011514:	89bb      	ldrh	r3, [r7, #12]
 8011516:	4293      	cmp	r3, r2
 8011518:	f040 809f 	bne.w	801165a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	899b      	ldrh	r3, [r3, #12]
 8011522:	b29b      	uxth	r3, r3
 8011524:	4618      	mov	r0, r3
 8011526:	f7f9 faab 	bl	800aa80 <lwip_htons>
 801152a:	4603      	mov	r3, r0
 801152c:	b2db      	uxtb	r3, r3
 801152e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011532:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011534:	2300      	movs	r3, #0
 8011536:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011538:	7efb      	ldrb	r3, [r7, #27]
 801153a:	f003 0308 	and.w	r3, r3, #8
 801153e:	2b00      	cmp	r3, #0
 8011540:	d007      	beq.n	8011552 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011542:	7efb      	ldrb	r3, [r7, #27]
 8011544:	f023 0308 	bic.w	r3, r3, #8
 8011548:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801154a:	7ebb      	ldrb	r3, [r7, #26]
 801154c:	f043 0308 	orr.w	r3, r3, #8
 8011550:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011552:	7efb      	ldrb	r3, [r7, #27]
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d007      	beq.n	801156c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801155c:	7efb      	ldrb	r3, [r7, #27]
 801155e:	f023 0301 	bic.w	r3, r3, #1
 8011562:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011564:	7ebb      	ldrb	r3, [r7, #26]
 8011566:	f043 0301 	orr.w	r3, r3, #1
 801156a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	4618      	mov	r0, r3
 8011574:	f7f9 fa99 	bl	800aaaa <lwip_htonl>
 8011578:	4602      	mov	r2, r0
 801157a:	887b      	ldrh	r3, [r7, #2]
 801157c:	18d1      	adds	r1, r2, r3
 801157e:	7eba      	ldrb	r2, [r7, #26]
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	460b      	mov	r3, r1
 8011586:	6939      	ldr	r1, [r7, #16]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7ff fa4f 	bl	8010a2c <tcp_create_segment>
 801158e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d063      	beq.n	801165e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	f7fa feaa 	bl	800c2f4 <pbuf_clen>
 80115a0:	4603      	mov	r3, r0
 80115a2:	461a      	mov	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115aa:	1a9b      	subs	r3, r3, r2
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	6858      	ldr	r0, [r3, #4]
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	891a      	ldrh	r2, [r3, #8]
 80115be:	89bb      	ldrh	r3, [r7, #12]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	4619      	mov	r1, r3
 80115c6:	f7fa fc81 	bl	800becc <pbuf_realloc>
  useg->len -= remainder;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	891a      	ldrh	r2, [r3, #8]
 80115ce:	89bb      	ldrh	r3, [r7, #12]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	899b      	ldrh	r3, [r3, #12]
 80115de:	b29c      	uxth	r4, r3
 80115e0:	7efb      	ldrb	r3, [r7, #27]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7f9 fa4b 	bl	800aa80 <lwip_htons>
 80115ea:	4603      	mov	r3, r0
 80115ec:	461a      	mov	r2, r3
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	4322      	orrs	r2, r4
 80115f4:	b292      	uxth	r2, r2
 80115f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fa fe79 	bl	800c2f4 <pbuf_clen>
 8011602:	4603      	mov	r3, r0
 8011604:	461a      	mov	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801160c:	4413      	add	r3, r2
 801160e:	b29a      	uxth	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	4618      	mov	r0, r3
 801161c:	f7fa fe6a 	bl	800c2f4 <pbuf_clen>
 8011620:	4603      	mov	r3, r0
 8011622:	461a      	mov	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801162a:	4413      	add	r3, r2
 801162c:	b29a      	uxth	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	69fa      	ldr	r2, [r7, #28]
 8011640:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d103      	bne.n	8011652 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	e016      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011656:	bf00      	nop
 8011658:	e002      	b.n	8011660 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801165a:	bf00      	nop
 801165c:	e000      	b.n	8011660 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801165e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <tcp_split_unsent_seg+0x25c>
 8011666:	4b09      	ldr	r3, [pc, #36]	; (801168c <tcp_split_unsent_seg+0x274>)
 8011668:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801166c:	490d      	ldr	r1, [pc, #52]	; (80116a4 <tcp_split_unsent_seg+0x28c>)
 801166e:	4809      	ldr	r0, [pc, #36]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011670:	f004 fb74 	bl	8015d5c <iprintf>
  if (p != NULL) {
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801167a:	6938      	ldr	r0, [r7, #16]
 801167c:	f7fa fdac 	bl	800c1d8 <pbuf_free>
  }

  return ERR_MEM;
 8011680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011684:	4618      	mov	r0, r3
 8011686:	3724      	adds	r7, #36	; 0x24
 8011688:	46bd      	mov	sp, r7
 801168a:	bd90      	pop	{r4, r7, pc}
 801168c:	08019320 	.word	0x08019320
 8011690:	080196b4 	.word	0x080196b4
 8011694:	08019374 	.word	0x08019374
 8011698:	080196d8 	.word	0x080196d8
 801169c:	080196fc 	.word	0x080196fc
 80116a0:	0801970c 	.word	0x0801970c
 80116a4:	0801971c 	.word	0x0801971c

080116a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80116a8:	b590      	push	{r4, r7, lr}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d106      	bne.n	80116c4 <tcp_send_fin+0x1c>
 80116b6:	4b21      	ldr	r3, [pc, #132]	; (801173c <tcp_send_fin+0x94>)
 80116b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80116bc:	4920      	ldr	r1, [pc, #128]	; (8011740 <tcp_send_fin+0x98>)
 80116be:	4821      	ldr	r0, [pc, #132]	; (8011744 <tcp_send_fin+0x9c>)
 80116c0:	f004 fb4c 	bl	8015d5c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d02e      	beq.n	801172a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	e002      	b.n	80116da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1f8      	bne.n	80116d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	899b      	ldrh	r3, [r3, #12]
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7f9 f9c8 	bl	800aa80 <lwip_htons>
 80116f0:	4603      	mov	r3, r0
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	f003 0307 	and.w	r3, r3, #7
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d116      	bne.n	801172a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	899b      	ldrh	r3, [r3, #12]
 8011702:	b29c      	uxth	r4, r3
 8011704:	2001      	movs	r0, #1
 8011706:	f7f9 f9bb 	bl	800aa80 <lwip_htons>
 801170a:	4603      	mov	r3, r0
 801170c:	461a      	mov	r2, r3
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	4322      	orrs	r2, r4
 8011714:	b292      	uxth	r2, r2
 8011716:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	8b5b      	ldrh	r3, [r3, #26]
 801171c:	f043 0320 	orr.w	r3, r3, #32
 8011720:	b29a      	uxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	e004      	b.n	8011734 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801172a:	2101      	movs	r1, #1
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 f80b 	bl	8011748 <tcp_enqueue_flags>
 8011732:	4603      	mov	r3, r0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3714      	adds	r7, #20
 8011738:	46bd      	mov	sp, r7
 801173a:	bd90      	pop	{r4, r7, pc}
 801173c:	08019320 	.word	0x08019320
 8011740:	08019728 	.word	0x08019728
 8011744:	08019374 	.word	0x08019374

08011748 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b08a      	sub	sp, #40	; 0x28
 801174c:	af02      	add	r7, sp, #8
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	460b      	mov	r3, r1
 8011752:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011754:	2300      	movs	r3, #0
 8011756:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	f003 0303 	and.w	r3, r3, #3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <tcp_enqueue_flags+0x2c>
 8011766:	4b67      	ldr	r3, [pc, #412]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 8011768:	f240 4211 	movw	r2, #1041	; 0x411
 801176c:	4966      	ldr	r1, [pc, #408]	; (8011908 <tcp_enqueue_flags+0x1c0>)
 801176e:	4867      	ldr	r0, [pc, #412]	; (801190c <tcp_enqueue_flags+0x1c4>)
 8011770:	f004 faf4 	bl	8015d5c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d106      	bne.n	8011788 <tcp_enqueue_flags+0x40>
 801177a:	4b62      	ldr	r3, [pc, #392]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 801177c:	f240 4213 	movw	r2, #1043	; 0x413
 8011780:	4963      	ldr	r1, [pc, #396]	; (8011910 <tcp_enqueue_flags+0x1c8>)
 8011782:	4862      	ldr	r0, [pc, #392]	; (801190c <tcp_enqueue_flags+0x1c4>)
 8011784:	f004 faea 	bl	8015d5c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011788:	78fb      	ldrb	r3, [r7, #3]
 801178a:	f003 0302 	and.w	r3, r3, #2
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011792:	2301      	movs	r3, #1
 8011794:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011796:	7ffb      	ldrb	r3, [r7, #31]
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0304 	and.w	r3, r3, #4
 80117a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117aa:	4619      	mov	r1, r3
 80117ac:	2036      	movs	r0, #54	; 0x36
 80117ae:	f7fa fa2f 	bl	800bc10 <pbuf_alloc>
 80117b2:	6138      	str	r0, [r7, #16]
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d109      	bne.n	80117ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	8b5b      	ldrh	r3, [r3, #26]
 80117be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117cc:	e095      	b.n	80118fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	895a      	ldrh	r2, [r3, #10]
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d206      	bcs.n	80117e8 <tcp_enqueue_flags+0xa0>
 80117da:	4b4a      	ldr	r3, [pc, #296]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 80117dc:	f240 4239 	movw	r2, #1081	; 0x439
 80117e0:	494c      	ldr	r1, [pc, #304]	; (8011914 <tcp_enqueue_flags+0x1cc>)
 80117e2:	484a      	ldr	r0, [pc, #296]	; (801190c <tcp_enqueue_flags+0x1c4>)
 80117e4:	f004 faba 	bl	8015d5c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80117ec:	78fa      	ldrb	r2, [r7, #3]
 80117ee:	7ffb      	ldrb	r3, [r7, #31]
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	460b      	mov	r3, r1
 80117f4:	6939      	ldr	r1, [r7, #16]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7ff f918 	bl	8010a2c <tcp_create_segment>
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d109      	bne.n	8011818 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8b5b      	ldrh	r3, [r3, #26]
 8011808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011816:	e070      	b.n	80118fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	f003 0303 	and.w	r3, r3, #3
 8011820:	2b00      	cmp	r3, #0
 8011822:	d006      	beq.n	8011832 <tcp_enqueue_flags+0xea>
 8011824:	4b37      	ldr	r3, [pc, #220]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 8011826:	f240 4242 	movw	r2, #1090	; 0x442
 801182a:	493b      	ldr	r1, [pc, #236]	; (8011918 <tcp_enqueue_flags+0x1d0>)
 801182c:	4837      	ldr	r0, [pc, #220]	; (801190c <tcp_enqueue_flags+0x1c4>)
 801182e:	f004 fa95 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	891b      	ldrh	r3, [r3, #8]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d006      	beq.n	8011848 <tcp_enqueue_flags+0x100>
 801183a:	4b32      	ldr	r3, [pc, #200]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 801183c:	f240 4243 	movw	r2, #1091	; 0x443
 8011840:	4936      	ldr	r1, [pc, #216]	; (801191c <tcp_enqueue_flags+0x1d4>)
 8011842:	4832      	ldr	r0, [pc, #200]	; (801190c <tcp_enqueue_flags+0x1c4>)
 8011844:	f004 fa8a 	bl	8015d5c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801184c:	2b00      	cmp	r3, #0
 801184e:	d103      	bne.n	8011858 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	66da      	str	r2, [r3, #108]	; 0x6c
 8011856:	e00d      	b.n	8011874 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801185c:	61bb      	str	r3, [r7, #24]
 801185e:	e002      	b.n	8011866 <tcp_enqueue_flags+0x11e>
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	61bb      	str	r3, [r7, #24]
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1f8      	bne.n	8011860 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	68fa      	ldr	r2, [r7, #12]
 8011872:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801187c:	78fb      	ldrb	r3, [r7, #3]
 801187e:	f003 0302 	and.w	r3, r3, #2
 8011882:	2b00      	cmp	r3, #0
 8011884:	d104      	bne.n	8011890 <tcp_enqueue_flags+0x148>
 8011886:	78fb      	ldrb	r3, [r7, #3]
 8011888:	f003 0301 	and.w	r3, r3, #1
 801188c:	2b00      	cmp	r3, #0
 801188e:	d004      	beq.n	801189a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011894:	1c5a      	adds	r2, r3, #1
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801189a:	78fb      	ldrb	r3, [r7, #3]
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d006      	beq.n	80118b2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	8b5b      	ldrh	r3, [r3, #26]
 80118a8:	f043 0320 	orr.w	r3, r3, #32
 80118ac:	b29a      	uxth	r2, r3
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fa fd1c 	bl	800c2f4 <pbuf_clen>
 80118bc:	4603      	mov	r3, r0
 80118be:	461a      	mov	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118c6:	4413      	add	r3, r2
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00e      	beq.n	80118f8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10a      	bne.n	80118f8 <tcp_enqueue_flags+0x1b0>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d106      	bne.n	80118f8 <tcp_enqueue_flags+0x1b0>
 80118ea:	4b06      	ldr	r3, [pc, #24]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 80118ec:	f240 4265 	movw	r2, #1125	; 0x465
 80118f0:	490b      	ldr	r1, [pc, #44]	; (8011920 <tcp_enqueue_flags+0x1d8>)
 80118f2:	4806      	ldr	r0, [pc, #24]	; (801190c <tcp_enqueue_flags+0x1c4>)
 80118f4:	f004 fa32 	bl	8015d5c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3720      	adds	r7, #32
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	08019320 	.word	0x08019320
 8011908:	08019744 	.word	0x08019744
 801190c:	08019374 	.word	0x08019374
 8011910:	0801979c 	.word	0x0801979c
 8011914:	080197bc 	.word	0x080197bc
 8011918:	080197f8 	.word	0x080197f8
 801191c:	08019810 	.word	0x08019810
 8011920:	0801983c 	.word	0x0801983c

08011924 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011924:	b5b0      	push	{r4, r5, r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d106      	bne.n	8011940 <tcp_output+0x1c>
 8011932:	4b9e      	ldr	r3, [pc, #632]	; (8011bac <tcp_output+0x288>)
 8011934:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011938:	499d      	ldr	r1, [pc, #628]	; (8011bb0 <tcp_output+0x28c>)
 801193a:	489e      	ldr	r0, [pc, #632]	; (8011bb4 <tcp_output+0x290>)
 801193c:	f004 fa0e 	bl	8015d5c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d106      	bne.n	8011956 <tcp_output+0x32>
 8011948:	4b98      	ldr	r3, [pc, #608]	; (8011bac <tcp_output+0x288>)
 801194a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801194e:	499a      	ldr	r1, [pc, #616]	; (8011bb8 <tcp_output+0x294>)
 8011950:	4898      	ldr	r0, [pc, #608]	; (8011bb4 <tcp_output+0x290>)
 8011952:	f004 fa03 	bl	8015d5c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011956:	4b99      	ldr	r3, [pc, #612]	; (8011bbc <tcp_output+0x298>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	429a      	cmp	r2, r3
 801195e:	d101      	bne.n	8011964 <tcp_output+0x40>
    return ERR_OK;
 8011960:	2300      	movs	r3, #0
 8011962:	e1ce      	b.n	8011d02 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011970:	4293      	cmp	r3, r2
 8011972:	bf28      	it	cs
 8011974:	4613      	movcs	r3, r2
 8011976:	b29b      	uxth	r3, r3
 8011978:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801197e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10b      	bne.n	801199e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	8b5b      	ldrh	r3, [r3, #26]
 801198a:	f003 0302 	and.w	r3, r3, #2
 801198e:	2b00      	cmp	r3, #0
 8011990:	f000 81aa 	beq.w	8011ce8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f000 fdcb 	bl	8012530 <tcp_send_empty_ack>
 801199a:	4603      	mov	r3, r0
 801199c:	e1b1      	b.n	8011d02 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3304      	adds	r3, #4
 80119a4:	461a      	mov	r2, r3
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff f824 	bl	80109f4 <tcp_route>
 80119ac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d102      	bne.n	80119ba <tcp_output+0x96>
    return ERR_RTE;
 80119b4:	f06f 0303 	mvn.w	r3, #3
 80119b8:	e1a3      	b.n	8011d02 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d003      	beq.n	80119c8 <tcp_output+0xa4>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d111      	bne.n	80119ec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d002      	beq.n	80119d4 <tcp_output+0xb0>
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	3304      	adds	r3, #4
 80119d2:	e000      	b.n	80119d6 <tcp_output+0xb2>
 80119d4:	2300      	movs	r3, #0
 80119d6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d102      	bne.n	80119e4 <tcp_output+0xc0>
      return ERR_RTE;
 80119de:	f06f 0303 	mvn.w	r3, #3
 80119e2:	e18e      	b.n	8011d02 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7f9 f859 	bl	800aaaa <lwip_htonl>
 80119f8:	4602      	mov	r2, r0
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a02:	8912      	ldrh	r2, [r2, #8]
 8011a04:	4413      	add	r3, r2
 8011a06:	69ba      	ldr	r2, [r7, #24]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d227      	bcs.n	8011a5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a12:	461a      	mov	r2, r3
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d114      	bne.n	8011a44 <tcp_output+0x120>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d110      	bne.n	8011a44 <tcp_output+0x120>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10b      	bne.n	8011a44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	8b5b      	ldrh	r3, [r3, #26]
 8011a48:	f003 0302 	and.w	r3, r3, #2
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 814d 	beq.w	8011cec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 fd6c 	bl	8012530 <tcp_send_empty_ack>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	e152      	b.n	8011d02 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 811c 	beq.w	8011caa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011a72:	e002      	b.n	8011a7a <tcp_output+0x156>
 8011a74:	6a3b      	ldr	r3, [r7, #32]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	623b      	str	r3, [r7, #32]
 8011a7a:	6a3b      	ldr	r3, [r7, #32]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d1f8      	bne.n	8011a74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011a82:	e112      	b.n	8011caa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	899b      	ldrh	r3, [r3, #12]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f8 fff7 	bl	800aa80 <lwip_htons>
 8011a92:	4603      	mov	r3, r0
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	f003 0304 	and.w	r3, r3, #4
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d006      	beq.n	8011aac <tcp_output+0x188>
 8011a9e:	4b43      	ldr	r3, [pc, #268]	; (8011bac <tcp_output+0x288>)
 8011aa0:	f240 5236 	movw	r2, #1334	; 0x536
 8011aa4:	4946      	ldr	r1, [pc, #280]	; (8011bc0 <tcp_output+0x29c>)
 8011aa6:	4843      	ldr	r0, [pc, #268]	; (8011bb4 <tcp_output+0x290>)
 8011aa8:	f004 f958 	bl	8015d5c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d01f      	beq.n	8011af4 <tcp_output+0x1d0>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	8b5b      	ldrh	r3, [r3, #26]
 8011ab8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d119      	bne.n	8011af4 <tcp_output+0x1d0>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00b      	beq.n	8011ae0 <tcp_output+0x1bc>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d110      	bne.n	8011af4 <tcp_output+0x1d0>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad6:	891a      	ldrh	r2, [r3, #8]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d209      	bcs.n	8011af4 <tcp_output+0x1d0>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d004      	beq.n	8011af4 <tcp_output+0x1d0>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af0:	2b08      	cmp	r3, #8
 8011af2:	d901      	bls.n	8011af8 <tcp_output+0x1d4>
 8011af4:	2301      	movs	r3, #1
 8011af6:	e000      	b.n	8011afa <tcp_output+0x1d6>
 8011af8:	2300      	movs	r3, #0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d106      	bne.n	8011b0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	8b5b      	ldrh	r3, [r3, #26]
 8011b02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f000 80e4 	beq.w	8011cd4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7d1b      	ldrb	r3, [r3, #20]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d00d      	beq.n	8011b30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	899b      	ldrh	r3, [r3, #12]
 8011b1a:	b29c      	uxth	r4, r3
 8011b1c:	2010      	movs	r0, #16
 8011b1e:	f7f8 ffaf 	bl	800aa80 <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	461a      	mov	r2, r3
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	4322      	orrs	r2, r4
 8011b2c:	b292      	uxth	r2, r2
 8011b2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011b30:	697a      	ldr	r2, [r7, #20]
 8011b32:	6879      	ldr	r1, [r7, #4]
 8011b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b36:	f000 f909 	bl	8011d4c <tcp_output_segment>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d009      	beq.n	8011b5a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	8b5b      	ldrh	r3, [r3, #26]
 8011b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	835a      	strh	r2, [r3, #26]
      return err;
 8011b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b58:	e0d3      	b.n	8011d02 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7d1b      	ldrb	r3, [r3, #20]
 8011b66:	2b02      	cmp	r3, #2
 8011b68:	d006      	beq.n	8011b78 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f023 0303 	bic.w	r3, r3, #3
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f8 ff93 	bl	800aaaa <lwip_htonl>
 8011b84:	4604      	mov	r4, r0
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b88:	891b      	ldrh	r3, [r3, #8]
 8011b8a:	461d      	mov	r5, r3
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	899b      	ldrh	r3, [r3, #12]
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7f8 ff73 	bl	800aa80 <lwip_htons>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	f003 0303 	and.w	r3, r3, #3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00e      	beq.n	8011bc4 <tcp_output+0x2a0>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e00d      	b.n	8011bc6 <tcp_output+0x2a2>
 8011baa:	bf00      	nop
 8011bac:	08019320 	.word	0x08019320
 8011bb0:	08019864 	.word	0x08019864
 8011bb4:	08019374 	.word	0x08019374
 8011bb8:	0801987c 	.word	0x0801987c
 8011bbc:	2000d870 	.word	0x2000d870
 8011bc0:	080198a4 	.word	0x080198a4
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	442b      	add	r3, r5
 8011bc8:	4423      	add	r3, r4
 8011bca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	da02      	bge.n	8011bde <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	891b      	ldrh	r3, [r3, #8]
 8011be2:	461c      	mov	r4, r3
 8011be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f8 ff47 	bl	800aa80 <lwip_htons>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	f003 0303 	and.w	r3, r3, #3
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d001      	beq.n	8011c02 <tcp_output+0x2de>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e000      	b.n	8011c04 <tcp_output+0x2e0>
 8011c02:	2300      	movs	r3, #0
 8011c04:	4423      	add	r3, r4
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d049      	beq.n	8011c9e <tcp_output+0x37a>
      seg->next = NULL;
 8011c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d105      	bne.n	8011c24 <tcp_output+0x300>
        pcb->unacked = seg;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c1c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c20:	623b      	str	r3, [r7, #32]
 8011c22:	e03f      	b.n	8011ca4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7f8 ff3d 	bl	800aaaa <lwip_htonl>
 8011c30:	4604      	mov	r4, r0
 8011c32:	6a3b      	ldr	r3, [r7, #32]
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7f8 ff36 	bl	800aaaa <lwip_htonl>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	1ae3      	subs	r3, r4, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	da24      	bge.n	8011c90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	3370      	adds	r3, #112	; 0x70
 8011c4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c4c:	e002      	b.n	8011c54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d011      	beq.n	8011c80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7f8 ff20 	bl	800aaaa <lwip_htonl>
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7f8 ff19 	bl	800aaaa <lwip_htonl>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dbe6      	blt.n	8011c4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c8c:	601a      	str	r2, [r3, #0]
 8011c8e:	e009      	b.n	8011ca4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	623b      	str	r3, [r7, #32]
 8011c9c:	e002      	b.n	8011ca4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ca0:	f7fb ff1d 	bl	800dade <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ca8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d012      	beq.n	8011cd6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7f8 fef7 	bl	800aaaa <lwip_htonl>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc6:	8912      	ldrh	r2, [r2, #8]
 8011cc8:	4413      	add	r3, r2
  while (seg != NULL &&
 8011cca:	69ba      	ldr	r2, [r7, #24]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	f4bf aed9 	bcs.w	8011a84 <tcp_output+0x160>
 8011cd2:	e000      	b.n	8011cd6 <tcp_output+0x3b2>
      break;
 8011cd4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d108      	bne.n	8011cf0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011ce6:	e004      	b.n	8011cf2 <tcp_output+0x3ce>
    goto output_done;
 8011ce8:	bf00      	nop
 8011cea:	e002      	b.n	8011cf2 <tcp_output+0x3ce>
    goto output_done;
 8011cec:	bf00      	nop
 8011cee:	e000      	b.n	8011cf2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011cf0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	8b5b      	ldrh	r3, [r3, #26]
 8011cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3728      	adds	r7, #40	; 0x28
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bdb0      	pop	{r4, r5, r7, pc}
 8011d0a:	bf00      	nop

08011d0c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d106      	bne.n	8011d28 <tcp_output_segment_busy+0x1c>
 8011d1a:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <tcp_output_segment_busy+0x34>)
 8011d1c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011d20:	4908      	ldr	r1, [pc, #32]	; (8011d44 <tcp_output_segment_busy+0x38>)
 8011d22:	4809      	ldr	r0, [pc, #36]	; (8011d48 <tcp_output_segment_busy+0x3c>)
 8011d24:	f004 f81a 	bl	8015d5c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	7b9b      	ldrb	r3, [r3, #14]
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d001      	beq.n	8011d36 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011d32:	2301      	movs	r3, #1
 8011d34:	e000      	b.n	8011d38 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08019320 	.word	0x08019320
 8011d44:	080198bc 	.word	0x080198bc
 8011d48:	08019374 	.word	0x08019374

08011d4c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d4c:	b5b0      	push	{r4, r5, r7, lr}
 8011d4e:	b08c      	sub	sp, #48	; 0x30
 8011d50:	af04      	add	r7, sp, #16
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d106      	bne.n	8011d6c <tcp_output_segment+0x20>
 8011d5e:	4b63      	ldr	r3, [pc, #396]	; (8011eec <tcp_output_segment+0x1a0>)
 8011d60:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011d64:	4962      	ldr	r1, [pc, #392]	; (8011ef0 <tcp_output_segment+0x1a4>)
 8011d66:	4863      	ldr	r0, [pc, #396]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011d68:	f003 fff8 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d106      	bne.n	8011d80 <tcp_output_segment+0x34>
 8011d72:	4b5e      	ldr	r3, [pc, #376]	; (8011eec <tcp_output_segment+0x1a0>)
 8011d74:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011d78:	495f      	ldr	r1, [pc, #380]	; (8011ef8 <tcp_output_segment+0x1ac>)
 8011d7a:	485e      	ldr	r0, [pc, #376]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011d7c:	f003 ffee 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d106      	bne.n	8011d94 <tcp_output_segment+0x48>
 8011d86:	4b59      	ldr	r3, [pc, #356]	; (8011eec <tcp_output_segment+0x1a0>)
 8011d88:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011d8c:	495b      	ldr	r1, [pc, #364]	; (8011efc <tcp_output_segment+0x1b0>)
 8011d8e:	4859      	ldr	r0, [pc, #356]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011d90:	f003 ffe4 	bl	8015d5c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f7ff ffb9 	bl	8011d0c <tcp_output_segment_busy>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011da0:	2300      	movs	r3, #0
 8011da2:	e09f      	b.n	8011ee4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	68dc      	ldr	r4, [r3, #12]
 8011dac:	4610      	mov	r0, r2
 8011dae:	f7f8 fe7c 	bl	800aaaa <lwip_htonl>
 8011db2:	4603      	mov	r3, r0
 8011db4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	68dc      	ldr	r4, [r3, #12]
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f7f8 fe5e 	bl	800aa80 <lwip_htons>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011dd0:	441a      	add	r2, r3
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	3314      	adds	r3, #20
 8011ddc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	7a9b      	ldrb	r3, [r3, #10]
 8011de2:	f003 0301 	and.w	r3, r3, #1
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d015      	beq.n	8011e16 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	3304      	adds	r3, #4
 8011dee:	461a      	mov	r2, r3
 8011df0:	6879      	ldr	r1, [r7, #4]
 8011df2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011df6:	f7fc fa37 	bl	800e268 <tcp_eff_send_mss_netif>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011dfe:	8b7b      	ldrh	r3, [r7, #26]
 8011e00:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7f8 fe50 	bl	800aaaa <lwip_htonl>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	3304      	adds	r3, #4
 8011e14:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	da02      	bge.n	8011e26 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2200      	movs	r2, #0
 8011e24:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10c      	bne.n	8011e48 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011e2e:	4b34      	ldr	r3, [pc, #208]	; (8011f00 <tcp_output_segment+0x1b4>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7f8 fe34 	bl	800aaaa <lwip_htonl>
 8011e42:	4602      	mov	r2, r0
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	68da      	ldr	r2, [r3, #12]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	8959      	ldrh	r1, [r3, #10]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	8b3a      	ldrh	r2, [r7, #24]
 8011e62:	1a8a      	subs	r2, r1, r2
 8011e64:	b292      	uxth	r2, r2
 8011e66:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	8919      	ldrh	r1, [r3, #8]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	8b3a      	ldrh	r2, [r7, #24]
 8011e74:	1a8a      	subs	r2, r1, r2
 8011e76:	b292      	uxth	r2, r2
 8011e78:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	68d2      	ldr	r2, [r2, #12]
 8011e82:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	741a      	strb	r2, [r3, #16]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	f103 0214 	add.w	r2, r3, #20
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	7a9b      	ldrb	r3, [r3, #10]
 8011e9c:	009b      	lsls	r3, r3, #2
 8011e9e:	f003 0304 	and.w	r3, r3, #4
 8011ea2:	4413      	add	r3, r2
 8011ea4:	69fa      	ldr	r2, [r7, #28]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d006      	beq.n	8011eb8 <tcp_output_segment+0x16c>
 8011eaa:	4b10      	ldr	r3, [pc, #64]	; (8011eec <tcp_output_segment+0x1a0>)
 8011eac:	f240 621c 	movw	r2, #1564	; 0x61c
 8011eb0:	4914      	ldr	r1, [pc, #80]	; (8011f04 <tcp_output_segment+0x1b8>)
 8011eb2:	4810      	ldr	r0, [pc, #64]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011eb4:	f003 ff52 	bl	8015d5c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6858      	ldr	r0, [r3, #4]
 8011ebc:	68b9      	ldr	r1, [r7, #8]
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	1d1c      	adds	r4, r3, #4
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	7add      	ldrb	r5, [r3, #11]
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	7a9b      	ldrb	r3, [r3, #10]
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	9202      	str	r2, [sp, #8]
 8011ece:	2206      	movs	r2, #6
 8011ed0:	9201      	str	r2, [sp, #4]
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	f002 fbac 	bl	8014634 <ip4_output_if>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3720      	adds	r7, #32
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bdb0      	pop	{r4, r5, r7, pc}
 8011eec:	08019320 	.word	0x08019320
 8011ef0:	080198e4 	.word	0x080198e4
 8011ef4:	08019374 	.word	0x08019374
 8011ef8:	08019904 	.word	0x08019904
 8011efc:	08019924 	.word	0x08019924
 8011f00:	2000d860 	.word	0x2000d860
 8011f04:	08019948 	.word	0x08019948

08011f08 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011f08:	b5b0      	push	{r4, r5, r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <tcp_rexmit_rto_prepare+0x1c>
 8011f16:	4b31      	ldr	r3, [pc, #196]	; (8011fdc <tcp_rexmit_rto_prepare+0xd4>)
 8011f18:	f240 6263 	movw	r2, #1635	; 0x663
 8011f1c:	4930      	ldr	r1, [pc, #192]	; (8011fe0 <tcp_rexmit_rto_prepare+0xd8>)
 8011f1e:	4831      	ldr	r0, [pc, #196]	; (8011fe4 <tcp_rexmit_rto_prepare+0xdc>)
 8011f20:	f003 ff1c 	bl	8015d5c <iprintf>

  if (pcb->unacked == NULL) {
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d102      	bne.n	8011f32 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011f2c:	f06f 0305 	mvn.w	r3, #5
 8011f30:	e050      	b.n	8011fd4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f36:	60fb      	str	r3, [r7, #12]
 8011f38:	e00b      	b.n	8011f52 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7ff fee6 	bl	8011d0c <tcp_output_segment_busy>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011f46:	f06f 0305 	mvn.w	r3, #5
 8011f4a:	e043      	b.n	8011fd4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d1ef      	bne.n	8011f3a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f7ff fed6 	bl	8011d0c <tcp_output_segment_busy>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d002      	beq.n	8011f6c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011f66:	f06f 0305 	mvn.w	r3, #5
 8011f6a:	e033      	b.n	8011fd4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	8b5b      	ldrh	r3, [r3, #26]
 8011f86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011f8a:	b29a      	uxth	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7f8 fd87 	bl	800aaaa <lwip_htonl>
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	891b      	ldrh	r3, [r3, #8]
 8011fa2:	461d      	mov	r5, r3
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	899b      	ldrh	r3, [r3, #12]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7f8 fd67 	bl	800aa80 <lwip_htons>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	f003 0303 	and.w	r3, r3, #3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d001      	beq.n	8011fc2 <tcp_rexmit_rto_prepare+0xba>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e000      	b.n	8011fc4 <tcp_rexmit_rto_prepare+0xbc>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	442b      	add	r3, r5
 8011fc6:	18e2      	adds	r2, r4, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011fd2:	2300      	movs	r3, #0
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3710      	adds	r7, #16
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bdb0      	pop	{r4, r5, r7, pc}
 8011fdc:	08019320 	.word	0x08019320
 8011fe0:	0801995c 	.word	0x0801995c
 8011fe4:	08019374 	.word	0x08019374

08011fe8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d106      	bne.n	8012004 <tcp_rexmit_rto_commit+0x1c>
 8011ff6:	4b0d      	ldr	r3, [pc, #52]	; (801202c <tcp_rexmit_rto_commit+0x44>)
 8011ff8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011ffc:	490c      	ldr	r1, [pc, #48]	; (8012030 <tcp_rexmit_rto_commit+0x48>)
 8011ffe:	480d      	ldr	r0, [pc, #52]	; (8012034 <tcp_rexmit_rto_commit+0x4c>)
 8012000:	f003 feac 	bl	8015d5c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801200a:	2bff      	cmp	r3, #255	; 0xff
 801200c:	d007      	beq.n	801201e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012014:	3301      	adds	r3, #1
 8012016:	b2da      	uxtb	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f7ff fc80 	bl	8011924 <tcp_output>
}
 8012024:	bf00      	nop
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	08019320 	.word	0x08019320
 8012030:	08019980 	.word	0x08019980
 8012034:	08019374 	.word	0x08019374

08012038 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d106      	bne.n	8012054 <tcp_rexmit_rto+0x1c>
 8012046:	4b0a      	ldr	r3, [pc, #40]	; (8012070 <tcp_rexmit_rto+0x38>)
 8012048:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801204c:	4909      	ldr	r1, [pc, #36]	; (8012074 <tcp_rexmit_rto+0x3c>)
 801204e:	480a      	ldr	r0, [pc, #40]	; (8012078 <tcp_rexmit_rto+0x40>)
 8012050:	f003 fe84 	bl	8015d5c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff ff57 	bl	8011f08 <tcp_rexmit_rto_prepare>
 801205a:	4603      	mov	r3, r0
 801205c:	2b00      	cmp	r3, #0
 801205e:	d102      	bne.n	8012066 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f7ff ffc1 	bl	8011fe8 <tcp_rexmit_rto_commit>
  }
}
 8012066:	bf00      	nop
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	08019320 	.word	0x08019320
 8012074:	080199a4 	.word	0x080199a4
 8012078:	08019374 	.word	0x08019374

0801207c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801207c:	b590      	push	{r4, r7, lr}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d106      	bne.n	8012098 <tcp_rexmit+0x1c>
 801208a:	4b2f      	ldr	r3, [pc, #188]	; (8012148 <tcp_rexmit+0xcc>)
 801208c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012090:	492e      	ldr	r1, [pc, #184]	; (801214c <tcp_rexmit+0xd0>)
 8012092:	482f      	ldr	r0, [pc, #188]	; (8012150 <tcp_rexmit+0xd4>)
 8012094:	f003 fe62 	bl	8015d5c <iprintf>

  if (pcb->unacked == NULL) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801209c:	2b00      	cmp	r3, #0
 801209e:	d102      	bne.n	80120a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80120a0:	f06f 0305 	mvn.w	r3, #5
 80120a4:	e04c      	b.n	8012140 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80120ac:	68b8      	ldr	r0, [r7, #8]
 80120ae:	f7ff fe2d 	bl	8011d0c <tcp_output_segment_busy>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d002      	beq.n	80120be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80120b8:	f06f 0305 	mvn.w	r3, #5
 80120bc:	e040      	b.n	8012140 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	336c      	adds	r3, #108	; 0x6c
 80120ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120cc:	e002      	b.n	80120d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d011      	beq.n	8012100 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7f8 fce0 	bl	800aaaa <lwip_htonl>
 80120ea:	4604      	mov	r4, r0
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f8 fcd9 	bl	800aaaa <lwip_htonl>
 80120f8:	4603      	mov	r3, r0
 80120fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	dbe6      	blt.n	80120ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d103      	bne.n	801211e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012124:	2bff      	cmp	r3, #255	; 0xff
 8012126:	d007      	beq.n	8012138 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801212e:	3301      	adds	r3, #1
 8012130:	b2da      	uxtb	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3714      	adds	r7, #20
 8012144:	46bd      	mov	sp, r7
 8012146:	bd90      	pop	{r4, r7, pc}
 8012148:	08019320 	.word	0x08019320
 801214c:	080199c0 	.word	0x080199c0
 8012150:	08019374 	.word	0x08019374

08012154 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d106      	bne.n	8012170 <tcp_rexmit_fast+0x1c>
 8012162:	4b2a      	ldr	r3, [pc, #168]	; (801220c <tcp_rexmit_fast+0xb8>)
 8012164:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012168:	4929      	ldr	r1, [pc, #164]	; (8012210 <tcp_rexmit_fast+0xbc>)
 801216a:	482a      	ldr	r0, [pc, #168]	; (8012214 <tcp_rexmit_fast+0xc0>)
 801216c:	f003 fdf6 	bl	8015d5c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012174:	2b00      	cmp	r3, #0
 8012176:	d044      	beq.n	8012202 <tcp_rexmit_fast+0xae>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	8b5b      	ldrh	r3, [r3, #26]
 801217c:	f003 0304 	and.w	r3, r3, #4
 8012180:	2b00      	cmp	r3, #0
 8012182:	d13e      	bne.n	8012202 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff ff79 	bl	801207c <tcp_rexmit>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d138      	bne.n	8012202 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801219c:	4293      	cmp	r3, r2
 801219e:	bf28      	it	cs
 80121a0:	4613      	movcs	r3, r2
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	0fda      	lsrs	r2, r3, #31
 80121a6:	4413      	add	r3, r2
 80121a8:	105b      	asrs	r3, r3, #1
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121b8:	461a      	mov	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d206      	bcs.n	80121d2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121c8:	005b      	lsls	r3, r3, #1
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121dc:	4619      	mov	r1, r3
 80121de:	0049      	lsls	r1, r1, #1
 80121e0:	440b      	add	r3, r1
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	4413      	add	r3, r2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	f043 0304 	orr.w	r3, r3, #4
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2200      	movs	r2, #0
 8012200:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012202:	bf00      	nop
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	08019320 	.word	0x08019320
 8012210:	080199d8 	.word	0x080199d8
 8012214:	08019374 	.word	0x08019374

08012218 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	607b      	str	r3, [r7, #4]
 8012222:	460b      	mov	r3, r1
 8012224:	817b      	strh	r3, [r7, #10]
 8012226:	4613      	mov	r3, r2
 8012228:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801222a:	897a      	ldrh	r2, [r7, #10]
 801222c:	893b      	ldrh	r3, [r7, #8]
 801222e:	4413      	add	r3, r2
 8012230:	b29b      	uxth	r3, r3
 8012232:	3314      	adds	r3, #20
 8012234:	b29b      	uxth	r3, r3
 8012236:	f44f 7220 	mov.w	r2, #640	; 0x280
 801223a:	4619      	mov	r1, r3
 801223c:	2022      	movs	r0, #34	; 0x22
 801223e:	f7f9 fce7 	bl	800bc10 <pbuf_alloc>
 8012242:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d04d      	beq.n	80122e6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801224a:	897b      	ldrh	r3, [r7, #10]
 801224c:	3313      	adds	r3, #19
 801224e:	697a      	ldr	r2, [r7, #20]
 8012250:	8952      	ldrh	r2, [r2, #10]
 8012252:	4293      	cmp	r3, r2
 8012254:	db06      	blt.n	8012264 <tcp_output_alloc_header_common+0x4c>
 8012256:	4b26      	ldr	r3, [pc, #152]	; (80122f0 <tcp_output_alloc_header_common+0xd8>)
 8012258:	f240 7223 	movw	r2, #1827	; 0x723
 801225c:	4925      	ldr	r1, [pc, #148]	; (80122f4 <tcp_output_alloc_header_common+0xdc>)
 801225e:	4826      	ldr	r0, [pc, #152]	; (80122f8 <tcp_output_alloc_header_common+0xe0>)
 8012260:	f003 fd7c 	bl	8015d5c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801226a:	8c3b      	ldrh	r3, [r7, #32]
 801226c:	4618      	mov	r0, r3
 801226e:	f7f8 fc07 	bl	800aa80 <lwip_htons>
 8012272:	4603      	mov	r3, r0
 8012274:	461a      	mov	r2, r3
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801227a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801227c:	4618      	mov	r0, r3
 801227e:	f7f8 fbff 	bl	800aa80 <lwip_htons>
 8012282:	4603      	mov	r3, r0
 8012284:	461a      	mov	r2, r3
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f7f8 fc0a 	bl	800aaaa <lwip_htonl>
 8012296:	4602      	mov	r2, r0
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801229c:	897b      	ldrh	r3, [r7, #10]
 801229e:	089b      	lsrs	r3, r3, #2
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	3305      	adds	r3, #5
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	031b      	lsls	r3, r3, #12
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	4313      	orrs	r3, r2
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f8 fbe3 	bl	800aa80 <lwip_htons>
 80122ba:	4603      	mov	r3, r0
 80122bc:	461a      	mov	r2, r3
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80122c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7f8 fbdb 	bl	800aa80 <lwip_htons>
 80122ca:	4603      	mov	r3, r0
 80122cc:	461a      	mov	r2, r3
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	2200      	movs	r2, #0
 80122d6:	741a      	strb	r2, [r3, #16]
 80122d8:	2200      	movs	r2, #0
 80122da:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	2200      	movs	r2, #0
 80122e0:	749a      	strb	r2, [r3, #18]
 80122e2:	2200      	movs	r2, #0
 80122e4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80122e6:	697b      	ldr	r3, [r7, #20]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3718      	adds	r7, #24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	08019320 	.word	0x08019320
 80122f4:	080199f8 	.word	0x080199f8
 80122f8:	08019374 	.word	0x08019374

080122fc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80122fc:	b5b0      	push	{r4, r5, r7, lr}
 80122fe:	b08a      	sub	sp, #40	; 0x28
 8012300:	af04      	add	r7, sp, #16
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	607b      	str	r3, [r7, #4]
 8012306:	460b      	mov	r3, r1
 8012308:	817b      	strh	r3, [r7, #10]
 801230a:	4613      	mov	r3, r2
 801230c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d106      	bne.n	8012322 <tcp_output_alloc_header+0x26>
 8012314:	4b15      	ldr	r3, [pc, #84]	; (801236c <tcp_output_alloc_header+0x70>)
 8012316:	f240 7242 	movw	r2, #1858	; 0x742
 801231a:	4915      	ldr	r1, [pc, #84]	; (8012370 <tcp_output_alloc_header+0x74>)
 801231c:	4815      	ldr	r0, [pc, #84]	; (8012374 <tcp_output_alloc_header+0x78>)
 801231e:	f003 fd1d 	bl	8015d5c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	8adb      	ldrh	r3, [r3, #22]
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	8b12      	ldrh	r2, [r2, #24]
 801232e:	68f9      	ldr	r1, [r7, #12]
 8012330:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012332:	893d      	ldrh	r5, [r7, #8]
 8012334:	897c      	ldrh	r4, [r7, #10]
 8012336:	9103      	str	r1, [sp, #12]
 8012338:	2110      	movs	r1, #16
 801233a:	9102      	str	r1, [sp, #8]
 801233c:	9201      	str	r2, [sp, #4]
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	462a      	mov	r2, r5
 8012344:	4621      	mov	r1, r4
 8012346:	f7ff ff67 	bl	8012218 <tcp_output_alloc_header_common>
 801234a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d006      	beq.n	8012360 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801235a:	441a      	add	r2, r3
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012360:	697b      	ldr	r3, [r7, #20]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3718      	adds	r7, #24
 8012366:	46bd      	mov	sp, r7
 8012368:	bdb0      	pop	{r4, r5, r7, pc}
 801236a:	bf00      	nop
 801236c:	08019320 	.word	0x08019320
 8012370:	08019a28 	.word	0x08019a28
 8012374:	08019374 	.word	0x08019374

08012378 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b088      	sub	sp, #32
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	4611      	mov	r1, r2
 8012384:	461a      	mov	r2, r3
 8012386:	460b      	mov	r3, r1
 8012388:	71fb      	strb	r3, [r7, #7]
 801238a:	4613      	mov	r3, r2
 801238c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d106      	bne.n	80123a6 <tcp_output_fill_options+0x2e>
 8012398:	4b13      	ldr	r3, [pc, #76]	; (80123e8 <tcp_output_fill_options+0x70>)
 801239a:	f240 7256 	movw	r2, #1878	; 0x756
 801239e:	4913      	ldr	r1, [pc, #76]	; (80123ec <tcp_output_fill_options+0x74>)
 80123a0:	4813      	ldr	r0, [pc, #76]	; (80123f0 <tcp_output_fill_options+0x78>)
 80123a2:	f003 fcdb 	bl	8015d5c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	3314      	adds	r3, #20
 80123b0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	f103 0214 	add.w	r2, r3, #20
 80123b8:	8bfb      	ldrh	r3, [r7, #30]
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	4619      	mov	r1, r3
 80123be:	79fb      	ldrb	r3, [r7, #7]
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	f003 0304 	and.w	r3, r3, #4
 80123c6:	440b      	add	r3, r1
 80123c8:	4413      	add	r3, r2
 80123ca:	697a      	ldr	r2, [r7, #20]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d006      	beq.n	80123de <tcp_output_fill_options+0x66>
 80123d0:	4b05      	ldr	r3, [pc, #20]	; (80123e8 <tcp_output_fill_options+0x70>)
 80123d2:	f240 7275 	movw	r2, #1909	; 0x775
 80123d6:	4907      	ldr	r1, [pc, #28]	; (80123f4 <tcp_output_fill_options+0x7c>)
 80123d8:	4805      	ldr	r0, [pc, #20]	; (80123f0 <tcp_output_fill_options+0x78>)
 80123da:	f003 fcbf 	bl	8015d5c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80123de:	bf00      	nop
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	08019320 	.word	0x08019320
 80123ec:	08019a50 	.word	0x08019a50
 80123f0:	08019374 	.word	0x08019374
 80123f4:	08019948 	.word	0x08019948

080123f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b08a      	sub	sp, #40	; 0x28
 80123fc:	af04      	add	r7, sp, #16
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	607a      	str	r2, [r7, #4]
 8012404:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d106      	bne.n	801241a <tcp_output_control_segment+0x22>
 801240c:	4b1c      	ldr	r3, [pc, #112]	; (8012480 <tcp_output_control_segment+0x88>)
 801240e:	f240 7287 	movw	r2, #1927	; 0x787
 8012412:	491c      	ldr	r1, [pc, #112]	; (8012484 <tcp_output_control_segment+0x8c>)
 8012414:	481c      	ldr	r0, [pc, #112]	; (8012488 <tcp_output_control_segment+0x90>)
 8012416:	f003 fca1 	bl	8015d5c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801241a:	683a      	ldr	r2, [r7, #0]
 801241c:	6879      	ldr	r1, [r7, #4]
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f7fe fae8 	bl	80109f4 <tcp_route>
 8012424:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d102      	bne.n	8012432 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801242c:	23fc      	movs	r3, #252	; 0xfc
 801242e:	75fb      	strb	r3, [r7, #23]
 8012430:	e01c      	b.n	801246c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d006      	beq.n	8012446 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	7adb      	ldrb	r3, [r3, #11]
 801243c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	7a9b      	ldrb	r3, [r3, #10]
 8012442:	757b      	strb	r3, [r7, #21]
 8012444:	e003      	b.n	801244e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012446:	23ff      	movs	r3, #255	; 0xff
 8012448:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801244e:	7dba      	ldrb	r2, [r7, #22]
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	9302      	str	r3, [sp, #8]
 8012454:	2306      	movs	r3, #6
 8012456:	9301      	str	r3, [sp, #4]
 8012458:	7d7b      	ldrb	r3, [r7, #21]
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	4613      	mov	r3, r2
 801245e:	683a      	ldr	r2, [r7, #0]
 8012460:	6879      	ldr	r1, [r7, #4]
 8012462:	68b8      	ldr	r0, [r7, #8]
 8012464:	f002 f8e6 	bl	8014634 <ip4_output_if>
 8012468:	4603      	mov	r3, r0
 801246a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801246c:	68b8      	ldr	r0, [r7, #8]
 801246e:	f7f9 feb3 	bl	800c1d8 <pbuf_free>
  return err;
 8012472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3718      	adds	r7, #24
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	08019320 	.word	0x08019320
 8012484:	08019a78 	.word	0x08019a78
 8012488:	08019374 	.word	0x08019374

0801248c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801248c:	b590      	push	{r4, r7, lr}
 801248e:	b08b      	sub	sp, #44	; 0x2c
 8012490:	af04      	add	r7, sp, #16
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	607a      	str	r2, [r7, #4]
 8012498:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <tcp_rst+0x22>
 80124a0:	4b1f      	ldr	r3, [pc, #124]	; (8012520 <tcp_rst+0x94>)
 80124a2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80124a6:	491f      	ldr	r1, [pc, #124]	; (8012524 <tcp_rst+0x98>)
 80124a8:	481f      	ldr	r0, [pc, #124]	; (8012528 <tcp_rst+0x9c>)
 80124aa:	f003 fc57 	bl	8015d5c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80124ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d106      	bne.n	80124c2 <tcp_rst+0x36>
 80124b4:	4b1a      	ldr	r3, [pc, #104]	; (8012520 <tcp_rst+0x94>)
 80124b6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80124ba:	491c      	ldr	r1, [pc, #112]	; (801252c <tcp_rst+0xa0>)
 80124bc:	481a      	ldr	r0, [pc, #104]	; (8012528 <tcp_rst+0x9c>)
 80124be:	f003 fc4d 	bl	8015d5c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124c2:	2300      	movs	r3, #0
 80124c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80124c6:	f246 0308 	movw	r3, #24584	; 0x6008
 80124ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80124cc:	7dfb      	ldrb	r3, [r7, #23]
 80124ce:	b29c      	uxth	r4, r3
 80124d0:	68b8      	ldr	r0, [r7, #8]
 80124d2:	f7f8 faea 	bl	800aaaa <lwip_htonl>
 80124d6:	4602      	mov	r2, r0
 80124d8:	8abb      	ldrh	r3, [r7, #20]
 80124da:	9303      	str	r3, [sp, #12]
 80124dc:	2314      	movs	r3, #20
 80124de:	9302      	str	r3, [sp, #8]
 80124e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	4613      	mov	r3, r2
 80124ea:	2200      	movs	r2, #0
 80124ec:	4621      	mov	r1, r4
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff fe92 	bl	8012218 <tcp_output_alloc_header_common>
 80124f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d00c      	beq.n	8012516 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80124fc:	7dfb      	ldrb	r3, [r7, #23]
 80124fe:	2200      	movs	r2, #0
 8012500:	6939      	ldr	r1, [r7, #16]
 8012502:	68f8      	ldr	r0, [r7, #12]
 8012504:	f7ff ff38 	bl	8012378 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	6939      	ldr	r1, [r7, #16]
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff ff72 	bl	80123f8 <tcp_output_control_segment>
 8012514:	e000      	b.n	8012518 <tcp_rst+0x8c>
    return;
 8012516:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012518:	371c      	adds	r7, #28
 801251a:	46bd      	mov	sp, r7
 801251c:	bd90      	pop	{r4, r7, pc}
 801251e:	bf00      	nop
 8012520:	08019320 	.word	0x08019320
 8012524:	08019aa4 	.word	0x08019aa4
 8012528:	08019374 	.word	0x08019374
 801252c:	08019ac0 	.word	0x08019ac0

08012530 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012530:	b590      	push	{r4, r7, lr}
 8012532:	b087      	sub	sp, #28
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012538:	2300      	movs	r3, #0
 801253a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d106      	bne.n	8012554 <tcp_send_empty_ack+0x24>
 8012546:	4b28      	ldr	r3, [pc, #160]	; (80125e8 <tcp_send_empty_ack+0xb8>)
 8012548:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801254c:	4927      	ldr	r1, [pc, #156]	; (80125ec <tcp_send_empty_ack+0xbc>)
 801254e:	4828      	ldr	r0, [pc, #160]	; (80125f0 <tcp_send_empty_ack+0xc0>)
 8012550:	f003 fc04 	bl	8015d5c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012554:	7dfb      	ldrb	r3, [r7, #23]
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	b2db      	uxtb	r3, r3
 801255a:	f003 0304 	and.w	r3, r3, #4
 801255e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012560:	7d7b      	ldrb	r3, [r7, #21]
 8012562:	b29c      	uxth	r4, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012568:	4618      	mov	r0, r3
 801256a:	f7f8 fa9e 	bl	800aaaa <lwip_htonl>
 801256e:	4603      	mov	r3, r0
 8012570:	2200      	movs	r2, #0
 8012572:	4621      	mov	r1, r4
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff fec1 	bl	80122fc <tcp_output_alloc_header>
 801257a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d109      	bne.n	8012596 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	8b5b      	ldrh	r3, [r3, #26]
 8012586:	f043 0303 	orr.w	r3, r3, #3
 801258a:	b29a      	uxth	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012590:	f06f 0301 	mvn.w	r3, #1
 8012594:	e023      	b.n	80125de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012596:	7dbb      	ldrb	r3, [r7, #22]
 8012598:	7dfa      	ldrb	r2, [r7, #23]
 801259a:	6939      	ldr	r1, [r7, #16]
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff feeb 	bl	8012378 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	3304      	adds	r3, #4
 80125a8:	6939      	ldr	r1, [r7, #16]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7ff ff24 	bl	80123f8 <tcp_output_control_segment>
 80125b0:	4603      	mov	r3, r0
 80125b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80125b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d007      	beq.n	80125cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	8b5b      	ldrh	r3, [r3, #26]
 80125c0:	f043 0303 	orr.w	r3, r3, #3
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	835a      	strh	r2, [r3, #26]
 80125ca:	e006      	b.n	80125da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	8b5b      	ldrh	r3, [r3, #26]
 80125d0:	f023 0303 	bic.w	r3, r3, #3
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80125da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	371c      	adds	r7, #28
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd90      	pop	{r4, r7, pc}
 80125e6:	bf00      	nop
 80125e8:	08019320 	.word	0x08019320
 80125ec:	08019adc 	.word	0x08019adc
 80125f0:	08019374 	.word	0x08019374

080125f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125fc:	2300      	movs	r3, #0
 80125fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d106      	bne.n	8012614 <tcp_keepalive+0x20>
 8012606:	4b18      	ldr	r3, [pc, #96]	; (8012668 <tcp_keepalive+0x74>)
 8012608:	f640 0224 	movw	r2, #2084	; 0x824
 801260c:	4917      	ldr	r1, [pc, #92]	; (801266c <tcp_keepalive+0x78>)
 801260e:	4818      	ldr	r0, [pc, #96]	; (8012670 <tcp_keepalive+0x7c>)
 8012610:	f003 fba4 	bl	8015d5c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012614:	7dfb      	ldrb	r3, [r7, #23]
 8012616:	b29c      	uxth	r4, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801261c:	3b01      	subs	r3, #1
 801261e:	4618      	mov	r0, r3
 8012620:	f7f8 fa43 	bl	800aaaa <lwip_htonl>
 8012624:	4603      	mov	r3, r0
 8012626:	2200      	movs	r2, #0
 8012628:	4621      	mov	r1, r4
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff fe66 	bl	80122fc <tcp_output_alloc_header>
 8012630:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801263c:	e010      	b.n	8012660 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801263e:	7dfb      	ldrb	r3, [r7, #23]
 8012640:	2200      	movs	r2, #0
 8012642:	6939      	ldr	r1, [r7, #16]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff fe97 	bl	8012378 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	3304      	adds	r3, #4
 8012650:	6939      	ldr	r1, [r7, #16]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7ff fed0 	bl	80123f8 <tcp_output_control_segment>
 8012658:	4603      	mov	r3, r0
 801265a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801265c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012660:	4618      	mov	r0, r3
 8012662:	371c      	adds	r7, #28
 8012664:	46bd      	mov	sp, r7
 8012666:	bd90      	pop	{r4, r7, pc}
 8012668:	08019320 	.word	0x08019320
 801266c:	08019afc 	.word	0x08019afc
 8012670:	08019374 	.word	0x08019374

08012674 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012674:	b590      	push	{r4, r7, lr}
 8012676:	b08b      	sub	sp, #44	; 0x2c
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801267c:	2300      	movs	r3, #0
 801267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d106      	bne.n	8012696 <tcp_zero_window_probe+0x22>
 8012688:	4b4c      	ldr	r3, [pc, #304]	; (80127bc <tcp_zero_window_probe+0x148>)
 801268a:	f640 024f 	movw	r2, #2127	; 0x84f
 801268e:	494c      	ldr	r1, [pc, #304]	; (80127c0 <tcp_zero_window_probe+0x14c>)
 8012690:	484c      	ldr	r0, [pc, #304]	; (80127c4 <tcp_zero_window_probe+0x150>)
 8012692:	f003 fb63 	bl	8015d5c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801269a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	e086      	b.n	80127b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126ac:	2bff      	cmp	r3, #255	; 0xff
 80126ae:	d007      	beq.n	80126c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126b6:	3301      	adds	r3, #1
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	899b      	ldrh	r3, [r3, #12]
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f8 f9d9 	bl	800aa80 <lwip_htons>
 80126ce:	4603      	mov	r3, r0
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	f003 0301 	and.w	r3, r3, #1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d005      	beq.n	80126e6 <tcp_zero_window_probe+0x72>
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	891b      	ldrh	r3, [r3, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d101      	bne.n	80126e6 <tcp_zero_window_probe+0x72>
 80126e2:	2301      	movs	r3, #1
 80126e4:	e000      	b.n	80126e8 <tcp_zero_window_probe+0x74>
 80126e6:	2300      	movs	r3, #0
 80126e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80126ea:	7ffb      	ldrb	r3, [r7, #31]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	bf0c      	ite	eq
 80126f0:	2301      	moveq	r3, #1
 80126f2:	2300      	movne	r3, #0
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80126f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126fc:	b299      	uxth	r1, r3
 80126fe:	6a3b      	ldr	r3, [r7, #32]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	8bba      	ldrh	r2, [r7, #28]
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff fdf8 	bl	80122fc <tcp_output_alloc_header>
 801270c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d102      	bne.n	801271a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012718:	e04c      	b.n	80127b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012720:	7ffb      	ldrb	r3, [r7, #31]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d011      	beq.n	801274a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	899b      	ldrh	r3, [r3, #12]
 801272a:	b29b      	uxth	r3, r3
 801272c:	b21b      	sxth	r3, r3
 801272e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012732:	b21c      	sxth	r4, r3
 8012734:	2011      	movs	r0, #17
 8012736:	f7f8 f9a3 	bl	800aa80 <lwip_htons>
 801273a:	4603      	mov	r3, r0
 801273c:	b21b      	sxth	r3, r3
 801273e:	4323      	orrs	r3, r4
 8012740:	b21b      	sxth	r3, r3
 8012742:	b29a      	uxth	r2, r3
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	819a      	strh	r2, [r3, #12]
 8012748:	e010      	b.n	801276c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	3314      	adds	r3, #20
 8012750:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012752:	6a3b      	ldr	r3, [r7, #32]
 8012754:	6858      	ldr	r0, [r3, #4]
 8012756:	6a3b      	ldr	r3, [r7, #32]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	891a      	ldrh	r2, [r3, #8]
 801275c:	6a3b      	ldr	r3, [r7, #32]
 801275e:	891b      	ldrh	r3, [r3, #8]
 8012760:	1ad3      	subs	r3, r2, r3
 8012762:	b29b      	uxth	r3, r3
 8012764:	2201      	movs	r2, #1
 8012766:	6939      	ldr	r1, [r7, #16]
 8012768:	f7f9 ff2c 	bl	800c5c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	4618      	mov	r0, r3
 8012774:	f7f8 f999 	bl	800aaaa <lwip_htonl>
 8012778:	4603      	mov	r3, r0
 801277a:	3301      	adds	r3, #1
 801277c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	da02      	bge.n	8012790 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	68fa      	ldr	r2, [r7, #12]
 801278e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012794:	2200      	movs	r2, #0
 8012796:	69b9      	ldr	r1, [r7, #24]
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7ff fded 	bl	8012378 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	3304      	adds	r3, #4
 80127a4:	69b9      	ldr	r1, [r7, #24]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff fe26 	bl	80123f8 <tcp_output_control_segment>
 80127ac:	4603      	mov	r3, r0
 80127ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	372c      	adds	r7, #44	; 0x2c
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd90      	pop	{r4, r7, pc}
 80127bc:	08019320 	.word	0x08019320
 80127c0:	08019b18 	.word	0x08019b18
 80127c4:	08019374 	.word	0x08019374

080127c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80127d0:	f7f9 ffe6 	bl	800c7a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80127d4:	4b0a      	ldr	r3, [pc, #40]	; (8012800 <tcpip_tcp_timer+0x38>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d103      	bne.n	80127e4 <tcpip_tcp_timer+0x1c>
 80127dc:	4b09      	ldr	r3, [pc, #36]	; (8012804 <tcpip_tcp_timer+0x3c>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d005      	beq.n	80127f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80127e4:	2200      	movs	r2, #0
 80127e6:	4908      	ldr	r1, [pc, #32]	; (8012808 <tcpip_tcp_timer+0x40>)
 80127e8:	20fa      	movs	r0, #250	; 0xfa
 80127ea:	f000 f8f3 	bl	80129d4 <sys_timeout>
 80127ee:	e003      	b.n	80127f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80127f0:	4b06      	ldr	r3, [pc, #24]	; (801280c <tcpip_tcp_timer+0x44>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	601a      	str	r2, [r3, #0]
  }
}
 80127f6:	bf00      	nop
 80127f8:	bf00      	nop
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	2000d85c 	.word	0x2000d85c
 8012804:	2000d86c 	.word	0x2000d86c
 8012808:	080127c9 	.word	0x080127c9
 801280c:	20004b18 	.word	0x20004b18

08012810 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012814:	4b0a      	ldr	r3, [pc, #40]	; (8012840 <tcp_timer_needed+0x30>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10f      	bne.n	801283c <tcp_timer_needed+0x2c>
 801281c:	4b09      	ldr	r3, [pc, #36]	; (8012844 <tcp_timer_needed+0x34>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d103      	bne.n	801282c <tcp_timer_needed+0x1c>
 8012824:	4b08      	ldr	r3, [pc, #32]	; (8012848 <tcp_timer_needed+0x38>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801282c:	4b04      	ldr	r3, [pc, #16]	; (8012840 <tcp_timer_needed+0x30>)
 801282e:	2201      	movs	r2, #1
 8012830:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012832:	2200      	movs	r2, #0
 8012834:	4905      	ldr	r1, [pc, #20]	; (801284c <tcp_timer_needed+0x3c>)
 8012836:	20fa      	movs	r0, #250	; 0xfa
 8012838:	f000 f8cc 	bl	80129d4 <sys_timeout>
  }
}
 801283c:	bf00      	nop
 801283e:	bd80      	pop	{r7, pc}
 8012840:	20004b18 	.word	0x20004b18
 8012844:	2000d85c 	.word	0x2000d85c
 8012848:	2000d86c 	.word	0x2000d86c
 801284c:	080127c9 	.word	0x080127c9

08012850 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801285c:	200a      	movs	r0, #10
 801285e:	f7f8 fdc5 	bl	800b3ec <memp_malloc>
 8012862:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d109      	bne.n	801287e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d151      	bne.n	8012914 <sys_timeout_abs+0xc4>
 8012870:	4b2a      	ldr	r3, [pc, #168]	; (801291c <sys_timeout_abs+0xcc>)
 8012872:	22be      	movs	r2, #190	; 0xbe
 8012874:	492a      	ldr	r1, [pc, #168]	; (8012920 <sys_timeout_abs+0xd0>)
 8012876:	482b      	ldr	r0, [pc, #172]	; (8012924 <sys_timeout_abs+0xd4>)
 8012878:	f003 fa70 	bl	8015d5c <iprintf>
    return;
 801287c:	e04a      	b.n	8012914 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	2200      	movs	r2, #0
 8012882:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012896:	4b24      	ldr	r3, [pc, #144]	; (8012928 <sys_timeout_abs+0xd8>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d103      	bne.n	80128a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801289e:	4a22      	ldr	r2, [pc, #136]	; (8012928 <sys_timeout_abs+0xd8>)
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	6013      	str	r3, [r2, #0]
    return;
 80128a4:	e037      	b.n	8012916 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	685a      	ldr	r2, [r3, #4]
 80128aa:	4b1f      	ldr	r3, [pc, #124]	; (8012928 <sys_timeout_abs+0xd8>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	0fdb      	lsrs	r3, r3, #31
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d007      	beq.n	80128ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80128be:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <sys_timeout_abs+0xd8>)
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80128c6:	4a18      	ldr	r2, [pc, #96]	; (8012928 <sys_timeout_abs+0xd8>)
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	e023      	b.n	8012916 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80128ce:	4b16      	ldr	r3, [pc, #88]	; (8012928 <sys_timeout_abs+0xd8>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	617b      	str	r3, [r7, #20]
 80128d4:	e01a      	b.n	801290c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00b      	beq.n	80128f6 <sys_timeout_abs+0xa6>
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	685a      	ldr	r2, [r3, #4]
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	0fdb      	lsrs	r3, r3, #31
 80128ec:	f003 0301 	and.w	r3, r3, #1
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d007      	beq.n	8012906 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	693a      	ldr	r2, [r7, #16]
 8012902:	601a      	str	r2, [r3, #0]
        break;
 8012904:	e007      	b.n	8012916 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	617b      	str	r3, [r7, #20]
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1e1      	bne.n	80128d6 <sys_timeout_abs+0x86>
 8012912:	e000      	b.n	8012916 <sys_timeout_abs+0xc6>
    return;
 8012914:	bf00      	nop
      }
    }
  }
}
 8012916:	3718      	adds	r7, #24
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	08019b3c 	.word	0x08019b3c
 8012920:	08019b70 	.word	0x08019b70
 8012924:	08019bb0 	.word	0x08019bb0
 8012928:	20004b10 	.word	0x20004b10

0801292c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	4798      	blx	r3

  now = sys_now();
 801293e:	f7f1 fe45 	bl	80045cc <sys_now>
 8012942:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	4b0f      	ldr	r3, [pc, #60]	; (8012988 <lwip_cyclic_timer+0x5c>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4413      	add	r3, r2
 801294e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	0fdb      	lsrs	r3, r3, #31
 8012958:	f003 0301 	and.w	r3, r3, #1
 801295c:	b2db      	uxtb	r3, r3
 801295e:	2b00      	cmp	r3, #0
 8012960:	d009      	beq.n	8012976 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	4413      	add	r3, r2
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	4907      	ldr	r1, [pc, #28]	; (801298c <lwip_cyclic_timer+0x60>)
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff ff6e 	bl	8012850 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012974:	e004      	b.n	8012980 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	4904      	ldr	r1, [pc, #16]	; (801298c <lwip_cyclic_timer+0x60>)
 801297a:	68f8      	ldr	r0, [r7, #12]
 801297c:	f7ff ff68 	bl	8012850 <sys_timeout_abs>
}
 8012980:	bf00      	nop
 8012982:	3718      	adds	r7, #24
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	20004b14 	.word	0x20004b14
 801298c:	0801292d 	.word	0x0801292d

08012990 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012996:	2301      	movs	r3, #1
 8012998:	607b      	str	r3, [r7, #4]
 801299a:	e00e      	b.n	80129ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801299c:	4a0b      	ldr	r2, [pc, #44]	; (80129cc <sys_timeouts_init+0x3c>)
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	4a08      	ldr	r2, [pc, #32]	; (80129cc <sys_timeouts_init+0x3c>)
 80129aa:	4413      	add	r3, r2
 80129ac:	461a      	mov	r2, r3
 80129ae:	4908      	ldr	r1, [pc, #32]	; (80129d0 <sys_timeouts_init+0x40>)
 80129b0:	f000 f810 	bl	80129d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	3301      	adds	r3, #1
 80129b8:	607b      	str	r3, [r7, #4]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b02      	cmp	r3, #2
 80129be:	d9ed      	bls.n	801299c <sys_timeouts_init+0xc>
  }
}
 80129c0:	bf00      	nop
 80129c2:	bf00      	nop
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	0801a7a8 	.word	0x0801a7a8
 80129d0:	0801292d 	.word	0x0801292d

080129d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b086      	sub	sp, #24
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129e6:	d306      	bcc.n	80129f6 <sys_timeout+0x22>
 80129e8:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <sys_timeout+0x40>)
 80129ea:	f240 1229 	movw	r2, #297	; 0x129
 80129ee:	490a      	ldr	r1, [pc, #40]	; (8012a18 <sys_timeout+0x44>)
 80129f0:	480a      	ldr	r0, [pc, #40]	; (8012a1c <sys_timeout+0x48>)
 80129f2:	f003 f9b3 	bl	8015d5c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80129f6:	f7f1 fde9 	bl	80045cc <sys_now>
 80129fa:	4602      	mov	r2, r0
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	4413      	add	r3, r2
 8012a00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	68b9      	ldr	r1, [r7, #8]
 8012a06:	6978      	ldr	r0, [r7, #20]
 8012a08:	f7ff ff22 	bl	8012850 <sys_timeout_abs>
#endif
}
 8012a0c:	bf00      	nop
 8012a0e:	3718      	adds	r7, #24
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	08019b3c 	.word	0x08019b3c
 8012a18:	08019bd8 	.word	0x08019bd8
 8012a1c:	08019bb0 	.word	0x08019bb0

08012a20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012a26:	f7f1 fdd1 	bl	80045cc <sys_now>
 8012a2a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012a2c:	4b17      	ldr	r3, [pc, #92]	; (8012a8c <sys_check_timeouts+0x6c>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d022      	beq.n	8012a7e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	1ad3      	subs	r3, r2, r3
 8012a40:	0fdb      	lsrs	r3, r3, #31
 8012a42:	f003 0301 	and.w	r3, r3, #1
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d11a      	bne.n	8012a82 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012a4c:	68bb      	ldr	r3, [r7, #8]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4a0e      	ldr	r2, [pc, #56]	; (8012a8c <sys_check_timeouts+0x6c>)
 8012a52:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	689b      	ldr	r3, [r3, #8]
 8012a58:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	4a0a      	ldr	r2, [pc, #40]	; (8012a90 <sys_check_timeouts+0x70>)
 8012a66:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012a68:	68b9      	ldr	r1, [r7, #8]
 8012a6a:	200a      	movs	r0, #10
 8012a6c:	f7f8 fd10 	bl	800b490 <memp_free>
    if (handler != NULL) {
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d0da      	beq.n	8012a2c <sys_check_timeouts+0xc>
      handler(arg);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	6838      	ldr	r0, [r7, #0]
 8012a7a:	4798      	blx	r3
  do {
 8012a7c:	e7d6      	b.n	8012a2c <sys_check_timeouts+0xc>
      return;
 8012a7e:	bf00      	nop
 8012a80:	e000      	b.n	8012a84 <sys_check_timeouts+0x64>
      return;
 8012a82:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012a84:	3710      	adds	r7, #16
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	20004b10 	.word	0x20004b10
 8012a90:	20004b14 	.word	0x20004b14

08012a94 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b082      	sub	sp, #8
 8012a98:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012a9a:	4b16      	ldr	r3, [pc, #88]	; (8012af4 <sys_timeouts_sleeptime+0x60>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d102      	bne.n	8012aa8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012aa6:	e020      	b.n	8012aea <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012aa8:	f7f1 fd90 	bl	80045cc <sys_now>
 8012aac:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012aae:	4b11      	ldr	r3, [pc, #68]	; (8012af4 <sys_timeouts_sleeptime+0x60>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	685a      	ldr	r2, [r3, #4]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	1ad3      	subs	r3, r2, r3
 8012ab8:	0fdb      	lsrs	r3, r3, #31
 8012aba:	f003 0301 	and.w	r3, r3, #1
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d001      	beq.n	8012ac8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	e010      	b.n	8012aea <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012ac8:	4b0a      	ldr	r3, [pc, #40]	; (8012af4 <sys_timeouts_sleeptime+0x60>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	da06      	bge.n	8012ae8 <sys_timeouts_sleeptime+0x54>
 8012ada:	4b07      	ldr	r3, [pc, #28]	; (8012af8 <sys_timeouts_sleeptime+0x64>)
 8012adc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012ae0:	4906      	ldr	r1, [pc, #24]	; (8012afc <sys_timeouts_sleeptime+0x68>)
 8012ae2:	4807      	ldr	r0, [pc, #28]	; (8012b00 <sys_timeouts_sleeptime+0x6c>)
 8012ae4:	f003 f93a 	bl	8015d5c <iprintf>
    return ret;
 8012ae8:	683b      	ldr	r3, [r7, #0]
  }
}
 8012aea:	4618      	mov	r0, r3
 8012aec:	3708      	adds	r7, #8
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}
 8012af2:	bf00      	nop
 8012af4:	20004b10 	.word	0x20004b10
 8012af8:	08019b3c 	.word	0x08019b3c
 8012afc:	08019c10 	.word	0x08019c10
 8012b00:	08019bb0 	.word	0x08019bb0

08012b04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012b08:	f003 f9b6 	bl	8015e78 <rand>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	4b01      	ldr	r3, [pc, #4]	; (8012b24 <udp_init+0x20>)
 8012b1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012b20:	bf00      	nop
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	20000018 	.word	0x20000018

08012b28 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	b083      	sub	sp, #12
 8012b2c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012b32:	4b17      	ldr	r3, [pc, #92]	; (8012b90 <udp_new_port+0x68>)
 8012b34:	881b      	ldrh	r3, [r3, #0]
 8012b36:	1c5a      	adds	r2, r3, #1
 8012b38:	b291      	uxth	r1, r2
 8012b3a:	4a15      	ldr	r2, [pc, #84]	; (8012b90 <udp_new_port+0x68>)
 8012b3c:	8011      	strh	r1, [r2, #0]
 8012b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b42:	4293      	cmp	r3, r2
 8012b44:	d103      	bne.n	8012b4e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012b46:	4b12      	ldr	r3, [pc, #72]	; (8012b90 <udp_new_port+0x68>)
 8012b48:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012b4c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b4e:	4b11      	ldr	r3, [pc, #68]	; (8012b94 <udp_new_port+0x6c>)
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	603b      	str	r3, [r7, #0]
 8012b54:	e011      	b.n	8012b7a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	8a5a      	ldrh	r2, [r3, #18]
 8012b5a:	4b0d      	ldr	r3, [pc, #52]	; (8012b90 <udp_new_port+0x68>)
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d108      	bne.n	8012b74 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012b62:	88fb      	ldrh	r3, [r7, #6]
 8012b64:	3301      	adds	r3, #1
 8012b66:	80fb      	strh	r3, [r7, #6]
 8012b68:	88fb      	ldrh	r3, [r7, #6]
 8012b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012b6e:	d3e0      	bcc.n	8012b32 <udp_new_port+0xa>
        return 0;
 8012b70:	2300      	movs	r3, #0
 8012b72:	e007      	b.n	8012b84 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	603b      	str	r3, [r7, #0]
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1ea      	bne.n	8012b56 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012b80:	4b03      	ldr	r3, [pc, #12]	; (8012b90 <udp_new_port+0x68>)
 8012b82:	881b      	ldrh	r3, [r3, #0]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr
 8012b90:	20000018 	.word	0x20000018
 8012b94:	2000d874 	.word	0x2000d874

08012b98 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b084      	sub	sp, #16
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d105      	bne.n	8012bb8 <udp_input_local_match+0x20>
 8012bac:	4b27      	ldr	r3, [pc, #156]	; (8012c4c <udp_input_local_match+0xb4>)
 8012bae:	2287      	movs	r2, #135	; 0x87
 8012bb0:	4927      	ldr	r1, [pc, #156]	; (8012c50 <udp_input_local_match+0xb8>)
 8012bb2:	4828      	ldr	r0, [pc, #160]	; (8012c54 <udp_input_local_match+0xbc>)
 8012bb4:	f003 f8d2 	bl	8015d5c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d105      	bne.n	8012bca <udp_input_local_match+0x32>
 8012bbe:	4b23      	ldr	r3, [pc, #140]	; (8012c4c <udp_input_local_match+0xb4>)
 8012bc0:	2288      	movs	r2, #136	; 0x88
 8012bc2:	4925      	ldr	r1, [pc, #148]	; (8012c58 <udp_input_local_match+0xc0>)
 8012bc4:	4823      	ldr	r0, [pc, #140]	; (8012c54 <udp_input_local_match+0xbc>)
 8012bc6:	f003 f8c9 	bl	8015d5c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	7a1b      	ldrb	r3, [r3, #8]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d00b      	beq.n	8012bea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	7a1a      	ldrb	r2, [r3, #8]
 8012bd6:	4b21      	ldr	r3, [pc, #132]	; (8012c5c <udp_input_local_match+0xc4>)
 8012bd8:	685b      	ldr	r3, [r3, #4]
 8012bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012bde:	3301      	adds	r3, #1
 8012be0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d001      	beq.n	8012bea <udp_input_local_match+0x52>
    return 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	e02b      	b.n	8012c42 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012bea:	79fb      	ldrb	r3, [r7, #7]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d018      	beq.n	8012c22 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d013      	beq.n	8012c1e <udp_input_local_match+0x86>
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d00f      	beq.n	8012c1e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012bfe:	4b17      	ldr	r3, [pc, #92]	; (8012c5c <udp_input_local_match+0xc4>)
 8012c00:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c06:	d00a      	beq.n	8012c1e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681a      	ldr	r2, [r3, #0]
 8012c0c:	4b13      	ldr	r3, [pc, #76]	; (8012c5c <udp_input_local_match+0xc4>)
 8012c0e:	695b      	ldr	r3, [r3, #20]
 8012c10:	405a      	eors	r2, r3
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	3308      	adds	r3, #8
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d110      	bne.n	8012c40 <udp_input_local_match+0xa8>
          return 1;
 8012c1e:	2301      	movs	r3, #1
 8012c20:	e00f      	b.n	8012c42 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d009      	beq.n	8012c3c <udp_input_local_match+0xa4>
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d005      	beq.n	8012c3c <udp_input_local_match+0xa4>
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	4b09      	ldr	r3, [pc, #36]	; (8012c5c <udp_input_local_match+0xc4>)
 8012c36:	695b      	ldr	r3, [r3, #20]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d101      	bne.n	8012c40 <udp_input_local_match+0xa8>
        return 1;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e000      	b.n	8012c42 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012c40:	2300      	movs	r3, #0
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	08019c24 	.word	0x08019c24
 8012c50:	08019c54 	.word	0x08019c54
 8012c54:	08019c78 	.word	0x08019c78
 8012c58:	08019ca0 	.word	0x08019ca0
 8012c5c:	20007f88 	.word	0x20007f88

08012c60 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012c60:	b590      	push	{r4, r7, lr}
 8012c62:	b08d      	sub	sp, #52	; 0x34
 8012c64:	af02      	add	r7, sp, #8
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d105      	bne.n	8012c80 <udp_input+0x20>
 8012c74:	4b7c      	ldr	r3, [pc, #496]	; (8012e68 <udp_input+0x208>)
 8012c76:	22cf      	movs	r2, #207	; 0xcf
 8012c78:	497c      	ldr	r1, [pc, #496]	; (8012e6c <udp_input+0x20c>)
 8012c7a:	487d      	ldr	r0, [pc, #500]	; (8012e70 <udp_input+0x210>)
 8012c7c:	f003 f86e 	bl	8015d5c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d105      	bne.n	8012c92 <udp_input+0x32>
 8012c86:	4b78      	ldr	r3, [pc, #480]	; (8012e68 <udp_input+0x208>)
 8012c88:	22d0      	movs	r2, #208	; 0xd0
 8012c8a:	497a      	ldr	r1, [pc, #488]	; (8012e74 <udp_input+0x214>)
 8012c8c:	4878      	ldr	r0, [pc, #480]	; (8012e70 <udp_input+0x210>)
 8012c8e:	f003 f865 	bl	8015d5c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	895b      	ldrh	r3, [r3, #10]
 8012c96:	2b07      	cmp	r3, #7
 8012c98:	d803      	bhi.n	8012ca2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f7f9 fa9c 	bl	800c1d8 <pbuf_free>
    goto end;
 8012ca0:	e0de      	b.n	8012e60 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012ca8:	4b73      	ldr	r3, [pc, #460]	; (8012e78 <udp_input+0x218>)
 8012caa:	695b      	ldr	r3, [r3, #20]
 8012cac:	4a72      	ldr	r2, [pc, #456]	; (8012e78 <udp_input+0x218>)
 8012cae:	6812      	ldr	r2, [r2, #0]
 8012cb0:	4611      	mov	r1, r2
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f001 fd96 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	881b      	ldrh	r3, [r3, #0]
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7f7 fedc 	bl	800aa80 <lwip_htons>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	885b      	ldrh	r3, [r3, #2]
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7f7 fed4 	bl	800aa80 <lwip_htons>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ce8:	4b64      	ldr	r3, [pc, #400]	; (8012e7c <udp_input+0x21c>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	627b      	str	r3, [r7, #36]	; 0x24
 8012cee:	e054      	b.n	8012d9a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf2:	8a5b      	ldrh	r3, [r3, #18]
 8012cf4:	89fa      	ldrh	r2, [r7, #14]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d14a      	bne.n	8012d90 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012cfa:	7cfb      	ldrb	r3, [r7, #19]
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	6839      	ldr	r1, [r7, #0]
 8012d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d02:	f7ff ff49 	bl	8012b98 <udp_input_local_match>
 8012d06:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d041      	beq.n	8012d90 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	7c1b      	ldrb	r3, [r3, #16]
 8012d10:	f003 0304 	and.w	r3, r3, #4
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d11d      	bne.n	8012d54 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012d18:	69fb      	ldr	r3, [r7, #28]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d102      	bne.n	8012d24 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d20:	61fb      	str	r3, [r7, #28]
 8012d22:	e017      	b.n	8012d54 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012d24:	7cfb      	ldrb	r3, [r7, #19]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d014      	beq.n	8012d54 <udp_input+0xf4>
 8012d2a:	4b53      	ldr	r3, [pc, #332]	; (8012e78 <udp_input+0x218>)
 8012d2c:	695b      	ldr	r3, [r3, #20]
 8012d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d32:	d10f      	bne.n	8012d54 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	3304      	adds	r3, #4
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d008      	beq.n	8012d54 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d44:	681a      	ldr	r2, [r3, #0]
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	3304      	adds	r3, #4
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d101      	bne.n	8012d54 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d52:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d56:	8a9b      	ldrh	r3, [r3, #20]
 8012d58:	8a3a      	ldrh	r2, [r7, #16]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d118      	bne.n	8012d90 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d60:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d005      	beq.n	8012d72 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d68:	685a      	ldr	r2, [r3, #4]
 8012d6a:	4b43      	ldr	r3, [pc, #268]	; (8012e78 <udp_input+0x218>)
 8012d6c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d10e      	bne.n	8012d90 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012d72:	6a3b      	ldr	r3, [r7, #32]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d014      	beq.n	8012da2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7a:	68da      	ldr	r2, [r3, #12]
 8012d7c:	6a3b      	ldr	r3, [r7, #32]
 8012d7e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012d80:	4b3e      	ldr	r3, [pc, #248]	; (8012e7c <udp_input+0x21c>)
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d86:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012d88:	4a3c      	ldr	r2, [pc, #240]	; (8012e7c <udp_input+0x21c>)
 8012d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012d8e:	e008      	b.n	8012da2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d92:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d96:	68db      	ldr	r3, [r3, #12]
 8012d98:	627b      	str	r3, [r7, #36]	; 0x24
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d1a7      	bne.n	8012cf0 <udp_input+0x90>
 8012da0:	e000      	b.n	8012da4 <udp_input+0x144>
        break;
 8012da2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d101      	bne.n	8012dae <udp_input+0x14e>
    pcb = uncon_pcb;
 8012daa:	69fb      	ldr	r3, [r7, #28]
 8012dac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <udp_input+0x15a>
    for_us = 1;
 8012db4:	2301      	movs	r3, #1
 8012db6:	76fb      	strb	r3, [r7, #27]
 8012db8:	e00a      	b.n	8012dd0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	3304      	adds	r3, #4
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	4b2d      	ldr	r3, [pc, #180]	; (8012e78 <udp_input+0x218>)
 8012dc2:	695b      	ldr	r3, [r3, #20]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	bf0c      	ite	eq
 8012dc8:	2301      	moveq	r3, #1
 8012dca:	2300      	movne	r3, #0
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012dd0:	7efb      	ldrb	r3, [r7, #27]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d041      	beq.n	8012e5a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012dd6:	2108      	movs	r1, #8
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f7f9 f977 	bl	800c0cc <pbuf_remove_header>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d00a      	beq.n	8012dfa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012de4:	4b20      	ldr	r3, [pc, #128]	; (8012e68 <udp_input+0x208>)
 8012de6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012dea:	4925      	ldr	r1, [pc, #148]	; (8012e80 <udp_input+0x220>)
 8012dec:	4820      	ldr	r0, [pc, #128]	; (8012e70 <udp_input+0x210>)
 8012dee:	f002 ffb5 	bl	8015d5c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f7f9 f9f0 	bl	800c1d8 <pbuf_free>
      goto end;
 8012df8:	e032      	b.n	8012e60 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d012      	beq.n	8012e26 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	699b      	ldr	r3, [r3, #24]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d00a      	beq.n	8012e1e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0a:	699c      	ldr	r4, [r3, #24]
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0e:	69d8      	ldr	r0, [r3, #28]
 8012e10:	8a3b      	ldrh	r3, [r7, #16]
 8012e12:	9300      	str	r3, [sp, #0]
 8012e14:	4b1b      	ldr	r3, [pc, #108]	; (8012e84 <udp_input+0x224>)
 8012e16:	687a      	ldr	r2, [r7, #4]
 8012e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012e1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012e1c:	e021      	b.n	8012e62 <udp_input+0x202>
        pbuf_free(p);
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f7f9 f9da 	bl	800c1d8 <pbuf_free>
        goto end;
 8012e24:	e01c      	b.n	8012e60 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012e26:	7cfb      	ldrb	r3, [r7, #19]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d112      	bne.n	8012e52 <udp_input+0x1f2>
 8012e2c:	4b12      	ldr	r3, [pc, #72]	; (8012e78 <udp_input+0x218>)
 8012e2e:	695b      	ldr	r3, [r3, #20]
 8012e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e34:	2be0      	cmp	r3, #224	; 0xe0
 8012e36:	d00c      	beq.n	8012e52 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012e38:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <udp_input+0x218>)
 8012e3a:	899b      	ldrh	r3, [r3, #12]
 8012e3c:	3308      	adds	r3, #8
 8012e3e:	b29b      	uxth	r3, r3
 8012e40:	b21b      	sxth	r3, r3
 8012e42:	4619      	mov	r1, r3
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7f9 f9b4 	bl	800c1b2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012e4a:	2103      	movs	r1, #3
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f001 f9a9 	bl	80141a4 <icmp_dest_unreach>
      pbuf_free(p);
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7f9 f9c0 	bl	800c1d8 <pbuf_free>
  return;
 8012e58:	e003      	b.n	8012e62 <udp_input+0x202>
    pbuf_free(p);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7f9 f9bc 	bl	800c1d8 <pbuf_free>
  return;
 8012e60:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012e62:	372c      	adds	r7, #44	; 0x2c
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd90      	pop	{r4, r7, pc}
 8012e68:	08019c24 	.word	0x08019c24
 8012e6c:	08019cc8 	.word	0x08019cc8
 8012e70:	08019c78 	.word	0x08019c78
 8012e74:	08019ce0 	.word	0x08019ce0
 8012e78:	20007f88 	.word	0x20007f88
 8012e7c:	2000d874 	.word	0x2000d874
 8012e80:	08019cfc 	.word	0x08019cfc
 8012e84:	20007f98 	.word	0x20007f98

08012e88 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b086      	sub	sp, #24
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	4613      	mov	r3, r2
 8012e94:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d101      	bne.n	8012ea0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012e9c:	4b39      	ldr	r3, [pc, #228]	; (8012f84 <udp_bind+0xfc>)
 8012e9e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d109      	bne.n	8012eba <udp_bind+0x32>
 8012ea6:	4b38      	ldr	r3, [pc, #224]	; (8012f88 <udp_bind+0x100>)
 8012ea8:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012eac:	4937      	ldr	r1, [pc, #220]	; (8012f8c <udp_bind+0x104>)
 8012eae:	4838      	ldr	r0, [pc, #224]	; (8012f90 <udp_bind+0x108>)
 8012eb0:	f002 ff54 	bl	8015d5c <iprintf>
 8012eb4:	f06f 030f 	mvn.w	r3, #15
 8012eb8:	e060      	b.n	8012f7c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ebe:	4b35      	ldr	r3, [pc, #212]	; (8012f94 <udp_bind+0x10c>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	617b      	str	r3, [r7, #20]
 8012ec4:	e009      	b.n	8012eda <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012ec6:	68fa      	ldr	r2, [r7, #12]
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d102      	bne.n	8012ed4 <udp_bind+0x4c>
      rebind = 1;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	74fb      	strb	r3, [r7, #19]
      break;
 8012ed2:	e005      	b.n	8012ee0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012ed4:	697b      	ldr	r3, [r7, #20]
 8012ed6:	68db      	ldr	r3, [r3, #12]
 8012ed8:	617b      	str	r3, [r7, #20]
 8012eda:	697b      	ldr	r3, [r7, #20]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d1f2      	bne.n	8012ec6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012ee0:	88fb      	ldrh	r3, [r7, #6]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d109      	bne.n	8012efa <udp_bind+0x72>
    port = udp_new_port();
 8012ee6:	f7ff fe1f 	bl	8012b28 <udp_new_port>
 8012eea:	4603      	mov	r3, r0
 8012eec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012eee:	88fb      	ldrh	r3, [r7, #6]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d12c      	bne.n	8012f4e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012ef4:	f06f 0307 	mvn.w	r3, #7
 8012ef8:	e040      	b.n	8012f7c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012efa:	4b26      	ldr	r3, [pc, #152]	; (8012f94 <udp_bind+0x10c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	617b      	str	r3, [r7, #20]
 8012f00:	e022      	b.n	8012f48 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012f02:	68fa      	ldr	r2, [r7, #12]
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d01b      	beq.n	8012f42 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	8a5b      	ldrh	r3, [r3, #18]
 8012f0e:	88fa      	ldrh	r2, [r7, #6]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d116      	bne.n	8012f42 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d00d      	beq.n	8012f3c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00a      	beq.n	8012f3c <udp_bind+0xb4>
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012f2e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d003      	beq.n	8012f3c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d102      	bne.n	8012f42 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012f3c:	f06f 0307 	mvn.w	r3, #7
 8012f40:	e01c      	b.n	8012f7c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	68db      	ldr	r3, [r3, #12]
 8012f46:	617b      	str	r3, [r7, #20]
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d1d9      	bne.n	8012f02 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <udp_bind+0xd2>
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	e000      	b.n	8012f5c <udp_bind+0xd4>
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	68fa      	ldr	r2, [r7, #12]
 8012f5e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	88fa      	ldrh	r2, [r7, #6]
 8012f64:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012f66:	7cfb      	ldrb	r3, [r7, #19]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d106      	bne.n	8012f7a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012f6c:	4b09      	ldr	r3, [pc, #36]	; (8012f94 <udp_bind+0x10c>)
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012f74:	4a07      	ldr	r2, [pc, #28]	; (8012f94 <udp_bind+0x10c>)
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	0801a7c0 	.word	0x0801a7c0
 8012f88:	08019c24 	.word	0x08019c24
 8012f8c:	08019eec 	.word	0x08019eec
 8012f90:	08019c78 	.word	0x08019c78
 8012f94:	2000d874 	.word	0x2000d874

08012f98 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b084      	sub	sp, #16
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d107      	bne.n	8012fba <udp_recv+0x22>
 8012faa:	4b08      	ldr	r3, [pc, #32]	; (8012fcc <udp_recv+0x34>)
 8012fac:	f240 428a 	movw	r2, #1162	; 0x48a
 8012fb0:	4907      	ldr	r1, [pc, #28]	; (8012fd0 <udp_recv+0x38>)
 8012fb2:	4808      	ldr	r0, [pc, #32]	; (8012fd4 <udp_recv+0x3c>)
 8012fb4:	f002 fed2 	bl	8015d5c <iprintf>
 8012fb8:	e005      	b.n	8012fc6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	687a      	ldr	r2, [r7, #4]
 8012fc4:	61da      	str	r2, [r3, #28]
}
 8012fc6:	3710      	adds	r7, #16
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	08019c24 	.word	0x08019c24
 8012fd0:	08019f58 	.word	0x08019f58
 8012fd4:	08019c78 	.word	0x08019c78

08012fd8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d107      	bne.n	8012ff6 <udp_remove+0x1e>
 8012fe6:	4b19      	ldr	r3, [pc, #100]	; (801304c <udp_remove+0x74>)
 8012fe8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012fec:	4918      	ldr	r1, [pc, #96]	; (8013050 <udp_remove+0x78>)
 8012fee:	4819      	ldr	r0, [pc, #100]	; (8013054 <udp_remove+0x7c>)
 8012ff0:	f002 feb4 	bl	8015d5c <iprintf>
 8012ff4:	e026      	b.n	8013044 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012ff6:	4b18      	ldr	r3, [pc, #96]	; (8013058 <udp_remove+0x80>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d105      	bne.n	801300c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013000:	4b15      	ldr	r3, [pc, #84]	; (8013058 <udp_remove+0x80>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	4a14      	ldr	r2, [pc, #80]	; (8013058 <udp_remove+0x80>)
 8013008:	6013      	str	r3, [r2, #0]
 801300a:	e017      	b.n	801303c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801300c:	4b12      	ldr	r3, [pc, #72]	; (8013058 <udp_remove+0x80>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	60fb      	str	r3, [r7, #12]
 8013012:	e010      	b.n	8013036 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d009      	beq.n	8013030 <udp_remove+0x58>
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	429a      	cmp	r2, r3
 8013024:	d104      	bne.n	8013030 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	68da      	ldr	r2, [r3, #12]
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	60da      	str	r2, [r3, #12]
        break;
 801302e:	e005      	b.n	801303c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	60fb      	str	r3, [r7, #12]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d1eb      	bne.n	8013014 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801303c:	6879      	ldr	r1, [r7, #4]
 801303e:	2000      	movs	r0, #0
 8013040:	f7f8 fa26 	bl	800b490 <memp_free>
}
 8013044:	3710      	adds	r7, #16
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	08019c24 	.word	0x08019c24
 8013050:	08019f70 	.word	0x08019f70
 8013054:	08019c78 	.word	0x08019c78
 8013058:	2000d874 	.word	0x2000d874

0801305c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b082      	sub	sp, #8
 8013060:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013062:	2000      	movs	r0, #0
 8013064:	f7f8 f9c2 	bl	800b3ec <memp_malloc>
 8013068:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d007      	beq.n	8013080 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013070:	2220      	movs	r2, #32
 8013072:	2100      	movs	r1, #0
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f002 fe0e 	bl	8015c96 <memset>
    pcb->ttl = UDP_TTL;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	22ff      	movs	r2, #255	; 0xff
 801307e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013080:	687b      	ldr	r3, [r7, #4]
}
 8013082:	4618      	mov	r0, r3
 8013084:	3708      	adds	r7, #8
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801308a:	b580      	push	{r7, lr}
 801308c:	b084      	sub	sp, #16
 801308e:	af00      	add	r7, sp, #0
 8013090:	4603      	mov	r3, r0
 8013092:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013094:	f7ff ffe2 	bl	801305c <udp_new>
 8013098:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801309a:	68fb      	ldr	r3, [r7, #12]
}
 801309c:	4618      	mov	r0, r3
 801309e:	3710      	adds	r7, #16
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d01e      	beq.n	80130f2 <udp_netif_ip_addr_changed+0x4e>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d01a      	beq.n	80130f2 <udp_netif_ip_addr_changed+0x4e>
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d017      	beq.n	80130f2 <udp_netif_ip_addr_changed+0x4e>
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d013      	beq.n	80130f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80130ca:	4b0d      	ldr	r3, [pc, #52]	; (8013100 <udp_netif_ip_addr_changed+0x5c>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	60fb      	str	r3, [r7, #12]
 80130d0:	e00c      	b.n	80130ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d103      	bne.n	80130e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	68db      	ldr	r3, [r3, #12]
 80130ea:	60fb      	str	r3, [r7, #12]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d1ef      	bne.n	80130d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80130f2:	bf00      	nop
 80130f4:	3714      	adds	r7, #20
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop
 8013100:	2000d874 	.word	0x2000d874

08013104 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801310c:	4915      	ldr	r1, [pc, #84]	; (8013164 <etharp_free_entry+0x60>)
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	4613      	mov	r3, r2
 8013112:	005b      	lsls	r3, r3, #1
 8013114:	4413      	add	r3, r2
 8013116:	00db      	lsls	r3, r3, #3
 8013118:	440b      	add	r3, r1
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d013      	beq.n	8013148 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013120:	4910      	ldr	r1, [pc, #64]	; (8013164 <etharp_free_entry+0x60>)
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	4613      	mov	r3, r2
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4618      	mov	r0, r3
 8013132:	f7f9 f851 	bl	800c1d8 <pbuf_free>
    arp_table[i].q = NULL;
 8013136:	490b      	ldr	r1, [pc, #44]	; (8013164 <etharp_free_entry+0x60>)
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	4613      	mov	r3, r2
 801313c:	005b      	lsls	r3, r3, #1
 801313e:	4413      	add	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	440b      	add	r3, r1
 8013144:	2200      	movs	r2, #0
 8013146:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013148:	4906      	ldr	r1, [pc, #24]	; (8013164 <etharp_free_entry+0x60>)
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	4613      	mov	r3, r2
 801314e:	005b      	lsls	r3, r3, #1
 8013150:	4413      	add	r3, r2
 8013152:	00db      	lsls	r3, r3, #3
 8013154:	440b      	add	r3, r1
 8013156:	3314      	adds	r3, #20
 8013158:	2200      	movs	r2, #0
 801315a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801315c:	bf00      	nop
 801315e:	3708      	adds	r7, #8
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}
 8013164:	20004b1c 	.word	0x20004b1c

08013168 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801316e:	2300      	movs	r3, #0
 8013170:	607b      	str	r3, [r7, #4]
 8013172:	e096      	b.n	80132a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013174:	494f      	ldr	r1, [pc, #316]	; (80132b4 <etharp_tmr+0x14c>)
 8013176:	687a      	ldr	r2, [r7, #4]
 8013178:	4613      	mov	r3, r2
 801317a:	005b      	lsls	r3, r3, #1
 801317c:	4413      	add	r3, r2
 801317e:	00db      	lsls	r3, r3, #3
 8013180:	440b      	add	r3, r1
 8013182:	3314      	adds	r3, #20
 8013184:	781b      	ldrb	r3, [r3, #0]
 8013186:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013188:	78fb      	ldrb	r3, [r7, #3]
 801318a:	2b00      	cmp	r3, #0
 801318c:	f000 8086 	beq.w	801329c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013190:	4948      	ldr	r1, [pc, #288]	; (80132b4 <etharp_tmr+0x14c>)
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	4613      	mov	r3, r2
 8013196:	005b      	lsls	r3, r3, #1
 8013198:	4413      	add	r3, r2
 801319a:	00db      	lsls	r3, r3, #3
 801319c:	440b      	add	r3, r1
 801319e:	3312      	adds	r3, #18
 80131a0:	881b      	ldrh	r3, [r3, #0]
 80131a2:	3301      	adds	r3, #1
 80131a4:	b298      	uxth	r0, r3
 80131a6:	4943      	ldr	r1, [pc, #268]	; (80132b4 <etharp_tmr+0x14c>)
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	3312      	adds	r3, #18
 80131b6:	4602      	mov	r2, r0
 80131b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80131ba:	493e      	ldr	r1, [pc, #248]	; (80132b4 <etharp_tmr+0x14c>)
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	4613      	mov	r3, r2
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	4413      	add	r3, r2
 80131c4:	00db      	lsls	r3, r3, #3
 80131c6:	440b      	add	r3, r1
 80131c8:	3312      	adds	r3, #18
 80131ca:	881b      	ldrh	r3, [r3, #0]
 80131cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80131d0:	d215      	bcs.n	80131fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80131d2:	4938      	ldr	r1, [pc, #224]	; (80132b4 <etharp_tmr+0x14c>)
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	4613      	mov	r3, r2
 80131d8:	005b      	lsls	r3, r3, #1
 80131da:	4413      	add	r3, r2
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	440b      	add	r3, r1
 80131e0:	3314      	adds	r3, #20
 80131e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d10e      	bne.n	8013206 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80131e8:	4932      	ldr	r1, [pc, #200]	; (80132b4 <etharp_tmr+0x14c>)
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	4613      	mov	r3, r2
 80131ee:	005b      	lsls	r3, r3, #1
 80131f0:	4413      	add	r3, r2
 80131f2:	00db      	lsls	r3, r3, #3
 80131f4:	440b      	add	r3, r1
 80131f6:	3312      	adds	r3, #18
 80131f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80131fa:	2b04      	cmp	r3, #4
 80131fc:	d903      	bls.n	8013206 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7ff ff80 	bl	8013104 <etharp_free_entry>
 8013204:	e04a      	b.n	801329c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013206:	492b      	ldr	r1, [pc, #172]	; (80132b4 <etharp_tmr+0x14c>)
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	4613      	mov	r3, r2
 801320c:	005b      	lsls	r3, r3, #1
 801320e:	4413      	add	r3, r2
 8013210:	00db      	lsls	r3, r3, #3
 8013212:	440b      	add	r3, r1
 8013214:	3314      	adds	r3, #20
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	2b03      	cmp	r3, #3
 801321a:	d10a      	bne.n	8013232 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801321c:	4925      	ldr	r1, [pc, #148]	; (80132b4 <etharp_tmr+0x14c>)
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	4613      	mov	r3, r2
 8013222:	005b      	lsls	r3, r3, #1
 8013224:	4413      	add	r3, r2
 8013226:	00db      	lsls	r3, r3, #3
 8013228:	440b      	add	r3, r1
 801322a:	3314      	adds	r3, #20
 801322c:	2204      	movs	r2, #4
 801322e:	701a      	strb	r2, [r3, #0]
 8013230:	e034      	b.n	801329c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013232:	4920      	ldr	r1, [pc, #128]	; (80132b4 <etharp_tmr+0x14c>)
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	4613      	mov	r3, r2
 8013238:	005b      	lsls	r3, r3, #1
 801323a:	4413      	add	r3, r2
 801323c:	00db      	lsls	r3, r3, #3
 801323e:	440b      	add	r3, r1
 8013240:	3314      	adds	r3, #20
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	2b04      	cmp	r3, #4
 8013246:	d10a      	bne.n	801325e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013248:	491a      	ldr	r1, [pc, #104]	; (80132b4 <etharp_tmr+0x14c>)
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	4613      	mov	r3, r2
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	4413      	add	r3, r2
 8013252:	00db      	lsls	r3, r3, #3
 8013254:	440b      	add	r3, r1
 8013256:	3314      	adds	r3, #20
 8013258:	2202      	movs	r2, #2
 801325a:	701a      	strb	r2, [r3, #0]
 801325c:	e01e      	b.n	801329c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801325e:	4915      	ldr	r1, [pc, #84]	; (80132b4 <etharp_tmr+0x14c>)
 8013260:	687a      	ldr	r2, [r7, #4]
 8013262:	4613      	mov	r3, r2
 8013264:	005b      	lsls	r3, r3, #1
 8013266:	4413      	add	r3, r2
 8013268:	00db      	lsls	r3, r3, #3
 801326a:	440b      	add	r3, r1
 801326c:	3314      	adds	r3, #20
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	2b01      	cmp	r3, #1
 8013272:	d113      	bne.n	801329c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013274:	490f      	ldr	r1, [pc, #60]	; (80132b4 <etharp_tmr+0x14c>)
 8013276:	687a      	ldr	r2, [r7, #4]
 8013278:	4613      	mov	r3, r2
 801327a:	005b      	lsls	r3, r3, #1
 801327c:	4413      	add	r3, r2
 801327e:	00db      	lsls	r3, r3, #3
 8013280:	440b      	add	r3, r1
 8013282:	3308      	adds	r3, #8
 8013284:	6818      	ldr	r0, [r3, #0]
 8013286:	687a      	ldr	r2, [r7, #4]
 8013288:	4613      	mov	r3, r2
 801328a:	005b      	lsls	r3, r3, #1
 801328c:	4413      	add	r3, r2
 801328e:	00db      	lsls	r3, r3, #3
 8013290:	4a08      	ldr	r2, [pc, #32]	; (80132b4 <etharp_tmr+0x14c>)
 8013292:	4413      	add	r3, r2
 8013294:	3304      	adds	r3, #4
 8013296:	4619      	mov	r1, r3
 8013298:	f000 fe6e 	bl	8013f78 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	3301      	adds	r3, #1
 80132a0:	607b      	str	r3, [r7, #4]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	2b09      	cmp	r3, #9
 80132a6:	f77f af65 	ble.w	8013174 <etharp_tmr+0xc>
      }
    }
  }
}
 80132aa:	bf00      	nop
 80132ac:	bf00      	nop
 80132ae:	3708      	adds	r7, #8
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	20004b1c 	.word	0x20004b1c

080132b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b08a      	sub	sp, #40	; 0x28
 80132bc:	af00      	add	r7, sp, #0
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	460b      	mov	r3, r1
 80132c2:	607a      	str	r2, [r7, #4]
 80132c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80132c6:	230a      	movs	r3, #10
 80132c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80132ca:	230a      	movs	r3, #10
 80132cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80132ce:	230a      	movs	r3, #10
 80132d0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80132d6:	230a      	movs	r3, #10
 80132d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	83bb      	strh	r3, [r7, #28]
 80132de:	2300      	movs	r3, #0
 80132e0:	837b      	strh	r3, [r7, #26]
 80132e2:	2300      	movs	r3, #0
 80132e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80132e6:	2300      	movs	r3, #0
 80132e8:	843b      	strh	r3, [r7, #32]
 80132ea:	e0ae      	b.n	801344a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80132ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132f0:	49a6      	ldr	r1, [pc, #664]	; (801358c <etharp_find_entry+0x2d4>)
 80132f2:	4613      	mov	r3, r2
 80132f4:	005b      	lsls	r3, r3, #1
 80132f6:	4413      	add	r3, r2
 80132f8:	00db      	lsls	r3, r3, #3
 80132fa:	440b      	add	r3, r1
 80132fc:	3314      	adds	r3, #20
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013302:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013306:	2b0a      	cmp	r3, #10
 8013308:	d105      	bne.n	8013316 <etharp_find_entry+0x5e>
 801330a:	7dfb      	ldrb	r3, [r7, #23]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d102      	bne.n	8013316 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013310:	8c3b      	ldrh	r3, [r7, #32]
 8013312:	847b      	strh	r3, [r7, #34]	; 0x22
 8013314:	e095      	b.n	8013442 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013316:	7dfb      	ldrb	r3, [r7, #23]
 8013318:	2b00      	cmp	r3, #0
 801331a:	f000 8092 	beq.w	8013442 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801331e:	7dfb      	ldrb	r3, [r7, #23]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d009      	beq.n	8013338 <etharp_find_entry+0x80>
 8013324:	7dfb      	ldrb	r3, [r7, #23]
 8013326:	2b01      	cmp	r3, #1
 8013328:	d806      	bhi.n	8013338 <etharp_find_entry+0x80>
 801332a:	4b99      	ldr	r3, [pc, #612]	; (8013590 <etharp_find_entry+0x2d8>)
 801332c:	f240 1223 	movw	r2, #291	; 0x123
 8013330:	4998      	ldr	r1, [pc, #608]	; (8013594 <etharp_find_entry+0x2dc>)
 8013332:	4899      	ldr	r0, [pc, #612]	; (8013598 <etharp_find_entry+0x2e0>)
 8013334:	f002 fd12 	bl	8015d5c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d020      	beq.n	8013380 <etharp_find_entry+0xc8>
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	6819      	ldr	r1, [r3, #0]
 8013342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013346:	4891      	ldr	r0, [pc, #580]	; (801358c <etharp_find_entry+0x2d4>)
 8013348:	4613      	mov	r3, r2
 801334a:	005b      	lsls	r3, r3, #1
 801334c:	4413      	add	r3, r2
 801334e:	00db      	lsls	r3, r3, #3
 8013350:	4403      	add	r3, r0
 8013352:	3304      	adds	r3, #4
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	4299      	cmp	r1, r3
 8013358:	d112      	bne.n	8013380 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d00c      	beq.n	801337a <etharp_find_entry+0xc2>
 8013360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013364:	4989      	ldr	r1, [pc, #548]	; (801358c <etharp_find_entry+0x2d4>)
 8013366:	4613      	mov	r3, r2
 8013368:	005b      	lsls	r3, r3, #1
 801336a:	4413      	add	r3, r2
 801336c:	00db      	lsls	r3, r3, #3
 801336e:	440b      	add	r3, r1
 8013370:	3308      	adds	r3, #8
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	429a      	cmp	r2, r3
 8013378:	d102      	bne.n	8013380 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801337a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801337e:	e100      	b.n	8013582 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013380:	7dfb      	ldrb	r3, [r7, #23]
 8013382:	2b01      	cmp	r3, #1
 8013384:	d140      	bne.n	8013408 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013386:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801338a:	4980      	ldr	r1, [pc, #512]	; (801358c <etharp_find_entry+0x2d4>)
 801338c:	4613      	mov	r3, r2
 801338e:	005b      	lsls	r3, r3, #1
 8013390:	4413      	add	r3, r2
 8013392:	00db      	lsls	r3, r3, #3
 8013394:	440b      	add	r3, r1
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d01a      	beq.n	80133d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801339c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133a0:	497a      	ldr	r1, [pc, #488]	; (801358c <etharp_find_entry+0x2d4>)
 80133a2:	4613      	mov	r3, r2
 80133a4:	005b      	lsls	r3, r3, #1
 80133a6:	4413      	add	r3, r2
 80133a8:	00db      	lsls	r3, r3, #3
 80133aa:	440b      	add	r3, r1
 80133ac:	3312      	adds	r3, #18
 80133ae:	881b      	ldrh	r3, [r3, #0]
 80133b0:	8bba      	ldrh	r2, [r7, #28]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d845      	bhi.n	8013442 <etharp_find_entry+0x18a>
            old_queue = i;
 80133b6:	8c3b      	ldrh	r3, [r7, #32]
 80133b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80133ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133be:	4973      	ldr	r1, [pc, #460]	; (801358c <etharp_find_entry+0x2d4>)
 80133c0:	4613      	mov	r3, r2
 80133c2:	005b      	lsls	r3, r3, #1
 80133c4:	4413      	add	r3, r2
 80133c6:	00db      	lsls	r3, r3, #3
 80133c8:	440b      	add	r3, r1
 80133ca:	3312      	adds	r3, #18
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	83bb      	strh	r3, [r7, #28]
 80133d0:	e037      	b.n	8013442 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80133d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133d6:	496d      	ldr	r1, [pc, #436]	; (801358c <etharp_find_entry+0x2d4>)
 80133d8:	4613      	mov	r3, r2
 80133da:	005b      	lsls	r3, r3, #1
 80133dc:	4413      	add	r3, r2
 80133de:	00db      	lsls	r3, r3, #3
 80133e0:	440b      	add	r3, r1
 80133e2:	3312      	adds	r3, #18
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	8b7a      	ldrh	r2, [r7, #26]
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d82a      	bhi.n	8013442 <etharp_find_entry+0x18a>
            old_pending = i;
 80133ec:	8c3b      	ldrh	r3, [r7, #32]
 80133ee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80133f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133f4:	4965      	ldr	r1, [pc, #404]	; (801358c <etharp_find_entry+0x2d4>)
 80133f6:	4613      	mov	r3, r2
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	4413      	add	r3, r2
 80133fc:	00db      	lsls	r3, r3, #3
 80133fe:	440b      	add	r3, r1
 8013400:	3312      	adds	r3, #18
 8013402:	881b      	ldrh	r3, [r3, #0]
 8013404:	837b      	strh	r3, [r7, #26]
 8013406:	e01c      	b.n	8013442 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013408:	7dfb      	ldrb	r3, [r7, #23]
 801340a:	2b01      	cmp	r3, #1
 801340c:	d919      	bls.n	8013442 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801340e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013412:	495e      	ldr	r1, [pc, #376]	; (801358c <etharp_find_entry+0x2d4>)
 8013414:	4613      	mov	r3, r2
 8013416:	005b      	lsls	r3, r3, #1
 8013418:	4413      	add	r3, r2
 801341a:	00db      	lsls	r3, r3, #3
 801341c:	440b      	add	r3, r1
 801341e:	3312      	adds	r3, #18
 8013420:	881b      	ldrh	r3, [r3, #0]
 8013422:	8b3a      	ldrh	r2, [r7, #24]
 8013424:	429a      	cmp	r2, r3
 8013426:	d80c      	bhi.n	8013442 <etharp_find_entry+0x18a>
            old_stable = i;
 8013428:	8c3b      	ldrh	r3, [r7, #32]
 801342a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801342c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013430:	4956      	ldr	r1, [pc, #344]	; (801358c <etharp_find_entry+0x2d4>)
 8013432:	4613      	mov	r3, r2
 8013434:	005b      	lsls	r3, r3, #1
 8013436:	4413      	add	r3, r2
 8013438:	00db      	lsls	r3, r3, #3
 801343a:	440b      	add	r3, r1
 801343c:	3312      	adds	r3, #18
 801343e:	881b      	ldrh	r3, [r3, #0]
 8013440:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013442:	8c3b      	ldrh	r3, [r7, #32]
 8013444:	3301      	adds	r3, #1
 8013446:	b29b      	uxth	r3, r3
 8013448:	843b      	strh	r3, [r7, #32]
 801344a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801344e:	2b09      	cmp	r3, #9
 8013450:	f77f af4c 	ble.w	80132ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013454:	7afb      	ldrb	r3, [r7, #11]
 8013456:	f003 0302 	and.w	r3, r3, #2
 801345a:	2b00      	cmp	r3, #0
 801345c:	d108      	bne.n	8013470 <etharp_find_entry+0x1b8>
 801345e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013462:	2b0a      	cmp	r3, #10
 8013464:	d107      	bne.n	8013476 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013466:	7afb      	ldrb	r3, [r7, #11]
 8013468:	f003 0301 	and.w	r3, r3, #1
 801346c:	2b00      	cmp	r3, #0
 801346e:	d102      	bne.n	8013476 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013474:	e085      	b.n	8013582 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013476:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801347a:	2b09      	cmp	r3, #9
 801347c:	dc02      	bgt.n	8013484 <etharp_find_entry+0x1cc>
    i = empty;
 801347e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013480:	843b      	strh	r3, [r7, #32]
 8013482:	e039      	b.n	80134f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013484:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013488:	2b09      	cmp	r3, #9
 801348a:	dc14      	bgt.n	80134b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801348c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801348e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013490:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013494:	493d      	ldr	r1, [pc, #244]	; (801358c <etharp_find_entry+0x2d4>)
 8013496:	4613      	mov	r3, r2
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	4413      	add	r3, r2
 801349c:	00db      	lsls	r3, r3, #3
 801349e:	440b      	add	r3, r1
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d018      	beq.n	80134d8 <etharp_find_entry+0x220>
 80134a6:	4b3a      	ldr	r3, [pc, #232]	; (8013590 <etharp_find_entry+0x2d8>)
 80134a8:	f240 126d 	movw	r2, #365	; 0x16d
 80134ac:	493b      	ldr	r1, [pc, #236]	; (801359c <etharp_find_entry+0x2e4>)
 80134ae:	483a      	ldr	r0, [pc, #232]	; (8013598 <etharp_find_entry+0x2e0>)
 80134b0:	f002 fc54 	bl	8015d5c <iprintf>
 80134b4:	e010      	b.n	80134d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80134b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80134ba:	2b09      	cmp	r3, #9
 80134bc:	dc02      	bgt.n	80134c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80134be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80134c0:	843b      	strh	r3, [r7, #32]
 80134c2:	e009      	b.n	80134d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80134c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80134c8:	2b09      	cmp	r3, #9
 80134ca:	dc02      	bgt.n	80134d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80134cc:	8bfb      	ldrh	r3, [r7, #30]
 80134ce:	843b      	strh	r3, [r7, #32]
 80134d0:	e002      	b.n	80134d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80134d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134d6:	e054      	b.n	8013582 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80134d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80134dc:	2b09      	cmp	r3, #9
 80134de:	dd06      	ble.n	80134ee <etharp_find_entry+0x236>
 80134e0:	4b2b      	ldr	r3, [pc, #172]	; (8013590 <etharp_find_entry+0x2d8>)
 80134e2:	f240 127f 	movw	r2, #383	; 0x17f
 80134e6:	492e      	ldr	r1, [pc, #184]	; (80135a0 <etharp_find_entry+0x2e8>)
 80134e8:	482b      	ldr	r0, [pc, #172]	; (8013598 <etharp_find_entry+0x2e0>)
 80134ea:	f002 fc37 	bl	8015d5c <iprintf>
    etharp_free_entry(i);
 80134ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7ff fe06 	bl	8013104 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80134f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80134fc:	2b09      	cmp	r3, #9
 80134fe:	dd06      	ble.n	801350e <etharp_find_entry+0x256>
 8013500:	4b23      	ldr	r3, [pc, #140]	; (8013590 <etharp_find_entry+0x2d8>)
 8013502:	f240 1283 	movw	r2, #387	; 0x183
 8013506:	4926      	ldr	r1, [pc, #152]	; (80135a0 <etharp_find_entry+0x2e8>)
 8013508:	4823      	ldr	r0, [pc, #140]	; (8013598 <etharp_find_entry+0x2e0>)
 801350a:	f002 fc27 	bl	8015d5c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801350e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013512:	491e      	ldr	r1, [pc, #120]	; (801358c <etharp_find_entry+0x2d4>)
 8013514:	4613      	mov	r3, r2
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	4413      	add	r3, r2
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	440b      	add	r3, r1
 801351e:	3314      	adds	r3, #20
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d006      	beq.n	8013534 <etharp_find_entry+0x27c>
 8013526:	4b1a      	ldr	r3, [pc, #104]	; (8013590 <etharp_find_entry+0x2d8>)
 8013528:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801352c:	491d      	ldr	r1, [pc, #116]	; (80135a4 <etharp_find_entry+0x2ec>)
 801352e:	481a      	ldr	r0, [pc, #104]	; (8013598 <etharp_find_entry+0x2e0>)
 8013530:	f002 fc14 	bl	8015d5c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d00b      	beq.n	8013552 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801353a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	6819      	ldr	r1, [r3, #0]
 8013542:	4812      	ldr	r0, [pc, #72]	; (801358c <etharp_find_entry+0x2d4>)
 8013544:	4613      	mov	r3, r2
 8013546:	005b      	lsls	r3, r3, #1
 8013548:	4413      	add	r3, r2
 801354a:	00db      	lsls	r3, r3, #3
 801354c:	4403      	add	r3, r0
 801354e:	3304      	adds	r3, #4
 8013550:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013552:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013556:	490d      	ldr	r1, [pc, #52]	; (801358c <etharp_find_entry+0x2d4>)
 8013558:	4613      	mov	r3, r2
 801355a:	005b      	lsls	r3, r3, #1
 801355c:	4413      	add	r3, r2
 801355e:	00db      	lsls	r3, r3, #3
 8013560:	440b      	add	r3, r1
 8013562:	3312      	adds	r3, #18
 8013564:	2200      	movs	r2, #0
 8013566:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013568:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801356c:	4907      	ldr	r1, [pc, #28]	; (801358c <etharp_find_entry+0x2d4>)
 801356e:	4613      	mov	r3, r2
 8013570:	005b      	lsls	r3, r3, #1
 8013572:	4413      	add	r3, r2
 8013574:	00db      	lsls	r3, r3, #3
 8013576:	440b      	add	r3, r1
 8013578:	3308      	adds	r3, #8
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801357e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013582:	4618      	mov	r0, r3
 8013584:	3728      	adds	r7, #40	; 0x28
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	20004b1c 	.word	0x20004b1c
 8013590:	08019f88 	.word	0x08019f88
 8013594:	08019fc0 	.word	0x08019fc0
 8013598:	0801a000 	.word	0x0801a000
 801359c:	0801a028 	.word	0x0801a028
 80135a0:	0801a040 	.word	0x0801a040
 80135a4:	0801a054 	.word	0x0801a054

080135a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b088      	sub	sp, #32
 80135ac:	af02      	add	r7, sp, #8
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
 80135b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80135bc:	2b06      	cmp	r3, #6
 80135be:	d006      	beq.n	80135ce <etharp_update_arp_entry+0x26>
 80135c0:	4b48      	ldr	r3, [pc, #288]	; (80136e4 <etharp_update_arp_entry+0x13c>)
 80135c2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80135c6:	4948      	ldr	r1, [pc, #288]	; (80136e8 <etharp_update_arp_entry+0x140>)
 80135c8:	4848      	ldr	r0, [pc, #288]	; (80136ec <etharp_update_arp_entry+0x144>)
 80135ca:	f002 fbc7 	bl	8015d5c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d012      	beq.n	80135fa <etharp_update_arp_entry+0x52>
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d00e      	beq.n	80135fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	68f9      	ldr	r1, [r7, #12]
 80135e2:	4618      	mov	r0, r3
 80135e4:	f001 f8fe 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 80135e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d105      	bne.n	80135fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80135f6:	2be0      	cmp	r3, #224	; 0xe0
 80135f8:	d102      	bne.n	8013600 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80135fa:	f06f 030f 	mvn.w	r3, #15
 80135fe:	e06c      	b.n	80136da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013600:	78fb      	ldrb	r3, [r7, #3]
 8013602:	68fa      	ldr	r2, [r7, #12]
 8013604:	4619      	mov	r1, r3
 8013606:	68b8      	ldr	r0, [r7, #8]
 8013608:	f7ff fe56 	bl	80132b8 <etharp_find_entry>
 801360c:	4603      	mov	r3, r0
 801360e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013610:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013614:	2b00      	cmp	r3, #0
 8013616:	da02      	bge.n	801361e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013618:	8afb      	ldrh	r3, [r7, #22]
 801361a:	b25b      	sxtb	r3, r3
 801361c:	e05d      	b.n	80136da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801361e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013622:	4933      	ldr	r1, [pc, #204]	; (80136f0 <etharp_update_arp_entry+0x148>)
 8013624:	4613      	mov	r3, r2
 8013626:	005b      	lsls	r3, r3, #1
 8013628:	4413      	add	r3, r2
 801362a:	00db      	lsls	r3, r3, #3
 801362c:	440b      	add	r3, r1
 801362e:	3314      	adds	r3, #20
 8013630:	2202      	movs	r2, #2
 8013632:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013638:	492d      	ldr	r1, [pc, #180]	; (80136f0 <etharp_update_arp_entry+0x148>)
 801363a:	4613      	mov	r3, r2
 801363c:	005b      	lsls	r3, r3, #1
 801363e:	4413      	add	r3, r2
 8013640:	00db      	lsls	r3, r3, #3
 8013642:	440b      	add	r3, r1
 8013644:	3308      	adds	r3, #8
 8013646:	68fa      	ldr	r2, [r7, #12]
 8013648:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801364a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801364e:	4613      	mov	r3, r2
 8013650:	005b      	lsls	r3, r3, #1
 8013652:	4413      	add	r3, r2
 8013654:	00db      	lsls	r3, r3, #3
 8013656:	3308      	adds	r3, #8
 8013658:	4a25      	ldr	r2, [pc, #148]	; (80136f0 <etharp_update_arp_entry+0x148>)
 801365a:	4413      	add	r3, r2
 801365c:	3304      	adds	r3, #4
 801365e:	2206      	movs	r2, #6
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	4618      	mov	r0, r3
 8013664:	f002 faef 	bl	8015c46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013668:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801366c:	4920      	ldr	r1, [pc, #128]	; (80136f0 <etharp_update_arp_entry+0x148>)
 801366e:	4613      	mov	r3, r2
 8013670:	005b      	lsls	r3, r3, #1
 8013672:	4413      	add	r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	440b      	add	r3, r1
 8013678:	3312      	adds	r3, #18
 801367a:	2200      	movs	r2, #0
 801367c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801367e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013682:	491b      	ldr	r1, [pc, #108]	; (80136f0 <etharp_update_arp_entry+0x148>)
 8013684:	4613      	mov	r3, r2
 8013686:	005b      	lsls	r3, r3, #1
 8013688:	4413      	add	r3, r2
 801368a:	00db      	lsls	r3, r3, #3
 801368c:	440b      	add	r3, r1
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d021      	beq.n	80136d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013694:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013698:	4915      	ldr	r1, [pc, #84]	; (80136f0 <etharp_update_arp_entry+0x148>)
 801369a:	4613      	mov	r3, r2
 801369c:	005b      	lsls	r3, r3, #1
 801369e:	4413      	add	r3, r2
 80136a0:	00db      	lsls	r3, r3, #3
 80136a2:	440b      	add	r3, r1
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80136a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80136ac:	4910      	ldr	r1, [pc, #64]	; (80136f0 <etharp_update_arp_entry+0x148>)
 80136ae:	4613      	mov	r3, r2
 80136b0:	005b      	lsls	r3, r3, #1
 80136b2:	4413      	add	r3, r2
 80136b4:	00db      	lsls	r3, r3, #3
 80136b6:	440b      	add	r3, r1
 80136b8:	2200      	movs	r2, #0
 80136ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80136c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136c6:	9300      	str	r3, [sp, #0]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6939      	ldr	r1, [r7, #16]
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f001 ff91 	bl	80155f4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80136d2:	6938      	ldr	r0, [r7, #16]
 80136d4:	f7f8 fd80 	bl	800c1d8 <pbuf_free>
  }
  return ERR_OK;
 80136d8:	2300      	movs	r3, #0
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3718      	adds	r7, #24
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	08019f88 	.word	0x08019f88
 80136e8:	0801a080 	.word	0x0801a080
 80136ec:	0801a000 	.word	0x0801a000
 80136f0:	20004b1c 	.word	0x20004b1c

080136f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80136fc:	2300      	movs	r3, #0
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	e01e      	b.n	8013740 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013702:	4913      	ldr	r1, [pc, #76]	; (8013750 <etharp_cleanup_netif+0x5c>)
 8013704:	68fa      	ldr	r2, [r7, #12]
 8013706:	4613      	mov	r3, r2
 8013708:	005b      	lsls	r3, r3, #1
 801370a:	4413      	add	r3, r2
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	440b      	add	r3, r1
 8013710:	3314      	adds	r3, #20
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013716:	7afb      	ldrb	r3, [r7, #11]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d00e      	beq.n	801373a <etharp_cleanup_netif+0x46>
 801371c:	490c      	ldr	r1, [pc, #48]	; (8013750 <etharp_cleanup_netif+0x5c>)
 801371e:	68fa      	ldr	r2, [r7, #12]
 8013720:	4613      	mov	r3, r2
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	00db      	lsls	r3, r3, #3
 8013728:	440b      	add	r3, r1
 801372a:	3308      	adds	r3, #8
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	429a      	cmp	r2, r3
 8013732:	d102      	bne.n	801373a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f7ff fce5 	bl	8013104 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	3301      	adds	r3, #1
 801373e:	60fb      	str	r3, [r7, #12]
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2b09      	cmp	r3, #9
 8013744:	dddd      	ble.n	8013702 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013746:	bf00      	nop
 8013748:	bf00      	nop
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	20004b1c 	.word	0x20004b1c

08013754 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013754:	b5b0      	push	{r4, r5, r7, lr}
 8013756:	b08a      	sub	sp, #40	; 0x28
 8013758:	af04      	add	r7, sp, #16
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d107      	bne.n	8013774 <etharp_input+0x20>
 8013764:	4b3d      	ldr	r3, [pc, #244]	; (801385c <etharp_input+0x108>)
 8013766:	f240 228a 	movw	r2, #650	; 0x28a
 801376a:	493d      	ldr	r1, [pc, #244]	; (8013860 <etharp_input+0x10c>)
 801376c:	483d      	ldr	r0, [pc, #244]	; (8013864 <etharp_input+0x110>)
 801376e:	f002 faf5 	bl	8015d5c <iprintf>
 8013772:	e06f      	b.n	8013854 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	881b      	ldrh	r3, [r3, #0]
 801377e:	b29b      	uxth	r3, r3
 8013780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013784:	d10c      	bne.n	80137a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801378a:	2b06      	cmp	r3, #6
 801378c:	d108      	bne.n	80137a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801378e:	693b      	ldr	r3, [r7, #16]
 8013790:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013792:	2b04      	cmp	r3, #4
 8013794:	d104      	bne.n	80137a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	885b      	ldrh	r3, [r3, #2]
 801379a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801379c:	2b08      	cmp	r3, #8
 801379e:	d003      	beq.n	80137a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f7f8 fd19 	bl	800c1d8 <pbuf_free>
    return;
 80137a6:	e055      	b.n	8013854 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	330e      	adds	r3, #14
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	3318      	adds	r3, #24
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	3304      	adds	r3, #4
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <etharp_input+0x74>
    for_us = 0;
 80137c2:	2300      	movs	r3, #0
 80137c4:	75fb      	strb	r3, [r7, #23]
 80137c6:	e009      	b.n	80137dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80137c8:	68ba      	ldr	r2, [r7, #8]
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	3304      	adds	r3, #4
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	bf0c      	ite	eq
 80137d4:	2301      	moveq	r3, #1
 80137d6:	2300      	movne	r3, #0
 80137d8:	b2db      	uxtb	r3, r3
 80137da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	f103 0208 	add.w	r2, r3, #8
 80137e2:	7dfb      	ldrb	r3, [r7, #23]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d001      	beq.n	80137ec <etharp_input+0x98>
 80137e8:	2301      	movs	r3, #1
 80137ea:	e000      	b.n	80137ee <etharp_input+0x9a>
 80137ec:	2302      	movs	r3, #2
 80137ee:	f107 010c 	add.w	r1, r7, #12
 80137f2:	6838      	ldr	r0, [r7, #0]
 80137f4:	f7ff fed8 	bl	80135a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80137f8:	693b      	ldr	r3, [r7, #16]
 80137fa:	88db      	ldrh	r3, [r3, #6]
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013802:	d003      	beq.n	801380c <etharp_input+0xb8>
 8013804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013808:	d01e      	beq.n	8013848 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801380a:	e020      	b.n	801384e <etharp_input+0xfa>
      if (for_us) {
 801380c:	7dfb      	ldrb	r3, [r7, #23]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d01c      	beq.n	801384c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013828:	693a      	ldr	r2, [r7, #16]
 801382a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801382c:	2102      	movs	r1, #2
 801382e:	9103      	str	r1, [sp, #12]
 8013830:	f107 010c 	add.w	r1, r7, #12
 8013834:	9102      	str	r1, [sp, #8]
 8013836:	9201      	str	r2, [sp, #4]
 8013838:	9300      	str	r3, [sp, #0]
 801383a:	462b      	mov	r3, r5
 801383c:	4622      	mov	r2, r4
 801383e:	4601      	mov	r1, r0
 8013840:	6838      	ldr	r0, [r7, #0]
 8013842:	f000 faeb 	bl	8013e1c <etharp_raw>
      break;
 8013846:	e001      	b.n	801384c <etharp_input+0xf8>
      break;
 8013848:	bf00      	nop
 801384a:	e000      	b.n	801384e <etharp_input+0xfa>
      break;
 801384c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f7f8 fcc2 	bl	800c1d8 <pbuf_free>
}
 8013854:	3718      	adds	r7, #24
 8013856:	46bd      	mov	sp, r7
 8013858:	bdb0      	pop	{r4, r5, r7, pc}
 801385a:	bf00      	nop
 801385c:	08019f88 	.word	0x08019f88
 8013860:	0801a0d8 	.word	0x0801a0d8
 8013864:	0801a000 	.word	0x0801a000

08013868 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af02      	add	r7, sp, #8
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	4613      	mov	r3, r2
 8013874:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013876:	79fa      	ldrb	r2, [r7, #7]
 8013878:	4944      	ldr	r1, [pc, #272]	; (801398c <etharp_output_to_arp_index+0x124>)
 801387a:	4613      	mov	r3, r2
 801387c:	005b      	lsls	r3, r3, #1
 801387e:	4413      	add	r3, r2
 8013880:	00db      	lsls	r3, r3, #3
 8013882:	440b      	add	r3, r1
 8013884:	3314      	adds	r3, #20
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	2b01      	cmp	r3, #1
 801388a:	d806      	bhi.n	801389a <etharp_output_to_arp_index+0x32>
 801388c:	4b40      	ldr	r3, [pc, #256]	; (8013990 <etharp_output_to_arp_index+0x128>)
 801388e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013892:	4940      	ldr	r1, [pc, #256]	; (8013994 <etharp_output_to_arp_index+0x12c>)
 8013894:	4840      	ldr	r0, [pc, #256]	; (8013998 <etharp_output_to_arp_index+0x130>)
 8013896:	f002 fa61 	bl	8015d5c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801389a:	79fa      	ldrb	r2, [r7, #7]
 801389c:	493b      	ldr	r1, [pc, #236]	; (801398c <etharp_output_to_arp_index+0x124>)
 801389e:	4613      	mov	r3, r2
 80138a0:	005b      	lsls	r3, r3, #1
 80138a2:	4413      	add	r3, r2
 80138a4:	00db      	lsls	r3, r3, #3
 80138a6:	440b      	add	r3, r1
 80138a8:	3314      	adds	r3, #20
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	2b02      	cmp	r3, #2
 80138ae:	d153      	bne.n	8013958 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80138b0:	79fa      	ldrb	r2, [r7, #7]
 80138b2:	4936      	ldr	r1, [pc, #216]	; (801398c <etharp_output_to_arp_index+0x124>)
 80138b4:	4613      	mov	r3, r2
 80138b6:	005b      	lsls	r3, r3, #1
 80138b8:	4413      	add	r3, r2
 80138ba:	00db      	lsls	r3, r3, #3
 80138bc:	440b      	add	r3, r1
 80138be:	3312      	adds	r3, #18
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80138c6:	d919      	bls.n	80138fc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80138c8:	79fa      	ldrb	r2, [r7, #7]
 80138ca:	4613      	mov	r3, r2
 80138cc:	005b      	lsls	r3, r3, #1
 80138ce:	4413      	add	r3, r2
 80138d0:	00db      	lsls	r3, r3, #3
 80138d2:	4a2e      	ldr	r2, [pc, #184]	; (801398c <etharp_output_to_arp_index+0x124>)
 80138d4:	4413      	add	r3, r2
 80138d6:	3304      	adds	r3, #4
 80138d8:	4619      	mov	r1, r3
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 fb4c 	bl	8013f78 <etharp_request>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d138      	bne.n	8013958 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80138e6:	79fa      	ldrb	r2, [r7, #7]
 80138e8:	4928      	ldr	r1, [pc, #160]	; (801398c <etharp_output_to_arp_index+0x124>)
 80138ea:	4613      	mov	r3, r2
 80138ec:	005b      	lsls	r3, r3, #1
 80138ee:	4413      	add	r3, r2
 80138f0:	00db      	lsls	r3, r3, #3
 80138f2:	440b      	add	r3, r1
 80138f4:	3314      	adds	r3, #20
 80138f6:	2203      	movs	r2, #3
 80138f8:	701a      	strb	r2, [r3, #0]
 80138fa:	e02d      	b.n	8013958 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80138fc:	79fa      	ldrb	r2, [r7, #7]
 80138fe:	4923      	ldr	r1, [pc, #140]	; (801398c <etharp_output_to_arp_index+0x124>)
 8013900:	4613      	mov	r3, r2
 8013902:	005b      	lsls	r3, r3, #1
 8013904:	4413      	add	r3, r2
 8013906:	00db      	lsls	r3, r3, #3
 8013908:	440b      	add	r3, r1
 801390a:	3312      	adds	r3, #18
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013912:	d321      	bcc.n	8013958 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013914:	79fa      	ldrb	r2, [r7, #7]
 8013916:	4613      	mov	r3, r2
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	4413      	add	r3, r2
 801391c:	00db      	lsls	r3, r3, #3
 801391e:	4a1b      	ldr	r2, [pc, #108]	; (801398c <etharp_output_to_arp_index+0x124>)
 8013920:	4413      	add	r3, r2
 8013922:	1d19      	adds	r1, r3, #4
 8013924:	79fa      	ldrb	r2, [r7, #7]
 8013926:	4613      	mov	r3, r2
 8013928:	005b      	lsls	r3, r3, #1
 801392a:	4413      	add	r3, r2
 801392c:	00db      	lsls	r3, r3, #3
 801392e:	3308      	adds	r3, #8
 8013930:	4a16      	ldr	r2, [pc, #88]	; (801398c <etharp_output_to_arp_index+0x124>)
 8013932:	4413      	add	r3, r2
 8013934:	3304      	adds	r3, #4
 8013936:	461a      	mov	r2, r3
 8013938:	68f8      	ldr	r0, [r7, #12]
 801393a:	f000 fafb 	bl	8013f34 <etharp_request_dst>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d109      	bne.n	8013958 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013944:	79fa      	ldrb	r2, [r7, #7]
 8013946:	4911      	ldr	r1, [pc, #68]	; (801398c <etharp_output_to_arp_index+0x124>)
 8013948:	4613      	mov	r3, r2
 801394a:	005b      	lsls	r3, r3, #1
 801394c:	4413      	add	r3, r2
 801394e:	00db      	lsls	r3, r3, #3
 8013950:	440b      	add	r3, r1
 8013952:	3314      	adds	r3, #20
 8013954:	2203      	movs	r2, #3
 8013956:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801395e:	79fa      	ldrb	r2, [r7, #7]
 8013960:	4613      	mov	r3, r2
 8013962:	005b      	lsls	r3, r3, #1
 8013964:	4413      	add	r3, r2
 8013966:	00db      	lsls	r3, r3, #3
 8013968:	3308      	adds	r3, #8
 801396a:	4a08      	ldr	r2, [pc, #32]	; (801398c <etharp_output_to_arp_index+0x124>)
 801396c:	4413      	add	r3, r2
 801396e:	3304      	adds	r3, #4
 8013970:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013974:	9200      	str	r2, [sp, #0]
 8013976:	460a      	mov	r2, r1
 8013978:	68b9      	ldr	r1, [r7, #8]
 801397a:	68f8      	ldr	r0, [r7, #12]
 801397c:	f001 fe3a 	bl	80155f4 <ethernet_output>
 8013980:	4603      	mov	r3, r0
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}
 801398a:	bf00      	nop
 801398c:	20004b1c 	.word	0x20004b1c
 8013990:	08019f88 	.word	0x08019f88
 8013994:	0801a0f8 	.word	0x0801a0f8
 8013998:	0801a000 	.word	0x0801a000

0801399c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b08a      	sub	sp, #40	; 0x28
 80139a0:	af02      	add	r7, sp, #8
 80139a2:	60f8      	str	r0, [r7, #12]
 80139a4:	60b9      	str	r1, [r7, #8]
 80139a6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d106      	bne.n	80139c0 <etharp_output+0x24>
 80139b2:	4b73      	ldr	r3, [pc, #460]	; (8013b80 <etharp_output+0x1e4>)
 80139b4:	f240 321e 	movw	r2, #798	; 0x31e
 80139b8:	4972      	ldr	r1, [pc, #456]	; (8013b84 <etharp_output+0x1e8>)
 80139ba:	4873      	ldr	r0, [pc, #460]	; (8013b88 <etharp_output+0x1ec>)
 80139bc:	f002 f9ce 	bl	8015d5c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d106      	bne.n	80139d4 <etharp_output+0x38>
 80139c6:	4b6e      	ldr	r3, [pc, #440]	; (8013b80 <etharp_output+0x1e4>)
 80139c8:	f240 321f 	movw	r2, #799	; 0x31f
 80139cc:	496f      	ldr	r1, [pc, #444]	; (8013b8c <etharp_output+0x1f0>)
 80139ce:	486e      	ldr	r0, [pc, #440]	; (8013b88 <etharp_output+0x1ec>)
 80139d0:	f002 f9c4 	bl	8015d5c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d106      	bne.n	80139e8 <etharp_output+0x4c>
 80139da:	4b69      	ldr	r3, [pc, #420]	; (8013b80 <etharp_output+0x1e4>)
 80139dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80139e0:	496b      	ldr	r1, [pc, #428]	; (8013b90 <etharp_output+0x1f4>)
 80139e2:	4869      	ldr	r0, [pc, #420]	; (8013b88 <etharp_output+0x1ec>)
 80139e4:	f002 f9ba 	bl	8015d5c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	68f9      	ldr	r1, [r7, #12]
 80139ee:	4618      	mov	r0, r3
 80139f0:	f000 fef8 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d002      	beq.n	8013a00 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80139fa:	4b66      	ldr	r3, [pc, #408]	; (8013b94 <etharp_output+0x1f8>)
 80139fc:	61fb      	str	r3, [r7, #28]
 80139fe:	e0af      	b.n	8013b60 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013a08:	2be0      	cmp	r3, #224	; 0xe0
 8013a0a:	d118      	bne.n	8013a3e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013a10:	2300      	movs	r3, #0
 8013a12:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013a14:	235e      	movs	r3, #94	; 0x5e
 8013a16:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a22:	b2db      	uxtb	r3, r3
 8013a24:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	3302      	adds	r3, #2
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	3303      	adds	r3, #3
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013a36:	f107 0310 	add.w	r3, r7, #16
 8013a3a:	61fb      	str	r3, [r7, #28]
 8013a3c:	e090      	b.n	8013b60 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	3304      	adds	r3, #4
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	405a      	eors	r2, r3
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	3308      	adds	r3, #8
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4013      	ands	r3, r2
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d012      	beq.n	8013a7c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013a5c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d00b      	beq.n	8013a7c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	330c      	adds	r3, #12
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d003      	beq.n	8013a76 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	330c      	adds	r3, #12
 8013a72:	61bb      	str	r3, [r7, #24]
 8013a74:	e002      	b.n	8013a7c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013a76:	f06f 0303 	mvn.w	r3, #3
 8013a7a:	e07d      	b.n	8013b78 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013a7c:	4b46      	ldr	r3, [pc, #280]	; (8013b98 <etharp_output+0x1fc>)
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	4619      	mov	r1, r3
 8013a82:	4a46      	ldr	r2, [pc, #280]	; (8013b9c <etharp_output+0x200>)
 8013a84:	460b      	mov	r3, r1
 8013a86:	005b      	lsls	r3, r3, #1
 8013a88:	440b      	add	r3, r1
 8013a8a:	00db      	lsls	r3, r3, #3
 8013a8c:	4413      	add	r3, r2
 8013a8e:	3314      	adds	r3, #20
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	2b01      	cmp	r3, #1
 8013a94:	d925      	bls.n	8013ae2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013a96:	4b40      	ldr	r3, [pc, #256]	; (8013b98 <etharp_output+0x1fc>)
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	4a3f      	ldr	r2, [pc, #252]	; (8013b9c <etharp_output+0x200>)
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	005b      	lsls	r3, r3, #1
 8013aa2:	440b      	add	r3, r1
 8013aa4:	00db      	lsls	r3, r3, #3
 8013aa6:	4413      	add	r3, r2
 8013aa8:	3308      	adds	r3, #8
 8013aaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d117      	bne.n	8013ae2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013ab2:	69bb      	ldr	r3, [r7, #24]
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	4b38      	ldr	r3, [pc, #224]	; (8013b98 <etharp_output+0x1fc>)
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	4618      	mov	r0, r3
 8013abc:	4937      	ldr	r1, [pc, #220]	; (8013b9c <etharp_output+0x200>)
 8013abe:	4603      	mov	r3, r0
 8013ac0:	005b      	lsls	r3, r3, #1
 8013ac2:	4403      	add	r3, r0
 8013ac4:	00db      	lsls	r3, r3, #3
 8013ac6:	440b      	add	r3, r1
 8013ac8:	3304      	adds	r3, #4
 8013aca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d108      	bne.n	8013ae2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013ad0:	4b31      	ldr	r3, [pc, #196]	; (8013b98 <etharp_output+0x1fc>)
 8013ad2:	781b      	ldrb	r3, [r3, #0]
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	68b9      	ldr	r1, [r7, #8]
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	f7ff fec5 	bl	8013868 <etharp_output_to_arp_index>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	e04a      	b.n	8013b78 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	75fb      	strb	r3, [r7, #23]
 8013ae6:	e031      	b.n	8013b4c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013ae8:	7dfa      	ldrb	r2, [r7, #23]
 8013aea:	492c      	ldr	r1, [pc, #176]	; (8013b9c <etharp_output+0x200>)
 8013aec:	4613      	mov	r3, r2
 8013aee:	005b      	lsls	r3, r3, #1
 8013af0:	4413      	add	r3, r2
 8013af2:	00db      	lsls	r3, r3, #3
 8013af4:	440b      	add	r3, r1
 8013af6:	3314      	adds	r3, #20
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d923      	bls.n	8013b46 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013afe:	7dfa      	ldrb	r2, [r7, #23]
 8013b00:	4926      	ldr	r1, [pc, #152]	; (8013b9c <etharp_output+0x200>)
 8013b02:	4613      	mov	r3, r2
 8013b04:	005b      	lsls	r3, r3, #1
 8013b06:	4413      	add	r3, r2
 8013b08:	00db      	lsls	r3, r3, #3
 8013b0a:	440b      	add	r3, r1
 8013b0c:	3308      	adds	r3, #8
 8013b0e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013b10:	68fa      	ldr	r2, [r7, #12]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d117      	bne.n	8013b46 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	6819      	ldr	r1, [r3, #0]
 8013b1a:	7dfa      	ldrb	r2, [r7, #23]
 8013b1c:	481f      	ldr	r0, [pc, #124]	; (8013b9c <etharp_output+0x200>)
 8013b1e:	4613      	mov	r3, r2
 8013b20:	005b      	lsls	r3, r3, #1
 8013b22:	4413      	add	r3, r2
 8013b24:	00db      	lsls	r3, r3, #3
 8013b26:	4403      	add	r3, r0
 8013b28:	3304      	adds	r3, #4
 8013b2a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013b2c:	4299      	cmp	r1, r3
 8013b2e:	d10a      	bne.n	8013b46 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013b30:	4a19      	ldr	r2, [pc, #100]	; (8013b98 <etharp_output+0x1fc>)
 8013b32:	7dfb      	ldrb	r3, [r7, #23]
 8013b34:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013b36:	7dfb      	ldrb	r3, [r7, #23]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	68b9      	ldr	r1, [r7, #8]
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f7ff fe93 	bl	8013868 <etharp_output_to_arp_index>
 8013b42:	4603      	mov	r3, r0
 8013b44:	e018      	b.n	8013b78 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013b46:	7dfb      	ldrb	r3, [r7, #23]
 8013b48:	3301      	adds	r3, #1
 8013b4a:	75fb      	strb	r3, [r7, #23]
 8013b4c:	7dfb      	ldrb	r3, [r7, #23]
 8013b4e:	2b09      	cmp	r3, #9
 8013b50:	d9ca      	bls.n	8013ae8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013b52:	68ba      	ldr	r2, [r7, #8]
 8013b54:	69b9      	ldr	r1, [r7, #24]
 8013b56:	68f8      	ldr	r0, [r7, #12]
 8013b58:	f000 f822 	bl	8013ba0 <etharp_query>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	e00b      	b.n	8013b78 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b6a:	9300      	str	r3, [sp, #0]
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	68b9      	ldr	r1, [r7, #8]
 8013b70:	68f8      	ldr	r0, [r7, #12]
 8013b72:	f001 fd3f 	bl	80155f4 <ethernet_output>
 8013b76:	4603      	mov	r3, r0
}
 8013b78:	4618      	mov	r0, r3
 8013b7a:	3720      	adds	r7, #32
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	bd80      	pop	{r7, pc}
 8013b80:	08019f88 	.word	0x08019f88
 8013b84:	0801a0d8 	.word	0x0801a0d8
 8013b88:	0801a000 	.word	0x0801a000
 8013b8c:	0801a128 	.word	0x0801a128
 8013b90:	0801a0c8 	.word	0x0801a0c8
 8013b94:	0801a7c4 	.word	0x0801a7c4
 8013b98:	20004c0c 	.word	0x20004c0c
 8013b9c:	20004b1c 	.word	0x20004b1c

08013ba0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b08c      	sub	sp, #48	; 0x30
 8013ba4:	af02      	add	r7, sp, #8
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	3326      	adds	r3, #38	; 0x26
 8013bb0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013bb2:	23ff      	movs	r3, #255	; 0xff
 8013bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	68f9      	ldr	r1, [r7, #12]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 fe0e 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d10c      	bne.n	8013be8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013bce:	68bb      	ldr	r3, [r7, #8]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013bd6:	2be0      	cmp	r3, #224	; 0xe0
 8013bd8:	d006      	beq.n	8013be8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d003      	beq.n	8013be8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d102      	bne.n	8013bee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013be8:	f06f 030f 	mvn.w	r3, #15
 8013bec:	e101      	b.n	8013df2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013bee:	68fa      	ldr	r2, [r7, #12]
 8013bf0:	2101      	movs	r1, #1
 8013bf2:	68b8      	ldr	r0, [r7, #8]
 8013bf4:	f7ff fb60 	bl	80132b8 <etharp_find_entry>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013bfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	da02      	bge.n	8013c0a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013c04:	8a7b      	ldrh	r3, [r7, #18]
 8013c06:	b25b      	sxtb	r3, r3
 8013c08:	e0f3      	b.n	8013df2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013c0a:	8a7b      	ldrh	r3, [r7, #18]
 8013c0c:	2b7e      	cmp	r3, #126	; 0x7e
 8013c0e:	d906      	bls.n	8013c1e <etharp_query+0x7e>
 8013c10:	4b7a      	ldr	r3, [pc, #488]	; (8013dfc <etharp_query+0x25c>)
 8013c12:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013c16:	497a      	ldr	r1, [pc, #488]	; (8013e00 <etharp_query+0x260>)
 8013c18:	487a      	ldr	r0, [pc, #488]	; (8013e04 <etharp_query+0x264>)
 8013c1a:	f002 f89f 	bl	8015d5c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013c1e:	8a7b      	ldrh	r3, [r7, #18]
 8013c20:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013c22:	7c7a      	ldrb	r2, [r7, #17]
 8013c24:	4978      	ldr	r1, [pc, #480]	; (8013e08 <etharp_query+0x268>)
 8013c26:	4613      	mov	r3, r2
 8013c28:	005b      	lsls	r3, r3, #1
 8013c2a:	4413      	add	r3, r2
 8013c2c:	00db      	lsls	r3, r3, #3
 8013c2e:	440b      	add	r3, r1
 8013c30:	3314      	adds	r3, #20
 8013c32:	781b      	ldrb	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d115      	bne.n	8013c64 <etharp_query+0xc4>
    is_new_entry = 1;
 8013c38:	2301      	movs	r3, #1
 8013c3a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013c3c:	7c7a      	ldrb	r2, [r7, #17]
 8013c3e:	4972      	ldr	r1, [pc, #456]	; (8013e08 <etharp_query+0x268>)
 8013c40:	4613      	mov	r3, r2
 8013c42:	005b      	lsls	r3, r3, #1
 8013c44:	4413      	add	r3, r2
 8013c46:	00db      	lsls	r3, r3, #3
 8013c48:	440b      	add	r3, r1
 8013c4a:	3314      	adds	r3, #20
 8013c4c:	2201      	movs	r2, #1
 8013c4e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013c50:	7c7a      	ldrb	r2, [r7, #17]
 8013c52:	496d      	ldr	r1, [pc, #436]	; (8013e08 <etharp_query+0x268>)
 8013c54:	4613      	mov	r3, r2
 8013c56:	005b      	lsls	r3, r3, #1
 8013c58:	4413      	add	r3, r2
 8013c5a:	00db      	lsls	r3, r3, #3
 8013c5c:	440b      	add	r3, r1
 8013c5e:	3308      	adds	r3, #8
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013c64:	7c7a      	ldrb	r2, [r7, #17]
 8013c66:	4968      	ldr	r1, [pc, #416]	; (8013e08 <etharp_query+0x268>)
 8013c68:	4613      	mov	r3, r2
 8013c6a:	005b      	lsls	r3, r3, #1
 8013c6c:	4413      	add	r3, r2
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	440b      	add	r3, r1
 8013c72:	3314      	adds	r3, #20
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	d011      	beq.n	8013c9e <etharp_query+0xfe>
 8013c7a:	7c7a      	ldrb	r2, [r7, #17]
 8013c7c:	4962      	ldr	r1, [pc, #392]	; (8013e08 <etharp_query+0x268>)
 8013c7e:	4613      	mov	r3, r2
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	4413      	add	r3, r2
 8013c84:	00db      	lsls	r3, r3, #3
 8013c86:	440b      	add	r3, r1
 8013c88:	3314      	adds	r3, #20
 8013c8a:	781b      	ldrb	r3, [r3, #0]
 8013c8c:	2b01      	cmp	r3, #1
 8013c8e:	d806      	bhi.n	8013c9e <etharp_query+0xfe>
 8013c90:	4b5a      	ldr	r3, [pc, #360]	; (8013dfc <etharp_query+0x25c>)
 8013c92:	f240 32cd 	movw	r2, #973	; 0x3cd
 8013c96:	495d      	ldr	r1, [pc, #372]	; (8013e0c <etharp_query+0x26c>)
 8013c98:	485a      	ldr	r0, [pc, #360]	; (8013e04 <etharp_query+0x264>)
 8013c9a:	f002 f85f 	bl	8015d5c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013c9e:	6a3b      	ldr	r3, [r7, #32]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d102      	bne.n	8013caa <etharp_query+0x10a>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d10c      	bne.n	8013cc4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013caa:	68b9      	ldr	r1, [r7, #8]
 8013cac:	68f8      	ldr	r0, [r7, #12]
 8013cae:	f000 f963 	bl	8013f78 <etharp_request>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d102      	bne.n	8013cc4 <etharp_query+0x124>
      return result;
 8013cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013cc2:	e096      	b.n	8013df2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d106      	bne.n	8013cd8 <etharp_query+0x138>
 8013cca:	4b4c      	ldr	r3, [pc, #304]	; (8013dfc <etharp_query+0x25c>)
 8013ccc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013cd0:	494f      	ldr	r1, [pc, #316]	; (8013e10 <etharp_query+0x270>)
 8013cd2:	484c      	ldr	r0, [pc, #304]	; (8013e04 <etharp_query+0x264>)
 8013cd4:	f002 f842 	bl	8015d5c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013cd8:	7c7a      	ldrb	r2, [r7, #17]
 8013cda:	494b      	ldr	r1, [pc, #300]	; (8013e08 <etharp_query+0x268>)
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	3314      	adds	r3, #20
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d917      	bls.n	8013d1e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013cee:	4a49      	ldr	r2, [pc, #292]	; (8013e14 <etharp_query+0x274>)
 8013cf0:	7c7b      	ldrb	r3, [r7, #17]
 8013cf2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013cf4:	7c7a      	ldrb	r2, [r7, #17]
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	005b      	lsls	r3, r3, #1
 8013cfa:	4413      	add	r3, r2
 8013cfc:	00db      	lsls	r3, r3, #3
 8013cfe:	3308      	adds	r3, #8
 8013d00:	4a41      	ldr	r2, [pc, #260]	; (8013e08 <etharp_query+0x268>)
 8013d02:	4413      	add	r3, r2
 8013d04:	3304      	adds	r3, #4
 8013d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d0a:	9200      	str	r2, [sp, #0]
 8013d0c:	697a      	ldr	r2, [r7, #20]
 8013d0e:	6879      	ldr	r1, [r7, #4]
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f001 fc6f 	bl	80155f4 <ethernet_output>
 8013d16:	4603      	mov	r3, r0
 8013d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d1c:	e067      	b.n	8013dee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013d1e:	7c7a      	ldrb	r2, [r7, #17]
 8013d20:	4939      	ldr	r1, [pc, #228]	; (8013e08 <etharp_query+0x268>)
 8013d22:	4613      	mov	r3, r2
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	4413      	add	r3, r2
 8013d28:	00db      	lsls	r3, r3, #3
 8013d2a:	440b      	add	r3, r1
 8013d2c:	3314      	adds	r3, #20
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	d15c      	bne.n	8013dee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013d34:	2300      	movs	r3, #0
 8013d36:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013d3c:	e01c      	b.n	8013d78 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	895a      	ldrh	r2, [r3, #10]
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	891b      	ldrh	r3, [r3, #8]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d10a      	bne.n	8013d60 <etharp_query+0x1c0>
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d006      	beq.n	8013d60 <etharp_query+0x1c0>
 8013d52:	4b2a      	ldr	r3, [pc, #168]	; (8013dfc <etharp_query+0x25c>)
 8013d54:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013d58:	492f      	ldr	r1, [pc, #188]	; (8013e18 <etharp_query+0x278>)
 8013d5a:	482a      	ldr	r0, [pc, #168]	; (8013e04 <etharp_query+0x264>)
 8013d5c:	f001 fffe 	bl	8015d5c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	7b1b      	ldrb	r3, [r3, #12]
 8013d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d002      	beq.n	8013d72 <etharp_query+0x1d2>
        copy_needed = 1;
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	61bb      	str	r3, [r7, #24]
        break;
 8013d70:	e005      	b.n	8013d7e <etharp_query+0x1de>
      }
      p = p->next;
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d1df      	bne.n	8013d3e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013d7e:	69bb      	ldr	r3, [r7, #24]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d007      	beq.n	8013d94 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013d8a:	200e      	movs	r0, #14
 8013d8c:	f7f8 fc8c 	bl	800c6a8 <pbuf_clone>
 8013d90:	61f8      	str	r0, [r7, #28]
 8013d92:	e004      	b.n	8013d9e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013d98:	69f8      	ldr	r0, [r7, #28]
 8013d9a:	f7f8 fac3 	bl	800c324 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d021      	beq.n	8013de8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013da4:	7c7a      	ldrb	r2, [r7, #17]
 8013da6:	4918      	ldr	r1, [pc, #96]	; (8013e08 <etharp_query+0x268>)
 8013da8:	4613      	mov	r3, r2
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	4413      	add	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	440b      	add	r3, r1
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d00a      	beq.n	8013dce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013db8:	7c7a      	ldrb	r2, [r7, #17]
 8013dba:	4913      	ldr	r1, [pc, #76]	; (8013e08 <etharp_query+0x268>)
 8013dbc:	4613      	mov	r3, r2
 8013dbe:	005b      	lsls	r3, r3, #1
 8013dc0:	4413      	add	r3, r2
 8013dc2:	00db      	lsls	r3, r3, #3
 8013dc4:	440b      	add	r3, r1
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7f8 fa05 	bl	800c1d8 <pbuf_free>
      }
      arp_table[i].q = p;
 8013dce:	7c7a      	ldrb	r2, [r7, #17]
 8013dd0:	490d      	ldr	r1, [pc, #52]	; (8013e08 <etharp_query+0x268>)
 8013dd2:	4613      	mov	r3, r2
 8013dd4:	005b      	lsls	r3, r3, #1
 8013dd6:	4413      	add	r3, r2
 8013dd8:	00db      	lsls	r3, r3, #3
 8013dda:	440b      	add	r3, r1
 8013ddc:	69fa      	ldr	r2, [r7, #28]
 8013dde:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013de0:	2300      	movs	r3, #0
 8013de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013de6:	e002      	b.n	8013dee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013de8:	23ff      	movs	r3, #255	; 0xff
 8013dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	3728      	adds	r7, #40	; 0x28
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	08019f88 	.word	0x08019f88
 8013e00:	0801a134 	.word	0x0801a134
 8013e04:	0801a000 	.word	0x0801a000
 8013e08:	20004b1c 	.word	0x20004b1c
 8013e0c:	0801a144 	.word	0x0801a144
 8013e10:	0801a128 	.word	0x0801a128
 8013e14:	20004c0c 	.word	0x20004c0c
 8013e18:	0801a16c 	.word	0x0801a16c

08013e1c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08a      	sub	sp, #40	; 0x28
 8013e20:	af02      	add	r7, sp, #8
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	607a      	str	r2, [r7, #4]
 8013e28:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d106      	bne.n	8013e42 <etharp_raw+0x26>
 8013e34:	4b3a      	ldr	r3, [pc, #232]	; (8013f20 <etharp_raw+0x104>)
 8013e36:	f240 4257 	movw	r2, #1111	; 0x457
 8013e3a:	493a      	ldr	r1, [pc, #232]	; (8013f24 <etharp_raw+0x108>)
 8013e3c:	483a      	ldr	r0, [pc, #232]	; (8013f28 <etharp_raw+0x10c>)
 8013e3e:	f001 ff8d 	bl	8015d5c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013e42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e46:	211c      	movs	r1, #28
 8013e48:	200e      	movs	r0, #14
 8013e4a:	f7f7 fee1 	bl	800bc10 <pbuf_alloc>
 8013e4e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013e50:	69bb      	ldr	r3, [r7, #24]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d102      	bne.n	8013e5c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e5a:	e05d      	b.n	8013f18 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013e5c:	69bb      	ldr	r3, [r7, #24]
 8013e5e:	895b      	ldrh	r3, [r3, #10]
 8013e60:	2b1b      	cmp	r3, #27
 8013e62:	d806      	bhi.n	8013e72 <etharp_raw+0x56>
 8013e64:	4b2e      	ldr	r3, [pc, #184]	; (8013f20 <etharp_raw+0x104>)
 8013e66:	f240 4262 	movw	r2, #1122	; 0x462
 8013e6a:	4930      	ldr	r1, [pc, #192]	; (8013f2c <etharp_raw+0x110>)
 8013e6c:	482e      	ldr	r0, [pc, #184]	; (8013f28 <etharp_raw+0x10c>)
 8013e6e:	f001 ff75 	bl	8015d5c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	685b      	ldr	r3, [r3, #4]
 8013e76:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013e78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7f6 fe00 	bl	800aa80 <lwip_htons>
 8013e80:	4603      	mov	r3, r0
 8013e82:	461a      	mov	r2, r3
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013e8e:	2b06      	cmp	r3, #6
 8013e90:	d006      	beq.n	8013ea0 <etharp_raw+0x84>
 8013e92:	4b23      	ldr	r3, [pc, #140]	; (8013f20 <etharp_raw+0x104>)
 8013e94:	f240 4269 	movw	r2, #1129	; 0x469
 8013e98:	4925      	ldr	r1, [pc, #148]	; (8013f30 <etharp_raw+0x114>)
 8013e9a:	4823      	ldr	r0, [pc, #140]	; (8013f28 <etharp_raw+0x10c>)
 8013e9c:	f001 ff5e 	bl	8015d5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	3308      	adds	r3, #8
 8013ea4:	2206      	movs	r2, #6
 8013ea6:	6839      	ldr	r1, [r7, #0]
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f001 fecc 	bl	8015c46 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	3312      	adds	r3, #18
 8013eb2:	2206      	movs	r2, #6
 8013eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f001 fec5 	bl	8015c46 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	330e      	adds	r3, #14
 8013ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ec2:	6812      	ldr	r2, [r2, #0]
 8013ec4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	3318      	adds	r3, #24
 8013eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ecc:	6812      	ldr	r2, [r2, #0]
 8013ece:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	701a      	strb	r2, [r3, #0]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	f042 0201 	orr.w	r2, r2, #1
 8013edc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	f042 0208 	orr.w	r2, r2, #8
 8013ee6:	709a      	strb	r2, [r3, #2]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	2206      	movs	r2, #6
 8013ef0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	2204      	movs	r2, #4
 8013ef6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013ef8:	f640 0306 	movw	r3, #2054	; 0x806
 8013efc:	9300      	str	r3, [sp, #0]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	68ba      	ldr	r2, [r7, #8]
 8013f02:	69b9      	ldr	r1, [r7, #24]
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f001 fb75 	bl	80155f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013f0a:	69b8      	ldr	r0, [r7, #24]
 8013f0c:	f7f8 f964 	bl	800c1d8 <pbuf_free>
  p = NULL;
 8013f10:	2300      	movs	r3, #0
 8013f12:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013f14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3720      	adds	r7, #32
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	08019f88 	.word	0x08019f88
 8013f24:	0801a0d8 	.word	0x0801a0d8
 8013f28:	0801a000 	.word	0x0801a000
 8013f2c:	0801a188 	.word	0x0801a188
 8013f30:	0801a1bc 	.word	0x0801a1bc

08013f34 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b088      	sub	sp, #32
 8013f38:	af04      	add	r7, sp, #16
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013f50:	2201      	movs	r2, #1
 8013f52:	9203      	str	r2, [sp, #12]
 8013f54:	68ba      	ldr	r2, [r7, #8]
 8013f56:	9202      	str	r2, [sp, #8]
 8013f58:	4a06      	ldr	r2, [pc, #24]	; (8013f74 <etharp_request_dst+0x40>)
 8013f5a:	9201      	str	r2, [sp, #4]
 8013f5c:	9300      	str	r3, [sp, #0]
 8013f5e:	4603      	mov	r3, r0
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	f7ff ff5a 	bl	8013e1c <etharp_raw>
 8013f68:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	3710      	adds	r7, #16
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	bd80      	pop	{r7, pc}
 8013f72:	bf00      	nop
 8013f74:	0801a7cc 	.word	0x0801a7cc

08013f78 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013f82:	4a05      	ldr	r2, [pc, #20]	; (8013f98 <etharp_request+0x20>)
 8013f84:	6839      	ldr	r1, [r7, #0]
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7ff ffd4 	bl	8013f34 <etharp_request_dst>
 8013f8c:	4603      	mov	r3, r0
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3708      	adds	r7, #8
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	0801a7c4 	.word	0x0801a7c4

08013f9c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b08e      	sub	sp, #56	; 0x38
 8013fa0:	af04      	add	r7, sp, #16
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013fa6:	4b79      	ldr	r3, [pc, #484]	; (801418c <icmp_input+0x1f0>)
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	f003 030f 	and.w	r3, r3, #15
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	b2db      	uxtb	r3, r3
 8013fba:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013fbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fbe:	2b13      	cmp	r3, #19
 8013fc0:	f240 80cd 	bls.w	801415e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	895b      	ldrh	r3, [r3, #10]
 8013fc8:	2b03      	cmp	r3, #3
 8013fca:	f240 80ca 	bls.w	8014162 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013fd8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 80b7 	beq.w	8014150 <icmp_input+0x1b4>
 8013fe2:	2b08      	cmp	r3, #8
 8013fe4:	f040 80b7 	bne.w	8014156 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013fe8:	4b69      	ldr	r3, [pc, #420]	; (8014190 <icmp_input+0x1f4>)
 8013fea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013fec:	4b67      	ldr	r3, [pc, #412]	; (801418c <icmp_input+0x1f0>)
 8013fee:	695b      	ldr	r3, [r3, #20]
 8013ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ff4:	2be0      	cmp	r3, #224	; 0xe0
 8013ff6:	f000 80bb 	beq.w	8014170 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013ffa:	4b64      	ldr	r3, [pc, #400]	; (801418c <icmp_input+0x1f0>)
 8013ffc:	695b      	ldr	r3, [r3, #20]
 8013ffe:	4a63      	ldr	r2, [pc, #396]	; (801418c <icmp_input+0x1f0>)
 8014000:	6812      	ldr	r2, [r2, #0]
 8014002:	4611      	mov	r1, r2
 8014004:	4618      	mov	r0, r3
 8014006:	f000 fbed 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 801400a:	4603      	mov	r3, r0
 801400c:	2b00      	cmp	r3, #0
 801400e:	f040 80b1 	bne.w	8014174 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	891b      	ldrh	r3, [r3, #8]
 8014016:	2b07      	cmp	r3, #7
 8014018:	f240 80a5 	bls.w	8014166 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801401c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801401e:	330e      	adds	r3, #14
 8014020:	4619      	mov	r1, r3
 8014022:	6878      	ldr	r0, [r7, #4]
 8014024:	f7f8 f842 	bl	800c0ac <pbuf_add_header>
 8014028:	4603      	mov	r3, r0
 801402a:	2b00      	cmp	r3, #0
 801402c:	d04b      	beq.n	80140c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	891a      	ldrh	r2, [r3, #8]
 8014032:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014034:	4413      	add	r3, r2
 8014036:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	891b      	ldrh	r3, [r3, #8]
 801403c:	8b7a      	ldrh	r2, [r7, #26]
 801403e:	429a      	cmp	r2, r3
 8014040:	f0c0 809a 	bcc.w	8014178 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014044:	8b7b      	ldrh	r3, [r7, #26]
 8014046:	f44f 7220 	mov.w	r2, #640	; 0x280
 801404a:	4619      	mov	r1, r3
 801404c:	200e      	movs	r0, #14
 801404e:	f7f7 fddf 	bl	800bc10 <pbuf_alloc>
 8014052:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 8090 	beq.w	801417c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	895b      	ldrh	r3, [r3, #10]
 8014060:	461a      	mov	r2, r3
 8014062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014064:	3308      	adds	r3, #8
 8014066:	429a      	cmp	r2, r3
 8014068:	d203      	bcs.n	8014072 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801406a:	6978      	ldr	r0, [r7, #20]
 801406c:	f7f8 f8b4 	bl	800c1d8 <pbuf_free>
          goto icmperr;
 8014070:	e085      	b.n	801417e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801407a:	4618      	mov	r0, r3
 801407c:	f001 fde3 	bl	8015c46 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014082:	4619      	mov	r1, r3
 8014084:	6978      	ldr	r0, [r7, #20]
 8014086:	f7f8 f821 	bl	800c0cc <pbuf_remove_header>
 801408a:	4603      	mov	r3, r0
 801408c:	2b00      	cmp	r3, #0
 801408e:	d009      	beq.n	80140a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014090:	4b40      	ldr	r3, [pc, #256]	; (8014194 <icmp_input+0x1f8>)
 8014092:	22b6      	movs	r2, #182	; 0xb6
 8014094:	4940      	ldr	r1, [pc, #256]	; (8014198 <icmp_input+0x1fc>)
 8014096:	4841      	ldr	r0, [pc, #260]	; (801419c <icmp_input+0x200>)
 8014098:	f001 fe60 	bl	8015d5c <iprintf>
          pbuf_free(r);
 801409c:	6978      	ldr	r0, [r7, #20]
 801409e:	f7f8 f89b 	bl	800c1d8 <pbuf_free>
          goto icmperr;
 80140a2:	e06c      	b.n	801417e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80140a4:	6879      	ldr	r1, [r7, #4]
 80140a6:	6978      	ldr	r0, [r7, #20]
 80140a8:	f7f8 f9ba 	bl	800c420 <pbuf_copy>
 80140ac:	4603      	mov	r3, r0
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d003      	beq.n	80140ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80140b2:	6978      	ldr	r0, [r7, #20]
 80140b4:	f7f8 f890 	bl	800c1d8 <pbuf_free>
          goto icmperr;
 80140b8:	e061      	b.n	801417e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	f7f8 f88c 	bl	800c1d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	607b      	str	r3, [r7, #4]
 80140c4:	e00f      	b.n	80140e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80140c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140c8:	330e      	adds	r3, #14
 80140ca:	4619      	mov	r1, r3
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7f7 fffd 	bl	800c0cc <pbuf_remove_header>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d006      	beq.n	80140e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80140d8:	4b2e      	ldr	r3, [pc, #184]	; (8014194 <icmp_input+0x1f8>)
 80140da:	22c7      	movs	r2, #199	; 0xc7
 80140dc:	4930      	ldr	r1, [pc, #192]	; (80141a0 <icmp_input+0x204>)
 80140de:	482f      	ldr	r0, [pc, #188]	; (801419c <icmp_input+0x200>)
 80140e0:	f001 fe3c 	bl	8015d5c <iprintf>
          goto icmperr;
 80140e4:	e04b      	b.n	801417e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80140ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140ee:	4619      	mov	r1, r3
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7f7 ffdb 	bl	800c0ac <pbuf_add_header>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d12b      	bne.n	8014154 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	681a      	ldr	r2, [r3, #0]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801410a:	4b20      	ldr	r3, [pc, #128]	; (801418c <icmp_input+0x1f0>)
 801410c:	691a      	ldr	r2, [r3, #16]
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	2200      	movs	r2, #0
 8014116:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	2200      	movs	r2, #0
 801411c:	709a      	strb	r2, [r3, #2]
 801411e:	2200      	movs	r2, #0
 8014120:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	22ff      	movs	r2, #255	; 0xff
 8014126:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2200      	movs	r2, #0
 801412c:	729a      	strb	r2, [r3, #10]
 801412e:	2200      	movs	r2, #0
 8014130:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	9302      	str	r3, [sp, #8]
 8014136:	2301      	movs	r3, #1
 8014138:	9301      	str	r3, [sp, #4]
 801413a:	2300      	movs	r3, #0
 801413c:	9300      	str	r3, [sp, #0]
 801413e:	23ff      	movs	r3, #255	; 0xff
 8014140:	2200      	movs	r2, #0
 8014142:	69f9      	ldr	r1, [r7, #28]
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 fa75 	bl	8014634 <ip4_output_if>
 801414a:	4603      	mov	r3, r0
 801414c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801414e:	e001      	b.n	8014154 <icmp_input+0x1b8>
      break;
 8014150:	bf00      	nop
 8014152:	e000      	b.n	8014156 <icmp_input+0x1ba>
      break;
 8014154:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f7f8 f83e 	bl	800c1d8 <pbuf_free>
  return;
 801415c:	e013      	b.n	8014186 <icmp_input+0x1ea>
    goto lenerr;
 801415e:	bf00      	nop
 8014160:	e002      	b.n	8014168 <icmp_input+0x1cc>
    goto lenerr;
 8014162:	bf00      	nop
 8014164:	e000      	b.n	8014168 <icmp_input+0x1cc>
        goto lenerr;
 8014166:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7f8 f835 	bl	800c1d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801416e:	e00a      	b.n	8014186 <icmp_input+0x1ea>
        goto icmperr;
 8014170:	bf00      	nop
 8014172:	e004      	b.n	801417e <icmp_input+0x1e2>
        goto icmperr;
 8014174:	bf00      	nop
 8014176:	e002      	b.n	801417e <icmp_input+0x1e2>
          goto icmperr;
 8014178:	bf00      	nop
 801417a:	e000      	b.n	801417e <icmp_input+0x1e2>
          goto icmperr;
 801417c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f7f8 f82a 	bl	800c1d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014184:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014186:	3728      	adds	r7, #40	; 0x28
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}
 801418c:	20007f88 	.word	0x20007f88
 8014190:	20007f9c 	.word	0x20007f9c
 8014194:	0801a200 	.word	0x0801a200
 8014198:	0801a238 	.word	0x0801a238
 801419c:	0801a270 	.word	0x0801a270
 80141a0:	0801a298 	.word	0x0801a298

080141a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b082      	sub	sp, #8
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	460b      	mov	r3, r1
 80141ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80141b0:	78fb      	ldrb	r3, [r7, #3]
 80141b2:	461a      	mov	r2, r3
 80141b4:	2103      	movs	r1, #3
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f000 f814 	bl	80141e4 <icmp_send_response>
}
 80141bc:	bf00      	nop
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	460b      	mov	r3, r1
 80141ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80141d0:	78fb      	ldrb	r3, [r7, #3]
 80141d2:	461a      	mov	r2, r3
 80141d4:	210b      	movs	r1, #11
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f000 f804 	bl	80141e4 <icmp_send_response>
}
 80141dc:	bf00      	nop
 80141de:	3708      	adds	r7, #8
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b08c      	sub	sp, #48	; 0x30
 80141e8:	af04      	add	r7, sp, #16
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	460b      	mov	r3, r1
 80141ee:	70fb      	strb	r3, [r7, #3]
 80141f0:	4613      	mov	r3, r2
 80141f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80141f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141f8:	2124      	movs	r1, #36	; 0x24
 80141fa:	2022      	movs	r0, #34	; 0x22
 80141fc:	f7f7 fd08 	bl	800bc10 <pbuf_alloc>
 8014200:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d04c      	beq.n	80142a2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	895b      	ldrh	r3, [r3, #10]
 801420c:	2b23      	cmp	r3, #35	; 0x23
 801420e:	d806      	bhi.n	801421e <icmp_send_response+0x3a>
 8014210:	4b26      	ldr	r3, [pc, #152]	; (80142ac <icmp_send_response+0xc8>)
 8014212:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014216:	4926      	ldr	r1, [pc, #152]	; (80142b0 <icmp_send_response+0xcc>)
 8014218:	4826      	ldr	r0, [pc, #152]	; (80142b4 <icmp_send_response+0xd0>)
 801421a:	f001 fd9f 	bl	8015d5c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	78fa      	ldrb	r2, [r7, #3]
 801422e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	78ba      	ldrb	r2, [r7, #2]
 8014234:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	2200      	movs	r2, #0
 801423a:	711a      	strb	r2, [r3, #4]
 801423c:	2200      	movs	r2, #0
 801423e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	2200      	movs	r2, #0
 8014244:	719a      	strb	r2, [r3, #6]
 8014246:	2200      	movs	r2, #0
 8014248:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801424a:	69fb      	ldr	r3, [r7, #28]
 801424c:	685b      	ldr	r3, [r3, #4]
 801424e:	f103 0008 	add.w	r0, r3, #8
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	221c      	movs	r2, #28
 8014258:	4619      	mov	r1, r3
 801425a:	f001 fcf4 	bl	8015c46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801425e:	69bb      	ldr	r3, [r7, #24]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014264:	f107 030c 	add.w	r3, r7, #12
 8014268:	4618      	mov	r0, r3
 801426a:	f000 f825 	bl	80142b8 <ip4_route>
 801426e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d011      	beq.n	801429a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014276:	697b      	ldr	r3, [r7, #20]
 8014278:	2200      	movs	r2, #0
 801427a:	709a      	strb	r2, [r3, #2]
 801427c:	2200      	movs	r2, #0
 801427e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014280:	f107 020c 	add.w	r2, r7, #12
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	9302      	str	r3, [sp, #8]
 8014288:	2301      	movs	r3, #1
 801428a:	9301      	str	r3, [sp, #4]
 801428c:	2300      	movs	r3, #0
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	23ff      	movs	r3, #255	; 0xff
 8014292:	2100      	movs	r1, #0
 8014294:	69f8      	ldr	r0, [r7, #28]
 8014296:	f000 f9cd 	bl	8014634 <ip4_output_if>
  }
  pbuf_free(q);
 801429a:	69f8      	ldr	r0, [r7, #28]
 801429c:	f7f7 ff9c 	bl	800c1d8 <pbuf_free>
 80142a0:	e000      	b.n	80142a4 <icmp_send_response+0xc0>
    return;
 80142a2:	bf00      	nop
}
 80142a4:	3720      	adds	r7, #32
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	0801a200 	.word	0x0801a200
 80142b0:	0801a2cc 	.word	0x0801a2cc
 80142b4:	0801a270 	.word	0x0801a270

080142b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80142b8:	b480      	push	{r7}
 80142ba:	b085      	sub	sp, #20
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80142c0:	4b33      	ldr	r3, [pc, #204]	; (8014390 <ip4_route+0xd8>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	60fb      	str	r3, [r7, #12]
 80142c6:	e036      	b.n	8014336 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142ce:	f003 0301 	and.w	r3, r3, #1
 80142d2:	b2db      	uxtb	r3, r3
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d02b      	beq.n	8014330 <ip4_route+0x78>
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80142de:	089b      	lsrs	r3, r3, #2
 80142e0:	f003 0301 	and.w	r3, r3, #1
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d022      	beq.n	8014330 <ip4_route+0x78>
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	3304      	adds	r3, #4
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d01d      	beq.n	8014330 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	3304      	adds	r3, #4
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	405a      	eors	r2, r3
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	3308      	adds	r3, #8
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	4013      	ands	r3, r2
 8014308:	2b00      	cmp	r3, #0
 801430a:	d101      	bne.n	8014310 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	e038      	b.n	8014382 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014316:	f003 0302 	and.w	r3, r3, #2
 801431a:	2b00      	cmp	r3, #0
 801431c:	d108      	bne.n	8014330 <ip4_route+0x78>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681a      	ldr	r2, [r3, #0]
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	330c      	adds	r3, #12
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	429a      	cmp	r2, r3
 801432a:	d101      	bne.n	8014330 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	e028      	b.n	8014382 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	60fb      	str	r3, [r7, #12]
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d1c5      	bne.n	80142c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801433c:	4b15      	ldr	r3, [pc, #84]	; (8014394 <ip4_route+0xdc>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d01a      	beq.n	801437a <ip4_route+0xc2>
 8014344:	4b13      	ldr	r3, [pc, #76]	; (8014394 <ip4_route+0xdc>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801434c:	f003 0301 	and.w	r3, r3, #1
 8014350:	2b00      	cmp	r3, #0
 8014352:	d012      	beq.n	801437a <ip4_route+0xc2>
 8014354:	4b0f      	ldr	r3, [pc, #60]	; (8014394 <ip4_route+0xdc>)
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801435c:	f003 0304 	and.w	r3, r3, #4
 8014360:	2b00      	cmp	r3, #0
 8014362:	d00a      	beq.n	801437a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014364:	4b0b      	ldr	r3, [pc, #44]	; (8014394 <ip4_route+0xdc>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	3304      	adds	r3, #4
 801436a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801436c:	2b00      	cmp	r3, #0
 801436e:	d004      	beq.n	801437a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	b2db      	uxtb	r3, r3
 8014376:	2b7f      	cmp	r3, #127	; 0x7f
 8014378:	d101      	bne.n	801437e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801437a:	2300      	movs	r3, #0
 801437c:	e001      	b.n	8014382 <ip4_route+0xca>
  }

  return netif_default;
 801437e:	4b05      	ldr	r3, [pc, #20]	; (8014394 <ip4_route+0xdc>)
 8014380:	681b      	ldr	r3, [r3, #0]
}
 8014382:	4618      	mov	r0, r3
 8014384:	3714      	adds	r7, #20
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr
 801438e:	bf00      	nop
 8014390:	2000d84c 	.word	0x2000d84c
 8014394:	2000d850 	.word	0x2000d850

08014398 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80143a6:	f003 0301 	and.w	r3, r3, #1
 80143aa:	b2db      	uxtb	r3, r3
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d016      	beq.n	80143de <ip4_input_accept+0x46>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	3304      	adds	r3, #4
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d011      	beq.n	80143de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80143ba:	4b0b      	ldr	r3, [pc, #44]	; (80143e8 <ip4_input_accept+0x50>)
 80143bc:	695a      	ldr	r2, [r3, #20]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	3304      	adds	r3, #4
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d008      	beq.n	80143da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80143c8:	4b07      	ldr	r3, [pc, #28]	; (80143e8 <ip4_input_accept+0x50>)
 80143ca:	695b      	ldr	r3, [r3, #20]
 80143cc:	6879      	ldr	r1, [r7, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f000 fa08 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 80143d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d001      	beq.n	80143de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80143da:	2301      	movs	r3, #1
 80143dc:	e000      	b.n	80143e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80143de:	2300      	movs	r3, #0
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	20007f88 	.word	0x20007f88

080143ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b086      	sub	sp, #24
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	781b      	ldrb	r3, [r3, #0]
 8014400:	091b      	lsrs	r3, r3, #4
 8014402:	b2db      	uxtb	r3, r3
 8014404:	2b04      	cmp	r3, #4
 8014406:	d004      	beq.n	8014412 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	f7f7 fee5 	bl	800c1d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801440e:	2300      	movs	r3, #0
 8014410:	e107      	b.n	8014622 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	f003 030f 	and.w	r3, r3, #15
 801441a:	b2db      	uxtb	r3, r3
 801441c:	009b      	lsls	r3, r3, #2
 801441e:	b2db      	uxtb	r3, r3
 8014420:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	885b      	ldrh	r3, [r3, #2]
 8014426:	b29b      	uxth	r3, r3
 8014428:	4618      	mov	r0, r3
 801442a:	f7f6 fb29 	bl	800aa80 <lwip_htons>
 801442e:	4603      	mov	r3, r0
 8014430:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	891b      	ldrh	r3, [r3, #8]
 8014436:	89ba      	ldrh	r2, [r7, #12]
 8014438:	429a      	cmp	r2, r3
 801443a:	d204      	bcs.n	8014446 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801443c:	89bb      	ldrh	r3, [r7, #12]
 801443e:	4619      	mov	r1, r3
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f7f7 fd43 	bl	800becc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	895b      	ldrh	r3, [r3, #10]
 801444a:	89fa      	ldrh	r2, [r7, #14]
 801444c:	429a      	cmp	r2, r3
 801444e:	d807      	bhi.n	8014460 <ip4_input+0x74>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	891b      	ldrh	r3, [r3, #8]
 8014454:	89ba      	ldrh	r2, [r7, #12]
 8014456:	429a      	cmp	r2, r3
 8014458:	d802      	bhi.n	8014460 <ip4_input+0x74>
 801445a:	89fb      	ldrh	r3, [r7, #14]
 801445c:	2b13      	cmp	r3, #19
 801445e:	d804      	bhi.n	801446a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7f7 feb9 	bl	800c1d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014466:	2300      	movs	r3, #0
 8014468:	e0db      	b.n	8014622 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	691b      	ldr	r3, [r3, #16]
 801446e:	4a6f      	ldr	r2, [pc, #444]	; (801462c <ip4_input+0x240>)
 8014470:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	4a6d      	ldr	r2, [pc, #436]	; (801462c <ip4_input+0x240>)
 8014478:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801447a:	4b6c      	ldr	r3, [pc, #432]	; (801462c <ip4_input+0x240>)
 801447c:	695b      	ldr	r3, [r3, #20]
 801447e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014482:	2be0      	cmp	r3, #224	; 0xe0
 8014484:	d112      	bne.n	80144ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801448c:	f003 0301 	and.w	r3, r3, #1
 8014490:	b2db      	uxtb	r3, r3
 8014492:	2b00      	cmp	r3, #0
 8014494:	d007      	beq.n	80144a6 <ip4_input+0xba>
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	3304      	adds	r3, #4
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d002      	beq.n	80144a6 <ip4_input+0xba>
      netif = inp;
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	613b      	str	r3, [r7, #16]
 80144a4:	e02a      	b.n	80144fc <ip4_input+0x110>
    } else {
      netif = NULL;
 80144a6:	2300      	movs	r3, #0
 80144a8:	613b      	str	r3, [r7, #16]
 80144aa:	e027      	b.n	80144fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80144ac:	6838      	ldr	r0, [r7, #0]
 80144ae:	f7ff ff73 	bl	8014398 <ip4_input_accept>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d002      	beq.n	80144be <ip4_input+0xd2>
      netif = inp;
 80144b8:	683b      	ldr	r3, [r7, #0]
 80144ba:	613b      	str	r3, [r7, #16]
 80144bc:	e01e      	b.n	80144fc <ip4_input+0x110>
    } else {
      netif = NULL;
 80144be:	2300      	movs	r3, #0
 80144c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80144c2:	4b5a      	ldr	r3, [pc, #360]	; (801462c <ip4_input+0x240>)
 80144c4:	695b      	ldr	r3, [r3, #20]
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	2b7f      	cmp	r3, #127	; 0x7f
 80144ca:	d017      	beq.n	80144fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80144cc:	4b58      	ldr	r3, [pc, #352]	; (8014630 <ip4_input+0x244>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	613b      	str	r3, [r7, #16]
 80144d2:	e00e      	b.n	80144f2 <ip4_input+0x106>
          if (netif == inp) {
 80144d4:	693a      	ldr	r2, [r7, #16]
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	429a      	cmp	r2, r3
 80144da:	d006      	beq.n	80144ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80144dc:	6938      	ldr	r0, [r7, #16]
 80144de:	f7ff ff5b 	bl	8014398 <ip4_input_accept>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d108      	bne.n	80144fa <ip4_input+0x10e>
 80144e8:	e000      	b.n	80144ec <ip4_input+0x100>
            continue;
 80144ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	613b      	str	r3, [r7, #16]
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d1ed      	bne.n	80144d4 <ip4_input+0xe8>
 80144f8:	e000      	b.n	80144fc <ip4_input+0x110>
            break;
 80144fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80144fc:	4b4b      	ldr	r3, [pc, #300]	; (801462c <ip4_input+0x240>)
 80144fe:	691b      	ldr	r3, [r3, #16]
 8014500:	6839      	ldr	r1, [r7, #0]
 8014502:	4618      	mov	r0, r3
 8014504:	f000 f96e 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 8014508:	4603      	mov	r3, r0
 801450a:	2b00      	cmp	r3, #0
 801450c:	d105      	bne.n	801451a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801450e:	4b47      	ldr	r3, [pc, #284]	; (801462c <ip4_input+0x240>)
 8014510:	691b      	ldr	r3, [r3, #16]
 8014512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014516:	2be0      	cmp	r3, #224	; 0xe0
 8014518:	d104      	bne.n	8014524 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f7f7 fe5c 	bl	800c1d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014520:	2300      	movs	r3, #0
 8014522:	e07e      	b.n	8014622 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d104      	bne.n	8014534 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f7f7 fe54 	bl	800c1d8 <pbuf_free>
    return ERR_OK;
 8014530:	2300      	movs	r3, #0
 8014532:	e076      	b.n	8014622 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	88db      	ldrh	r3, [r3, #6]
 8014538:	b29b      	uxth	r3, r3
 801453a:	461a      	mov	r2, r3
 801453c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014540:	4013      	ands	r3, r2
 8014542:	2b00      	cmp	r3, #0
 8014544:	d00b      	beq.n	801455e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 fc92 	bl	8014e70 <ip4_reass>
 801454c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d101      	bne.n	8014558 <ip4_input+0x16c>
      return ERR_OK;
 8014554:	2300      	movs	r3, #0
 8014556:	e064      	b.n	8014622 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801455e:	4a33      	ldr	r2, [pc, #204]	; (801462c <ip4_input+0x240>)
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014564:	4a31      	ldr	r2, [pc, #196]	; (801462c <ip4_input+0x240>)
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801456a:	4a30      	ldr	r2, [pc, #192]	; (801462c <ip4_input+0x240>)
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	f003 030f 	and.w	r3, r3, #15
 8014578:	b2db      	uxtb	r3, r3
 801457a:	009b      	lsls	r3, r3, #2
 801457c:	b2db      	uxtb	r3, r3
 801457e:	b29a      	uxth	r2, r3
 8014580:	4b2a      	ldr	r3, [pc, #168]	; (801462c <ip4_input+0x240>)
 8014582:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014584:	89fb      	ldrh	r3, [r7, #14]
 8014586:	4619      	mov	r1, r3
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f7f7 fd9f 	bl	800c0cc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	7a5b      	ldrb	r3, [r3, #9]
 8014592:	2b11      	cmp	r3, #17
 8014594:	d006      	beq.n	80145a4 <ip4_input+0x1b8>
 8014596:	2b11      	cmp	r3, #17
 8014598:	dc13      	bgt.n	80145c2 <ip4_input+0x1d6>
 801459a:	2b01      	cmp	r3, #1
 801459c:	d00c      	beq.n	80145b8 <ip4_input+0x1cc>
 801459e:	2b06      	cmp	r3, #6
 80145a0:	d005      	beq.n	80145ae <ip4_input+0x1c2>
 80145a2:	e00e      	b.n	80145c2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80145a4:	6839      	ldr	r1, [r7, #0]
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f7fe fb5a 	bl	8012c60 <udp_input>
        break;
 80145ac:	e026      	b.n	80145fc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80145ae:	6839      	ldr	r1, [r7, #0]
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f7f9 ff17 	bl	800e3e4 <tcp_input>
        break;
 80145b6:	e021      	b.n	80145fc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80145b8:	6839      	ldr	r1, [r7, #0]
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7ff fcee 	bl	8013f9c <icmp_input>
        break;
 80145c0:	e01c      	b.n	80145fc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80145c2:	4b1a      	ldr	r3, [pc, #104]	; (801462c <ip4_input+0x240>)
 80145c4:	695b      	ldr	r3, [r3, #20]
 80145c6:	6939      	ldr	r1, [r7, #16]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f000 f90b 	bl	80147e4 <ip4_addr_isbroadcast_u32>
 80145ce:	4603      	mov	r3, r0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d10f      	bne.n	80145f4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80145d4:	4b15      	ldr	r3, [pc, #84]	; (801462c <ip4_input+0x240>)
 80145d6:	695b      	ldr	r3, [r3, #20]
 80145d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80145dc:	2be0      	cmp	r3, #224	; 0xe0
 80145de:	d009      	beq.n	80145f4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80145e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80145e4:	4619      	mov	r1, r3
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f7f7 fde3 	bl	800c1b2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80145ec:	2102      	movs	r1, #2
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f7ff fdd8 	bl	80141a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7f7 fdef 	bl	800c1d8 <pbuf_free>
        break;
 80145fa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80145fc:	4b0b      	ldr	r3, [pc, #44]	; (801462c <ip4_input+0x240>)
 80145fe:	2200      	movs	r2, #0
 8014600:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014602:	4b0a      	ldr	r3, [pc, #40]	; (801462c <ip4_input+0x240>)
 8014604:	2200      	movs	r2, #0
 8014606:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014608:	4b08      	ldr	r3, [pc, #32]	; (801462c <ip4_input+0x240>)
 801460a:	2200      	movs	r2, #0
 801460c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801460e:	4b07      	ldr	r3, [pc, #28]	; (801462c <ip4_input+0x240>)
 8014610:	2200      	movs	r2, #0
 8014612:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014614:	4b05      	ldr	r3, [pc, #20]	; (801462c <ip4_input+0x240>)
 8014616:	2200      	movs	r2, #0
 8014618:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801461a:	4b04      	ldr	r3, [pc, #16]	; (801462c <ip4_input+0x240>)
 801461c:	2200      	movs	r2, #0
 801461e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014620:	2300      	movs	r3, #0
}
 8014622:	4618      	mov	r0, r3
 8014624:	3718      	adds	r7, #24
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	20007f88 	.word	0x20007f88
 8014630:	2000d84c 	.word	0x2000d84c

08014634 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b08a      	sub	sp, #40	; 0x28
 8014638:	af04      	add	r7, sp, #16
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	60b9      	str	r1, [r7, #8]
 801463e:	607a      	str	r2, [r7, #4]
 8014640:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d009      	beq.n	8014660 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d003      	beq.n	801465a <ip4_output_if+0x26>
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d102      	bne.n	8014660 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465c:	3304      	adds	r3, #4
 801465e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014660:	78fa      	ldrb	r2, [r7, #3]
 8014662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014664:	9302      	str	r3, [sp, #8]
 8014666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801466a:	9301      	str	r3, [sp, #4]
 801466c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014670:	9300      	str	r3, [sp, #0]
 8014672:	4613      	mov	r3, r2
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	6979      	ldr	r1, [r7, #20]
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f000 f805 	bl	8014688 <ip4_output_if_src>
 801467e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014680:	4618      	mov	r0, r3
 8014682:	3718      	adds	r7, #24
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}

08014688 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b088      	sub	sp, #32
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	607a      	str	r2, [r7, #4]
 8014694:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	7b9b      	ldrb	r3, [r3, #14]
 801469a:	2b01      	cmp	r3, #1
 801469c:	d006      	beq.n	80146ac <ip4_output_if_src+0x24>
 801469e:	4b4b      	ldr	r3, [pc, #300]	; (80147cc <ip4_output_if_src+0x144>)
 80146a0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80146a4:	494a      	ldr	r1, [pc, #296]	; (80147d0 <ip4_output_if_src+0x148>)
 80146a6:	484b      	ldr	r0, [pc, #300]	; (80147d4 <ip4_output_if_src+0x14c>)
 80146a8:	f001 fb58 	bl	8015d5c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d060      	beq.n	8014774 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80146b2:	2314      	movs	r3, #20
 80146b4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80146b6:	2114      	movs	r1, #20
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f7f7 fcf7 	bl	800c0ac <pbuf_add_header>
 80146be:	4603      	mov	r3, r0
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d002      	beq.n	80146ca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80146c4:	f06f 0301 	mvn.w	r3, #1
 80146c8:	e07c      	b.n	80147c4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	685b      	ldr	r3, [r3, #4]
 80146ce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	895b      	ldrh	r3, [r3, #10]
 80146d4:	2b13      	cmp	r3, #19
 80146d6:	d806      	bhi.n	80146e6 <ip4_output_if_src+0x5e>
 80146d8:	4b3c      	ldr	r3, [pc, #240]	; (80147cc <ip4_output_if_src+0x144>)
 80146da:	f44f 7262 	mov.w	r2, #904	; 0x388
 80146de:	493e      	ldr	r1, [pc, #248]	; (80147d8 <ip4_output_if_src+0x150>)
 80146e0:	483c      	ldr	r0, [pc, #240]	; (80147d4 <ip4_output_if_src+0x14c>)
 80146e2:	f001 fb3b 	bl	8015d5c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	78fa      	ldrb	r2, [r7, #3]
 80146ea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80146f2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80146fc:	8b7b      	ldrh	r3, [r7, #26]
 80146fe:	089b      	lsrs	r3, r3, #2
 8014700:	b29b      	uxth	r3, r3
 8014702:	b2db      	uxtb	r3, r3
 8014704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014708:	b2da      	uxtb	r2, r3
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014714:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	891b      	ldrh	r3, [r3, #8]
 801471a:	4618      	mov	r0, r3
 801471c:	f7f6 f9b0 	bl	800aa80 <lwip_htons>
 8014720:	4603      	mov	r3, r0
 8014722:	461a      	mov	r2, r3
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014728:	69fb      	ldr	r3, [r7, #28]
 801472a:	2200      	movs	r2, #0
 801472c:	719a      	strb	r2, [r3, #6]
 801472e:	2200      	movs	r2, #0
 8014730:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014732:	4b2a      	ldr	r3, [pc, #168]	; (80147dc <ip4_output_if_src+0x154>)
 8014734:	881b      	ldrh	r3, [r3, #0]
 8014736:	4618      	mov	r0, r3
 8014738:	f7f6 f9a2 	bl	800aa80 <lwip_htons>
 801473c:	4603      	mov	r3, r0
 801473e:	461a      	mov	r2, r3
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014744:	4b25      	ldr	r3, [pc, #148]	; (80147dc <ip4_output_if_src+0x154>)
 8014746:	881b      	ldrh	r3, [r3, #0]
 8014748:	3301      	adds	r3, #1
 801474a:	b29a      	uxth	r2, r3
 801474c:	4b23      	ldr	r3, [pc, #140]	; (80147dc <ip4_output_if_src+0x154>)
 801474e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d104      	bne.n	8014760 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014756:	4b22      	ldr	r3, [pc, #136]	; (80147e0 <ip4_output_if_src+0x158>)
 8014758:	681a      	ldr	r2, [r3, #0]
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	60da      	str	r2, [r3, #12]
 801475e:	e003      	b.n	8014768 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014760:	68bb      	ldr	r3, [r7, #8]
 8014762:	681a      	ldr	r2, [r3, #0]
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	2200      	movs	r2, #0
 801476c:	729a      	strb	r2, [r3, #10]
 801476e:	2200      	movs	r2, #0
 8014770:	72da      	strb	r2, [r3, #11]
 8014772:	e00f      	b.n	8014794 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	895b      	ldrh	r3, [r3, #10]
 8014778:	2b13      	cmp	r3, #19
 801477a:	d802      	bhi.n	8014782 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801477c:	f06f 0301 	mvn.w	r3, #1
 8014780:	e020      	b.n	80147c4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	685b      	ldr	r3, [r3, #4]
 8014786:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014788:	69fb      	ldr	r3, [r7, #28]
 801478a:	691b      	ldr	r3, [r3, #16]
 801478c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801478e:	f107 0314 	add.w	r3, r7, #20
 8014792:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014798:	2b00      	cmp	r3, #0
 801479a:	d00c      	beq.n	80147b6 <ip4_output_if_src+0x12e>
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	891a      	ldrh	r2, [r3, #8]
 80147a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80147a4:	429a      	cmp	r2, r3
 80147a6:	d906      	bls.n	80147b6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80147ac:	68f8      	ldr	r0, [r7, #12]
 80147ae:	f000 fd4d 	bl	801524c <ip4_frag>
 80147b2:	4603      	mov	r3, r0
 80147b4:	e006      	b.n	80147c4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80147b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b8:	695b      	ldr	r3, [r3, #20]
 80147ba:	687a      	ldr	r2, [r7, #4]
 80147bc:	68f9      	ldr	r1, [r7, #12]
 80147be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147c0:	4798      	blx	r3
 80147c2:	4603      	mov	r3, r0
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3720      	adds	r7, #32
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	0801a2f8 	.word	0x0801a2f8
 80147d0:	0801a32c 	.word	0x0801a32c
 80147d4:	0801a338 	.word	0x0801a338
 80147d8:	0801a360 	.word	0x0801a360
 80147dc:	20004c0e 	.word	0x20004c0e
 80147e0:	0801a7c0 	.word	0x0801a7c0

080147e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80147e4:	b480      	push	{r7}
 80147e6:	b085      	sub	sp, #20
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147f8:	d002      	beq.n	8014800 <ip4_addr_isbroadcast_u32+0x1c>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d101      	bne.n	8014804 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014800:	2301      	movs	r3, #1
 8014802:	e02a      	b.n	801485a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801480a:	f003 0302 	and.w	r3, r3, #2
 801480e:	2b00      	cmp	r3, #0
 8014810:	d101      	bne.n	8014816 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014812:	2300      	movs	r3, #0
 8014814:	e021      	b.n	801485a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	3304      	adds	r3, #4
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	429a      	cmp	r2, r3
 8014820:	d101      	bne.n	8014826 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014822:	2300      	movs	r3, #0
 8014824:	e019      	b.n	801485a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	3304      	adds	r3, #4
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	405a      	eors	r2, r3
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	3308      	adds	r3, #8
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	4013      	ands	r3, r2
 8014838:	2b00      	cmp	r3, #0
 801483a:	d10d      	bne.n	8014858 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	3308      	adds	r3, #8
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	43da      	mvns	r2, r3
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	3308      	adds	r3, #8
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014850:	429a      	cmp	r2, r3
 8014852:	d101      	bne.n	8014858 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014854:	2301      	movs	r3, #1
 8014856:	e000      	b.n	801485a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014858:	2300      	movs	r3, #0
  }
}
 801485a:	4618      	mov	r0, r3
 801485c:	3714      	adds	r7, #20
 801485e:	46bd      	mov	sp, r7
 8014860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014864:	4770      	bx	lr
	...

08014868 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801486e:	2300      	movs	r3, #0
 8014870:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014872:	4b12      	ldr	r3, [pc, #72]	; (80148bc <ip_reass_tmr+0x54>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014878:	e018      	b.n	80148ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	7fdb      	ldrb	r3, [r3, #31]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d00b      	beq.n	801489a <ip_reass_tmr+0x32>
      r->timer--;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	7fdb      	ldrb	r3, [r3, #31]
 8014886:	3b01      	subs	r3, #1
 8014888:	b2da      	uxtb	r2, r3
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	60fb      	str	r3, [r7, #12]
 8014898:	e008      	b.n	80148ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80148a4:	68b9      	ldr	r1, [r7, #8]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 f80a 	bl	80148c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d1e3      	bne.n	801487a <ip_reass_tmr+0x12>
    }
  }
}
 80148b2:	bf00      	nop
 80148b4:	bf00      	nop
 80148b6:	3710      	adds	r7, #16
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	20004c10 	.word	0x20004c10

080148c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b088      	sub	sp, #32
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80148ca:	2300      	movs	r3, #0
 80148cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80148ce:	683a      	ldr	r2, [r7, #0]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d105      	bne.n	80148e2 <ip_reass_free_complete_datagram+0x22>
 80148d6:	4b45      	ldr	r3, [pc, #276]	; (80149ec <ip_reass_free_complete_datagram+0x12c>)
 80148d8:	22ab      	movs	r2, #171	; 0xab
 80148da:	4945      	ldr	r1, [pc, #276]	; (80149f0 <ip_reass_free_complete_datagram+0x130>)
 80148dc:	4845      	ldr	r0, [pc, #276]	; (80149f4 <ip_reass_free_complete_datagram+0x134>)
 80148de:	f001 fa3d 	bl	8015d5c <iprintf>
  if (prev != NULL) {
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d00a      	beq.n	80148fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d005      	beq.n	80148fe <ip_reass_free_complete_datagram+0x3e>
 80148f2:	4b3e      	ldr	r3, [pc, #248]	; (80149ec <ip_reass_free_complete_datagram+0x12c>)
 80148f4:	22ad      	movs	r2, #173	; 0xad
 80148f6:	4940      	ldr	r1, [pc, #256]	; (80149f8 <ip_reass_free_complete_datagram+0x138>)
 80148f8:	483e      	ldr	r0, [pc, #248]	; (80149f4 <ip_reass_free_complete_datagram+0x134>)
 80148fa:	f001 fa2f 	bl	8015d5c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	889b      	ldrh	r3, [r3, #4]
 801490a:	b29b      	uxth	r3, r3
 801490c:	2b00      	cmp	r3, #0
 801490e:	d12a      	bne.n	8014966 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801491e:	69bb      	ldr	r3, [r7, #24]
 8014920:	6858      	ldr	r0, [r3, #4]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	3308      	adds	r3, #8
 8014926:	2214      	movs	r2, #20
 8014928:	4619      	mov	r1, r3
 801492a:	f001 f98c 	bl	8015c46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801492e:	2101      	movs	r1, #1
 8014930:	69b8      	ldr	r0, [r7, #24]
 8014932:	f7ff fc47 	bl	80141c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014936:	69b8      	ldr	r0, [r7, #24]
 8014938:	f7f7 fcdc 	bl	800c2f4 <pbuf_clen>
 801493c:	4603      	mov	r3, r0
 801493e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014940:	8bfa      	ldrh	r2, [r7, #30]
 8014942:	8a7b      	ldrh	r3, [r7, #18]
 8014944:	4413      	add	r3, r2
 8014946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801494a:	db05      	blt.n	8014958 <ip_reass_free_complete_datagram+0x98>
 801494c:	4b27      	ldr	r3, [pc, #156]	; (80149ec <ip_reass_free_complete_datagram+0x12c>)
 801494e:	22bc      	movs	r2, #188	; 0xbc
 8014950:	492a      	ldr	r1, [pc, #168]	; (80149fc <ip_reass_free_complete_datagram+0x13c>)
 8014952:	4828      	ldr	r0, [pc, #160]	; (80149f4 <ip_reass_free_complete_datagram+0x134>)
 8014954:	f001 fa02 	bl	8015d5c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014958:	8bfa      	ldrh	r2, [r7, #30]
 801495a:	8a7b      	ldrh	r3, [r7, #18]
 801495c:	4413      	add	r3, r2
 801495e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014960:	69b8      	ldr	r0, [r7, #24]
 8014962:	f7f7 fc39 	bl	800c1d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801496c:	e01f      	b.n	80149ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014974:	69bb      	ldr	r3, [r7, #24]
 8014976:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801497e:	68f8      	ldr	r0, [r7, #12]
 8014980:	f7f7 fcb8 	bl	800c2f4 <pbuf_clen>
 8014984:	4603      	mov	r3, r0
 8014986:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014988:	8bfa      	ldrh	r2, [r7, #30]
 801498a:	8a7b      	ldrh	r3, [r7, #18]
 801498c:	4413      	add	r3, r2
 801498e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014992:	db05      	blt.n	80149a0 <ip_reass_free_complete_datagram+0xe0>
 8014994:	4b15      	ldr	r3, [pc, #84]	; (80149ec <ip_reass_free_complete_datagram+0x12c>)
 8014996:	22cc      	movs	r2, #204	; 0xcc
 8014998:	4918      	ldr	r1, [pc, #96]	; (80149fc <ip_reass_free_complete_datagram+0x13c>)
 801499a:	4816      	ldr	r0, [pc, #88]	; (80149f4 <ip_reass_free_complete_datagram+0x134>)
 801499c:	f001 f9de 	bl	8015d5c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80149a0:	8bfa      	ldrh	r2, [r7, #30]
 80149a2:	8a7b      	ldrh	r3, [r7, #18]
 80149a4:	4413      	add	r3, r2
 80149a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f7f7 fc15 	bl	800c1d8 <pbuf_free>
  while (p != NULL) {
 80149ae:	69bb      	ldr	r3, [r7, #24]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d1dc      	bne.n	801496e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80149b4:	6839      	ldr	r1, [r7, #0]
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f000 f8c2 	bl	8014b40 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80149bc:	4b10      	ldr	r3, [pc, #64]	; (8014a00 <ip_reass_free_complete_datagram+0x140>)
 80149be:	881b      	ldrh	r3, [r3, #0]
 80149c0:	8bfa      	ldrh	r2, [r7, #30]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d905      	bls.n	80149d2 <ip_reass_free_complete_datagram+0x112>
 80149c6:	4b09      	ldr	r3, [pc, #36]	; (80149ec <ip_reass_free_complete_datagram+0x12c>)
 80149c8:	22d2      	movs	r2, #210	; 0xd2
 80149ca:	490e      	ldr	r1, [pc, #56]	; (8014a04 <ip_reass_free_complete_datagram+0x144>)
 80149cc:	4809      	ldr	r0, [pc, #36]	; (80149f4 <ip_reass_free_complete_datagram+0x134>)
 80149ce:	f001 f9c5 	bl	8015d5c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80149d2:	4b0b      	ldr	r3, [pc, #44]	; (8014a00 <ip_reass_free_complete_datagram+0x140>)
 80149d4:	881a      	ldrh	r2, [r3, #0]
 80149d6:	8bfb      	ldrh	r3, [r7, #30]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	b29a      	uxth	r2, r3
 80149dc:	4b08      	ldr	r3, [pc, #32]	; (8014a00 <ip_reass_free_complete_datagram+0x140>)
 80149de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80149e0:	8bfb      	ldrh	r3, [r7, #30]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3720      	adds	r7, #32
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	0801a390 	.word	0x0801a390
 80149f0:	0801a3cc 	.word	0x0801a3cc
 80149f4:	0801a3d8 	.word	0x0801a3d8
 80149f8:	0801a400 	.word	0x0801a400
 80149fc:	0801a414 	.word	0x0801a414
 8014a00:	20004c14 	.word	0x20004c14
 8014a04:	0801a434 	.word	0x0801a434

08014a08 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b08a      	sub	sp, #40	; 0x28
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014a12:	2300      	movs	r3, #0
 8014a14:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014a16:	2300      	movs	r3, #0
 8014a18:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014a26:	4b28      	ldr	r3, [pc, #160]	; (8014ac8 <ip_reass_remove_oldest_datagram+0xc0>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014a2c:	e030      	b.n	8014a90 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a30:	695a      	ldr	r2, [r3, #20]
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d10c      	bne.n	8014a54 <ip_reass_remove_oldest_datagram+0x4c>
 8014a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3c:	699a      	ldr	r2, [r3, #24]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	691b      	ldr	r3, [r3, #16]
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d106      	bne.n	8014a54 <ip_reass_remove_oldest_datagram+0x4c>
 8014a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a48:	899a      	ldrh	r2, [r3, #12]
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	889b      	ldrh	r3, [r3, #4]
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d014      	beq.n	8014a7e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014a54:	693b      	ldr	r3, [r7, #16]
 8014a56:	3301      	adds	r3, #1
 8014a58:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014a5a:	6a3b      	ldr	r3, [r7, #32]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d104      	bne.n	8014a6a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a62:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014a64:	69fb      	ldr	r3, [r7, #28]
 8014a66:	61bb      	str	r3, [r7, #24]
 8014a68:	e009      	b.n	8014a7e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6c:	7fda      	ldrb	r2, [r3, #31]
 8014a6e:	6a3b      	ldr	r3, [r7, #32]
 8014a70:	7fdb      	ldrb	r3, [r3, #31]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d803      	bhi.n	8014a7e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a78:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d001      	beq.n	8014a8a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a88:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d1cb      	bne.n	8014a2e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014a96:	6a3b      	ldr	r3, [r7, #32]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d008      	beq.n	8014aae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014a9c:	69b9      	ldr	r1, [r7, #24]
 8014a9e:	6a38      	ldr	r0, [r7, #32]
 8014aa0:	f7ff ff0e 	bl	80148c0 <ip_reass_free_complete_datagram>
 8014aa4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014aa6:	697a      	ldr	r2, [r7, #20]
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	4413      	add	r3, r2
 8014aac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014aae:	697a      	ldr	r2, [r7, #20]
 8014ab0:	683b      	ldr	r3, [r7, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	da02      	bge.n	8014abc <ip_reass_remove_oldest_datagram+0xb4>
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	2b01      	cmp	r3, #1
 8014aba:	dcac      	bgt.n	8014a16 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014abc:	697b      	ldr	r3, [r7, #20]
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3728      	adds	r7, #40	; 0x28
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	20004c10 	.word	0x20004c10

08014acc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014ad6:	2004      	movs	r0, #4
 8014ad8:	f7f6 fc88 	bl	800b3ec <memp_malloc>
 8014adc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d110      	bne.n	8014b06 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014ae4:	6839      	ldr	r1, [r7, #0]
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f7ff ff8e 	bl	8014a08 <ip_reass_remove_oldest_datagram>
 8014aec:	4602      	mov	r2, r0
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	4293      	cmp	r3, r2
 8014af2:	dc03      	bgt.n	8014afc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014af4:	2004      	movs	r0, #4
 8014af6:	f7f6 fc79 	bl	800b3ec <memp_malloc>
 8014afa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d101      	bne.n	8014b06 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014b02:	2300      	movs	r3, #0
 8014b04:	e016      	b.n	8014b34 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014b06:	2220      	movs	r2, #32
 8014b08:	2100      	movs	r1, #0
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f001 f8c3 	bl	8015c96 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	220f      	movs	r2, #15
 8014b14:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014b16:	4b09      	ldr	r3, [pc, #36]	; (8014b3c <ip_reass_enqueue_new_datagram+0x70>)
 8014b18:	681a      	ldr	r2, [r3, #0]
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014b1e:	4a07      	ldr	r2, [pc, #28]	; (8014b3c <ip_reass_enqueue_new_datagram+0x70>)
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	3308      	adds	r3, #8
 8014b28:	2214      	movs	r2, #20
 8014b2a:	6879      	ldr	r1, [r7, #4]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f001 f88a 	bl	8015c46 <memcpy>
  return ipr;
 8014b32:	68fb      	ldr	r3, [r7, #12]
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	20004c10 	.word	0x20004c10

08014b40 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
 8014b48:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014b4a:	4b10      	ldr	r3, [pc, #64]	; (8014b8c <ip_reass_dequeue_datagram+0x4c>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d104      	bne.n	8014b5e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4a0c      	ldr	r2, [pc, #48]	; (8014b8c <ip_reass_dequeue_datagram+0x4c>)
 8014b5a:	6013      	str	r3, [r2, #0]
 8014b5c:	e00d      	b.n	8014b7a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d106      	bne.n	8014b72 <ip_reass_dequeue_datagram+0x32>
 8014b64:	4b0a      	ldr	r3, [pc, #40]	; (8014b90 <ip_reass_dequeue_datagram+0x50>)
 8014b66:	f240 1245 	movw	r2, #325	; 0x145
 8014b6a:	490a      	ldr	r1, [pc, #40]	; (8014b94 <ip_reass_dequeue_datagram+0x54>)
 8014b6c:	480a      	ldr	r0, [pc, #40]	; (8014b98 <ip_reass_dequeue_datagram+0x58>)
 8014b6e:	f001 f8f5 	bl	8015d5c <iprintf>
    prev->next = ipr->next;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681a      	ldr	r2, [r3, #0]
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014b7a:	6879      	ldr	r1, [r7, #4]
 8014b7c:	2004      	movs	r0, #4
 8014b7e:	f7f6 fc87 	bl	800b490 <memp_free>
}
 8014b82:	bf00      	nop
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	20004c10 	.word	0x20004c10
 8014b90:	0801a390 	.word	0x0801a390
 8014b94:	0801a458 	.word	0x0801a458
 8014b98:	0801a3d8 	.word	0x0801a3d8

08014b9c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b08c      	sub	sp, #48	; 0x30
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014bac:	2301      	movs	r3, #1
 8014bae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	685b      	ldr	r3, [r3, #4]
 8014bb4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	885b      	ldrh	r3, [r3, #2]
 8014bba:	b29b      	uxth	r3, r3
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7f5 ff5f 	bl	800aa80 <lwip_htons>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	f003 030f 	and.w	r3, r3, #15
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	009b      	lsls	r3, r3, #2
 8014bd2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014bd4:	7e7b      	ldrb	r3, [r7, #25]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	8b7a      	ldrh	r2, [r7, #26]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d202      	bcs.n	8014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014be2:	e135      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014be4:	7e7b      	ldrb	r3, [r7, #25]
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	8b7a      	ldrh	r2, [r7, #26]
 8014bea:	1ad3      	subs	r3, r2, r3
 8014bec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	88db      	ldrh	r3, [r3, #6]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7f5 ff43 	bl	800aa80 <lwip_htons>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c00:	b29b      	uxth	r3, r3
 8014c02:	00db      	lsls	r3, r3, #3
 8014c04:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0e:	2200      	movs	r2, #0
 8014c10:	701a      	strb	r2, [r3, #0]
 8014c12:	2200      	movs	r2, #0
 8014c14:	705a      	strb	r2, [r3, #1]
 8014c16:	2200      	movs	r2, #0
 8014c18:	709a      	strb	r2, [r3, #2]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c20:	8afa      	ldrh	r2, [r7, #22]
 8014c22:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014c24:	8afa      	ldrh	r2, [r7, #22]
 8014c26:	8b7b      	ldrh	r3, [r7, #26]
 8014c28:	4413      	add	r3, r2
 8014c2a:	b29a      	uxth	r2, r3
 8014c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c32:	88db      	ldrh	r3, [r3, #6]
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	8afa      	ldrh	r2, [r7, #22]
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d902      	bls.n	8014c42 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c40:	e106      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	627b      	str	r3, [r7, #36]	; 0x24
 8014c48:	e068      	b.n	8014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c52:	889b      	ldrh	r3, [r3, #4]
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	889b      	ldrh	r3, [r3, #4]
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d235      	bcs.n	8014ccc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c64:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d020      	beq.n	8014cae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c6e:	889b      	ldrh	r3, [r3, #4]
 8014c70:	b29a      	uxth	r2, r3
 8014c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c74:	88db      	ldrh	r3, [r3, #6]
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d307      	bcc.n	8014c8c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c7e:	88db      	ldrh	r3, [r3, #6]
 8014c80:	b29a      	uxth	r2, r3
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	889b      	ldrh	r3, [r3, #4]
 8014c86:	b29b      	uxth	r3, r3
 8014c88:	429a      	cmp	r2, r3
 8014c8a:	d902      	bls.n	8014c92 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014c90:	e0de      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c94:	68ba      	ldr	r2, [r7, #8]
 8014c96:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c9a:	88db      	ldrh	r3, [r3, #6]
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca0:	889b      	ldrh	r3, [r3, #4]
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d03d      	beq.n	8014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014cac:	e03a      	b.n	8014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb0:	88db      	ldrh	r3, [r3, #6]
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	889b      	ldrh	r3, [r3, #4]
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d902      	bls.n	8014cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cc2:	e0c5      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	68ba      	ldr	r2, [r7, #8]
 8014cc8:	605a      	str	r2, [r3, #4]
      break;
 8014cca:	e02b      	b.n	8014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cce:	889b      	ldrh	r3, [r3, #4]
 8014cd0:	b29a      	uxth	r2, r3
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	889b      	ldrh	r3, [r3, #4]
 8014cd6:	b29b      	uxth	r3, r3
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d102      	bne.n	8014ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ce0:	e0b6      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce4:	889b      	ldrh	r3, [r3, #4]
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	693b      	ldr	r3, [r7, #16]
 8014cea:	88db      	ldrh	r3, [r3, #6]
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d202      	bcs.n	8014cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014cf6:	e0ab      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d009      	beq.n	8014d12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d00:	88db      	ldrh	r3, [r3, #6]
 8014d02:	b29a      	uxth	r2, r3
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	889b      	ldrh	r3, [r3, #4]
 8014d08:	b29b      	uxth	r3, r3
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	d001      	beq.n	8014d12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014d0e:	2300      	movs	r3, #0
 8014d10:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d193      	bne.n	8014c4a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014d22:	e000      	b.n	8014d26 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014d24:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d12d      	bne.n	8014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d01c      	beq.n	8014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d34:	88db      	ldrh	r3, [r3, #6]
 8014d36:	b29a      	uxth	r2, r3
 8014d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d3a:	889b      	ldrh	r3, [r3, #4]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d906      	bls.n	8014d50 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014d42:	4b45      	ldr	r3, [pc, #276]	; (8014e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d44:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014d48:	4944      	ldr	r1, [pc, #272]	; (8014e5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014d4a:	4845      	ldr	r0, [pc, #276]	; (8014e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d4c:	f001 f806 	bl	8015d5c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d52:	68ba      	ldr	r2, [r7, #8]
 8014d54:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d58:	88db      	ldrh	r3, [r3, #6]
 8014d5a:	b29a      	uxth	r2, r3
 8014d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d5e:	889b      	ldrh	r3, [r3, #4]
 8014d60:	b29b      	uxth	r3, r3
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d010      	beq.n	8014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014d66:	2300      	movs	r3, #0
 8014d68:	623b      	str	r3, [r7, #32]
 8014d6a:	e00d      	b.n	8014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	685b      	ldr	r3, [r3, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d006      	beq.n	8014d82 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014d74:	4b38      	ldr	r3, [pc, #224]	; (8014e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d76:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014d7a:	493a      	ldr	r1, [pc, #232]	; (8014e64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014d7c:	4838      	ldr	r0, [pc, #224]	; (8014e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d7e:	f000 ffed 	bl	8015d5c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	68ba      	ldr	r2, [r7, #8]
 8014d86:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d105      	bne.n	8014d9a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	7f9b      	ldrb	r3, [r3, #30]
 8014d92:	f003 0301 	and.w	r3, r3, #1
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d059      	beq.n	8014e4e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d04f      	beq.n	8014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d006      	beq.n	8014db6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	685b      	ldr	r3, [r3, #4]
 8014dae:	889b      	ldrh	r3, [r3, #4]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d002      	beq.n	8014dbc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014db6:	2300      	movs	r3, #0
 8014db8:	623b      	str	r3, [r7, #32]
 8014dba:	e041      	b.n	8014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dbe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014dc6:	e012      	b.n	8014dee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dca:	685b      	ldr	r3, [r3, #4]
 8014dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd0:	88db      	ldrh	r3, [r3, #6]
 8014dd2:	b29a      	uxth	r2, r3
 8014dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd6:	889b      	ldrh	r3, [r3, #4]
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d002      	beq.n	8014de4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014dde:	2300      	movs	r3, #0
 8014de0:	623b      	str	r3, [r7, #32]
            break;
 8014de2:	e007      	b.n	8014df4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d1e9      	bne.n	8014dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d022      	beq.n	8014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d106      	bne.n	8014e10 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014e02:	4b15      	ldr	r3, [pc, #84]	; (8014e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e04:	f240 12df 	movw	r2, #479	; 0x1df
 8014e08:	4917      	ldr	r1, [pc, #92]	; (8014e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014e0a:	4815      	ldr	r0, [pc, #84]	; (8014e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e0c:	f000 ffa6 	bl	8015d5c <iprintf>
          LWIP_ASSERT("sanity check",
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	685b      	ldr	r3, [r3, #4]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e18:	429a      	cmp	r2, r3
 8014e1a:	d106      	bne.n	8014e2a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014e1c:	4b0e      	ldr	r3, [pc, #56]	; (8014e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014e22:	4911      	ldr	r1, [pc, #68]	; (8014e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014e24:	480e      	ldr	r0, [pc, #56]	; (8014e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e26:	f000 ff99 	bl	8015d5c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d006      	beq.n	8014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014e32:	4b09      	ldr	r3, [pc, #36]	; (8014e58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e34:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014e38:	490c      	ldr	r1, [pc, #48]	; (8014e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014e3a:	4809      	ldr	r0, [pc, #36]	; (8014e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e3c:	f000 ff8e 	bl	8015d5c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014e40:	6a3b      	ldr	r3, [r7, #32]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	bf14      	ite	ne
 8014e46:	2301      	movne	r3, #1
 8014e48:	2300      	moveq	r3, #0
 8014e4a:	b2db      	uxtb	r3, r3
 8014e4c:	e000      	b.n	8014e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014e4e:	2300      	movs	r3, #0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3730      	adds	r7, #48	; 0x30
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	0801a390 	.word	0x0801a390
 8014e5c:	0801a474 	.word	0x0801a474
 8014e60:	0801a3d8 	.word	0x0801a3d8
 8014e64:	0801a494 	.word	0x0801a494
 8014e68:	0801a4cc 	.word	0x0801a4cc
 8014e6c:	0801a4dc 	.word	0x0801a4dc

08014e70 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b08e      	sub	sp, #56	; 0x38
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	f003 030f 	and.w	r3, r3, #15
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	b2db      	uxtb	r3, r3
 8014e8c:	2b14      	cmp	r3, #20
 8014e8e:	f040 8167 	bne.w	8015160 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e94:	88db      	ldrh	r3, [r3, #6]
 8014e96:	b29b      	uxth	r3, r3
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7f5 fdf1 	bl	800aa80 <lwip_htons>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ea4:	b29b      	uxth	r3, r3
 8014ea6:	00db      	lsls	r3, r3, #3
 8014ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	885b      	ldrh	r3, [r3, #2]
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f5 fde5 	bl	800aa80 <lwip_htons>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ebc:	781b      	ldrb	r3, [r3, #0]
 8014ebe:	f003 030f 	and.w	r3, r3, #15
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ed2:	429a      	cmp	r2, r3
 8014ed4:	f0c0 8146 	bcc.w	8015164 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f7f7 fa05 	bl	800c2f4 <pbuf_clen>
 8014eea:	4603      	mov	r3, r0
 8014eec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014eee:	4b9f      	ldr	r3, [pc, #636]	; (801516c <ip4_reass+0x2fc>)
 8014ef0:	881b      	ldrh	r3, [r3, #0]
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	8c3b      	ldrh	r3, [r7, #32]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	2b0a      	cmp	r3, #10
 8014efa:	dd10      	ble.n	8014f1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014efc:	8c3b      	ldrh	r3, [r7, #32]
 8014efe:	4619      	mov	r1, r3
 8014f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f02:	f7ff fd81 	bl	8014a08 <ip_reass_remove_oldest_datagram>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f000 812d 	beq.w	8015168 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014f0e:	4b97      	ldr	r3, [pc, #604]	; (801516c <ip4_reass+0x2fc>)
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	8c3b      	ldrh	r3, [r7, #32]
 8014f16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014f18:	2b0a      	cmp	r3, #10
 8014f1a:	f300 8125 	bgt.w	8015168 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014f1e:	4b94      	ldr	r3, [pc, #592]	; (8015170 <ip4_reass+0x300>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	633b      	str	r3, [r7, #48]	; 0x30
 8014f24:	e015      	b.n	8014f52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f28:	695a      	ldr	r2, [r3, #20]
 8014f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2c:	68db      	ldr	r3, [r3, #12]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d10c      	bne.n	8014f4c <ip4_reass+0xdc>
 8014f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f34:	699a      	ldr	r2, [r3, #24]
 8014f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f38:	691b      	ldr	r3, [r3, #16]
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d106      	bne.n	8014f4c <ip4_reass+0xdc>
 8014f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f40:	899a      	ldrh	r2, [r3, #12]
 8014f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f44:	889b      	ldrh	r3, [r3, #4]
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d006      	beq.n	8014f5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	633b      	str	r3, [r7, #48]	; 0x30
 8014f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d1e6      	bne.n	8014f26 <ip4_reass+0xb6>
 8014f58:	e000      	b.n	8014f5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014f5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d109      	bne.n	8014f76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014f62:	8c3b      	ldrh	r3, [r7, #32]
 8014f64:	4619      	mov	r1, r3
 8014f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f68:	f7ff fdb0 	bl	8014acc <ip_reass_enqueue_new_datagram>
 8014f6c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d11c      	bne.n	8014fae <ip4_reass+0x13e>
      goto nullreturn;
 8014f74:	e109      	b.n	801518a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f78:	88db      	ldrh	r3, [r3, #6]
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7f5 fd7f 	bl	800aa80 <lwip_htons>
 8014f82:	4603      	mov	r3, r0
 8014f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d110      	bne.n	8014fae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8e:	89db      	ldrh	r3, [r3, #14]
 8014f90:	4618      	mov	r0, r3
 8014f92:	f7f5 fd75 	bl	800aa80 <lwip_htons>
 8014f96:	4603      	mov	r3, r0
 8014f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d006      	beq.n	8014fae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa2:	3308      	adds	r3, #8
 8014fa4:	2214      	movs	r2, #20
 8014fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f000 fe4c 	bl	8015c46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb0:	88db      	ldrh	r3, [r3, #6]
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	f003 0320 	and.w	r3, r3, #32
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	bf0c      	ite	eq
 8014fbc:	2301      	moveq	r3, #1
 8014fbe:	2300      	movne	r3, #0
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d00e      	beq.n	8014fe8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014fca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014fce:	4413      	add	r3, r2
 8014fd0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014fd2:	8b7a      	ldrh	r2, [r7, #26]
 8014fd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014fd6:	429a      	cmp	r2, r3
 8014fd8:	f0c0 80a0 	bcc.w	801511c <ip4_reass+0x2ac>
 8014fdc:	8b7b      	ldrh	r3, [r7, #26]
 8014fde:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014fe2:	4293      	cmp	r3, r2
 8014fe4:	f200 809a 	bhi.w	801511c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014fe8:	69fa      	ldr	r2, [r7, #28]
 8014fea:	6879      	ldr	r1, [r7, #4]
 8014fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fee:	f7ff fdd5 	bl	8014b9c <ip_reass_chain_frag_into_datagram_and_validate>
 8014ff2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ffa:	f000 8091 	beq.w	8015120 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014ffe:	4b5b      	ldr	r3, [pc, #364]	; (801516c <ip4_reass+0x2fc>)
 8015000:	881a      	ldrh	r2, [r3, #0]
 8015002:	8c3b      	ldrh	r3, [r7, #32]
 8015004:	4413      	add	r3, r2
 8015006:	b29a      	uxth	r2, r3
 8015008:	4b58      	ldr	r3, [pc, #352]	; (801516c <ip4_reass+0x2fc>)
 801500a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d00d      	beq.n	801502e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015012:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015016:	4413      	add	r3, r2
 8015018:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501c:	8a7a      	ldrh	r2, [r7, #18]
 801501e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015022:	7f9b      	ldrb	r3, [r3, #30]
 8015024:	f043 0301 	orr.w	r3, r3, #1
 8015028:	b2da      	uxtb	r2, r3
 801502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801502c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	2b01      	cmp	r3, #1
 8015032:	d171      	bne.n	8015118 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015036:	8b9b      	ldrh	r3, [r3, #28]
 8015038:	3314      	adds	r3, #20
 801503a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015050:	3308      	adds	r3, #8
 8015052:	2214      	movs	r2, #20
 8015054:	4619      	mov	r1, r3
 8015056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015058:	f000 fdf5 	bl	8015c46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801505c:	8a3b      	ldrh	r3, [r7, #16]
 801505e:	4618      	mov	r0, r3
 8015060:	f7f5 fd0e 	bl	800aa80 <lwip_htons>
 8015064:	4603      	mov	r3, r0
 8015066:	461a      	mov	r2, r3
 8015068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801506e:	2200      	movs	r2, #0
 8015070:	719a      	strb	r2, [r3, #6]
 8015072:	2200      	movs	r2, #0
 8015074:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015078:	2200      	movs	r2, #0
 801507a:	729a      	strb	r2, [r3, #10]
 801507c:	2200      	movs	r2, #0
 801507e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015086:	e00d      	b.n	80150a4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801508e:	2114      	movs	r1, #20
 8015090:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015092:	f7f7 f81b 	bl	800c0cc <pbuf_remove_header>
      pbuf_cat(p, r);
 8015096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f7f7 f96b 	bl	800c374 <pbuf_cat>
      r = iprh->next_pbuf;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80150a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d1ee      	bne.n	8015088 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80150aa:	4b31      	ldr	r3, [pc, #196]	; (8015170 <ip4_reass+0x300>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d102      	bne.n	80150ba <ip4_reass+0x24a>
      ipr_prev = NULL;
 80150b4:	2300      	movs	r3, #0
 80150b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150b8:	e010      	b.n	80150dc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80150ba:	4b2d      	ldr	r3, [pc, #180]	; (8015170 <ip4_reass+0x300>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150c0:	e007      	b.n	80150d2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80150c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d006      	beq.n	80150da <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80150cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80150d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d1f4      	bne.n	80150c2 <ip4_reass+0x252>
 80150d8:	e000      	b.n	80150dc <ip4_reass+0x26c>
          break;
 80150da:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80150dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80150de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150e0:	f7ff fd2e 	bl	8014b40 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80150e4:	6878      	ldr	r0, [r7, #4]
 80150e6:	f7f7 f905 	bl	800c2f4 <pbuf_clen>
 80150ea:	4603      	mov	r3, r0
 80150ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80150ee:	4b1f      	ldr	r3, [pc, #124]	; (801516c <ip4_reass+0x2fc>)
 80150f0:	881b      	ldrh	r3, [r3, #0]
 80150f2:	8c3a      	ldrh	r2, [r7, #32]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d906      	bls.n	8015106 <ip4_reass+0x296>
 80150f8:	4b1e      	ldr	r3, [pc, #120]	; (8015174 <ip4_reass+0x304>)
 80150fa:	f240 229b 	movw	r2, #667	; 0x29b
 80150fe:	491e      	ldr	r1, [pc, #120]	; (8015178 <ip4_reass+0x308>)
 8015100:	481e      	ldr	r0, [pc, #120]	; (801517c <ip4_reass+0x30c>)
 8015102:	f000 fe2b 	bl	8015d5c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015106:	4b19      	ldr	r3, [pc, #100]	; (801516c <ip4_reass+0x2fc>)
 8015108:	881a      	ldrh	r2, [r3, #0]
 801510a:	8c3b      	ldrh	r3, [r7, #32]
 801510c:	1ad3      	subs	r3, r2, r3
 801510e:	b29a      	uxth	r2, r3
 8015110:	4b16      	ldr	r3, [pc, #88]	; (801516c <ip4_reass+0x2fc>)
 8015112:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	e03c      	b.n	8015192 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015118:	2300      	movs	r3, #0
 801511a:	e03a      	b.n	8015192 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801511c:	bf00      	nop
 801511e:	e000      	b.n	8015122 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015120:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	2b00      	cmp	r3, #0
 8015126:	d106      	bne.n	8015136 <ip4_reass+0x2c6>
 8015128:	4b12      	ldr	r3, [pc, #72]	; (8015174 <ip4_reass+0x304>)
 801512a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801512e:	4914      	ldr	r1, [pc, #80]	; (8015180 <ip4_reass+0x310>)
 8015130:	4812      	ldr	r0, [pc, #72]	; (801517c <ip4_reass+0x30c>)
 8015132:	f000 fe13 	bl	8015d5c <iprintf>
  if (ipr->p == NULL) {
 8015136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015138:	685b      	ldr	r3, [r3, #4]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d124      	bne.n	8015188 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801513e:	4b0c      	ldr	r3, [pc, #48]	; (8015170 <ip4_reass+0x300>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015144:	429a      	cmp	r2, r3
 8015146:	d006      	beq.n	8015156 <ip4_reass+0x2e6>
 8015148:	4b0a      	ldr	r3, [pc, #40]	; (8015174 <ip4_reass+0x304>)
 801514a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801514e:	490d      	ldr	r1, [pc, #52]	; (8015184 <ip4_reass+0x314>)
 8015150:	480a      	ldr	r0, [pc, #40]	; (801517c <ip4_reass+0x30c>)
 8015152:	f000 fe03 	bl	8015d5c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015156:	2100      	movs	r1, #0
 8015158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801515a:	f7ff fcf1 	bl	8014b40 <ip_reass_dequeue_datagram>
 801515e:	e014      	b.n	801518a <ip4_reass+0x31a>
    goto nullreturn;
 8015160:	bf00      	nop
 8015162:	e012      	b.n	801518a <ip4_reass+0x31a>
    goto nullreturn;
 8015164:	bf00      	nop
 8015166:	e010      	b.n	801518a <ip4_reass+0x31a>
      goto nullreturn;
 8015168:	bf00      	nop
 801516a:	e00e      	b.n	801518a <ip4_reass+0x31a>
 801516c:	20004c14 	.word	0x20004c14
 8015170:	20004c10 	.word	0x20004c10
 8015174:	0801a390 	.word	0x0801a390
 8015178:	0801a500 	.word	0x0801a500
 801517c:	0801a3d8 	.word	0x0801a3d8
 8015180:	0801a51c 	.word	0x0801a51c
 8015184:	0801a528 	.word	0x0801a528
  }

nullreturn:
 8015188:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f7f7 f824 	bl	800c1d8 <pbuf_free>
  return NULL;
 8015190:	2300      	movs	r3, #0
}
 8015192:	4618      	mov	r0, r3
 8015194:	3738      	adds	r7, #56	; 0x38
 8015196:	46bd      	mov	sp, r7
 8015198:	bd80      	pop	{r7, pc}
 801519a:	bf00      	nop

0801519c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801519c:	b580      	push	{r7, lr}
 801519e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80151a0:	2005      	movs	r0, #5
 80151a2:	f7f6 f923 	bl	800b3ec <memp_malloc>
 80151a6:	4603      	mov	r3, r0
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	bd80      	pop	{r7, pc}

080151ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b082      	sub	sp, #8
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d106      	bne.n	80151c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80151ba:	4b07      	ldr	r3, [pc, #28]	; (80151d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80151bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80151c0:	4906      	ldr	r1, [pc, #24]	; (80151dc <ip_frag_free_pbuf_custom_ref+0x30>)
 80151c2:	4807      	ldr	r0, [pc, #28]	; (80151e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80151c4:	f000 fdca 	bl	8015d5c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80151c8:	6879      	ldr	r1, [r7, #4]
 80151ca:	2005      	movs	r0, #5
 80151cc:	f7f6 f960 	bl	800b490 <memp_free>
}
 80151d0:	bf00      	nop
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	0801a390 	.word	0x0801a390
 80151dc:	0801a548 	.word	0x0801a548
 80151e0:	0801a3d8 	.word	0x0801a3d8

080151e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d106      	bne.n	8015204 <ipfrag_free_pbuf_custom+0x20>
 80151f6:	4b11      	ldr	r3, [pc, #68]	; (801523c <ipfrag_free_pbuf_custom+0x58>)
 80151f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80151fc:	4910      	ldr	r1, [pc, #64]	; (8015240 <ipfrag_free_pbuf_custom+0x5c>)
 80151fe:	4811      	ldr	r0, [pc, #68]	; (8015244 <ipfrag_free_pbuf_custom+0x60>)
 8015200:	f000 fdac 	bl	8015d5c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015204:	68fa      	ldr	r2, [r7, #12]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	429a      	cmp	r2, r3
 801520a:	d006      	beq.n	801521a <ipfrag_free_pbuf_custom+0x36>
 801520c:	4b0b      	ldr	r3, [pc, #44]	; (801523c <ipfrag_free_pbuf_custom+0x58>)
 801520e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015212:	490d      	ldr	r1, [pc, #52]	; (8015248 <ipfrag_free_pbuf_custom+0x64>)
 8015214:	480b      	ldr	r0, [pc, #44]	; (8015244 <ipfrag_free_pbuf_custom+0x60>)
 8015216:	f000 fda1 	bl	8015d5c <iprintf>
  if (pcr->original != NULL) {
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	695b      	ldr	r3, [r3, #20]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d004      	beq.n	801522c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	695b      	ldr	r3, [r3, #20]
 8015226:	4618      	mov	r0, r3
 8015228:	f7f6 ffd6 	bl	800c1d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f7ff ffbd 	bl	80151ac <ip_frag_free_pbuf_custom_ref>
}
 8015232:	bf00      	nop
 8015234:	3710      	adds	r7, #16
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	0801a390 	.word	0x0801a390
 8015240:	0801a554 	.word	0x0801a554
 8015244:	0801a3d8 	.word	0x0801a3d8
 8015248:	0801a560 	.word	0x0801a560

0801524c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b094      	sub	sp, #80	; 0x50
 8015250:	af02      	add	r7, sp, #8
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015258:	2300      	movs	r3, #0
 801525a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015262:	3b14      	subs	r3, #20
 8015264:	2b00      	cmp	r3, #0
 8015266:	da00      	bge.n	801526a <ip4_frag+0x1e>
 8015268:	3307      	adds	r3, #7
 801526a:	10db      	asrs	r3, r3, #3
 801526c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801526e:	2314      	movs	r3, #20
 8015270:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801527a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	f003 030f 	and.w	r3, r3, #15
 8015284:	b2db      	uxtb	r3, r3
 8015286:	009b      	lsls	r3, r3, #2
 8015288:	b2db      	uxtb	r3, r3
 801528a:	2b14      	cmp	r3, #20
 801528c:	d002      	beq.n	8015294 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801528e:	f06f 0305 	mvn.w	r3, #5
 8015292:	e110      	b.n	80154b6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	895b      	ldrh	r3, [r3, #10]
 8015298:	2b13      	cmp	r3, #19
 801529a:	d809      	bhi.n	80152b0 <ip4_frag+0x64>
 801529c:	4b88      	ldr	r3, [pc, #544]	; (80154c0 <ip4_frag+0x274>)
 801529e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80152a2:	4988      	ldr	r1, [pc, #544]	; (80154c4 <ip4_frag+0x278>)
 80152a4:	4888      	ldr	r0, [pc, #544]	; (80154c8 <ip4_frag+0x27c>)
 80152a6:	f000 fd59 	bl	8015d5c <iprintf>
 80152aa:	f06f 0305 	mvn.w	r3, #5
 80152ae:	e102      	b.n	80154b6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80152b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b2:	88db      	ldrh	r3, [r3, #6]
 80152b4:	b29b      	uxth	r3, r3
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7f5 fbe2 	bl	800aa80 <lwip_htons>
 80152bc:	4603      	mov	r3, r0
 80152be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80152c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80152c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80152ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80152cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80152d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	891b      	ldrh	r3, [r3, #8]
 80152d6:	3b14      	subs	r3, #20
 80152d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80152dc:	e0e1      	b.n	80154a2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80152de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80152e0:	00db      	lsls	r3, r3, #3
 80152e2:	b29b      	uxth	r3, r3
 80152e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152e8:	4293      	cmp	r3, r2
 80152ea:	bf28      	it	cs
 80152ec:	4613      	movcs	r3, r2
 80152ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80152f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152f4:	2114      	movs	r1, #20
 80152f6:	200e      	movs	r0, #14
 80152f8:	f7f6 fc8a 	bl	800bc10 <pbuf_alloc>
 80152fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80152fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015300:	2b00      	cmp	r3, #0
 8015302:	f000 80d5 	beq.w	80154b0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015308:	895b      	ldrh	r3, [r3, #10]
 801530a:	2b13      	cmp	r3, #19
 801530c:	d806      	bhi.n	801531c <ip4_frag+0xd0>
 801530e:	4b6c      	ldr	r3, [pc, #432]	; (80154c0 <ip4_frag+0x274>)
 8015310:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015314:	496d      	ldr	r1, [pc, #436]	; (80154cc <ip4_frag+0x280>)
 8015316:	486c      	ldr	r0, [pc, #432]	; (80154c8 <ip4_frag+0x27c>)
 8015318:	f000 fd20 	bl	8015d5c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	2214      	movs	r2, #20
 8015322:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015324:	4618      	mov	r0, r3
 8015326:	f000 fc8e 	bl	8015c46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532c:	685b      	ldr	r3, [r3, #4]
 801532e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015330:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015332:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015336:	e064      	b.n	8015402 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	895a      	ldrh	r2, [r3, #10]
 801533c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801533e:	1ad3      	subs	r3, r2, r3
 8015340:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	895b      	ldrh	r3, [r3, #10]
 8015346:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015348:	429a      	cmp	r2, r3
 801534a:	d906      	bls.n	801535a <ip4_frag+0x10e>
 801534c:	4b5c      	ldr	r3, [pc, #368]	; (80154c0 <ip4_frag+0x274>)
 801534e:	f240 322d 	movw	r2, #813	; 0x32d
 8015352:	495f      	ldr	r1, [pc, #380]	; (80154d0 <ip4_frag+0x284>)
 8015354:	485c      	ldr	r0, [pc, #368]	; (80154c8 <ip4_frag+0x27c>)
 8015356:	f000 fd01 	bl	8015d5c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801535a:	8bfa      	ldrh	r2, [r7, #30]
 801535c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015360:	4293      	cmp	r3, r2
 8015362:	bf28      	it	cs
 8015364:	4613      	movcs	r3, r2
 8015366:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801536a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801536e:	2b00      	cmp	r3, #0
 8015370:	d105      	bne.n	801537e <ip4_frag+0x132>
        poff = 0;
 8015372:	2300      	movs	r3, #0
 8015374:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	60fb      	str	r3, [r7, #12]
        continue;
 801537c:	e041      	b.n	8015402 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801537e:	f7ff ff0d 	bl	801519c <ip_frag_alloc_pbuf_custom_ref>
 8015382:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d103      	bne.n	8015392 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801538a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801538c:	f7f6 ff24 	bl	800c1d8 <pbuf_free>
        goto memerr;
 8015390:	e08f      	b.n	80154b2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015392:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015398:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801539a:	4413      	add	r3, r2
 801539c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80153a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80153a4:	9201      	str	r2, [sp, #4]
 80153a6:	9300      	str	r3, [sp, #0]
 80153a8:	4603      	mov	r3, r0
 80153aa:	2241      	movs	r2, #65	; 0x41
 80153ac:	2000      	movs	r0, #0
 80153ae:	f7f6 fd59 	bl	800be64 <pbuf_alloced_custom>
 80153b2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d106      	bne.n	80153c8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80153ba:	69b8      	ldr	r0, [r7, #24]
 80153bc:	f7ff fef6 	bl	80151ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80153c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153c2:	f7f6 ff09 	bl	800c1d8 <pbuf_free>
        goto memerr;
 80153c6:	e074      	b.n	80154b2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f7f6 ffab 	bl	800c324 <pbuf_ref>
      pcr->original = p;
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80153d4:	69bb      	ldr	r3, [r7, #24]
 80153d6:	4a3f      	ldr	r2, [pc, #252]	; (80154d4 <ip4_frag+0x288>)
 80153d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80153da:	6979      	ldr	r1, [r7, #20]
 80153dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153de:	f7f6 ffc9 	bl	800c374 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80153e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80153e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80153ea:	1ad3      	subs	r3, r2, r3
 80153ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80153f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d004      	beq.n	8015402 <ip4_frag+0x1b6>
        poff = 0;
 80153f8:	2300      	movs	r3, #0
 80153fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015402:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015406:	2b00      	cmp	r3, #0
 8015408:	d196      	bne.n	8015338 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801540a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801540c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015410:	4413      	add	r3, r2
 8015412:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015418:	f1a3 0213 	sub.w	r2, r3, #19
 801541c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015420:	429a      	cmp	r2, r3
 8015422:	bfcc      	ite	gt
 8015424:	2301      	movgt	r3, #1
 8015426:	2300      	movle	r3, #0
 8015428:	b2db      	uxtb	r3, r3
 801542a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801542c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015434:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015436:	6a3b      	ldr	r3, [r7, #32]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d002      	beq.n	8015442 <ip4_frag+0x1f6>
 801543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543e:	2b00      	cmp	r3, #0
 8015440:	d003      	beq.n	801544a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015442:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015448:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801544a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801544c:	4618      	mov	r0, r3
 801544e:	f7f5 fb17 	bl	800aa80 <lwip_htons>
 8015452:	4603      	mov	r3, r0
 8015454:	461a      	mov	r2, r3
 8015456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015458:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801545a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801545c:	3314      	adds	r3, #20
 801545e:	b29b      	uxth	r3, r3
 8015460:	4618      	mov	r0, r3
 8015462:	f7f5 fb0d 	bl	800aa80 <lwip_htons>
 8015466:	4603      	mov	r3, r0
 8015468:	461a      	mov	r2, r3
 801546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801546c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015470:	2200      	movs	r2, #0
 8015472:	729a      	strb	r2, [r3, #10]
 8015474:	2200      	movs	r2, #0
 8015476:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	695b      	ldr	r3, [r3, #20]
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015480:	68b8      	ldr	r0, [r7, #8]
 8015482:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015486:	f7f6 fea7 	bl	800c1d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801548a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801548e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015490:	1ad3      	subs	r3, r2, r3
 8015492:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015496:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801549a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801549c:	4413      	add	r3, r2
 801549e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80154a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	f47f af19 	bne.w	80152de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80154ac:	2300      	movs	r3, #0
 80154ae:	e002      	b.n	80154b6 <ip4_frag+0x26a>
      goto memerr;
 80154b0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80154b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3748      	adds	r7, #72	; 0x48
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	0801a390 	.word	0x0801a390
 80154c4:	0801a56c 	.word	0x0801a56c
 80154c8:	0801a3d8 	.word	0x0801a3d8
 80154cc:	0801a588 	.word	0x0801a588
 80154d0:	0801a5a8 	.word	0x0801a5a8
 80154d4:	080151e5 	.word	0x080151e5

080154d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b086      	sub	sp, #24
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
 80154e0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80154e2:	230e      	movs	r3, #14
 80154e4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	895b      	ldrh	r3, [r3, #10]
 80154ea:	2b0e      	cmp	r3, #14
 80154ec:	d96e      	bls.n	80155cc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	7bdb      	ldrb	r3, [r3, #15]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d106      	bne.n	8015504 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80154fc:	3301      	adds	r3, #1
 80154fe:	b2da      	uxtb	r2, r3
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	7b1a      	ldrb	r2, [r3, #12]
 801550e:	7b5b      	ldrb	r3, [r3, #13]
 8015510:	021b      	lsls	r3, r3, #8
 8015512:	4313      	orrs	r3, r2
 8015514:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	f003 0301 	and.w	r3, r3, #1
 801551e:	2b00      	cmp	r3, #0
 8015520:	d023      	beq.n	801556a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	2b01      	cmp	r3, #1
 8015528:	d10f      	bne.n	801554a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	785b      	ldrb	r3, [r3, #1]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d11b      	bne.n	801556a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015536:	2b5e      	cmp	r3, #94	; 0x5e
 8015538:	d117      	bne.n	801556a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	7b5b      	ldrb	r3, [r3, #13]
 801553e:	f043 0310 	orr.w	r3, r3, #16
 8015542:	b2da      	uxtb	r2, r3
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	735a      	strb	r2, [r3, #13]
 8015548:	e00f      	b.n	801556a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	2206      	movs	r2, #6
 801554e:	4928      	ldr	r1, [pc, #160]	; (80155f0 <ethernet_input+0x118>)
 8015550:	4618      	mov	r0, r3
 8015552:	f000 fb6a 	bl	8015c2a <memcmp>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d106      	bne.n	801556a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	7b5b      	ldrb	r3, [r3, #13]
 8015560:	f043 0308 	orr.w	r3, r3, #8
 8015564:	b2da      	uxtb	r2, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801556a:	89fb      	ldrh	r3, [r7, #14]
 801556c:	2b08      	cmp	r3, #8
 801556e:	d003      	beq.n	8015578 <ethernet_input+0xa0>
 8015570:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015574:	d014      	beq.n	80155a0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015576:	e032      	b.n	80155de <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801557e:	f003 0308 	and.w	r3, r3, #8
 8015582:	2b00      	cmp	r3, #0
 8015584:	d024      	beq.n	80155d0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015586:	8afb      	ldrh	r3, [r7, #22]
 8015588:	4619      	mov	r1, r3
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f7f6 fd9e 	bl	800c0cc <pbuf_remove_header>
 8015590:	4603      	mov	r3, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d11e      	bne.n	80155d4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015596:	6839      	ldr	r1, [r7, #0]
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f7fe ff27 	bl	80143ec <ip4_input>
      break;
 801559e:	e013      	b.n	80155c8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80155a0:	683b      	ldr	r3, [r7, #0]
 80155a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155a6:	f003 0308 	and.w	r3, r3, #8
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d014      	beq.n	80155d8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80155ae:	8afb      	ldrh	r3, [r7, #22]
 80155b0:	4619      	mov	r1, r3
 80155b2:	6878      	ldr	r0, [r7, #4]
 80155b4:	f7f6 fd8a 	bl	800c0cc <pbuf_remove_header>
 80155b8:	4603      	mov	r3, r0
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d10e      	bne.n	80155dc <ethernet_input+0x104>
        etharp_input(p, netif);
 80155be:	6839      	ldr	r1, [r7, #0]
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7fe f8c7 	bl	8013754 <etharp_input>
      break;
 80155c6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80155c8:	2300      	movs	r3, #0
 80155ca:	e00c      	b.n	80155e6 <ethernet_input+0x10e>
    goto free_and_return;
 80155cc:	bf00      	nop
 80155ce:	e006      	b.n	80155de <ethernet_input+0x106>
        goto free_and_return;
 80155d0:	bf00      	nop
 80155d2:	e004      	b.n	80155de <ethernet_input+0x106>
        goto free_and_return;
 80155d4:	bf00      	nop
 80155d6:	e002      	b.n	80155de <ethernet_input+0x106>
        goto free_and_return;
 80155d8:	bf00      	nop
 80155da:	e000      	b.n	80155de <ethernet_input+0x106>
        goto free_and_return;
 80155dc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f7f6 fdfa 	bl	800c1d8 <pbuf_free>
  return ERR_OK;
 80155e4:	2300      	movs	r3, #0
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3718      	adds	r7, #24
 80155ea:	46bd      	mov	sp, r7
 80155ec:	bd80      	pop	{r7, pc}
 80155ee:	bf00      	nop
 80155f0:	0801a7c4 	.word	0x0801a7c4

080155f4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80155f4:	b580      	push	{r7, lr}
 80155f6:	b086      	sub	sp, #24
 80155f8:	af00      	add	r7, sp, #0
 80155fa:	60f8      	str	r0, [r7, #12]
 80155fc:	60b9      	str	r1, [r7, #8]
 80155fe:	607a      	str	r2, [r7, #4]
 8015600:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015602:	8c3b      	ldrh	r3, [r7, #32]
 8015604:	4618      	mov	r0, r3
 8015606:	f7f5 fa3b 	bl	800aa80 <lwip_htons>
 801560a:	4603      	mov	r3, r0
 801560c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801560e:	210e      	movs	r1, #14
 8015610:	68b8      	ldr	r0, [r7, #8]
 8015612:	f7f6 fd4b 	bl	800c0ac <pbuf_add_header>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	d125      	bne.n	8015668 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015622:	693b      	ldr	r3, [r7, #16]
 8015624:	8afa      	ldrh	r2, [r7, #22]
 8015626:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	2206      	movs	r2, #6
 801562c:	6839      	ldr	r1, [r7, #0]
 801562e:	4618      	mov	r0, r3
 8015630:	f000 fb09 	bl	8015c46 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	3306      	adds	r3, #6
 8015638:	2206      	movs	r2, #6
 801563a:	6879      	ldr	r1, [r7, #4]
 801563c:	4618      	mov	r0, r3
 801563e:	f000 fb02 	bl	8015c46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015648:	2b06      	cmp	r3, #6
 801564a:	d006      	beq.n	801565a <ethernet_output+0x66>
 801564c:	4b0a      	ldr	r3, [pc, #40]	; (8015678 <ethernet_output+0x84>)
 801564e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015652:	490a      	ldr	r1, [pc, #40]	; (801567c <ethernet_output+0x88>)
 8015654:	480a      	ldr	r0, [pc, #40]	; (8015680 <ethernet_output+0x8c>)
 8015656:	f000 fb81 	bl	8015d5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	699b      	ldr	r3, [r3, #24]
 801565e:	68b9      	ldr	r1, [r7, #8]
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	4798      	blx	r3
 8015664:	4603      	mov	r3, r0
 8015666:	e002      	b.n	801566e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015668:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801566a:	f06f 0301 	mvn.w	r3, #1
}
 801566e:	4618      	mov	r0, r3
 8015670:	3718      	adds	r7, #24
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}
 8015676:	bf00      	nop
 8015678:	0801a5b8 	.word	0x0801a5b8
 801567c:	0801a5f0 	.word	0x0801a5f0
 8015680:	0801a624 	.word	0x0801a624

08015684 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	2200      	movs	r2, #0
 8015692:	2104      	movs	r1, #4
 8015694:	4618      	mov	r0, r3
 8015696:	f7ef fc05 	bl	8004ea4 <osMessageQueueNew>
 801569a:	4602      	mov	r2, r0
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d102      	bne.n	80156ae <sys_mbox_new+0x2a>
    return ERR_MEM;
 80156a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156ac:	e000      	b.n	80156b0 <sys_mbox_new+0x2c>

  return ERR_OK;
 80156ae:	2300      	movs	r3, #0
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3708      	adds	r7, #8
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b082      	sub	sp, #8
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7ef fd1f 	bl	8005108 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7ef fd3a 	bl	8005148 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80156d4:	bf00      	nop
 80156d6:	3708      	adds	r7, #8
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b084      	sub	sp, #16
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
 80156e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6818      	ldr	r0, [r3, #0]
 80156ea:	4639      	mov	r1, r7
 80156ec:	2300      	movs	r3, #0
 80156ee:	2200      	movs	r2, #0
 80156f0:	f7ef fc4c 	bl	8004f8c <osMessageQueuePut>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d102      	bne.n	8015700 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80156fa:	2300      	movs	r3, #0
 80156fc:	73fb      	strb	r3, [r7, #15]
 80156fe:	e001      	b.n	8015704 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015700:	23ff      	movs	r3, #255	; 0xff
 8015702:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015708:	4618      	mov	r0, r3
 801570a:	3710      	adds	r7, #16
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}

08015710 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801571c:	f7ef f8ae 	bl	800487c <osKernelGetTickCount>
 8015720:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d013      	beq.n	8015750 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	6818      	ldr	r0, [r3, #0]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2200      	movs	r2, #0
 8015730:	68b9      	ldr	r1, [r7, #8]
 8015732:	f7ef fc8b 	bl	800504c <osMessageQueueGet>
 8015736:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8015738:	693b      	ldr	r3, [r7, #16]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d105      	bne.n	801574a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801573e:	f7ef f89d 	bl	800487c <osKernelGetTickCount>
 8015742:	4602      	mov	r2, r0
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	1ad3      	subs	r3, r2, r3
 8015748:	e00f      	b.n	801576a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801574a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801574e:	e00c      	b.n	801576a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	6818      	ldr	r0, [r3, #0]
 8015754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015758:	2200      	movs	r2, #0
 801575a:	68b9      	ldr	r1, [r7, #8]
 801575c:	f7ef fc76 	bl	800504c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015760:	f7ef f88c 	bl	800487c <osKernelGetTickCount>
 8015764:	4602      	mov	r2, r0
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801576a:	4618      	mov	r0, r3
 801576c:	3718      	adds	r7, #24
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015772:	b580      	push	{r7, lr}
 8015774:	b082      	sub	sp, #8
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
 801577a:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	6818      	ldr	r0, [r3, #0]
 8015780:	2300      	movs	r3, #0
 8015782:	2200      	movs	r2, #0
 8015784:	6839      	ldr	r1, [r7, #0]
 8015786:	f7ef fc61 	bl	800504c <osMessageQueueGet>
 801578a:	4603      	mov	r3, r0
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8015790:	2300      	movs	r3, #0
 8015792:	e001      	b.n	8015798 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8015798:	4618      	mov	r0, r3
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80157a0:	b480      	push	{r7}
 80157a2:	b083      	sub	sp, #12
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d101      	bne.n	80157b4 <sys_mbox_valid+0x14>
    return 0;
 80157b0:	2300      	movs	r3, #0
 80157b2:	e000      	b.n	80157b6 <sys_mbox_valid+0x16>
  else
    return 1;
 80157b4:	2301      	movs	r3, #1
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	370c      	adds	r7, #12
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr

080157c2 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80157c2:	b480      	push	{r7}
 80157c4:	b083      	sub	sp, #12
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2200      	movs	r2, #0
 80157ce:	601a      	str	r2, [r3, #0]
}
 80157d0:	bf00      	nop
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr

080157dc <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	460b      	mov	r3, r1
 80157e6:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80157e8:	78fb      	ldrb	r3, [r7, #3]
 80157ea:	2200      	movs	r2, #0
 80157ec:	4619      	mov	r1, r3
 80157ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157f2:	f7ef fa13 	bl	8004c1c <osSemaphoreNew>
 80157f6:	4602      	mov	r2, r0
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d102      	bne.n	801580a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015808:	e009      	b.n	801581e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801580a:	78fb      	ldrb	r3, [r7, #3]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d105      	bne.n	801581c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2100      	movs	r1, #0
 8015816:	4618      	mov	r0, r3
 8015818:	f7ef fa8a 	bl	8004d30 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801581c:	2300      	movs	r3, #0
}
 801581e:	4618      	mov	r0, r3
 8015820:	3708      	adds	r7, #8
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015826:	b580      	push	{r7, lr}
 8015828:	b084      	sub	sp, #16
 801582a:	af00      	add	r7, sp, #0
 801582c:	6078      	str	r0, [r7, #4]
 801582e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8015830:	f7ef f824 	bl	800487c <osKernelGetTickCount>
 8015834:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d011      	beq.n	8015860 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	6839      	ldr	r1, [r7, #0]
 8015842:	4618      	mov	r0, r3
 8015844:	f7ef fa74 	bl	8004d30 <osSemaphoreAcquire>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d105      	bne.n	801585a <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801584e:	f7ef f815 	bl	800487c <osKernelGetTickCount>
 8015852:	4602      	mov	r2, r0
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	e012      	b.n	8015880 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801585a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801585e:	e00f      	b.n	8015880 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8015860:	bf00      	nop
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801586a:	4618      	mov	r0, r3
 801586c:	f7ef fa60 	bl	8004d30 <osSemaphoreAcquire>
 8015870:	4603      	mov	r3, r0
 8015872:	2b00      	cmp	r3, #0
 8015874:	d1f5      	bne.n	8015862 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8015876:	f7ef f801 	bl	800487c <osKernelGetTickCount>
 801587a:	4602      	mov	r2, r0
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015880:	4618      	mov	r0, r3
 8015882:	3710      	adds	r7, #16
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	4618      	mov	r0, r3
 8015896:	f7ef fa9d 	bl	8004dd4 <osSemaphoreRelease>
}
 801589a:	bf00      	nop
 801589c:	3708      	adds	r7, #8
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80158a2:	b580      	push	{r7, lr}
 80158a4:	b082      	sub	sp, #8
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7ef fad4 	bl	8004e5c <osSemaphoreDelete>
}
 80158b4:	bf00      	nop
 80158b6:	3708      	adds	r7, #8
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}

080158bc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d101      	bne.n	80158d0 <sys_sem_valid+0x14>
    return 0;
 80158cc:	2300      	movs	r3, #0
 80158ce:	e000      	b.n	80158d2 <sys_sem_valid+0x16>
  else
    return 1;
 80158d0:	2301      	movs	r3, #1
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	370c      	adds	r7, #12
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr

080158de <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80158de:	b480      	push	{r7}
 80158e0:	b083      	sub	sp, #12
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	601a      	str	r2, [r3, #0]
}
 80158ec:	bf00      	nop
 80158ee:	370c      	adds	r7, #12
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr

080158f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80158fc:	2000      	movs	r0, #0
 80158fe:	f7ef f87f 	bl	8004a00 <osMutexNew>
 8015902:	4603      	mov	r3, r0
 8015904:	4a01      	ldr	r2, [pc, #4]	; (801590c <sys_init+0x14>)
 8015906:	6013      	str	r3, [r2, #0]
#endif
}
 8015908:	bf00      	nop
 801590a:	bd80      	pop	{r7, pc}
 801590c:	2000d87c 	.word	0x2000d87c

08015910 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015910:	b580      	push	{r7, lr}
 8015912:	b082      	sub	sp, #8
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015918:	2000      	movs	r0, #0
 801591a:	f7ef f871 	bl	8004a00 <osMutexNew>
 801591e:	4602      	mov	r2, r0
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d102      	bne.n	8015932 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801592c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015930:	e000      	b.n	8015934 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015932:	2300      	movs	r3, #0
}
 8015934:	4618      	mov	r0, r3
 8015936:	3708      	adds	r7, #8
 8015938:	46bd      	mov	sp, r7
 801593a:	bd80      	pop	{r7, pc}

0801593c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b082      	sub	sp, #8
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801594c:	4618      	mov	r0, r3
 801594e:	f7ef f8dd 	bl	8004b0c <osMutexAcquire>
#endif
}
 8015952:	bf00      	nop
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b082      	sub	sp, #8
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4618      	mov	r0, r3
 8015968:	f7ef f91b 	bl	8004ba2 <osMutexRelease>
}
 801596c:	bf00      	nop
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b08e      	sub	sp, #56	; 0x38
 8015978:	af00      	add	r7, sp, #0
 801597a:	60f8      	str	r0, [r7, #12]
 801597c:	60b9      	str	r1, [r7, #8]
 801597e:	607a      	str	r2, [r7, #4]
 8015980:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8015982:	f107 0314 	add.w	r3, r7, #20
 8015986:	2224      	movs	r2, #36	; 0x24
 8015988:	2100      	movs	r1, #0
 801598a:	4618      	mov	r0, r3
 801598c:	f000 f983 	bl	8015c96 <memset>
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	617b      	str	r3, [r7, #20]
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	62bb      	str	r3, [r7, #40]	; 0x28
 8015998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801599a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801599c:	f107 0314 	add.w	r3, r7, #20
 80159a0:	461a      	mov	r2, r3
 80159a2:	6879      	ldr	r1, [r7, #4]
 80159a4:	68b8      	ldr	r0, [r7, #8]
 80159a6:	f7ee ff7e 	bl	80048a6 <osThreadNew>
 80159aa:	4603      	mov	r3, r0
#endif
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3738      	adds	r7, #56	; 0x38
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80159b8:	4b04      	ldr	r3, [pc, #16]	; (80159cc <sys_arch_protect+0x18>)
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7ef f8a3 	bl	8004b0c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80159c6:	2301      	movs	r3, #1
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	2000d87c 	.word	0x2000d87c

080159d0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b082      	sub	sp, #8
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80159d8:	4b04      	ldr	r3, [pc, #16]	; (80159ec <sys_arch_unprotect+0x1c>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	4618      	mov	r0, r3
 80159de:	f7ef f8e0 	bl	8004ba2 <osMutexRelease>
}
 80159e2:	bf00      	nop
 80159e4:	3708      	adds	r7, #8
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bd80      	pop	{r7, pc}
 80159ea:	bf00      	nop
 80159ec:	2000d87c 	.word	0x2000d87c

080159f0 <std>:
 80159f0:	2300      	movs	r3, #0
 80159f2:	b510      	push	{r4, lr}
 80159f4:	4604      	mov	r4, r0
 80159f6:	e9c0 3300 	strd	r3, r3, [r0]
 80159fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159fe:	6083      	str	r3, [r0, #8]
 8015a00:	8181      	strh	r1, [r0, #12]
 8015a02:	6643      	str	r3, [r0, #100]	; 0x64
 8015a04:	81c2      	strh	r2, [r0, #14]
 8015a06:	6183      	str	r3, [r0, #24]
 8015a08:	4619      	mov	r1, r3
 8015a0a:	2208      	movs	r2, #8
 8015a0c:	305c      	adds	r0, #92	; 0x5c
 8015a0e:	f000 f942 	bl	8015c96 <memset>
 8015a12:	4b05      	ldr	r3, [pc, #20]	; (8015a28 <std+0x38>)
 8015a14:	6263      	str	r3, [r4, #36]	; 0x24
 8015a16:	4b05      	ldr	r3, [pc, #20]	; (8015a2c <std+0x3c>)
 8015a18:	62a3      	str	r3, [r4, #40]	; 0x28
 8015a1a:	4b05      	ldr	r3, [pc, #20]	; (8015a30 <std+0x40>)
 8015a1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a1e:	4b05      	ldr	r3, [pc, #20]	; (8015a34 <std+0x44>)
 8015a20:	6224      	str	r4, [r4, #32]
 8015a22:	6323      	str	r3, [r4, #48]	; 0x30
 8015a24:	bd10      	pop	{r4, pc}
 8015a26:	bf00      	nop
 8015a28:	0801602d 	.word	0x0801602d
 8015a2c:	0801604f 	.word	0x0801604f
 8015a30:	08016087 	.word	0x08016087
 8015a34:	080160ab 	.word	0x080160ab

08015a38 <_cleanup_r>:
 8015a38:	4901      	ldr	r1, [pc, #4]	; (8015a40 <_cleanup_r+0x8>)
 8015a3a:	f000 b8af 	b.w	8015b9c <_fwalk_reent>
 8015a3e:	bf00      	nop
 8015a40:	080163e5 	.word	0x080163e5

08015a44 <__sfmoreglue>:
 8015a44:	b570      	push	{r4, r5, r6, lr}
 8015a46:	1e4a      	subs	r2, r1, #1
 8015a48:	2568      	movs	r5, #104	; 0x68
 8015a4a:	4355      	muls	r5, r2
 8015a4c:	460e      	mov	r6, r1
 8015a4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015a52:	f000 f929 	bl	8015ca8 <_malloc_r>
 8015a56:	4604      	mov	r4, r0
 8015a58:	b140      	cbz	r0, 8015a6c <__sfmoreglue+0x28>
 8015a5a:	2100      	movs	r1, #0
 8015a5c:	e9c0 1600 	strd	r1, r6, [r0]
 8015a60:	300c      	adds	r0, #12
 8015a62:	60a0      	str	r0, [r4, #8]
 8015a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015a68:	f000 f915 	bl	8015c96 <memset>
 8015a6c:	4620      	mov	r0, r4
 8015a6e:	bd70      	pop	{r4, r5, r6, pc}

08015a70 <__sfp_lock_acquire>:
 8015a70:	4801      	ldr	r0, [pc, #4]	; (8015a78 <__sfp_lock_acquire+0x8>)
 8015a72:	f000 b8d8 	b.w	8015c26 <__retarget_lock_acquire_recursive>
 8015a76:	bf00      	nop
 8015a78:	2000d888 	.word	0x2000d888

08015a7c <__sfp_lock_release>:
 8015a7c:	4801      	ldr	r0, [pc, #4]	; (8015a84 <__sfp_lock_release+0x8>)
 8015a7e:	f000 b8d3 	b.w	8015c28 <__retarget_lock_release_recursive>
 8015a82:	bf00      	nop
 8015a84:	2000d888 	.word	0x2000d888

08015a88 <__sinit_lock_acquire>:
 8015a88:	4801      	ldr	r0, [pc, #4]	; (8015a90 <__sinit_lock_acquire+0x8>)
 8015a8a:	f000 b8cc 	b.w	8015c26 <__retarget_lock_acquire_recursive>
 8015a8e:	bf00      	nop
 8015a90:	2000d883 	.word	0x2000d883

08015a94 <__sinit_lock_release>:
 8015a94:	4801      	ldr	r0, [pc, #4]	; (8015a9c <__sinit_lock_release+0x8>)
 8015a96:	f000 b8c7 	b.w	8015c28 <__retarget_lock_release_recursive>
 8015a9a:	bf00      	nop
 8015a9c:	2000d883 	.word	0x2000d883

08015aa0 <__sinit>:
 8015aa0:	b510      	push	{r4, lr}
 8015aa2:	4604      	mov	r4, r0
 8015aa4:	f7ff fff0 	bl	8015a88 <__sinit_lock_acquire>
 8015aa8:	69a3      	ldr	r3, [r4, #24]
 8015aaa:	b11b      	cbz	r3, 8015ab4 <__sinit+0x14>
 8015aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ab0:	f7ff bff0 	b.w	8015a94 <__sinit_lock_release>
 8015ab4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015ab8:	6523      	str	r3, [r4, #80]	; 0x50
 8015aba:	4b13      	ldr	r3, [pc, #76]	; (8015b08 <__sinit+0x68>)
 8015abc:	4a13      	ldr	r2, [pc, #76]	; (8015b0c <__sinit+0x6c>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	62a2      	str	r2, [r4, #40]	; 0x28
 8015ac2:	42a3      	cmp	r3, r4
 8015ac4:	bf04      	itt	eq
 8015ac6:	2301      	moveq	r3, #1
 8015ac8:	61a3      	streq	r3, [r4, #24]
 8015aca:	4620      	mov	r0, r4
 8015acc:	f000 f820 	bl	8015b10 <__sfp>
 8015ad0:	6060      	str	r0, [r4, #4]
 8015ad2:	4620      	mov	r0, r4
 8015ad4:	f000 f81c 	bl	8015b10 <__sfp>
 8015ad8:	60a0      	str	r0, [r4, #8]
 8015ada:	4620      	mov	r0, r4
 8015adc:	f000 f818 	bl	8015b10 <__sfp>
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	60e0      	str	r0, [r4, #12]
 8015ae4:	2104      	movs	r1, #4
 8015ae6:	6860      	ldr	r0, [r4, #4]
 8015ae8:	f7ff ff82 	bl	80159f0 <std>
 8015aec:	68a0      	ldr	r0, [r4, #8]
 8015aee:	2201      	movs	r2, #1
 8015af0:	2109      	movs	r1, #9
 8015af2:	f7ff ff7d 	bl	80159f0 <std>
 8015af6:	68e0      	ldr	r0, [r4, #12]
 8015af8:	2202      	movs	r2, #2
 8015afa:	2112      	movs	r1, #18
 8015afc:	f7ff ff78 	bl	80159f0 <std>
 8015b00:	2301      	movs	r3, #1
 8015b02:	61a3      	str	r3, [r4, #24]
 8015b04:	e7d2      	b.n	8015aac <__sinit+0xc>
 8015b06:	bf00      	nop
 8015b08:	0801a834 	.word	0x0801a834
 8015b0c:	08015a39 	.word	0x08015a39

08015b10 <__sfp>:
 8015b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b12:	4607      	mov	r7, r0
 8015b14:	f7ff ffac 	bl	8015a70 <__sfp_lock_acquire>
 8015b18:	4b1e      	ldr	r3, [pc, #120]	; (8015b94 <__sfp+0x84>)
 8015b1a:	681e      	ldr	r6, [r3, #0]
 8015b1c:	69b3      	ldr	r3, [r6, #24]
 8015b1e:	b913      	cbnz	r3, 8015b26 <__sfp+0x16>
 8015b20:	4630      	mov	r0, r6
 8015b22:	f7ff ffbd 	bl	8015aa0 <__sinit>
 8015b26:	3648      	adds	r6, #72	; 0x48
 8015b28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015b2c:	3b01      	subs	r3, #1
 8015b2e:	d503      	bpl.n	8015b38 <__sfp+0x28>
 8015b30:	6833      	ldr	r3, [r6, #0]
 8015b32:	b30b      	cbz	r3, 8015b78 <__sfp+0x68>
 8015b34:	6836      	ldr	r6, [r6, #0]
 8015b36:	e7f7      	b.n	8015b28 <__sfp+0x18>
 8015b38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015b3c:	b9d5      	cbnz	r5, 8015b74 <__sfp+0x64>
 8015b3e:	4b16      	ldr	r3, [pc, #88]	; (8015b98 <__sfp+0x88>)
 8015b40:	60e3      	str	r3, [r4, #12]
 8015b42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015b46:	6665      	str	r5, [r4, #100]	; 0x64
 8015b48:	f000 f86c 	bl	8015c24 <__retarget_lock_init_recursive>
 8015b4c:	f7ff ff96 	bl	8015a7c <__sfp_lock_release>
 8015b50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015b54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015b58:	6025      	str	r5, [r4, #0]
 8015b5a:	61a5      	str	r5, [r4, #24]
 8015b5c:	2208      	movs	r2, #8
 8015b5e:	4629      	mov	r1, r5
 8015b60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015b64:	f000 f897 	bl	8015c96 <memset>
 8015b68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015b6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015b70:	4620      	mov	r0, r4
 8015b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b74:	3468      	adds	r4, #104	; 0x68
 8015b76:	e7d9      	b.n	8015b2c <__sfp+0x1c>
 8015b78:	2104      	movs	r1, #4
 8015b7a:	4638      	mov	r0, r7
 8015b7c:	f7ff ff62 	bl	8015a44 <__sfmoreglue>
 8015b80:	4604      	mov	r4, r0
 8015b82:	6030      	str	r0, [r6, #0]
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d1d5      	bne.n	8015b34 <__sfp+0x24>
 8015b88:	f7ff ff78 	bl	8015a7c <__sfp_lock_release>
 8015b8c:	230c      	movs	r3, #12
 8015b8e:	603b      	str	r3, [r7, #0]
 8015b90:	e7ee      	b.n	8015b70 <__sfp+0x60>
 8015b92:	bf00      	nop
 8015b94:	0801a834 	.word	0x0801a834
 8015b98:	ffff0001 	.word	0xffff0001

08015b9c <_fwalk_reent>:
 8015b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ba0:	4606      	mov	r6, r0
 8015ba2:	4688      	mov	r8, r1
 8015ba4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015ba8:	2700      	movs	r7, #0
 8015baa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015bae:	f1b9 0901 	subs.w	r9, r9, #1
 8015bb2:	d505      	bpl.n	8015bc0 <_fwalk_reent+0x24>
 8015bb4:	6824      	ldr	r4, [r4, #0]
 8015bb6:	2c00      	cmp	r4, #0
 8015bb8:	d1f7      	bne.n	8015baa <_fwalk_reent+0xe>
 8015bba:	4638      	mov	r0, r7
 8015bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bc0:	89ab      	ldrh	r3, [r5, #12]
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	d907      	bls.n	8015bd6 <_fwalk_reent+0x3a>
 8015bc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015bca:	3301      	adds	r3, #1
 8015bcc:	d003      	beq.n	8015bd6 <_fwalk_reent+0x3a>
 8015bce:	4629      	mov	r1, r5
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	47c0      	blx	r8
 8015bd4:	4307      	orrs	r7, r0
 8015bd6:	3568      	adds	r5, #104	; 0x68
 8015bd8:	e7e9      	b.n	8015bae <_fwalk_reent+0x12>
	...

08015bdc <__libc_init_array>:
 8015bdc:	b570      	push	{r4, r5, r6, lr}
 8015bde:	4d0d      	ldr	r5, [pc, #52]	; (8015c14 <__libc_init_array+0x38>)
 8015be0:	4c0d      	ldr	r4, [pc, #52]	; (8015c18 <__libc_init_array+0x3c>)
 8015be2:	1b64      	subs	r4, r4, r5
 8015be4:	10a4      	asrs	r4, r4, #2
 8015be6:	2600      	movs	r6, #0
 8015be8:	42a6      	cmp	r6, r4
 8015bea:	d109      	bne.n	8015c00 <__libc_init_array+0x24>
 8015bec:	4d0b      	ldr	r5, [pc, #44]	; (8015c1c <__libc_init_array+0x40>)
 8015bee:	4c0c      	ldr	r4, [pc, #48]	; (8015c20 <__libc_init_array+0x44>)
 8015bf0:	f001 fa18 	bl	8017024 <_init>
 8015bf4:	1b64      	subs	r4, r4, r5
 8015bf6:	10a4      	asrs	r4, r4, #2
 8015bf8:	2600      	movs	r6, #0
 8015bfa:	42a6      	cmp	r6, r4
 8015bfc:	d105      	bne.n	8015c0a <__libc_init_array+0x2e>
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}
 8015c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c04:	4798      	blx	r3
 8015c06:	3601      	adds	r6, #1
 8015c08:	e7ee      	b.n	8015be8 <__libc_init_array+0xc>
 8015c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c0e:	4798      	blx	r3
 8015c10:	3601      	adds	r6, #1
 8015c12:	e7f2      	b.n	8015bfa <__libc_init_array+0x1e>
 8015c14:	0801a928 	.word	0x0801a928
 8015c18:	0801a928 	.word	0x0801a928
 8015c1c:	0801a928 	.word	0x0801a928
 8015c20:	0801a92c 	.word	0x0801a92c

08015c24 <__retarget_lock_init_recursive>:
 8015c24:	4770      	bx	lr

08015c26 <__retarget_lock_acquire_recursive>:
 8015c26:	4770      	bx	lr

08015c28 <__retarget_lock_release_recursive>:
 8015c28:	4770      	bx	lr

08015c2a <memcmp>:
 8015c2a:	b530      	push	{r4, r5, lr}
 8015c2c:	3901      	subs	r1, #1
 8015c2e:	2400      	movs	r4, #0
 8015c30:	42a2      	cmp	r2, r4
 8015c32:	d101      	bne.n	8015c38 <memcmp+0xe>
 8015c34:	2000      	movs	r0, #0
 8015c36:	e005      	b.n	8015c44 <memcmp+0x1a>
 8015c38:	5d03      	ldrb	r3, [r0, r4]
 8015c3a:	3401      	adds	r4, #1
 8015c3c:	5d0d      	ldrb	r5, [r1, r4]
 8015c3e:	42ab      	cmp	r3, r5
 8015c40:	d0f6      	beq.n	8015c30 <memcmp+0x6>
 8015c42:	1b58      	subs	r0, r3, r5
 8015c44:	bd30      	pop	{r4, r5, pc}

08015c46 <memcpy>:
 8015c46:	440a      	add	r2, r1
 8015c48:	4291      	cmp	r1, r2
 8015c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015c4e:	d100      	bne.n	8015c52 <memcpy+0xc>
 8015c50:	4770      	bx	lr
 8015c52:	b510      	push	{r4, lr}
 8015c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c5c:	4291      	cmp	r1, r2
 8015c5e:	d1f9      	bne.n	8015c54 <memcpy+0xe>
 8015c60:	bd10      	pop	{r4, pc}

08015c62 <memmove>:
 8015c62:	4288      	cmp	r0, r1
 8015c64:	b510      	push	{r4, lr}
 8015c66:	eb01 0402 	add.w	r4, r1, r2
 8015c6a:	d902      	bls.n	8015c72 <memmove+0x10>
 8015c6c:	4284      	cmp	r4, r0
 8015c6e:	4623      	mov	r3, r4
 8015c70:	d807      	bhi.n	8015c82 <memmove+0x20>
 8015c72:	1e43      	subs	r3, r0, #1
 8015c74:	42a1      	cmp	r1, r4
 8015c76:	d008      	beq.n	8015c8a <memmove+0x28>
 8015c78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015c7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015c80:	e7f8      	b.n	8015c74 <memmove+0x12>
 8015c82:	4402      	add	r2, r0
 8015c84:	4601      	mov	r1, r0
 8015c86:	428a      	cmp	r2, r1
 8015c88:	d100      	bne.n	8015c8c <memmove+0x2a>
 8015c8a:	bd10      	pop	{r4, pc}
 8015c8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015c90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015c94:	e7f7      	b.n	8015c86 <memmove+0x24>

08015c96 <memset>:
 8015c96:	4402      	add	r2, r0
 8015c98:	4603      	mov	r3, r0
 8015c9a:	4293      	cmp	r3, r2
 8015c9c:	d100      	bne.n	8015ca0 <memset+0xa>
 8015c9e:	4770      	bx	lr
 8015ca0:	f803 1b01 	strb.w	r1, [r3], #1
 8015ca4:	e7f9      	b.n	8015c9a <memset+0x4>
	...

08015ca8 <_malloc_r>:
 8015ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015caa:	1ccd      	adds	r5, r1, #3
 8015cac:	f025 0503 	bic.w	r5, r5, #3
 8015cb0:	3508      	adds	r5, #8
 8015cb2:	2d0c      	cmp	r5, #12
 8015cb4:	bf38      	it	cc
 8015cb6:	250c      	movcc	r5, #12
 8015cb8:	2d00      	cmp	r5, #0
 8015cba:	4606      	mov	r6, r0
 8015cbc:	db01      	blt.n	8015cc2 <_malloc_r+0x1a>
 8015cbe:	42a9      	cmp	r1, r5
 8015cc0:	d903      	bls.n	8015cca <_malloc_r+0x22>
 8015cc2:	230c      	movs	r3, #12
 8015cc4:	6033      	str	r3, [r6, #0]
 8015cc6:	2000      	movs	r0, #0
 8015cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cca:	f000 fc57 	bl	801657c <__malloc_lock>
 8015cce:	4921      	ldr	r1, [pc, #132]	; (8015d54 <_malloc_r+0xac>)
 8015cd0:	680a      	ldr	r2, [r1, #0]
 8015cd2:	4614      	mov	r4, r2
 8015cd4:	b99c      	cbnz	r4, 8015cfe <_malloc_r+0x56>
 8015cd6:	4f20      	ldr	r7, [pc, #128]	; (8015d58 <_malloc_r+0xb0>)
 8015cd8:	683b      	ldr	r3, [r7, #0]
 8015cda:	b923      	cbnz	r3, 8015ce6 <_malloc_r+0x3e>
 8015cdc:	4621      	mov	r1, r4
 8015cde:	4630      	mov	r0, r6
 8015ce0:	f000 f974 	bl	8015fcc <_sbrk_r>
 8015ce4:	6038      	str	r0, [r7, #0]
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	4630      	mov	r0, r6
 8015cea:	f000 f96f 	bl	8015fcc <_sbrk_r>
 8015cee:	1c43      	adds	r3, r0, #1
 8015cf0:	d123      	bne.n	8015d3a <_malloc_r+0x92>
 8015cf2:	230c      	movs	r3, #12
 8015cf4:	6033      	str	r3, [r6, #0]
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	f000 fc46 	bl	8016588 <__malloc_unlock>
 8015cfc:	e7e3      	b.n	8015cc6 <_malloc_r+0x1e>
 8015cfe:	6823      	ldr	r3, [r4, #0]
 8015d00:	1b5b      	subs	r3, r3, r5
 8015d02:	d417      	bmi.n	8015d34 <_malloc_r+0x8c>
 8015d04:	2b0b      	cmp	r3, #11
 8015d06:	d903      	bls.n	8015d10 <_malloc_r+0x68>
 8015d08:	6023      	str	r3, [r4, #0]
 8015d0a:	441c      	add	r4, r3
 8015d0c:	6025      	str	r5, [r4, #0]
 8015d0e:	e004      	b.n	8015d1a <_malloc_r+0x72>
 8015d10:	6863      	ldr	r3, [r4, #4]
 8015d12:	42a2      	cmp	r2, r4
 8015d14:	bf0c      	ite	eq
 8015d16:	600b      	streq	r3, [r1, #0]
 8015d18:	6053      	strne	r3, [r2, #4]
 8015d1a:	4630      	mov	r0, r6
 8015d1c:	f000 fc34 	bl	8016588 <__malloc_unlock>
 8015d20:	f104 000b 	add.w	r0, r4, #11
 8015d24:	1d23      	adds	r3, r4, #4
 8015d26:	f020 0007 	bic.w	r0, r0, #7
 8015d2a:	1ac2      	subs	r2, r0, r3
 8015d2c:	d0cc      	beq.n	8015cc8 <_malloc_r+0x20>
 8015d2e:	1a1b      	subs	r3, r3, r0
 8015d30:	50a3      	str	r3, [r4, r2]
 8015d32:	e7c9      	b.n	8015cc8 <_malloc_r+0x20>
 8015d34:	4622      	mov	r2, r4
 8015d36:	6864      	ldr	r4, [r4, #4]
 8015d38:	e7cc      	b.n	8015cd4 <_malloc_r+0x2c>
 8015d3a:	1cc4      	adds	r4, r0, #3
 8015d3c:	f024 0403 	bic.w	r4, r4, #3
 8015d40:	42a0      	cmp	r0, r4
 8015d42:	d0e3      	beq.n	8015d0c <_malloc_r+0x64>
 8015d44:	1a21      	subs	r1, r4, r0
 8015d46:	4630      	mov	r0, r6
 8015d48:	f000 f940 	bl	8015fcc <_sbrk_r>
 8015d4c:	3001      	adds	r0, #1
 8015d4e:	d1dd      	bne.n	8015d0c <_malloc_r+0x64>
 8015d50:	e7cf      	b.n	8015cf2 <_malloc_r+0x4a>
 8015d52:	bf00      	nop
 8015d54:	20004c18 	.word	0x20004c18
 8015d58:	20004c1c 	.word	0x20004c1c

08015d5c <iprintf>:
 8015d5c:	b40f      	push	{r0, r1, r2, r3}
 8015d5e:	4b0a      	ldr	r3, [pc, #40]	; (8015d88 <iprintf+0x2c>)
 8015d60:	b513      	push	{r0, r1, r4, lr}
 8015d62:	681c      	ldr	r4, [r3, #0]
 8015d64:	b124      	cbz	r4, 8015d70 <iprintf+0x14>
 8015d66:	69a3      	ldr	r3, [r4, #24]
 8015d68:	b913      	cbnz	r3, 8015d70 <iprintf+0x14>
 8015d6a:	4620      	mov	r0, r4
 8015d6c:	f7ff fe98 	bl	8015aa0 <__sinit>
 8015d70:	ab05      	add	r3, sp, #20
 8015d72:	9a04      	ldr	r2, [sp, #16]
 8015d74:	68a1      	ldr	r1, [r4, #8]
 8015d76:	9301      	str	r3, [sp, #4]
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f000 fde1 	bl	8016940 <_vfiprintf_r>
 8015d7e:	b002      	add	sp, #8
 8015d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d84:	b004      	add	sp, #16
 8015d86:	4770      	bx	lr
 8015d88:	2000001c 	.word	0x2000001c

08015d8c <_puts_r>:
 8015d8c:	b570      	push	{r4, r5, r6, lr}
 8015d8e:	460e      	mov	r6, r1
 8015d90:	4605      	mov	r5, r0
 8015d92:	b118      	cbz	r0, 8015d9c <_puts_r+0x10>
 8015d94:	6983      	ldr	r3, [r0, #24]
 8015d96:	b90b      	cbnz	r3, 8015d9c <_puts_r+0x10>
 8015d98:	f7ff fe82 	bl	8015aa0 <__sinit>
 8015d9c:	69ab      	ldr	r3, [r5, #24]
 8015d9e:	68ac      	ldr	r4, [r5, #8]
 8015da0:	b913      	cbnz	r3, 8015da8 <_puts_r+0x1c>
 8015da2:	4628      	mov	r0, r5
 8015da4:	f7ff fe7c 	bl	8015aa0 <__sinit>
 8015da8:	4b2c      	ldr	r3, [pc, #176]	; (8015e5c <_puts_r+0xd0>)
 8015daa:	429c      	cmp	r4, r3
 8015dac:	d120      	bne.n	8015df0 <_puts_r+0x64>
 8015dae:	686c      	ldr	r4, [r5, #4]
 8015db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015db2:	07db      	lsls	r3, r3, #31
 8015db4:	d405      	bmi.n	8015dc2 <_puts_r+0x36>
 8015db6:	89a3      	ldrh	r3, [r4, #12]
 8015db8:	0598      	lsls	r0, r3, #22
 8015dba:	d402      	bmi.n	8015dc2 <_puts_r+0x36>
 8015dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015dbe:	f7ff ff32 	bl	8015c26 <__retarget_lock_acquire_recursive>
 8015dc2:	89a3      	ldrh	r3, [r4, #12]
 8015dc4:	0719      	lsls	r1, r3, #28
 8015dc6:	d51d      	bpl.n	8015e04 <_puts_r+0x78>
 8015dc8:	6923      	ldr	r3, [r4, #16]
 8015dca:	b1db      	cbz	r3, 8015e04 <_puts_r+0x78>
 8015dcc:	3e01      	subs	r6, #1
 8015dce:	68a3      	ldr	r3, [r4, #8]
 8015dd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015dd4:	3b01      	subs	r3, #1
 8015dd6:	60a3      	str	r3, [r4, #8]
 8015dd8:	bb39      	cbnz	r1, 8015e2a <_puts_r+0x9e>
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	da38      	bge.n	8015e50 <_puts_r+0xc4>
 8015dde:	4622      	mov	r2, r4
 8015de0:	210a      	movs	r1, #10
 8015de2:	4628      	mov	r0, r5
 8015de4:	f000 f978 	bl	80160d8 <__swbuf_r>
 8015de8:	3001      	adds	r0, #1
 8015dea:	d011      	beq.n	8015e10 <_puts_r+0x84>
 8015dec:	250a      	movs	r5, #10
 8015dee:	e011      	b.n	8015e14 <_puts_r+0x88>
 8015df0:	4b1b      	ldr	r3, [pc, #108]	; (8015e60 <_puts_r+0xd4>)
 8015df2:	429c      	cmp	r4, r3
 8015df4:	d101      	bne.n	8015dfa <_puts_r+0x6e>
 8015df6:	68ac      	ldr	r4, [r5, #8]
 8015df8:	e7da      	b.n	8015db0 <_puts_r+0x24>
 8015dfa:	4b1a      	ldr	r3, [pc, #104]	; (8015e64 <_puts_r+0xd8>)
 8015dfc:	429c      	cmp	r4, r3
 8015dfe:	bf08      	it	eq
 8015e00:	68ec      	ldreq	r4, [r5, #12]
 8015e02:	e7d5      	b.n	8015db0 <_puts_r+0x24>
 8015e04:	4621      	mov	r1, r4
 8015e06:	4628      	mov	r0, r5
 8015e08:	f000 f9ca 	bl	80161a0 <__swsetup_r>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	d0dd      	beq.n	8015dcc <_puts_r+0x40>
 8015e10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015e14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015e16:	07da      	lsls	r2, r3, #31
 8015e18:	d405      	bmi.n	8015e26 <_puts_r+0x9a>
 8015e1a:	89a3      	ldrh	r3, [r4, #12]
 8015e1c:	059b      	lsls	r3, r3, #22
 8015e1e:	d402      	bmi.n	8015e26 <_puts_r+0x9a>
 8015e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015e22:	f7ff ff01 	bl	8015c28 <__retarget_lock_release_recursive>
 8015e26:	4628      	mov	r0, r5
 8015e28:	bd70      	pop	{r4, r5, r6, pc}
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	da04      	bge.n	8015e38 <_puts_r+0xac>
 8015e2e:	69a2      	ldr	r2, [r4, #24]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	dc06      	bgt.n	8015e42 <_puts_r+0xb6>
 8015e34:	290a      	cmp	r1, #10
 8015e36:	d004      	beq.n	8015e42 <_puts_r+0xb6>
 8015e38:	6823      	ldr	r3, [r4, #0]
 8015e3a:	1c5a      	adds	r2, r3, #1
 8015e3c:	6022      	str	r2, [r4, #0]
 8015e3e:	7019      	strb	r1, [r3, #0]
 8015e40:	e7c5      	b.n	8015dce <_puts_r+0x42>
 8015e42:	4622      	mov	r2, r4
 8015e44:	4628      	mov	r0, r5
 8015e46:	f000 f947 	bl	80160d8 <__swbuf_r>
 8015e4a:	3001      	adds	r0, #1
 8015e4c:	d1bf      	bne.n	8015dce <_puts_r+0x42>
 8015e4e:	e7df      	b.n	8015e10 <_puts_r+0x84>
 8015e50:	6823      	ldr	r3, [r4, #0]
 8015e52:	250a      	movs	r5, #10
 8015e54:	1c5a      	adds	r2, r3, #1
 8015e56:	6022      	str	r2, [r4, #0]
 8015e58:	701d      	strb	r5, [r3, #0]
 8015e5a:	e7db      	b.n	8015e14 <_puts_r+0x88>
 8015e5c:	0801a7f4 	.word	0x0801a7f4
 8015e60:	0801a814 	.word	0x0801a814
 8015e64:	0801a7d4 	.word	0x0801a7d4

08015e68 <puts>:
 8015e68:	4b02      	ldr	r3, [pc, #8]	; (8015e74 <puts+0xc>)
 8015e6a:	4601      	mov	r1, r0
 8015e6c:	6818      	ldr	r0, [r3, #0]
 8015e6e:	f7ff bf8d 	b.w	8015d8c <_puts_r>
 8015e72:	bf00      	nop
 8015e74:	2000001c 	.word	0x2000001c

08015e78 <rand>:
 8015e78:	4b17      	ldr	r3, [pc, #92]	; (8015ed8 <rand+0x60>)
 8015e7a:	b510      	push	{r4, lr}
 8015e7c:	681c      	ldr	r4, [r3, #0]
 8015e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015e80:	b9b3      	cbnz	r3, 8015eb0 <rand+0x38>
 8015e82:	2018      	movs	r0, #24
 8015e84:	f000 fb72 	bl	801656c <malloc>
 8015e88:	63a0      	str	r0, [r4, #56]	; 0x38
 8015e8a:	b928      	cbnz	r0, 8015e98 <rand+0x20>
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	4b13      	ldr	r3, [pc, #76]	; (8015edc <rand+0x64>)
 8015e90:	4813      	ldr	r0, [pc, #76]	; (8015ee0 <rand+0x68>)
 8015e92:	214e      	movs	r1, #78	; 0x4e
 8015e94:	f000 f9f2 	bl	801627c <__assert_func>
 8015e98:	4a12      	ldr	r2, [pc, #72]	; (8015ee4 <rand+0x6c>)
 8015e9a:	4b13      	ldr	r3, [pc, #76]	; (8015ee8 <rand+0x70>)
 8015e9c:	e9c0 2300 	strd	r2, r3, [r0]
 8015ea0:	4b12      	ldr	r3, [pc, #72]	; (8015eec <rand+0x74>)
 8015ea2:	6083      	str	r3, [r0, #8]
 8015ea4:	230b      	movs	r3, #11
 8015ea6:	8183      	strh	r3, [r0, #12]
 8015ea8:	2201      	movs	r2, #1
 8015eaa:	2300      	movs	r3, #0
 8015eac:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015eb0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015eb2:	480f      	ldr	r0, [pc, #60]	; (8015ef0 <rand+0x78>)
 8015eb4:	690a      	ldr	r2, [r1, #16]
 8015eb6:	694b      	ldr	r3, [r1, #20]
 8015eb8:	4c0e      	ldr	r4, [pc, #56]	; (8015ef4 <rand+0x7c>)
 8015eba:	4350      	muls	r0, r2
 8015ebc:	fb04 0003 	mla	r0, r4, r3, r0
 8015ec0:	fba2 3404 	umull	r3, r4, r2, r4
 8015ec4:	1c5a      	adds	r2, r3, #1
 8015ec6:	4404      	add	r4, r0
 8015ec8:	f144 0000 	adc.w	r0, r4, #0
 8015ecc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015ed0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015ed4:	bd10      	pop	{r4, pc}
 8015ed6:	bf00      	nop
 8015ed8:	2000001c 	.word	0x2000001c
 8015edc:	0801a838 	.word	0x0801a838
 8015ee0:	0801a84f 	.word	0x0801a84f
 8015ee4:	abcd330e 	.word	0xabcd330e
 8015ee8:	e66d1234 	.word	0xe66d1234
 8015eec:	0005deec 	.word	0x0005deec
 8015ef0:	5851f42d 	.word	0x5851f42d
 8015ef4:	4c957f2d 	.word	0x4c957f2d

08015ef8 <cleanup_glue>:
 8015ef8:	b538      	push	{r3, r4, r5, lr}
 8015efa:	460c      	mov	r4, r1
 8015efc:	6809      	ldr	r1, [r1, #0]
 8015efe:	4605      	mov	r5, r0
 8015f00:	b109      	cbz	r1, 8015f06 <cleanup_glue+0xe>
 8015f02:	f7ff fff9 	bl	8015ef8 <cleanup_glue>
 8015f06:	4621      	mov	r1, r4
 8015f08:	4628      	mov	r0, r5
 8015f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f0e:	f000 bb41 	b.w	8016594 <_free_r>
	...

08015f14 <_reclaim_reent>:
 8015f14:	4b2c      	ldr	r3, [pc, #176]	; (8015fc8 <_reclaim_reent+0xb4>)
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	4283      	cmp	r3, r0
 8015f1a:	b570      	push	{r4, r5, r6, lr}
 8015f1c:	4604      	mov	r4, r0
 8015f1e:	d051      	beq.n	8015fc4 <_reclaim_reent+0xb0>
 8015f20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015f22:	b143      	cbz	r3, 8015f36 <_reclaim_reent+0x22>
 8015f24:	68db      	ldr	r3, [r3, #12]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d14a      	bne.n	8015fc0 <_reclaim_reent+0xac>
 8015f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015f2c:	6819      	ldr	r1, [r3, #0]
 8015f2e:	b111      	cbz	r1, 8015f36 <_reclaim_reent+0x22>
 8015f30:	4620      	mov	r0, r4
 8015f32:	f000 fb2f 	bl	8016594 <_free_r>
 8015f36:	6961      	ldr	r1, [r4, #20]
 8015f38:	b111      	cbz	r1, 8015f40 <_reclaim_reent+0x2c>
 8015f3a:	4620      	mov	r0, r4
 8015f3c:	f000 fb2a 	bl	8016594 <_free_r>
 8015f40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015f42:	b111      	cbz	r1, 8015f4a <_reclaim_reent+0x36>
 8015f44:	4620      	mov	r0, r4
 8015f46:	f000 fb25 	bl	8016594 <_free_r>
 8015f4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015f4c:	b111      	cbz	r1, 8015f54 <_reclaim_reent+0x40>
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f000 fb20 	bl	8016594 <_free_r>
 8015f54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015f56:	b111      	cbz	r1, 8015f5e <_reclaim_reent+0x4a>
 8015f58:	4620      	mov	r0, r4
 8015f5a:	f000 fb1b 	bl	8016594 <_free_r>
 8015f5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015f60:	b111      	cbz	r1, 8015f68 <_reclaim_reent+0x54>
 8015f62:	4620      	mov	r0, r4
 8015f64:	f000 fb16 	bl	8016594 <_free_r>
 8015f68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8015f6a:	b111      	cbz	r1, 8015f72 <_reclaim_reent+0x5e>
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	f000 fb11 	bl	8016594 <_free_r>
 8015f72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015f74:	b111      	cbz	r1, 8015f7c <_reclaim_reent+0x68>
 8015f76:	4620      	mov	r0, r4
 8015f78:	f000 fb0c 	bl	8016594 <_free_r>
 8015f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f7e:	b111      	cbz	r1, 8015f86 <_reclaim_reent+0x72>
 8015f80:	4620      	mov	r0, r4
 8015f82:	f000 fb07 	bl	8016594 <_free_r>
 8015f86:	69a3      	ldr	r3, [r4, #24]
 8015f88:	b1e3      	cbz	r3, 8015fc4 <_reclaim_reent+0xb0>
 8015f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	4798      	blx	r3
 8015f90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015f92:	b1b9      	cbz	r1, 8015fc4 <_reclaim_reent+0xb0>
 8015f94:	4620      	mov	r0, r4
 8015f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f9a:	f7ff bfad 	b.w	8015ef8 <cleanup_glue>
 8015f9e:	5949      	ldr	r1, [r1, r5]
 8015fa0:	b941      	cbnz	r1, 8015fb4 <_reclaim_reent+0xa0>
 8015fa2:	3504      	adds	r5, #4
 8015fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015fa6:	2d80      	cmp	r5, #128	; 0x80
 8015fa8:	68d9      	ldr	r1, [r3, #12]
 8015faa:	d1f8      	bne.n	8015f9e <_reclaim_reent+0x8a>
 8015fac:	4620      	mov	r0, r4
 8015fae:	f000 faf1 	bl	8016594 <_free_r>
 8015fb2:	e7ba      	b.n	8015f2a <_reclaim_reent+0x16>
 8015fb4:	680e      	ldr	r6, [r1, #0]
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	f000 faec 	bl	8016594 <_free_r>
 8015fbc:	4631      	mov	r1, r6
 8015fbe:	e7ef      	b.n	8015fa0 <_reclaim_reent+0x8c>
 8015fc0:	2500      	movs	r5, #0
 8015fc2:	e7ef      	b.n	8015fa4 <_reclaim_reent+0x90>
 8015fc4:	bd70      	pop	{r4, r5, r6, pc}
 8015fc6:	bf00      	nop
 8015fc8:	2000001c 	.word	0x2000001c

08015fcc <_sbrk_r>:
 8015fcc:	b538      	push	{r3, r4, r5, lr}
 8015fce:	4d06      	ldr	r5, [pc, #24]	; (8015fe8 <_sbrk_r+0x1c>)
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	4608      	mov	r0, r1
 8015fd6:	602b      	str	r3, [r5, #0]
 8015fd8:	f7ea fdfe 	bl	8000bd8 <_sbrk>
 8015fdc:	1c43      	adds	r3, r0, #1
 8015fde:	d102      	bne.n	8015fe6 <_sbrk_r+0x1a>
 8015fe0:	682b      	ldr	r3, [r5, #0]
 8015fe2:	b103      	cbz	r3, 8015fe6 <_sbrk_r+0x1a>
 8015fe4:	6023      	str	r3, [r4, #0]
 8015fe6:	bd38      	pop	{r3, r4, r5, pc}
 8015fe8:	2000d878 	.word	0x2000d878

08015fec <siprintf>:
 8015fec:	b40e      	push	{r1, r2, r3}
 8015fee:	b500      	push	{lr}
 8015ff0:	b09c      	sub	sp, #112	; 0x70
 8015ff2:	ab1d      	add	r3, sp, #116	; 0x74
 8015ff4:	9002      	str	r0, [sp, #8]
 8015ff6:	9006      	str	r0, [sp, #24]
 8015ff8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ffc:	4809      	ldr	r0, [pc, #36]	; (8016024 <siprintf+0x38>)
 8015ffe:	9107      	str	r1, [sp, #28]
 8016000:	9104      	str	r1, [sp, #16]
 8016002:	4909      	ldr	r1, [pc, #36]	; (8016028 <siprintf+0x3c>)
 8016004:	f853 2b04 	ldr.w	r2, [r3], #4
 8016008:	9105      	str	r1, [sp, #20]
 801600a:	6800      	ldr	r0, [r0, #0]
 801600c:	9301      	str	r3, [sp, #4]
 801600e:	a902      	add	r1, sp, #8
 8016010:	f000 fb6c 	bl	80166ec <_svfiprintf_r>
 8016014:	9b02      	ldr	r3, [sp, #8]
 8016016:	2200      	movs	r2, #0
 8016018:	701a      	strb	r2, [r3, #0]
 801601a:	b01c      	add	sp, #112	; 0x70
 801601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016020:	b003      	add	sp, #12
 8016022:	4770      	bx	lr
 8016024:	2000001c 	.word	0x2000001c
 8016028:	ffff0208 	.word	0xffff0208

0801602c <__sread>:
 801602c:	b510      	push	{r4, lr}
 801602e:	460c      	mov	r4, r1
 8016030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016034:	f000 ff48 	bl	8016ec8 <_read_r>
 8016038:	2800      	cmp	r0, #0
 801603a:	bfab      	itete	ge
 801603c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801603e:	89a3      	ldrhlt	r3, [r4, #12]
 8016040:	181b      	addge	r3, r3, r0
 8016042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016046:	bfac      	ite	ge
 8016048:	6563      	strge	r3, [r4, #84]	; 0x54
 801604a:	81a3      	strhlt	r3, [r4, #12]
 801604c:	bd10      	pop	{r4, pc}

0801604e <__swrite>:
 801604e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016052:	461f      	mov	r7, r3
 8016054:	898b      	ldrh	r3, [r1, #12]
 8016056:	05db      	lsls	r3, r3, #23
 8016058:	4605      	mov	r5, r0
 801605a:	460c      	mov	r4, r1
 801605c:	4616      	mov	r6, r2
 801605e:	d505      	bpl.n	801606c <__swrite+0x1e>
 8016060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016064:	2302      	movs	r3, #2
 8016066:	2200      	movs	r2, #0
 8016068:	f000 fa0a 	bl	8016480 <_lseek_r>
 801606c:	89a3      	ldrh	r3, [r4, #12]
 801606e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016076:	81a3      	strh	r3, [r4, #12]
 8016078:	4632      	mov	r2, r6
 801607a:	463b      	mov	r3, r7
 801607c:	4628      	mov	r0, r5
 801607e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016082:	f000 b87b 	b.w	801617c <_write_r>

08016086 <__sseek>:
 8016086:	b510      	push	{r4, lr}
 8016088:	460c      	mov	r4, r1
 801608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801608e:	f000 f9f7 	bl	8016480 <_lseek_r>
 8016092:	1c43      	adds	r3, r0, #1
 8016094:	89a3      	ldrh	r3, [r4, #12]
 8016096:	bf15      	itete	ne
 8016098:	6560      	strne	r0, [r4, #84]	; 0x54
 801609a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801609e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80160a2:	81a3      	strheq	r3, [r4, #12]
 80160a4:	bf18      	it	ne
 80160a6:	81a3      	strhne	r3, [r4, #12]
 80160a8:	bd10      	pop	{r4, pc}

080160aa <__sclose>:
 80160aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160ae:	f000 b903 	b.w	80162b8 <_close_r>

080160b2 <strncpy>:
 80160b2:	b510      	push	{r4, lr}
 80160b4:	3901      	subs	r1, #1
 80160b6:	4603      	mov	r3, r0
 80160b8:	b132      	cbz	r2, 80160c8 <strncpy+0x16>
 80160ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80160be:	f803 4b01 	strb.w	r4, [r3], #1
 80160c2:	3a01      	subs	r2, #1
 80160c4:	2c00      	cmp	r4, #0
 80160c6:	d1f7      	bne.n	80160b8 <strncpy+0x6>
 80160c8:	441a      	add	r2, r3
 80160ca:	2100      	movs	r1, #0
 80160cc:	4293      	cmp	r3, r2
 80160ce:	d100      	bne.n	80160d2 <strncpy+0x20>
 80160d0:	bd10      	pop	{r4, pc}
 80160d2:	f803 1b01 	strb.w	r1, [r3], #1
 80160d6:	e7f9      	b.n	80160cc <strncpy+0x1a>

080160d8 <__swbuf_r>:
 80160d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160da:	460e      	mov	r6, r1
 80160dc:	4614      	mov	r4, r2
 80160de:	4605      	mov	r5, r0
 80160e0:	b118      	cbz	r0, 80160ea <__swbuf_r+0x12>
 80160e2:	6983      	ldr	r3, [r0, #24]
 80160e4:	b90b      	cbnz	r3, 80160ea <__swbuf_r+0x12>
 80160e6:	f7ff fcdb 	bl	8015aa0 <__sinit>
 80160ea:	4b21      	ldr	r3, [pc, #132]	; (8016170 <__swbuf_r+0x98>)
 80160ec:	429c      	cmp	r4, r3
 80160ee:	d12b      	bne.n	8016148 <__swbuf_r+0x70>
 80160f0:	686c      	ldr	r4, [r5, #4]
 80160f2:	69a3      	ldr	r3, [r4, #24]
 80160f4:	60a3      	str	r3, [r4, #8]
 80160f6:	89a3      	ldrh	r3, [r4, #12]
 80160f8:	071a      	lsls	r2, r3, #28
 80160fa:	d52f      	bpl.n	801615c <__swbuf_r+0x84>
 80160fc:	6923      	ldr	r3, [r4, #16]
 80160fe:	b36b      	cbz	r3, 801615c <__swbuf_r+0x84>
 8016100:	6923      	ldr	r3, [r4, #16]
 8016102:	6820      	ldr	r0, [r4, #0]
 8016104:	1ac0      	subs	r0, r0, r3
 8016106:	6963      	ldr	r3, [r4, #20]
 8016108:	b2f6      	uxtb	r6, r6
 801610a:	4283      	cmp	r3, r0
 801610c:	4637      	mov	r7, r6
 801610e:	dc04      	bgt.n	801611a <__swbuf_r+0x42>
 8016110:	4621      	mov	r1, r4
 8016112:	4628      	mov	r0, r5
 8016114:	f000 f966 	bl	80163e4 <_fflush_r>
 8016118:	bb30      	cbnz	r0, 8016168 <__swbuf_r+0x90>
 801611a:	68a3      	ldr	r3, [r4, #8]
 801611c:	3b01      	subs	r3, #1
 801611e:	60a3      	str	r3, [r4, #8]
 8016120:	6823      	ldr	r3, [r4, #0]
 8016122:	1c5a      	adds	r2, r3, #1
 8016124:	6022      	str	r2, [r4, #0]
 8016126:	701e      	strb	r6, [r3, #0]
 8016128:	6963      	ldr	r3, [r4, #20]
 801612a:	3001      	adds	r0, #1
 801612c:	4283      	cmp	r3, r0
 801612e:	d004      	beq.n	801613a <__swbuf_r+0x62>
 8016130:	89a3      	ldrh	r3, [r4, #12]
 8016132:	07db      	lsls	r3, r3, #31
 8016134:	d506      	bpl.n	8016144 <__swbuf_r+0x6c>
 8016136:	2e0a      	cmp	r6, #10
 8016138:	d104      	bne.n	8016144 <__swbuf_r+0x6c>
 801613a:	4621      	mov	r1, r4
 801613c:	4628      	mov	r0, r5
 801613e:	f000 f951 	bl	80163e4 <_fflush_r>
 8016142:	b988      	cbnz	r0, 8016168 <__swbuf_r+0x90>
 8016144:	4638      	mov	r0, r7
 8016146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016148:	4b0a      	ldr	r3, [pc, #40]	; (8016174 <__swbuf_r+0x9c>)
 801614a:	429c      	cmp	r4, r3
 801614c:	d101      	bne.n	8016152 <__swbuf_r+0x7a>
 801614e:	68ac      	ldr	r4, [r5, #8]
 8016150:	e7cf      	b.n	80160f2 <__swbuf_r+0x1a>
 8016152:	4b09      	ldr	r3, [pc, #36]	; (8016178 <__swbuf_r+0xa0>)
 8016154:	429c      	cmp	r4, r3
 8016156:	bf08      	it	eq
 8016158:	68ec      	ldreq	r4, [r5, #12]
 801615a:	e7ca      	b.n	80160f2 <__swbuf_r+0x1a>
 801615c:	4621      	mov	r1, r4
 801615e:	4628      	mov	r0, r5
 8016160:	f000 f81e 	bl	80161a0 <__swsetup_r>
 8016164:	2800      	cmp	r0, #0
 8016166:	d0cb      	beq.n	8016100 <__swbuf_r+0x28>
 8016168:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801616c:	e7ea      	b.n	8016144 <__swbuf_r+0x6c>
 801616e:	bf00      	nop
 8016170:	0801a7f4 	.word	0x0801a7f4
 8016174:	0801a814 	.word	0x0801a814
 8016178:	0801a7d4 	.word	0x0801a7d4

0801617c <_write_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4d07      	ldr	r5, [pc, #28]	; (801619c <_write_r+0x20>)
 8016180:	4604      	mov	r4, r0
 8016182:	4608      	mov	r0, r1
 8016184:	4611      	mov	r1, r2
 8016186:	2200      	movs	r2, #0
 8016188:	602a      	str	r2, [r5, #0]
 801618a:	461a      	mov	r2, r3
 801618c:	f7ea fa2c 	bl	80005e8 <_write>
 8016190:	1c43      	adds	r3, r0, #1
 8016192:	d102      	bne.n	801619a <_write_r+0x1e>
 8016194:	682b      	ldr	r3, [r5, #0]
 8016196:	b103      	cbz	r3, 801619a <_write_r+0x1e>
 8016198:	6023      	str	r3, [r4, #0]
 801619a:	bd38      	pop	{r3, r4, r5, pc}
 801619c:	2000d878 	.word	0x2000d878

080161a0 <__swsetup_r>:
 80161a0:	4b32      	ldr	r3, [pc, #200]	; (801626c <__swsetup_r+0xcc>)
 80161a2:	b570      	push	{r4, r5, r6, lr}
 80161a4:	681d      	ldr	r5, [r3, #0]
 80161a6:	4606      	mov	r6, r0
 80161a8:	460c      	mov	r4, r1
 80161aa:	b125      	cbz	r5, 80161b6 <__swsetup_r+0x16>
 80161ac:	69ab      	ldr	r3, [r5, #24]
 80161ae:	b913      	cbnz	r3, 80161b6 <__swsetup_r+0x16>
 80161b0:	4628      	mov	r0, r5
 80161b2:	f7ff fc75 	bl	8015aa0 <__sinit>
 80161b6:	4b2e      	ldr	r3, [pc, #184]	; (8016270 <__swsetup_r+0xd0>)
 80161b8:	429c      	cmp	r4, r3
 80161ba:	d10f      	bne.n	80161dc <__swsetup_r+0x3c>
 80161bc:	686c      	ldr	r4, [r5, #4]
 80161be:	89a3      	ldrh	r3, [r4, #12]
 80161c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161c4:	0719      	lsls	r1, r3, #28
 80161c6:	d42c      	bmi.n	8016222 <__swsetup_r+0x82>
 80161c8:	06dd      	lsls	r5, r3, #27
 80161ca:	d411      	bmi.n	80161f0 <__swsetup_r+0x50>
 80161cc:	2309      	movs	r3, #9
 80161ce:	6033      	str	r3, [r6, #0]
 80161d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161d4:	81a3      	strh	r3, [r4, #12]
 80161d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80161da:	e03e      	b.n	801625a <__swsetup_r+0xba>
 80161dc:	4b25      	ldr	r3, [pc, #148]	; (8016274 <__swsetup_r+0xd4>)
 80161de:	429c      	cmp	r4, r3
 80161e0:	d101      	bne.n	80161e6 <__swsetup_r+0x46>
 80161e2:	68ac      	ldr	r4, [r5, #8]
 80161e4:	e7eb      	b.n	80161be <__swsetup_r+0x1e>
 80161e6:	4b24      	ldr	r3, [pc, #144]	; (8016278 <__swsetup_r+0xd8>)
 80161e8:	429c      	cmp	r4, r3
 80161ea:	bf08      	it	eq
 80161ec:	68ec      	ldreq	r4, [r5, #12]
 80161ee:	e7e6      	b.n	80161be <__swsetup_r+0x1e>
 80161f0:	0758      	lsls	r0, r3, #29
 80161f2:	d512      	bpl.n	801621a <__swsetup_r+0x7a>
 80161f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161f6:	b141      	cbz	r1, 801620a <__swsetup_r+0x6a>
 80161f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161fc:	4299      	cmp	r1, r3
 80161fe:	d002      	beq.n	8016206 <__swsetup_r+0x66>
 8016200:	4630      	mov	r0, r6
 8016202:	f000 f9c7 	bl	8016594 <_free_r>
 8016206:	2300      	movs	r3, #0
 8016208:	6363      	str	r3, [r4, #52]	; 0x34
 801620a:	89a3      	ldrh	r3, [r4, #12]
 801620c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016210:	81a3      	strh	r3, [r4, #12]
 8016212:	2300      	movs	r3, #0
 8016214:	6063      	str	r3, [r4, #4]
 8016216:	6923      	ldr	r3, [r4, #16]
 8016218:	6023      	str	r3, [r4, #0]
 801621a:	89a3      	ldrh	r3, [r4, #12]
 801621c:	f043 0308 	orr.w	r3, r3, #8
 8016220:	81a3      	strh	r3, [r4, #12]
 8016222:	6923      	ldr	r3, [r4, #16]
 8016224:	b94b      	cbnz	r3, 801623a <__swsetup_r+0x9a>
 8016226:	89a3      	ldrh	r3, [r4, #12]
 8016228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801622c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016230:	d003      	beq.n	801623a <__swsetup_r+0x9a>
 8016232:	4621      	mov	r1, r4
 8016234:	4630      	mov	r0, r6
 8016236:	f000 f959 	bl	80164ec <__smakebuf_r>
 801623a:	89a0      	ldrh	r0, [r4, #12]
 801623c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016240:	f010 0301 	ands.w	r3, r0, #1
 8016244:	d00a      	beq.n	801625c <__swsetup_r+0xbc>
 8016246:	2300      	movs	r3, #0
 8016248:	60a3      	str	r3, [r4, #8]
 801624a:	6963      	ldr	r3, [r4, #20]
 801624c:	425b      	negs	r3, r3
 801624e:	61a3      	str	r3, [r4, #24]
 8016250:	6923      	ldr	r3, [r4, #16]
 8016252:	b943      	cbnz	r3, 8016266 <__swsetup_r+0xc6>
 8016254:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016258:	d1ba      	bne.n	80161d0 <__swsetup_r+0x30>
 801625a:	bd70      	pop	{r4, r5, r6, pc}
 801625c:	0781      	lsls	r1, r0, #30
 801625e:	bf58      	it	pl
 8016260:	6963      	ldrpl	r3, [r4, #20]
 8016262:	60a3      	str	r3, [r4, #8]
 8016264:	e7f4      	b.n	8016250 <__swsetup_r+0xb0>
 8016266:	2000      	movs	r0, #0
 8016268:	e7f7      	b.n	801625a <__swsetup_r+0xba>
 801626a:	bf00      	nop
 801626c:	2000001c 	.word	0x2000001c
 8016270:	0801a7f4 	.word	0x0801a7f4
 8016274:	0801a814 	.word	0x0801a814
 8016278:	0801a7d4 	.word	0x0801a7d4

0801627c <__assert_func>:
 801627c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801627e:	4614      	mov	r4, r2
 8016280:	461a      	mov	r2, r3
 8016282:	4b09      	ldr	r3, [pc, #36]	; (80162a8 <__assert_func+0x2c>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	4605      	mov	r5, r0
 8016288:	68d8      	ldr	r0, [r3, #12]
 801628a:	b14c      	cbz	r4, 80162a0 <__assert_func+0x24>
 801628c:	4b07      	ldr	r3, [pc, #28]	; (80162ac <__assert_func+0x30>)
 801628e:	9100      	str	r1, [sp, #0]
 8016290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016294:	4906      	ldr	r1, [pc, #24]	; (80162b0 <__assert_func+0x34>)
 8016296:	462b      	mov	r3, r5
 8016298:	f000 f8e0 	bl	801645c <fiprintf>
 801629c:	f000 fe26 	bl	8016eec <abort>
 80162a0:	4b04      	ldr	r3, [pc, #16]	; (80162b4 <__assert_func+0x38>)
 80162a2:	461c      	mov	r4, r3
 80162a4:	e7f3      	b.n	801628e <__assert_func+0x12>
 80162a6:	bf00      	nop
 80162a8:	2000001c 	.word	0x2000001c
 80162ac:	0801a8ae 	.word	0x0801a8ae
 80162b0:	0801a8bb 	.word	0x0801a8bb
 80162b4:	0801a8e9 	.word	0x0801a8e9

080162b8 <_close_r>:
 80162b8:	b538      	push	{r3, r4, r5, lr}
 80162ba:	4d06      	ldr	r5, [pc, #24]	; (80162d4 <_close_r+0x1c>)
 80162bc:	2300      	movs	r3, #0
 80162be:	4604      	mov	r4, r0
 80162c0:	4608      	mov	r0, r1
 80162c2:	602b      	str	r3, [r5, #0]
 80162c4:	f7ea fc53 	bl	8000b6e <_close>
 80162c8:	1c43      	adds	r3, r0, #1
 80162ca:	d102      	bne.n	80162d2 <_close_r+0x1a>
 80162cc:	682b      	ldr	r3, [r5, #0]
 80162ce:	b103      	cbz	r3, 80162d2 <_close_r+0x1a>
 80162d0:	6023      	str	r3, [r4, #0]
 80162d2:	bd38      	pop	{r3, r4, r5, pc}
 80162d4:	2000d878 	.word	0x2000d878

080162d8 <__sflush_r>:
 80162d8:	898a      	ldrh	r2, [r1, #12]
 80162da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162de:	4605      	mov	r5, r0
 80162e0:	0710      	lsls	r0, r2, #28
 80162e2:	460c      	mov	r4, r1
 80162e4:	d458      	bmi.n	8016398 <__sflush_r+0xc0>
 80162e6:	684b      	ldr	r3, [r1, #4]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	dc05      	bgt.n	80162f8 <__sflush_r+0x20>
 80162ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	dc02      	bgt.n	80162f8 <__sflush_r+0x20>
 80162f2:	2000      	movs	r0, #0
 80162f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162fa:	2e00      	cmp	r6, #0
 80162fc:	d0f9      	beq.n	80162f2 <__sflush_r+0x1a>
 80162fe:	2300      	movs	r3, #0
 8016300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016304:	682f      	ldr	r7, [r5, #0]
 8016306:	602b      	str	r3, [r5, #0]
 8016308:	d032      	beq.n	8016370 <__sflush_r+0x98>
 801630a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801630c:	89a3      	ldrh	r3, [r4, #12]
 801630e:	075a      	lsls	r2, r3, #29
 8016310:	d505      	bpl.n	801631e <__sflush_r+0x46>
 8016312:	6863      	ldr	r3, [r4, #4]
 8016314:	1ac0      	subs	r0, r0, r3
 8016316:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016318:	b10b      	cbz	r3, 801631e <__sflush_r+0x46>
 801631a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801631c:	1ac0      	subs	r0, r0, r3
 801631e:	2300      	movs	r3, #0
 8016320:	4602      	mov	r2, r0
 8016322:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016324:	6a21      	ldr	r1, [r4, #32]
 8016326:	4628      	mov	r0, r5
 8016328:	47b0      	blx	r6
 801632a:	1c43      	adds	r3, r0, #1
 801632c:	89a3      	ldrh	r3, [r4, #12]
 801632e:	d106      	bne.n	801633e <__sflush_r+0x66>
 8016330:	6829      	ldr	r1, [r5, #0]
 8016332:	291d      	cmp	r1, #29
 8016334:	d82c      	bhi.n	8016390 <__sflush_r+0xb8>
 8016336:	4a2a      	ldr	r2, [pc, #168]	; (80163e0 <__sflush_r+0x108>)
 8016338:	40ca      	lsrs	r2, r1
 801633a:	07d6      	lsls	r6, r2, #31
 801633c:	d528      	bpl.n	8016390 <__sflush_r+0xb8>
 801633e:	2200      	movs	r2, #0
 8016340:	6062      	str	r2, [r4, #4]
 8016342:	04d9      	lsls	r1, r3, #19
 8016344:	6922      	ldr	r2, [r4, #16]
 8016346:	6022      	str	r2, [r4, #0]
 8016348:	d504      	bpl.n	8016354 <__sflush_r+0x7c>
 801634a:	1c42      	adds	r2, r0, #1
 801634c:	d101      	bne.n	8016352 <__sflush_r+0x7a>
 801634e:	682b      	ldr	r3, [r5, #0]
 8016350:	b903      	cbnz	r3, 8016354 <__sflush_r+0x7c>
 8016352:	6560      	str	r0, [r4, #84]	; 0x54
 8016354:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016356:	602f      	str	r7, [r5, #0]
 8016358:	2900      	cmp	r1, #0
 801635a:	d0ca      	beq.n	80162f2 <__sflush_r+0x1a>
 801635c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016360:	4299      	cmp	r1, r3
 8016362:	d002      	beq.n	801636a <__sflush_r+0x92>
 8016364:	4628      	mov	r0, r5
 8016366:	f000 f915 	bl	8016594 <_free_r>
 801636a:	2000      	movs	r0, #0
 801636c:	6360      	str	r0, [r4, #52]	; 0x34
 801636e:	e7c1      	b.n	80162f4 <__sflush_r+0x1c>
 8016370:	6a21      	ldr	r1, [r4, #32]
 8016372:	2301      	movs	r3, #1
 8016374:	4628      	mov	r0, r5
 8016376:	47b0      	blx	r6
 8016378:	1c41      	adds	r1, r0, #1
 801637a:	d1c7      	bne.n	801630c <__sflush_r+0x34>
 801637c:	682b      	ldr	r3, [r5, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d0c4      	beq.n	801630c <__sflush_r+0x34>
 8016382:	2b1d      	cmp	r3, #29
 8016384:	d001      	beq.n	801638a <__sflush_r+0xb2>
 8016386:	2b16      	cmp	r3, #22
 8016388:	d101      	bne.n	801638e <__sflush_r+0xb6>
 801638a:	602f      	str	r7, [r5, #0]
 801638c:	e7b1      	b.n	80162f2 <__sflush_r+0x1a>
 801638e:	89a3      	ldrh	r3, [r4, #12]
 8016390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016394:	81a3      	strh	r3, [r4, #12]
 8016396:	e7ad      	b.n	80162f4 <__sflush_r+0x1c>
 8016398:	690f      	ldr	r7, [r1, #16]
 801639a:	2f00      	cmp	r7, #0
 801639c:	d0a9      	beq.n	80162f2 <__sflush_r+0x1a>
 801639e:	0793      	lsls	r3, r2, #30
 80163a0:	680e      	ldr	r6, [r1, #0]
 80163a2:	bf08      	it	eq
 80163a4:	694b      	ldreq	r3, [r1, #20]
 80163a6:	600f      	str	r7, [r1, #0]
 80163a8:	bf18      	it	ne
 80163aa:	2300      	movne	r3, #0
 80163ac:	eba6 0807 	sub.w	r8, r6, r7
 80163b0:	608b      	str	r3, [r1, #8]
 80163b2:	f1b8 0f00 	cmp.w	r8, #0
 80163b6:	dd9c      	ble.n	80162f2 <__sflush_r+0x1a>
 80163b8:	6a21      	ldr	r1, [r4, #32]
 80163ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163bc:	4643      	mov	r3, r8
 80163be:	463a      	mov	r2, r7
 80163c0:	4628      	mov	r0, r5
 80163c2:	47b0      	blx	r6
 80163c4:	2800      	cmp	r0, #0
 80163c6:	dc06      	bgt.n	80163d6 <__sflush_r+0xfe>
 80163c8:	89a3      	ldrh	r3, [r4, #12]
 80163ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163ce:	81a3      	strh	r3, [r4, #12]
 80163d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163d4:	e78e      	b.n	80162f4 <__sflush_r+0x1c>
 80163d6:	4407      	add	r7, r0
 80163d8:	eba8 0800 	sub.w	r8, r8, r0
 80163dc:	e7e9      	b.n	80163b2 <__sflush_r+0xda>
 80163de:	bf00      	nop
 80163e0:	20400001 	.word	0x20400001

080163e4 <_fflush_r>:
 80163e4:	b538      	push	{r3, r4, r5, lr}
 80163e6:	690b      	ldr	r3, [r1, #16]
 80163e8:	4605      	mov	r5, r0
 80163ea:	460c      	mov	r4, r1
 80163ec:	b913      	cbnz	r3, 80163f4 <_fflush_r+0x10>
 80163ee:	2500      	movs	r5, #0
 80163f0:	4628      	mov	r0, r5
 80163f2:	bd38      	pop	{r3, r4, r5, pc}
 80163f4:	b118      	cbz	r0, 80163fe <_fflush_r+0x1a>
 80163f6:	6983      	ldr	r3, [r0, #24]
 80163f8:	b90b      	cbnz	r3, 80163fe <_fflush_r+0x1a>
 80163fa:	f7ff fb51 	bl	8015aa0 <__sinit>
 80163fe:	4b14      	ldr	r3, [pc, #80]	; (8016450 <_fflush_r+0x6c>)
 8016400:	429c      	cmp	r4, r3
 8016402:	d11b      	bne.n	801643c <_fflush_r+0x58>
 8016404:	686c      	ldr	r4, [r5, #4]
 8016406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d0ef      	beq.n	80163ee <_fflush_r+0xa>
 801640e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016410:	07d0      	lsls	r0, r2, #31
 8016412:	d404      	bmi.n	801641e <_fflush_r+0x3a>
 8016414:	0599      	lsls	r1, r3, #22
 8016416:	d402      	bmi.n	801641e <_fflush_r+0x3a>
 8016418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801641a:	f7ff fc04 	bl	8015c26 <__retarget_lock_acquire_recursive>
 801641e:	4628      	mov	r0, r5
 8016420:	4621      	mov	r1, r4
 8016422:	f7ff ff59 	bl	80162d8 <__sflush_r>
 8016426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016428:	07da      	lsls	r2, r3, #31
 801642a:	4605      	mov	r5, r0
 801642c:	d4e0      	bmi.n	80163f0 <_fflush_r+0xc>
 801642e:	89a3      	ldrh	r3, [r4, #12]
 8016430:	059b      	lsls	r3, r3, #22
 8016432:	d4dd      	bmi.n	80163f0 <_fflush_r+0xc>
 8016434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016436:	f7ff fbf7 	bl	8015c28 <__retarget_lock_release_recursive>
 801643a:	e7d9      	b.n	80163f0 <_fflush_r+0xc>
 801643c:	4b05      	ldr	r3, [pc, #20]	; (8016454 <_fflush_r+0x70>)
 801643e:	429c      	cmp	r4, r3
 8016440:	d101      	bne.n	8016446 <_fflush_r+0x62>
 8016442:	68ac      	ldr	r4, [r5, #8]
 8016444:	e7df      	b.n	8016406 <_fflush_r+0x22>
 8016446:	4b04      	ldr	r3, [pc, #16]	; (8016458 <_fflush_r+0x74>)
 8016448:	429c      	cmp	r4, r3
 801644a:	bf08      	it	eq
 801644c:	68ec      	ldreq	r4, [r5, #12]
 801644e:	e7da      	b.n	8016406 <_fflush_r+0x22>
 8016450:	0801a7f4 	.word	0x0801a7f4
 8016454:	0801a814 	.word	0x0801a814
 8016458:	0801a7d4 	.word	0x0801a7d4

0801645c <fiprintf>:
 801645c:	b40e      	push	{r1, r2, r3}
 801645e:	b503      	push	{r0, r1, lr}
 8016460:	4601      	mov	r1, r0
 8016462:	ab03      	add	r3, sp, #12
 8016464:	4805      	ldr	r0, [pc, #20]	; (801647c <fiprintf+0x20>)
 8016466:	f853 2b04 	ldr.w	r2, [r3], #4
 801646a:	6800      	ldr	r0, [r0, #0]
 801646c:	9301      	str	r3, [sp, #4]
 801646e:	f000 fa67 	bl	8016940 <_vfiprintf_r>
 8016472:	b002      	add	sp, #8
 8016474:	f85d eb04 	ldr.w	lr, [sp], #4
 8016478:	b003      	add	sp, #12
 801647a:	4770      	bx	lr
 801647c:	2000001c 	.word	0x2000001c

08016480 <_lseek_r>:
 8016480:	b538      	push	{r3, r4, r5, lr}
 8016482:	4d07      	ldr	r5, [pc, #28]	; (80164a0 <_lseek_r+0x20>)
 8016484:	4604      	mov	r4, r0
 8016486:	4608      	mov	r0, r1
 8016488:	4611      	mov	r1, r2
 801648a:	2200      	movs	r2, #0
 801648c:	602a      	str	r2, [r5, #0]
 801648e:	461a      	mov	r2, r3
 8016490:	f7ea fb94 	bl	8000bbc <_lseek>
 8016494:	1c43      	adds	r3, r0, #1
 8016496:	d102      	bne.n	801649e <_lseek_r+0x1e>
 8016498:	682b      	ldr	r3, [r5, #0]
 801649a:	b103      	cbz	r3, 801649e <_lseek_r+0x1e>
 801649c:	6023      	str	r3, [r4, #0]
 801649e:	bd38      	pop	{r3, r4, r5, pc}
 80164a0:	2000d878 	.word	0x2000d878

080164a4 <__swhatbuf_r>:
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	460e      	mov	r6, r1
 80164a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164ac:	2900      	cmp	r1, #0
 80164ae:	b096      	sub	sp, #88	; 0x58
 80164b0:	4614      	mov	r4, r2
 80164b2:	461d      	mov	r5, r3
 80164b4:	da07      	bge.n	80164c6 <__swhatbuf_r+0x22>
 80164b6:	2300      	movs	r3, #0
 80164b8:	602b      	str	r3, [r5, #0]
 80164ba:	89b3      	ldrh	r3, [r6, #12]
 80164bc:	061a      	lsls	r2, r3, #24
 80164be:	d410      	bmi.n	80164e2 <__swhatbuf_r+0x3e>
 80164c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164c4:	e00e      	b.n	80164e4 <__swhatbuf_r+0x40>
 80164c6:	466a      	mov	r2, sp
 80164c8:	f000 fd18 	bl	8016efc <_fstat_r>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	dbf2      	blt.n	80164b6 <__swhatbuf_r+0x12>
 80164d0:	9a01      	ldr	r2, [sp, #4]
 80164d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80164d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80164da:	425a      	negs	r2, r3
 80164dc:	415a      	adcs	r2, r3
 80164de:	602a      	str	r2, [r5, #0]
 80164e0:	e7ee      	b.n	80164c0 <__swhatbuf_r+0x1c>
 80164e2:	2340      	movs	r3, #64	; 0x40
 80164e4:	2000      	movs	r0, #0
 80164e6:	6023      	str	r3, [r4, #0]
 80164e8:	b016      	add	sp, #88	; 0x58
 80164ea:	bd70      	pop	{r4, r5, r6, pc}

080164ec <__smakebuf_r>:
 80164ec:	898b      	ldrh	r3, [r1, #12]
 80164ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164f0:	079d      	lsls	r5, r3, #30
 80164f2:	4606      	mov	r6, r0
 80164f4:	460c      	mov	r4, r1
 80164f6:	d507      	bpl.n	8016508 <__smakebuf_r+0x1c>
 80164f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80164fc:	6023      	str	r3, [r4, #0]
 80164fe:	6123      	str	r3, [r4, #16]
 8016500:	2301      	movs	r3, #1
 8016502:	6163      	str	r3, [r4, #20]
 8016504:	b002      	add	sp, #8
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	ab01      	add	r3, sp, #4
 801650a:	466a      	mov	r2, sp
 801650c:	f7ff ffca 	bl	80164a4 <__swhatbuf_r>
 8016510:	9900      	ldr	r1, [sp, #0]
 8016512:	4605      	mov	r5, r0
 8016514:	4630      	mov	r0, r6
 8016516:	f7ff fbc7 	bl	8015ca8 <_malloc_r>
 801651a:	b948      	cbnz	r0, 8016530 <__smakebuf_r+0x44>
 801651c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016520:	059a      	lsls	r2, r3, #22
 8016522:	d4ef      	bmi.n	8016504 <__smakebuf_r+0x18>
 8016524:	f023 0303 	bic.w	r3, r3, #3
 8016528:	f043 0302 	orr.w	r3, r3, #2
 801652c:	81a3      	strh	r3, [r4, #12]
 801652e:	e7e3      	b.n	80164f8 <__smakebuf_r+0xc>
 8016530:	4b0d      	ldr	r3, [pc, #52]	; (8016568 <__smakebuf_r+0x7c>)
 8016532:	62b3      	str	r3, [r6, #40]	; 0x28
 8016534:	89a3      	ldrh	r3, [r4, #12]
 8016536:	6020      	str	r0, [r4, #0]
 8016538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801653c:	81a3      	strh	r3, [r4, #12]
 801653e:	9b00      	ldr	r3, [sp, #0]
 8016540:	6163      	str	r3, [r4, #20]
 8016542:	9b01      	ldr	r3, [sp, #4]
 8016544:	6120      	str	r0, [r4, #16]
 8016546:	b15b      	cbz	r3, 8016560 <__smakebuf_r+0x74>
 8016548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801654c:	4630      	mov	r0, r6
 801654e:	f000 fce7 	bl	8016f20 <_isatty_r>
 8016552:	b128      	cbz	r0, 8016560 <__smakebuf_r+0x74>
 8016554:	89a3      	ldrh	r3, [r4, #12]
 8016556:	f023 0303 	bic.w	r3, r3, #3
 801655a:	f043 0301 	orr.w	r3, r3, #1
 801655e:	81a3      	strh	r3, [r4, #12]
 8016560:	89a0      	ldrh	r0, [r4, #12]
 8016562:	4305      	orrs	r5, r0
 8016564:	81a5      	strh	r5, [r4, #12]
 8016566:	e7cd      	b.n	8016504 <__smakebuf_r+0x18>
 8016568:	08015a39 	.word	0x08015a39

0801656c <malloc>:
 801656c:	4b02      	ldr	r3, [pc, #8]	; (8016578 <malloc+0xc>)
 801656e:	4601      	mov	r1, r0
 8016570:	6818      	ldr	r0, [r3, #0]
 8016572:	f7ff bb99 	b.w	8015ca8 <_malloc_r>
 8016576:	bf00      	nop
 8016578:	2000001c 	.word	0x2000001c

0801657c <__malloc_lock>:
 801657c:	4801      	ldr	r0, [pc, #4]	; (8016584 <__malloc_lock+0x8>)
 801657e:	f7ff bb52 	b.w	8015c26 <__retarget_lock_acquire_recursive>
 8016582:	bf00      	nop
 8016584:	2000d884 	.word	0x2000d884

08016588 <__malloc_unlock>:
 8016588:	4801      	ldr	r0, [pc, #4]	; (8016590 <__malloc_unlock+0x8>)
 801658a:	f7ff bb4d 	b.w	8015c28 <__retarget_lock_release_recursive>
 801658e:	bf00      	nop
 8016590:	2000d884 	.word	0x2000d884

08016594 <_free_r>:
 8016594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016596:	2900      	cmp	r1, #0
 8016598:	d048      	beq.n	801662c <_free_r+0x98>
 801659a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801659e:	9001      	str	r0, [sp, #4]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	f1a1 0404 	sub.w	r4, r1, #4
 80165a6:	bfb8      	it	lt
 80165a8:	18e4      	addlt	r4, r4, r3
 80165aa:	f7ff ffe7 	bl	801657c <__malloc_lock>
 80165ae:	4a20      	ldr	r2, [pc, #128]	; (8016630 <_free_r+0x9c>)
 80165b0:	9801      	ldr	r0, [sp, #4]
 80165b2:	6813      	ldr	r3, [r2, #0]
 80165b4:	4615      	mov	r5, r2
 80165b6:	b933      	cbnz	r3, 80165c6 <_free_r+0x32>
 80165b8:	6063      	str	r3, [r4, #4]
 80165ba:	6014      	str	r4, [r2, #0]
 80165bc:	b003      	add	sp, #12
 80165be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165c2:	f7ff bfe1 	b.w	8016588 <__malloc_unlock>
 80165c6:	42a3      	cmp	r3, r4
 80165c8:	d90b      	bls.n	80165e2 <_free_r+0x4e>
 80165ca:	6821      	ldr	r1, [r4, #0]
 80165cc:	1862      	adds	r2, r4, r1
 80165ce:	4293      	cmp	r3, r2
 80165d0:	bf04      	itt	eq
 80165d2:	681a      	ldreq	r2, [r3, #0]
 80165d4:	685b      	ldreq	r3, [r3, #4]
 80165d6:	6063      	str	r3, [r4, #4]
 80165d8:	bf04      	itt	eq
 80165da:	1852      	addeq	r2, r2, r1
 80165dc:	6022      	streq	r2, [r4, #0]
 80165de:	602c      	str	r4, [r5, #0]
 80165e0:	e7ec      	b.n	80165bc <_free_r+0x28>
 80165e2:	461a      	mov	r2, r3
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	b10b      	cbz	r3, 80165ec <_free_r+0x58>
 80165e8:	42a3      	cmp	r3, r4
 80165ea:	d9fa      	bls.n	80165e2 <_free_r+0x4e>
 80165ec:	6811      	ldr	r1, [r2, #0]
 80165ee:	1855      	adds	r5, r2, r1
 80165f0:	42a5      	cmp	r5, r4
 80165f2:	d10b      	bne.n	801660c <_free_r+0x78>
 80165f4:	6824      	ldr	r4, [r4, #0]
 80165f6:	4421      	add	r1, r4
 80165f8:	1854      	adds	r4, r2, r1
 80165fa:	42a3      	cmp	r3, r4
 80165fc:	6011      	str	r1, [r2, #0]
 80165fe:	d1dd      	bne.n	80165bc <_free_r+0x28>
 8016600:	681c      	ldr	r4, [r3, #0]
 8016602:	685b      	ldr	r3, [r3, #4]
 8016604:	6053      	str	r3, [r2, #4]
 8016606:	4421      	add	r1, r4
 8016608:	6011      	str	r1, [r2, #0]
 801660a:	e7d7      	b.n	80165bc <_free_r+0x28>
 801660c:	d902      	bls.n	8016614 <_free_r+0x80>
 801660e:	230c      	movs	r3, #12
 8016610:	6003      	str	r3, [r0, #0]
 8016612:	e7d3      	b.n	80165bc <_free_r+0x28>
 8016614:	6825      	ldr	r5, [r4, #0]
 8016616:	1961      	adds	r1, r4, r5
 8016618:	428b      	cmp	r3, r1
 801661a:	bf04      	itt	eq
 801661c:	6819      	ldreq	r1, [r3, #0]
 801661e:	685b      	ldreq	r3, [r3, #4]
 8016620:	6063      	str	r3, [r4, #4]
 8016622:	bf04      	itt	eq
 8016624:	1949      	addeq	r1, r1, r5
 8016626:	6021      	streq	r1, [r4, #0]
 8016628:	6054      	str	r4, [r2, #4]
 801662a:	e7c7      	b.n	80165bc <_free_r+0x28>
 801662c:	b003      	add	sp, #12
 801662e:	bd30      	pop	{r4, r5, pc}
 8016630:	20004c18 	.word	0x20004c18

08016634 <__ssputs_r>:
 8016634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016638:	688e      	ldr	r6, [r1, #8]
 801663a:	429e      	cmp	r6, r3
 801663c:	4682      	mov	sl, r0
 801663e:	460c      	mov	r4, r1
 8016640:	4690      	mov	r8, r2
 8016642:	461f      	mov	r7, r3
 8016644:	d838      	bhi.n	80166b8 <__ssputs_r+0x84>
 8016646:	898a      	ldrh	r2, [r1, #12]
 8016648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801664c:	d032      	beq.n	80166b4 <__ssputs_r+0x80>
 801664e:	6825      	ldr	r5, [r4, #0]
 8016650:	6909      	ldr	r1, [r1, #16]
 8016652:	eba5 0901 	sub.w	r9, r5, r1
 8016656:	6965      	ldr	r5, [r4, #20]
 8016658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801665c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016660:	3301      	adds	r3, #1
 8016662:	444b      	add	r3, r9
 8016664:	106d      	asrs	r5, r5, #1
 8016666:	429d      	cmp	r5, r3
 8016668:	bf38      	it	cc
 801666a:	461d      	movcc	r5, r3
 801666c:	0553      	lsls	r3, r2, #21
 801666e:	d531      	bpl.n	80166d4 <__ssputs_r+0xa0>
 8016670:	4629      	mov	r1, r5
 8016672:	f7ff fb19 	bl	8015ca8 <_malloc_r>
 8016676:	4606      	mov	r6, r0
 8016678:	b950      	cbnz	r0, 8016690 <__ssputs_r+0x5c>
 801667a:	230c      	movs	r3, #12
 801667c:	f8ca 3000 	str.w	r3, [sl]
 8016680:	89a3      	ldrh	r3, [r4, #12]
 8016682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016686:	81a3      	strh	r3, [r4, #12]
 8016688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801668c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016690:	6921      	ldr	r1, [r4, #16]
 8016692:	464a      	mov	r2, r9
 8016694:	f7ff fad7 	bl	8015c46 <memcpy>
 8016698:	89a3      	ldrh	r3, [r4, #12]
 801669a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801669e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166a2:	81a3      	strh	r3, [r4, #12]
 80166a4:	6126      	str	r6, [r4, #16]
 80166a6:	6165      	str	r5, [r4, #20]
 80166a8:	444e      	add	r6, r9
 80166aa:	eba5 0509 	sub.w	r5, r5, r9
 80166ae:	6026      	str	r6, [r4, #0]
 80166b0:	60a5      	str	r5, [r4, #8]
 80166b2:	463e      	mov	r6, r7
 80166b4:	42be      	cmp	r6, r7
 80166b6:	d900      	bls.n	80166ba <__ssputs_r+0x86>
 80166b8:	463e      	mov	r6, r7
 80166ba:	4632      	mov	r2, r6
 80166bc:	6820      	ldr	r0, [r4, #0]
 80166be:	4641      	mov	r1, r8
 80166c0:	f7ff facf 	bl	8015c62 <memmove>
 80166c4:	68a3      	ldr	r3, [r4, #8]
 80166c6:	6822      	ldr	r2, [r4, #0]
 80166c8:	1b9b      	subs	r3, r3, r6
 80166ca:	4432      	add	r2, r6
 80166cc:	60a3      	str	r3, [r4, #8]
 80166ce:	6022      	str	r2, [r4, #0]
 80166d0:	2000      	movs	r0, #0
 80166d2:	e7db      	b.n	801668c <__ssputs_r+0x58>
 80166d4:	462a      	mov	r2, r5
 80166d6:	f000 fc33 	bl	8016f40 <_realloc_r>
 80166da:	4606      	mov	r6, r0
 80166dc:	2800      	cmp	r0, #0
 80166de:	d1e1      	bne.n	80166a4 <__ssputs_r+0x70>
 80166e0:	6921      	ldr	r1, [r4, #16]
 80166e2:	4650      	mov	r0, sl
 80166e4:	f7ff ff56 	bl	8016594 <_free_r>
 80166e8:	e7c7      	b.n	801667a <__ssputs_r+0x46>
	...

080166ec <_svfiprintf_r>:
 80166ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f0:	4698      	mov	r8, r3
 80166f2:	898b      	ldrh	r3, [r1, #12]
 80166f4:	061b      	lsls	r3, r3, #24
 80166f6:	b09d      	sub	sp, #116	; 0x74
 80166f8:	4607      	mov	r7, r0
 80166fa:	460d      	mov	r5, r1
 80166fc:	4614      	mov	r4, r2
 80166fe:	d50e      	bpl.n	801671e <_svfiprintf_r+0x32>
 8016700:	690b      	ldr	r3, [r1, #16]
 8016702:	b963      	cbnz	r3, 801671e <_svfiprintf_r+0x32>
 8016704:	2140      	movs	r1, #64	; 0x40
 8016706:	f7ff facf 	bl	8015ca8 <_malloc_r>
 801670a:	6028      	str	r0, [r5, #0]
 801670c:	6128      	str	r0, [r5, #16]
 801670e:	b920      	cbnz	r0, 801671a <_svfiprintf_r+0x2e>
 8016710:	230c      	movs	r3, #12
 8016712:	603b      	str	r3, [r7, #0]
 8016714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016718:	e0d1      	b.n	80168be <_svfiprintf_r+0x1d2>
 801671a:	2340      	movs	r3, #64	; 0x40
 801671c:	616b      	str	r3, [r5, #20]
 801671e:	2300      	movs	r3, #0
 8016720:	9309      	str	r3, [sp, #36]	; 0x24
 8016722:	2320      	movs	r3, #32
 8016724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016728:	f8cd 800c 	str.w	r8, [sp, #12]
 801672c:	2330      	movs	r3, #48	; 0x30
 801672e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80168d8 <_svfiprintf_r+0x1ec>
 8016732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016736:	f04f 0901 	mov.w	r9, #1
 801673a:	4623      	mov	r3, r4
 801673c:	469a      	mov	sl, r3
 801673e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016742:	b10a      	cbz	r2, 8016748 <_svfiprintf_r+0x5c>
 8016744:	2a25      	cmp	r2, #37	; 0x25
 8016746:	d1f9      	bne.n	801673c <_svfiprintf_r+0x50>
 8016748:	ebba 0b04 	subs.w	fp, sl, r4
 801674c:	d00b      	beq.n	8016766 <_svfiprintf_r+0x7a>
 801674e:	465b      	mov	r3, fp
 8016750:	4622      	mov	r2, r4
 8016752:	4629      	mov	r1, r5
 8016754:	4638      	mov	r0, r7
 8016756:	f7ff ff6d 	bl	8016634 <__ssputs_r>
 801675a:	3001      	adds	r0, #1
 801675c:	f000 80aa 	beq.w	80168b4 <_svfiprintf_r+0x1c8>
 8016760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016762:	445a      	add	r2, fp
 8016764:	9209      	str	r2, [sp, #36]	; 0x24
 8016766:	f89a 3000 	ldrb.w	r3, [sl]
 801676a:	2b00      	cmp	r3, #0
 801676c:	f000 80a2 	beq.w	80168b4 <_svfiprintf_r+0x1c8>
 8016770:	2300      	movs	r3, #0
 8016772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801677a:	f10a 0a01 	add.w	sl, sl, #1
 801677e:	9304      	str	r3, [sp, #16]
 8016780:	9307      	str	r3, [sp, #28]
 8016782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016786:	931a      	str	r3, [sp, #104]	; 0x68
 8016788:	4654      	mov	r4, sl
 801678a:	2205      	movs	r2, #5
 801678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016790:	4851      	ldr	r0, [pc, #324]	; (80168d8 <_svfiprintf_r+0x1ec>)
 8016792:	f7e9 fd35 	bl	8000200 <memchr>
 8016796:	9a04      	ldr	r2, [sp, #16]
 8016798:	b9d8      	cbnz	r0, 80167d2 <_svfiprintf_r+0xe6>
 801679a:	06d0      	lsls	r0, r2, #27
 801679c:	bf44      	itt	mi
 801679e:	2320      	movmi	r3, #32
 80167a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167a4:	0711      	lsls	r1, r2, #28
 80167a6:	bf44      	itt	mi
 80167a8:	232b      	movmi	r3, #43	; 0x2b
 80167aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167ae:	f89a 3000 	ldrb.w	r3, [sl]
 80167b2:	2b2a      	cmp	r3, #42	; 0x2a
 80167b4:	d015      	beq.n	80167e2 <_svfiprintf_r+0xf6>
 80167b6:	9a07      	ldr	r2, [sp, #28]
 80167b8:	4654      	mov	r4, sl
 80167ba:	2000      	movs	r0, #0
 80167bc:	f04f 0c0a 	mov.w	ip, #10
 80167c0:	4621      	mov	r1, r4
 80167c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167c6:	3b30      	subs	r3, #48	; 0x30
 80167c8:	2b09      	cmp	r3, #9
 80167ca:	d94e      	bls.n	801686a <_svfiprintf_r+0x17e>
 80167cc:	b1b0      	cbz	r0, 80167fc <_svfiprintf_r+0x110>
 80167ce:	9207      	str	r2, [sp, #28]
 80167d0:	e014      	b.n	80167fc <_svfiprintf_r+0x110>
 80167d2:	eba0 0308 	sub.w	r3, r0, r8
 80167d6:	fa09 f303 	lsl.w	r3, r9, r3
 80167da:	4313      	orrs	r3, r2
 80167dc:	9304      	str	r3, [sp, #16]
 80167de:	46a2      	mov	sl, r4
 80167e0:	e7d2      	b.n	8016788 <_svfiprintf_r+0x9c>
 80167e2:	9b03      	ldr	r3, [sp, #12]
 80167e4:	1d19      	adds	r1, r3, #4
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	9103      	str	r1, [sp, #12]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	bfbb      	ittet	lt
 80167ee:	425b      	neglt	r3, r3
 80167f0:	f042 0202 	orrlt.w	r2, r2, #2
 80167f4:	9307      	strge	r3, [sp, #28]
 80167f6:	9307      	strlt	r3, [sp, #28]
 80167f8:	bfb8      	it	lt
 80167fa:	9204      	strlt	r2, [sp, #16]
 80167fc:	7823      	ldrb	r3, [r4, #0]
 80167fe:	2b2e      	cmp	r3, #46	; 0x2e
 8016800:	d10c      	bne.n	801681c <_svfiprintf_r+0x130>
 8016802:	7863      	ldrb	r3, [r4, #1]
 8016804:	2b2a      	cmp	r3, #42	; 0x2a
 8016806:	d135      	bne.n	8016874 <_svfiprintf_r+0x188>
 8016808:	9b03      	ldr	r3, [sp, #12]
 801680a:	1d1a      	adds	r2, r3, #4
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	9203      	str	r2, [sp, #12]
 8016810:	2b00      	cmp	r3, #0
 8016812:	bfb8      	it	lt
 8016814:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016818:	3402      	adds	r4, #2
 801681a:	9305      	str	r3, [sp, #20]
 801681c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80168e8 <_svfiprintf_r+0x1fc>
 8016820:	7821      	ldrb	r1, [r4, #0]
 8016822:	2203      	movs	r2, #3
 8016824:	4650      	mov	r0, sl
 8016826:	f7e9 fceb 	bl	8000200 <memchr>
 801682a:	b140      	cbz	r0, 801683e <_svfiprintf_r+0x152>
 801682c:	2340      	movs	r3, #64	; 0x40
 801682e:	eba0 000a 	sub.w	r0, r0, sl
 8016832:	fa03 f000 	lsl.w	r0, r3, r0
 8016836:	9b04      	ldr	r3, [sp, #16]
 8016838:	4303      	orrs	r3, r0
 801683a:	3401      	adds	r4, #1
 801683c:	9304      	str	r3, [sp, #16]
 801683e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016842:	4826      	ldr	r0, [pc, #152]	; (80168dc <_svfiprintf_r+0x1f0>)
 8016844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016848:	2206      	movs	r2, #6
 801684a:	f7e9 fcd9 	bl	8000200 <memchr>
 801684e:	2800      	cmp	r0, #0
 8016850:	d038      	beq.n	80168c4 <_svfiprintf_r+0x1d8>
 8016852:	4b23      	ldr	r3, [pc, #140]	; (80168e0 <_svfiprintf_r+0x1f4>)
 8016854:	bb1b      	cbnz	r3, 801689e <_svfiprintf_r+0x1b2>
 8016856:	9b03      	ldr	r3, [sp, #12]
 8016858:	3307      	adds	r3, #7
 801685a:	f023 0307 	bic.w	r3, r3, #7
 801685e:	3308      	adds	r3, #8
 8016860:	9303      	str	r3, [sp, #12]
 8016862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016864:	4433      	add	r3, r6
 8016866:	9309      	str	r3, [sp, #36]	; 0x24
 8016868:	e767      	b.n	801673a <_svfiprintf_r+0x4e>
 801686a:	fb0c 3202 	mla	r2, ip, r2, r3
 801686e:	460c      	mov	r4, r1
 8016870:	2001      	movs	r0, #1
 8016872:	e7a5      	b.n	80167c0 <_svfiprintf_r+0xd4>
 8016874:	2300      	movs	r3, #0
 8016876:	3401      	adds	r4, #1
 8016878:	9305      	str	r3, [sp, #20]
 801687a:	4619      	mov	r1, r3
 801687c:	f04f 0c0a 	mov.w	ip, #10
 8016880:	4620      	mov	r0, r4
 8016882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016886:	3a30      	subs	r2, #48	; 0x30
 8016888:	2a09      	cmp	r2, #9
 801688a:	d903      	bls.n	8016894 <_svfiprintf_r+0x1a8>
 801688c:	2b00      	cmp	r3, #0
 801688e:	d0c5      	beq.n	801681c <_svfiprintf_r+0x130>
 8016890:	9105      	str	r1, [sp, #20]
 8016892:	e7c3      	b.n	801681c <_svfiprintf_r+0x130>
 8016894:	fb0c 2101 	mla	r1, ip, r1, r2
 8016898:	4604      	mov	r4, r0
 801689a:	2301      	movs	r3, #1
 801689c:	e7f0      	b.n	8016880 <_svfiprintf_r+0x194>
 801689e:	ab03      	add	r3, sp, #12
 80168a0:	9300      	str	r3, [sp, #0]
 80168a2:	462a      	mov	r2, r5
 80168a4:	4b0f      	ldr	r3, [pc, #60]	; (80168e4 <_svfiprintf_r+0x1f8>)
 80168a6:	a904      	add	r1, sp, #16
 80168a8:	4638      	mov	r0, r7
 80168aa:	f3af 8000 	nop.w
 80168ae:	1c42      	adds	r2, r0, #1
 80168b0:	4606      	mov	r6, r0
 80168b2:	d1d6      	bne.n	8016862 <_svfiprintf_r+0x176>
 80168b4:	89ab      	ldrh	r3, [r5, #12]
 80168b6:	065b      	lsls	r3, r3, #25
 80168b8:	f53f af2c 	bmi.w	8016714 <_svfiprintf_r+0x28>
 80168bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168be:	b01d      	add	sp, #116	; 0x74
 80168c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c4:	ab03      	add	r3, sp, #12
 80168c6:	9300      	str	r3, [sp, #0]
 80168c8:	462a      	mov	r2, r5
 80168ca:	4b06      	ldr	r3, [pc, #24]	; (80168e4 <_svfiprintf_r+0x1f8>)
 80168cc:	a904      	add	r1, sp, #16
 80168ce:	4638      	mov	r0, r7
 80168d0:	f000 f9d4 	bl	8016c7c <_printf_i>
 80168d4:	e7eb      	b.n	80168ae <_svfiprintf_r+0x1c2>
 80168d6:	bf00      	nop
 80168d8:	0801a8ea 	.word	0x0801a8ea
 80168dc:	0801a8f4 	.word	0x0801a8f4
 80168e0:	00000000 	.word	0x00000000
 80168e4:	08016635 	.word	0x08016635
 80168e8:	0801a8f0 	.word	0x0801a8f0

080168ec <__sfputc_r>:
 80168ec:	6893      	ldr	r3, [r2, #8]
 80168ee:	3b01      	subs	r3, #1
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	b410      	push	{r4}
 80168f4:	6093      	str	r3, [r2, #8]
 80168f6:	da08      	bge.n	801690a <__sfputc_r+0x1e>
 80168f8:	6994      	ldr	r4, [r2, #24]
 80168fa:	42a3      	cmp	r3, r4
 80168fc:	db01      	blt.n	8016902 <__sfputc_r+0x16>
 80168fe:	290a      	cmp	r1, #10
 8016900:	d103      	bne.n	801690a <__sfputc_r+0x1e>
 8016902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016906:	f7ff bbe7 	b.w	80160d8 <__swbuf_r>
 801690a:	6813      	ldr	r3, [r2, #0]
 801690c:	1c58      	adds	r0, r3, #1
 801690e:	6010      	str	r0, [r2, #0]
 8016910:	7019      	strb	r1, [r3, #0]
 8016912:	4608      	mov	r0, r1
 8016914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016918:	4770      	bx	lr

0801691a <__sfputs_r>:
 801691a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801691c:	4606      	mov	r6, r0
 801691e:	460f      	mov	r7, r1
 8016920:	4614      	mov	r4, r2
 8016922:	18d5      	adds	r5, r2, r3
 8016924:	42ac      	cmp	r4, r5
 8016926:	d101      	bne.n	801692c <__sfputs_r+0x12>
 8016928:	2000      	movs	r0, #0
 801692a:	e007      	b.n	801693c <__sfputs_r+0x22>
 801692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016930:	463a      	mov	r2, r7
 8016932:	4630      	mov	r0, r6
 8016934:	f7ff ffda 	bl	80168ec <__sfputc_r>
 8016938:	1c43      	adds	r3, r0, #1
 801693a:	d1f3      	bne.n	8016924 <__sfputs_r+0xa>
 801693c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016940 <_vfiprintf_r>:
 8016940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016944:	460d      	mov	r5, r1
 8016946:	b09d      	sub	sp, #116	; 0x74
 8016948:	4614      	mov	r4, r2
 801694a:	4698      	mov	r8, r3
 801694c:	4606      	mov	r6, r0
 801694e:	b118      	cbz	r0, 8016958 <_vfiprintf_r+0x18>
 8016950:	6983      	ldr	r3, [r0, #24]
 8016952:	b90b      	cbnz	r3, 8016958 <_vfiprintf_r+0x18>
 8016954:	f7ff f8a4 	bl	8015aa0 <__sinit>
 8016958:	4b89      	ldr	r3, [pc, #548]	; (8016b80 <_vfiprintf_r+0x240>)
 801695a:	429d      	cmp	r5, r3
 801695c:	d11b      	bne.n	8016996 <_vfiprintf_r+0x56>
 801695e:	6875      	ldr	r5, [r6, #4]
 8016960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016962:	07d9      	lsls	r1, r3, #31
 8016964:	d405      	bmi.n	8016972 <_vfiprintf_r+0x32>
 8016966:	89ab      	ldrh	r3, [r5, #12]
 8016968:	059a      	lsls	r2, r3, #22
 801696a:	d402      	bmi.n	8016972 <_vfiprintf_r+0x32>
 801696c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801696e:	f7ff f95a 	bl	8015c26 <__retarget_lock_acquire_recursive>
 8016972:	89ab      	ldrh	r3, [r5, #12]
 8016974:	071b      	lsls	r3, r3, #28
 8016976:	d501      	bpl.n	801697c <_vfiprintf_r+0x3c>
 8016978:	692b      	ldr	r3, [r5, #16]
 801697a:	b9eb      	cbnz	r3, 80169b8 <_vfiprintf_r+0x78>
 801697c:	4629      	mov	r1, r5
 801697e:	4630      	mov	r0, r6
 8016980:	f7ff fc0e 	bl	80161a0 <__swsetup_r>
 8016984:	b1c0      	cbz	r0, 80169b8 <_vfiprintf_r+0x78>
 8016986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016988:	07dc      	lsls	r4, r3, #31
 801698a:	d50e      	bpl.n	80169aa <_vfiprintf_r+0x6a>
 801698c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016990:	b01d      	add	sp, #116	; 0x74
 8016992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016996:	4b7b      	ldr	r3, [pc, #492]	; (8016b84 <_vfiprintf_r+0x244>)
 8016998:	429d      	cmp	r5, r3
 801699a:	d101      	bne.n	80169a0 <_vfiprintf_r+0x60>
 801699c:	68b5      	ldr	r5, [r6, #8]
 801699e:	e7df      	b.n	8016960 <_vfiprintf_r+0x20>
 80169a0:	4b79      	ldr	r3, [pc, #484]	; (8016b88 <_vfiprintf_r+0x248>)
 80169a2:	429d      	cmp	r5, r3
 80169a4:	bf08      	it	eq
 80169a6:	68f5      	ldreq	r5, [r6, #12]
 80169a8:	e7da      	b.n	8016960 <_vfiprintf_r+0x20>
 80169aa:	89ab      	ldrh	r3, [r5, #12]
 80169ac:	0598      	lsls	r0, r3, #22
 80169ae:	d4ed      	bmi.n	801698c <_vfiprintf_r+0x4c>
 80169b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169b2:	f7ff f939 	bl	8015c28 <__retarget_lock_release_recursive>
 80169b6:	e7e9      	b.n	801698c <_vfiprintf_r+0x4c>
 80169b8:	2300      	movs	r3, #0
 80169ba:	9309      	str	r3, [sp, #36]	; 0x24
 80169bc:	2320      	movs	r3, #32
 80169be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80169c6:	2330      	movs	r3, #48	; 0x30
 80169c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016b8c <_vfiprintf_r+0x24c>
 80169cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169d0:	f04f 0901 	mov.w	r9, #1
 80169d4:	4623      	mov	r3, r4
 80169d6:	469a      	mov	sl, r3
 80169d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169dc:	b10a      	cbz	r2, 80169e2 <_vfiprintf_r+0xa2>
 80169de:	2a25      	cmp	r2, #37	; 0x25
 80169e0:	d1f9      	bne.n	80169d6 <_vfiprintf_r+0x96>
 80169e2:	ebba 0b04 	subs.w	fp, sl, r4
 80169e6:	d00b      	beq.n	8016a00 <_vfiprintf_r+0xc0>
 80169e8:	465b      	mov	r3, fp
 80169ea:	4622      	mov	r2, r4
 80169ec:	4629      	mov	r1, r5
 80169ee:	4630      	mov	r0, r6
 80169f0:	f7ff ff93 	bl	801691a <__sfputs_r>
 80169f4:	3001      	adds	r0, #1
 80169f6:	f000 80aa 	beq.w	8016b4e <_vfiprintf_r+0x20e>
 80169fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169fc:	445a      	add	r2, fp
 80169fe:	9209      	str	r2, [sp, #36]	; 0x24
 8016a00:	f89a 3000 	ldrb.w	r3, [sl]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	f000 80a2 	beq.w	8016b4e <_vfiprintf_r+0x20e>
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a14:	f10a 0a01 	add.w	sl, sl, #1
 8016a18:	9304      	str	r3, [sp, #16]
 8016a1a:	9307      	str	r3, [sp, #28]
 8016a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a20:	931a      	str	r3, [sp, #104]	; 0x68
 8016a22:	4654      	mov	r4, sl
 8016a24:	2205      	movs	r2, #5
 8016a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a2a:	4858      	ldr	r0, [pc, #352]	; (8016b8c <_vfiprintf_r+0x24c>)
 8016a2c:	f7e9 fbe8 	bl	8000200 <memchr>
 8016a30:	9a04      	ldr	r2, [sp, #16]
 8016a32:	b9d8      	cbnz	r0, 8016a6c <_vfiprintf_r+0x12c>
 8016a34:	06d1      	lsls	r1, r2, #27
 8016a36:	bf44      	itt	mi
 8016a38:	2320      	movmi	r3, #32
 8016a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a3e:	0713      	lsls	r3, r2, #28
 8016a40:	bf44      	itt	mi
 8016a42:	232b      	movmi	r3, #43	; 0x2b
 8016a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a48:	f89a 3000 	ldrb.w	r3, [sl]
 8016a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8016a4e:	d015      	beq.n	8016a7c <_vfiprintf_r+0x13c>
 8016a50:	9a07      	ldr	r2, [sp, #28]
 8016a52:	4654      	mov	r4, sl
 8016a54:	2000      	movs	r0, #0
 8016a56:	f04f 0c0a 	mov.w	ip, #10
 8016a5a:	4621      	mov	r1, r4
 8016a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a60:	3b30      	subs	r3, #48	; 0x30
 8016a62:	2b09      	cmp	r3, #9
 8016a64:	d94e      	bls.n	8016b04 <_vfiprintf_r+0x1c4>
 8016a66:	b1b0      	cbz	r0, 8016a96 <_vfiprintf_r+0x156>
 8016a68:	9207      	str	r2, [sp, #28]
 8016a6a:	e014      	b.n	8016a96 <_vfiprintf_r+0x156>
 8016a6c:	eba0 0308 	sub.w	r3, r0, r8
 8016a70:	fa09 f303 	lsl.w	r3, r9, r3
 8016a74:	4313      	orrs	r3, r2
 8016a76:	9304      	str	r3, [sp, #16]
 8016a78:	46a2      	mov	sl, r4
 8016a7a:	e7d2      	b.n	8016a22 <_vfiprintf_r+0xe2>
 8016a7c:	9b03      	ldr	r3, [sp, #12]
 8016a7e:	1d19      	adds	r1, r3, #4
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	9103      	str	r1, [sp, #12]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	bfbb      	ittet	lt
 8016a88:	425b      	neglt	r3, r3
 8016a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8016a8e:	9307      	strge	r3, [sp, #28]
 8016a90:	9307      	strlt	r3, [sp, #28]
 8016a92:	bfb8      	it	lt
 8016a94:	9204      	strlt	r2, [sp, #16]
 8016a96:	7823      	ldrb	r3, [r4, #0]
 8016a98:	2b2e      	cmp	r3, #46	; 0x2e
 8016a9a:	d10c      	bne.n	8016ab6 <_vfiprintf_r+0x176>
 8016a9c:	7863      	ldrb	r3, [r4, #1]
 8016a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8016aa0:	d135      	bne.n	8016b0e <_vfiprintf_r+0x1ce>
 8016aa2:	9b03      	ldr	r3, [sp, #12]
 8016aa4:	1d1a      	adds	r2, r3, #4
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	9203      	str	r2, [sp, #12]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	bfb8      	it	lt
 8016aae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016ab2:	3402      	adds	r4, #2
 8016ab4:	9305      	str	r3, [sp, #20]
 8016ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016b9c <_vfiprintf_r+0x25c>
 8016aba:	7821      	ldrb	r1, [r4, #0]
 8016abc:	2203      	movs	r2, #3
 8016abe:	4650      	mov	r0, sl
 8016ac0:	f7e9 fb9e 	bl	8000200 <memchr>
 8016ac4:	b140      	cbz	r0, 8016ad8 <_vfiprintf_r+0x198>
 8016ac6:	2340      	movs	r3, #64	; 0x40
 8016ac8:	eba0 000a 	sub.w	r0, r0, sl
 8016acc:	fa03 f000 	lsl.w	r0, r3, r0
 8016ad0:	9b04      	ldr	r3, [sp, #16]
 8016ad2:	4303      	orrs	r3, r0
 8016ad4:	3401      	adds	r4, #1
 8016ad6:	9304      	str	r3, [sp, #16]
 8016ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016adc:	482c      	ldr	r0, [pc, #176]	; (8016b90 <_vfiprintf_r+0x250>)
 8016ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ae2:	2206      	movs	r2, #6
 8016ae4:	f7e9 fb8c 	bl	8000200 <memchr>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d03f      	beq.n	8016b6c <_vfiprintf_r+0x22c>
 8016aec:	4b29      	ldr	r3, [pc, #164]	; (8016b94 <_vfiprintf_r+0x254>)
 8016aee:	bb1b      	cbnz	r3, 8016b38 <_vfiprintf_r+0x1f8>
 8016af0:	9b03      	ldr	r3, [sp, #12]
 8016af2:	3307      	adds	r3, #7
 8016af4:	f023 0307 	bic.w	r3, r3, #7
 8016af8:	3308      	adds	r3, #8
 8016afa:	9303      	str	r3, [sp, #12]
 8016afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afe:	443b      	add	r3, r7
 8016b00:	9309      	str	r3, [sp, #36]	; 0x24
 8016b02:	e767      	b.n	80169d4 <_vfiprintf_r+0x94>
 8016b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b08:	460c      	mov	r4, r1
 8016b0a:	2001      	movs	r0, #1
 8016b0c:	e7a5      	b.n	8016a5a <_vfiprintf_r+0x11a>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	3401      	adds	r4, #1
 8016b12:	9305      	str	r3, [sp, #20]
 8016b14:	4619      	mov	r1, r3
 8016b16:	f04f 0c0a 	mov.w	ip, #10
 8016b1a:	4620      	mov	r0, r4
 8016b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b20:	3a30      	subs	r2, #48	; 0x30
 8016b22:	2a09      	cmp	r2, #9
 8016b24:	d903      	bls.n	8016b2e <_vfiprintf_r+0x1ee>
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d0c5      	beq.n	8016ab6 <_vfiprintf_r+0x176>
 8016b2a:	9105      	str	r1, [sp, #20]
 8016b2c:	e7c3      	b.n	8016ab6 <_vfiprintf_r+0x176>
 8016b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b32:	4604      	mov	r4, r0
 8016b34:	2301      	movs	r3, #1
 8016b36:	e7f0      	b.n	8016b1a <_vfiprintf_r+0x1da>
 8016b38:	ab03      	add	r3, sp, #12
 8016b3a:	9300      	str	r3, [sp, #0]
 8016b3c:	462a      	mov	r2, r5
 8016b3e:	4b16      	ldr	r3, [pc, #88]	; (8016b98 <_vfiprintf_r+0x258>)
 8016b40:	a904      	add	r1, sp, #16
 8016b42:	4630      	mov	r0, r6
 8016b44:	f3af 8000 	nop.w
 8016b48:	4607      	mov	r7, r0
 8016b4a:	1c78      	adds	r0, r7, #1
 8016b4c:	d1d6      	bne.n	8016afc <_vfiprintf_r+0x1bc>
 8016b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b50:	07d9      	lsls	r1, r3, #31
 8016b52:	d405      	bmi.n	8016b60 <_vfiprintf_r+0x220>
 8016b54:	89ab      	ldrh	r3, [r5, #12]
 8016b56:	059a      	lsls	r2, r3, #22
 8016b58:	d402      	bmi.n	8016b60 <_vfiprintf_r+0x220>
 8016b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b5c:	f7ff f864 	bl	8015c28 <__retarget_lock_release_recursive>
 8016b60:	89ab      	ldrh	r3, [r5, #12]
 8016b62:	065b      	lsls	r3, r3, #25
 8016b64:	f53f af12 	bmi.w	801698c <_vfiprintf_r+0x4c>
 8016b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b6a:	e711      	b.n	8016990 <_vfiprintf_r+0x50>
 8016b6c:	ab03      	add	r3, sp, #12
 8016b6e:	9300      	str	r3, [sp, #0]
 8016b70:	462a      	mov	r2, r5
 8016b72:	4b09      	ldr	r3, [pc, #36]	; (8016b98 <_vfiprintf_r+0x258>)
 8016b74:	a904      	add	r1, sp, #16
 8016b76:	4630      	mov	r0, r6
 8016b78:	f000 f880 	bl	8016c7c <_printf_i>
 8016b7c:	e7e4      	b.n	8016b48 <_vfiprintf_r+0x208>
 8016b7e:	bf00      	nop
 8016b80:	0801a7f4 	.word	0x0801a7f4
 8016b84:	0801a814 	.word	0x0801a814
 8016b88:	0801a7d4 	.word	0x0801a7d4
 8016b8c:	0801a8ea 	.word	0x0801a8ea
 8016b90:	0801a8f4 	.word	0x0801a8f4
 8016b94:	00000000 	.word	0x00000000
 8016b98:	0801691b 	.word	0x0801691b
 8016b9c:	0801a8f0 	.word	0x0801a8f0

08016ba0 <_printf_common>:
 8016ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ba4:	4616      	mov	r6, r2
 8016ba6:	4699      	mov	r9, r3
 8016ba8:	688a      	ldr	r2, [r1, #8]
 8016baa:	690b      	ldr	r3, [r1, #16]
 8016bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bb0:	4293      	cmp	r3, r2
 8016bb2:	bfb8      	it	lt
 8016bb4:	4613      	movlt	r3, r2
 8016bb6:	6033      	str	r3, [r6, #0]
 8016bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016bbc:	4607      	mov	r7, r0
 8016bbe:	460c      	mov	r4, r1
 8016bc0:	b10a      	cbz	r2, 8016bc6 <_printf_common+0x26>
 8016bc2:	3301      	adds	r3, #1
 8016bc4:	6033      	str	r3, [r6, #0]
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	0699      	lsls	r1, r3, #26
 8016bca:	bf42      	ittt	mi
 8016bcc:	6833      	ldrmi	r3, [r6, #0]
 8016bce:	3302      	addmi	r3, #2
 8016bd0:	6033      	strmi	r3, [r6, #0]
 8016bd2:	6825      	ldr	r5, [r4, #0]
 8016bd4:	f015 0506 	ands.w	r5, r5, #6
 8016bd8:	d106      	bne.n	8016be8 <_printf_common+0x48>
 8016bda:	f104 0a19 	add.w	sl, r4, #25
 8016bde:	68e3      	ldr	r3, [r4, #12]
 8016be0:	6832      	ldr	r2, [r6, #0]
 8016be2:	1a9b      	subs	r3, r3, r2
 8016be4:	42ab      	cmp	r3, r5
 8016be6:	dc26      	bgt.n	8016c36 <_printf_common+0x96>
 8016be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016bec:	1e13      	subs	r3, r2, #0
 8016bee:	6822      	ldr	r2, [r4, #0]
 8016bf0:	bf18      	it	ne
 8016bf2:	2301      	movne	r3, #1
 8016bf4:	0692      	lsls	r2, r2, #26
 8016bf6:	d42b      	bmi.n	8016c50 <_printf_common+0xb0>
 8016bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bfc:	4649      	mov	r1, r9
 8016bfe:	4638      	mov	r0, r7
 8016c00:	47c0      	blx	r8
 8016c02:	3001      	adds	r0, #1
 8016c04:	d01e      	beq.n	8016c44 <_printf_common+0xa4>
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	68e5      	ldr	r5, [r4, #12]
 8016c0a:	6832      	ldr	r2, [r6, #0]
 8016c0c:	f003 0306 	and.w	r3, r3, #6
 8016c10:	2b04      	cmp	r3, #4
 8016c12:	bf08      	it	eq
 8016c14:	1aad      	subeq	r5, r5, r2
 8016c16:	68a3      	ldr	r3, [r4, #8]
 8016c18:	6922      	ldr	r2, [r4, #16]
 8016c1a:	bf0c      	ite	eq
 8016c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c20:	2500      	movne	r5, #0
 8016c22:	4293      	cmp	r3, r2
 8016c24:	bfc4      	itt	gt
 8016c26:	1a9b      	subgt	r3, r3, r2
 8016c28:	18ed      	addgt	r5, r5, r3
 8016c2a:	2600      	movs	r6, #0
 8016c2c:	341a      	adds	r4, #26
 8016c2e:	42b5      	cmp	r5, r6
 8016c30:	d11a      	bne.n	8016c68 <_printf_common+0xc8>
 8016c32:	2000      	movs	r0, #0
 8016c34:	e008      	b.n	8016c48 <_printf_common+0xa8>
 8016c36:	2301      	movs	r3, #1
 8016c38:	4652      	mov	r2, sl
 8016c3a:	4649      	mov	r1, r9
 8016c3c:	4638      	mov	r0, r7
 8016c3e:	47c0      	blx	r8
 8016c40:	3001      	adds	r0, #1
 8016c42:	d103      	bne.n	8016c4c <_printf_common+0xac>
 8016c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c4c:	3501      	adds	r5, #1
 8016c4e:	e7c6      	b.n	8016bde <_printf_common+0x3e>
 8016c50:	18e1      	adds	r1, r4, r3
 8016c52:	1c5a      	adds	r2, r3, #1
 8016c54:	2030      	movs	r0, #48	; 0x30
 8016c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c5a:	4422      	add	r2, r4
 8016c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c64:	3302      	adds	r3, #2
 8016c66:	e7c7      	b.n	8016bf8 <_printf_common+0x58>
 8016c68:	2301      	movs	r3, #1
 8016c6a:	4622      	mov	r2, r4
 8016c6c:	4649      	mov	r1, r9
 8016c6e:	4638      	mov	r0, r7
 8016c70:	47c0      	blx	r8
 8016c72:	3001      	adds	r0, #1
 8016c74:	d0e6      	beq.n	8016c44 <_printf_common+0xa4>
 8016c76:	3601      	adds	r6, #1
 8016c78:	e7d9      	b.n	8016c2e <_printf_common+0x8e>
	...

08016c7c <_printf_i>:
 8016c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c80:	460c      	mov	r4, r1
 8016c82:	4691      	mov	r9, r2
 8016c84:	7e27      	ldrb	r7, [r4, #24]
 8016c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c88:	2f78      	cmp	r7, #120	; 0x78
 8016c8a:	4680      	mov	r8, r0
 8016c8c:	469a      	mov	sl, r3
 8016c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c92:	d807      	bhi.n	8016ca4 <_printf_i+0x28>
 8016c94:	2f62      	cmp	r7, #98	; 0x62
 8016c96:	d80a      	bhi.n	8016cae <_printf_i+0x32>
 8016c98:	2f00      	cmp	r7, #0
 8016c9a:	f000 80d8 	beq.w	8016e4e <_printf_i+0x1d2>
 8016c9e:	2f58      	cmp	r7, #88	; 0x58
 8016ca0:	f000 80a3 	beq.w	8016dea <_printf_i+0x16e>
 8016ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016cac:	e03a      	b.n	8016d24 <_printf_i+0xa8>
 8016cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016cb2:	2b15      	cmp	r3, #21
 8016cb4:	d8f6      	bhi.n	8016ca4 <_printf_i+0x28>
 8016cb6:	a001      	add	r0, pc, #4	; (adr r0, 8016cbc <_printf_i+0x40>)
 8016cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016cbc:	08016d15 	.word	0x08016d15
 8016cc0:	08016d29 	.word	0x08016d29
 8016cc4:	08016ca5 	.word	0x08016ca5
 8016cc8:	08016ca5 	.word	0x08016ca5
 8016ccc:	08016ca5 	.word	0x08016ca5
 8016cd0:	08016ca5 	.word	0x08016ca5
 8016cd4:	08016d29 	.word	0x08016d29
 8016cd8:	08016ca5 	.word	0x08016ca5
 8016cdc:	08016ca5 	.word	0x08016ca5
 8016ce0:	08016ca5 	.word	0x08016ca5
 8016ce4:	08016ca5 	.word	0x08016ca5
 8016ce8:	08016e35 	.word	0x08016e35
 8016cec:	08016d59 	.word	0x08016d59
 8016cf0:	08016e17 	.word	0x08016e17
 8016cf4:	08016ca5 	.word	0x08016ca5
 8016cf8:	08016ca5 	.word	0x08016ca5
 8016cfc:	08016e57 	.word	0x08016e57
 8016d00:	08016ca5 	.word	0x08016ca5
 8016d04:	08016d59 	.word	0x08016d59
 8016d08:	08016ca5 	.word	0x08016ca5
 8016d0c:	08016ca5 	.word	0x08016ca5
 8016d10:	08016e1f 	.word	0x08016e1f
 8016d14:	680b      	ldr	r3, [r1, #0]
 8016d16:	1d1a      	adds	r2, r3, #4
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	600a      	str	r2, [r1, #0]
 8016d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d24:	2301      	movs	r3, #1
 8016d26:	e0a3      	b.n	8016e70 <_printf_i+0x1f4>
 8016d28:	6825      	ldr	r5, [r4, #0]
 8016d2a:	6808      	ldr	r0, [r1, #0]
 8016d2c:	062e      	lsls	r6, r5, #24
 8016d2e:	f100 0304 	add.w	r3, r0, #4
 8016d32:	d50a      	bpl.n	8016d4a <_printf_i+0xce>
 8016d34:	6805      	ldr	r5, [r0, #0]
 8016d36:	600b      	str	r3, [r1, #0]
 8016d38:	2d00      	cmp	r5, #0
 8016d3a:	da03      	bge.n	8016d44 <_printf_i+0xc8>
 8016d3c:	232d      	movs	r3, #45	; 0x2d
 8016d3e:	426d      	negs	r5, r5
 8016d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d44:	485e      	ldr	r0, [pc, #376]	; (8016ec0 <_printf_i+0x244>)
 8016d46:	230a      	movs	r3, #10
 8016d48:	e019      	b.n	8016d7e <_printf_i+0x102>
 8016d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016d4e:	6805      	ldr	r5, [r0, #0]
 8016d50:	600b      	str	r3, [r1, #0]
 8016d52:	bf18      	it	ne
 8016d54:	b22d      	sxthne	r5, r5
 8016d56:	e7ef      	b.n	8016d38 <_printf_i+0xbc>
 8016d58:	680b      	ldr	r3, [r1, #0]
 8016d5a:	6825      	ldr	r5, [r4, #0]
 8016d5c:	1d18      	adds	r0, r3, #4
 8016d5e:	6008      	str	r0, [r1, #0]
 8016d60:	0628      	lsls	r0, r5, #24
 8016d62:	d501      	bpl.n	8016d68 <_printf_i+0xec>
 8016d64:	681d      	ldr	r5, [r3, #0]
 8016d66:	e002      	b.n	8016d6e <_printf_i+0xf2>
 8016d68:	0669      	lsls	r1, r5, #25
 8016d6a:	d5fb      	bpl.n	8016d64 <_printf_i+0xe8>
 8016d6c:	881d      	ldrh	r5, [r3, #0]
 8016d6e:	4854      	ldr	r0, [pc, #336]	; (8016ec0 <_printf_i+0x244>)
 8016d70:	2f6f      	cmp	r7, #111	; 0x6f
 8016d72:	bf0c      	ite	eq
 8016d74:	2308      	moveq	r3, #8
 8016d76:	230a      	movne	r3, #10
 8016d78:	2100      	movs	r1, #0
 8016d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d7e:	6866      	ldr	r6, [r4, #4]
 8016d80:	60a6      	str	r6, [r4, #8]
 8016d82:	2e00      	cmp	r6, #0
 8016d84:	bfa2      	ittt	ge
 8016d86:	6821      	ldrge	r1, [r4, #0]
 8016d88:	f021 0104 	bicge.w	r1, r1, #4
 8016d8c:	6021      	strge	r1, [r4, #0]
 8016d8e:	b90d      	cbnz	r5, 8016d94 <_printf_i+0x118>
 8016d90:	2e00      	cmp	r6, #0
 8016d92:	d04d      	beq.n	8016e30 <_printf_i+0x1b4>
 8016d94:	4616      	mov	r6, r2
 8016d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8016d9e:	5dc7      	ldrb	r7, [r0, r7]
 8016da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016da4:	462f      	mov	r7, r5
 8016da6:	42bb      	cmp	r3, r7
 8016da8:	460d      	mov	r5, r1
 8016daa:	d9f4      	bls.n	8016d96 <_printf_i+0x11a>
 8016dac:	2b08      	cmp	r3, #8
 8016dae:	d10b      	bne.n	8016dc8 <_printf_i+0x14c>
 8016db0:	6823      	ldr	r3, [r4, #0]
 8016db2:	07df      	lsls	r7, r3, #31
 8016db4:	d508      	bpl.n	8016dc8 <_printf_i+0x14c>
 8016db6:	6923      	ldr	r3, [r4, #16]
 8016db8:	6861      	ldr	r1, [r4, #4]
 8016dba:	4299      	cmp	r1, r3
 8016dbc:	bfde      	ittt	le
 8016dbe:	2330      	movle	r3, #48	; 0x30
 8016dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016dc4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016dc8:	1b92      	subs	r2, r2, r6
 8016dca:	6122      	str	r2, [r4, #16]
 8016dcc:	f8cd a000 	str.w	sl, [sp]
 8016dd0:	464b      	mov	r3, r9
 8016dd2:	aa03      	add	r2, sp, #12
 8016dd4:	4621      	mov	r1, r4
 8016dd6:	4640      	mov	r0, r8
 8016dd8:	f7ff fee2 	bl	8016ba0 <_printf_common>
 8016ddc:	3001      	adds	r0, #1
 8016dde:	d14c      	bne.n	8016e7a <_printf_i+0x1fe>
 8016de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016de4:	b004      	add	sp, #16
 8016de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dea:	4835      	ldr	r0, [pc, #212]	; (8016ec0 <_printf_i+0x244>)
 8016dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	680e      	ldr	r6, [r1, #0]
 8016df4:	061f      	lsls	r7, r3, #24
 8016df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8016dfa:	600e      	str	r6, [r1, #0]
 8016dfc:	d514      	bpl.n	8016e28 <_printf_i+0x1ac>
 8016dfe:	07d9      	lsls	r1, r3, #31
 8016e00:	bf44      	itt	mi
 8016e02:	f043 0320 	orrmi.w	r3, r3, #32
 8016e06:	6023      	strmi	r3, [r4, #0]
 8016e08:	b91d      	cbnz	r5, 8016e12 <_printf_i+0x196>
 8016e0a:	6823      	ldr	r3, [r4, #0]
 8016e0c:	f023 0320 	bic.w	r3, r3, #32
 8016e10:	6023      	str	r3, [r4, #0]
 8016e12:	2310      	movs	r3, #16
 8016e14:	e7b0      	b.n	8016d78 <_printf_i+0xfc>
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	f043 0320 	orr.w	r3, r3, #32
 8016e1c:	6023      	str	r3, [r4, #0]
 8016e1e:	2378      	movs	r3, #120	; 0x78
 8016e20:	4828      	ldr	r0, [pc, #160]	; (8016ec4 <_printf_i+0x248>)
 8016e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016e26:	e7e3      	b.n	8016df0 <_printf_i+0x174>
 8016e28:	065e      	lsls	r6, r3, #25
 8016e2a:	bf48      	it	mi
 8016e2c:	b2ad      	uxthmi	r5, r5
 8016e2e:	e7e6      	b.n	8016dfe <_printf_i+0x182>
 8016e30:	4616      	mov	r6, r2
 8016e32:	e7bb      	b.n	8016dac <_printf_i+0x130>
 8016e34:	680b      	ldr	r3, [r1, #0]
 8016e36:	6826      	ldr	r6, [r4, #0]
 8016e38:	6960      	ldr	r0, [r4, #20]
 8016e3a:	1d1d      	adds	r5, r3, #4
 8016e3c:	600d      	str	r5, [r1, #0]
 8016e3e:	0635      	lsls	r5, r6, #24
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	d501      	bpl.n	8016e48 <_printf_i+0x1cc>
 8016e44:	6018      	str	r0, [r3, #0]
 8016e46:	e002      	b.n	8016e4e <_printf_i+0x1d2>
 8016e48:	0671      	lsls	r1, r6, #25
 8016e4a:	d5fb      	bpl.n	8016e44 <_printf_i+0x1c8>
 8016e4c:	8018      	strh	r0, [r3, #0]
 8016e4e:	2300      	movs	r3, #0
 8016e50:	6123      	str	r3, [r4, #16]
 8016e52:	4616      	mov	r6, r2
 8016e54:	e7ba      	b.n	8016dcc <_printf_i+0x150>
 8016e56:	680b      	ldr	r3, [r1, #0]
 8016e58:	1d1a      	adds	r2, r3, #4
 8016e5a:	600a      	str	r2, [r1, #0]
 8016e5c:	681e      	ldr	r6, [r3, #0]
 8016e5e:	6862      	ldr	r2, [r4, #4]
 8016e60:	2100      	movs	r1, #0
 8016e62:	4630      	mov	r0, r6
 8016e64:	f7e9 f9cc 	bl	8000200 <memchr>
 8016e68:	b108      	cbz	r0, 8016e6e <_printf_i+0x1f2>
 8016e6a:	1b80      	subs	r0, r0, r6
 8016e6c:	6060      	str	r0, [r4, #4]
 8016e6e:	6863      	ldr	r3, [r4, #4]
 8016e70:	6123      	str	r3, [r4, #16]
 8016e72:	2300      	movs	r3, #0
 8016e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e78:	e7a8      	b.n	8016dcc <_printf_i+0x150>
 8016e7a:	6923      	ldr	r3, [r4, #16]
 8016e7c:	4632      	mov	r2, r6
 8016e7e:	4649      	mov	r1, r9
 8016e80:	4640      	mov	r0, r8
 8016e82:	47d0      	blx	sl
 8016e84:	3001      	adds	r0, #1
 8016e86:	d0ab      	beq.n	8016de0 <_printf_i+0x164>
 8016e88:	6823      	ldr	r3, [r4, #0]
 8016e8a:	079b      	lsls	r3, r3, #30
 8016e8c:	d413      	bmi.n	8016eb6 <_printf_i+0x23a>
 8016e8e:	68e0      	ldr	r0, [r4, #12]
 8016e90:	9b03      	ldr	r3, [sp, #12]
 8016e92:	4298      	cmp	r0, r3
 8016e94:	bfb8      	it	lt
 8016e96:	4618      	movlt	r0, r3
 8016e98:	e7a4      	b.n	8016de4 <_printf_i+0x168>
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	4632      	mov	r2, r6
 8016e9e:	4649      	mov	r1, r9
 8016ea0:	4640      	mov	r0, r8
 8016ea2:	47d0      	blx	sl
 8016ea4:	3001      	adds	r0, #1
 8016ea6:	d09b      	beq.n	8016de0 <_printf_i+0x164>
 8016ea8:	3501      	adds	r5, #1
 8016eaa:	68e3      	ldr	r3, [r4, #12]
 8016eac:	9903      	ldr	r1, [sp, #12]
 8016eae:	1a5b      	subs	r3, r3, r1
 8016eb0:	42ab      	cmp	r3, r5
 8016eb2:	dcf2      	bgt.n	8016e9a <_printf_i+0x21e>
 8016eb4:	e7eb      	b.n	8016e8e <_printf_i+0x212>
 8016eb6:	2500      	movs	r5, #0
 8016eb8:	f104 0619 	add.w	r6, r4, #25
 8016ebc:	e7f5      	b.n	8016eaa <_printf_i+0x22e>
 8016ebe:	bf00      	nop
 8016ec0:	0801a8fb 	.word	0x0801a8fb
 8016ec4:	0801a90c 	.word	0x0801a90c

08016ec8 <_read_r>:
 8016ec8:	b538      	push	{r3, r4, r5, lr}
 8016eca:	4d07      	ldr	r5, [pc, #28]	; (8016ee8 <_read_r+0x20>)
 8016ecc:	4604      	mov	r4, r0
 8016ece:	4608      	mov	r0, r1
 8016ed0:	4611      	mov	r1, r2
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	602a      	str	r2, [r5, #0]
 8016ed6:	461a      	mov	r2, r3
 8016ed8:	f7e9 fe2c 	bl	8000b34 <_read>
 8016edc:	1c43      	adds	r3, r0, #1
 8016ede:	d102      	bne.n	8016ee6 <_read_r+0x1e>
 8016ee0:	682b      	ldr	r3, [r5, #0]
 8016ee2:	b103      	cbz	r3, 8016ee6 <_read_r+0x1e>
 8016ee4:	6023      	str	r3, [r4, #0]
 8016ee6:	bd38      	pop	{r3, r4, r5, pc}
 8016ee8:	2000d878 	.word	0x2000d878

08016eec <abort>:
 8016eec:	b508      	push	{r3, lr}
 8016eee:	2006      	movs	r0, #6
 8016ef0:	f000 f874 	bl	8016fdc <raise>
 8016ef4:	2001      	movs	r0, #1
 8016ef6:	f7e9 fe13 	bl	8000b20 <_exit>
	...

08016efc <_fstat_r>:
 8016efc:	b538      	push	{r3, r4, r5, lr}
 8016efe:	4d07      	ldr	r5, [pc, #28]	; (8016f1c <_fstat_r+0x20>)
 8016f00:	2300      	movs	r3, #0
 8016f02:	4604      	mov	r4, r0
 8016f04:	4608      	mov	r0, r1
 8016f06:	4611      	mov	r1, r2
 8016f08:	602b      	str	r3, [r5, #0]
 8016f0a:	f7e9 fe3c 	bl	8000b86 <_fstat>
 8016f0e:	1c43      	adds	r3, r0, #1
 8016f10:	d102      	bne.n	8016f18 <_fstat_r+0x1c>
 8016f12:	682b      	ldr	r3, [r5, #0]
 8016f14:	b103      	cbz	r3, 8016f18 <_fstat_r+0x1c>
 8016f16:	6023      	str	r3, [r4, #0]
 8016f18:	bd38      	pop	{r3, r4, r5, pc}
 8016f1a:	bf00      	nop
 8016f1c:	2000d878 	.word	0x2000d878

08016f20 <_isatty_r>:
 8016f20:	b538      	push	{r3, r4, r5, lr}
 8016f22:	4d06      	ldr	r5, [pc, #24]	; (8016f3c <_isatty_r+0x1c>)
 8016f24:	2300      	movs	r3, #0
 8016f26:	4604      	mov	r4, r0
 8016f28:	4608      	mov	r0, r1
 8016f2a:	602b      	str	r3, [r5, #0]
 8016f2c:	f7e9 fe3b 	bl	8000ba6 <_isatty>
 8016f30:	1c43      	adds	r3, r0, #1
 8016f32:	d102      	bne.n	8016f3a <_isatty_r+0x1a>
 8016f34:	682b      	ldr	r3, [r5, #0]
 8016f36:	b103      	cbz	r3, 8016f3a <_isatty_r+0x1a>
 8016f38:	6023      	str	r3, [r4, #0]
 8016f3a:	bd38      	pop	{r3, r4, r5, pc}
 8016f3c:	2000d878 	.word	0x2000d878

08016f40 <_realloc_r>:
 8016f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f42:	4607      	mov	r7, r0
 8016f44:	4614      	mov	r4, r2
 8016f46:	460e      	mov	r6, r1
 8016f48:	b921      	cbnz	r1, 8016f54 <_realloc_r+0x14>
 8016f4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016f4e:	4611      	mov	r1, r2
 8016f50:	f7fe beaa 	b.w	8015ca8 <_malloc_r>
 8016f54:	b922      	cbnz	r2, 8016f60 <_realloc_r+0x20>
 8016f56:	f7ff fb1d 	bl	8016594 <_free_r>
 8016f5a:	4625      	mov	r5, r4
 8016f5c:	4628      	mov	r0, r5
 8016f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f60:	f000 f858 	bl	8017014 <_malloc_usable_size_r>
 8016f64:	42a0      	cmp	r0, r4
 8016f66:	d20f      	bcs.n	8016f88 <_realloc_r+0x48>
 8016f68:	4621      	mov	r1, r4
 8016f6a:	4638      	mov	r0, r7
 8016f6c:	f7fe fe9c 	bl	8015ca8 <_malloc_r>
 8016f70:	4605      	mov	r5, r0
 8016f72:	2800      	cmp	r0, #0
 8016f74:	d0f2      	beq.n	8016f5c <_realloc_r+0x1c>
 8016f76:	4631      	mov	r1, r6
 8016f78:	4622      	mov	r2, r4
 8016f7a:	f7fe fe64 	bl	8015c46 <memcpy>
 8016f7e:	4631      	mov	r1, r6
 8016f80:	4638      	mov	r0, r7
 8016f82:	f7ff fb07 	bl	8016594 <_free_r>
 8016f86:	e7e9      	b.n	8016f5c <_realloc_r+0x1c>
 8016f88:	4635      	mov	r5, r6
 8016f8a:	e7e7      	b.n	8016f5c <_realloc_r+0x1c>

08016f8c <_raise_r>:
 8016f8c:	291f      	cmp	r1, #31
 8016f8e:	b538      	push	{r3, r4, r5, lr}
 8016f90:	4604      	mov	r4, r0
 8016f92:	460d      	mov	r5, r1
 8016f94:	d904      	bls.n	8016fa0 <_raise_r+0x14>
 8016f96:	2316      	movs	r3, #22
 8016f98:	6003      	str	r3, [r0, #0]
 8016f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f9e:	bd38      	pop	{r3, r4, r5, pc}
 8016fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016fa2:	b112      	cbz	r2, 8016faa <_raise_r+0x1e>
 8016fa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016fa8:	b94b      	cbnz	r3, 8016fbe <_raise_r+0x32>
 8016faa:	4620      	mov	r0, r4
 8016fac:	f000 f830 	bl	8017010 <_getpid_r>
 8016fb0:	462a      	mov	r2, r5
 8016fb2:	4601      	mov	r1, r0
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fba:	f000 b817 	b.w	8016fec <_kill_r>
 8016fbe:	2b01      	cmp	r3, #1
 8016fc0:	d00a      	beq.n	8016fd8 <_raise_r+0x4c>
 8016fc2:	1c59      	adds	r1, r3, #1
 8016fc4:	d103      	bne.n	8016fce <_raise_r+0x42>
 8016fc6:	2316      	movs	r3, #22
 8016fc8:	6003      	str	r3, [r0, #0]
 8016fca:	2001      	movs	r0, #1
 8016fcc:	e7e7      	b.n	8016f9e <_raise_r+0x12>
 8016fce:	2400      	movs	r4, #0
 8016fd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016fd4:	4628      	mov	r0, r5
 8016fd6:	4798      	blx	r3
 8016fd8:	2000      	movs	r0, #0
 8016fda:	e7e0      	b.n	8016f9e <_raise_r+0x12>

08016fdc <raise>:
 8016fdc:	4b02      	ldr	r3, [pc, #8]	; (8016fe8 <raise+0xc>)
 8016fde:	4601      	mov	r1, r0
 8016fe0:	6818      	ldr	r0, [r3, #0]
 8016fe2:	f7ff bfd3 	b.w	8016f8c <_raise_r>
 8016fe6:	bf00      	nop
 8016fe8:	2000001c 	.word	0x2000001c

08016fec <_kill_r>:
 8016fec:	b538      	push	{r3, r4, r5, lr}
 8016fee:	4d07      	ldr	r5, [pc, #28]	; (801700c <_kill_r+0x20>)
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	4608      	mov	r0, r1
 8016ff6:	4611      	mov	r1, r2
 8016ff8:	602b      	str	r3, [r5, #0]
 8016ffa:	f7e9 fd7f 	bl	8000afc <_kill>
 8016ffe:	1c43      	adds	r3, r0, #1
 8017000:	d102      	bne.n	8017008 <_kill_r+0x1c>
 8017002:	682b      	ldr	r3, [r5, #0]
 8017004:	b103      	cbz	r3, 8017008 <_kill_r+0x1c>
 8017006:	6023      	str	r3, [r4, #0]
 8017008:	bd38      	pop	{r3, r4, r5, pc}
 801700a:	bf00      	nop
 801700c:	2000d878 	.word	0x2000d878

08017010 <_getpid_r>:
 8017010:	f7e9 bd6c 	b.w	8000aec <_getpid>

08017014 <_malloc_usable_size_r>:
 8017014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017018:	1f18      	subs	r0, r3, #4
 801701a:	2b00      	cmp	r3, #0
 801701c:	bfbc      	itt	lt
 801701e:	580b      	ldrlt	r3, [r1, r0]
 8017020:	18c0      	addlt	r0, r0, r3
 8017022:	4770      	bx	lr

08017024 <_init>:
 8017024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017026:	bf00      	nop
 8017028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801702a:	bc08      	pop	{r3}
 801702c:	469e      	mov	lr, r3
 801702e:	4770      	bx	lr

08017030 <_fini>:
 8017030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017032:	bf00      	nop
 8017034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017036:	bc08      	pop	{r3}
 8017038:	469e      	mov	lr, r3
 801703a:	4770      	bx	lr
