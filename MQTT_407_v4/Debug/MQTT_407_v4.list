
MQTT_407_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000140d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006a00  08014260  08014260  00024260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac60  0801ac60  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac60  0801ac60  0002ac60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac68  0801ac68  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac68  0801ac68  0002ac68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac6c  0801ac6c  0002ac6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801ac70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00007554  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200075e8  200075e8  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038e80  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066fc  00000000  00000000  00068f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  0006f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c8  00000000  00000000  00071090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002eeae  00000000  00000000  00072a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ba44  00000000  00000000  000a1906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5fa8  00000000  00000000  000cd34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b32f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000771c  00000000  00000000  001b3348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014248 	.word	0x08014248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08014248 	.word	0x08014248

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <mqtt_incoming_publish_cb>:
 If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
 the topic string and use it in mqtt_incoming_data_cb
 */
static int inpub_id;
static void mqtt_incoming_publish_cb(void *arg, const char *topic,
		u32_t tot_len) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	sprintf(buffer, "Incoming publish at topic %s with total length %u\n\r",
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68ba      	ldr	r2, [r7, #8]
 80005a8:	4914      	ldr	r1, [pc, #80]	; (80005fc <mqtt_incoming_publish_cb+0x64>)
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <mqtt_incoming_publish_cb+0x68>)
 80005ac:	f012 fcb8 	bl	8012f20 <siprintf>
			topic, (unsigned int) tot_len);
	HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 80005b0:	4813      	ldr	r0, [pc, #76]	; (8000600 <mqtt_incoming_publish_cb+0x68>)
 80005b2:	f7ff fe17 	bl	80001e4 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	4910      	ldr	r1, [pc, #64]	; (8000600 <mqtt_incoming_publish_cb+0x68>)
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <mqtt_incoming_publish_cb+0x6c>)
 80005c2:	f003 fe1e 	bl	8004202 <HAL_UART_Transmit>
	/* Decode topic string into a user defined reference */
	if (strcmp(topic, "hello_world") == 0) {
 80005c6:	4910      	ldr	r1, [pc, #64]	; (8000608 <mqtt_incoming_publish_cb+0x70>)
 80005c8:	68b8      	ldr	r0, [r7, #8]
 80005ca:	f7ff fe01 	bl	80001d0 <strcmp>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <mqtt_incoming_publish_cb+0x44>
		inpub_id = 0;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <mqtt_incoming_publish_cb+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	} else {
		/* For all other topics */
		inpub_id = 9;
	}

}
 80005da:	e00a      	b.n	80005f2 <mqtt_incoming_publish_cb+0x5a>
	} else if (topic[0] == 'A') {
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b41      	cmp	r3, #65	; 0x41
 80005e2:	d103      	bne.n	80005ec <mqtt_incoming_publish_cb+0x54>
		inpub_id = 1;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <mqtt_incoming_publish_cb+0x74>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	e002      	b.n	80005f2 <mqtt_incoming_publish_cb+0x5a>
		inpub_id = 9;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <mqtt_incoming_publish_cb+0x74>)
 80005ee:	2209      	movs	r2, #9
 80005f0:	601a      	str	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	08014260 	.word	0x08014260
 8000600:	20000690 	.word	0x20000690
 8000604:	20000e6c 	.word	0x20000e6c
 8000608:	08014294 	.word	0x08014294
 800060c:	200000b0 	.word	0x200000b0

08000610 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len,u8_t flags) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	4611      	mov	r1, r2
 800061c:	461a      	mov	r2, r3
 800061e:	460b      	mov	r3, r1
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	4613      	mov	r3, r2
 8000624:	717b      	strb	r3, [r7, #5]
	sprintf(buffer, "Incoming publish payload with length %d, flags %u\n\r",len, (unsigned int) flags);
 8000626:	88fa      	ldrh	r2, [r7, #6]
 8000628:	797b      	ldrb	r3, [r7, #5]
 800062a:	491c      	ldr	r1, [pc, #112]	; (800069c <mqtt_incoming_data_cb+0x8c>)
 800062c:	481c      	ldr	r0, [pc, #112]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 800062e:	f012 fc77 	bl	8012f20 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 8000632:	481b      	ldr	r0, [pc, #108]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 8000634:	f7ff fdd6 	bl	80001e4 <strlen>
 8000638:	4603      	mov	r3, r0
 800063a:	b29a      	uxth	r2, r3
 800063c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000640:	4917      	ldr	r1, [pc, #92]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 8000642:	4818      	ldr	r0, [pc, #96]	; (80006a4 <mqtt_incoming_data_cb+0x94>)
 8000644:	f003 fddd 	bl	8004202 <HAL_UART_Transmit>

	if (flags & MQTT_DATA_FLAG_LAST) {
 8000648:	797b      	ldrb	r3, [r7, #5]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	2b00      	cmp	r3, #0
 8000650:	d010      	beq.n	8000674 <mqtt_incoming_data_cb+0x64>

		/* Call function or do action depending on reference, in this case inpub_id */
		//if (inpub_id != 0) {
			/* Don't trust the publisher, check zero termination */
			//if (data[len - 1] != 0) {
				sprintf(buffer, "mqtt_incoming_data_cb: %s\n\r",(const char*) data);
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	4914      	ldr	r1, [pc, #80]	; (80006a8 <mqtt_incoming_data_cb+0x98>)
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 8000658:	f012 fc62 	bl	8012f20 <siprintf>
				HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer),1000);
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 800065e:	f7ff fdc1 	bl	80001e4 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	490d      	ldr	r1, [pc, #52]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <mqtt_incoming_data_cb+0x94>)
 800066e:	f003 fdc8 	bl	8004202 <HAL_UART_Transmit>
			} else {
				sprintf(buffer,"mqtt_incoming_data_cb: Ignoring payload...\n\r");
				HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer),1000);
			}
		}
 8000672:	e00e      	b.n	8000692 <mqtt_incoming_data_cb+0x82>
				sprintf(buffer,"mqtt_incoming_data_cb: Ignoring payload...\n\r");
 8000674:	490d      	ldr	r1, [pc, #52]	; (80006ac <mqtt_incoming_data_cb+0x9c>)
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 8000678:	f012 fc52 	bl	8012f20 <siprintf>
				HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer),1000);
 800067c:	4808      	ldr	r0, [pc, #32]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 800067e:	f7ff fdb1 	bl	80001e4 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	4905      	ldr	r1, [pc, #20]	; (80006a0 <mqtt_incoming_data_cb+0x90>)
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <mqtt_incoming_data_cb+0x94>)
 800068e:	f003 fdb8 	bl	8004202 <HAL_UART_Transmit>
		}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	080142a0 	.word	0x080142a0
 80006a0:	20000690 	.word	0x20000690
 80006a4:	20000e6c 	.word	0x20000e6c
 80006a8:	080142d4 	.word	0x080142d4
 80006ac:	080142f0 	.word	0x080142f0

080006b0 <mqtt_sub_request_cb>:
//	}
//}

static void mqtt_sub_request_cb(void *arg, err_t result) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	/* Just print the result code here for simplicity,
	 normal behaviour would be to take some action if subscribe fails like
	 notifying user, retry subscribe or disconnect from server */
	sprintf(buffer, "Subscribe result: %d\n\r", result);
 80006bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4909      	ldr	r1, [pc, #36]	; (80006e8 <mqtt_sub_request_cb+0x38>)
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <mqtt_sub_request_cb+0x3c>)
 80006c6:	f012 fc2b 	bl	8012f20 <siprintf>
	HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <mqtt_sub_request_cb+0x3c>)
 80006cc:	f7ff fd8a 	bl	80001e4 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d8:	4904      	ldr	r1, [pc, #16]	; (80006ec <mqtt_sub_request_cb+0x3c>)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <mqtt_sub_request_cb+0x40>)
 80006dc:	f003 fd91 	bl	8004202 <HAL_UART_Transmit>

}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08014320 	.word	0x08014320
 80006ec:	20000690 	.word	0x20000690
 80006f0:	20000e6c 	.word	0x20000e6c

080006f4 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg,mqtt_connection_status_t status) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af02      	add	r7, sp, #8
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4613      	mov	r3, r2
 8000700:	80fb      	strh	r3, [r7, #6]
	const char *topico = arg;
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	617b      	str	r3, [r7, #20]
	err_t err;
	if (status == MQTT_CONNECT_ACCEPTED) {
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d137      	bne.n	800077c <mqtt_connection_cb+0x88>
		sprintf(buffer, "mqtt_connection_cb: Successfully connected\n");
 800070c:	4927      	ldr	r1, [pc, #156]	; (80007ac <mqtt_connection_cb+0xb8>)
 800070e:	4828      	ldr	r0, [pc, #160]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000710:	f012 fc06 	bl	8012f20 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 8000714:	4826      	ldr	r0, [pc, #152]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000716:	f7ff fd65 	bl	80001e4 <strlen>
 800071a:	4603      	mov	r3, r0
 800071c:	b29a      	uxth	r2, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	4923      	ldr	r1, [pc, #140]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000724:	4823      	ldr	r0, [pc, #140]	; (80007b4 <mqtt_connection_cb+0xc0>)
 8000726:	f003 fd6c 	bl	8004202 <HAL_UART_Transmit>

		/* Setup callback for incoming publish requests */
		mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb,
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <mqtt_connection_cb+0xc4>)
 800072e:	4923      	ldr	r1, [pc, #140]	; (80007bc <mqtt_connection_cb+0xc8>)
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f007 faed 	bl	8007d10 <mqtt_set_inpub_callback>
				mqtt_incoming_data_cb, arg);

		/* Subscribe to a topic named "placa" with QoS level 0, call mqtt_sub_request_cb with result */
		err = mqtt_subscribe(client, "hello_world", 0, mqtt_sub_request_cb, arg);
 8000736:	2301      	movs	r3, #1
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <mqtt_connection_cb+0xcc>)
 8000740:	2200      	movs	r2, #0
 8000742:	4920      	ldr	r1, [pc, #128]	; (80007c4 <mqtt_connection_cb+0xd0>)
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f007 fa0d 	bl	8007b64 <mqtt_sub_unsub>
 800074a:	4603      	mov	r3, r0
 800074c:	74fb      	strb	r3, [r7, #19]

		if (err != ERR_OK) {
 800074e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d026      	beq.n	80007a4 <mqtt_connection_cb+0xb0>
			sprintf(buffer, "mqtt_subscribe return: %d\n", err);
 8000756:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800075a:	461a      	mov	r2, r3
 800075c:	491a      	ldr	r1, [pc, #104]	; (80007c8 <mqtt_connection_cb+0xd4>)
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000760:	f012 fbde 	bl	8012f20 <siprintf>
			HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 8000764:	4812      	ldr	r0, [pc, #72]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000766:	f7ff fd3d 	bl	80001e4 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000772:	490f      	ldr	r1, [pc, #60]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000774:	480f      	ldr	r0, [pc, #60]	; (80007b4 <mqtt_connection_cb+0xc0>)
 8000776:	f003 fd44 	bl	8004202 <HAL_UART_Transmit>

		/* Its more nice to be connected, so try to reconnect */
		example_do_connect(client);
	}

}
 800077a:	e013      	b.n	80007a4 <mqtt_connection_cb+0xb0>
		sprintf(buffer, "mqtt_connection_cb: Disconnected, reason: %d\n",
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	461a      	mov	r2, r3
 8000780:	4912      	ldr	r1, [pc, #72]	; (80007cc <mqtt_connection_cb+0xd8>)
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000784:	f012 fbcc 	bl	8012f20 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <mqtt_connection_cb+0xbc>)
 800078a:	f7ff fd2b 	bl	80001e4 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	4906      	ldr	r1, [pc, #24]	; (80007b0 <mqtt_connection_cb+0xbc>)
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <mqtt_connection_cb+0xc0>)
 800079a:	f003 fd32 	bl	8004202 <HAL_UART_Transmit>
		example_do_connect(client);
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 f816 	bl	80007d0 <example_do_connect>
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08014338 	.word	0x08014338
 80007b0:	20000690 	.word	0x20000690
 80007b4:	20000e6c 	.word	0x20000e6c
 80007b8:	08000611 	.word	0x08000611
 80007bc:	08000599 	.word	0x08000599
 80007c0:	080006b1 	.word	0x080006b1
 80007c4:	08014294 	.word	0x08014294
 80007c8:	08014364 	.word	0x08014364
 80007cc:	08014380 	.word	0x08014380

080007d0 <example_do_connect>:

void example_do_connect(mqtt_client_t *client, const char *topic) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	; 0x38
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	struct mqtt_connect_client_info_t ci;
	err_t err;

	/* Setup an empty client info structure */
	memset(&ci, 0, sizeof(ci));
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	221c      	movs	r2, #28
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f012 fb3c 	bl	8012e60 <memset>

	/* Minimal amount of information required is client identifier, so set it here */
	ci.client_id = "stm32";
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <example_do_connect+0x88>)
 80007ea:	613b      	str	r3, [r7, #16]
	/* Initiate client and connect to server, if this fails immediately an error code is returned
	 otherwise mqtt_connection_cb will be called with connection result after attempting
	 to establish a connection with the server.
	 For now MQTT version 3.1.1 is always used */
	ip_addr_t mqttServerIP;
	IP4_ADDR(&mqttServerIP, 192, 168, 18, 100);
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <example_do_connect+0x8c>)
 80007ee:	60fb      	str	r3, [r7, #12]
//  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, 0, &ci);
	err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT,mqtt_connection_cb, topic, &ci);
 80007f0:	f107 010c 	add.w	r1, r7, #12
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	9300      	str	r3, [sp, #0]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <example_do_connect+0x90>)
 8000800:	f240 725b 	movw	r2, #1883	; 0x75b
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f007 fab1 	bl	8007d6c <mqtt_client_connect>
 800080a:	4603      	mov	r3, r0
 800080c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* For now just print the result code if connection is ON. */
	if (err == ERR_ISCONN)
 8000810:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000814:	f113 0f0a 	cmn.w	r3, #10
 8000818:	d01a      	beq.n	8000850 <example_do_connect+0x80>
	{
		//sprintf(buffer, "MQTT connection already established. %d\n\r", err);
		//HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
	} else if ((err != ERR_OK) && (err != ERR_ISCONN))
 800081a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800081e:	2b00      	cmp	r3, #0
 8000820:	d016      	beq.n	8000850 <example_do_connect+0x80>
 8000822:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000826:	f113 0f0a 	cmn.w	r3, #10
 800082a:	d011      	beq.n	8000850 <example_do_connect+0x80>
	{/* For now just print the result code if something goes wrong */
		sprintf(buffer, "mqtt_connect return %d\n\r", err);
 800082c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000830:	461a      	mov	r2, r3
 8000832:	490c      	ldr	r1, [pc, #48]	; (8000864 <example_do_connect+0x94>)
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <example_do_connect+0x98>)
 8000836:	f012 fb73 	bl	8012f20 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 800083a:	480b      	ldr	r0, [pc, #44]	; (8000868 <example_do_connect+0x98>)
 800083c:	f7ff fcd2 	bl	80001e4 <strlen>
 8000840:	4603      	mov	r3, r0
 8000842:	b29a      	uxth	r2, r3
 8000844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000848:	4907      	ldr	r1, [pc, #28]	; (8000868 <example_do_connect+0x98>)
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <example_do_connect+0x9c>)
 800084c:	f003 fcd9 	bl	8004202 <HAL_UART_Transmit>
	} else {

	}
}
 8000850:	bf00      	nop
 8000852:	3730      	adds	r7, #48	; 0x30
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	080143b0 	.word	0x080143b0
 800085c:	6412a8c0 	.word	0x6412a8c0
 8000860:	080006f5 	.word	0x080006f5
 8000864:	080143b8 	.word	0x080143b8
 8000868:	20000690 	.word	0x20000690
 800086c:	20000e6c 	.word	0x20000e6c

08000870 <mqtt_pub_request_cb>:

/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
	if (result != ERR_OK) {
 800087c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d011      	beq.n	80008a8 <mqtt_pub_request_cb+0x38>
		sprintf(buffer, "Publish result: %d\n", result);
 8000884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000888:	461a      	mov	r2, r3
 800088a:	4909      	ldr	r1, [pc, #36]	; (80008b0 <mqtt_pub_request_cb+0x40>)
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <mqtt_pub_request_cb+0x44>)
 800088e:	f012 fb47 	bl	8012f20 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 8000892:	4808      	ldr	r0, [pc, #32]	; (80008b4 <mqtt_pub_request_cb+0x44>)
 8000894:	f7ff fca6 	bl	80001e4 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <mqtt_pub_request_cb+0x44>)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <mqtt_pub_request_cb+0x48>)
 80008a4:	f003 fcad 	bl	8004202 <HAL_UART_Transmit>
	}
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	080143d4 	.word	0x080143d4
 80008b4:	20000690 	.word	0x20000690
 80008b8:	20000e6c 	.word	0x20000e6c

080008bc <example_publish>:
void example_publish(mqtt_client_t *client, void *arg) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af04      	add	r7, sp, #16
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	//const char *pub_payload= "Hola mundo de mierda!";
	const char *pub_payload = arg;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	60fb      	str	r3, [r7, #12]
	err_t err;
	u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
 80008ca:	2300      	movs	r3, #0
 80008cc:	72fb      	strb	r3, [r7, #11]
	u8_t retain = 0; /* No don't retain such crappy payload... */
 80008ce:	2300      	movs	r3, #0
 80008d0:	72bb      	strb	r3, [r7, #10]
	err = mqtt_publish(client, "hello_world", pub_payload, strlen(pub_payload),
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff fc86 	bl	80001e4 <strlen>
 80008d8:	4603      	mov	r3, r0
 80008da:	b29a      	uxth	r2, r3
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	9303      	str	r3, [sp, #12]
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <example_publish+0x74>)
 80008e2:	9302      	str	r3, [sp, #8]
 80008e4:	7abb      	ldrb	r3, [r7, #10]
 80008e6:	9301      	str	r3, [sp, #4]
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4613      	mov	r3, r2
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	4910      	ldr	r1, [pc, #64]	; (8000934 <example_publish+0x78>)
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f007 f862 	bl	80079bc <mqtt_publish>
 80008f8:	4603      	mov	r3, r0
 80008fa:	727b      	strb	r3, [r7, #9]
			qos, retain, mqtt_pub_request_cb, arg);
	if (err != ERR_OK) {
 80008fc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d011      	beq.n	8000928 <example_publish+0x6c>
		sprintf(buffer, "Publish err: %d\n\r", err);
 8000904:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000908:	461a      	mov	r2, r3
 800090a:	490b      	ldr	r1, [pc, #44]	; (8000938 <example_publish+0x7c>)
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <example_publish+0x80>)
 800090e:	f012 fb07 	bl	8012f20 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), 1000);
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <example_publish+0x80>)
 8000914:	f7ff fc66 	bl	80001e4 <strlen>
 8000918:	4603      	mov	r3, r0
 800091a:	b29a      	uxth	r2, r3
 800091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000920:	4906      	ldr	r1, [pc, #24]	; (800093c <example_publish+0x80>)
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <example_publish+0x84>)
 8000924:	f003 fc6d 	bl	8004202 <HAL_UART_Transmit>
	}
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08000871 	.word	0x08000871
 8000934:	08014294 	.word	0x08014294
 8000938:	080143e8 	.word	0x080143e8
 800093c:	20000690 	.word	0x20000690
 8000940:	20000e6c 	.word	0x20000e6c

08000944 <LedCGIhandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//turning the LED lights off
// the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]
	uint32_t i = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
	if (iIndex == 0) {
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d127      	bne.n	80009ac <LedCGIhandler+0x68>
		//turning the White_Pin lights off
		HAL_GPIO_WritePin(White_GPIO_Port, White_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2104      	movs	r1, #4
 8000960:	4854      	ldr	r0, [pc, #336]	; (8000ab4 <LedCGIhandler+0x170>)
 8000962:	f002 faa5 	bl	8002eb0 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD1 LED on the board is not ON
		LD1ON = false; //Когда Led is off LD1ON = false!
 8000966:	4b54      	ldr	r3, [pc, #336]	; (8000ab8 <LedCGIhandler+0x174>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	4850      	ldr	r0, [pc, #320]	; (8000ab4 <LedCGIhandler+0x170>)
 8000972:	f002 fa9d 	bl	8002eb0 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD2ON = false; //Когда Led is off LD1ON = false!
 8000976:	4b51      	ldr	r3, [pc, #324]	; (8000abc <LedCGIhandler+0x178>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2110      	movs	r1, #16
 8000980:	484c      	ldr	r0, [pc, #304]	; (8000ab4 <LedCGIhandler+0x170>)
 8000982:	f002 fa95 	bl	8002eb0 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD3 LED on the board is not ON
		LD3ON = false; //Когда Led is off LD1ON = false!
 8000986:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <LedCGIhandler+0x17c>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	2108      	movs	r1, #8
 8000990:	4848      	ldr	r0, [pc, #288]	; (8000ab4 <LedCGIhandler+0x170>)
 8000992:	f002 fa8d 	bl	8002eb0 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD4ON = false; //Когда Led is off LD1ON = false!
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <LedCGIhandler+0x180>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Yellow_GPIO_Port, Yellow_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2102      	movs	r1, #2
 80009a0:	4844      	ldr	r0, [pc, #272]	; (8000ab4 <LedCGIhandler+0x170>)
 80009a2:	f002 fa85 	bl	8002eb0 <HAL_GPIO_WritePin>
		// we put this variable to false to indicate that the LD2 LED on the board is not ON
		LD5ON = false; //Когда Led is off LD1ON = false!
 80009a6:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <LedCGIhandler+0x184>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < iNumParams; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e076      	b.n	8000aa0 <LedCGIhandler+0x15c>
		if (strcmp(pcParam[i], "led") == 0) {
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4943      	ldr	r1, [pc, #268]	; (8000acc <LedCGIhandler+0x188>)
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc06 	bl	80001d0 <strcmp>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d167      	bne.n	8000a9a <LedCGIhandler+0x156>
			if (strcmp(pcValue[i], "1") == 0) {
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	493e      	ldr	r1, [pc, #248]	; (8000ad0 <LedCGIhandler+0x18c>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fbfa 	bl	80001d0 <strcmp>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d108      	bne.n	80009f4 <LedCGIhandler+0xb0>
				HAL_GPIO_WritePin(White_GPIO_Port, White_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2104      	movs	r1, #4
 80009e6:	4833      	ldr	r0, [pc, #204]	; (8000ab4 <LedCGIhandler+0x170>)
 80009e8:	f002 fa62 	bl	8002eb0 <HAL_GPIO_WritePin>
				// LD3 LED (red) on the board is ON!
				LD1ON = true; //Когда Led is ON LD1ON = true!
 80009ec:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <LedCGIhandler+0x174>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e052      	b.n	8000a9a <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "2") == 0) {
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4935      	ldr	r1, [pc, #212]	; (8000ad4 <LedCGIhandler+0x190>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fbe5 	bl	80001d0 <strcmp>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d108      	bne.n	8000a1e <LedCGIhandler+0xda>
				HAL_GPIO_WritePin(Green_GPIO_Port, Green_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <LedCGIhandler+0x170>)
 8000a12:	f002 fa4d 	bl	8002eb0 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD2ON = true; //Когда Led is ON LD1ON = true!
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <LedCGIhandler+0x178>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e03d      	b.n	8000a9a <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "3") == 0) {
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	683a      	ldr	r2, [r7, #0]
 8000a24:	4413      	add	r3, r2
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	492b      	ldr	r1, [pc, #172]	; (8000ad8 <LedCGIhandler+0x194>)
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fbd0 	bl	80001d0 <strcmp>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d108      	bne.n	8000a48 <LedCGIhandler+0x104>
				HAL_GPIO_WritePin(Blue_GPIO_Port, Blue_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2110      	movs	r1, #16
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <LedCGIhandler+0x170>)
 8000a3c:	f002 fa38 	bl	8002eb0 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD3ON = true; //Когда Led is ON LD1ON = true!
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <LedCGIhandler+0x17c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
 8000a46:	e028      	b.n	8000a9a <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "4") == 0) {
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4922      	ldr	r1, [pc, #136]	; (8000adc <LedCGIhandler+0x198>)
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fbbb 	bl	80001d0 <strcmp>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d108      	bne.n	8000a72 <LedCGIhandler+0x12e>
				HAL_GPIO_WritePin(Red_GPIO_Port, Red_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2108      	movs	r1, #8
 8000a64:	4813      	ldr	r0, [pc, #76]	; (8000ab4 <LedCGIhandler+0x170>)
 8000a66:	f002 fa23 	bl	8002eb0 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD4ON = true; //Когда Led is ON LD1ON = true!
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <LedCGIhandler+0x180>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e013      	b.n	8000a9a <LedCGIhandler+0x156>
			} else if (strcmp(pcValue[i], "5") == 0) {
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4918      	ldr	r1, [pc, #96]	; (8000ae0 <LedCGIhandler+0x19c>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fba6 	bl	80001d0 <strcmp>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d107      	bne.n	8000a9a <LedCGIhandler+0x156>
				HAL_GPIO_WritePin(Yellow_GPIO_Port, Yellow_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <LedCGIhandler+0x170>)
 8000a90:	f002 fa0e 	bl	8002eb0 <HAL_GPIO_WritePin>
				// LD2 LED (blue) on the board is ON!
				LD5ON = true; //Когда Led is ON LD1ON = true!
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <LedCGIhandler+0x184>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < iNumParams; i++) {
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d384      	bcc.n	80009b2 <LedCGIhandler+0x6e>
			}
		}
	}
	// the extension .shtml for SSI to work
	//return "/index.shtml"; // Было но, Антон переделал!
	return "/redirect.html";
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <LedCGIhandler+0x1a0>)

} // END [= CGI #5 =]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000001 	.word	0x20000001
 8000ac0:	20000002 	.word	0x20000002
 8000ac4:	20000003 	.word	0x20000003
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	08014430 	.word	0x08014430
 8000ad0:	08014434 	.word	0x08014434
 8000ad4:	08014438 	.word	0x08014438
 8000ad8:	0801443c 	.word	0x0801443c
 8000adc:	08014440 	.word	0x08014440
 8000ae0:	08014444 	.word	0x08014444
 8000ae4:	08014448 	.word	0x08014448

08000ae8 <myCGIinit>:

// function to initialize CGI [= CGI #6 =]
void myCGIinit(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	theCGItable[0] = LedCGI;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <myCGIinit+0x1c>)
 8000aee:	4a06      	ldr	r2, [pc, #24]	; (8000b08 <myCGIinit+0x20>)
 8000af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af4:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	http_set_cgi_handlers(theCGItable, 1);
 8000af8:	2101      	movs	r1, #1
 8000afa:	4802      	ldr	r0, [pc, #8]	; (8000b04 <myCGIinit+0x1c>)
 8000afc:	f005 fe6a 	bl	80067d4 <http_set_cgi_handlers>
} // END [= CGI #6 =]
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000a7c 	.word	0x20000a7c
 8000b08:	08017b60 	.word	0x08017b60

08000b0c <mySSIHandler>:

// the actual function for SSI [* SSI #4 *] Прописыаем галочку в боксе!
u16_t mySSIHandler(int iIndex, char *pcInsert, int iInsertLen) {
 8000b0c:	b5b0      	push	{r4, r5, r7, lr}
 8000b0e:	b092      	sub	sp, #72	; 0x48
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	if (iIndex == 0) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d142      	bne.n	8000ba4 <mySSIHandler+0x98>
		if (LD1ON == false) {
 8000b1e:	4baf      	ldr	r3, [pc, #700]	; (8000ddc <mySSIHandler+0x2d0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f083 0301 	eor.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d019      	beq.n	8000b60 <mySSIHandler+0x54>
			char myStr1[] = "<input value=\"1\" name=\"led\" type=\"checkbox\">";
 8000b2c:	4bac      	ldr	r3, [pc, #688]	; (8000de0 <mySSIHandler+0x2d4>)
 8000b2e:	f107 0410 	add.w	r4, r7, #16
 8000b32:	461d      	mov	r5, r3
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b40:	c407      	stmia	r4!, {r0, r1, r2}
 8000b42:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr1);
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4619      	mov	r1, r3
 8000b4a:	68b8      	ldr	r0, [r7, #8]
 8000b4c:	f012 fa15 	bl	8012f7a <strcpy>
			return strlen(myStr1);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb45 	bl	80001e4 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	e138      	b.n	8000dd2 <mySSIHandler+0x2c6>
		} else if (LD1ON == true) {
 8000b60:	4b9e      	ldr	r3, [pc, #632]	; (8000ddc <mySSIHandler+0x2d0>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f000 8133 	beq.w	8000dd0 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr1[] =
 8000b6a:	4b9e      	ldr	r3, [pc, #632]	; (8000de4 <mySSIHandler+0x2d8>)
 8000b6c:	f107 0410 	add.w	r4, r7, #16
 8000b70:	461d      	mov	r5, r3
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b82:	6020      	str	r0, [r4, #0]
 8000b84:	3404      	adds	r4, #4
 8000b86:	7021      	strb	r1, [r4, #0]
					"<input value=\"1\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr1);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	68b8      	ldr	r0, [r7, #8]
 8000b90:	f012 f9f3 	bl	8012f7a <strcpy>
			return strlen(myStr1);
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb23 	bl	80001e4 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	e116      	b.n	8000dd2 <mySSIHandler+0x2c6>
		}
	} else if (iIndex == 1) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d142      	bne.n	8000c30 <mySSIHandler+0x124>
		if (LD2ON == false) {
 8000baa:	4b8f      	ldr	r3, [pc, #572]	; (8000de8 <mySSIHandler+0x2dc>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d019      	beq.n	8000bec <mySSIHandler+0xe0>
			char myStr2[] = "<input value=\"2\" name=\"led\" type=\"checkbox\">";
 8000bb8:	4b8c      	ldr	r3, [pc, #560]	; (8000dec <mySSIHandler+0x2e0>)
 8000bba:	f107 0410 	add.w	r4, r7, #16
 8000bbe:	461d      	mov	r5, r3
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000bce:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr2);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f012 f9cf 	bl	8012f7a <strcpy>
			return strlen(myStr2);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff faff 	bl	80001e4 <strlen>
 8000be6:	4603      	mov	r3, r0
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	e0f2      	b.n	8000dd2 <mySSIHandler+0x2c6>
		} else if (LD2ON == true) {
 8000bec:	4b7e      	ldr	r3, [pc, #504]	; (8000de8 <mySSIHandler+0x2dc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	f000 80ed 	beq.w	8000dd0 <mySSIHandler+0x2c4>
			// since the LD2 blue LED on the board is ON we make its checkbox checked!
			char myStr2[] =
 8000bf6:	4b7e      	ldr	r3, [pc, #504]	; (8000df0 <mySSIHandler+0x2e4>)
 8000bf8:	f107 0410 	add.w	r4, r7, #16
 8000bfc:	461d      	mov	r5, r3
 8000bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c0e:	6020      	str	r0, [r4, #0]
 8000c10:	3404      	adds	r4, #4
 8000c12:	7021      	strb	r1, [r4, #0]
					"<input value=\"2\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr2);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f012 f9ad 	bl	8012f7a <strcpy>
			return strlen(myStr2);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fadd 	bl	80001e4 <strlen>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	e0d0      	b.n	8000dd2 <mySSIHandler+0x2c6>
		}
	} else if (iIndex == 2) {
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d142      	bne.n	8000cbc <mySSIHandler+0x1b0>
		if (LD3ON == false) {
 8000c36:	4b6f      	ldr	r3, [pc, #444]	; (8000df4 <mySSIHandler+0x2e8>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d019      	beq.n	8000c78 <mySSIHandler+0x16c>
			char myStr3[] = "<input value=\"3\" name=\"led\" type=\"checkbox\">";
 8000c44:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <mySSIHandler+0x2ec>)
 8000c46:	f107 0410 	add.w	r4, r7, #16
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr3);
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4619      	mov	r1, r3
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f012 f989 	bl	8012f7a <strcpy>
			return strlen(myStr3);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fab9 	bl	80001e4 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	e0ac      	b.n	8000dd2 <mySSIHandler+0x2c6>
		} else if (LD3ON == true) {
 8000c78:	4b5e      	ldr	r3, [pc, #376]	; (8000df4 <mySSIHandler+0x2e8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 80a7 	beq.w	8000dd0 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr3[] =
 8000c82:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <mySSIHandler+0x2f0>)
 8000c84:	f107 0410 	add.w	r4, r7, #16
 8000c88:	461d      	mov	r5, r3
 8000c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c9a:	6020      	str	r0, [r4, #0]
 8000c9c:	3404      	adds	r4, #4
 8000c9e:	7021      	strb	r1, [r4, #0]
					"<input value=\"3\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr3);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	68b8      	ldr	r0, [r7, #8]
 8000ca8:	f012 f967 	bl	8012f7a <strcpy>
			return strlen(myStr3);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa97 	bl	80001e4 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	e08a      	b.n	8000dd2 <mySSIHandler+0x2c6>
		}
	} else if (iIndex == 3) {
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d141      	bne.n	8000d46 <mySSIHandler+0x23a>
		if (LD4ON == false) {
 8000cc2:	4b4f      	ldr	r3, [pc, #316]	; (8000e00 <mySSIHandler+0x2f4>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d019      	beq.n	8000d04 <mySSIHandler+0x1f8>
			char myStr4[] = "<input value=\"4\" name=\"led\" type=\"checkbox\">";
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	; (8000e04 <mySSIHandler+0x2f8>)
 8000cd2:	f107 0410 	add.w	r4, r7, #16
 8000cd6:	461d      	mov	r5, r3
 8000cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ce4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ce6:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr4);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	68b8      	ldr	r0, [r7, #8]
 8000cf0:	f012 f943 	bl	8012f7a <strcpy>
			return strlen(myStr4);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fa73 	bl	80001e4 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	e066      	b.n	8000dd2 <mySSIHandler+0x2c6>
		} else if (LD4ON == true) {
 8000d04:	4b3e      	ldr	r3, [pc, #248]	; (8000e00 <mySSIHandler+0x2f4>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d061      	beq.n	8000dd0 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr4[] =
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <mySSIHandler+0x2fc>)
 8000d0e:	f107 0410 	add.w	r4, r7, #16
 8000d12:	461d      	mov	r5, r3
 8000d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d24:	6020      	str	r0, [r4, #0]
 8000d26:	3404      	adds	r4, #4
 8000d28:	7021      	strb	r1, [r4, #0]
					"<input value=\"4\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr4);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f012 f922 	bl	8012f7a <strcpy>
			return strlen(myStr4);
 8000d36:	f107 0310 	add.w	r3, r7, #16
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fa52 	bl	80001e4 <strlen>
 8000d40:	4603      	mov	r3, r0
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	e045      	b.n	8000dd2 <mySSIHandler+0x2c6>
		}
	} else if (iIndex == 4) {
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	2b04      	cmp	r3, #4
 8000d4a:	d141      	bne.n	8000dd0 <mySSIHandler+0x2c4>
		if (LD5ON == false) {
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <mySSIHandler+0x300>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d019      	beq.n	8000d8e <mySSIHandler+0x282>
			char myStr5[] = "<input value=\"5\" name=\"led\" type=\"checkbox\">";
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <mySSIHandler+0x304>)
 8000d5c:	f107 0410 	add.w	r4, r7, #16
 8000d60:	461d      	mov	r5, r3
 8000d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000d6e:	c407      	stmia	r4!, {r0, r1, r2}
 8000d70:	7023      	strb	r3, [r4, #0]
			strcpy(pcInsert, myStr5);
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4619      	mov	r1, r3
 8000d78:	68b8      	ldr	r0, [r7, #8]
 8000d7a:	f012 f8fe 	bl	8012f7a <strcpy>
			return strlen(myStr5);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa2e 	bl	80001e4 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	e021      	b.n	8000dd2 <mySSIHandler+0x2c6>
		} else if (LD5ON == true) {
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <mySSIHandler+0x300>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d01c      	beq.n	8000dd0 <mySSIHandler+0x2c4>
			// since the LD3 red LED on the board is ON we make its checkbox checked!
			char myStr5[] =
 8000d96:	4b1f      	ldr	r3, [pc, #124]	; (8000e14 <mySSIHandler+0x308>)
 8000d98:	f107 0410 	add.w	r4, r7, #16
 8000d9c:	461d      	mov	r5, r3
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dae:	6020      	str	r0, [r4, #0]
 8000db0:	3404      	adds	r4, #4
 8000db2:	7021      	strb	r1, [r4, #0]
					"<input value=\"5\" name=\"led\" type=\"checkbox\" checked>";
			strcpy(pcInsert, myStr5);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	68b8      	ldr	r0, [r7, #8]
 8000dbc:	f012 f8dd 	bl	8012f7a <strcpy>
			return strlen(myStr5);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa0d 	bl	80001e4 <strlen>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	e000      	b.n	8000dd2 <mySSIHandler+0x2c6>
		}
	}
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3748      	adds	r7, #72	; 0x48
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	08014458 	.word	0x08014458
 8000de4:	08014488 	.word	0x08014488
 8000de8:	20000001 	.word	0x20000001
 8000dec:	080144c0 	.word	0x080144c0
 8000df0:	080144f0 	.word	0x080144f0
 8000df4:	20000002 	.word	0x20000002
 8000df8:	08014528 	.word	0x08014528
 8000dfc:	08014558 	.word	0x08014558
 8000e00:	20000003 	.word	0x20000003
 8000e04:	08014590 	.word	0x08014590
 8000e08:	080145c0 	.word	0x080145c0
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	080145f8 	.word	0x080145f8
 8000e14:	08014628 	.word	0x08014628

08000e18 <mySSIinit>:
// function to initialize SSI [* SSI #5 *]
void mySSIinit(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	http_set_ssi_handler(mySSIHandler, (char const**) theSSItags,
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	4903      	ldr	r1, [pc, #12]	; (8000e2c <mySSIinit+0x14>)
 8000e20:	4803      	ldr	r0, [pc, #12]	; (8000e30 <mySSIinit+0x18>)
 8000e22:	f005 fc95 	bl	8006750 <http_set_ssi_handler>
	numSSItags);
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	08000b0d 	.word	0x08000b0d

08000e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e38:	f000 fc30 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3c:	f000 f838 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e40:	f000 f918 	bl	8001074 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e44:	f000 f89e 	bl	8000f84 <MX_TIM2_Init>
  MX_UART4_Init();
 8000e48:	f000 f8ea 	bl	8001020 <MX_UART4_Init>
  MX_LWIP_Init();
 8000e4c:	f003 fca2 	bl	8004794 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init(); // initializing the HTTPd
 8000e50:	f005 fc5e 	bl	8006710 <httpd_init>
  	myCGIinit(); // initializing CGI  [= CGI #7 =]
 8000e54:	f7ff fe48 	bl	8000ae8 <myCGIinit>
  	mySSIinit(); // initializing SSI [* SSI #6 *]
 8000e58:	f7ff ffde 	bl	8000e18 <mySSIinit>

  	HAL_TIM_Base_Start_IT(&htim2);
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <main+0x68>)
 8000e5e:	f002 fd51 	bl	8003904 <HAL_TIM_Base_Start_IT>
  	/*------------------------------------MQTT---------------------------------------------*/
  	client = mqtt_client_new();
 8000e62:	f006 ff79 	bl	8007d58 <mqtt_client_new>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <main+0x6c>)
 8000e6a:	6013      	str	r3, [r2, #0]

  	if (client != NULL) {
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <main+0x6c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00f      	beq.n	8000e94 <main+0x60>
  		sprintf(pacote, "Hi, Zerg! MQTT on STM32 working!"); // Сообщение!
 8000e74:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <main+0x70>)
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <main+0x74>)
 8000e78:	f012 f852 	bl	8012f20 <siprintf>
  		example_do_connect(client, "helo_world"); // Топик
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <main+0x6c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	490a      	ldr	r1, [pc, #40]	; (8000eac <main+0x78>)
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fca4 	bl	80007d0 <example_do_connect>
  		example_publish(client, pacote); // Публикуем сообщение.
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <main+0x6c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4906      	ldr	r1, [pc, #24]	; (8000ea8 <main+0x74>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fd14 	bl	80008bc <example_publish>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process(); // starting the LWIP process
 8000e94:	f003 fdb0 	bl	80049f8 <MX_LWIP_Process>
 8000e98:	e7fc      	b.n	8000e94 <main+0x60>
 8000e9a:	bf00      	nop
 8000e9c:	20000eb0 	.word	0x20000eb0
 8000ea0:	20000a78 	.word	0x20000a78
 8000ea4:	08014660 	.word	0x08014660
 8000ea8:	20000a84 	.word	0x20000a84
 8000eac:	08014684 	.word	0x08014684

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f011 ffce 	bl	8012e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <SystemClock_Config+0xd0>)
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <SystemClock_Config+0xd0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f24:	23a8      	movs	r3, #168	; 0xa8
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 ffef 	bl	8002f18 <HAL_RCC_OscConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f40:	f000 f950 	bl	80011e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f44:	230f      	movs	r3, #15
 8000f46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2105      	movs	r1, #5
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fa50 	bl	8003408 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f6e:	f000 f939 	bl	80011e4 <Error_Handler>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3750      	adds	r7, #80	; 0x50
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <MX_TIM2_Init+0x98>)
 8000fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_TIM2_Init+0x98>)
 8000faa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_TIM2_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_TIM2_Init+0x98>)
 8000fb8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_TIM2_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_TIM2_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_TIM2_Init+0x98>)
 8000fcc:	f002 fc4a 	bl	8003864 <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fd6:	f000 f905 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_TIM2_Init+0x98>)
 8000fe8:	f002 fe04 	bl	8003bf4 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ff2:	f000 f8f7 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	; (800101c <MX_TIM2_Init+0x98>)
 8001004:	f003 f820 	bl	8004048 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800100e:	f000 f8e9 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000eb0 	.word	0x20000eb0

08001020 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_UART4_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_UART4_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_UART4_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_UART4_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_UART4_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_UART4_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_UART4_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_UART4_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_UART4_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_UART4_Init+0x4c>)
 8001058:	f003 f886 	bl	8004168 <HAL_UART_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001062:	f000 f8bf 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000e6c 	.word	0x20000e6c
 8001070:	40004c00 	.word	0x40004c00

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_GPIO_Init+0xd0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a2c      	ldr	r2, [pc, #176]	; (8001144 <MX_GPIO_Init+0xd0>)
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_GPIO_Init+0xd0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a17      	ldr	r2, [pc, #92]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_GPIO_Init+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <MX_GPIO_Init+0xd0>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_GPIO_Init+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_Pin|Yellow_Pin|White_Pin|Red_Pin
 8001116:	2200      	movs	r2, #0
 8001118:	211f      	movs	r1, #31
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <MX_GPIO_Init+0xd4>)
 800111c:	f001 fec8 	bl	8002eb0 <HAL_GPIO_WritePin>
                          |Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Green_Pin Yellow_Pin White_Pin Red_Pin
                           Blue_Pin */
  GPIO_InitStruct.Pin = Green_Pin|Yellow_Pin|White_Pin|Red_Pin
 8001120:	231f      	movs	r3, #31
 8001122:	617b      	str	r3, [r7, #20]
                          |Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001128:	2302      	movs	r3, #2
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_GPIO_Init+0xd4>)
 8001138:	f001 fd1e 	bl	8002b78 <HAL_GPIO_Init>

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40020c00 	.word	0x40020c00

0800114c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800115e:	f000 fabf 	bl	80016e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2) {
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800116a:	d127      	bne.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x70>
		cont++;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001174:	6013      	str	r3, [r2, #0]
		if (cont > 3) { // Once in 3 sec.
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d91e      	bls.n	80011bc <HAL_TIM_PeriodElapsedCallback+0x70>
			blink++;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001186:	6013      	str	r3, [r2, #0]
			sprintf(pacote, "we blink green led %d times", (int) blink); // Сообщение
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4910      	ldr	r1, [pc, #64]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001192:	f011 fec5 	bl	8012f20 <siprintf>
			cont = 0;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, Blue_Pin);
 800119c:	2110      	movs	r1, #16
 800119e:	480e      	ldr	r0, [pc, #56]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80011a0:	f001 fe9f 	bl	8002ee2 <HAL_GPIO_TogglePin>

			example_do_connect(client, "hello_world"); // Где 'hello_world' - это топик
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	490d      	ldr	r1, [pc, #52]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fb10 	bl	80007d0 <example_do_connect>
			example_publish(client, pacote);
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb80 	bl	80008bc <example_publish>
			//mqtt_disconnect(client);
		}
	}
  /* USER CODE END Callback 1 */
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40002000 	.word	0x40002000
 80011c8:	200000b4 	.word	0x200000b4
 80011cc:	200000b8 	.word	0x200000b8
 80011d0:	08014690 	.word	0x08014690
 80011d4:	20000a84 	.word	0x20000a84
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	20000a78 	.word	0x20000a78
 80011e0:	080146ac 	.word	0x080146ac

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <HAL_MspInit+0x4c>)
 8001200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	; (800123c <HAL_MspInit+0x4c>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001250:	d115      	bne.n	800127e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_TIM_Base_MspInit+0x48>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_TIM_Base_MspInit+0x48>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_TIM_Base_MspInit+0x48>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	201c      	movs	r0, #28
 8001274:	f000 fb30 	bl	80018d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001278:	201c      	movs	r0, #28
 800127a:	f000 fb49 	bl	8001910 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <HAL_UART_MspInit+0xc0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d14a      	bne.n	8001344 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a26      	ldr	r2, [pc, #152]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a18      	ldr	r2, [pc, #96]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_UART_MspInit+0xc4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001312:	2308      	movs	r3, #8
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <HAL_UART_MspInit+0xc8>)
 800131e:	f001 fc2b 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001334:	2308      	movs	r3, #8
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <HAL_UART_MspInit+0xcc>)
 8001340:	f001 fc1a 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40004c00 	.word	0x40004c00
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000
 8001358:	40020800 	.word	0x40020800

0800135c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	202d      	movs	r0, #45	; 0x2d
 8001372:	f000 fab1 	bl	80018d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001376:	202d      	movs	r0, #45	; 0x2d
 8001378:	f000 faca 	bl	8001910 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_InitTick+0xa4>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <HAL_InitTick+0xa4>)
 8001386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_InitTick+0xa4>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001398:	f107 0210 	add.w	r2, r7, #16
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fa2c 	bl	8003800 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80013a8:	f002 fa02 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_InitTick+0xa8>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	0c9b      	lsrs	r3, r3, #18
 80013bc:	3b01      	subs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_InitTick+0xac>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_InitTick+0xb0>)
 80013c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_InitTick+0xac>)
 80013c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013cc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_InitTick+0xac>)
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_InitTick+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_InitTick+0xac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80013e0:	4809      	ldr	r0, [pc, #36]	; (8001408 <HAL_InitTick+0xac>)
 80013e2:	f002 fa3f 	bl	8003864 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d104      	bne.n	80013f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80013ec:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_InitTick+0xac>)
 80013ee:	f002 fa89 	bl	8003904 <HAL_TIM_Base_Start_IT>
 80013f2:	4603      	mov	r3, r0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	431bde83 	.word	0x431bde83
 8001408:	20000ef8 	.word	0x20000ef8
 800140c:	40002000 	.word	0x40002000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM2_IRQHandler+0x10>)
 800146e:	f002 fab9 	bl	80039e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000eb0 	.word	0x20000eb0

0800147c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001482:	f002 faaf 	bl	80039e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000ef8 	.word	0x20000ef8

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
	return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <_kill+0x20>)
 80014ac:	2216      	movs	r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
	return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200075d8 	.word	0x200075d8

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe5 	bl	80014a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80014d6:	e7fe      	b.n	80014d6 <_exit+0x12>

080014d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
	}

return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e009      	b.n	8001538 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf1      	blt.n	8001524 <_write+0x12>
	}
	return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	605a      	str	r2, [r3, #4]
	return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
	return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d205      	bcs.n	80015f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <_sbrk+0x6c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ee:	e009      	b.n	8001604 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a06      	ldr	r2, [pc, #24]	; (8001618 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20020000 	.word	0x20020000
 8001614:	00000400 	.word	0x00000400
 8001618:	200000bc 	.word	0x200000bc
 800161c:	200075e8 	.word	0x200075e8
 8001620:	200075d8 	.word	0x200075d8

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001672:	f7ff ffd7 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f011 fb99 	bl	8012dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fbdb 	bl	8000e34 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800168c:	0801ac70 	.word	0x0801ac70
  ldr r2, =_sbss
 8001690:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001694:	200075e8 	.word	0x200075e8

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f8fc 	bl	80018c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f7ff fe46 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fd8e 	bl	80011f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000024 	.word	0x20000024
 8001704:	20000f40 	.word	0x20000f40

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000f40 	.word	0x20000f40

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000024 	.word	0x20000024

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff4c 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ea:	f7ff ff61 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 80018ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	6978      	ldr	r0, [r7, #20]
 80018f6:	f7ff ffb1 	bl	800185c <NVIC_EncodePriority>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff80 	bl	8001808 <__NVIC_SetPriority>
}
 8001908:	bf00      	nop
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff54 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800193c:	4baa      	ldr	r3, [pc, #680]	; (8001be8 <HAL_ETH_Init+0x2bc>)
 800193e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e183      	b.n	8001c5a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f003 f852 	bl	8004a10 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	4b9e      	ldr	r3, [pc, #632]	; (8001bec <HAL_ETH_Init+0x2c0>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	4a9d      	ldr	r2, [pc, #628]	; (8001bec <HAL_ETH_Init+0x2c0>)
 8001976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197a:	6453      	str	r3, [r2, #68]	; 0x44
 800197c:	4b9b      	ldr	r3, [pc, #620]	; (8001bec <HAL_ETH_Init+0x2c0>)
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001988:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <HAL_ETH_Init+0x2c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a98      	ldr	r2, [pc, #608]	; (8001bf0 <HAL_ETH_Init+0x2c4>)
 800198e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001992:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001994:	4b96      	ldr	r3, [pc, #600]	; (8001bf0 <HAL_ETH_Init+0x2c4>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4994      	ldr	r1, [pc, #592]	; (8001bf0 <HAL_ETH_Init+0x2c4>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019ba:	f7ff fea5 	bl	8001708 <HAL_GetTick>
 80019be:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019c0:	e011      	b.n	80019e6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80019c2:	f7ff fea1 	bl	8001708 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019d0:	d909      	bls.n	80019e6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2203      	movs	r2, #3
 80019d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e139      	b.n	8001c5a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1e4      	bne.n	80019c2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f023 031c 	bic.w	r3, r3, #28
 8001a06:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001a08:	f001 fec6 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 8001a0c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4a78      	ldr	r2, [pc, #480]	; (8001bf4 <HAL_ETH_Init+0x2c8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d908      	bls.n	8001a28 <HAL_ETH_Init+0xfc>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4a77      	ldr	r2, [pc, #476]	; (8001bf8 <HAL_ETH_Init+0x2cc>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d804      	bhi.n	8001a28 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	e027      	b.n	8001a78 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	4a73      	ldr	r2, [pc, #460]	; (8001bf8 <HAL_ETH_Init+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d908      	bls.n	8001a42 <HAL_ETH_Init+0x116>
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	4a6d      	ldr	r2, [pc, #436]	; (8001be8 <HAL_ETH_Init+0x2bc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d204      	bcs.n	8001a42 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f043 030c 	orr.w	r3, r3, #12
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e01a      	b.n	8001a78 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4a68      	ldr	r2, [pc, #416]	; (8001be8 <HAL_ETH_Init+0x2bc>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d303      	bcc.n	8001a52 <HAL_ETH_Init+0x126>
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4a6b      	ldr	r2, [pc, #428]	; (8001bfc <HAL_ETH_Init+0x2d0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d911      	bls.n	8001a76 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4a69      	ldr	r2, [pc, #420]	; (8001bfc <HAL_ETH_Init+0x2d0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d908      	bls.n	8001a6c <HAL_ETH_Init+0x140>
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4a68      	ldr	r2, [pc, #416]	; (8001c00 <HAL_ETH_Init+0x2d4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d804      	bhi.n	8001a6c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e005      	b.n	8001a78 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	e000      	b.n	8001a78 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a76:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a84:	2100      	movs	r1, #0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fb98 	bl	80021bc <HAL_ETH_WritePHYRegister>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a96:	6939      	ldr	r1, [r7, #16]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fd4d 	bl	8002538 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0d7      	b.n	8001c5a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001aaa:	20ff      	movs	r0, #255	; 0xff
 8001aac:	f7ff fe38 	bl	8001720 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a5 	beq.w	8001c04 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aba:	f7ff fe25 	bl	8001708 <HAL_GetTick>
 8001abe:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fb0f 	bl	80020ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001ace:	f7ff fe1b 	bl	8001708 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d90f      	bls.n	8001b00 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fd26 	bl	8002538 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0ac      	b.n	8001c5a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0da      	beq.n	8001ac0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b0e:	2100      	movs	r1, #0
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fb53 	bl	80021bc <HAL_ETH_WritePHYRegister>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00b      	beq.n	8001b34 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b20:	6939      	ldr	r1, [r7, #16]
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fd08 	bl	8002538 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b30:	2301      	movs	r3, #1
 8001b32:	e092      	b.n	8001c5a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b34:	f7ff fde8 	bl	8001708 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2101      	movs	r1, #1
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fad2 	bl	80020ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b48:	f7ff fdde 	bl	8001708 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d90f      	bls.n	8001b7a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b5e:	6939      	ldr	r1, [r7, #16]
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 fce9 	bl	8002538 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e06f      	b.n	8001c5a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0da      	beq.n	8001b3a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 faad 	bl	80020ec <HAL_ETH_ReadPHYRegister>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00b      	beq.n	8001bb0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 fcca 	bl	8002538 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bac:	2301      	movs	r3, #1
 8001bae:	e054      	b.n	8001c5a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	e002      	b.n	8001bca <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	e035      	b.n	8001c48 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	e030      	b.n	8001c48 <HAL_ETH_Init+0x31c>
 8001be6:	bf00      	nop
 8001be8:	03938700 	.word	0x03938700
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40013800 	.word	0x40013800
 8001bf4:	01312cff 	.word	0x01312cff
 8001bf8:	02160ebf 	.word	0x02160ebf
 8001bfc:	05f5e0ff 	.word	0x05f5e0ff
 8001c00:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 facd 	bl	80021bc <HAL_ETH_WritePHYRegister>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c2c:	6939      	ldr	r1, [r7, #16]
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fc82 	bl	8002538 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e00c      	b.n	8001c5a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c40:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c44:	f7ff fd6c 	bl	8001720 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c48:	6939      	ldr	r1, [r7, #16]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fc74 	bl	8002538 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop

08001c64 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_ETH_DMATxDescListInit+0x20>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e052      	b.n	8001d2a <HAL_ETH_DMATxDescListInit+0xc6>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e030      	b.n	8001d02 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	015b      	lsls	r3, r3, #5
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cb0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d208      	bcs.n	8001cf6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	015b      	lsls	r3, r3, #5
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	e002      	b.n	8001cfc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3ca      	bcc.n	8001ca0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d14:	3310      	adds	r3, #16
 8001d16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	371c      	adds	r7, #28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b087      	sub	sp, #28
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_ETH_DMARxDescListInit+0x20>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e056      	b.n	8001e04 <HAL_ETH_DMARxDescListInit+0xce>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e034      	b.n	8001ddc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	015b      	lsls	r3, r3, #5
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	4413      	add	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d82:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d8a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d208      	bcs.n	8001dd0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	015b      	lsls	r3, r3, #5
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	e002      	b.n	8001dd6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3c6      	bcc.n	8001d72 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	330c      	adds	r3, #12
 8001df0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_ETH_TransmitFrame+0x24>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0cd      	b.n	8001fd0 <HAL_ETH_TransmitFrame+0x1c0>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0b8      	b.n	8001fd0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da09      	bge.n	8001e7c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2212      	movs	r2, #18
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0a9      	b.n	8001fd0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d915      	bls.n	8001eb2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_ETH_TransmitFrame+0x1cc>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a9b      	lsrs	r3, r3, #10
 8001e90:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_ETH_TransmitFrame+0x1cc>)
 8001e96:	fba3 1302 	umull	r1, r3, r3, r2
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ea0:	fb01 f303 	mul.w	r3, r1, r3
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e001      	b.n	8001eb6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d11c      	bne.n	8001ef6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001eca:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ed6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ee6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ef4:	e04b      	b.n	8001f8e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e044      	b.n	8001f86 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f0a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d107      	bne.n	8001f22 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f20:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f2a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d116      	bne.n	8001f64 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f44:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <HAL_ETH_TransmitFrame+0x1d0>)
 8001f4a:	fb02 f203 	mul.w	r2, r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001f56:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f62:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f72:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	3301      	adds	r3, #1
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3b6      	bcc.n	8001efc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	3314      	adds	r3, #20
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00d      	beq.n	8001fbe <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	3314      	adds	r3, #20
 8001fac:	2204      	movs	r2, #4
 8001fae:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb8:	3304      	adds	r3, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	ac02b00b 	.word	0xac02b00b
 8001fe0:	fffffa0c 	.word	0xfffffa0c

08001fe4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ETH_GetReceivedFrame+0x1a>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e070      	b.n	80020e0 <HAL_ETH_GetReceivedFrame+0xfc>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2202      	movs	r2, #2
 800200a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db5a      	blt.n	80020ce <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d030      	beq.n	8002088 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002034:	2b01      	cmp	r3, #1
 8002036:	d103      	bne.n	8002040 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0c1b      	lsrs	r3, r3, #16
 8002050:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002054:	3b04      	subs	r3, #4
 8002056:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e02b      	b.n	80020e0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002092:	2b00      	cmp	r3, #0
 8002094:	d010      	beq.n	80020b8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	461a      	mov	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
 80020b6:	e00a      	b.n	80020ce <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	460b      	mov	r3, r1
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b82      	cmp	r3, #130	; 0x82
 800210c:	d101      	bne.n	8002112 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
 8002110:	e050      	b.n	80021b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2282      	movs	r2, #130	; 0x82
 8002116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 031c 	and.w	r3, r3, #28
 8002128:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8a1b      	ldrh	r3, [r3, #16]
 800212e:	02db      	lsls	r3, r3, #11
 8002130:	b29b      	uxth	r3, r3
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002138:	897b      	ldrh	r3, [r7, #10]
 800213a:	019b      	lsls	r3, r3, #6
 800213c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f023 0302 	bic.w	r3, r3, #2
 800214c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800215e:	f7ff fad3 	bl	8001708 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002164:	e015      	b.n	8002192 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002166:	f7ff facf 	bl	8001708 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002174:	d309      	bcc.n	800218a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e014      	b.n	80021b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e4      	bne.n	8002166 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	460b      	mov	r3, r1
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b42      	cmp	r3, #66	; 0x42
 80021dc:	d101      	bne.n	80021e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80021de:	2302      	movs	r3, #2
 80021e0:	e04e      	b.n	8002280 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2242      	movs	r2, #66	; 0x42
 80021e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 031c 	and.w	r3, r3, #28
 80021f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8a1b      	ldrh	r3, [r3, #16]
 80021fe:	02db      	lsls	r3, r3, #11
 8002200:	b29b      	uxth	r3, r3
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002208:	897b      	ldrh	r3, [r7, #10]
 800220a:	019b      	lsls	r3, r3, #6
 800220c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7ff fa66 	bl	8001708 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800223e:	e015      	b.n	800226c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002240:	f7ff fa62 	bl	8001708 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d309      	bcc.n	8002264 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e00d      	b.n	8002280 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e4      	bne.n	8002240 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_ETH_Start+0x16>
 800229a:	2302      	movs	r3, #2
 800229c:	e01f      	b.n	80022de <HAL_ETH_Start+0x56>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fb44 	bl	800293c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 fb7b 	bl	80029b0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fc12 	bl	8002ae4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 fbaf 	bl	8002a24 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fbdc 	bl	8002a84 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_ETH_Stop+0x16>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e01f      	b.n	800233c <HAL_ETH_Stop+0x56>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 fba1 	bl	8002a54 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fbce 	bl	8002ab4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fb66 	bl	80029ea <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fbe0 	bl	8002ae4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fb26 	bl	8002976 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ETH_ConfigMAC+0x1c>
 800235c:	2302      	movs	r3, #2
 800235e:	e0e4      	b.n	800252a <HAL_ETH_ConfigMAC+0x1e6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80b1 	beq.w	80024da <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4b6c      	ldr	r3, [pc, #432]	; (8002534 <HAL_ETH_ConfigMAC+0x1f0>)
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002390:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002396:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800239c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80023a2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80023a8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80023ae:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80023b4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80023ba:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80023c0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80023c6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80023cc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80023d2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ea:	2001      	movs	r0, #1
 80023ec:	f7ff f998 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002400:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002406:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800240c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002412:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002418:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800241e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800242a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800242c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff f972 	bl	8001720 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800244c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002456:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002466:	4013      	ands	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002474:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800247a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002480:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002486:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800248c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7ff f93b 	bl	8001720 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7ff f928 	bl	8001720 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	61da      	str	r2, [r3, #28]
 80024d8:	e01e      	b.n	8002518 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80024e8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800250a:	2001      	movs	r0, #1
 800250c:	f7ff f908 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	ff20810f 	.word	0xff20810f

08002538 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0b0      	sub	sp, #192	; 0xc0
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002554:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800255c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002566:	2300      	movs	r3, #0
 8002568:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800257e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002582:	663b      	str	r3, [r7, #96]	; 0x60
 8002584:	e001      	b.n	800258a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800258a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800258e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002594:	2300      	movs	r3, #0
 8002596:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80025a4:	2340      	movs	r3, #64	; 0x40
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800260c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002610:	4bac      	ldr	r3, [pc, #688]	; (80028c4 <ETH_MACDMAConfig+0x38c>)
 8002612:	4013      	ands	r3, r2
 8002614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002618:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800261a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800261c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800261e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002620:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002624:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800262a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800262c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800262e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002632:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002638:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800263a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800263c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800263e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002640:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002644:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002648:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800264a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800264c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800264e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002660:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800266c:	2001      	movs	r0, #1
 800266e:	f7ff f857 	bl	8001720 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800267a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800267c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800267e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002680:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002684:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800268a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800268c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002690:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002696:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800269c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80026a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80026a8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026aa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff f832 	bl	8001720 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026c4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026ce:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80026d8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80026e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026e8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80026ec:	4013      	ands	r3, r2
 80026ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80026f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80026fc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80026fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002702:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002708:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800270a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800270e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002714:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002716:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002728:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002734:	2001      	movs	r0, #1
 8002736:	f7fe fff3 	bl	8001720 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002742:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002744:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002748:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800275e:	2001      	movs	r0, #1
 8002760:	f7fe ffde 	bl	8001720 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800276c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002776:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800277c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002780:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002792:	2304      	movs	r3, #4
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800279c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027b6:	2300      	movs	r3, #0
 80027b8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c2:	3318      	adds	r3, #24
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <ETH_MACDMAConfig+0x390>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027d6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80027d8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027da:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80027dc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80027de:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80027e0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80027e2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80027e4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80027e6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80027e8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80027ea:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80027ec:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80027ee:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80027f2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80027f6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80027f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280a:	3318      	adds	r3, #24
 800280c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002810:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281a:	3318      	adds	r3, #24
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002822:	2001      	movs	r0, #1
 8002824:	f7fe ff7c 	bl	8001720 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002830:	3318      	adds	r3, #24
 8002832:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002836:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800283c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002840:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002844:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002848:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800284a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800284c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800284e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002852:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800285c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002860:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002870:	2001      	movs	r0, #1
 8002872:	f7fe ff55 	bl	8001720 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002882:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10f      	bne.n	80028ac <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002894:	331c      	adds	r3, #28
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a8:	331c      	adds	r3, #28
 80028aa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	461a      	mov	r2, r3
 80028b2:	2100      	movs	r1, #0
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f809 	bl	80028cc <ETH_MACAddressConfig>
}
 80028ba:	bf00      	nop
 80028bc:	37c0      	adds	r7, #192	; 0xc0
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	ff20810f 	.word	0xff20810f
 80028c8:	f8de3f23 	.word	0xf8de3f23

080028cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3305      	adds	r3, #5
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	3204      	adds	r2, #4
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <ETH_MACAddressConfig+0x68>)
 80028ee:	4413      	add	r3, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3303      	adds	r3, #3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	061a      	lsls	r2, r3, #24
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3302      	adds	r3, #2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3301      	adds	r3, #1
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	4313      	orrs	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <ETH_MACAddressConfig+0x6c>)
 800291e:	4413      	add	r3, r2
 8002920:	461a      	mov	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	6013      	str	r3, [r2, #0]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40028040 	.word	0x40028040
 8002938:	40028044 	.word	0x40028044

0800293c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0208 	orr.w	r2, r2, #8
 8002956:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002960:	2001      	movs	r0, #1
 8002962:	f000 f8e9 	bl	8002b38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0208 	bic.w	r2, r2, #8
 8002990:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800299a:	2001      	movs	r0, #1
 800299c:	f000 f8cc 	bl	8002b38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0204 	orr.w	r2, r2, #4
 80029ca:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f000 f8af 	bl	8002b38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0204 	bic.w	r2, r2, #4
 8002a04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f000 f892 	bl	8002b38 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a34:	3318      	adds	r3, #24
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a44:	3318      	adds	r3, #24
 8002a46:	601a      	str	r2, [r3, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a64:	3318      	adds	r3, #24
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a74:	3318      	adds	r3, #24
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a94:	3318      	adds	r3, #24
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0202 	orr.w	r2, r2, #2
 8002aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0202 	bic.w	r2, r2, #2
 8002ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad4:	3318      	adds	r3, #24
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af8:	3318      	adds	r3, #24
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b08:	3318      	adds	r3, #24
 8002b0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b14:	3318      	adds	r3, #24
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f000 f80c 	bl	8002b38 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	3318      	adds	r3, #24
 8002b2c:	601a      	str	r2, [r3, #0]
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <ETH_Delay+0x38>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <ETH_Delay+0x3c>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a5b      	lsrs	r3, r3, #9
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002b54:	bf00      	nop
  } 
  while (Delay --);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1e5a      	subs	r2, r3, #1
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1f9      	bne.n	8002b54 <ETH_Delay+0x1c>
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	2000001c 	.word	0x2000001c
 8002b74:	10624dd3 	.word	0x10624dd3

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e16b      	b.n	8002e6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 815a 	bne.w	8002e66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80b4 	beq.w	8002e66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <HAL_GPIO_Init+0x30c>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a5f      	ldr	r2, [pc, #380]	; (8002e84 <HAL_GPIO_Init+0x30c>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b5d      	ldr	r3, [pc, #372]	; (8002e84 <HAL_GPIO_Init+0x30c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a5b      	ldr	r2, [pc, #364]	; (8002e88 <HAL_GPIO_Init+0x310>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a52      	ldr	r2, [pc, #328]	; (8002e8c <HAL_GPIO_Init+0x314>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02b      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <HAL_GPIO_Init+0x318>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x222>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a50      	ldr	r2, [pc, #320]	; (8002e94 <HAL_GPIO_Init+0x31c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x21e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4f      	ldr	r2, [pc, #316]	; (8002e98 <HAL_GPIO_Init+0x320>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x21a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4e      	ldr	r2, [pc, #312]	; (8002e9c <HAL_GPIO_Init+0x324>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x216>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4d      	ldr	r2, [pc, #308]	; (8002ea0 <HAL_GPIO_Init+0x328>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x212>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4c      	ldr	r2, [pc, #304]	; (8002ea4 <HAL_GPIO_Init+0x32c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x20e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4b      	ldr	r2, [pc, #300]	; (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x20a>
 8002d7e:	2307      	movs	r3, #7
 8002d80:	e00e      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d82:	2308      	movs	r3, #8
 8002d84:	e00c      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d86:	2306      	movs	r3, #6
 8002d88:	e00a      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d8a:	2305      	movs	r3, #5
 8002d8c:	e008      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d8e:	2304      	movs	r3, #4
 8002d90:	e006      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d92:	2303      	movs	r3, #3
 8002d94:	e004      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e002      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_GPIO_Init+0x228>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	f002 0203 	and.w	r2, r2, #3
 8002da6:	0092      	lsls	r2, r2, #2
 8002da8:	4093      	lsls	r3, r2
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db0:	4935      	ldr	r1, [pc, #212]	; (8002e88 <HAL_GPIO_Init+0x310>)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3302      	adds	r3, #2
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dbe:	4b3b      	ldr	r3, [pc, #236]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de2:	4a32      	ldr	r2, [pc, #200]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002de8:	4b30      	ldr	r3, [pc, #192]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0c:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e36:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <HAL_GPIO_Init+0x334>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b0f      	cmp	r3, #15
 8002e70:	f67f ae90 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e74:	bf00      	nop
 8002e76:	bf00      	nop
 8002e78:	3724      	adds	r7, #36	; 0x24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40013800 	.word	0x40013800
 8002e8c:	40020000 	.word	0x40020000
 8002e90:	40020400 	.word	0x40020400
 8002e94:	40020800 	.word	0x40020800
 8002e98:	40020c00 	.word	0x40020c00
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40021400 	.word	0x40021400
 8002ea4:	40021800 	.word	0x40021800
 8002ea8:	40021c00 	.word	0x40021c00
 8002eac:	40013c00 	.word	0x40013c00

08002eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec0:	787b      	ldrb	r3, [r7, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ecc:	e003      	b.n	8002ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	619a      	str	r2, [r3, #24]
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	460b      	mov	r3, r1
 8002eec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	041a      	lsls	r2, r3, #16
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43d9      	mvns	r1, r3
 8002f00:	887b      	ldrh	r3, [r7, #2]
 8002f02:	400b      	ands	r3, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	619a      	str	r2, [r3, #24]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e264      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f36:	4ba3      	ldr	r3, [pc, #652]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f42:	4ba0      	ldr	r3, [pc, #640]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d112      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b9d      	ldr	r3, [pc, #628]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	4b99      	ldr	r3, [pc, #612]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d05b      	beq.n	8003020 <HAL_RCC_OscConfig+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d157      	bne.n	8003020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e23f      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x74>
 8002f7e:	4b91      	ldr	r3, [pc, #580]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a90      	ldr	r2, [pc, #576]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x98>
 8002f96:	4b8b      	ldr	r3, [pc, #556]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a8a      	ldr	r2, [pc, #552]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b88      	ldr	r3, [pc, #544]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a87      	ldr	r2, [pc, #540]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002fb0:	4b84      	ldr	r3, [pc, #528]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a83      	ldr	r2, [pc, #524]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b81      	ldr	r3, [pc, #516]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a80      	ldr	r2, [pc, #512]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fb9a 	bl	8001708 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fb96 	bl	8001708 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	; 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e204      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fb86 	bl	8001708 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fb82 	bl	8001708 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1f0      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	4b6c      	ldr	r3, [pc, #432]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0xe8>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d063      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800302e:	4b65      	ldr	r3, [pc, #404]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b62      	ldr	r3, [pc, #392]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b5f      	ldr	r3, [pc, #380]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b5c      	ldr	r3, [pc, #368]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1c4      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b56      	ldr	r3, [pc, #344]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4952      	ldr	r1, [pc, #328]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e03a      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <HAL_RCC_OscConfig+0x2b0>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe fb3b 	bl	8001708 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003096:	f7fe fb37 	bl	8001708 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1a5      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4940      	ldr	r1, [pc, #256]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <HAL_RCC_OscConfig+0x2b0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fb1a 	bl	8001708 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fe fb16 	bl	8001708 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e184      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d030      	beq.n	8003164 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	4b30      	ldr	r3, [pc, #192]	; (80031cc <HAL_RCC_OscConfig+0x2b4>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe fafa 	bl	8001708 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe faf6 	bl	8001708 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e164      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x200>
 8003136:	e015      	b.n	8003164 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x2b4>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fe fae3 	bl	8001708 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003146:	f7fe fadf 	bl	8001708 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e14d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a0 	beq.w	80032b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b13      	ldr	r3, [pc, #76]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_RCC_OscConfig+0x2b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d121      	bne.n	80031f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_RCC_OscConfig+0x2b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_RCC_OscConfig+0x2b8>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe faa5 	bl	8001708 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e011      	b.n	80031e6 <HAL_RCC_OscConfig+0x2ce>
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470000 	.word	0x42470000
 80031cc:	42470e80 	.word	0x42470e80
 80031d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d4:	f7fe fa98 	bl	8001708 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e106      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCC_OscConfig+0x4e4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x2f0>
 80031fa:	4b81      	ldr	r3, [pc, #516]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	e01c      	b.n	8003242 <HAL_RCC_OscConfig+0x32a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b05      	cmp	r3, #5
 800320e:	d10c      	bne.n	800322a <HAL_RCC_OscConfig+0x312>
 8003210:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a7a      	ldr	r2, [pc, #488]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003216:	f043 0304 	orr.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	4b78      	ldr	r3, [pc, #480]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	4a77      	ldr	r2, [pc, #476]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	e00b      	b.n	8003242 <HAL_RCC_OscConfig+0x32a>
 800322a:	4b75      	ldr	r3, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	4a74      	ldr	r2, [pc, #464]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6713      	str	r3, [r2, #112]	; 0x70
 8003236:	4b72      	ldr	r3, [pc, #456]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	4a71      	ldr	r2, [pc, #452]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 800323c:	f023 0304 	bic.w	r3, r3, #4
 8003240:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d015      	beq.n	8003276 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800324a:	f7fe fa5d 	bl	8001708 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe fa59 	bl	8001708 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e0c5      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	4b65      	ldr	r3, [pc, #404]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ee      	beq.n	8003252 <HAL_RCC_OscConfig+0x33a>
 8003274:	e014      	b.n	80032a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe fa47 	bl	8001708 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fa43 	bl	8001708 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0af      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ee      	bne.n	800327e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d105      	bne.n	80032b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 80032ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 809b 	beq.w	80033f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d05c      	beq.n	8003382 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d141      	bne.n	8003354 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCC_OscConfig+0x4ec>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d6:	f7fe fa17 	bl	8001708 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe fa13 	bl	8001708 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e081      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1f0      	bne.n	80032de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	019b      	lsls	r3, r3, #6
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	061b      	lsls	r3, r3, #24
 8003320:	4937      	ldr	r1, [pc, #220]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003326:	4b37      	ldr	r3, [pc, #220]	; (8003404 <HAL_RCC_OscConfig+0x4ec>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe f9ec 	bl	8001708 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe f9e8 	bl	8001708 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e056      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003346:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x41c>
 8003352:	e04e      	b.n	80033f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x4ec>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fe f9d5 	bl	8001708 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe f9d1 	bl	8001708 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e03f      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d1f0      	bne.n	8003362 <HAL_RCC_OscConfig+0x44a>
 8003380:	e037      	b.n	80033f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e032      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_RCC_OscConfig+0x4e8>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d028      	beq.n	80033ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d121      	bne.n	80033ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d11a      	bne.n	80033ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033be:	4013      	ands	r3, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d111      	bne.n	80033ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40007000 	.word	0x40007000
 8003400:	40023800 	.word	0x40023800
 8003404:	42470060 	.word	0x42470060

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cc      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d90c      	bls.n	8003444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d044      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e06f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e067      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4934      	ldr	r1, [pc, #208]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe f906 	bl	8001708 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe f902 	bl	8001708 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	; 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e04f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2b      	ldr	r3, [pc, #172]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20c      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fd fed4 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	08017b68 	.word	0x08017b68
 80035cc:	2000001c 	.word	0x2000001c
 80035d0:	20000020 	.word	0x20000020

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	2300      	movs	r3, #0
 80035e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ec:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d00d      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f200 80bd 	bhi.w	8003778 <HAL_RCC_GetSysClockFreq+0x1a4>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 8003602:	2b04      	cmp	r3, #4
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x3a>
 8003606:	e0b7      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b61      	ldr	r3, [pc, #388]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800360a:	60bb      	str	r3, [r7, #8]
       break;
 800360c:	e0b7      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360e:	4b61      	ldr	r3, [pc, #388]	; (8003794 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003610:	60bb      	str	r3, [r7, #8]
      break;
 8003612:	e0b4      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003614:	4b5d      	ldr	r3, [pc, #372]	; (800378c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361e:	4b5b      	ldr	r3, [pc, #364]	; (800378c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d04d      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	461a      	mov	r2, r3
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	ea02 0800 	and.w	r8, r2, r0
 8003642:	ea03 0901 	and.w	r9, r3, r1
 8003646:	4640      	mov	r0, r8
 8003648:	4649      	mov	r1, r9
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	014b      	lsls	r3, r1, #5
 8003654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003658:	0142      	lsls	r2, r0, #5
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	ebb0 0008 	subs.w	r0, r0, r8
 8003662:	eb61 0109 	sbc.w	r1, r1, r9
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	018b      	lsls	r3, r1, #6
 8003670:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003674:	0182      	lsls	r2, r0, #6
 8003676:	1a12      	subs	r2, r2, r0
 8003678:	eb63 0301 	sbc.w	r3, r3, r1
 800367c:	f04f 0000 	mov.w	r0, #0
 8003680:	f04f 0100 	mov.w	r1, #0
 8003684:	00d9      	lsls	r1, r3, #3
 8003686:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800368a:	00d0      	lsls	r0, r2, #3
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	eb12 0208 	adds.w	r2, r2, r8
 8003694:	eb43 0309 	adc.w	r3, r3, r9
 8003698:	f04f 0000 	mov.w	r0, #0
 800369c:	f04f 0100 	mov.w	r1, #0
 80036a0:	0259      	lsls	r1, r3, #9
 80036a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80036a6:	0250      	lsls	r0, r2, #9
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	461a      	mov	r2, r3
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	f7fc fdf2 	bl	80002a0 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	e04a      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b31      	ldr	r3, [pc, #196]	; (800378c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	461a      	mov	r2, r3
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036d6:	f04f 0100 	mov.w	r1, #0
 80036da:	ea02 0400 	and.w	r4, r2, r0
 80036de:	ea03 0501 	and.w	r5, r3, r1
 80036e2:	4620      	mov	r0, r4
 80036e4:	4629      	mov	r1, r5
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	014b      	lsls	r3, r1, #5
 80036f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036f4:	0142      	lsls	r2, r0, #5
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	1b00      	subs	r0, r0, r4
 80036fc:	eb61 0105 	sbc.w	r1, r1, r5
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	018b      	lsls	r3, r1, #6
 800370a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800370e:	0182      	lsls	r2, r0, #6
 8003710:	1a12      	subs	r2, r2, r0
 8003712:	eb63 0301 	sbc.w	r3, r3, r1
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	00d9      	lsls	r1, r3, #3
 8003720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003724:	00d0      	lsls	r0, r2, #3
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	1912      	adds	r2, r2, r4
 800372c:	eb45 0303 	adc.w	r3, r5, r3
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	0299      	lsls	r1, r3, #10
 800373a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800373e:	0290      	lsls	r0, r2, #10
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4610      	mov	r0, r2
 8003746:	4619      	mov	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	f7fc fda6 	bl	80002a0 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	60bb      	str	r3, [r7, #8]
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800377a:	60bb      	str	r3, [r7, #8]
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	68bb      	ldr	r3, [r7, #8]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	007a1200 	.word	0x007a1200

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	2000001c 	.word	0x2000001c

080037b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037b4:	f7ff fff0 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	0a9b      	lsrs	r3, r3, #10
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800
 80037d4:	08017b78 	.word	0x08017b78

080037d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037dc:	f7ff ffdc 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0b5b      	lsrs	r3, r3, #13
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4903      	ldr	r1, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	08017b78 	.word	0x08017b78

08003800 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	220f      	movs	r2, #15
 800380e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_RCC_GetClockConfig+0x5c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <HAL_RCC_GetClockConfig+0x5c>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003834:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_GetClockConfig+0x5c>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <HAL_RCC_GetClockConfig+0x60>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0207 	and.w	r2, r3, #7
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	601a      	str	r2, [r3, #0]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	40023c00 	.word	0x40023c00

08003864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e041      	b.n	80038fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fcd8 	bl	8001240 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f000 fa96 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e04e      	b.n	80039ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a23      	ldr	r2, [pc, #140]	; (80039c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d01d      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_TIM_Base_Start_IT+0xc8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d010      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e007      	b.n	80039b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40001800 	.word	0x40001800

080039e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d122      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d11b      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0202 	mvn.w	r2, #2
 8003a10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f9b5 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9a7 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f9b8 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d122      	bne.n	8003a94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d11b      	bne.n	8003a94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0204 	mvn.w	r2, #4
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f98b 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f97d 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f98e 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d122      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d11b      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f06f 0208 	mvn.w	r2, #8
 8003ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2204      	movs	r2, #4
 8003abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f961 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003ad4:	e005      	b.n	8003ae2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f953 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f964 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d122      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	d11b      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0210 	mvn.w	r2, #16
 8003b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2208      	movs	r2, #8
 8003b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f937 	bl	8003d96 <HAL_TIM_IC_CaptureCallback>
 8003b28:	e005      	b.n	8003b36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f929 	bl	8003d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f93a 	bl	8003daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10e      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d107      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0201 	mvn.w	r2, #1
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd faf2 	bl	800114c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b80:	2b80      	cmp	r3, #128	; 0x80
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fae0 	bl	8004154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bac:	2b40      	cmp	r3, #64	; 0x40
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8ff 	bl	8003dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0220 	mvn.w	r2, #32
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 faaa 	bl	8004140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIM_ConfigClockSource+0x1c>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e0b4      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x186>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c48:	d03e      	beq.n	8003cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4e:	f200 8087 	bhi.w	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	f000 8086 	beq.w	8003d66 <HAL_TIM_ConfigClockSource+0x172>
 8003c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5e:	d87f      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b70      	cmp	r3, #112	; 0x70
 8003c62:	d01a      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0xa6>
 8003c64:	2b70      	cmp	r3, #112	; 0x70
 8003c66:	d87b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b60      	cmp	r3, #96	; 0x60
 8003c6a:	d050      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x11a>
 8003c6c:	2b60      	cmp	r3, #96	; 0x60
 8003c6e:	d877      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d03c      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0xfa>
 8003c74:	2b50      	cmp	r3, #80	; 0x50
 8003c76:	d873      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d058      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x13a>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d86f      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b30      	cmp	r3, #48	; 0x30
 8003c82:	d064      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d86b      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d060      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d867      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d05c      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d05a      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	e062      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6899      	ldr	r1, [r3, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f000 f9ad 	bl	8004008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	609a      	str	r2, [r3, #8]
      break;
 8003cc6:	e04f      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f000 f996 	bl	8004008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cea:	609a      	str	r2, [r3, #8]
      break;
 8003cec:	e03c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 f90a 	bl	8003f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2150      	movs	r1, #80	; 0x50
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f963 	bl	8003fd2 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e02c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 f929 	bl	8003f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2160      	movs	r1, #96	; 0x60
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f953 	bl	8003fd2 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e01c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f8ea 	bl	8003f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f943 	bl	8003fd2 <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e00c      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f000 f93a 	bl	8003fd2 <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      break;
 8003d64:	e000      	b.n	8003d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d013      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df2:	d00f      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3d      	ldr	r2, [pc, #244]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00b      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3b      	ldr	r2, [pc, #236]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d003      	beq.n	8003e14 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d108      	bne.n	8003e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a2f      	ldr	r2, [pc, #188]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d02b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d027      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2c      	ldr	r2, [pc, #176]	; (8003eec <TIM_Base_SetConfig+0x118>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d023      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <TIM_Base_SetConfig+0x11c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01f      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <TIM_Base_SetConfig+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a29      	ldr	r2, [pc, #164]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d017      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a28      	ldr	r2, [pc, #160]	; (8003efc <TIM_Base_SetConfig+0x128>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d013      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a27      	ldr	r2, [pc, #156]	; (8003f00 <TIM_Base_SetConfig+0x12c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00f      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <TIM_Base_SetConfig+0x130>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00b      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <TIM_Base_SetConfig+0x134>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a24      	ldr	r2, [pc, #144]	; (8003f0c <TIM_Base_SetConfig+0x138>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <TIM_Base_SetConfig+0x13c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d108      	bne.n	8003e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <TIM_Base_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0xf8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <TIM_Base_SetConfig+0x124>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d103      	bne.n	8003ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	615a      	str	r2, [r3, #20]
}
 8003eda:	bf00      	nop
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40010400 	.word	0x40010400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800
 8003f08:	40001800 	.word	0x40001800
 8003f0c:	40001c00 	.word	0x40001c00
 8003f10:	40002000 	.word	0x40002000

08003f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 030a 	bic.w	r3, r3, #10
 8003f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0210 	bic.w	r2, r3, #16
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	031b      	lsls	r3, r3, #12
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f043 0307 	orr.w	r3, r3, #7
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	609a      	str	r2, [r3, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	021a      	lsls	r2, r3, #8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	431a      	orrs	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	bf00      	nop
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800405c:	2302      	movs	r3, #2
 800405e:	e05a      	b.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a21      	ldr	r2, [pc, #132]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d01d      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a17      	ldr	r2, [pc, #92]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a15      	ldr	r2, [pc, #84]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d10c      	bne.n	8004104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40010400 	.word	0x40010400
 8004138:	40014000 	.word	0x40014000
 800413c:	40001800 	.word	0x40001800

08004140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e03f      	b.n	80041fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd f87c 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f929 	bl	8004404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b08a      	sub	sp, #40	; 0x28
 8004206:	af02      	add	r7, sp, #8
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d17c      	bne.n	800431c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_UART_Transmit+0x2c>
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e075      	b.n	800431e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_UART_Transmit+0x3e>
 800423c:	2302      	movs	r3, #2
 800423e:	e06e      	b.n	800431e <HAL_UART_Transmit+0x11c>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2221      	movs	r2, #33	; 0x21
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004256:	f7fd fa57 	bl	8001708 <HAL_GetTick>
 800425a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	88fa      	ldrh	r2, [r7, #6]
 8004260:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004270:	d108      	bne.n	8004284 <HAL_UART_Transmit+0x82>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d104      	bne.n	8004284 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	e003      	b.n	800428c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004294:	e02a      	b.n	80042ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f840 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e036      	b.n	800431e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	3302      	adds	r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	e007      	b.n	80042de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1cf      	bne.n	8004296 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 f810 	bl	8004326 <UART_WaitOnFlagUntilTimeout>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e006      	b.n	800431e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b090      	sub	sp, #64	; 0x40
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004336:	e050      	b.n	80043da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433e:	d04c      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <UART_WaitOnFlagUntilTimeout+0x30>
 8004346:	f7fd f9df 	bl	8001708 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004352:	429a      	cmp	r2, r3
 8004354:	d241      	bcs.n	80043da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	330c      	adds	r3, #12
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800436c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004376:	637a      	str	r2, [r7, #52]	; 0x34
 8004378:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	613b      	str	r3, [r7, #16]
   return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043aa:	623a      	str	r2, [r7, #32]
 80043ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69f9      	ldr	r1, [r7, #28]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e00f      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4013      	ands	r3, r2
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	bf0c      	ite	eq
 80043ea:	2301      	moveq	r3, #1
 80043ec:	2300      	movne	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d09f      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3740      	adds	r7, #64	; 0x40
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004408:	b09f      	sub	sp, #124	; 0x7c
 800440a:	af00      	add	r7, sp, #0
 800440c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441a:	68d9      	ldr	r1, [r3, #12]
 800441c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	ea40 0301 	orr.w	r3, r0, r1
 8004424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	431a      	orrs	r2, r3
 8004430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	431a      	orrs	r2, r3
 8004436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4313      	orrs	r3, r2
 800443c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004448:	f021 010c 	bic.w	r1, r1, #12
 800444c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004452:	430b      	orrs	r3, r1
 8004454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004462:	6999      	ldr	r1, [r3, #24]
 8004464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	ea40 0301 	orr.w	r3, r0, r1
 800446c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800446e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4bc5      	ldr	r3, [pc, #788]	; (8004788 <UART_SetConfig+0x384>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d004      	beq.n	8004482 <UART_SetConfig+0x7e>
 8004478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	4bc3      	ldr	r3, [pc, #780]	; (800478c <UART_SetConfig+0x388>)
 800447e:	429a      	cmp	r2, r3
 8004480:	d103      	bne.n	800448a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004482:	f7ff f9a9 	bl	80037d8 <HAL_RCC_GetPCLK2Freq>
 8004486:	6778      	str	r0, [r7, #116]	; 0x74
 8004488:	e002      	b.n	8004490 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800448a:	f7ff f991 	bl	80037b0 <HAL_RCC_GetPCLK1Freq>
 800448e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004498:	f040 80b6 	bne.w	8004608 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800449c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449e:	461c      	mov	r4, r3
 80044a0:	f04f 0500 	mov.w	r5, #0
 80044a4:	4622      	mov	r2, r4
 80044a6:	462b      	mov	r3, r5
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	6439      	str	r1, [r7, #64]	; 0x40
 80044ac:	415b      	adcs	r3, r3
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
 80044b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044b4:	1912      	adds	r2, r2, r4
 80044b6:	eb45 0303 	adc.w	r3, r5, r3
 80044ba:	f04f 0000 	mov.w	r0, #0
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	00d9      	lsls	r1, r3, #3
 80044c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044c8:	00d0      	lsls	r0, r2, #3
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	1911      	adds	r1, r2, r4
 80044d0:	6639      	str	r1, [r7, #96]	; 0x60
 80044d2:	416b      	adcs	r3, r5
 80044d4:	667b      	str	r3, [r7, #100]	; 0x64
 80044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	1891      	adds	r1, r2, r2
 80044e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044e4:	415b      	adcs	r3, r3
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044f0:	f7fb fed6 	bl	80002a0 <__aeabi_uldivmod>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4ba5      	ldr	r3, [pc, #660]	; (8004790 <UART_SetConfig+0x38c>)
 80044fa:	fba3 2302 	umull	r2, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	011e      	lsls	r6, r3, #4
 8004502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004504:	461c      	mov	r4, r3
 8004506:	f04f 0500 	mov.w	r5, #0
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	1891      	adds	r1, r2, r2
 8004510:	6339      	str	r1, [r7, #48]	; 0x30
 8004512:	415b      	adcs	r3, r3
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
 8004516:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800451a:	1912      	adds	r2, r2, r4
 800451c:	eb45 0303 	adc.w	r3, r5, r3
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	00d9      	lsls	r1, r3, #3
 800452a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800452e:	00d0      	lsls	r0, r2, #3
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	1911      	adds	r1, r2, r4
 8004536:	65b9      	str	r1, [r7, #88]	; 0x58
 8004538:	416b      	adcs	r3, r5
 800453a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	461a      	mov	r2, r3
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	1891      	adds	r1, r2, r2
 8004548:	62b9      	str	r1, [r7, #40]	; 0x28
 800454a:	415b      	adcs	r3, r3
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004552:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004556:	f7fb fea3 	bl	80002a0 <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4b8c      	ldr	r3, [pc, #560]	; (8004790 <UART_SetConfig+0x38c>)
 8004560:	fba3 1302 	umull	r1, r3, r3, r2
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	2164      	movs	r1, #100	; 0x64
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	3332      	adds	r3, #50	; 0x32
 8004572:	4a87      	ldr	r2, [pc, #540]	; (8004790 <UART_SetConfig+0x38c>)
 8004574:	fba2 2303 	umull	r2, r3, r2, r3
 8004578:	095b      	lsrs	r3, r3, #5
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004580:	441e      	add	r6, r3
 8004582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004584:	4618      	mov	r0, r3
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	1894      	adds	r4, r2, r2
 8004590:	623c      	str	r4, [r7, #32]
 8004592:	415b      	adcs	r3, r3
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800459a:	1812      	adds	r2, r2, r0
 800459c:	eb41 0303 	adc.w	r3, r1, r3
 80045a0:	f04f 0400 	mov.w	r4, #0
 80045a4:	f04f 0500 	mov.w	r5, #0
 80045a8:	00dd      	lsls	r5, r3, #3
 80045aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045ae:	00d4      	lsls	r4, r2, #3
 80045b0:	4622      	mov	r2, r4
 80045b2:	462b      	mov	r3, r5
 80045b4:	1814      	adds	r4, r2, r0
 80045b6:	653c      	str	r4, [r7, #80]	; 0x50
 80045b8:	414b      	adcs	r3, r1
 80045ba:	657b      	str	r3, [r7, #84]	; 0x54
 80045bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	461a      	mov	r2, r3
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	1891      	adds	r1, r2, r2
 80045c8:	61b9      	str	r1, [r7, #24]
 80045ca:	415b      	adcs	r3, r3
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045d6:	f7fb fe63 	bl	80002a0 <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b6c      	ldr	r3, [pc, #432]	; (8004790 <UART_SetConfig+0x38c>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	; 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	3332      	adds	r3, #50	; 0x32
 80045f2:	4a67      	ldr	r2, [pc, #412]	; (8004790 <UART_SetConfig+0x38c>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4432      	add	r2, r6
 8004604:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004606:	e0b9      	b.n	800477c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460a:	461c      	mov	r4, r3
 800460c:	f04f 0500 	mov.w	r5, #0
 8004610:	4622      	mov	r2, r4
 8004612:	462b      	mov	r3, r5
 8004614:	1891      	adds	r1, r2, r2
 8004616:	6139      	str	r1, [r7, #16]
 8004618:	415b      	adcs	r3, r3
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004620:	1912      	adds	r2, r2, r4
 8004622:	eb45 0303 	adc.w	r3, r5, r3
 8004626:	f04f 0000 	mov.w	r0, #0
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	00d9      	lsls	r1, r3, #3
 8004630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004634:	00d0      	lsls	r0, r2, #3
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	eb12 0804 	adds.w	r8, r2, r4
 800463e:	eb43 0905 	adc.w	r9, r3, r5
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4618      	mov	r0, r3
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	008b      	lsls	r3, r1, #2
 8004656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800465a:	0082      	lsls	r2, r0, #2
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fb fe1e 	bl	80002a0 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4b49      	ldr	r3, [pc, #292]	; (8004790 <UART_SetConfig+0x38c>)
 800466a:	fba3 2302 	umull	r2, r3, r3, r2
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	011e      	lsls	r6, r3, #4
 8004672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004674:	4618      	mov	r0, r3
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	1894      	adds	r4, r2, r2
 8004680:	60bc      	str	r4, [r7, #8]
 8004682:	415b      	adcs	r3, r3
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800468a:	1812      	adds	r2, r2, r0
 800468c:	eb41 0303 	adc.w	r3, r1, r3
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	f04f 0500 	mov.w	r5, #0
 8004698:	00dd      	lsls	r5, r3, #3
 800469a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800469e:	00d4      	lsls	r4, r2, #3
 80046a0:	4622      	mov	r2, r4
 80046a2:	462b      	mov	r3, r5
 80046a4:	1814      	adds	r4, r2, r0
 80046a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80046a8:	414b      	adcs	r3, r1
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f04f 0100 	mov.w	r1, #0
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	f04f 0300 	mov.w	r3, #0
 80046be:	008b      	lsls	r3, r1, #2
 80046c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046c4:	0082      	lsls	r2, r0, #2
 80046c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046ca:	f7fb fde9 	bl	80002a0 <__aeabi_uldivmod>
 80046ce:	4602      	mov	r2, r0
 80046d0:	460b      	mov	r3, r1
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <UART_SetConfig+0x38c>)
 80046d4:	fba3 1302 	umull	r1, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2164      	movs	r1, #100	; 0x64
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	; 0x32
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <UART_SetConfig+0x38c>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f2:	441e      	add	r6, r3
 80046f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046f6:	4618      	mov	r0, r3
 80046f8:	f04f 0100 	mov.w	r1, #0
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	1894      	adds	r4, r2, r2
 8004702:	603c      	str	r4, [r7, #0]
 8004704:	415b      	adcs	r3, r3
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800470c:	1812      	adds	r2, r2, r0
 800470e:	eb41 0303 	adc.w	r3, r1, r3
 8004712:	f04f 0400 	mov.w	r4, #0
 8004716:	f04f 0500 	mov.w	r5, #0
 800471a:	00dd      	lsls	r5, r3, #3
 800471c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004720:	00d4      	lsls	r4, r2, #3
 8004722:	4622      	mov	r2, r4
 8004724:	462b      	mov	r3, r5
 8004726:	eb12 0a00 	adds.w	sl, r2, r0
 800472a:	eb43 0b01 	adc.w	fp, r3, r1
 800472e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4618      	mov	r0, r3
 8004734:	f04f 0100 	mov.w	r1, #0
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	008b      	lsls	r3, r1, #2
 8004742:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004746:	0082      	lsls	r2, r0, #2
 8004748:	4650      	mov	r0, sl
 800474a:	4659      	mov	r1, fp
 800474c:	f7fb fda8 	bl	80002a0 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <UART_SetConfig+0x38c>)
 8004756:	fba3 1302 	umull	r1, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	2164      	movs	r1, #100	; 0x64
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	3332      	adds	r3, #50	; 0x32
 8004768:	4a09      	ldr	r2, [pc, #36]	; (8004790 <UART_SetConfig+0x38c>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	f003 020f 	and.w	r2, r3, #15
 8004774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4432      	add	r2, r6
 800477a:	609a      	str	r2, [r3, #8]
}
 800477c:	bf00      	nop
 800477e:	377c      	adds	r7, #124	; 0x7c
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004786:	bf00      	nop
 8004788:	40011000 	.word	0x40011000
 800478c:	40011400 	.word	0x40011400
 8004790:	51eb851f 	.word	0x51eb851f

08004794 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800479a:	4b8d      	ldr	r3, [pc, #564]	; (80049d0 <MX_LWIP_Init+0x23c>)
 800479c:	22c0      	movs	r2, #192	; 0xc0
 800479e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80047a0:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047a2:	22a8      	movs	r2, #168	; 0xa8
 80047a4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 80047a6:	4b8a      	ldr	r3, [pc, #552]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047a8:	2212      	movs	r2, #18
 80047aa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 114;
 80047ac:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047ae:	2272      	movs	r2, #114	; 0x72
 80047b0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80047b2:	4b88      	ldr	r3, [pc, #544]	; (80049d4 <MX_LWIP_Init+0x240>)
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80047b8:	4b86      	ldr	r3, [pc, #536]	; (80049d4 <MX_LWIP_Init+0x240>)
 80047ba:	22ff      	movs	r2, #255	; 0xff
 80047bc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <MX_LWIP_Init+0x240>)
 80047c0:	22ff      	movs	r2, #255	; 0xff
 80047c2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80047c4:	4b83      	ldr	r3, [pc, #524]	; (80049d4 <MX_LWIP_Init+0x240>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80047ca:	4b83      	ldr	r3, [pc, #524]	; (80049d8 <MX_LWIP_Init+0x244>)
 80047cc:	22c0      	movs	r2, #192	; 0xc0
 80047ce:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80047d0:	4b81      	ldr	r3, [pc, #516]	; (80049d8 <MX_LWIP_Init+0x244>)
 80047d2:	22a8      	movs	r2, #168	; 0xa8
 80047d4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80047d6:	4b80      	ldr	r3, [pc, #512]	; (80049d8 <MX_LWIP_Init+0x244>)
 80047d8:	2212      	movs	r2, #18
 80047da:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80047dc:	4b7e      	ldr	r3, [pc, #504]	; (80049d8 <MX_LWIP_Init+0x244>)
 80047de:	2201      	movs	r2, #1
 80047e0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80047e2:	f003 fdd7 	bl	8008394 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80047e6:	4b7a      	ldr	r3, [pc, #488]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	061a      	lsls	r2, r3, #24
 80047ec:	4b78      	ldr	r3, [pc, #480]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	431a      	orrs	r2, r3
 80047f4:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047f6:	789b      	ldrb	r3, [r3, #2]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	4313      	orrs	r3, r2
 80047fc:	4a74      	ldr	r2, [pc, #464]	; (80049d0 <MX_LWIP_Init+0x23c>)
 80047fe:	78d2      	ldrb	r2, [r2, #3]
 8004800:	4313      	orrs	r3, r2
 8004802:	061a      	lsls	r2, r3, #24
 8004804:	4b72      	ldr	r3, [pc, #456]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	0619      	lsls	r1, r3, #24
 800480a:	4b71      	ldr	r3, [pc, #452]	; (80049d0 <MX_LWIP_Init+0x23c>)
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	4319      	orrs	r1, r3
 8004812:	4b6f      	ldr	r3, [pc, #444]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004814:	789b      	ldrb	r3, [r3, #2]
 8004816:	021b      	lsls	r3, r3, #8
 8004818:	430b      	orrs	r3, r1
 800481a:	496d      	ldr	r1, [pc, #436]	; (80049d0 <MX_LWIP_Init+0x23c>)
 800481c:	78c9      	ldrb	r1, [r1, #3]
 800481e:	430b      	orrs	r3, r1
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004826:	431a      	orrs	r2, r3
 8004828:	4b69      	ldr	r3, [pc, #420]	; (80049d0 <MX_LWIP_Init+0x23c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	0619      	lsls	r1, r3, #24
 800482e:	4b68      	ldr	r3, [pc, #416]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	4319      	orrs	r1, r3
 8004836:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004838:	789b      	ldrb	r3, [r3, #2]
 800483a:	021b      	lsls	r3, r3, #8
 800483c:	430b      	orrs	r3, r1
 800483e:	4964      	ldr	r1, [pc, #400]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004840:	78c9      	ldrb	r1, [r1, #3]
 8004842:	430b      	orrs	r3, r1
 8004844:	0a1b      	lsrs	r3, r3, #8
 8004846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800484a:	431a      	orrs	r2, r3
 800484c:	4b60      	ldr	r3, [pc, #384]	; (80049d0 <MX_LWIP_Init+0x23c>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	0619      	lsls	r1, r3, #24
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	4319      	orrs	r1, r3
 800485a:	4b5d      	ldr	r3, [pc, #372]	; (80049d0 <MX_LWIP_Init+0x23c>)
 800485c:	789b      	ldrb	r3, [r3, #2]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	430b      	orrs	r3, r1
 8004862:	495b      	ldr	r1, [pc, #364]	; (80049d0 <MX_LWIP_Init+0x23c>)
 8004864:	78c9      	ldrb	r1, [r1, #3]
 8004866:	430b      	orrs	r3, r1
 8004868:	0e1b      	lsrs	r3, r3, #24
 800486a:	4313      	orrs	r3, r2
 800486c:	4a5b      	ldr	r2, [pc, #364]	; (80049dc <MX_LWIP_Init+0x248>)
 800486e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004870:	4b58      	ldr	r3, [pc, #352]	; (80049d4 <MX_LWIP_Init+0x240>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	061a      	lsls	r2, r3, #24
 8004876:	4b57      	ldr	r3, [pc, #348]	; (80049d4 <MX_LWIP_Init+0x240>)
 8004878:	785b      	ldrb	r3, [r3, #1]
 800487a:	041b      	lsls	r3, r3, #16
 800487c:	431a      	orrs	r2, r3
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <MX_LWIP_Init+0x240>)
 8004880:	789b      	ldrb	r3, [r3, #2]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	4313      	orrs	r3, r2
 8004886:	4a53      	ldr	r2, [pc, #332]	; (80049d4 <MX_LWIP_Init+0x240>)
 8004888:	78d2      	ldrb	r2, [r2, #3]
 800488a:	4313      	orrs	r3, r2
 800488c:	061a      	lsls	r2, r3, #24
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <MX_LWIP_Init+0x240>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	0619      	lsls	r1, r3, #24
 8004894:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <MX_LWIP_Init+0x240>)
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	4319      	orrs	r1, r3
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <MX_LWIP_Init+0x240>)
 800489e:	789b      	ldrb	r3, [r3, #2]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	430b      	orrs	r3, r1
 80048a4:	494b      	ldr	r1, [pc, #300]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048a6:	78c9      	ldrb	r1, [r1, #3]
 80048a8:	430b      	orrs	r3, r1
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048b0:	431a      	orrs	r2, r3
 80048b2:	4b48      	ldr	r3, [pc, #288]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	0619      	lsls	r1, r3, #24
 80048b8:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048ba:	785b      	ldrb	r3, [r3, #1]
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	4319      	orrs	r1, r3
 80048c0:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048c2:	789b      	ldrb	r3, [r3, #2]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	430b      	orrs	r3, r1
 80048c8:	4942      	ldr	r1, [pc, #264]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048ca:	78c9      	ldrb	r1, [r1, #3]
 80048cc:	430b      	orrs	r3, r1
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80048d4:	431a      	orrs	r2, r3
 80048d6:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	0619      	lsls	r1, r3, #24
 80048dc:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048de:	785b      	ldrb	r3, [r3, #1]
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	4319      	orrs	r1, r3
 80048e4:	4b3b      	ldr	r3, [pc, #236]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048e6:	789b      	ldrb	r3, [r3, #2]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	430b      	orrs	r3, r1
 80048ec:	4939      	ldr	r1, [pc, #228]	; (80049d4 <MX_LWIP_Init+0x240>)
 80048ee:	78c9      	ldrb	r1, [r1, #3]
 80048f0:	430b      	orrs	r3, r1
 80048f2:	0e1b      	lsrs	r3, r3, #24
 80048f4:	4313      	orrs	r3, r2
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <MX_LWIP_Init+0x24c>)
 80048f8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80048fa:	4b37      	ldr	r3, [pc, #220]	; (80049d8 <MX_LWIP_Init+0x244>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	061a      	lsls	r2, r3, #24
 8004900:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	431a      	orrs	r2, r3
 8004908:	4b33      	ldr	r3, [pc, #204]	; (80049d8 <MX_LWIP_Init+0x244>)
 800490a:	789b      	ldrb	r3, [r3, #2]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	4313      	orrs	r3, r2
 8004910:	4a31      	ldr	r2, [pc, #196]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004912:	78d2      	ldrb	r2, [r2, #3]
 8004914:	4313      	orrs	r3, r2
 8004916:	061a      	lsls	r2, r3, #24
 8004918:	4b2f      	ldr	r3, [pc, #188]	; (80049d8 <MX_LWIP_Init+0x244>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	0619      	lsls	r1, r3, #24
 800491e:	4b2e      	ldr	r3, [pc, #184]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004920:	785b      	ldrb	r3, [r3, #1]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	4319      	orrs	r1, r3
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004928:	789b      	ldrb	r3, [r3, #2]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	430b      	orrs	r3, r1
 800492e:	492a      	ldr	r1, [pc, #168]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004930:	78c9      	ldrb	r1, [r1, #3]
 8004932:	430b      	orrs	r3, r1
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800493a:	431a      	orrs	r2, r3
 800493c:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <MX_LWIP_Init+0x244>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	0619      	lsls	r1, r3, #24
 8004942:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	4319      	orrs	r1, r3
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <MX_LWIP_Init+0x244>)
 800494c:	789b      	ldrb	r3, [r3, #2]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	430b      	orrs	r3, r1
 8004952:	4921      	ldr	r1, [pc, #132]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004954:	78c9      	ldrb	r1, [r1, #3]
 8004956:	430b      	orrs	r3, r1
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800495e:	431a      	orrs	r2, r3
 8004960:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	0619      	lsls	r1, r3, #24
 8004966:	4b1c      	ldr	r3, [pc, #112]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	4319      	orrs	r1, r3
 800496e:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004970:	789b      	ldrb	r3, [r3, #2]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	430b      	orrs	r3, r1
 8004976:	4918      	ldr	r1, [pc, #96]	; (80049d8 <MX_LWIP_Init+0x244>)
 8004978:	78c9      	ldrb	r1, [r1, #3]
 800497a:	430b      	orrs	r3, r1
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	4313      	orrs	r3, r2
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <MX_LWIP_Init+0x250>)
 8004982:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <MX_LWIP_Init+0x254>)
 8004986:	9302      	str	r3, [sp, #8]
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <MX_LWIP_Init+0x258>)
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	2300      	movs	r3, #0
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <MX_LWIP_Init+0x250>)
 8004992:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <MX_LWIP_Init+0x24c>)
 8004994:	4911      	ldr	r1, [pc, #68]	; (80049dc <MX_LWIP_Init+0x248>)
 8004996:	4816      	ldr	r0, [pc, #88]	; (80049f0 <MX_LWIP_Init+0x25c>)
 8004998:	f004 f9ca 	bl	8008d30 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800499c:	4814      	ldr	r0, [pc, #80]	; (80049f0 <MX_LWIP_Init+0x25c>)
 800499e:	f004 fb79 	bl	8009094 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80049a2:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <MX_LWIP_Init+0x25c>)
 80049a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80049b4:	480e      	ldr	r0, [pc, #56]	; (80049f0 <MX_LWIP_Init+0x25c>)
 80049b6:	f004 fb7d 	bl	80090b4 <netif_set_up>
 80049ba:	e002      	b.n	80049c2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80049bc:	480c      	ldr	r0, [pc, #48]	; (80049f0 <MX_LWIP_Init+0x25c>)
 80049be:	f004 fbe5 	bl	800918c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80049c2:	490c      	ldr	r1, [pc, #48]	; (80049f4 <MX_LWIP_Init+0x260>)
 80049c4:	480a      	ldr	r0, [pc, #40]	; (80049f0 <MX_LWIP_Init+0x25c>)
 80049c6:	f004 fc13 	bl	80091f0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000f84 	.word	0x20000f84
 80049d4:	20000f80 	.word	0x20000f80
 80049d8:	20000f44 	.word	0x20000f44
 80049dc:	20000f7c 	.word	0x20000f7c
 80049e0:	20000f88 	.word	0x20000f88
 80049e4:	20000f8c 	.word	0x20000f8c
 80049e8:	08012c01 	.word	0x08012c01
 80049ec:	08004f9d 	.word	0x08004f9d
 80049f0:	20000f48 	.word	0x20000f48
 80049f4:	08005009 	.word	0x08005009

080049f8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80049fc:	4803      	ldr	r0, [pc, #12]	; (8004a0c <MX_LWIP_Process+0x14>)
 80049fe:	f000 faad 	bl	8004f5c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004a02:	f00b fd17 	bl	8010434 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000f48 	.word	0x20000f48

08004a10 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	; 0x38
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a46      	ldr	r2, [pc, #280]	; (8004b48 <HAL_ETH_MspInit+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	f040 8085 	bne.w	8004b3e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004a34:	2300      	movs	r3, #0
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	4b44      	ldr	r3, [pc, #272]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	4a43      	ldr	r2, [pc, #268]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a42:	6313      	str	r3, [r2, #48]	; 0x30
 8004a44:	4b41      	ldr	r3, [pc, #260]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4c:	623b      	str	r3, [r7, #32]
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	4b3d      	ldr	r3, [pc, #244]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	4a3c      	ldr	r2, [pc, #240]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a60:	4b3a      	ldr	r3, [pc, #232]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	4a35      	ldr	r2, [pc, #212]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	4b2f      	ldr	r3, [pc, #188]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	4a2e      	ldr	r2, [pc, #184]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a92:	f043 0304 	orr.w	r3, r3, #4
 8004a96:	6313      	str	r3, [r2, #48]	; 0x30
 8004a98:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab4:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	4b21      	ldr	r3, [pc, #132]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004aca:	f043 0302 	orr.w	r3, r3, #2
 8004ace:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <HAL_ETH_MspInit+0x13c>)
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004adc:	2332      	movs	r3, #50	; 0x32
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004aec:	230b      	movs	r3, #11
 8004aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004af4:	4619      	mov	r1, r3
 8004af6:	4816      	ldr	r0, [pc, #88]	; (8004b50 <HAL_ETH_MspInit+0x140>)
 8004af8:	f7fe f83e 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004afc:	2386      	movs	r3, #134	; 0x86
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b00:	2302      	movs	r3, #2
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b0c:	230b      	movs	r3, #11
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b14:	4619      	mov	r1, r3
 8004b16:	480f      	ldr	r0, [pc, #60]	; (8004b54 <HAL_ETH_MspInit+0x144>)
 8004b18:	f7fe f82e 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004b1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b22:	2302      	movs	r3, #2
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b2e:	230b      	movs	r3, #11
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b36:	4619      	mov	r1, r3
 8004b38:	4807      	ldr	r0, [pc, #28]	; (8004b58 <HAL_ETH_MspInit+0x148>)
 8004b3a:	f7fe f81d 	bl	8002b78 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004b3e:	bf00      	nop
 8004b40:	3738      	adds	r7, #56	; 0x38
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40028000 	.word	0x40028000
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40020800 	.word	0x40020800
 8004b54:	40020000 	.word	0x40020000
 8004b58:	40020400 	.word	0x40020400

08004b5c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004b68:	4b4d      	ldr	r3, [pc, #308]	; (8004ca0 <low_level_init+0x144>)
 8004b6a:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <low_level_init+0x148>)
 8004b6c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004b6e:	4b4c      	ldr	r3, [pc, #304]	; (8004ca0 <low_level_init+0x144>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004b74:	4b4a      	ldr	r3, [pc, #296]	; (8004ca0 <low_level_init+0x144>)
 8004b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b7a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004b7c:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <low_level_init+0x144>)
 8004b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b82:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004b84:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <low_level_init+0x144>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004b92:	23e1      	movs	r3, #225	; 0xe1
 8004b94:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004b96:	2300      	movs	r3, #0
 8004b98:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004ba2:	4a3f      	ldr	r2, [pc, #252]	; (8004ca0 <low_level_init+0x144>)
 8004ba4:	f107 0308 	add.w	r3, r7, #8
 8004ba8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8004baa:	4b3d      	ldr	r3, [pc, #244]	; (8004ca0 <low_level_init+0x144>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <low_level_init+0x144>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004bb6:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <low_level_init+0x144>)
 8004bb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004bbc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004bbe:	4838      	ldr	r0, [pc, #224]	; (8004ca0 <low_level_init+0x144>)
 8004bc0:	f7fc feb4 	bl	800192c <HAL_ETH_Init>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004bd4:	f043 0304 	orr.w	r3, r3, #4
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004be0:	2304      	movs	r3, #4
 8004be2:	4a31      	ldr	r2, [pc, #196]	; (8004ca8 <low_level_init+0x14c>)
 8004be4:	4931      	ldr	r1, [pc, #196]	; (8004cac <low_level_init+0x150>)
 8004be6:	482e      	ldr	r0, [pc, #184]	; (8004ca0 <low_level_init+0x144>)
 8004be8:	f7fd f83c 	bl	8001c64 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004bec:	2304      	movs	r3, #4
 8004bee:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <low_level_init+0x154>)
 8004bf0:	4930      	ldr	r1, [pc, #192]	; (8004cb4 <low_level_init+0x158>)
 8004bf2:	482b      	ldr	r0, [pc, #172]	; (8004ca0 <low_level_init+0x144>)
 8004bf4:	f7fd f89f 	bl	8001d36 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2206      	movs	r2, #6
 8004bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <low_level_init+0x144>)
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	781a      	ldrb	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c0c:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <low_level_init+0x144>)
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	785a      	ldrb	r2, [r3, #1]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c18:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <low_level_init+0x144>)
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	789a      	ldrb	r2, [r3, #2]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <low_level_init+0x144>)
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	78da      	ldrb	r2, [r3, #3]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <low_level_init+0x144>)
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	791a      	ldrb	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <low_level_init+0x144>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	795a      	ldrb	r2, [r3, #5]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c4e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c56:	f043 030a 	orr.w	r3, r3, #10
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004c62:	480f      	ldr	r0, [pc, #60]	; (8004ca0 <low_level_init+0x144>)
 8004c64:	f7fd fb10 	bl	8002288 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004c68:	f107 0310 	add.w	r3, r7, #16
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	211d      	movs	r1, #29
 8004c70:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <low_level_init+0x144>)
 8004c72:	f7fd fa3b 	bl	80020ec <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f043 030b 	orr.w	r3, r3, #11
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	461a      	mov	r2, r3
 8004c82:	211d      	movs	r1, #29
 8004c84:	4806      	ldr	r0, [pc, #24]	; (8004ca0 <low_level_init+0x144>)
 8004c86:	f7fd fa99 	bl	80021bc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	461a      	mov	r2, r3
 8004c90:	211d      	movs	r1, #29
 8004c92:	4803      	ldr	r0, [pc, #12]	; (8004ca0 <low_level_init+0x144>)
 8004c94:	f7fd fa2a 	bl	80020ec <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20002860 	.word	0x20002860
 8004ca4:	40028000 	.word	0x40028000
 8004ca8:	200028a8 	.word	0x200028a8
 8004cac:	20000f90 	.word	0x20000f90
 8004cb0:	20001010 	.word	0x20001010
 8004cb4:	200027e0 	.word	0x200027e0

08004cb8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004cc2:	4b4b      	ldr	r3, [pc, #300]	; (8004df0 <low_level_output+0x138>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004cda:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <low_level_output+0x138>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	e05a      	b.n	8004da0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	da03      	bge.n	8004cfa <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004cf2:	23f8      	movs	r3, #248	; 0xf8
 8004cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004cf8:	e05c      	b.n	8004db4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	895b      	ldrh	r3, [r3, #10]
 8004cfe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004d04:	e02f      	b.n	8004d66 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	18d0      	adds	r0, r2, r3
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	18d1      	adds	r1, r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f00e f877 	bl	8012e10 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da03      	bge.n	8004d38 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004d30:	23f8      	movs	r3, #248	; 0xf8
 8004d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004d36:	e03d      	b.n	8004db4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004d48:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d54:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d60:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d8c8      	bhi.n	8004d06 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	18d0      	adds	r0, r2, r3
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f00e f843 	bl	8012e10 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4413      	add	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4413      	add	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1a1      	bne.n	8004cea <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004da6:	6979      	ldr	r1, [r7, #20]
 8004da8:	4811      	ldr	r0, [pc, #68]	; (8004df0 <low_level_output+0x138>)
 8004daa:	f7fd f831 	bl	8001e10 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <low_level_output+0x138>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <low_level_output+0x138>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <low_level_output+0x138>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dde:	3304      	adds	r3, #4
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20002860 	.word	0x20002860

08004df4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	; 0x30
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004e00:	2300      	movs	r3, #0
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004e18:	484f      	ldr	r0, [pc, #316]	; (8004f58 <low_level_input+0x164>)
 8004e1a:	f7fd f8e3 	bl	8001fe4 <HAL_ETH_GetReceivedFrame>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <low_level_input+0x34>

    return NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e092      	b.n	8004f4e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004e28:	4b4b      	ldr	r3, [pc, #300]	; (8004f58 <low_level_input+0x164>)
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004e2e:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <low_level_input+0x164>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004e3a:	89fb      	ldrh	r3, [r7, #14]
 8004e3c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004e40:	4619      	mov	r1, r3
 8004e42:	2000      	movs	r0, #0
 8004e44:	f004 fa70 	bl	8009328 <pbuf_alloc>
 8004e48:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d04b      	beq.n	8004ee8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004e50:	4b41      	ldr	r3, [pc, #260]	; (8004f58 <low_level_input+0x164>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e5e:	e040      	b.n	8004ee2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	895b      	ldrh	r3, [r3, #10]
 8004e64:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004e6a:	e021      	b.n	8004eb0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	18d0      	adds	r0, r2, r3
 8004e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	18d1      	adds	r1, r2, r3
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004e80:	3304      	adds	r3, #4
 8004e82:	461a      	mov	r2, r3
 8004e84:	f00d ffc4 	bl	8012e10 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004e8e:	6a3b      	ldr	r3, [r7, #32]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004e9e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004eaa:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d8d6      	bhi.n	8004e6c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	18d0      	adds	r0, r2, r3
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f00d ff9e 	bl	8012e10 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1bb      	bne.n	8004e60 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <low_level_input+0x164>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	e00b      	b.n	8004f0c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <low_level_input+0x164>)
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d3ee      	bcc.n	8004ef4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <low_level_input+0x164>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <low_level_input+0x164>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f24:	3314      	adds	r3, #20
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <low_level_input+0x164>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f38:	3314      	adds	r3, #20
 8004f3a:	2280      	movs	r2, #128	; 0x80
 8004f3c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004f3e:	4b06      	ldr	r3, [pc, #24]	; (8004f58 <low_level_input+0x164>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f46:	3308      	adds	r3, #8
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3730      	adds	r7, #48	; 0x30
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20002860 	.word	0x20002860

08004f5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff45 	bl	8004df4 <low_level_input>
 8004f6a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d010      	beq.n	8004f94 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	4798      	blx	r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004f80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f004 fcb1 	bl	80098f0 <pbuf_free>
    p = NULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e000      	b.n	8004f96 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004f94:	bf00      	nop
  }
}
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <ethernetif_init+0x1c>
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <ethernetif_init+0x48>)
 8004fac:	f44f 7202 	mov.w	r2, #520	; 0x208
 8004fb0:	490d      	ldr	r1, [pc, #52]	; (8004fe8 <ethernetif_init+0x4c>)
 8004fb2:	480e      	ldr	r0, [pc, #56]	; (8004fec <ethernetif_init+0x50>)
 8004fb4:	f00d ff5c 	bl	8012e70 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2273      	movs	r2, #115	; 0x73
 8004fbc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2274      	movs	r2, #116	; 0x74
 8004fc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <ethernetif_init+0x54>)
 8004fcc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <ethernetif_init+0x58>)
 8004fd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fdc1 	bl	8004b5c <low_level_init>

  return ERR_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	080146b8 	.word	0x080146b8
 8004fe8:	080146d4 	.word	0x080146d4
 8004fec:	080146e4 	.word	0x080146e4
 8004ff0:	080110c5 	.word	0x080110c5
 8004ff4:	08004cb9 	.word	0x08004cb9

08004ff8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ffc:	f7fc fb84 	bl	8001708 <HAL_GetTick>
 8005000:	4603      	mov	r3, r0
}
 8005002:	4618      	mov	r0, r3
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d05d      	beq.n	80050e6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <ethernetif_update_config+0xf4>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03f      	beq.n	80050b2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005032:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005036:	2100      	movs	r1, #0
 8005038:	4830      	ldr	r0, [pc, #192]	; (80050fc <ethernetif_update_config+0xf4>)
 800503a:	f7fd f8bf 	bl	80021bc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800503e:	f7fc fb63 	bl	8001708 <HAL_GetTick>
 8005042:	4603      	mov	r3, r0
 8005044:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	461a      	mov	r2, r3
 800504c:	2101      	movs	r1, #1
 800504e:	482b      	ldr	r0, [pc, #172]	; (80050fc <ethernetif_update_config+0xf4>)
 8005050:	f7fd f84c 	bl	80020ec <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005054:	f7fc fb58 	bl	8001708 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005062:	d828      	bhi.n	80050b6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0eb      	beq.n	8005046 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800506e:	f107 0308 	add.w	r3, r7, #8
 8005072:	461a      	mov	r2, r3
 8005074:	2110      	movs	r1, #16
 8005076:	4821      	ldr	r0, [pc, #132]	; (80050fc <ethernetif_update_config+0xf4>)
 8005078:	f7fd f838 	bl	80020ec <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005086:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <ethernetif_update_config+0xf4>)
 8005088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	e002      	b.n	8005096 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <ethernetif_update_config+0xf4>)
 8005092:	2200      	movs	r2, #0
 8005094:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <ethernetif_update_config+0xf4>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
 80050a6:	e016      	b.n	80050d6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80050a8:	4b14      	ldr	r3, [pc, #80]	; (80050fc <ethernetif_update_config+0xf4>)
 80050aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	e011      	b.n	80050d6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <ethernetif_update_config+0xb0>
          goto error;
 80050b6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80050b8:	4b10      	ldr	r3, [pc, #64]	; (80050fc <ethernetif_update_config+0xf4>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	08db      	lsrs	r3, r3, #3
 80050be:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <ethernetif_update_config+0xf4>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	085b      	lsrs	r3, r3, #1
 80050c6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80050c8:	4313      	orrs	r3, r2
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	2100      	movs	r1, #0
 80050d0:	480a      	ldr	r0, [pc, #40]	; (80050fc <ethernetif_update_config+0xf4>)
 80050d2:	f7fd f873 	bl	80021bc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80050d6:	2100      	movs	r1, #0
 80050d8:	4808      	ldr	r0, [pc, #32]	; (80050fc <ethernetif_update_config+0xf4>)
 80050da:	f7fd f933 	bl	8002344 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80050de:	4807      	ldr	r0, [pc, #28]	; (80050fc <ethernetif_update_config+0xf4>)
 80050e0:	f7fd f8d2 	bl	8002288 <HAL_ETH_Start>
 80050e4:	e002      	b.n	80050ec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80050e6:	4805      	ldr	r0, [pc, #20]	; (80050fc <ethernetif_update_config+0xf4>)
 80050e8:	f7fd f8fd 	bl	80022e6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f807 	bl	8005100 <ethernetif_notify_conn_changed>
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20002860 	.word	0x20002860

08005100 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <fs_open+0x16>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <fs_open+0x1c>
    return ERR_ARG;
 800512a:	f06f 030f 	mvn.w	r3, #15
 800512e:	e028      	b.n	8005182 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005130:	4b16      	ldr	r3, [pc, #88]	; (800518c <fs_open+0x78>)
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e020      	b.n	8005178 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4619      	mov	r1, r3
 800513c:	6838      	ldr	r0, [r7, #0]
 800513e:	f7fb f847 	bl	80001d0 <strcmp>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d114      	bne.n	8005172 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	7c1a      	ldrb	r2, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e007      	b.n	8005182 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1db      	bne.n	8005136 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800517e:	f06f 0305 	mvn.w	r3, #5
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	0801a9d0 	.word	0x0801a9d0

08005190 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	1ad3      	subs	r3, r2, r3
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80051c8:	20e8      	movs	r0, #232	; 0xe8
 80051ca:	f003 fb9d 	bl	8008908 <mem_malloc>
 80051ce:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80051d6:	22e8      	movs	r2, #232	; 0xe8
 80051d8:	2100      	movs	r1, #0
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f00d fe40 	bl	8012e60 <memset>
  }
  return ret;
 80051e0:	687b      	ldr	r3, [r7, #4]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f003 fa1f 	bl	800863c <mem_free>
  }
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800520e:	22b0      	movs	r2, #176	; 0xb0
 8005210:	2100      	movs	r1, #0
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f00d fe24 	bl	8012e60 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005226:	20b0      	movs	r0, #176	; 0xb0
 8005228:	f003 fb6e 	bl	8008908 <mem_malloc>
 800522c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <http_state_alloc+0x1a>
    http_state_init(ret);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ffe6 	bl	8005206 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800523a:	687b      	ldr	r3, [r7, #4]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff99 	bl	8005190 <fs_close>
    hs->handle = NULL;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff ffba 	bl	80051ea <http_ssi_state_free>
    hs->ssi = NULL;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4618      	mov	r0, r3
 800528a:	f004 fb31 	bl	80098f0 <pbuf_free>
    hs->req = NULL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <http_state_free+0x1a>
    http_state_eof(hs);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffca 	bl	8005244 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f003 f9c3 	bl	800863c <mem_free>
  }
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <http_write+0x22>
 80052d4:	4b2c      	ldr	r3, [pc, #176]	; (8005388 <http_write+0xc8>)
 80052d6:	f240 2219 	movw	r2, #537	; 0x219
 80052da:	492c      	ldr	r1, [pc, #176]	; (800538c <http_write+0xcc>)
 80052dc:	482c      	ldr	r0, [pc, #176]	; (8005390 <http_write+0xd0>)
 80052de:	f00d fdc7 	bl	8012e70 <iprintf>
  len = *length;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80052e8:	8afb      	ldrh	r3, [r7, #22]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <http_write+0x32>
    return ERR_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	e045      	b.n	800537e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80052f8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80052fa:	8aba      	ldrh	r2, [r7, #20]
 80052fc:	8afb      	ldrh	r3, [r7, #22]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d201      	bcs.n	8005306 <http_write+0x46>
    len = max_len;
 8005302:	8abb      	ldrh	r3, [r7, #20]
 8005304:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800530e:	8afa      	ldrh	r2, [r7, #22]
 8005310:	8abb      	ldrh	r3, [r7, #20]
 8005312:	429a      	cmp	r2, r3
 8005314:	d901      	bls.n	800531a <http_write+0x5a>
    len = max_len;
 8005316:	8abb      	ldrh	r3, [r7, #20]
 8005318:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	8afa      	ldrh	r2, [r7, #22]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f009 f9e5 	bl	800e6f0 <tcp_write>
 8005326:	4603      	mov	r3, r0
 8005328:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800532a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005332:	d10f      	bne.n	8005354 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005344:	2b08      	cmp	r3, #8
 8005346:	d902      	bls.n	800534e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005348:	2301      	movs	r3, #1
 800534a:	82fb      	strh	r3, [r7, #22]
 800534c:	e002      	b.n	8005354 <http_write+0x94>
      } else {
        len /= 2;
 800534e:	8afb      	ldrh	r3, [r7, #22]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005354:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535c:	d102      	bne.n	8005364 <http_write+0xa4>
 800535e:	8afb      	ldrh	r3, [r7, #22]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d8da      	bhi.n	800531a <http_write+0x5a>

  if (err == ERR_OK) {
 8005364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8afa      	ldrh	r2, [r7, #22]
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e002      	b.n	800537a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800537a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	08014788 	.word	0x08014788
 800538c:	080147c0 	.word	0x080147c0
 8005390:	080147d0 	.word	0x080147d0

08005394 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 80053a2:	2100      	movs	r1, #0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f006 fa65 	bl	800b874 <tcp_arg>
  altcp_recv(pcb, NULL);
 80053aa:	2100      	movs	r1, #0
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f006 fa73 	bl	800b898 <tcp_recv>
  altcp_err(pcb, NULL);
 80053b2:	2100      	movs	r1, #0
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f006 fab3 	bl	800b920 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2100      	movs	r1, #0
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f006 fae8 	bl	800b994 <tcp_poll>
  altcp_sent(pcb, NULL);
 80053c4:	2100      	movs	r1, #0
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f006 fa88 	bl	800b8dc <tcp_sent>
  if (hs != NULL) {
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80053d2:	68b8      	ldr	r0, [r7, #8]
 80053d4:	f7ff ff62 	bl	800529c <http_state_free>
  }

  if (abort_conn) {
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f005 f872 	bl	800a4c8 <tcp_abort>
    return ERR_OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	e00f      	b.n	8005408 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f004 ff83 	bl	800a2f4 <tcp_close>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80053f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80053fa:	2204      	movs	r2, #4
 80053fc:	4904      	ldr	r1, [pc, #16]	; (8005410 <http_close_or_abort_conn+0x7c>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f006 fac8 	bl	800b994 <tcp_poll>
  }
  return err;
 8005404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	08006483 	.word	0x08006483

08005414 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800541e:	2200      	movs	r2, #0
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ffb6 	bl	8005394 <http_close_or_abort_conn>
 8005428:	4603      	mov	r3, r0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff ffe8 	bl	8005414 <http_close_conn>
  }
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <extract_uri_parameters+0x18>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <extract_uri_parameters+0x1c>
    return (0);
 8005464:	2300      	movs	r3, #0
 8005466:	e04b      	b.n	8005500 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e03f      	b.n	80054f2 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	320c      	adds	r2, #12
 8005478:	6979      	ldr	r1, [r7, #20]
 800547a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005482:	2126      	movs	r1, #38	; 0x26
 8005484:	6978      	ldr	r0, [r7, #20]
 8005486:	f00d fd6b 	bl	8012f60 <strchr>
 800548a:	6178      	str	r0, [r7, #20]
    if (pair) {
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <extract_uri_parameters+0x54>
      *pair = '\0';
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
      pair++;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3301      	adds	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
 800549e:	e00c      	b.n	80054ba <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 80054a0:	2120      	movs	r1, #32
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f00d fd5c 	bl	8012f60 <strchr>
 80054a8:	6178      	str	r0, [r7, #20]
      if (pair) {
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <extract_uri_parameters+0x6a>
        *pair = '\0';
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 80054ba:	213d      	movs	r1, #61	; 0x3d
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f00d fd4f 	bl	8012f60 <strchr>
 80054c2:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <extract_uri_parameters+0x94>
      *equals = '\0';
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1c59      	adds	r1, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	321c      	adds	r2, #28
 80054da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80054de:	e005      	b.n	80054ec <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	321c      	adds	r2, #28
 80054e6:	2100      	movs	r1, #0
 80054e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	3301      	adds	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	dc02      	bgt.n	80054fe <extract_uri_parameters+0xb2>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1b9      	bne.n	8005472 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80054fe:	693b      	ldr	r3, [r7, #16]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <get_tag_insert+0x1c>
 8005516:	4b52      	ldr	r3, [pc, #328]	; (8005660 <get_tag_insert+0x158>)
 8005518:	f44f 7241 	mov.w	r2, #772	; 0x304
 800551c:	4951      	ldr	r1, [pc, #324]	; (8005664 <get_tag_insert+0x15c>)
 800551e:	4852      	ldr	r0, [pc, #328]	; (8005668 <get_tag_insert+0x160>)
 8005520:	f00d fca6 	bl	8012e70 <iprintf>
  ssi = hs->ssi;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <get_tag_insert+0x36>
 8005530:	4b4b      	ldr	r3, [pc, #300]	; (8005660 <get_tag_insert+0x158>)
 8005532:	f240 3206 	movw	r2, #774	; 0x306
 8005536:	494d      	ldr	r1, [pc, #308]	; (800566c <get_tag_insert+0x164>)
 8005538:	484b      	ldr	r0, [pc, #300]	; (8005668 <get_tag_insert+0x160>)
 800553a:	f00d fc99 	bl	8012e70 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800553e:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <get_tag_insert+0x168>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d02e      	beq.n	80055a4 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8005546:	4b4b      	ldr	r3, [pc, #300]	; (8005674 <get_tag_insert+0x16c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02a      	beq.n	80055a4 <get_tag_insert+0x9c>
 800554e:	4b4a      	ldr	r3, [pc, #296]	; (8005678 <get_tag_insert+0x170>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d026      	beq.n	80055a4 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005556:	2300      	movs	r3, #0
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e01e      	b.n	800559a <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f103 0012 	add.w	r0, r3, #18
 8005562:	4b44      	ldr	r3, [pc, #272]	; (8005674 <get_tag_insert+0x16c>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4619      	mov	r1, r3
 8005570:	f7fa fe2e 	bl	80001d0 <strcmp>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10c      	bne.n	8005594 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800557a:	4b3d      	ldr	r3, [pc, #244]	; (8005670 <get_tag_insert+0x168>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	f102 0123 	add.w	r1, r2, #35	; 0x23
 8005584:	22c0      	movs	r2, #192	; 0xc0
 8005586:	6978      	ldr	r0, [r7, #20]
 8005588:	4798      	blx	r3
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8005592:	e061      	b.n	8005658 <get_tag_insert+0x150>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3301      	adds	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <get_tag_insert+0x170>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	dbdb      	blt.n	800555c <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3312      	adds	r3, #18
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa fe1b 	bl	80001e4 <strlen>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2ba6      	cmp	r3, #166	; 0xa6
 80055b2:	d818      	bhi.n	80055e6 <get_tag_insert+0xde>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	3312      	adds	r3, #18
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fa fe13 	bl	80001e4 <strlen>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b11      	cmp	r3, #17
 80055c2:	d810      	bhi.n	80055e6 <get_tag_insert+0xde>
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3312      	adds	r3, #18
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fa fe0b 	bl	80001e4 <strlen>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2ba6      	cmp	r3, #166	; 0xa6
 80055d2:	d806      	bhi.n	80055e2 <get_tag_insert+0xda>
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3312      	adds	r3, #18
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa fe03 	bl	80001e4 <strlen>
 80055de:	4603      	mov	r3, r0
 80055e0:	e002      	b.n	80055e8 <get_tag_insert+0xe0>
 80055e2:	23a7      	movs	r3, #167	; 0xa7
 80055e4:	e000      	b.n	80055e8 <get_tag_insert+0xe0>
 80055e6:	2311      	movs	r3, #17
 80055e8:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	3323      	adds	r3, #35	; 0x23
 80055ee:	2212      	movs	r2, #18
 80055f0:	4922      	ldr	r1, [pc, #136]	; (800567c <get_tag_insert+0x174>)
 80055f2:	4618      	mov	r0, r3
 80055f4:	f00d fc0c 	bl	8012e10 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f103 0035 	add.w	r0, r3, #53	; 0x35
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3312      	adds	r3, #18
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4619      	mov	r1, r3
 8005606:	f00d fc03 	bl	8012e10 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	3312      	adds	r3, #18
 800560e:	3320      	adds	r3, #32
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	3303      	adds	r3, #3
 8005616:	2207      	movs	r2, #7
 8005618:	4919      	ldr	r1, [pc, #100]	; (8005680 <get_tag_insert+0x178>)
 800561a:	4618      	mov	r0, r3
 800561c:	f00d fbf8 	bl	8012e10 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3319      	adds	r3, #25
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  len = strlen(ssi->tag_insert);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3323      	adds	r3, #35	; 0x23
 8005632:	4618      	mov	r0, r3
 8005634:	f7fa fdd6 	bl	80001e4 <strlen>
 8005638:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005640:	d306      	bcc.n	8005650 <get_tag_insert+0x148>
 8005642:	4b07      	ldr	r3, [pc, #28]	; (8005660 <get_tag_insert+0x158>)
 8005644:	f240 323f 	movw	r2, #831	; 0x33f
 8005648:	490e      	ldr	r1, [pc, #56]	; (8005684 <get_tag_insert+0x17c>)
 800564a:	4807      	ldr	r0, [pc, #28]	; (8005668 <get_tag_insert+0x160>)
 800564c:	f00d fc10 	bl	8012e70 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	b29a      	uxth	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	81da      	strh	r2, [r3, #14]
}
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	08014788 	.word	0x08014788
 8005664:	080147f8 	.word	0x080147f8
 8005668:	080147d0 	.word	0x080147d0
 800566c:	08014804 	.word	0x08014804
 8005670:	20000500 	.word	0x20000500
 8005674:	20000508 	.word	0x20000508
 8005678:	20000504 	.word	0x20000504
 800567c:	08014810 	.word	0x08014810
 8005680:	08014824 	.word	0x08014824
 8005684:	0801482c 	.word	0x0801482c

08005688 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d105      	bne.n	80056a6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff fec8 	bl	8005432 <http_eof>
    return 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	e016      	b.n	80056d4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fd7a 	bl	80051a4 <fs_bytes_left>
 80056b0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dc05      	bgt.n	80056c4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff feb9 	bl	8005432 <http_eof>
    return 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e007      	b.n	80056d4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <http_check_eof+0x54>)
 80056c6:	f240 429d 	movw	r2, #1181	; 0x49d
 80056ca:	4905      	ldr	r1, [pc, #20]	; (80056e0 <http_check_eof+0x58>)
 80056cc:	4805      	ldr	r0, [pc, #20]	; (80056e4 <http_check_eof+0x5c>)
 80056ce:	f00d fbcf 	bl	8012e70 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80056d2:	2301      	movs	r3, #1
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	08014788 	.word	0x08014788
 80056e0:	0801483c 	.word	0x0801483c
 80056e4:	080147d0 	.word	0x080147d0

080056e8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80056fe:	4293      	cmp	r3, r2
 8005700:	d803      	bhi.n	800570a <http_send_data_nonssi+0x22>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	b29b      	uxth	r3, r3
 8005708:	e001      	b.n	800570e <http_send_data_nonssi+0x26>
 800570a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800570e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6999      	ldr	r1, [r3, #24]
 8005714:	f107 020c 	add.w	r2, r7, #12
 8005718:	2300      	movs	r3, #0
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff fdd0 	bl	80052c0 <http_write>
 8005720:	4603      	mov	r3, r0
 8005722:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10d      	bne.n	8005748 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	89ba      	ldrh	r2, [r7, #12]
 8005736:	441a      	add	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	89ba      	ldrh	r2, [r7, #12]
 8005742:	1a9a      	subs	r2, r3, r2
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8005748:	7bfb      	ldrb	r3, [r7, #15]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <http_send_data_ssi+0x2c>
 8005772:	4b9d      	ldr	r3, [pc, #628]	; (80059e8 <http_send_data_ssi+0x294>)
 8005774:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005778:	499c      	ldr	r1, [pc, #624]	; (80059ec <http_send_data_ssi+0x298>)
 800577a:	489d      	ldr	r0, [pc, #628]	; (80059f0 <http_send_data_ssi+0x29c>)
 800577c:	f00d fb78 	bl	8012e70 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8005786:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	429a      	cmp	r2, r3
 8005792:	f240 826a 	bls.w	8005c6a <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80057a4:	4293      	cmp	r3, r2
 80057a6:	dc06      	bgt.n	80057b6 <http_send_data_ssi+0x62>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	e001      	b.n	80057ba <http_send_data_ssi+0x66>
 80057b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057ba:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	6999      	ldr	r1, [r3, #24]
 80057c0:	f107 020e 	add.w	r2, r7, #14
 80057c4:	2300      	movs	r3, #0
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fd7a 	bl	80052c0 <http_write>
 80057cc:	4603      	mov	r3, r0
 80057ce:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80057d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10d      	bne.n	80057f4 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80057d8:	2301      	movs	r3, #1
 80057da:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	89fa      	ldrh	r2, [r7, #14]
 80057e2:	441a      	add	r2, r3
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	89fa      	ldrh	r2, [r7, #14]
 80057ee:	1a9a      	subs	r2, r3, r2
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 8235 	bne.w	8005c6a <http_send_data_ssi+0x516>
      return data_to_send;
 8005800:	7dbb      	ldrb	r3, [r7, #22]
 8005802:	e27b      	b.n	8005cfc <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8005804:	89fb      	ldrh	r3, [r7, #14]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <http_send_data_ssi+0xba>
      return data_to_send;
 800580a:	7dbb      	ldrb	r3, [r7, #22]
 800580c:	e276      	b.n	8005cfc <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005814:	2b04      	cmp	r3, #4
 8005816:	f200 8227 	bhi.w	8005c68 <http_send_data_ssi+0x514>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <http_send_data_ssi+0xcc>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005835 	.word	0x08005835
 8005824:	08005887 	.word	0x08005887
 8005828:	080058f9 	.word	0x080058f9
 800582c:	08005a47 	.word	0x08005a47
 8005830:	08005b8f 	.word	0x08005b8f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005834:	2300      	movs	r3, #0
 8005836:	757b      	strb	r3, [r7, #21]
 8005838:	e017      	b.n	800586a <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	781a      	ldrb	r2, [r3, #0]
 8005840:	7d7b      	ldrb	r3, [r7, #21]
 8005842:	496c      	ldr	r1, [pc, #432]	; (80059f4 <http_send_data_ssi+0x2a0>)
 8005844:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d10a      	bne.n	8005864 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	7d7a      	ldrb	r2, [r7, #21]
 8005852:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_index = 1;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2201      	movs	r2, #1
 8005860:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8005862:	e005      	b.n	8005870 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8005864:	7d7b      	ldrb	r3, [r7, #21]
 8005866:	3301      	adds	r3, #1
 8005868:	757b      	strb	r3, [r7, #21]
 800586a:	7d7b      	ldrb	r3, [r7, #21]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d9e4      	bls.n	800583a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	601a      	str	r2, [r3, #0]
        break;
 8005884:	e1f1      	b.n	8005c6a <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	7c1b      	ldrb	r3, [r3, #16]
 800588a:	461a      	mov	r2, r3
 800588c:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <http_send_data_ssi+0x2a0>)
 800588e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	8992      	ldrh	r2, [r2, #12]
 8005896:	4413      	add	r3, r2
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d107      	bne.n	80058ae <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2200      	movs	r2, #0
 80058a2:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80058ac:	e1dd      	b.n	8005c6a <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	7c1b      	ldrb	r3, [r3, #16]
 80058b8:	4619      	mov	r1, r3
 80058ba:	4b4e      	ldr	r3, [pc, #312]	; (80059f4 <http_send_data_ssi+0x2a0>)
 80058bc:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80058c0:	6939      	ldr	r1, [r7, #16]
 80058c2:	8989      	ldrh	r1, [r1, #12]
 80058c4:	440b      	add	r3, r1
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d106      	bne.n	80058da <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	899b      	ldrh	r3, [r3, #12]
 80058d0:	3301      	adds	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	819a      	strh	r2, [r3, #12]
 80058d8:	e003      	b.n	80058e2 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	1e5a      	subs	r2, r3, #1
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	601a      	str	r2, [r3, #0]
        }
        break;
 80058f6:	e1b8      	b.n	8005c6a <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	899b      	ldrh	r3, [r3, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11e      	bne.n	800593e <http_send_data_ssi+0x1ea>
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b20      	cmp	r3, #32
 8005908:	d00e      	beq.n	8005928 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005910:	2b09      	cmp	r3, #9
 8005912:	d009      	beq.n	8005928 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b0a      	cmp	r3, #10
 800591c:	d004      	beq.n	8005928 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005924:	2b0d      	cmp	r3, #13
 8005926:	d10a      	bne.n	800593e <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	1e5a      	subs	r2, r3, #1
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	1c5a      	adds	r2, r3, #1
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	601a      	str	r2, [r3, #0]
          break;
 800593c:	e195      	b.n	8005c6a <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	7c1b      	ldrb	r3, [r3, #16]
 8005948:	492a      	ldr	r1, [pc, #168]	; (80059f4 <http_send_data_ssi+0x2a0>)
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	440b      	add	r3, r1
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d013      	beq.n	800597e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800595c:	2b20      	cmp	r3, #32
 800595e:	d00e      	beq.n	800597e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b09      	cmp	r3, #9
 8005968:	d009      	beq.n	800597e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8005970:	2b0a      	cmp	r3, #10
 8005972:	d004      	beq.n	800597e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b0d      	cmp	r3, #13
 800597c:	d142      	bne.n	8005a04 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	899b      	ldrh	r3, [r3, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          if (ssi->tag_index == 0) {
 800598e:	e04f      	b.n	8005a30 <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2203      	movs	r2, #3
 8005994:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	899b      	ldrh	r3, [r3, #12]
 800599c:	2bff      	cmp	r3, #255	; 0xff
 800599e:	d906      	bls.n	80059ae <http_send_data_ssi+0x25a>
 80059a0:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <http_send_data_ssi+0x294>)
 80059a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80059a6:	4914      	ldr	r1, [pc, #80]	; (80059f8 <http_send_data_ssi+0x2a4>)
 80059a8:	4811      	ldr	r0, [pc, #68]	; (80059f0 <http_send_data_ssi+0x29c>)
 80059aa:	f00d fa61 	bl	8012e70 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	899b      	ldrh	r3, [r3, #12]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	899b      	ldrh	r3, [r3, #12]
 80059bc:	461a      	mov	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	4413      	add	r3, r2
 80059c2:	2200      	movs	r2, #0
 80059c4:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781a      	ldrb	r2, [r3, #0]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	7c1b      	ldrb	r3, [r3, #16]
 80059d0:	4908      	ldr	r1, [pc, #32]	; (80059f4 <http_send_data_ssi+0x2a0>)
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	440b      	add	r3, r1
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d10e      	bne.n	80059fc <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	2201      	movs	r2, #1
 80059e2:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 80059e4:	e024      	b.n	8005a30 <http_send_data_ssi+0x2dc>
 80059e6:	bf00      	nop
 80059e8:	08014788 	.word	0x08014788
 80059ec:	08014804 	.word	0x08014804
 80059f0:	080147d0 	.word	0x080147d0
 80059f4:	0801aa20 	.word	0x0801aa20
 80059f8:	08014874 	.word	0x08014874
            } else {
              ssi->tag_index = 0;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2200      	movs	r2, #0
 8005a00:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8005a02:	e015      	b.n	8005a30 <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	899b      	ldrh	r3, [r3, #12]
 8005a08:	2b0f      	cmp	r3, #15
 8005a0a:	d80d      	bhi.n	8005a28 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	899b      	ldrh	r3, [r3, #12]
 8005a14:	1c59      	adds	r1, r3, #1
 8005a16:	b288      	uxth	r0, r1
 8005a18:	6939      	ldr	r1, [r7, #16]
 8005a1a:	8188      	strh	r0, [r1, #12]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	440b      	add	r3, r1
 8005a24:	749a      	strb	r2, [r3, #18]
 8005a26:	e003      	b.n	8005a30 <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	1e5a      	subs	r2, r3, #1
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	601a      	str	r2, [r3, #0]

        break;
 8005a44:	e111      	b.n	8005c6a <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	899b      	ldrh	r3, [r3, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11e      	bne.n	8005a8c <http_send_data_ssi+0x338>
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d00e      	beq.n	8005a76 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d009      	beq.n	8005a76 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b0a      	cmp	r3, #10
 8005a6a:	d004      	beq.n	8005a76 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8005a72:	2b0d      	cmp	r3, #13
 8005a74:	d10a      	bne.n	8005a8c <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	1e5a      	subs	r2, r3, #1
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	601a      	str	r2, [r3, #0]
          break;
 8005a8a:	e0ee      	b.n	8005c6a <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	7c1b      	ldrb	r3, [r3, #16]
 8005a96:	499b      	ldr	r1, [pc, #620]	; (8005d04 <http_send_data_ssi+0x5b0>)
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	440b      	add	r3, r1
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	6939      	ldr	r1, [r7, #16]
 8005aa0:	8989      	ldrh	r1, [r1, #12]
 8005aa2:	440b      	add	r3, r1
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d162      	bne.n	8005b70 <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	899b      	ldrh	r3, [r3, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	7c1b      	ldrb	r3, [r3, #16]
 8005ace:	4a8d      	ldr	r2, [pc, #564]	; (8005d04 <http_send_data_ssi+0x5b0>)
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	4413      	add	r3, r2
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	8992      	ldrh	r2, [r2, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 80c3 	bne.w	8005c6a <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8005ae4:	6838      	ldr	r0, [r7, #0]
 8005ae6:	f7ff fd0f 	bl	8005508 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2200      	movs	r2, #0
 8005aee:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2204      	movs	r2, #4
 8005af4:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	f240 80ae 	bls.w	8005c6a <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	dc06      	bgt.n	8005b2e <http_send_data_ssi+0x3da>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	e001      	b.n	8005b32 <http_send_data_ssi+0x3de>
 8005b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b32:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6999      	ldr	r1, [r3, #24]
 8005b38:	f107 020e 	add.w	r2, r7, #14
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff fbbe 	bl	80052c0 <http_write>
 8005b44:	4603      	mov	r3, r0
 8005b46:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8005b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f040 808c 	bne.w	8005c6a <http_send_data_ssi+0x516>
                data_to_send = 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	89fa      	ldrh	r2, [r7, #14]
 8005b5c:	441a      	add	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	89fa      	ldrh	r2, [r7, #14]
 8005b68:	1a9a      	subs	r2, r3, r2
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b6e:	e07c      	b.n	8005c6a <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	1e5a      	subs	r2, r3, #1
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        }
        break;
 8005b8c:	e06d      	b.n	8005c6a <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d935      	bls.n	8005c06 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	dc06      	bgt.n	8005bba <http_send_data_ssi+0x466>
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	e001      	b.n	8005bbe <http_send_data_ssi+0x46a>
 8005bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bbe:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8005bc0:	89fb      	ldrh	r3, [r7, #14]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6999      	ldr	r1, [r3, #24]
 8005bca:	f107 020e 	add.w	r2, r7, #14
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fb75 	bl	80052c0 <http_write>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]
 8005bda:	e001      	b.n	8005be0 <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8005be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d140      	bne.n	8005c6a <http_send_data_ssi+0x516>
            data_to_send = 1;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	89fa      	ldrh	r2, [r7, #14]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	89fa      	ldrh	r2, [r7, #14]
 8005bfe:	1a9a      	subs	r2, r3, r2
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
 8005c04:	e031      	b.n	8005c6a <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	899a      	ldrh	r2, [r3, #12]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	89db      	ldrh	r3, [r3, #14]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d222      	bcs.n	8005c58 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	89da      	ldrh	r2, [r3, #14]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	899b      	ldrh	r3, [r3, #12]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	899b      	ldrh	r3, [r3, #12]
 8005c24:	3320      	adds	r3, #32
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	1cd9      	adds	r1, r3, #3
 8005c2c:	f107 020e 	add.w	r2, r7, #14
 8005c30:	2301      	movs	r3, #1
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff fb44 	bl	80052c0 <http_write>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8005c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d112      	bne.n	8005c6a <http_send_data_ssi+0x516>
              data_to_send = 1;
 8005c44:	2301      	movs	r3, #1
 8005c46:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	899a      	ldrh	r2, [r3, #12]
 8005c4c:	89fb      	ldrh	r3, [r7, #14]
 8005c4e:	4413      	add	r3, r2
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	819a      	strh	r2, [r3, #12]
 8005c56:	e008      	b.n	8005c6a <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8005c66:	e000      	b.n	8005c6a <http_send_data_ssi+0x516>
        default:
          break;
 8005c68:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d003      	beq.n	8005c7c <http_send_data_ssi+0x528>
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <http_send_data_ssi+0x532>
 8005c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f43f adbf 	beq.w	8005804 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d034      	beq.n	8005cfa <http_send_data_ssi+0x5a6>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d92e      	bls.n	8005cfa <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005caa:	4293      	cmp	r3, r2
 8005cac:	dc06      	bgt.n	8005cbc <http_send_data_ssi+0x568>
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	e001      	b.n	8005cc0 <http_send_data_ssi+0x56c>
 8005cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc0:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	f107 020e 	add.w	r2, r7, #14
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7ff faf7 	bl	80052c0 <http_write>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8005cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10d      	bne.n	8005cfa <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	89fa      	ldrh	r2, [r7, #14]
 8005ce8:	441a      	add	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	89fa      	ldrh	r2, [r7, #14]
 8005cf4:	1a9a      	subs	r2, r3, r2
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8005cfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	0801aa20 	.word	0x0801aa20

08005d08 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005d12:	2300      	movs	r3, #0
 8005d14:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <http_send+0x18>
    return 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e030      	b.n	8005d82 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d108      	bne.n	8005d3a <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fcac 	bl	8005688 <http_check_eof>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <http_send+0x32>
      return 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e023      	b.n	8005d82 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d006      	beq.n	8005d50 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 8005d42:	6839      	ldr	r1, [r7, #0]
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fd05 	bl	8005754 <http_send_data_ssi>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	73fb      	strb	r3, [r7, #15]
 8005d4e:	e005      	b.n	8005d5c <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fcc8 	bl	80056e8 <http_send_data_nonssi>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10d      	bne.n	8005d80 <http_send+0x78>
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff fa1b 	bl	80051a4 <fs_bytes_left>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	dc05      	bgt.n	8005d80 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fb5b 	bl	8005432 <http_eof>
    return 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <http_get_404_file+0x80>)
 8005d9a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7ff f9b5 	bl	8005114 <fs_open>
 8005daa:	4603      	mov	r3, r0
 8005dac:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8005dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d024      	beq.n	8005e00 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <http_get_404_file+0x84>)
 8005dba:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f7ff f9a5 	bl	8005114 <fs_open>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d014      	beq.n	8005e00 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	4a0e      	ldr	r2, [pc, #56]	; (8005e14 <http_get_404_file+0x88>)
 8005dda:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7ff f995 	bl	8005114 <fs_open>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
        return NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	0801488c 	.word	0x0801488c
 8005e10:	08014898 	.word	0x08014898
 8005e14:	080148a4 	.word	0x080148a4

08005e18 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08e      	sub	sp, #56	; 0x38
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <http_parse_request+0x24>
 8005e2e:	4b65      	ldr	r3, [pc, #404]	; (8005fc4 <http_parse_request+0x1ac>)
 8005e30:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8005e34:	4964      	ldr	r1, [pc, #400]	; (8005fc8 <http_parse_request+0x1b0>)
 8005e36:	4865      	ldr	r0, [pc, #404]	; (8005fcc <http_parse_request+0x1b4>)
 8005e38:	f00d f81a 	bl	8012e70 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <http_parse_request+0x38>
 8005e42:	4b60      	ldr	r3, [pc, #384]	; (8005fc4 <http_parse_request+0x1ac>)
 8005e44:	f240 72af 	movw	r2, #1967	; 0x7af
 8005e48:	4961      	ldr	r1, [pc, #388]	; (8005fd0 <http_parse_request+0x1b8>)
 8005e4a:	4860      	ldr	r0, [pc, #384]	; (8005fcc <http_parse_request+0x1b4>)
 8005e4c:	f00d f810 	bl	8012e70 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <http_parse_request+0x48>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005e60:	f06f 0307 	mvn.w	r3, #7
 8005e64:	e0a9      	b.n	8005fba <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e72:	621a      	str	r2, [r3, #32]
 8005e74:	e005      	b.n	8005e82 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f003 fdf9 	bl	8009a74 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8005e82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e84:	f003 fdd4 	bl	8009a30 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d012      	beq.n	8005eb8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	891b      	ldrh	r3, [r3, #8]
 8005e98:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	bf28      	it	cs
 8005ea0:	4613      	movcs	r3, r2
 8005ea2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	6a18      	ldr	r0, [r3, #32]
 8005ea8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005eaa:	2300      	movs	r3, #0
 8005eac:	4949      	ldr	r1, [pc, #292]	; (8005fd4 <http_parse_request+0x1bc>)
 8005eae:	f003 ff09 	bl	8009cc4 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005eb2:	4b48      	ldr	r3, [pc, #288]	; (8005fd4 <http_parse_request+0x1bc>)
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	e005      	b.n	8005ec4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	895b      	ldrh	r3, [r3, #10]
 8005ec2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005ec4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ec6:	2b06      	cmp	r3, #6
 8005ec8:	d962      	bls.n	8005f90 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005eca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4942      	ldr	r1, [pc, #264]	; (8005fd8 <http_parse_request+0x1c0>)
 8005ed0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ed2:	f002 f9f5 	bl	80082c0 <lwip_strnstr>
 8005ed6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d058      	beq.n	8005f90 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	493d      	ldr	r1, [pc, #244]	; (8005fdc <http_parse_request+0x1c4>)
 8005ee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005ee8:	f00d f84f 	bl	8012f8a <strncmp>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <http_parse_request+0x108>
        sp1 = data + 3;
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	3303      	adds	r3, #3
 8005ef6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	8b7a      	ldrh	r2, [r7, #26]
 8005f0e:	4934      	ldr	r1, [pc, #208]	; (8005fe0 <http_parse_request+0x1c8>)
 8005f10:	4618      	mov	r0, r3
 8005f12:	f002 f9d5 	bl	80082c0 <lwip_strnstr>
 8005f16:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d111      	bne.n	8005f42 <http_parse_request+0x12a>
 8005f1e:	e006      	b.n	8005f2e <http_parse_request+0x116>
        data[4] = 0;
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	3304      	adds	r3, #4
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005f28:	f06f 030f 	mvn.w	r3, #15
 8005f2c:	e045      	b.n	8005fba <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	8b7a      	ldrh	r2, [r7, #26]
 8005f34:	4928      	ldr	r1, [pc, #160]	; (8005fd8 <http_parse_request+0x1c0>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f002 f9c2 	bl	80082c0 <lwip_strnstr>
 8005f3c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d01e      	beq.n	8005f90 <http_parse_request+0x178>
 8005f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d91a      	bls.n	8005f90 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005f5a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4921      	ldr	r1, [pc, #132]	; (8005fe4 <http_parse_request+0x1cc>)
 8005f60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f62:	f002 f9ad 	bl	80082c0 <lwip_strnstr>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d011      	beq.n	8005f90 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005f78:	8b3b      	ldrh	r3, [r7, #24]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8005f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f84:	6979      	ldr	r1, [r7, #20]
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f000 f880 	bl	800608c <http_find_file>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	e014      	b.n	8005fba <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f003 fd33 	bl	8009a00 <pbuf_clen>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	891b      	ldrh	r3, [r3, #8]
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d205      	bcs.n	8005fb6 <http_parse_request+0x19e>
 8005faa:	8a7b      	ldrh	r3, [r7, #18]
 8005fac:	2b05      	cmp	r3, #5
 8005fae:	d802      	bhi.n	8005fb6 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005fb0:	f06f 0304 	mvn.w	r3, #4
 8005fb4:	e001      	b.n	8005fba <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005fb6:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3738      	adds	r7, #56	; 0x38
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08014788 	.word	0x08014788
 8005fc8:	080148b0 	.word	0x080148b0
 8005fcc:	080147d0 	.word	0x080147d0
 8005fd0:	080147f8 	.word	0x080147f8
 8005fd4:	200000c0 	.word	0x200000c0
 8005fd8:	080148bc 	.word	0x080148bc
 8005fdc:	080148c0 	.word	0x080148c0
 8005fe0:	080148c8 	.word	0x080148c8
 8005fe4:	080148cc 	.word	0x080148cc

08005fe8 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b088      	sub	sp, #32
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d040      	beq.n	800607e <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8006000:	213f      	movs	r1, #63	; 0x3f
 8006002:	6838      	ldr	r0, [r7, #0]
 8006004:	f00c ffac 	bl	8012f60 <strchr>
 8006008:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	613b      	str	r3, [r7, #16]
    ext = uri;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800601e:	212e      	movs	r1, #46	; 0x2e
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f00c ff9d 	bl	8012f60 <strchr>
 8006026:	6138      	str	r0, [r7, #16]
 8006028:	e009      	b.n	800603e <http_uri_is_ssi+0x56>
      ext = sub;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	617b      	str	r3, [r7, #20]
      sub++;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	3301      	adds	r3, #1
 8006032:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006034:	212e      	movs	r1, #46	; 0x2e
 8006036:	6938      	ldr	r0, [r7, #16]
 8006038:	f00c ff92 	bl	8012f60 <strchr>
 800603c:	6138      	str	r0, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f2      	bne.n	800602a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006044:	2300      	movs	r3, #0
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	e010      	b.n	800606c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800604a:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <http_uri_is_ssi+0xa0>)
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006052:	4619      	mov	r1, r3
 8006054:	6978      	ldr	r0, [r7, #20]
 8006056:	f002 f969 	bl	800832c <lwip_stricmp>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d102      	bne.n	8006066 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8006060:	2301      	movs	r3, #1
 8006062:	76fb      	strb	r3, [r7, #27]
        break;
 8006064:	e005      	b.n	8006072 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d9eb      	bls.n	800604a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <http_uri_is_ssi+0x96>
      *param = '?';
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	223f      	movs	r2, #63	; 0x3f
 800607c:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800607e:	7efb      	ldrb	r3, [r7, #27]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	0801a9e4 	.word	0x0801a9e4

0800608c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b093      	sub	sp, #76	; 0x4c
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800609c:	2300      	movs	r3, #0
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fa f89b 	bl	80001e4 <strlen>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d072      	beq.n	800619c <http_find_file+0x110>
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	3b01      	subs	r3, #1
 80060bc:	4413      	add	r3, r2
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b2f      	cmp	r3, #47	; 0x2f
 80060c2:	d16b      	bne.n	800619c <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80060c4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80060c6:	4a80      	ldr	r2, [pc, #512]	; (80062c8 <http_find_file+0x23c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d102      	bne.n	80060d2 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d164      	bne.n	800619c <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	3b01      	subs	r3, #1
 80060d6:	2b3f      	cmp	r3, #63	; 0x3f
 80060d8:	bf28      	it	cs
 80060da:	233f      	movcs	r3, #63	; 0x3f
 80060dc:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	4619      	mov	r1, r3
 80060ea:	4877      	ldr	r0, [pc, #476]	; (80062c8 <http_find_file+0x23c>)
 80060ec:	f00c fe90 	bl	8012e10 <memcpy>
      http_uri_buf[copy_len] = 0;
 80060f0:	4a75      	ldr	r2, [pc, #468]	; (80062c8 <http_find_file+0x23c>)
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	4413      	add	r3, r2
 80060f6:	2200      	movs	r2, #0
 80060f8:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80060fa:	2300      	movs	r3, #0
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060fe:	e04a      	b.n	8006196 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d028      	beq.n	8006158 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800610c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01e      	beq.n	8006152 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006114:	4a6d      	ldr	r2, [pc, #436]	; (80062cc <http_find_file+0x240>)
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa f861 	bl	80001e4 <strlen>
 8006122:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4293      	cmp	r3, r2
 800612a:	bf28      	it	cs
 800612c:	4613      	movcs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	4a65      	ldr	r2, [pc, #404]	; (80062c8 <http_find_file+0x23c>)
 8006134:	1898      	adds	r0, r3, r2
 8006136:	4a65      	ldr	r2, [pc, #404]	; (80062cc <http_find_file+0x240>)
 8006138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4619      	mov	r1, r3
 8006142:	f00c fe65 	bl	8012e10 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	4413      	add	r3, r2
 800614c:	4a5e      	ldr	r2, [pc, #376]	; (80062c8 <http_find_file+0x23c>)
 800614e:	2100      	movs	r1, #0
 8006150:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006152:	4b5d      	ldr	r3, [pc, #372]	; (80062c8 <http_find_file+0x23c>)
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
 8006156:	e004      	b.n	8006162 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006158:	4a5c      	ldr	r2, [pc, #368]	; (80062cc <http_find_file+0x240>)
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe ffd4 	bl	8005114 <fs_open>
 800616c:	4603      	mov	r3, r0
 800616e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8006170:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <http_find_file+0x104>
        uri = file_name;
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8006180:	4a52      	ldr	r2, [pc, #328]	; (80062cc <http_find_file+0x240>)
 8006182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	4413      	add	r3, r2
 8006188:	791b      	ldrb	r3, [r3, #4]
 800618a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800618e:	e005      	b.n	800619c <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006192:	3301      	adds	r3, #1
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	2b04      	cmp	r3, #4
 800619a:	d9b1      	bls.n	8006100 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d176      	bne.n	8006290 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	213f      	movs	r1, #63	; 0x3f
 80061a6:	4618      	mov	r0, r3
 80061a8:	f00c feda 	bl	8012f60 <strchr>
 80061ac:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80061ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80061b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
      params++;
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	3301      	adds	r3, #1
 80061be:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80061c0:	4b43      	ldr	r3, [pc, #268]	; (80062d0 <http_find_file+0x244>)
 80061c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061c6:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80061c8:	4b42      	ldr	r3, [pc, #264]	; (80062d4 <http_find_file+0x248>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d034      	beq.n	800623a <http_find_file+0x1ae>
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <http_find_file+0x24c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d030      	beq.n	800623a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 80061d8:	2300      	movs	r3, #0
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
 80061dc:	e028      	b.n	8006230 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80061de:	68b8      	ldr	r0, [r7, #8]
 80061e0:	4b3d      	ldr	r3, [pc, #244]	; (80062d8 <http_find_file+0x24c>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4413      	add	r3, r2
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4619      	mov	r1, r3
 80061ee:	f7f9 ffef 	bl	80001d0 <strcmp>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d118      	bne.n	800622a <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80061f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff f926 	bl	800544c <extract_uri_parameters>
 8006200:	4603      	mov	r3, r0
 8006202:	4a33      	ldr	r2, [pc, #204]	; (80062d0 <http_find_file+0x244>)
 8006204:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006206:	4b34      	ldr	r3, [pc, #208]	; (80062d8 <http_find_file+0x24c>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	00db      	lsls	r3, r3, #3
 800620e:	4413      	add	r3, r2
 8006210:	685c      	ldr	r4, [r3, #4]
 8006212:	4b2f      	ldr	r3, [pc, #188]	; (80062d0 <http_find_file+0x244>)
 8006214:	6819      	ldr	r1, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006222:	47a0      	blx	r4
 8006224:	4603      	mov	r3, r0
 8006226:	60bb      	str	r3, [r7, #8]
          break;
 8006228:	e007      	b.n	800623a <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	3301      	adds	r3, #1
 800622e:	633b      	str	r3, [r7, #48]	; 0x30
 8006230:	4b28      	ldr	r3, [pc, #160]	; (80062d4 <http_find_file+0x248>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006236:	429a      	cmp	r2, r3
 8006238:	dbd1      	blt.n	80061de <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	4611      	mov	r1, r2
 8006240:	4618      	mov	r0, r3
 8006242:	f7fe ff67 	bl	8005114 <fs_open>
 8006246:	4603      	mov	r3, r0
 8006248:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800624a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d102      	bne.n	8006258 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	63bb      	str	r3, [r7, #56]	; 0x38
 8006256:	e006      	b.n	8006266 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8006258:	f107 0308 	add.w	r3, r7, #8
 800625c:	4619      	mov	r1, r3
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff fd94 	bl	8005d8c <http_get_404_file>
 8006264:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b00      	cmp	r3, #0
 800626a:	d011      	beq.n	8006290 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	7c1b      	ldrb	r3, [r3, #16]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <http_find_file+0x1f4>
        tag_check = 1;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800627e:	e007      	b.n	8006290 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4619      	mov	r1, r3
 8006284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006286:	f7ff feaf 	bl	8005fe8 <http_uri_is_ssi>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fd75 	bl	8005d8c <http_get_404_file>
 80062a2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	4613      	mov	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f810 	bl	80062dc <http_init_file>
 80062bc:	4603      	mov	r3, r0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3744      	adds	r7, #68	; 0x44
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200004c0 	.word	0x200004c0
 80062cc:	0801a9f8 	.word	0x0801a9f8
 80062d0:	20000514 	.word	0x20000514
 80062d4:	20000510 	.word	0x20000510
 80062d8:	2000050c 	.word	0x2000050c

080062dc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d07d      	beq.n	80063ec <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <http_init_file+0x2a>
 80062f8:	4b45      	ldr	r3, [pc, #276]	; (8006410 <http_init_file+0x134>)
 80062fa:	f640 120b 	movw	r2, #2315	; 0x90b
 80062fe:	4945      	ldr	r1, [pc, #276]	; (8006414 <http_init_file+0x138>)
 8006300:	4845      	ldr	r0, [pc, #276]	; (8006418 <http_init_file+0x13c>)
 8006302:	f00c fdb5 	bl	8012e70 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8006306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d01c      	beq.n	8006348 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800630e:	f7fe ff58 	bl	80051c2 <http_ssi_state_alloc>
 8006312:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d016      	beq.n	8006348 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2200      	movs	r2, #0
 800631e:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
        ssi->parsed = file->data;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	461a      	mov	r2, r3
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da06      	bge.n	800636c <http_init_file+0x90>
 800635e:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <http_init_file+0x134>)
 8006360:	f640 1234 	movw	r2, #2356	; 0x934
 8006364:	492d      	ldr	r1, [pc, #180]	; (800641c <http_init_file+0x140>)
 8006366:	482c      	ldr	r0, [pc, #176]	; (8006418 <http_init_file+0x13c>)
 8006368:	f00c fd82 	bl	8012e70 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	461a      	mov	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	7c1b      	ldrb	r3, [r3, #16]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <http_init_file+0xbe>
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <http_init_file+0x134>)
 800638e:	f640 1243 	movw	r2, #2371	; 0x943
 8006392:	4923      	ldr	r1, [pc, #140]	; (8006420 <http_init_file+0x144>)
 8006394:	4820      	ldr	r0, [pc, #128]	; (8006418 <http_init_file+0x13c>)
 8006396:	f00c fd6b 	bl	8012e70 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d032      	beq.n	8006406 <http_init_file+0x12a>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	7c1b      	ldrb	r3, [r3, #16]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d02b      	beq.n	8006406 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6998      	ldr	r0, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	461a      	mov	r2, r3
 80063b8:	491a      	ldr	r1, [pc, #104]	; (8006424 <http_init_file+0x148>)
 80063ba:	f001 ff81 	bl	80082c0 <lwip_strnstr>
 80063be:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01f      	beq.n	8006406 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	1d1a      	adds	r2, r3, #4
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	441a      	add	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1ad2      	subs	r2, r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	625a      	str	r2, [r3, #36]	; 0x24
 80063ea:	e00c      	b.n	8006406 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3720      	adds	r7, #32
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	08014788 	.word	0x08014788
 8006414:	080148d4 	.word	0x080148d4
 8006418:	080147d0 	.word	0x080147d0
 800641c:	080148e8 	.word	0x080148e8
 8006420:	08014908 	.word	0x08014908
 8006424:	080148cc 	.word	0x080148cc

08006428 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <http_err+0x1c>
    http_state_free(hs);
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f7fe ff2c 	bl	800529c <http_state_free>
  }
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <http_sent+0x1c>
    return ERR_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e008      	b.n	800647a <http_sent+0x2e>
  }

  hs->retries = 0;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8006470:	6979      	ldr	r1, [r7, #20]
 8006472:	68b8      	ldr	r0, [r7, #8]
 8006474:	f7ff fc48 	bl	8005d08 <http_send>

  return ERR_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d107      	bne.n	80064a6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8006496:	2100      	movs	r1, #0
 8006498:	6838      	ldr	r0, [r7, #0]
 800649a:	f7fe ffbb 	bl	8005414 <http_close_conn>
 800649e:	4603      	mov	r3, r0
 80064a0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e021      	b.n	80064ea <http_poll+0x68>
  } else {
    hs->retries++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ac:	3301      	adds	r3, #1
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d105      	bne.n	80064cc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80064c0:	68f9      	ldr	r1, [r7, #12]
 80064c2:	6838      	ldr	r0, [r7, #0]
 80064c4:	f7fe ffa6 	bl	8005414 <http_close_conn>
      return ERR_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e00e      	b.n	80064ea <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d009      	beq.n	80064e8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	6838      	ldr	r0, [r7, #0]
 80064d8:	f7ff fc16 	bl	8005d08 <http_send>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80064e2:	6838      	ldr	r0, [r7, #0]
 80064e4:	f008 feee 	bl	800f2c4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8006506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d105      	bne.n	800651a <http_recv+0x26>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <http_recv+0x26>
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d111      	bne.n	800653e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	891b      	ldrh	r3, [r3, #8]
 8006524:	4619      	mov	r1, r3
 8006526:	68b8      	ldr	r0, [r7, #8]
 8006528:	f004 f9a8 	bl	800a87c <tcp_recved>
      pbuf_free(p);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f003 f9df 	bl	80098f0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	68b8      	ldr	r0, [r7, #8]
 8006536:	f7fe ff6d 	bl	8005414 <http_close_conn>
    return ERR_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e055      	b.n	80065ea <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	891b      	ldrh	r3, [r3, #8]
 8006542:	4619      	mov	r1, r3
 8006544:	68b8      	ldr	r0, [r7, #8]
 8006546:	f004 f999 	bl	800a87c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d147      	bne.n	80065e2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	6979      	ldr	r1, [r7, #20]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fc5e 	bl	8005e18 <http_parse_request>
 800655c:	4603      	mov	r3, r0
 800655e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006560:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d015      	beq.n	8006594 <http_recv+0xa0>
 8006568:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800656c:	f113 0f05 	cmn.w	r3, #5
 8006570:	d010      	beq.n	8006594 <http_recv+0xa0>
 8006572:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006576:	f113 0f10 	cmn.w	r3, #16
 800657a:	d00b      	beq.n	8006594 <http_recv+0xa0>
 800657c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006580:	f113 0f08 	cmn.w	r3, #8
 8006584:	d006      	beq.n	8006594 <http_recv+0xa0>
 8006586:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <http_recv+0x100>)
 8006588:	f640 2204 	movw	r2, #2564	; 0xa04
 800658c:	491a      	ldr	r1, [pc, #104]	; (80065f8 <http_recv+0x104>)
 800658e:	481b      	ldr	r0, [pc, #108]	; (80065fc <http_recv+0x108>)
 8006590:	f00c fc6e 	bl	8012e70 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006598:	f113 0f05 	cmn.w	r3, #5
 800659c:	d00b      	beq.n	80065b6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <http_recv+0xc2>
          pbuf_free(hs->req);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f003 f9a0 	bl	80098f0 <pbuf_free>
          hs->req = NULL;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f003 f99a 	bl	80098f0 <pbuf_free>
      if (parsed == ERR_OK) {
 80065bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	68b8      	ldr	r0, [r7, #8]
 80065c8:	f7ff fb9e 	bl	8005d08 <http_send>
 80065cc:	e00c      	b.n	80065e8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80065ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80065d2:	f113 0f10 	cmn.w	r3, #16
 80065d6:	d107      	bne.n	80065e8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80065d8:	6979      	ldr	r1, [r7, #20]
 80065da:	68b8      	ldr	r0, [r7, #8]
 80065dc:	f7fe ff1a 	bl	8005414 <http_close_conn>
 80065e0:	e002      	b.n	80065e8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f003 f984 	bl	80098f0 <pbuf_free>
    }
  }
  return ERR_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	08014788 	.word	0x08014788
 80065f8:	08014934 	.word	0x08014934
 80065fc:	080147d0 	.word	0x080147d0

08006600 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800660e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <http_accept+0x1c>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <http_accept+0x22>
    return ERR_VAL;
 800661c:	f06f 0305 	mvn.w	r3, #5
 8006620:	e025      	b.n	800666e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006622:	2101      	movs	r1, #1
 8006624:	68b8      	ldr	r0, [r7, #8]
 8006626:	f004 ff25 	bl	800b474 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800662a:	f7fe fdf9 	bl	8005220 <http_state_alloc>
 800662e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d102      	bne.n	800663c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800663a:	e018      	b.n	800666e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006642:	6979      	ldr	r1, [r7, #20]
 8006644:	68b8      	ldr	r0, [r7, #8]
 8006646:	f005 f915 	bl	800b874 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800664a:	490b      	ldr	r1, [pc, #44]	; (8006678 <http_accept+0x78>)
 800664c:	68b8      	ldr	r0, [r7, #8]
 800664e:	f005 f923 	bl	800b898 <tcp_recv>
  altcp_err(pcb, http_err);
 8006652:	490a      	ldr	r1, [pc, #40]	; (800667c <http_accept+0x7c>)
 8006654:	68b8      	ldr	r0, [r7, #8]
 8006656:	f005 f963 	bl	800b920 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800665a:	2204      	movs	r2, #4
 800665c:	4908      	ldr	r1, [pc, #32]	; (8006680 <http_accept+0x80>)
 800665e:	68b8      	ldr	r0, [r7, #8]
 8006660:	f005 f998 	bl	800b994 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006664:	4907      	ldr	r1, [pc, #28]	; (8006684 <http_accept+0x84>)
 8006666:	68b8      	ldr	r0, [r7, #8]
 8006668:	f005 f938 	bl	800b8dc <tcp_sent>

  return ERR_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	080064f5 	.word	0x080064f5
 800667c:	08006429 	.word	0x08006429
 8006680:	08006483 	.word	0x08006483
 8006684:	0800644d 	.word	0x0800644d

08006688 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d029      	beq.n	80066ee <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800669a:	2101      	movs	r1, #1
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f004 fee9 	bl	800b474 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80066a2:	887b      	ldrh	r3, [r7, #2]
 80066a4:	461a      	mov	r2, r3
 80066a6:	4914      	ldr	r1, [pc, #80]	; (80066f8 <httpd_init_pcb+0x70>)
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f003 ff19 	bl	800a4e0 <tcp_bind>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80066b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d006      	beq.n	80066c8 <httpd_init_pcb+0x40>
 80066ba:	4b10      	ldr	r3, [pc, #64]	; (80066fc <httpd_init_pcb+0x74>)
 80066bc:	f640 2257 	movw	r2, #2647	; 0xa57
 80066c0:	490f      	ldr	r1, [pc, #60]	; (8006700 <httpd_init_pcb+0x78>)
 80066c2:	4810      	ldr	r0, [pc, #64]	; (8006704 <httpd_init_pcb+0x7c>)
 80066c4:	f00c fbd4 	bl	8012e70 <iprintf>
    pcb = altcp_listen(pcb);
 80066c8:	21ff      	movs	r1, #255	; 0xff
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f003 ffc0 	bl	800a650 <tcp_listen_with_backlog>
 80066d0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <httpd_init_pcb+0x5e>
 80066d8:	4b08      	ldr	r3, [pc, #32]	; (80066fc <httpd_init_pcb+0x74>)
 80066da:	f640 2259 	movw	r2, #2649	; 0xa59
 80066de:	490a      	ldr	r1, [pc, #40]	; (8006708 <httpd_init_pcb+0x80>)
 80066e0:	4808      	ldr	r0, [pc, #32]	; (8006704 <httpd_init_pcb+0x7c>)
 80066e2:	f00c fbc5 	bl	8012e70 <iprintf>
    altcp_accept(pcb, http_accept);
 80066e6:	4909      	ldr	r1, [pc, #36]	; (800670c <httpd_init_pcb+0x84>)
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f005 f93b 	bl	800b964 <tcp_accept>
  }
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	0801ab00 	.word	0x0801ab00
 80066fc:	08014788 	.word	0x08014788
 8006700:	08014960 	.word	0x08014960
 8006704:	080147d0 	.word	0x080147d0
 8006708:	0801497c 	.word	0x0801497c
 800670c:	08006601 	.word	0x08006601

08006710 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006716:	202e      	movs	r0, #46	; 0x2e
 8006718:	f005 f89e 	bl	800b858 <tcp_new_ip_type>
 800671c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d106      	bne.n	8006732 <httpd_init+0x22>
 8006724:	4b07      	ldr	r3, [pc, #28]	; (8006744 <httpd_init+0x34>)
 8006726:	f640 2272 	movw	r2, #2674	; 0xa72
 800672a:	4907      	ldr	r1, [pc, #28]	; (8006748 <httpd_init+0x38>)
 800672c:	4807      	ldr	r0, [pc, #28]	; (800674c <httpd_init+0x3c>)
 800672e:	f00c fb9f 	bl	8012e70 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8006732:	2150      	movs	r1, #80	; 0x50
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff ffa7 	bl	8006688 <httpd_init_pcb>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	08014788 	.word	0x08014788
 8006748:	0801499c 	.word	0x0801499c
 800674c:	080147d0 	.word	0x080147d0

08006750 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <http_set_ssi_handler+0x20>
 8006762:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <http_set_ssi_handler+0x64>)
 8006764:	f640 2297 	movw	r2, #2711	; 0xa97
 8006768:	4913      	ldr	r1, [pc, #76]	; (80067b8 <http_set_ssi_handler+0x68>)
 800676a:	4814      	ldr	r0, [pc, #80]	; (80067bc <http_set_ssi_handler+0x6c>)
 800676c:	f00c fb80 	bl	8012e70 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8006770:	4a13      	ldr	r2, [pc, #76]	; (80067c0 <http_set_ssi_handler+0x70>)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <http_set_ssi_handler+0x3a>
 800677c:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <http_set_ssi_handler+0x64>)
 800677e:	f640 229e 	movw	r2, #2718	; 0xa9e
 8006782:	4910      	ldr	r1, [pc, #64]	; (80067c4 <http_set_ssi_handler+0x74>)
 8006784:	480d      	ldr	r0, [pc, #52]	; (80067bc <http_set_ssi_handler+0x6c>)
 8006786:	f00c fb73 	bl	8012e70 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dc06      	bgt.n	800679e <http_set_ssi_handler+0x4e>
 8006790:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <http_set_ssi_handler+0x64>)
 8006792:	f640 229f 	movw	r2, #2719	; 0xa9f
 8006796:	490c      	ldr	r1, [pc, #48]	; (80067c8 <http_set_ssi_handler+0x78>)
 8006798:	4808      	ldr	r0, [pc, #32]	; (80067bc <http_set_ssi_handler+0x6c>)
 800679a:	f00c fb69 	bl	8012e70 <iprintf>

  httpd_tags = tags;
 800679e:	4a0b      	ldr	r2, [pc, #44]	; (80067cc <http_set_ssi_handler+0x7c>)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 80067a4:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <http_set_ssi_handler+0x80>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	08014788 	.word	0x08014788
 80067b8:	080149b8 	.word	0x080149b8
 80067bc:	080147d0 	.word	0x080147d0
 80067c0:	20000500 	.word	0x20000500
 80067c4:	080149d0 	.word	0x080149d0
 80067c8:	080149e0 	.word	0x080149e0
 80067cc:	20000508 	.word	0x20000508
 80067d0:	20000504 	.word	0x20000504

080067d4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <http_set_cgi_handlers+0x1e>
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <http_set_cgi_handlers+0x48>)
 80067e6:	f640 22b2 	movw	r2, #2738	; 0xab2
 80067ea:	490d      	ldr	r1, [pc, #52]	; (8006820 <http_set_cgi_handlers+0x4c>)
 80067ec:	480d      	ldr	r0, [pc, #52]	; (8006824 <http_set_cgi_handlers+0x50>)
 80067ee:	f00c fb3f 	bl	8012e70 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	dc06      	bgt.n	8006806 <http_set_cgi_handlers+0x32>
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <http_set_cgi_handlers+0x48>)
 80067fa:	f640 22b3 	movw	r2, #2739	; 0xab3
 80067fe:	490a      	ldr	r1, [pc, #40]	; (8006828 <http_set_cgi_handlers+0x54>)
 8006800:	4808      	ldr	r0, [pc, #32]	; (8006824 <http_set_cgi_handlers+0x50>)
 8006802:	f00c fb35 	bl	8012e70 <iprintf>

  httpd_cgis = cgis;
 8006806:	4a09      	ldr	r2, [pc, #36]	; (800682c <http_set_cgi_handlers+0x58>)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800680c:	4a08      	ldr	r2, [pc, #32]	; (8006830 <http_set_cgi_handlers+0x5c>)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6013      	str	r3, [r2, #0]
}
 8006812:	bf00      	nop
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	08014788 	.word	0x08014788
 8006820:	080149f8 	.word	0x080149f8
 8006824:	080147d0 	.word	0x080147d0
 8006828:	08014a08 	.word	0x08014a08
 800682c:	2000050c 	.word	0x2000050c
 8006830:	20000510 	.word	0x20000510

08006834 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	88db      	ldrh	r3, [r3, #6]
 8006840:	3301      	adds	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	88db      	ldrh	r3, [r3, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	88db      	ldrh	r3, [r3, #6]
 8006854:	3301      	adds	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	88db      	ldrh	r3, [r3, #6]
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	78fa      	ldrb	r2, [r7, #3]
 8006884:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	d902      	bls.n	80068a0 <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	801a      	strh	r2, [r3, #0]
  }
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4413      	add	r3, r2
 80068be:	3304      	adds	r3, #4
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 80068d8:	887b      	ldrh	r3, [r7, #2]
 80068da:	2bff      	cmp	r3, #255	; 0xff
 80068dc:	d905      	bls.n	80068ea <mqtt_ringbuf_advance_get_idx+0x1e>
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <mqtt_ringbuf_advance_get_idx+0x4c>)
 80068e0:	22cb      	movs	r2, #203	; 0xcb
 80068e2:	490e      	ldr	r1, [pc, #56]	; (800691c <mqtt_ringbuf_advance_get_idx+0x50>)
 80068e4:	480e      	ldr	r0, [pc, #56]	; (8006920 <mqtt_ringbuf_advance_get_idx+0x54>)
 80068e6:	f00c fac3 	bl	8012e70 <iprintf>

  rb->get += len;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	885a      	ldrh	r2, [r3, #2]
 80068ee:	887b      	ldrh	r3, [r7, #2]
 80068f0:	4413      	add	r3, r2
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	885b      	ldrh	r3, [r3, #2]
 80068fc:	2bff      	cmp	r3, #255	; 0xff
 80068fe:	d906      	bls.n	800690e <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	885b      	ldrh	r3, [r3, #2]
 8006904:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	805a      	strh	r2, [r3, #2]
  }
}
 800690e:	bf00      	nop
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	08014a24 	.word	0x08014a24
 800691c:	08014a5c 	.word	0x08014a5c
 8006920:	08014a9c 	.word	0x08014a9c

08006924 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	885b      	ldrh	r3, [r3, #2]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006940:	d303      	bcc.n	800694a <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006948:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	b29b      	uxth	r3, r3
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 800695c:	b590      	push	{r4, r7, lr}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff ffda 	bl	8006924 <mqtt_ringbuf_len>
 8006970:	4603      	mov	r3, r0
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	885b      	ldrh	r3, [r3, #2]
 8006978:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800697c:	429a      	cmp	r2, r3
 800697e:	da04      	bge.n	800698a <mqtt_output_send+0x2e>
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ffcf 	bl	8006924 <mqtt_ringbuf_len>
 8006986:	4603      	mov	r3, r0
 8006988:	e004      	b.n	8006994 <mqtt_output_send+0x38>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	885b      	ldrh	r3, [r3, #2]
 800698e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006992:	b29b      	uxth	r3, r3
 8006994:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800699c:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <mqtt_output_send+0x54>
 80069a4:	4b44      	ldr	r3, [pc, #272]	; (8006ab8 <mqtt_output_send+0x15c>)
 80069a6:	22f0      	movs	r2, #240	; 0xf0
 80069a8:	4944      	ldr	r1, [pc, #272]	; (8006abc <mqtt_output_send+0x160>)
 80069aa:	4845      	ldr	r0, [pc, #276]	; (8006ac0 <mqtt_output_send+0x164>)
 80069ac:	f00c fa60 	bl	8012e70 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 80069b0:	89bb      	ldrh	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d07c      	beq.n	8006ab0 <mqtt_output_send+0x154>
 80069b6:	897b      	ldrh	r3, [r7, #10]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d079      	beq.n	8006ab0 <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 80069bc:	89ba      	ldrh	r2, [r7, #12]
 80069be:	897b      	ldrh	r3, [r7, #10]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d90d      	bls.n	80069e0 <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 80069c4:	897b      	ldrh	r3, [r7, #10]
 80069c6:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ffab 	bl	8006924 <mqtt_ringbuf_len>
 80069ce:	4603      	mov	r3, r0
 80069d0:	461a      	mov	r2, r3
 80069d2:	897b      	ldrh	r3, [r7, #10]
 80069d4:	4293      	cmp	r3, r2
 80069d6:	bf34      	ite	cc
 80069d8:	2301      	movcc	r3, #1
 80069da:	2300      	movcs	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff63 	bl	80068ac <mqtt_ringbuf_get_ptr>
 80069e6:	4601      	mov	r1, r0
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <mqtt_output_send+0x96>
 80069ee:	2303      	movs	r3, #3
 80069f0:	e000      	b.n	80069f4 <mqtt_output_send+0x98>
 80069f2:	2301      	movs	r3, #1
 80069f4:	89ba      	ldrh	r2, [r7, #12]
 80069f6:	6838      	ldr	r0, [r7, #0]
 80069f8:	f007 fe7a 	bl	800e6f0 <tcp_write>
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8006a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d146      	bne.n	8006a96 <mqtt_output_send+0x13a>
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d043      	beq.n	8006a96 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8006a0e:	89bb      	ldrh	r3, [r7, #12]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff ff5a 	bl	80068cc <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006a1e:	461c      	mov	r4, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ff7f 	bl	8006924 <mqtt_ringbuf_len>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	885b      	ldrh	r3, [r3, #2]
 8006a2e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006a32:	429a      	cmp	r2, r3
 8006a34:	da04      	bge.n	8006a40 <mqtt_output_send+0xe4>
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7ff ff74 	bl	8006924 <mqtt_ringbuf_len>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	e003      	b.n	8006a48 <mqtt_output_send+0xec>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	dd03      	ble.n	8006a54 <mqtt_output_send+0xf8>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8006a52:	e014      	b.n	8006a7e <mqtt_output_send+0x122>
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff ff65 	bl	8006924 <mqtt_ringbuf_len>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	885b      	ldrh	r3, [r3, #2]
 8006a62:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006a66:	429a      	cmp	r2, r3
 8006a68:	da04      	bge.n	8006a74 <mqtt_output_send+0x118>
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff ff5a 	bl	8006924 <mqtt_ringbuf_len>
 8006a70:	4603      	mov	r3, r0
 8006a72:	e004      	b.n	8006a7e <mqtt_output_send+0x122>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	885b      	ldrh	r3, [r3, #2]
 8006a78:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ff13 	bl	80068ac <mqtt_ringbuf_get_ptr>
 8006a86:	4601      	mov	r1, r0
 8006a88:	89ba      	ldrh	r2, [r7, #12]
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	6838      	ldr	r0, [r7, #0]
 8006a8e:	f007 fe2f 	bl	800e6f0 <tcp_write>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8006a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8006a9e:	89bb      	ldrh	r3, [r7, #12]
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ff12 	bl	80068cc <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8006aa8:	6838      	ldr	r0, [r7, #0]
 8006aaa:	f008 fc0b 	bl	800f2c4 <tcp_output>
 8006aae:	e000      	b.n	8006ab2 <mqtt_output_send+0x156>
    return;
 8006ab0:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd90      	pop	{r4, r7, pc}
 8006ab8:	08014a24 	.word	0x08014a24
 8006abc:	08014ac4 	.word	0x08014ac4
 8006ac0:	08014a9c 	.word	0x08014a9c

08006ac4 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <mqtt_create_request+0x28>
 8006ade:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <mqtt_create_request+0x80>)
 8006ae0:	f240 1223 	movw	r2, #291	; 0x123
 8006ae4:	4918      	ldr	r1, [pc, #96]	; (8006b48 <mqtt_create_request+0x84>)
 8006ae6:	4819      	ldr	r0, [pc, #100]	; (8006b4c <mqtt_create_request+0x88>)
 8006ae8:	f00c f9c2 	bl	8012e70 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8006aec:	2300      	movs	r3, #0
 8006aee:	74fb      	strb	r3, [r7, #19]
 8006af0:	e01f      	b.n	8006b32 <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8006af2:	7cfb      	ldrb	r3, [r7, #19]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	68f9      	ldr	r1, [r7, #12]
 8006b02:	440b      	add	r3, r1
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d111      	bne.n	8006b2c <mqtt_create_request+0x68>
      r = &r_objs[n];
 8006b08:	7cfb      	ldrb	r3, [r7, #19]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	6a3a      	ldr	r2, [r7, #32]
 8006b22:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	88fa      	ldrh	r2, [r7, #6]
 8006b28:	819a      	strh	r2, [r3, #12]
      break;
 8006b2a:	e006      	b.n	8006b3a <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8006b2c:	7cfb      	ldrb	r3, [r7, #19]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	74fb      	strb	r3, [r7, #19]
 8006b32:	7cfb      	ldrb	r3, [r7, #19]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d8db      	bhi.n	8006af2 <mqtt_create_request+0x2e>
    }
  }
  return r;
 8006b3a:	697b      	ldr	r3, [r7, #20]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	08014a24 	.word	0x08014a24
 8006b48:	08014ae4 	.word	0x08014ae4
 8006b4c:	08014a9c 	.word	0x08014a9c

08006b50 <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <mqtt_append_request+0x26>
 8006b68:	4b1b      	ldr	r3, [pc, #108]	; (8006bd8 <mqtt_append_request+0x88>)
 8006b6a:	f240 123f 	movw	r2, #319	; 0x13f
 8006b6e:	491b      	ldr	r1, [pc, #108]	; (8006bdc <mqtt_append_request+0x8c>)
 8006b70:	481b      	ldr	r0, [pc, #108]	; (8006be0 <mqtt_append_request+0x90>)
 8006b72:	f00c f97d 	bl	8012e70 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	e00a      	b.n	8006b94 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	89da      	ldrh	r2, [r3, #14]
 8006b82:	8a7b      	ldrh	r3, [r7, #18]
 8006b84:	4413      	add	r3, r2
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	827b      	strh	r3, [r7, #18]
    head = iter;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f1      	bne.n	8006b7e <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8006b9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b9e:	2b1e      	cmp	r3, #30
 8006ba0:	dd06      	ble.n	8006bb0 <mqtt_append_request+0x60>
 8006ba2:	4b0d      	ldr	r3, [pc, #52]	; (8006bd8 <mqtt_append_request+0x88>)
 8006ba4:	f240 1247 	movw	r2, #327	; 0x147
 8006ba8:	490e      	ldr	r1, [pc, #56]	; (8006be4 <mqtt_append_request+0x94>)
 8006baa:	480d      	ldr	r0, [pc, #52]	; (8006be0 <mqtt_append_request+0x90>)
 8006bac:	f00c f960 	bl	8012e70 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8006bb0:	8a7b      	ldrh	r3, [r7, #18]
 8006bb2:	f1c3 031e 	rsb	r3, r3, #30
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <mqtt_append_request+0x7a>
    *tail = r;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8006bc8:	e002      	b.n	8006bd0 <mqtt_append_request+0x80>
    head->next = r;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	601a      	str	r2, [r3, #0]
}
 8006bd0:	bf00      	nop
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	08014a24 	.word	0x08014a24
 8006bdc:	08014b08 	.word	0x08014b08
 8006be0:	08014a9c 	.word	0x08014a9c
 8006be4:	08014b2c 	.word	0x08014b2c

08006be8 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <mqtt_delete_request+0x14>
    r->next = r;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <mqtt_take_request+0x28>
 8006c22:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <mqtt_take_request+0x98>)
 8006c24:	f240 1267 	movw	r2, #359	; 0x167
 8006c28:	491e      	ldr	r1, [pc, #120]	; (8006ca4 <mqtt_take_request+0x9c>)
 8006c2a:	481f      	ldr	r0, [pc, #124]	; (8006ca8 <mqtt_take_request+0xa0>)
 8006c2c:	f00c f920 	bl	8012e70 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	e009      	b.n	8006c4c <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	899b      	ldrh	r3, [r3, #12]
 8006c3c:	887a      	ldrh	r2, [r7, #2]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d008      	beq.n	8006c54 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f2      	bne.n	8006c38 <mqtt_take_request+0x30>
 8006c52:	e000      	b.n	8006c56 <mqtt_take_request+0x4e>
      break;
 8006c54:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01c      	beq.n	8006c96 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d104      	bne.n	8006c6c <mqtt_take_request+0x64>
      *tail = iter->next;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e003      	b.n	8006c74 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	89d9      	ldrh	r1, [r3, #14]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	89da      	ldrh	r2, [r3, #14]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	b292      	uxth	r2, r2
 8006c8e:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8006c96:	68fb      	ldr	r3, [r7, #12]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	08014a24 	.word	0x08014a24
 8006ca4:	08014b64 	.word	0x08014b64
 8006ca8:	08014a9c 	.word	0x08014a9c

08006cac <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <mqtt_request_time_elapsed+0x20>
 8006cbe:	4b21      	ldr	r3, [pc, #132]	; (8006d44 <mqtt_request_time_elapsed+0x98>)
 8006cc0:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8006cc4:	4920      	ldr	r1, [pc, #128]	; (8006d48 <mqtt_request_time_elapsed+0x9c>)
 8006cc6:	4821      	ldr	r0, [pc, #132]	; (8006d4c <mqtt_request_time_elapsed+0xa0>)
 8006cc8:	f00c f8d2 	bl	8012e70 <iprintf>
  r = *tail;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 8006cd2:	e02c      	b.n	8006d2e <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	89db      	ldrh	r3, [r3, #14]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d31c      	bcc.n	8006d1a <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	89db      	ldrh	r3, [r3, #14]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	78fa      	ldrb	r2, [r7, #3]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d007      	beq.n	8006d0c <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	6892      	ldr	r2, [r2, #8]
 8006d04:	f06f 0102 	mvn.w	r1, #2
 8006d08:	4610      	mov	r0, r2
 8006d0a:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f7ff ff6b 	bl	8006be8 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e009      	b.n	8006d2e <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	89da      	ldrh	r2, [r3, #14]
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	81da      	strh	r2, [r3, #14]
      t = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <mqtt_request_time_elapsed+0x8e>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1cc      	bne.n	8006cd4 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	08014a24 	.word	0x08014a24
 8006d48:	08014b84 	.word	0x08014b84
 8006d4c:	08014a9c 	.word	0x08014a9c

08006d50 <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d106      	bne.n	8006d6c <mqtt_clear_requests+0x1c>
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <mqtt_clear_requests+0x48>)
 8006d60:	f240 12a7 	movw	r2, #423	; 0x1a7
 8006d64:	490d      	ldr	r1, [pc, #52]	; (8006d9c <mqtt_clear_requests+0x4c>)
 8006d66:	480e      	ldr	r0, [pc, #56]	; (8006da0 <mqtt_clear_requests+0x50>)
 8006d68:	f00c f882 	bl	8012e70 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	e007      	b.n	8006d84 <mqtt_clear_requests+0x34>
    next = iter->next;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff ff34 	bl	8006be8 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f4      	bne.n	8006d74 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	08014a24 	.word	0x08014a24
 8006d9c:	08014bac 	.word	0x08014bac
 8006da0:	08014a9c 	.word	0x08014a9c

08006da4 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <mqtt_init_requests+0x1e>
 8006db4:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <mqtt_init_requests+0x50>)
 8006db6:	f240 12b7 	movw	r2, #439	; 0x1b7
 8006dba:	490f      	ldr	r1, [pc, #60]	; (8006df8 <mqtt_init_requests+0x54>)
 8006dbc:	480f      	ldr	r0, [pc, #60]	; (8006dfc <mqtt_init_requests+0x58>)
 8006dbe:	f00c f857 	bl	8012e70 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
 8006dc6:	e00b      	b.n	8006de0 <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	011a      	lsls	r2, r3, #4
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	440b      	add	r3, r1
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	73fb      	strb	r3, [r7, #15]
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d8ef      	bhi.n	8006dc8 <mqtt_init_requests+0x24>
  }
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	08014a24 	.word	0x08014a24
 8006df8:	08014bd0 	.word	0x08014bd0
 8006dfc:	08014a9c 	.word	0x08014a9c

08006e00 <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff fd2b 	bl	800686c <mqtt_ringbuf_put>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 8006e2a:	887b      	ldrh	r3, [r7, #2]
 8006e2c:	0a1b      	lsrs	r3, r3, #8
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff fd19 	bl	800686c <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff fd13 	bl	800686c <mqtt_ringbuf_put>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b086      	sub	sp, #24
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	82fb      	strh	r3, [r7, #22]
 8006e60:	e00a      	b.n	8006e78 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 8006e62:	8afb      	ldrh	r3, [r7, #22]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	4413      	add	r3, r2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7ff fcfd 	bl	800686c <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006e72:	8afb      	ldrh	r3, [r7, #22]
 8006e74:	3301      	adds	r3, #1
 8006e76:	82fb      	strh	r3, [r7, #22]
 8006e78:	8afa      	ldrh	r2, [r7, #22]
 8006e7a:	88fb      	ldrh	r3, [r7, #6]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d3f0      	bcc.n	8006e62 <mqtt_output_append_buf+0x14>
  }
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b086      	sub	sp, #24
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	60f8      	str	r0, [r7, #12]
 8006e92:	60b9      	str	r1, [r7, #8]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8006e98:	88fb      	ldrh	r3, [r7, #6]
 8006e9a:	0a1b      	lsrs	r3, r3, #8
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fce2 	bl	800686c <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4619      	mov	r1, r3
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff fcdc 	bl	800686c <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	82fb      	strh	r3, [r7, #22]
 8006eb8:	e00a      	b.n	8006ed0 <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8006eba:	8afb      	ldrh	r3, [r7, #22]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fcd1 	bl	800686c <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8006eca:	8afb      	ldrh	r3, [r7, #22]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	82fb      	strh	r3, [r7, #22]
 8006ed0:	8afa      	ldrh	r2, [r7, #22]
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3f0      	bcc.n	8006eba <mqtt_output_append_string+0x30>
  }
}
 8006ed8:	bf00      	nop
 8006eda:	bf00      	nop
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	4608      	mov	r0, r1
 8006eec:	4611      	mov	r1, r2
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	70fb      	strb	r3, [r7, #3]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70bb      	strb	r3, [r7, #2]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	b25a      	sxtb	r2, r3
 8006f02:	78bb      	ldrb	r3, [r7, #2]
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	f003 0308 	and.w	r3, r3, #8
 8006f0c:	b25b      	sxtb	r3, r3
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b25a      	sxtb	r2, r3
 8006f12:	787b      	ldrb	r3, [r7, #1]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	b25b      	sxtb	r3, r3
 8006f18:	f003 0306 	and.w	r3, r3, #6
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	b25a      	sxtb	r2, r3
 8006f22:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	b25b      	sxtb	r3, r3
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff63 	bl	8006e00 <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8006f3a:	8abb      	ldrh	r3, [r7, #20]
 8006f3c:	b25b      	sxtb	r3, r3
 8006f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f42:	b25b      	sxtb	r3, r3
 8006f44:	8aba      	ldrh	r2, [r7, #20]
 8006f46:	2a7f      	cmp	r2, #127	; 0x7f
 8006f48:	d902      	bls.n	8006f50 <mqtt_output_append_fixed_header+0x6e>
 8006f4a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8006f4e:	e000      	b.n	8006f52 <mqtt_output_append_fixed_header+0x70>
 8006f50:	2200      	movs	r2, #0
 8006f52:	4313      	orrs	r3, r2
 8006f54:	b25b      	sxtb	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ff50 	bl	8006e00 <mqtt_output_append_u8>
    r_length >>= 7;
 8006f60:	8abb      	ldrh	r3, [r7, #20]
 8006f62:	09db      	lsrs	r3, r3, #7
 8006f64:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8006f66:	8abb      	ldrh	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e6      	bne.n	8006f3a <mqtt_output_append_fixed_header+0x58>
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8006f78:	b590      	push	{r4, r7, lr}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	3301      	adds	r3, #1
 8006f88:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <mqtt_output_check_space+0x26>
 8006f90:	4b0f      	ldr	r3, [pc, #60]	; (8006fd0 <mqtt_output_check_space+0x58>)
 8006f92:	f240 2207 	movw	r2, #519	; 0x207
 8006f96:	490f      	ldr	r1, [pc, #60]	; (8006fd4 <mqtt_output_check_space+0x5c>)
 8006f98:	480f      	ldr	r0, [pc, #60]	; (8006fd8 <mqtt_output_check_space+0x60>)
 8006f9a:	f00b ff69 	bl	8012e70 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 8006f9e:	89fb      	ldrh	r3, [r7, #14]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8006fa4:	887b      	ldrh	r3, [r7, #2]
 8006fa6:	09db      	lsrs	r3, r3, #7
 8006fa8:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8006faa:	887b      	ldrh	r3, [r7, #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f6      	bne.n	8006f9e <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 8006fb0:	89fc      	ldrh	r4, [r7, #14]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7ff fcb6 	bl	8006924 <mqtt_ringbuf_len>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006fbe:	429c      	cmp	r4, r3
 8006fc0:	bfd4      	ite	le
 8006fc2:	2301      	movle	r3, #1
 8006fc4:	2300      	movgt	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd90      	pop	{r4, r7, pc}
 8006fd0:	08014a24 	.word	0x08014a24
 8006fd4:	08014bf4 	.word	0x08014bf4
 8006fd8:	08014a9c 	.word	0x08014a9c

08006fdc <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d106      	bne.n	8006ffc <mqtt_close+0x20>
 8006fee:	4b27      	ldr	r3, [pc, #156]	; (800708c <mqtt_close+0xb0>)
 8006ff0:	f240 221b 	movw	r2, #539	; 0x21b
 8006ff4:	4926      	ldr	r1, [pc, #152]	; (8007090 <mqtt_close+0xb4>)
 8006ff6:	4827      	ldr	r0, [pc, #156]	; (8007094 <mqtt_close+0xb8>)
 8006ff8:	f00b ff3a 	bl	8012e70 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d024      	beq.n	800704e <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f004 fc44 	bl	800b898 <tcp_recv>
    altcp_err(client->conn,  NULL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f004 fc82 	bl	800b920 <tcp_err>
    altcp_sent(client->conn, NULL);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f004 fc5a 	bl	800b8dc <tcp_sent>
    res = altcp_close(client->conn);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4618      	mov	r0, r3
 800702e:	f003 f961 	bl	800a2f4 <tcp_close>
 8007032:	4603      	mov	r3, r0
 8007034:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 8007036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	4618      	mov	r0, r3
 8007044:	f003 fa40 	bl	800a4c8 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3318      	adds	r3, #24
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fe7c 	bl	8006d50 <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	480f      	ldr	r0, [pc, #60]	; (8007098 <mqtt_close+0xbc>)
 800705c:	f009 f9b0 	bl	80103c0 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	7a9b      	ldrb	r3, [r3, #10]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	6911      	ldr	r1, [r2, #16]
 800707e:	887a      	ldrh	r2, [r7, #2]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	4798      	blx	r3
    }
  }
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	08014a24 	.word	0x08014a24
 8007090:	08014c18 	.word	0x08014c18
 8007094:	08014a9c 	.word	0x08014a9c
 8007098:	0800709d 	.word	0x0800709d

0800709c <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d106      	bne.n	80070c0 <mqtt_cyclic_timer+0x24>
 80070b2:	4b42      	ldr	r3, [pc, #264]	; (80071bc <mqtt_cyclic_timer+0x120>)
 80070b4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80070b8:	4941      	ldr	r1, [pc, #260]	; (80071c0 <mqtt_cyclic_timer+0x124>)
 80070ba:	4842      	ldr	r0, [pc, #264]	; (80071c4 <mqtt_cyclic_timer+0x128>)
 80070bc:	f00b fed8 	bl	8012e70 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	7a9b      	ldrb	r3, [r3, #10]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d115      	bne.n	80070f4 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	2b63      	cmp	r3, #99	; 0x63
 80070e2:	dd5e      	ble.n	80071a2 <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80070e4:	f240 1101 	movw	r1, #257	; 0x101
 80070e8:	68b8      	ldr	r0, [r7, #8]
 80070ea:	f7ff ff77 	bl	8006fdc <mqtt_close>
      restart_timer = 0;
 80070ee:	2300      	movs	r3, #0
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	e056      	b.n	80071a2 <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	7a9b      	ldrb	r3, [r3, #10]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d150      	bne.n	800719e <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	3318      	adds	r3, #24
 8007100:	2105      	movs	r1, #5
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fdd2 	bl	8006cac <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	885b      	ldrh	r3, [r3, #2]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d048      	beq.n	80071a2 <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	889b      	ldrh	r3, [r3, #4]
 8007114:	3301      	adds	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	889b      	ldrh	r3, [r3, #4]
 8007120:	461a      	mov	r2, r3
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	441a      	add	r2, r3
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	885b      	ldrh	r3, [r3, #2]
 800712c:	4619      	mov	r1, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	085b      	lsrs	r3, r3, #1
 8007134:	b29b      	uxth	r3, r3
 8007136:	440b      	add	r3, r1
 8007138:	429a      	cmp	r2, r3
 800713a:	dd06      	ble.n	800714a <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800713c:	f240 1101 	movw	r1, #257	; 0x101
 8007140:	68b8      	ldr	r0, [r7, #8]
 8007142:	f7ff ff4b 	bl	8006fdc <mqtt_close>
        restart_timer = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	8852      	ldrh	r2, [r2, #2]
 800715a:	4293      	cmp	r3, r2
 800715c:	db18      	blt.n	8007190 <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	33ec      	adds	r3, #236	; 0xec
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff ff07 	bl	8006f78 <mqtt_output_check_space>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d018      	beq.n	80071a2 <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007176:	2300      	movs	r3, #0
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	2300      	movs	r3, #0
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	2200      	movs	r2, #0
 8007182:	210c      	movs	r1, #12
 8007184:	f7ff fead 	bl	8006ee2 <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e008      	b.n	80071a2 <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	3301      	adds	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e001      	b.n	80071a2 <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800719e:	2300      	movs	r3, #0
 80071a0:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d005      	beq.n	80071b4 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	4907      	ldr	r1, [pc, #28]	; (80071c8 <mqtt_cyclic_timer+0x12c>)
 80071ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80071b0:	f009 f8e0 	bl	8010374 <sys_timeout>
  }
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	08014a24 	.word	0x08014a24
 80071c0:	08014c34 	.word	0x08014c34
 80071c4:	08014a9c 	.word	0x08014a9c
 80071c8:	0800709d 	.word	0x0800709d

080071cc <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	4608      	mov	r0, r1
 80071d6:	4611      	mov	r1, r2
 80071d8:	461a      	mov	r2, r3
 80071da:	4603      	mov	r3, r0
 80071dc:	70fb      	strb	r3, [r7, #3]
 80071de:	460b      	mov	r3, r1
 80071e0:	803b      	strh	r3, [r7, #0]
 80071e2:	4613      	mov	r3, r2
 80071e4:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	33ec      	adds	r3, #236	; 0xec
 80071ee:	2102      	movs	r1, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fec1 	bl	8006f78 <mqtt_output_check_space>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01c      	beq.n	8007236 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007202:	78bb      	ldrb	r3, [r7, #2]
 8007204:	78f9      	ldrb	r1, [r7, #3]
 8007206:	2202      	movs	r2, #2
 8007208:	9201      	str	r2, [sp, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	9200      	str	r2, [sp, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	f7ff fe67 	bl	8006ee2 <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	33ec      	adds	r3, #236	; 0xec
 8007218:	883a      	ldrh	r2, [r7, #0]
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff fdfe 	bl	8006e1e <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f7ff fb94 	bl	800695c <mqtt_output_send>
 8007234:	e001      	b.n	800723a <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 8007236:	23ff      	movs	r3, #255	; 0xff
 8007238:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800723a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6890      	ldr	r0, [r2, #8]
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	2a02      	cmp	r2, #2
 8007266:	d801      	bhi.n	800726c <mqtt_incomming_suback+0x26>
 8007268:	2200      	movs	r2, #0
 800726a:	e001      	b.n	8007270 <mqtt_incomming_suback+0x2a>
 800726c:	f06f 020c 	mvn.w	r2, #12
 8007270:	4611      	mov	r1, r2
 8007272:	4798      	blx	r3
  }
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800727c:	b590      	push	{r4, r7, lr}
 800727e:	b08f      	sub	sp, #60	; 0x3c
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	607b      	str	r3, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	72fb      	strb	r3, [r7, #11]
 800728a:	4613      	mov	r3, r2
 800728c:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800728e:	2300      	movs	r3, #0
 8007290:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8007298:	7afb      	ldrb	r3, [r7, #11]
 800729a:	4413      	add	r3, r2
 800729c:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80072ac:	091b      	lsrs	r3, r3, #4
 80072ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072ba:	2b7f      	cmp	r3, #127	; 0x7f
 80072bc:	d906      	bls.n	80072cc <mqtt_message_received+0x50>
 80072be:	4b9c      	ldr	r3, [pc, #624]	; (8007530 <mqtt_message_received+0x2b4>)
 80072c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80072c4:	499b      	ldr	r1, [pc, #620]	; (8007534 <mqtt_message_received+0x2b8>)
 80072c6:	489c      	ldr	r0, [pc, #624]	; (8007538 <mqtt_message_received+0x2bc>)
 80072c8:	f00b fdd2 	bl	8012e70 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 80072cc:	7afa      	ldrb	r2, [r7, #11]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d906      	bls.n	80072e4 <mqtt_message_received+0x68>
 80072d6:	4b96      	ldr	r3, [pc, #600]	; (8007530 <mqtt_message_received+0x2b4>)
 80072d8:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 80072dc:	4997      	ldr	r1, [pc, #604]	; (800753c <mqtt_message_received+0x2c0>)
 80072de:	4896      	ldr	r0, [pc, #600]	; (8007538 <mqtt_message_received+0x2bc>)
 80072e0:	f00b fdc6 	bl	8012e70 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 80072e4:	7afa      	ldrb	r2, [r7, #11]
 80072e6:	893b      	ldrh	r3, [r7, #8]
 80072e8:	4413      	add	r3, r2
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	dd09      	ble.n	8007302 <mqtt_message_received+0x86>
 80072ee:	4b90      	ldr	r3, [pc, #576]	; (8007530 <mqtt_message_received+0x2b4>)
 80072f0:	f240 22ad 	movw	r2, #685	; 0x2ad
 80072f4:	4992      	ldr	r1, [pc, #584]	; (8007540 <mqtt_message_received+0x2c4>)
 80072f6:	4890      	ldr	r0, [pc, #576]	; (8007538 <mqtt_message_received+0x2bc>)
 80072f8:	f00b fdba 	bl	8012e70 <iprintf>
 80072fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007300:	e16e      	b.n	80075e0 <mqtt_message_received+0x364>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8007302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007306:	2b02      	cmp	r3, #2
 8007308:	d123      	bne.n	8007352 <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	7a9b      	ldrb	r3, [r3, #10]
 800730e:	2b02      	cmp	r3, #2
 8007310:	f040 8151 	bne.w	80075b6 <mqtt_message_received+0x33a>
      if (length < 2) {
 8007314:	893b      	ldrh	r3, [r7, #8]
 8007316:	2b01      	cmp	r3, #1
 8007318:	f240 814f 	bls.w	80075ba <mqtt_message_received+0x33e>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	3301      	adds	r3, #1
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 8007324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007326:	2b00      	cmp	r3, #0
 8007328:	f040 8145 	bne.w	80075b6 <mqtt_message_received+0x33a>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2203      	movs	r2, #3
 8007336:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 813a 	beq.w	80075b6 <mqtt_message_received+0x33a>
          client->connect_cb(client, client->connect_arg, res);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6911      	ldr	r1, [r2, #16]
 800734a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	4798      	blx	r3
 8007350:	e131      	b.n	80075b6 <mqtt_message_received+0x33a>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8007352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007356:	2b0d      	cmp	r3, #13
 8007358:	f000 812d 	beq.w	80075b6 <mqtt_message_received+0x33a>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800735c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007360:	2b03      	cmp	r3, #3
 8007362:	f040 80c0 	bne.w	80074e6 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8007366:	2300      	movs	r3, #0
 8007368:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800736a:	893b      	ldrh	r3, [r7, #8]
 800736c:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007374:	105b      	asrs	r3, r3, #1
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0303 	and.w	r3, r3, #3
 800737c:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d87d      	bhi.n	8007482 <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8007386:	7ffb      	ldrb	r3, [r7, #31]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <mqtt_message_received+0x114>
 800738c:	2302      	movs	r3, #2
 800738e:	e000      	b.n	8007392 <mqtt_message_received+0x116>
 8007390:	2300      	movs	r3, #0
 8007392:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8007394:	8bbb      	ldrh	r3, [r7, #28]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	893b      	ldrh	r3, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	f280 810f 	bge.w	80075be <mqtt_message_received+0x342>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 80073a6:	8b7b      	ldrh	r3, [r7, #26]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	3301      	adds	r3, #1
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 80073b8:	8b7a      	ldrh	r2, [r7, #26]
 80073ba:	8939      	ldrh	r1, [r7, #8]
 80073bc:	8bbb      	ldrh	r3, [r7, #28]
 80073be:	3302      	adds	r3, #2
 80073c0:	1acb      	subs	r3, r1, r3
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f300 80fd 	bgt.w	80075c2 <mqtt_message_received+0x346>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 80073c8:	8b7a      	ldrh	r2, [r7, #26]
 80073ca:	8bbb      	ldrh	r3, [r7, #28]
 80073cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ce:	1acb      	subs	r3, r1, r3
 80073d0:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 80073d2:	429a      	cmp	r2, r3
 80073d4:	f200 80f5 	bhi.w	80075c2 <mqtt_message_received+0x346>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	3302      	adds	r3, #2
 80073dc:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 80073de:	8b7b      	ldrh	r3, [r7, #26]
 80073e0:	3302      	adds	r3, #2
 80073e2:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 80073e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80073e6:	7ffa      	ldrb	r2, [r7, #31]
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	d001      	beq.n	80073f0 <mqtt_message_received+0x174>
 80073ec:	2202      	movs	r2, #2
 80073ee:	e000      	b.n	80073f2 <mqtt_message_received+0x176>
 80073f0:	2201      	movs	r2, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f6:	429a      	cmp	r2, r3
 80073f8:	f0c0 80e5 	bcc.w	80075c6 <mqtt_message_received+0x34a>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 80073fc:	7ffb      	ldrb	r3, [r7, #31]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01a      	beq.n	8007438 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 8007402:	893a      	ldrh	r2, [r7, #8]
 8007404:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007406:	3302      	adds	r3, #2
 8007408:	429a      	cmp	r2, r3
 800740a:	f0c0 80de 	bcc.w	80075ca <mqtt_message_received+0x34e>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800740e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007412:	4413      	add	r3, r2
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	b29a      	uxth	r2, r3
 800741c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800741e:	3301      	adds	r3, #1
 8007420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007422:	440b      	add	r3, r1
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	4413      	add	r3, r2
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 8007430:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007432:	3302      	adds	r3, #2
 8007434:	863b      	strh	r3, [r7, #48]	; 0x30
 8007436:	e002      	b.n	800743e <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800743e:	8b7b      	ldrh	r3, [r7, #26]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4413      	add	r3, r2
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 8007448:	8b7b      	ldrh	r3, [r7, #26]
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	2200      	movs	r2, #0
 8007450:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 8007452:	893a      	ldrh	r2, [r7, #8]
 8007454:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800745a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800745c:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007462:	2b00      	cmp	r3, #0
 8007464:	d008      	beq.n	8007478 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800746e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	440a      	add	r2, r1
 8007474:	6979      	ldr	r1, [r7, #20]
 8007476:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8007478:	8b7b      	ldrh	r3, [r7, #26]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4413      	add	r3, r2
 800747e:	7cfa      	ldrb	r2, [r7, #19]
 8007480:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 8007482:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d103      	bne.n	8007490 <mqtt_message_received+0x214>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f040 8093 	bne.w	80075b6 <mqtt_message_received+0x33a>
      if (length < (size_t)(payload_offset + payload_length)) {
 8007490:	893b      	ldrh	r3, [r7, #8]
 8007492:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8007494:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8007496:	440a      	add	r2, r1
 8007498:	4293      	cmp	r3, r2
 800749a:	f0c0 8098 	bcc.w	80075ce <mqtt_message_received+0x352>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 80074a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80074a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074aa:	18d1      	adds	r1, r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bf0c      	ite	eq
 80074b2:	2301      	moveq	r3, #1
 80074b4:	2300      	movne	r3, #0
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80074ba:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d179      	bne.n	80075b6 <mqtt_message_received+0x33a>
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d076      	beq.n	80075b6 <mqtt_message_received+0x33a>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 80074c8:	7ffb      	ldrb	r3, [r7, #31]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <mqtt_message_received+0x256>
 80074ce:	2304      	movs	r3, #4
 80074d0:	e000      	b.n	80074d4 <mqtt_message_received+0x258>
 80074d2:	2305      	movs	r3, #5
 80074d4:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	891a      	ldrh	r2, [r3, #8]
 80074da:	7cb9      	ldrb	r1, [r7, #18]
 80074dc:	2300      	movs	r3, #0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff fe74 	bl	80071cc <pub_ack_rec_rel_response>
 80074e4:	e067      	b.n	80075b6 <mqtt_message_received+0x33a>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	3301      	adds	r3, #1
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074fa:	4313      	orrs	r3, r2
 80074fc:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 80074fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d066      	beq.n	80075d2 <mqtt_message_received+0x356>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007508:	2b05      	cmp	r3, #5
 800750a:	d106      	bne.n	800751a <mqtt_message_received+0x29e>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800750c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800750e:	2301      	movs	r3, #1
 8007510:	2106      	movs	r1, #6
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fe5a 	bl	80071cc <pub_ack_rec_rel_response>
 8007518:	e04d      	b.n	80075b6 <mqtt_message_received+0x33a>

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800751a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800751e:	2b06      	cmp	r3, #6
 8007520:	d110      	bne.n	8007544 <mqtt_message_received+0x2c8>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8007522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007524:	2300      	movs	r3, #0
 8007526:	2107      	movs	r1, #7
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fe4f 	bl	80071cc <pub_ack_rec_rel_response>
 800752e:	e042      	b.n	80075b6 <mqtt_message_received+0x33a>
 8007530:	08014a24 	.word	0x08014a24
 8007534:	08014c58 	.word	0x08014c58
 8007538:	08014a9c 	.word	0x08014a9c
 800753c:	08014c88 	.word	0x08014c88
 8007540:	08014cac 	.word	0x08014cac

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 8007544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007548:	2b09      	cmp	r3, #9
 800754a:	d00b      	beq.n	8007564 <mqtt_message_received+0x2e8>
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007550:	2b0b      	cmp	r3, #11
 8007552:	d007      	beq.n	8007564 <mqtt_message_received+0x2e8>
 8007554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007558:	2b07      	cmp	r3, #7
 800755a:	d003      	beq.n	8007564 <mqtt_message_received+0x2e8>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800755c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007560:	2b04      	cmp	r3, #4
 8007562:	d138      	bne.n	80075d6 <mqtt_message_received+0x35a>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3318      	adds	r3, #24
 8007568:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800756a:	4611      	mov	r1, r2
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff fb4b 	bl	8006c08 <mqtt_take_request>
 8007572:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01c      	beq.n	80075b4 <mqtt_message_received+0x338>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800757a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800757e:	2b09      	cmp	r3, #9
 8007580:	d10a      	bne.n	8007598 <mqtt_message_received+0x31c>
          if (length < 3) {
 8007582:	893b      	ldrh	r3, [r7, #8]
 8007584:	2b02      	cmp	r3, #2
 8007586:	d928      	bls.n	80075da <mqtt_message_received+0x35e>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	3302      	adds	r3, #2
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	4619      	mov	r1, r3
 8007590:	6a38      	ldr	r0, [r7, #32]
 8007592:	f7ff fe58 	bl	8007246 <mqtt_incomming_suback>
 8007596:	e00a      	b.n	80075ae <mqtt_message_received+0x332>
          }
        } else if (r->cb != NULL) {
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d006      	beq.n	80075ae <mqtt_message_received+0x332>
          r->cb(r->arg, ERR_OK);
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	6a3a      	ldr	r2, [r7, #32]
 80075a6:	6892      	ldr	r2, [r2, #8]
 80075a8:	2100      	movs	r1, #0
 80075aa:	4610      	mov	r0, r2
 80075ac:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 80075ae:	6a38      	ldr	r0, [r7, #32]
 80075b0:	f7ff fb1a 	bl	8006be8 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80075b4:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 80075b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80075b8:	e012      	b.n	80075e0 <mqtt_message_received+0x364>
        goto out_disconnect;
 80075ba:	bf00      	nop
 80075bc:	e00e      	b.n	80075dc <mqtt_message_received+0x360>
        goto out_disconnect;
 80075be:	bf00      	nop
 80075c0:	e00c      	b.n	80075dc <mqtt_message_received+0x360>
        goto out_disconnect;
 80075c2:	bf00      	nop
 80075c4:	e00a      	b.n	80075dc <mqtt_message_received+0x360>
        goto out_disconnect;
 80075c6:	bf00      	nop
 80075c8:	e008      	b.n	80075dc <mqtt_message_received+0x360>
          goto out_disconnect;
 80075ca:	bf00      	nop
 80075cc:	e006      	b.n	80075dc <mqtt_message_received+0x360>
        goto out_disconnect;
 80075ce:	bf00      	nop
 80075d0:	e004      	b.n	80075dc <mqtt_message_received+0x360>
      goto out_disconnect;
 80075d2:	bf00      	nop
 80075d4:	e002      	b.n	80075dc <mqtt_message_received+0x360>
      goto out_disconnect;
 80075d6:	bf00      	nop
 80075d8:	e000      	b.n	80075dc <mqtt_message_received+0x360>
            goto out_disconnect;
 80075da:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 80075dc:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	373c      	adds	r7, #60	; 0x3c
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd90      	pop	{r4, r7, pc}

080075e8 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 8007602:	e0bc      	b.n	800777e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d903      	bls.n	8007612 <mqtt_parse_incoming+0x2a>
 800760a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800760e:	2b00      	cmp	r3, #0
 8007610:	da4d      	bge.n	80076ae <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 8007612:	7dfa      	ldrb	r2, [r7, #23]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007618:	429a      	cmp	r2, r3
 800761a:	d206      	bcs.n	800762a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800761c:	7dfb      	ldrb	r3, [r7, #23]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007626:	75bb      	strb	r3, [r7, #22]
 8007628:	e012      	b.n	8007650 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800762a:	8bfb      	ldrh	r3, [r7, #30]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	83fa      	strh	r2, [r7, #30]
 8007630:	4619      	mov	r1, r3
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f002 fc14 	bl	8009e60 <pbuf_get_at>
 8007638:	4603      	mov	r3, r0
 800763a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007640:	1c59      	adds	r1, r3, #1
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6691      	str	r1, [r2, #104]	; 0x68
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	4413      	add	r3, r2
 800764a:	7dba      	ldrb	r2, [r7, #22]
 800764c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	3301      	adds	r3, #1
 8007654:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	2b01      	cmp	r3, #1
 800765a:	f240 8090 	bls.w	800777e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800765e:	7dbb      	ldrb	r3, [r7, #22]
 8007660:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	1e9a      	subs	r2, r3, #2
 8007668:	4613      	mov	r3, r2
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	fa01 f303 	lsl.w	r3, r1, r3
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	4313      	orrs	r3, r2
 8007676:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8007678:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800767c:	2b00      	cmp	r3, #0
 800767e:	db7e      	blt.n	800777e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8007686:	7df9      	ldrb	r1, [r7, #23]
 8007688:	2300      	movs	r3, #0
 800768a:	2200      	movs	r2, #0
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7ff fdf5 	bl	800727c <mqtt_message_received>
            client->msg_idx = 0;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	75fb      	strb	r3, [r7, #23]
 800769c:	e06f      	b.n	800777e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800769e:	7dfa      	ldrb	r2, [r7, #23]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	441a      	add	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 80076ac:	e067      	b.n	800777e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	7dfa      	ldrb	r2, [r7, #23]
 80076b8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 80076bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80076c0:	fb02 f201 	mul.w	r2, r2, r1
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	891a      	ldrh	r2, [r3, #8]
 80076d4:	8bfb      	ldrh	r3, [r7, #30]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	b29b      	uxth	r3, r3
 80076da:	461a      	mov	r2, r3
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4293      	cmp	r3, r2
 80076e0:	d905      	bls.n	80076ee <mqtt_parse_incoming+0x106>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	891a      	ldrh	r2, [r3, #8]
 80076e6:	8bfb      	ldrh	r3, [r7, #30]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	e001      	b.n	80076f2 <mqtt_parse_incoming+0x10a>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80076f4:	8a7b      	ldrh	r3, [r7, #18]
 80076f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80076fa:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 80076fc:	8aba      	ldrh	r2, [r7, #20]
 80076fe:	8a3b      	ldrh	r3, [r7, #16]
 8007700:	429a      	cmp	r2, r3
 8007702:	d901      	bls.n	8007708 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8007704:	8a3b      	ldrh	r3, [r7, #16]
 8007706:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800770e:	8a7b      	ldrh	r3, [r7, #18]
 8007710:	18d1      	adds	r1, r2, r3
 8007712:	8bfb      	ldrh	r3, [r7, #30]
 8007714:	8aba      	ldrh	r2, [r7, #20]
 8007716:	6838      	ldr	r0, [r7, #0]
 8007718:	f002 fad4 	bl	8009cc4 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007720:	8abb      	ldrh	r3, [r7, #20]
 8007722:	441a      	add	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8007728:	8bfa      	ldrh	r2, [r7, #30]
 800772a:	8abb      	ldrh	r3, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8007730:	8abb      	ldrh	r3, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <mqtt_parse_incoming+0x15e>
 800773e:	8aba      	ldrh	r2, [r7, #20]
 8007740:	8a3b      	ldrh	r3, [r7, #16]
 8007742:	429a      	cmp	r2, r3
 8007744:	d11b      	bne.n	800777e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8007746:	8a7a      	ldrh	r2, [r7, #18]
 8007748:	8abb      	ldrh	r3, [r7, #20]
 800774a:	4413      	add	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	b29b      	uxth	r3, r3
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	b29a      	uxth	r2, r3
 8007756:	7df9      	ldrb	r1, [r7, #23]
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7ff fd8e 	bl	800727c <mqtt_message_received>
 8007760:	4603      	mov	r3, r0
 8007762:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8007764:	89fb      	ldrh	r3, [r7, #14]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <mqtt_parse_incoming+0x186>
          return res;
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	e00e      	b.n	800778c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d104      	bne.n	800777e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	891b      	ldrh	r3, [r3, #8]
 8007782:	8bfa      	ldrh	r2, [r7, #30]
 8007784:	429a      	cmp	r2, r3
 8007786:	f4ff af3d 	bcc.w	8007604 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d106      	bne.n	80077ba <mqtt_tcp_recv_cb+0x26>
 80077ac:	4b24      	ldr	r3, [pc, #144]	; (8007840 <mqtt_tcp_recv_cb+0xac>)
 80077ae:	f240 32a7 	movw	r2, #935	; 0x3a7
 80077b2:	4924      	ldr	r1, [pc, #144]	; (8007844 <mqtt_tcp_recv_cb+0xb0>)
 80077b4:	4824      	ldr	r0, [pc, #144]	; (8007848 <mqtt_tcp_recv_cb+0xb4>)
 80077b6:	f00b fb5b 	bl	8012e70 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d006      	beq.n	80077d2 <mqtt_tcp_recv_cb+0x3e>
 80077c4:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <mqtt_tcp_recv_cb+0xac>)
 80077c6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80077ca:	4920      	ldr	r1, [pc, #128]	; (800784c <mqtt_tcp_recv_cb+0xb8>)
 80077cc:	481e      	ldr	r0, [pc, #120]	; (8007848 <mqtt_tcp_recv_cb+0xb4>)
 80077ce:	f00b fb4f 	bl	8012e70 <iprintf>

  if (p == NULL) {
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d105      	bne.n	80077e4 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80077d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077dc:	6978      	ldr	r0, [r7, #20]
 80077de:	f7ff fbfd 	bl	8006fdc <mqtt_close>
 80077e2:	e027      	b.n	8007834 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 80077e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d005      	beq.n	80077f8 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f002 f87f 	bl	80098f0 <pbuf_free>
      return err;
 80077f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077f6:	e01e      	b.n	8007836 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	891b      	ldrh	r3, [r3, #8]
 80077fc:	4619      	mov	r1, r3
 80077fe:	68b8      	ldr	r0, [r7, #8]
 8007800:	f003 f83c 	bl	800a87c <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	6978      	ldr	r0, [r7, #20]
 8007808:	f7ff feee 	bl	80075e8 <mqtt_parse_incoming>
 800780c:	4603      	mov	r3, r0
 800780e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f002 f86d 	bl	80098f0 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8007816:	8a7b      	ldrh	r3, [r7, #18]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800781c:	8a7b      	ldrh	r3, [r7, #18]
 800781e:	4619      	mov	r1, r3
 8007820:	6978      	ldr	r0, [r7, #20]
 8007822:	f7ff fbdb 	bl	8006fdc <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	885b      	ldrh	r3, [r3, #2]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	08014a24 	.word	0x08014a24
 8007844:	08014cc4 	.word	0x08014cc4
 8007848:	08014a9c 	.word	0x08014a9c
 800784c:	08014ce8 	.word	0x08014ce8

08007850 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	7a9b      	ldrb	r3, [r3, #10]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d127      	bne.n	80078ba <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2200      	movs	r2, #0
 800786e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2200      	movs	r2, #0
 8007874:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8007876:	e00d      	b.n	8007894 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	6892      	ldr	r2, [r2, #8]
 8007888:	2100      	movs	r1, #0
 800788a:	4610      	mov	r0, r2
 800788c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800788e:	6938      	ldr	r0, [r7, #16]
 8007890:	f7ff f9aa 	bl	8006be8 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3318      	adds	r3, #24
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff f9b4 	bl	8006c08 <mqtt_take_request>
 80078a0:	6138      	str	r0, [r7, #16]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e7      	bne.n	8007878 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7ff f851 	bl	800695c <mqtt_output_send>
  }
  return ERR_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <mqtt_tcp_err_cb+0x24>
 80078da:	4b09      	ldr	r3, [pc, #36]	; (8007900 <mqtt_tcp_err_cb+0x3c>)
 80078dc:	f240 32f6 	movw	r2, #1014	; 0x3f6
 80078e0:	4908      	ldr	r1, [pc, #32]	; (8007904 <mqtt_tcp_err_cb+0x40>)
 80078e2:	4809      	ldr	r0, [pc, #36]	; (8007908 <mqtt_tcp_err_cb+0x44>)
 80078e4:	f00b fac4 	bl	8012e70 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 80078ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff fb72 	bl	8006fdc <mqtt_close>
}
 80078f8:	bf00      	nop
 80078fa:	3710      	adds	r7, #16
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	08014a24 	.word	0x08014a24
 8007904:	08014d10 	.word	0x08014d10
 8007908:	08014a9c 	.word	0x08014a9c

0800790c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	7a9b      	ldrb	r3, [r3, #10]
 800791e:	2b03      	cmp	r3, #3
 8007920:	d105      	bne.n	800792e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	33ec      	adds	r3, #236	; 0xec
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f7ff f817 	bl	800695c <mqtt_output_send>
  }
  return ERR_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800794a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8007952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007956:	e025      	b.n	80079a4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2200      	movs	r2, #0
 800795c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800795e:	4913      	ldr	r1, [pc, #76]	; (80079ac <mqtt_tcp_connect_cb+0x74>)
 8007960:	68b8      	ldr	r0, [r7, #8]
 8007962:	f003 ff99 	bl	800b898 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8007966:	4912      	ldr	r1, [pc, #72]	; (80079b0 <mqtt_tcp_connect_cb+0x78>)
 8007968:	68b8      	ldr	r0, [r7, #8]
 800796a:	f003 ffb7 	bl	800b8dc <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800796e:	2202      	movs	r2, #2
 8007970:	4910      	ldr	r1, [pc, #64]	; (80079b4 <mqtt_tcp_connect_cb+0x7c>)
 8007972:	68b8      	ldr	r0, [r7, #8]
 8007974:	f004 f80e 	bl	800b994 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2202      	movs	r2, #2
 800797c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	490d      	ldr	r1, [pc, #52]	; (80079b8 <mqtt_tcp_connect_cb+0x80>)
 8007982:	f241 3088 	movw	r0, #5000	; 0x1388
 8007986:	f008 fcf5 	bl	8010374 <sys_timeout>
  client->cyclic_tick = 0;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f7fe ffdd 	bl	800695c <mqtt_output_send>

  return ERR_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08007795 	.word	0x08007795
 80079b0:	08007851 	.word	0x08007851
 80079b4:	0800790d 	.word	0x0800790d
 80079b8:	0800709d 	.word	0x0800709d

080079bc <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <mqtt_publish+0x22>
 80079d0:	4b5d      	ldr	r3, [pc, #372]	; (8007b48 <mqtt_publish+0x18c>)
 80079d2:	f240 4254 	movw	r2, #1108	; 0x454
 80079d6:	495d      	ldr	r1, [pc, #372]	; (8007b4c <mqtt_publish+0x190>)
 80079d8:	485d      	ldr	r0, [pc, #372]	; (8007b50 <mqtt_publish+0x194>)
 80079da:	f00b fa49 	bl	8012e70 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <mqtt_publish+0x36>
 80079e4:	4b58      	ldr	r3, [pc, #352]	; (8007b48 <mqtt_publish+0x18c>)
 80079e6:	f240 4255 	movw	r2, #1109	; 0x455
 80079ea:	495a      	ldr	r1, [pc, #360]	; (8007b54 <mqtt_publish+0x198>)
 80079ec:	4858      	ldr	r0, [pc, #352]	; (8007b50 <mqtt_publish+0x194>)
 80079ee:	f00b fa3f 	bl	8012e70 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	7a9b      	ldrb	r3, [r3, #10]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <mqtt_publish+0x52>
 80079fa:	4b53      	ldr	r3, [pc, #332]	; (8007b48 <mqtt_publish+0x18c>)
 80079fc:	f240 4256 	movw	r2, #1110	; 0x456
 8007a00:	4955      	ldr	r1, [pc, #340]	; (8007b58 <mqtt_publish+0x19c>)
 8007a02:	4853      	ldr	r0, [pc, #332]	; (8007b50 <mqtt_publish+0x194>)
 8007a04:	f00b fa34 	bl	8012e70 <iprintf>
 8007a08:	f06f 030a 	mvn.w	r3, #10
 8007a0c:	e097      	b.n	8007b3e <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 8007a0e:	68b8      	ldr	r0, [r7, #8]
 8007a10:	f7f8 fbe8 	bl	80001e4 <strlen>
 8007a14:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d909      	bls.n	8007a34 <mqtt_publish+0x78>
 8007a20:	4b49      	ldr	r3, [pc, #292]	; (8007b48 <mqtt_publish+0x18c>)
 8007a22:	f240 4259 	movw	r2, #1113	; 0x459
 8007a26:	494d      	ldr	r1, [pc, #308]	; (8007b5c <mqtt_publish+0x1a0>)
 8007a28:	4849      	ldr	r0, [pc, #292]	; (8007b50 <mqtt_publish+0x194>)
 8007a2a:	f00b fa21 	bl	8012e70 <iprintf>
 8007a2e:	f06f 030f 	mvn.w	r3, #15
 8007a32:	e084      	b.n	8007b3e <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8007a38:	8b7b      	ldrh	r3, [r7, #26]
 8007a3a:	1c9a      	adds	r2, r3, #2
 8007a3c:	887b      	ldrh	r3, [r7, #2]
 8007a3e:	4413      	add	r3, r2
 8007a40:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8007a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <mqtt_publish+0xa0>
    total_len += 2;
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7fe feef 	bl	8006834 <msg_generate_packet_id>
 8007a56:	4603      	mov	r3, r0
 8007a58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007a5a:	e001      	b.n	8007a60 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a66:	d309      	bcc.n	8007a7c <mqtt_publish+0xc0>
 8007a68:	4b37      	ldr	r3, [pc, #220]	; (8007b48 <mqtt_publish+0x18c>)
 8007a6a:	f240 4265 	movw	r2, #1125	; 0x465
 8007a6e:	493c      	ldr	r1, [pc, #240]	; (8007b60 <mqtt_publish+0x1a4>)
 8007a70:	4837      	ldr	r0, [pc, #220]	; (8007b50 <mqtt_publish+0x194>)
 8007a72:	f00b f9fd 	bl	8012e70 <iprintf>
 8007a76:	f06f 030f 	mvn.w	r3, #15
 8007a7a:	e060      	b.n	8007b3e <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f103 001c 	add.w	r0, r3, #28
 8007a86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	2104      	movs	r1, #4
 8007a90:	f7ff f818 	bl	8006ac4 <mqtt_create_request>
 8007a94:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <mqtt_publish+0xe6>
    return ERR_MEM;
 8007a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007aa0:	e04d      	b.n	8007b3e <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	33ec      	adds	r3, #236	; 0xec
 8007aa6:	8b3a      	ldrh	r2, [r7, #24]
 8007aa8:	4611      	mov	r1, r2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff fa64 	bl	8006f78 <mqtt_output_check_space>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d105      	bne.n	8007ac2 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8007ab6:	6978      	ldr	r0, [r7, #20]
 8007ab8:	f7ff f896 	bl	8006be8 <mqtt_delete_request>
    return ERR_MEM;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ac0:	e03d      	b.n	8007b3e <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007ac8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007acc:	8b3b      	ldrh	r3, [r7, #24]
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2103      	movs	r1, #3
 8007adc:	f7ff fa01 	bl	8006ee2 <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	33ec      	adds	r3, #236	; 0xec
 8007ae4:	8b7a      	ldrh	r2, [r7, #26]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff f9ce 	bl	8006e8a <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8007aee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d006      	beq.n	8007b04 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	33ec      	adds	r3, #236	; 0xec
 8007afa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007afc:	4611      	mov	r1, r2
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7ff f98d 	bl	8006e1e <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <mqtt_publish+0x162>
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d006      	beq.n	8007b1e <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	33ec      	adds	r3, #236	; 0xec
 8007b14:	887a      	ldrh	r2, [r7, #2]
 8007b16:	6879      	ldr	r1, [r7, #4]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff f998 	bl	8006e4e <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3318      	adds	r3, #24
 8007b22:	6979      	ldr	r1, [r7, #20]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7ff f813 	bl	8006b50 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	4619      	mov	r1, r3
 8007b36:	4610      	mov	r0, r2
 8007b38:	f7fe ff10 	bl	800695c <mqtt_output_send>
  return ERR_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3728      	adds	r7, #40	; 0x28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	08014a24 	.word	0x08014a24
 8007b4c:	08014d30 	.word	0x08014d30
 8007b50:	08014a9c 	.word	0x08014a9c
 8007b54:	08014d50 	.word	0x08014d50
 8007b58:	08014d6c 	.word	0x08014d6c
 8007b5c:	08014d8c 	.word	0x08014d8c
 8007b60:	08014db0 	.word	0x08014db0

08007b64 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	603b      	str	r3, [r7, #0]
 8007b70:	4613      	mov	r3, r2
 8007b72:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d106      	bne.n	8007b88 <mqtt_sub_unsub+0x24>
 8007b7a:	4b5e      	ldr	r3, [pc, #376]	; (8007cf4 <mqtt_sub_unsub+0x190>)
 8007b7c:	f240 429f 	movw	r2, #1183	; 0x49f
 8007b80:	495d      	ldr	r1, [pc, #372]	; (8007cf8 <mqtt_sub_unsub+0x194>)
 8007b82:	485e      	ldr	r0, [pc, #376]	; (8007cfc <mqtt_sub_unsub+0x198>)
 8007b84:	f00b f974 	bl	8012e70 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <mqtt_sub_unsub+0x38>
 8007b8e:	4b59      	ldr	r3, [pc, #356]	; (8007cf4 <mqtt_sub_unsub+0x190>)
 8007b90:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8007b94:	495a      	ldr	r1, [pc, #360]	; (8007d00 <mqtt_sub_unsub+0x19c>)
 8007b96:	4859      	ldr	r0, [pc, #356]	; (8007cfc <mqtt_sub_unsub+0x198>)
 8007b98:	f00b f96a 	bl	8012e70 <iprintf>

  topic_strlen = strlen(topic);
 8007b9c:	68b8      	ldr	r0, [r7, #8]
 8007b9e:	f7f8 fb21 	bl	80001e4 <strlen>
 8007ba2:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d909      	bls.n	8007bc2 <mqtt_sub_unsub+0x5e>
 8007bae:	4b51      	ldr	r3, [pc, #324]	; (8007cf4 <mqtt_sub_unsub+0x190>)
 8007bb0:	f240 42a3 	movw	r2, #1187	; 0x4a3
 8007bb4:	4953      	ldr	r1, [pc, #332]	; (8007d04 <mqtt_sub_unsub+0x1a0>)
 8007bb6:	4851      	ldr	r0, [pc, #324]	; (8007cfc <mqtt_sub_unsub+0x198>)
 8007bb8:	f00b f95a 	bl	8012e70 <iprintf>
 8007bbc:	f06f 030f 	mvn.w	r3, #15
 8007bc0:	e093      	b.n	8007cea <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 8007bc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bc8:	3304      	adds	r3, #4
 8007bca:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	bf14      	ite	ne
 8007bd2:	2201      	movne	r2, #1
 8007bd4:	2200      	moveq	r2, #0
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	4413      	add	r3, r2
 8007bda:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be2:	d309      	bcc.n	8007bf8 <mqtt_sub_unsub+0x94>
 8007be4:	4b43      	ldr	r3, [pc, #268]	; (8007cf4 <mqtt_sub_unsub+0x190>)
 8007be6:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007bea:	4947      	ldr	r1, [pc, #284]	; (8007d08 <mqtt_sub_unsub+0x1a4>)
 8007bec:	4843      	ldr	r0, [pc, #268]	; (8007cfc <mqtt_sub_unsub+0x198>)
 8007bee:	f00b f93f 	bl	8012e70 <iprintf>
 8007bf2:	f06f 030f 	mvn.w	r3, #15
 8007bf6:	e078      	b.n	8007cea <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d906      	bls.n	8007c10 <mqtt_sub_unsub+0xac>
 8007c02:	4b3c      	ldr	r3, [pc, #240]	; (8007cf4 <mqtt_sub_unsub+0x190>)
 8007c04:	f240 42aa 	movw	r2, #1194	; 0x4aa
 8007c08:	4940      	ldr	r1, [pc, #256]	; (8007d0c <mqtt_sub_unsub+0x1a8>)
 8007c0a:	483c      	ldr	r0, [pc, #240]	; (8007cfc <mqtt_sub_unsub+0x198>)
 8007c0c:	f00b f930 	bl	8012e70 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	7a9b      	ldrb	r3, [r3, #10]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 8007c18:	f06f 030a 	mvn.w	r3, #10
 8007c1c:	e065      	b.n	8007cea <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7fe fe08 	bl	8006834 <msg_generate_packet_id>
 8007c24:	4603      	mov	r3, r0
 8007c26:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f103 001c 	add.w	r0, r3, #28
 8007c2e:	8b3a      	ldrh	r2, [r7, #24]
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2104      	movs	r1, #4
 8007c38:	f7fe ff44 	bl	8006ac4 <mqtt_create_request>
 8007c3c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d102      	bne.n	8007c4a <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c48:	e04f      	b.n	8007cea <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	33ec      	adds	r3, #236	; 0xec
 8007c4e:	8b7a      	ldrh	r2, [r7, #26]
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff f990 	bl	8006f78 <mqtt_output_check_space>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 8007c5e:	6978      	ldr	r0, [r7, #20]
 8007c60:	f7fe ffc2 	bl	8006be8 <mqtt_delete_request>
    return ERR_MEM;
 8007c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c68:	e03f      	b.n	8007cea <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007c70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <mqtt_sub_unsub+0x118>
 8007c78:	2108      	movs	r1, #8
 8007c7a:	e000      	b.n	8007c7e <mqtt_sub_unsub+0x11a>
 8007c7c:	210a      	movs	r1, #10
 8007c7e:	8b7b      	ldrh	r3, [r7, #26]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	2301      	movs	r3, #1
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f7ff f92a 	bl	8006ee2 <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	33ec      	adds	r3, #236	; 0xec
 8007c92:	8b3a      	ldrh	r2, [r7, #24]
 8007c94:	4611      	mov	r1, r2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff f8c1 	bl	8006e1e <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	33ec      	adds	r3, #236	; 0xec
 8007ca0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7ff f8f0 	bl	8006e8a <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 8007caa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007cb8:	79fb      	ldrb	r3, [r7, #7]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	bf28      	it	cs
 8007cbe:	2302      	movcs	r3, #2
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7ff f89b 	bl	8006e00 <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3318      	adds	r3, #24
 8007cce:	6979      	ldr	r1, [r7, #20]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe ff3d 	bl	8006b50 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7fe fe3a 	bl	800695c <mqtt_output_send>
  return ERR_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3728      	adds	r7, #40	; 0x28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	08014a24 	.word	0x08014a24
 8007cf8:	08014dd4 	.word	0x08014dd4
 8007cfc:	08014a9c 	.word	0x08014a9c
 8007d00:	08014df4 	.word	0x08014df4
 8007d04:	08014e14 	.word	0x08014e14
 8007d08:	08014e3c 	.word	0x08014e3c
 8007d0c:	08014e64 	.word	0x08014e64

08007d10 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d106      	bne.n	8007d32 <mqtt_set_inpub_callback+0x22>
 8007d24:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <mqtt_set_inpub_callback+0x3c>)
 8007d26:	f240 42da 	movw	r2, #1242	; 0x4da
 8007d2a:	4909      	ldr	r1, [pc, #36]	; (8007d50 <mqtt_set_inpub_callback+0x40>)
 8007d2c:	4809      	ldr	r0, [pc, #36]	; (8007d54 <mqtt_set_inpub_callback+0x44>)
 8007d2e:	f00b f89f 	bl	8012e70 <iprintf>
  client->data_cb = data_cb;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007d44:	bf00      	nop
 8007d46:	3710      	adds	r7, #16
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	08014a24 	.word	0x08014a24
 8007d50:	08014e7c 	.word	0x08014e7c
 8007d54:	08014a9c 	.word	0x08014a9c

08007d58 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8007d5c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8007d60:	2001      	movs	r0, #1
 8007d62:	f000 fecb 	bl	8008afc <mem_calloc>
 8007d66:	4603      	mov	r3, r0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08c      	sub	sp, #48	; 0x30
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8007d7c:	230a      	movs	r3, #10
 8007d7e:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	83fb      	strh	r3, [r7, #30]
 8007d96:	2300      	movs	r3, #0
 8007d98:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d106      	bne.n	8007dae <mqtt_client_connect+0x42>
 8007da0:	4bac      	ldr	r3, [pc, #688]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007da2:	f240 520f 	movw	r2, #1295	; 0x50f
 8007da6:	49ac      	ldr	r1, [pc, #688]	; (8008058 <mqtt_client_connect+0x2ec>)
 8007da8:	48ac      	ldr	r0, [pc, #688]	; (800805c <mqtt_client_connect+0x2f0>)
 8007daa:	f00b f861 	bl	8012e70 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <mqtt_client_connect+0x56>
 8007db4:	4ba7      	ldr	r3, [pc, #668]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007db6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8007dba:	49a9      	ldr	r1, [pc, #676]	; (8008060 <mqtt_client_connect+0x2f4>)
 8007dbc:	48a7      	ldr	r0, [pc, #668]	; (800805c <mqtt_client_connect+0x2f0>)
 8007dbe:	f00b f857 	bl	8012e70 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d106      	bne.n	8007dd6 <mqtt_client_connect+0x6a>
 8007dc8:	4ba2      	ldr	r3, [pc, #648]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007dca:	f240 5211 	movw	r2, #1297	; 0x511
 8007dce:	49a5      	ldr	r1, [pc, #660]	; (8008064 <mqtt_client_connect+0x2f8>)
 8007dd0:	48a2      	ldr	r0, [pc, #648]	; (800805c <mqtt_client_connect+0x2f0>)
 8007dd2:	f00b f84d 	bl	8012e70 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d106      	bne.n	8007dec <mqtt_client_connect+0x80>
 8007dde:	4b9d      	ldr	r3, [pc, #628]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007de0:	f240 5212 	movw	r2, #1298	; 0x512
 8007de4:	49a0      	ldr	r1, [pc, #640]	; (8008068 <mqtt_client_connect+0x2fc>)
 8007de6:	489d      	ldr	r0, [pc, #628]	; (800805c <mqtt_client_connect+0x2f0>)
 8007de8:	f00b f842 	bl	8012e70 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	7a9b      	ldrb	r3, [r3, #10]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8007df4:	f06f 0309 	mvn.w	r3, #9
 8007df8:	e221      	b.n	800823e <mqtt_client_connect+0x4d2>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8007dfa:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8007dfe:	2100      	movs	r1, #0
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f00b f82d 	bl	8012e60 <memset>
  client->connect_arg = arg;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0a:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 8007e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e14:	899a      	ldrh	r2, [r3, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	331c      	adds	r3, #28
 8007e1e:	2104      	movs	r1, #4
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fe ffbf 	bl	8006da4 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 8007e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d073      	beq.n	8007f16 <mqtt_client_connect+0x1aa>
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d06f      	beq.n	8007f16 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 8007e36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e3a:	f043 0304 	orr.w	r3, r3, #4
 8007e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 8007e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e44:	7e1b      	ldrb	r3, [r3, #24]
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	b25b      	sxtb	r3, r3
 8007e4a:	f003 0318 	and.w	r3, r3, #24
 8007e4e:	b25a      	sxtb	r2, r3
 8007e50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8007e54:	4313      	orrs	r3, r2
 8007e56:	b25b      	sxtb	r3, r3
 8007e58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5e:	7e5b      	ldrb	r3, [r3, #25]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 8007e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e68:	f043 0320 	orr.w	r3, r3, #32
 8007e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7f8 f9b5 	bl	80001e4 <strlen>
 8007e7a:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2bff      	cmp	r3, #255	; 0xff
 8007e80:	d909      	bls.n	8007e96 <mqtt_client_connect+0x12a>
 8007e82:	4b74      	ldr	r3, [pc, #464]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007e84:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 8007e88:	4978      	ldr	r1, [pc, #480]	; (800806c <mqtt_client_connect+0x300>)
 8007e8a:	4874      	ldr	r0, [pc, #464]	; (800805c <mqtt_client_connect+0x2f0>)
 8007e8c:	f00a fff0 	bl	8012e70 <iprintf>
 8007e90:	f06f 0305 	mvn.w	r3, #5
 8007e94:	e1d3      	b.n	800823e <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <mqtt_client_connect+0x144>
 8007e9c:	4b6d      	ldr	r3, [pc, #436]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007e9e:	f240 5229 	movw	r2, #1321	; 0x529
 8007ea2:	4973      	ldr	r1, [pc, #460]	; (8008070 <mqtt_client_connect+0x304>)
 8007ea4:	486d      	ldr	r0, [pc, #436]	; (800805c <mqtt_client_connect+0x2f0>)
 8007ea6:	f00a ffe3 	bl	8012e70 <iprintf>
 8007eaa:	f06f 0305 	mvn.w	r3, #5
 8007eae:	e1c6      	b.n	800823e <mqtt_client_connect+0x4d2>
    will_topic_len = (u8_t)len;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 8007eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f8 f992 	bl	80001e4 <strlen>
 8007ec0:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2bff      	cmp	r3, #255	; 0xff
 8007ec6:	d909      	bls.n	8007edc <mqtt_client_connect+0x170>
 8007ec8:	4b62      	ldr	r3, [pc, #392]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007eca:	f240 522c 	movw	r2, #1324	; 0x52c
 8007ece:	4969      	ldr	r1, [pc, #420]	; (8008074 <mqtt_client_connect+0x308>)
 8007ed0:	4862      	ldr	r0, [pc, #392]	; (800805c <mqtt_client_connect+0x2f0>)
 8007ed2:	f00a ffcd 	bl	8012e70 <iprintf>
 8007ed6:	f06f 0305 	mvn.w	r3, #5
 8007eda:	e1b0      	b.n	800823e <mqtt_client_connect+0x4d2>
    will_msg_len = (u8_t)len;
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8007ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ee4:	1c9a      	adds	r2, r3, #2
 8007ee6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007eea:	4413      	add	r3, r2
 8007eec:	1c9a      	adds	r2, r3, #2
 8007eee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007ef2:	4413      	add	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efc:	d309      	bcc.n	8007f12 <mqtt_client_connect+0x1a6>
 8007efe:	4b55      	ldr	r3, [pc, #340]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007f00:	f240 522f 	movw	r2, #1327	; 0x52f
 8007f04:	495c      	ldr	r1, [pc, #368]	; (8008078 <mqtt_client_connect+0x30c>)
 8007f06:	4855      	ldr	r0, [pc, #340]	; (800805c <mqtt_client_connect+0x2f0>)
 8007f08:	f00a ffb2 	bl	8012e70 <iprintf>
 8007f0c:	f06f 0305 	mvn.w	r3, #5
 8007f10:	e195      	b.n	800823e <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 8007f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d03d      	beq.n	8007f9a <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 8007f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7f8 f958 	bl	80001e4 <strlen>
 8007f34:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3c:	d309      	bcc.n	8007f52 <mqtt_client_connect+0x1e6>
 8007f3e:	4b45      	ldr	r3, [pc, #276]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007f40:	f240 5235 	movw	r2, #1333	; 0x535
 8007f44:	494d      	ldr	r1, [pc, #308]	; (800807c <mqtt_client_connect+0x310>)
 8007f46:	4845      	ldr	r0, [pc, #276]	; (800805c <mqtt_client_connect+0x2f0>)
 8007f48:	f00a ff92 	bl	8012e70 <iprintf>
 8007f4c:	f06f 0305 	mvn.w	r3, #5
 8007f50:	e175      	b.n	800823e <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <mqtt_client_connect+0x200>
 8007f58:	4b3e      	ldr	r3, [pc, #248]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007f5a:	f240 5236 	movw	r2, #1334	; 0x536
 8007f5e:	4948      	ldr	r1, [pc, #288]	; (8008080 <mqtt_client_connect+0x314>)
 8007f60:	483e      	ldr	r0, [pc, #248]	; (800805c <mqtt_client_connect+0x2f0>)
 8007f62:	f00a ff85 	bl	8012e70 <iprintf>
 8007f66:	f06f 0305 	mvn.w	r3, #5
 8007f6a:	e168      	b.n	800823e <mqtt_client_connect+0x4d2>
    client_user_len = (u16_t)len;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 8007f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f72:	1c9a      	adds	r2, r3, #2
 8007f74:	8bfb      	ldrh	r3, [r7, #30]
 8007f76:	4413      	add	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f80:	d309      	bcc.n	8007f96 <mqtt_client_connect+0x22a>
 8007f82:	4b34      	ldr	r3, [pc, #208]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007f84:	f240 5239 	movw	r2, #1337	; 0x539
 8007f88:	493b      	ldr	r1, [pc, #236]	; (8008078 <mqtt_client_connect+0x30c>)
 8007f8a:	4834      	ldr	r0, [pc, #208]	; (800805c <mqtt_client_connect+0x2f0>)
 8007f8c:	f00a ff70 	bl	8012e70 <iprintf>
 8007f90:	f06f 0305 	mvn.w	r3, #5
 8007f94:	e153      	b.n	800823e <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d03d      	beq.n	800801e <mqtt_client_connect+0x2b2>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 8007fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f8 f916 	bl	80001e4 <strlen>
 8007fb8:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc0:	d309      	bcc.n	8007fd6 <mqtt_client_connect+0x26a>
 8007fc2:	4b24      	ldr	r3, [pc, #144]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007fc4:	f240 523f 	movw	r2, #1343	; 0x53f
 8007fc8:	492e      	ldr	r1, [pc, #184]	; (8008084 <mqtt_client_connect+0x318>)
 8007fca:	4824      	ldr	r0, [pc, #144]	; (800805c <mqtt_client_connect+0x2f0>)
 8007fcc:	f00a ff50 	bl	8012e70 <iprintf>
 8007fd0:	f06f 0305 	mvn.w	r3, #5
 8007fd4:	e133      	b.n	800823e <mqtt_client_connect+0x4d2>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <mqtt_client_connect+0x284>
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <mqtt_client_connect+0x2e8>)
 8007fde:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8007fe2:	4929      	ldr	r1, [pc, #164]	; (8008088 <mqtt_client_connect+0x31c>)
 8007fe4:	481d      	ldr	r0, [pc, #116]	; (800805c <mqtt_client_connect+0x2f0>)
 8007fe6:	f00a ff43 	bl	8012e70 <iprintf>
 8007fea:	f06f 0305 	mvn.w	r3, #5
 8007fee:	e126      	b.n	800823e <mqtt_client_connect+0x4d2>
    client_pass_len = (u16_t)len;
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 8007ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ff6:	1c9a      	adds	r2, r3, #2
 8007ff8:	8bbb      	ldrh	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008004:	d309      	bcc.n	800801a <mqtt_client_connect+0x2ae>
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <mqtt_client_connect+0x2e8>)
 8008008:	f240 5243 	movw	r2, #1347	; 0x543
 800800c:	491a      	ldr	r1, [pc, #104]	; (8008078 <mqtt_client_connect+0x30c>)
 800800e:	4813      	ldr	r0, [pc, #76]	; (800805c <mqtt_client_connect+0x2f0>)
 8008010:	f00a ff2e 	bl	8012e70 <iprintf>
 8008014:	f06f 0305 	mvn.w	r3, #5
 8008018:	e111      	b.n	800823e <mqtt_client_connect+0x4d2>
    remaining_length = (u16_t)len;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800801e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008022:	f043 0302 	orr.w	r3, r3, #2
 8008026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f7f8 f8d8 	bl	80001e4 <strlen>
 8008034:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803c:	d328      	bcc.n	8008090 <mqtt_client_connect+0x324>
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <mqtt_client_connect+0x2e8>)
 8008040:	f240 524b 	movw	r2, #1355	; 0x54b
 8008044:	4911      	ldr	r1, [pc, #68]	; (800808c <mqtt_client_connect+0x320>)
 8008046:	4805      	ldr	r0, [pc, #20]	; (800805c <mqtt_client_connect+0x2f0>)
 8008048:	f00a ff12 	bl	8012e70 <iprintf>
 800804c:	f06f 0305 	mvn.w	r3, #5
 8008050:	e0f5      	b.n	800823e <mqtt_client_connect+0x4d2>
 8008052:	bf00      	nop
 8008054:	08014a24 	.word	0x08014a24
 8008058:	08014ea4 	.word	0x08014ea4
 800805c:	08014a9c 	.word	0x08014a9c
 8008060:	08014ec8 	.word	0x08014ec8
 8008064:	08014ef0 	.word	0x08014ef0
 8008068:	08014f1c 	.word	0x08014f1c
 800806c:	08014f50 	.word	0x08014f50
 8008070:	08014f90 	.word	0x08014f90
 8008074:	08014fd0 	.word	0x08014fd0
 8008078:	0801500c 	.word	0x0801500c
 800807c:	0801503c 	.word	0x0801503c
 8008080:	0801507c 	.word	0x0801507c
 8008084:	080150c0 	.word	0x080150c0
 8008088:	08015100 	.word	0x08015100
 800808c:	08015144 	.word	0x08015144
  client_id_length = (u16_t)len;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 8008094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008096:	1c9a      	adds	r2, r3, #2
 8008098:	8afb      	ldrh	r3, [r7, #22]
 800809a:	4413      	add	r3, r2
 800809c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a4:	d309      	bcc.n	80080ba <mqtt_client_connect+0x34e>
 80080a6:	4b68      	ldr	r3, [pc, #416]	; (8008248 <mqtt_client_connect+0x4dc>)
 80080a8:	f240 524e 	movw	r2, #1358	; 0x54e
 80080ac:	4967      	ldr	r1, [pc, #412]	; (800824c <mqtt_client_connect+0x4e0>)
 80080ae:	4868      	ldr	r0, [pc, #416]	; (8008250 <mqtt_client_connect+0x4e4>)
 80080b0:	f00a fede 	bl	8012e70 <iprintf>
 80080b4:	f06f 0305 	mvn.w	r3, #5
 80080b8:	e0c1      	b.n	800823e <mqtt_client_connect+0x4d2>
  remaining_length = (u16_t)len;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	33ec      	adds	r3, #236	; 0xec
 80080c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe ff56 	bl	8006f78 <mqtt_output_check_space>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <mqtt_client_connect+0x36c>
    return ERR_MEM;
 80080d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d6:	e0b2      	b.n	800823e <mqtt_client_connect+0x4d2>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 80080d8:	2000      	movs	r0, #0
 80080da:	f003 fbbd 	bl	800b858 <tcp_new_ip_type>
 80080de:	4602      	mov	r2, r0
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <mqtt_client_connect+0x386>
    return ERR_MEM;
 80080ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080f0:	e0a5      	b.n	800823e <mqtt_client_connect+0x4d2>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f003 fbbb 	bl	800b874 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	4953      	ldr	r1, [pc, #332]	; (8008254 <mqtt_client_connect+0x4e8>)
 8008106:	4618      	mov	r0, r3
 8008108:	f002 f9ea 	bl	800a4e0 <tcp_bind>
 800810c:	4603      	mov	r3, r0
 800810e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8008112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008116:	2b00      	cmp	r3, #0
 8008118:	f040 8084 	bne.w	8008224 <mqtt_client_connect+0x4b8>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68d8      	ldr	r0, [r3, #12]
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	4b4d      	ldr	r3, [pc, #308]	; (8008258 <mqtt_client_connect+0x4ec>)
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	f002 fc3f 	bl	800a9a8 <tcp_connect>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8008130:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008134:	2b00      	cmp	r3, #0
 8008136:	d177      	bne.n	8008228 <mqtt_client_connect+0x4bc>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4947      	ldr	r1, [pc, #284]	; (800825c <mqtt_client_connect+0x4f0>)
 800813e:	4618      	mov	r0, r3
 8008140:	f003 fbee 	bl	800b920 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008152:	9301      	str	r3, [sp, #4]
 8008154:	2300      	movs	r3, #0
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	2300      	movs	r3, #0
 800815a:	2200      	movs	r2, #0
 800815c:	2101      	movs	r1, #1
 800815e:	f7fe fec0 	bl	8006ee2 <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	33ec      	adds	r3, #236	; 0xec
 8008166:	2204      	movs	r2, #4
 8008168:	493d      	ldr	r1, [pc, #244]	; (8008260 <mqtt_client_connect+0x4f4>)
 800816a:	4618      	mov	r0, r3
 800816c:	f7fe fe8d 	bl	8006e8a <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	33ec      	adds	r3, #236	; 0xec
 8008174:	2104      	movs	r1, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fe42 	bl	8006e00 <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	33ec      	adds	r3, #236	; 0xec
 8008180:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fe3a 	bl	8006e00 <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8008192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008194:	899b      	ldrh	r3, [r3, #12]
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fe fe40 	bl	8006e1e <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80081a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	8afa      	ldrh	r2, [r7, #22]
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7fe fe6d 	bl	8006e8a <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 80081b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d015      	beq.n	80081e8 <mqtt_client_connect+0x47c>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80081ca:	b292      	uxth	r2, r2
 80081cc:	4619      	mov	r1, r3
 80081ce:	f7fe fe5c 	bl	8006e8a <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80081d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80081e0:	b292      	uxth	r2, r2
 80081e2:	4619      	mov	r1, r3
 80081e4:	f7fe fe51 	bl	8006e8a <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 80081e8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da08      	bge.n	8008202 <mqtt_client_connect+0x496>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 80081f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	8bfa      	ldrh	r2, [r7, #30]
 80081fc:	4619      	mov	r1, r3
 80081fe:	f7fe fe44 	bl	8006e8a <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 8008202:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820a:	2b00      	cmp	r3, #0
 800820c:	d008      	beq.n	8008220 <mqtt_client_connect+0x4b4>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8008214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	8bba      	ldrh	r2, [r7, #28]
 800821a:	4619      	mov	r1, r3
 800821c:	f7fe fe35 	bl	8006e8a <mqtt_output_append_string>
  }
  return ERR_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	e00c      	b.n	800823e <mqtt_client_connect+0x4d2>
    goto tcp_fail;
 8008224:	bf00      	nop
 8008226:	e000      	b.n	800822a <mqtt_client_connect+0x4be>
    goto tcp_fail;
 8008228:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	4618      	mov	r0, r3
 8008230:	f002 f94a 	bl	800a4c8 <tcp_abort>
  client->conn = NULL;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	60da      	str	r2, [r3, #12]
  return err;
 800823a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800823e:	4618      	mov	r0, r3
 8008240:	3728      	adds	r7, #40	; 0x28
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	08014a24 	.word	0x08014a24
 800824c:	0801500c 	.word	0x0801500c
 8008250:	08014a9c 	.word	0x08014a9c
 8008254:	0801ab00 	.word	0x0801ab00
 8008258:	08007939 	.word	0x08007939
 800825c:	080078c5 	.word	0x080078c5
 8008260:	08015180 	.word	0x08015180

08008264 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	b21a      	sxth	r2, r3
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	0a1b      	lsrs	r3, r3, #8
 8008278:	b29b      	uxth	r3, r3
 800827a:	b21b      	sxth	r3, r3
 800827c:	4313      	orrs	r3, r2
 800827e:	b21b      	sxth	r3, r3
 8008280:	b29b      	uxth	r3, r3
}
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	061a      	lsls	r2, r3, #24
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0e1b      	lsrs	r3, r3, #24
 80082b2:	4313      	orrs	r3, r2
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80082cc:	68b8      	ldr	r0, [r7, #8]
 80082ce:	f7f7 ff89 	bl	80001e4 <strlen>
 80082d2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	e022      	b.n	8008324 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	617b      	str	r3, [r7, #20]
 80082e2:	e012      	b.n	800830a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	781a      	ldrb	r2, [r3, #0]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d109      	bne.n	8008304 <lwip_strnstr+0x44>
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	68b9      	ldr	r1, [r7, #8]
 80082f4:	6978      	ldr	r0, [r7, #20]
 80082f6:	f00a fe48 	bl	8012f8a <strncmp>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	e00f      	b.n	8008324 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	3301      	adds	r3, #1
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d007      	beq.n	8008322 <lwip_strnstr+0x62>
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	441a      	add	r2, r3
 8008318:	68f9      	ldr	r1, [r7, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	440b      	add	r3, r1
 800831e:	429a      	cmp	r2, r3
 8008320:	d9e0      	bls.n	80082e4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	603a      	str	r2, [r7, #0]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800834a:	7bfa      	ldrb	r2, [r7, #15]
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	429a      	cmp	r2, r3
 8008350:	d016      	beq.n	8008380 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8008352:	7bfb      	ldrb	r3, [r7, #15]
 8008354:	f043 0320 	orr.w	r3, r3, #32
 8008358:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800835a:	7b7b      	ldrb	r3, [r7, #13]
 800835c:	2b60      	cmp	r3, #96	; 0x60
 800835e:	d90c      	bls.n	800837a <lwip_stricmp+0x4e>
 8008360:	7b7b      	ldrb	r3, [r7, #13]
 8008362:	2b7a      	cmp	r3, #122	; 0x7a
 8008364:	d809      	bhi.n	800837a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	f043 0320 	orr.w	r3, r3, #32
 800836c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800836e:	7b7a      	ldrb	r2, [r7, #13]
 8008370:	7b3b      	ldrb	r3, [r7, #12]
 8008372:	429a      	cmp	r2, r3
 8008374:	d003      	beq.n	800837e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8008376:	2301      	movs	r3, #1
 8008378:	e006      	b.n	8008388 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800837a:	2301      	movs	r3, #1
 800837c:	e004      	b.n	8008388 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800837e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1d7      	bne.n	8008336 <lwip_stricmp+0xa>
  return 0;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800839e:	f000 f8d5 	bl	800854c <mem_init>
  memp_init();
 80083a2:	f000 fc03 	bl	8008bac <memp_init>
  pbuf_init();
  netif_init();
 80083a6:	f000 fcbb 	bl	8008d20 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80083aa:	f008 f885 	bl	80104b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80083ae:	f001 fd91 	bl	8009ed4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80083b2:	f007 ffbd 	bl	8010330 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80083ca:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <ptr_to_mem+0x20>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	4413      	add	r3, r2
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20000518 	.word	0x20000518

080083e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80083ec:	4b05      	ldr	r3, [pc, #20]	; (8008404 <mem_to_ptr+0x20>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	b29b      	uxth	r3, r3
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20000518 	.word	0x20000518

08008408 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008410:	4b45      	ldr	r3, [pc, #276]	; (8008528 <plug_holes+0x120>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d206      	bcs.n	8008428 <plug_holes+0x20>
 800841a:	4b44      	ldr	r3, [pc, #272]	; (800852c <plug_holes+0x124>)
 800841c:	f240 12df 	movw	r2, #479	; 0x1df
 8008420:	4943      	ldr	r1, [pc, #268]	; (8008530 <plug_holes+0x128>)
 8008422:	4844      	ldr	r0, [pc, #272]	; (8008534 <plug_holes+0x12c>)
 8008424:	f00a fd24 	bl	8012e70 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008428:	4b43      	ldr	r3, [pc, #268]	; (8008538 <plug_holes+0x130>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d306      	bcc.n	8008440 <plug_holes+0x38>
 8008432:	4b3e      	ldr	r3, [pc, #248]	; (800852c <plug_holes+0x124>)
 8008434:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008438:	4940      	ldr	r1, [pc, #256]	; (800853c <plug_holes+0x134>)
 800843a:	483e      	ldr	r0, [pc, #248]	; (8008534 <plug_holes+0x12c>)
 800843c:	f00a fd18 	bl	8012e70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	791b      	ldrb	r3, [r3, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d006      	beq.n	8008456 <plug_holes+0x4e>
 8008448:	4b38      	ldr	r3, [pc, #224]	; (800852c <plug_holes+0x124>)
 800844a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800844e:	493c      	ldr	r1, [pc, #240]	; (8008540 <plug_holes+0x138>)
 8008450:	4838      	ldr	r0, [pc, #224]	; (8008534 <plug_holes+0x12c>)
 8008452:	f00a fd0d 	bl	8012e70 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800845e:	d906      	bls.n	800846e <plug_holes+0x66>
 8008460:	4b32      	ldr	r3, [pc, #200]	; (800852c <plug_holes+0x124>)
 8008462:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008466:	4937      	ldr	r1, [pc, #220]	; (8008544 <plug_holes+0x13c>)
 8008468:	4832      	ldr	r0, [pc, #200]	; (8008534 <plug_holes+0x12c>)
 800846a:	f00a fd01 	bl	8012e70 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f7ff ffa4 	bl	80083c0 <ptr_to_mem>
 8008478:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	429a      	cmp	r2, r3
 8008480:	d024      	beq.n	80084cc <plug_holes+0xc4>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	791b      	ldrb	r3, [r3, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d120      	bne.n	80084cc <plug_holes+0xc4>
 800848a:	4b2b      	ldr	r3, [pc, #172]	; (8008538 <plug_holes+0x130>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	429a      	cmp	r2, r3
 8008492:	d01b      	beq.n	80084cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008494:	4b2c      	ldr	r3, [pc, #176]	; (8008548 <plug_holes+0x140>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	429a      	cmp	r2, r3
 800849c:	d102      	bne.n	80084a4 <plug_holes+0x9c>
      lfree = mem;
 800849e:	4a2a      	ldr	r2, [pc, #168]	; (8008548 <plug_holes+0x140>)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	881a      	ldrh	r2, [r3, #0]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084b4:	d00a      	beq.n	80084cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ff80 	bl	80083c0 <ptr_to_mem>
 80084c0:	4604      	mov	r4, r0
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff ff8e 	bl	80083e4 <mem_to_ptr>
 80084c8:	4603      	mov	r3, r0
 80084ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	885b      	ldrh	r3, [r3, #2]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff ff75 	bl	80083c0 <ptr_to_mem>
 80084d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d01f      	beq.n	8008520 <plug_holes+0x118>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	791b      	ldrb	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d11b      	bne.n	8008520 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80084e8:	4b17      	ldr	r3, [pc, #92]	; (8008548 <plug_holes+0x140>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d102      	bne.n	80084f8 <plug_holes+0xf0>
      lfree = pmem;
 80084f2:	4a15      	ldr	r2, [pc, #84]	; (8008548 <plug_holes+0x140>)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	881a      	ldrh	r2, [r3, #0]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008508:	d00a      	beq.n	8008520 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff ff56 	bl	80083c0 <ptr_to_mem>
 8008514:	4604      	mov	r4, r0
 8008516:	68b8      	ldr	r0, [r7, #8]
 8008518:	f7ff ff64 	bl	80083e4 <mem_to_ptr>
 800851c:	4603      	mov	r3, r0
 800851e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008520:	bf00      	nop
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	bd90      	pop	{r4, r7, pc}
 8008528:	20000518 	.word	0x20000518
 800852c:	080151d4 	.word	0x080151d4
 8008530:	08015204 	.word	0x08015204
 8008534:	0801521c 	.word	0x0801521c
 8008538:	2000051c 	.word	0x2000051c
 800853c:	08015244 	.word	0x08015244
 8008540:	08015260 	.word	0x08015260
 8008544:	0801527c 	.word	0x0801527c
 8008548:	20000520 	.word	0x20000520

0800854c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008552:	4b18      	ldr	r3, [pc, #96]	; (80085b4 <mem_init+0x68>)
 8008554:	3303      	adds	r3, #3
 8008556:	f023 0303 	bic.w	r3, r3, #3
 800855a:	461a      	mov	r2, r3
 800855c:	4b16      	ldr	r3, [pc, #88]	; (80085b8 <mem_init+0x6c>)
 800855e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008560:	4b15      	ldr	r3, [pc, #84]	; (80085b8 <mem_init+0x6c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800856c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800857a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800857e:	f7ff ff1f 	bl	80083c0 <ptr_to_mem>
 8008582:	4603      	mov	r3, r0
 8008584:	4a0d      	ldr	r2, [pc, #52]	; (80085bc <mem_init+0x70>)
 8008586:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <mem_init+0x70>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2201      	movs	r2, #1
 800858e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008590:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <mem_init+0x70>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008598:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800859a:	4b08      	ldr	r3, [pc, #32]	; (80085bc <mem_init+0x70>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80085a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <mem_init+0x6c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a05      	ldr	r2, [pc, #20]	; (80085c0 <mem_init+0x74>)
 80085aa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20004090 	.word	0x20004090
 80085b8:	20000518 	.word	0x20000518
 80085bc:	2000051c 	.word	0x2000051c
 80085c0:	20000520 	.word	0x20000520

080085c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f7ff ff09 	bl	80083e4 <mem_to_ptr>
 80085d2:	4603      	mov	r3, r0
 80085d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	881b      	ldrh	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fef0 	bl	80083c0 <ptr_to_mem>
 80085e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	885b      	ldrh	r3, [r3, #2]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff feea 	bl	80083c0 <ptr_to_mem>
 80085ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80085f6:	d818      	bhi.n	800862a <mem_link_valid+0x66>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008600:	d813      	bhi.n	800862a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008606:	8afa      	ldrh	r2, [r7, #22]
 8008608:	429a      	cmp	r2, r3
 800860a:	d004      	beq.n	8008616 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	8afa      	ldrh	r2, [r7, #22]
 8008612:	429a      	cmp	r2, r3
 8008614:	d109      	bne.n	800862a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008616:	4b08      	ldr	r3, [pc, #32]	; (8008638 <mem_link_valid+0x74>)
 8008618:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	429a      	cmp	r2, r3
 800861e:	d006      	beq.n	800862e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	8afa      	ldrh	r2, [r7, #22]
 8008626:	429a      	cmp	r2, r3
 8008628:	d001      	beq.n	800862e <mem_link_valid+0x6a>
    return 0;
 800862a:	2300      	movs	r3, #0
 800862c:	e000      	b.n	8008630 <mem_link_valid+0x6c>
  }
  return 1;
 800862e:	2301      	movs	r3, #1
}
 8008630:	4618      	mov	r0, r3
 8008632:	3718      	adds	r7, #24
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	2000051c 	.word	0x2000051c

0800863c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d04c      	beq.n	80086e4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008654:	4b25      	ldr	r3, [pc, #148]	; (80086ec <mem_free+0xb0>)
 8008656:	f240 2273 	movw	r2, #627	; 0x273
 800865a:	4925      	ldr	r1, [pc, #148]	; (80086f0 <mem_free+0xb4>)
 800865c:	4825      	ldr	r0, [pc, #148]	; (80086f4 <mem_free+0xb8>)
 800865e:	f00a fc07 	bl	8012e70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008662:	e040      	b.n	80086e6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3b08      	subs	r3, #8
 8008668:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800866a:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <mem_free+0xbc>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	429a      	cmp	r2, r3
 8008672:	d306      	bcc.n	8008682 <mem_free+0x46>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f103 020c 	add.w	r2, r3, #12
 800867a:	4b20      	ldr	r3, [pc, #128]	; (80086fc <mem_free+0xc0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d907      	bls.n	8008692 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008682:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <mem_free+0xb0>)
 8008684:	f240 227f 	movw	r2, #639	; 0x27f
 8008688:	491d      	ldr	r1, [pc, #116]	; (8008700 <mem_free+0xc4>)
 800868a:	481a      	ldr	r0, [pc, #104]	; (80086f4 <mem_free+0xb8>)
 800868c:	f00a fbf0 	bl	8012e70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008690:	e029      	b.n	80086e6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	791b      	ldrb	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d107      	bne.n	80086aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800869a:	4b14      	ldr	r3, [pc, #80]	; (80086ec <mem_free+0xb0>)
 800869c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80086a0:	4918      	ldr	r1, [pc, #96]	; (8008704 <mem_free+0xc8>)
 80086a2:	4814      	ldr	r0, [pc, #80]	; (80086f4 <mem_free+0xb8>)
 80086a4:	f00a fbe4 	bl	8012e70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80086a8:	e01d      	b.n	80086e6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff ff8a 	bl	80085c4 <mem_link_valid>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d107      	bne.n	80086c6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80086b6:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <mem_free+0xb0>)
 80086b8:	f240 2295 	movw	r2, #661	; 0x295
 80086bc:	4912      	ldr	r1, [pc, #72]	; (8008708 <mem_free+0xcc>)
 80086be:	480d      	ldr	r0, [pc, #52]	; (80086f4 <mem_free+0xb8>)
 80086c0:	f00a fbd6 	bl	8012e70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80086c4:	e00f      	b.n	80086e6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80086cc:	4b0f      	ldr	r3, [pc, #60]	; (800870c <mem_free+0xd0>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d202      	bcs.n	80086dc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80086d6:	4a0d      	ldr	r2, [pc, #52]	; (800870c <mem_free+0xd0>)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7ff fe93 	bl	8008408 <plug_holes>
 80086e2:	e000      	b.n	80086e6 <mem_free+0xaa>
    return;
 80086e4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	080151d4 	.word	0x080151d4
 80086f0:	080152a8 	.word	0x080152a8
 80086f4:	0801521c 	.word	0x0801521c
 80086f8:	20000518 	.word	0x20000518
 80086fc:	2000051c 	.word	0x2000051c
 8008700:	080152cc 	.word	0x080152cc
 8008704:	080152e8 	.word	0x080152e8
 8008708:	08015310 	.word	0x08015310
 800870c:	20000520 	.word	0x20000520

08008710 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800871c:	887b      	ldrh	r3, [r7, #2]
 800871e:	3303      	adds	r3, #3
 8008720:	b29b      	uxth	r3, r3
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8008728:	8bfb      	ldrh	r3, [r7, #30]
 800872a:	2b0b      	cmp	r3, #11
 800872c:	d801      	bhi.n	8008732 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800872e:	230c      	movs	r3, #12
 8008730:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008732:	8bfb      	ldrh	r3, [r7, #30]
 8008734:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008738:	d803      	bhi.n	8008742 <mem_trim+0x32>
 800873a:	8bfa      	ldrh	r2, [r7, #30]
 800873c:	887b      	ldrh	r3, [r7, #2]
 800873e:	429a      	cmp	r2, r3
 8008740:	d201      	bcs.n	8008746 <mem_trim+0x36>
    return NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	e0cc      	b.n	80088e0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008746:	4b68      	ldr	r3, [pc, #416]	; (80088e8 <mem_trim+0x1d8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d304      	bcc.n	800875a <mem_trim+0x4a>
 8008750:	4b66      	ldr	r3, [pc, #408]	; (80088ec <mem_trim+0x1dc>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d306      	bcc.n	8008768 <mem_trim+0x58>
 800875a:	4b65      	ldr	r3, [pc, #404]	; (80088f0 <mem_trim+0x1e0>)
 800875c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8008760:	4964      	ldr	r1, [pc, #400]	; (80088f4 <mem_trim+0x1e4>)
 8008762:	4865      	ldr	r0, [pc, #404]	; (80088f8 <mem_trim+0x1e8>)
 8008764:	f00a fb84 	bl	8012e70 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008768:	4b5f      	ldr	r3, [pc, #380]	; (80088e8 <mem_trim+0x1d8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	429a      	cmp	r2, r3
 8008770:	d304      	bcc.n	800877c <mem_trim+0x6c>
 8008772:	4b5e      	ldr	r3, [pc, #376]	; (80088ec <mem_trim+0x1dc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	429a      	cmp	r2, r3
 800877a:	d301      	bcc.n	8008780 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	e0af      	b.n	80088e0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3b08      	subs	r3, #8
 8008784:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008786:	69b8      	ldr	r0, [r7, #24]
 8008788:	f7ff fe2c 	bl	80083e4 <mem_to_ptr>
 800878c:	4603      	mov	r3, r0
 800878e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	881a      	ldrh	r2, [r3, #0]
 8008794:	8afb      	ldrh	r3, [r7, #22]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	b29b      	uxth	r3, r3
 800879a:	3b08      	subs	r3, #8
 800879c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800879e:	8bfa      	ldrh	r2, [r7, #30]
 80087a0:	8abb      	ldrh	r3, [r7, #20]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d906      	bls.n	80087b4 <mem_trim+0xa4>
 80087a6:	4b52      	ldr	r3, [pc, #328]	; (80088f0 <mem_trim+0x1e0>)
 80087a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80087ac:	4953      	ldr	r1, [pc, #332]	; (80088fc <mem_trim+0x1ec>)
 80087ae:	4852      	ldr	r0, [pc, #328]	; (80088f8 <mem_trim+0x1e8>)
 80087b0:	f00a fb5e 	bl	8012e70 <iprintf>
  if (newsize > size) {
 80087b4:	8bfa      	ldrh	r2, [r7, #30]
 80087b6:	8abb      	ldrh	r3, [r7, #20]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d901      	bls.n	80087c0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80087bc:	2300      	movs	r3, #0
 80087be:	e08f      	b.n	80088e0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80087c0:	8bfa      	ldrh	r2, [r7, #30]
 80087c2:	8abb      	ldrh	r3, [r7, #20]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d101      	bne.n	80087cc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	e089      	b.n	80088e0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7ff fdf5 	bl	80083c0 <ptr_to_mem>
 80087d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	791b      	ldrb	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d13f      	bne.n	8008860 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087e8:	d106      	bne.n	80087f8 <mem_trim+0xe8>
 80087ea:	4b41      	ldr	r3, [pc, #260]	; (80088f0 <mem_trim+0x1e0>)
 80087ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 80087f0:	4943      	ldr	r1, [pc, #268]	; (8008900 <mem_trim+0x1f0>)
 80087f2:	4841      	ldr	r0, [pc, #260]	; (80088f8 <mem_trim+0x1e8>)
 80087f4:	f00a fb3c 	bl	8012e70 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80087fe:	8afa      	ldrh	r2, [r7, #22]
 8008800:	8bfb      	ldrh	r3, [r7, #30]
 8008802:	4413      	add	r3, r2
 8008804:	b29b      	uxth	r3, r3
 8008806:	3308      	adds	r3, #8
 8008808:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800880a:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <mem_trim+0x1f4>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	693a      	ldr	r2, [r7, #16]
 8008810:	429a      	cmp	r2, r3
 8008812:	d106      	bne.n	8008822 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008814:	89fb      	ldrh	r3, [r7, #14]
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fdd2 	bl	80083c0 <ptr_to_mem>
 800881c:	4603      	mov	r3, r0
 800881e:	4a39      	ldr	r2, [pc, #228]	; (8008904 <mem_trim+0x1f4>)
 8008820:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008822:	89fb      	ldrh	r3, [r7, #14]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff fdcb 	bl	80083c0 <ptr_to_mem>
 800882a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2200      	movs	r2, #0
 8008830:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	89ba      	ldrh	r2, [r7, #12]
 8008836:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	8afa      	ldrh	r2, [r7, #22]
 800883c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	89fa      	ldrh	r2, [r7, #14]
 8008842:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800884c:	d047      	beq.n	80088de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	881b      	ldrh	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff fdb4 	bl	80083c0 <ptr_to_mem>
 8008858:	4602      	mov	r2, r0
 800885a:	89fb      	ldrh	r3, [r7, #14]
 800885c:	8053      	strh	r3, [r2, #2]
 800885e:	e03e      	b.n	80088de <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008860:	8bfb      	ldrh	r3, [r7, #30]
 8008862:	f103 0214 	add.w	r2, r3, #20
 8008866:	8abb      	ldrh	r3, [r7, #20]
 8008868:	429a      	cmp	r2, r3
 800886a:	d838      	bhi.n	80088de <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800886c:	8afa      	ldrh	r2, [r7, #22]
 800886e:	8bfb      	ldrh	r3, [r7, #30]
 8008870:	4413      	add	r3, r2
 8008872:	b29b      	uxth	r3, r3
 8008874:	3308      	adds	r3, #8
 8008876:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008880:	d106      	bne.n	8008890 <mem_trim+0x180>
 8008882:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <mem_trim+0x1e0>)
 8008884:	f240 3216 	movw	r2, #790	; 0x316
 8008888:	491d      	ldr	r1, [pc, #116]	; (8008900 <mem_trim+0x1f0>)
 800888a:	481b      	ldr	r0, [pc, #108]	; (80088f8 <mem_trim+0x1e8>)
 800888c:	f00a faf0 	bl	8012e70 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008890:	89fb      	ldrh	r3, [r7, #14]
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fd94 	bl	80083c0 <ptr_to_mem>
 8008898:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800889a:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <mem_trim+0x1f4>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d202      	bcs.n	80088aa <mem_trim+0x19a>
      lfree = mem2;
 80088a4:	4a17      	ldr	r2, [pc, #92]	; (8008904 <mem_trim+0x1f4>)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2200      	movs	r2, #0
 80088ae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	881a      	ldrh	r2, [r3, #0]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	8afa      	ldrh	r2, [r7, #22]
 80088bc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	89fa      	ldrh	r2, [r7, #14]
 80088c2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80088cc:	d007      	beq.n	80088de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fd74 	bl	80083c0 <ptr_to_mem>
 80088d8:	4602      	mov	r2, r0
 80088da:	89fb      	ldrh	r3, [r7, #14]
 80088dc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80088de:	687b      	ldr	r3, [r7, #4]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3720      	adds	r7, #32
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000518 	.word	0x20000518
 80088ec:	2000051c 	.word	0x2000051c
 80088f0:	080151d4 	.word	0x080151d4
 80088f4:	08015344 	.word	0x08015344
 80088f8:	0801521c 	.word	0x0801521c
 80088fc:	0801535c 	.word	0x0801535c
 8008900:	0801537c 	.word	0x0801537c
 8008904:	20000520 	.word	0x20000520

08008908 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <mem_malloc+0x14>
    return NULL;
 8008918:	2300      	movs	r3, #0
 800891a:	e0d9      	b.n	8008ad0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	3303      	adds	r3, #3
 8008920:	b29b      	uxth	r3, r3
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008928:	8bbb      	ldrh	r3, [r7, #28]
 800892a:	2b0b      	cmp	r3, #11
 800892c:	d801      	bhi.n	8008932 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800892e:	230c      	movs	r3, #12
 8008930:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008932:	8bbb      	ldrh	r3, [r7, #28]
 8008934:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008938:	d803      	bhi.n	8008942 <mem_malloc+0x3a>
 800893a:	8bba      	ldrh	r2, [r7, #28]
 800893c:	88fb      	ldrh	r3, [r7, #6]
 800893e:	429a      	cmp	r2, r3
 8008940:	d201      	bcs.n	8008946 <mem_malloc+0x3e>
    return NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	e0c4      	b.n	8008ad0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008946:	4b64      	ldr	r3, [pc, #400]	; (8008ad8 <mem_malloc+0x1d0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff fd4a 	bl	80083e4 <mem_to_ptr>
 8008950:	4603      	mov	r3, r0
 8008952:	83fb      	strh	r3, [r7, #30]
 8008954:	e0b4      	b.n	8008ac0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008956:	8bfb      	ldrh	r3, [r7, #30]
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff fd31 	bl	80083c0 <ptr_to_mem>
 800895e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	791b      	ldrb	r3, [r3, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	f040 80a4 	bne.w	8008ab2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	8bfb      	ldrh	r3, [r7, #30]
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f1a3 0208 	sub.w	r2, r3, #8
 8008978:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800897a:	429a      	cmp	r2, r3
 800897c:	f0c0 8099 	bcc.w	8008ab2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	8bfb      	ldrh	r3, [r7, #30]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	f1a3 0208 	sub.w	r2, r3, #8
 800898e:	8bbb      	ldrh	r3, [r7, #28]
 8008990:	3314      	adds	r3, #20
 8008992:	429a      	cmp	r2, r3
 8008994:	d333      	bcc.n	80089fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008996:	8bfa      	ldrh	r2, [r7, #30]
 8008998:	8bbb      	ldrh	r3, [r7, #28]
 800899a:	4413      	add	r3, r2
 800899c:	b29b      	uxth	r3, r3
 800899e:	3308      	adds	r3, #8
 80089a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80089a2:	8a7b      	ldrh	r3, [r7, #18]
 80089a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80089a8:	d106      	bne.n	80089b8 <mem_malloc+0xb0>
 80089aa:	4b4c      	ldr	r3, [pc, #304]	; (8008adc <mem_malloc+0x1d4>)
 80089ac:	f240 3287 	movw	r2, #903	; 0x387
 80089b0:	494b      	ldr	r1, [pc, #300]	; (8008ae0 <mem_malloc+0x1d8>)
 80089b2:	484c      	ldr	r0, [pc, #304]	; (8008ae4 <mem_malloc+0x1dc>)
 80089b4:	f00a fa5c 	bl	8012e70 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80089b8:	8a7b      	ldrh	r3, [r7, #18]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fd00 	bl	80083c0 <ptr_to_mem>
 80089c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	881a      	ldrh	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	8bfa      	ldrh	r2, [r7, #30]
 80089d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	8a7a      	ldrh	r2, [r7, #18]
 80089da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2201      	movs	r2, #1
 80089e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80089ea:	d00b      	beq.n	8008a04 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7ff fce5 	bl	80083c0 <ptr_to_mem>
 80089f6:	4602      	mov	r2, r0
 80089f8:	8a7b      	ldrh	r3, [r7, #18]
 80089fa:	8053      	strh	r3, [r2, #2]
 80089fc:	e002      	b.n	8008a04 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2201      	movs	r2, #1
 8008a02:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008a04:	4b34      	ldr	r3, [pc, #208]	; (8008ad8 <mem_malloc+0x1d0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d127      	bne.n	8008a5e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008a0e:	4b32      	ldr	r3, [pc, #200]	; (8008ad8 <mem_malloc+0x1d0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008a14:	e005      	b.n	8008a22 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	881b      	ldrh	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff fcd0 	bl	80083c0 <ptr_to_mem>
 8008a20:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	791b      	ldrb	r3, [r3, #4]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <mem_malloc+0x12c>
 8008a2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ae8 <mem_malloc+0x1e0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d1f0      	bne.n	8008a16 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008a34:	4a28      	ldr	r2, [pc, #160]	; (8008ad8 <mem_malloc+0x1d0>)
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008a3a:	4b27      	ldr	r3, [pc, #156]	; (8008ad8 <mem_malloc+0x1d0>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ae8 <mem_malloc+0x1e0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d00b      	beq.n	8008a5e <mem_malloc+0x156>
 8008a46:	4b24      	ldr	r3, [pc, #144]	; (8008ad8 <mem_malloc+0x1d0>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	791b      	ldrb	r3, [r3, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d006      	beq.n	8008a5e <mem_malloc+0x156>
 8008a50:	4b22      	ldr	r3, [pc, #136]	; (8008adc <mem_malloc+0x1d4>)
 8008a52:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008a56:	4925      	ldr	r1, [pc, #148]	; (8008aec <mem_malloc+0x1e4>)
 8008a58:	4822      	ldr	r0, [pc, #136]	; (8008ae4 <mem_malloc+0x1dc>)
 8008a5a:	f00a fa09 	bl	8012e70 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008a5e:	8bba      	ldrh	r2, [r7, #28]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	4413      	add	r3, r2
 8008a64:	3308      	adds	r3, #8
 8008a66:	4a20      	ldr	r2, [pc, #128]	; (8008ae8 <mem_malloc+0x1e0>)
 8008a68:	6812      	ldr	r2, [r2, #0]
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d906      	bls.n	8008a7c <mem_malloc+0x174>
 8008a6e:	4b1b      	ldr	r3, [pc, #108]	; (8008adc <mem_malloc+0x1d4>)
 8008a70:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008a74:	491e      	ldr	r1, [pc, #120]	; (8008af0 <mem_malloc+0x1e8>)
 8008a76:	481b      	ldr	r0, [pc, #108]	; (8008ae4 <mem_malloc+0x1dc>)
 8008a78:	f00a f9fa 	bl	8012e70 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d006      	beq.n	8008a94 <mem_malloc+0x18c>
 8008a86:	4b15      	ldr	r3, [pc, #84]	; (8008adc <mem_malloc+0x1d4>)
 8008a88:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008a8c:	4919      	ldr	r1, [pc, #100]	; (8008af4 <mem_malloc+0x1ec>)
 8008a8e:	4815      	ldr	r0, [pc, #84]	; (8008ae4 <mem_malloc+0x1dc>)
 8008a90:	f00a f9ee 	bl	8012e70 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d006      	beq.n	8008aac <mem_malloc+0x1a4>
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <mem_malloc+0x1d4>)
 8008aa0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008aa4:	4914      	ldr	r1, [pc, #80]	; (8008af8 <mem_malloc+0x1f0>)
 8008aa6:	480f      	ldr	r0, [pc, #60]	; (8008ae4 <mem_malloc+0x1dc>)
 8008aa8:	f00a f9e2 	bl	8012e70 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	e00e      	b.n	8008ad0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008ab2:	8bfb      	ldrh	r3, [r7, #30]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff fc83 	bl	80083c0 <ptr_to_mem>
 8008aba:	4603      	mov	r3, r0
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008ac0:	8bfa      	ldrh	r2, [r7, #30]
 8008ac2:	8bbb      	ldrh	r3, [r7, #28]
 8008ac4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	f4ff af44 	bcc.w	8008956 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20000520 	.word	0x20000520
 8008adc:	080151d4 	.word	0x080151d4
 8008ae0:	0801537c 	.word	0x0801537c
 8008ae4:	0801521c 	.word	0x0801521c
 8008ae8:	2000051c 	.word	0x2000051c
 8008aec:	08015390 	.word	0x08015390
 8008af0:	080153ac 	.word	0x080153ac
 8008af4:	080153dc 	.word	0x080153dc
 8008af8:	0801540c 	.word	0x0801540c

08008afc <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	460a      	mov	r2, r1
 8008b06:	80fb      	strh	r3, [r7, #6]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 8008b0c:	88fb      	ldrh	r3, [r7, #6]
 8008b0e:	88ba      	ldrh	r2, [r7, #4]
 8008b10:	fb02 f303 	mul.w	r3, r2, r3
 8008b14:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d001      	beq.n	8008b26 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 8008b22:	2300      	movs	r3, #0
 8008b24:	e00e      	b.n	8008b44 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff feec 	bl	8008908 <mem_malloc>
 8008b30:	60b8      	str	r0, [r7, #8]
  if (p) {
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d004      	beq.n	8008b42 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68b8      	ldr	r0, [r7, #8]
 8008b3e:	f00a f98f 	bl	8012e60 <memset>
  }
  return p;
 8008b42:	68bb      	ldr	r3, [r7, #8]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	3303      	adds	r3, #3
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]
 8008b6c:	e011      	b.n	8008b92 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4413      	add	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	dbe7      	blt.n	8008b6e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	3714      	adds	r7, #20
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	80fb      	strh	r3, [r7, #6]
 8008bb6:	e009      	b.n	8008bcc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008bb8:	88fb      	ldrh	r3, [r7, #6]
 8008bba:	4a08      	ldr	r2, [pc, #32]	; (8008bdc <memp_init+0x30>)
 8008bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7ff ffc3 	bl	8008b4c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	80fb      	strh	r3, [r7, #6]
 8008bcc:	88fb      	ldrh	r3, [r7, #6]
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d9f2      	bls.n	8008bb8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	0801aa9c 	.word	0x0801aa9c

08008be0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d012      	beq.n	8008c1c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	6812      	ldr	r2, [r2, #0]
 8008bfe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d006      	beq.n	8008c18 <do_memp_malloc_pool+0x38>
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <do_memp_malloc_pool+0x48>)
 8008c0c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008c10:	4906      	ldr	r1, [pc, #24]	; (8008c2c <do_memp_malloc_pool+0x4c>)
 8008c12:	4807      	ldr	r0, [pc, #28]	; (8008c30 <do_memp_malloc_pool+0x50>)
 8008c14:	f00a f92c 	bl	8012e70 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	e000      	b.n	8008c1e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	08015430 	.word	0x08015430
 8008c2c:	08015460 	.word	0x08015460
 8008c30:	08015484 	.word	0x08015484

08008c34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d908      	bls.n	8008c56 <memp_malloc+0x22>
 8008c44:	4b0a      	ldr	r3, [pc, #40]	; (8008c70 <memp_malloc+0x3c>)
 8008c46:	f240 1257 	movw	r2, #343	; 0x157
 8008c4a:	490a      	ldr	r1, [pc, #40]	; (8008c74 <memp_malloc+0x40>)
 8008c4c:	480a      	ldr	r0, [pc, #40]	; (8008c78 <memp_malloc+0x44>)
 8008c4e:	f00a f90f 	bl	8012e70 <iprintf>
 8008c52:	2300      	movs	r3, #0
 8008c54:	e008      	b.n	8008c68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <memp_malloc+0x48>)
 8008c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff ffbe 	bl	8008be0 <do_memp_malloc_pool>
 8008c64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008c66:	68fb      	ldr	r3, [r7, #12]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	08015430 	.word	0x08015430
 8008c74:	080154c0 	.word	0x080154c0
 8008c78:	08015484 	.word	0x08015484
 8008c7c:	0801aa9c 	.word	0x0801aa9c

08008c80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f003 0303 	and.w	r3, r3, #3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <do_memp_free_pool+0x22>
 8008c94:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <do_memp_free_pool+0x40>)
 8008c96:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008c9a:	490a      	ldr	r1, [pc, #40]	; (8008cc4 <do_memp_free_pool+0x44>)
 8008c9c:	480a      	ldr	r0, [pc, #40]	; (8008cc8 <do_memp_free_pool+0x48>)
 8008c9e:	f00a f8e7 	bl	8012e70 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	08015430 	.word	0x08015430
 8008cc4:	080154e0 	.word	0x080154e0
 8008cc8:	08015484 	.word	0x08015484

08008ccc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	6039      	str	r1, [r7, #0]
 8008cd6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d907      	bls.n	8008cee <memp_free+0x22>
 8008cde:	4b0c      	ldr	r3, [pc, #48]	; (8008d10 <memp_free+0x44>)
 8008ce0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008ce4:	490b      	ldr	r1, [pc, #44]	; (8008d14 <memp_free+0x48>)
 8008ce6:	480c      	ldr	r0, [pc, #48]	; (8008d18 <memp_free+0x4c>)
 8008ce8:	f00a f8c2 	bl	8012e70 <iprintf>
 8008cec:	e00c      	b.n	8008d08 <memp_free+0x3c>

  if (mem == NULL) {
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d008      	beq.n	8008d06 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008cf4:	79fb      	ldrb	r3, [r7, #7]
 8008cf6:	4a09      	ldr	r2, [pc, #36]	; (8008d1c <memp_free+0x50>)
 8008cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff ffbe 	bl	8008c80 <do_memp_free_pool>
 8008d04:	e000      	b.n	8008d08 <memp_free+0x3c>
    return;
 8008d06:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008d08:	3708      	adds	r7, #8
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	08015430 	.word	0x08015430
 8008d14:	08015500 	.word	0x08015500
 8008d18:	08015484 	.word	0x08015484
 8008d1c:	0801aa9c 	.word	0x0801aa9c

08008d20 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d108      	bne.n	8008d56 <netif_add+0x26>
 8008d44:	4b57      	ldr	r3, [pc, #348]	; (8008ea4 <netif_add+0x174>)
 8008d46:	f240 1227 	movw	r2, #295	; 0x127
 8008d4a:	4957      	ldr	r1, [pc, #348]	; (8008ea8 <netif_add+0x178>)
 8008d4c:	4857      	ldr	r0, [pc, #348]	; (8008eac <netif_add+0x17c>)
 8008d4e:	f00a f88f 	bl	8012e70 <iprintf>
 8008d52:	2300      	movs	r3, #0
 8008d54:	e0a2      	b.n	8008e9c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d108      	bne.n	8008d6e <netif_add+0x3e>
 8008d5c:	4b51      	ldr	r3, [pc, #324]	; (8008ea4 <netif_add+0x174>)
 8008d5e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008d62:	4953      	ldr	r1, [pc, #332]	; (8008eb0 <netif_add+0x180>)
 8008d64:	4851      	ldr	r0, [pc, #324]	; (8008eac <netif_add+0x17c>)
 8008d66:	f00a f883 	bl	8012e70 <iprintf>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e096      	b.n	8008e9c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008d74:	4b4f      	ldr	r3, [pc, #316]	; (8008eb4 <netif_add+0x184>)
 8008d76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008d7e:	4b4d      	ldr	r3, [pc, #308]	; (8008eb4 <netif_add+0x184>)
 8008d80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d101      	bne.n	8008d8c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008d88:	4b4a      	ldr	r3, [pc, #296]	; (8008eb4 <netif_add+0x184>)
 8008d8a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4a45      	ldr	r2, [pc, #276]	; (8008eb8 <netif_add+0x188>)
 8008da2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a3a      	ldr	r2, [r7, #32]
 8008dbc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008dbe:	4b3f      	ldr	r3, [pc, #252]	; (8008ebc <netif_add+0x18c>)
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dcc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 f913 	bl	8009000 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	4798      	blx	r3
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <netif_add+0xba>
    return NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e058      	b.n	8008e9c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008df0:	2bff      	cmp	r3, #255	; 0xff
 8008df2:	d103      	bne.n	8008dfc <netif_add+0xcc>
        netif->num = 0;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008e00:	4b2f      	ldr	r3, [pc, #188]	; (8008ec0 <netif_add+0x190>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	e02b      	b.n	8008e60 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d106      	bne.n	8008e1e <netif_add+0xee>
 8008e10:	4b24      	ldr	r3, [pc, #144]	; (8008ea4 <netif_add+0x174>)
 8008e12:	f240 128b 	movw	r2, #395	; 0x18b
 8008e16:	492b      	ldr	r1, [pc, #172]	; (8008ec4 <netif_add+0x194>)
 8008e18:	4824      	ldr	r0, [pc, #144]	; (8008eac <netif_add+0x17c>)
 8008e1a:	f00a f829 	bl	8012e70 <iprintf>
        num_netifs++;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3301      	adds	r3, #1
 8008e22:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2bff      	cmp	r3, #255	; 0xff
 8008e28:	dd06      	ble.n	8008e38 <netif_add+0x108>
 8008e2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ea4 <netif_add+0x174>)
 8008e2c:	f240 128d 	movw	r2, #397	; 0x18d
 8008e30:	4925      	ldr	r1, [pc, #148]	; (8008ec8 <netif_add+0x198>)
 8008e32:	481e      	ldr	r0, [pc, #120]	; (8008eac <netif_add+0x17c>)
 8008e34:	f00a f81c 	bl	8012e70 <iprintf>
        if (netif2->num == netif->num) {
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d108      	bne.n	8008e5a <netif_add+0x12a>
          netif->num++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8008e58:	e005      	b.n	8008e66 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	617b      	str	r3, [r7, #20]
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1d0      	bne.n	8008e08 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1be      	bne.n	8008dea <netif_add+0xba>
  }
  if (netif->num == 254) {
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e72:	2bfe      	cmp	r3, #254	; 0xfe
 8008e74:	d103      	bne.n	8008e7e <netif_add+0x14e>
    netif_num = 0;
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <netif_add+0x18c>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
 8008e7c:	e006      	b.n	8008e8c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e84:	3301      	adds	r3, #1
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	4b0c      	ldr	r3, [pc, #48]	; (8008ebc <netif_add+0x18c>)
 8008e8a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008e8c:	4b0c      	ldr	r3, [pc, #48]	; (8008ec0 <netif_add+0x190>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008e94:	4a0a      	ldr	r2, [pc, #40]	; (8008ec0 <netif_add+0x190>)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	0801551c 	.word	0x0801551c
 8008ea8:	080155b0 	.word	0x080155b0
 8008eac:	0801556c 	.word	0x0801556c
 8008eb0:	080155cc 	.word	0x080155cc
 8008eb4:	0801ab00 	.word	0x0801ab00
 8008eb8:	08009213 	.word	0x08009213
 8008ebc:	20000548 	.word	0x20000548
 8008ec0:	200075ac 	.word	0x200075ac
 8008ec4:	080155f0 	.word	0x080155f0
 8008ec8:	08015604 	.word	0x08015604

08008ecc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f002 ff01 	bl	800bce0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f007 fc73 	bl	80107cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d106      	bne.n	8008f10 <netif_do_set_ipaddr+0x20>
 8008f02:	4b1d      	ldr	r3, [pc, #116]	; (8008f78 <netif_do_set_ipaddr+0x88>)
 8008f04:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008f08:	491c      	ldr	r1, [pc, #112]	; (8008f7c <netif_do_set_ipaddr+0x8c>)
 8008f0a:	481d      	ldr	r0, [pc, #116]	; (8008f80 <netif_do_set_ipaddr+0x90>)
 8008f0c:	f009 ffb0 	bl	8012e70 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <netif_do_set_ipaddr+0x34>
 8008f16:	4b18      	ldr	r3, [pc, #96]	; (8008f78 <netif_do_set_ipaddr+0x88>)
 8008f18:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008f1c:	4917      	ldr	r1, [pc, #92]	; (8008f7c <netif_do_set_ipaddr+0x8c>)
 8008f1e:	4818      	ldr	r0, [pc, #96]	; (8008f80 <netif_do_set_ipaddr+0x90>)
 8008f20:	f009 ffa6 	bl	8012e70 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d01c      	beq.n	8008f6c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008f42:	f107 0314 	add.w	r3, r7, #20
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ffbf 	bl	8008ecc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <netif_do_set_ipaddr+0x6a>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	e000      	b.n	8008f5c <netif_do_set_ipaddr+0x6c>
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008f60:	2101      	movs	r1, #1
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f8d2 	bl	800910c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3718      	adds	r7, #24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	0801551c 	.word	0x0801551c
 8008f7c:	08015634 	.word	0x08015634
 8008f80:	0801556c 	.word	0x0801556c

08008f84 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3308      	adds	r3, #8
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d00a      	beq.n	8008fb4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <netif_do_set_netmask+0x26>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	e000      	b.n	8008fac <netif_do_set_netmask+0x28>
 8008faa:	2300      	movs	r3, #0
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e000      	b.n	8008fb6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d00a      	beq.n	8008ff2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <netif_do_set_gw+0x26>
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	e000      	b.n	8008fea <netif_do_set_gw+0x28>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e000      	b.n	8008ff4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800901c:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <netif_set_addr+0x90>)
 800901e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d101      	bne.n	800902a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009026:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <netif_set_addr+0x90>)
 8009028:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009030:	4b17      	ldr	r3, [pc, #92]	; (8009090 <netif_set_addr+0x90>)
 8009032:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <netif_set_addr+0x42>
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <netif_set_addr+0x46>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <netif_set_addr+0x48>
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
  if (remove) {
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009050:	f107 0310 	add.w	r3, r7, #16
 8009054:	461a      	mov	r2, r3
 8009056:	68b9      	ldr	r1, [r7, #8]
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff ff49 	bl	8008ef0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	6879      	ldr	r1, [r7, #4]
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff ff8e 	bl	8008f84 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f7ff ffa8 	bl	8008fc2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d106      	bne.n	8009086 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009078:	f107 0310 	add.w	r3, r7, #16
 800907c:	461a      	mov	r2, r3
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f7ff ff35 	bl	8008ef0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009086:	bf00      	nop
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	0801ab00 	.word	0x0801ab00

08009094 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800909c:	4a04      	ldr	r2, [pc, #16]	; (80090b0 <netif_set_default+0x1c>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	200075b0 	.word	0x200075b0

080090b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d107      	bne.n	80090d2 <netif_set_up+0x1e>
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <netif_set_up+0x4c>)
 80090c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80090c8:	490e      	ldr	r1, [pc, #56]	; (8009104 <netif_set_up+0x50>)
 80090ca:	480f      	ldr	r0, [pc, #60]	; (8009108 <netif_set_up+0x54>)
 80090cc:	f009 fed0 	bl	8012e70 <iprintf>
 80090d0:	e013      	b.n	80090fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10c      	bne.n	80090fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80090f2:	2103      	movs	r1, #3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f809 	bl	800910c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	0801551c 	.word	0x0801551c
 8009104:	080156a4 	.word	0x080156a4
 8009108:	0801556c 	.word	0x0801556c

0800910c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <netif_issue_reports+0x20>
 800911e:	4b18      	ldr	r3, [pc, #96]	; (8009180 <netif_issue_reports+0x74>)
 8009120:	f240 326d 	movw	r2, #877	; 0x36d
 8009124:	4917      	ldr	r1, [pc, #92]	; (8009184 <netif_issue_reports+0x78>)
 8009126:	4818      	ldr	r0, [pc, #96]	; (8009188 <netif_issue_reports+0x7c>)
 8009128:	f009 fea2 	bl	8012e70 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01e      	beq.n	8009178 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009140:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009144:	2b00      	cmp	r3, #0
 8009146:	d017      	beq.n	8009178 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d013      	beq.n	800917a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3304      	adds	r3, #4
 8009156:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009162:	f003 0308 	and.w	r3, r3, #8
 8009166:	2b00      	cmp	r3, #0
 8009168:	d007      	beq.n	800917a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3304      	adds	r3, #4
 800916e:	4619      	mov	r1, r3
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f008 fa95 	bl	80116a0 <etharp_request>
 8009176:	e000      	b.n	800917a <netif_issue_reports+0x6e>
    return;
 8009178:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	0801551c 	.word	0x0801551c
 8009184:	080156c0 	.word	0x080156c0
 8009188:	0801556c 	.word	0x0801556c

0800918c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d107      	bne.n	80091aa <netif_set_down+0x1e>
 800919a:	4b12      	ldr	r3, [pc, #72]	; (80091e4 <netif_set_down+0x58>)
 800919c:	f240 329b 	movw	r2, #923	; 0x39b
 80091a0:	4911      	ldr	r1, [pc, #68]	; (80091e8 <netif_set_down+0x5c>)
 80091a2:	4812      	ldr	r0, [pc, #72]	; (80091ec <netif_set_down+0x60>)
 80091a4:	f009 fe64 	bl	8012e70 <iprintf>
 80091a8:	e019      	b.n	80091de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d012      	beq.n	80091de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091be:	f023 0301 	bic.w	r3, r3, #1
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f007 fe1f 	bl	8010e1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	0801551c 	.word	0x0801551c
 80091e8:	080156e4 	.word	0x080156e4
 80091ec:	0801556c 	.word	0x0801556c

080091f0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b083      	sub	sp, #12
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	61da      	str	r2, [r3, #28]
  }
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8009212:	b480      	push	{r7}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800921e:	f06f 030b 	mvn.w	r3, #11
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
	...

08009230 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d013      	beq.n	8009268 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8009240:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <netif_get_by_index+0x48>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e00c      	b.n	8009262 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800924e:	3301      	adds	r3, #1
 8009250:	b2db      	uxtb	r3, r3
 8009252:	79fa      	ldrb	r2, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d101      	bne.n	800925c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	e006      	b.n	800926a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1ef      	bne.n	8009248 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	200075ac 	.word	0x200075ac

0800927c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009282:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <pbuf_free_ooseq+0x38>)
 8009284:	2200      	movs	r2, #0
 8009286:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009288:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <pbuf_free_ooseq+0x3c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	607b      	str	r3, [r7, #4]
 800928e:	e00a      	b.n	80092a6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f002 fd5f 	bl	800bd5c <tcp_free_ooseq>
      return;
 800929e:	e005      	b.n	80092ac <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	607b      	str	r3, [r7, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f1      	bne.n	8009290 <pbuf_free_ooseq+0x14>
    }
  }
}
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	200075b4 	.word	0x200075b4
 80092b8:	200075bc 	.word	0x200075bc

080092bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80092c0:	4b03      	ldr	r3, [pc, #12]	; (80092d0 <pbuf_pool_is_empty+0x14>)
 80092c2:	2201      	movs	r2, #1
 80092c4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80092c6:	bf00      	nop
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	200075b4 	.word	0x200075b4

080092d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	460b      	mov	r3, r1
 80092e4:	80fb      	strh	r3, [r7, #6]
 80092e6:	4613      	mov	r3, r2
 80092e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	88fa      	ldrh	r2, [r7, #6]
 80092fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	88ba      	ldrh	r2, [r7, #4]
 8009300:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8009302:	8b3b      	ldrh	r3, [r7, #24]
 8009304:	b2da      	uxtb	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	7f3a      	ldrb	r2, [r7, #28]
 800930e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	73da      	strb	r2, [r3, #15]
}
 800931c:	bf00      	nop
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08c      	sub	sp, #48	; 0x30
 800932c:	af02      	add	r7, sp, #8
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
 8009332:	460b      	mov	r3, r1
 8009334:	80bb      	strh	r3, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800933e:	887b      	ldrh	r3, [r7, #2]
 8009340:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8009344:	d07f      	beq.n	8009446 <pbuf_alloc+0x11e>
 8009346:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800934a:	f300 80c8 	bgt.w	80094de <pbuf_alloc+0x1b6>
 800934e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009352:	d010      	beq.n	8009376 <pbuf_alloc+0x4e>
 8009354:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009358:	f300 80c1 	bgt.w	80094de <pbuf_alloc+0x1b6>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d002      	beq.n	8009366 <pbuf_alloc+0x3e>
 8009360:	2b41      	cmp	r3, #65	; 0x41
 8009362:	f040 80bc 	bne.w	80094de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009366:	887a      	ldrh	r2, [r7, #2]
 8009368:	88bb      	ldrh	r3, [r7, #4]
 800936a:	4619      	mov	r1, r3
 800936c:	2000      	movs	r0, #0
 800936e:	f000 f8d1 	bl	8009514 <pbuf_alloc_reference>
 8009372:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8009374:	e0bd      	b.n	80094f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800937a:	2300      	movs	r3, #0
 800937c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800937e:	88bb      	ldrh	r3, [r7, #4]
 8009380:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009382:	2008      	movs	r0, #8
 8009384:	f7ff fc56 	bl	8008c34 <memp_malloc>
 8009388:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009390:	f7ff ff94 	bl	80092bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800939a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800939c:	f000 faa8 	bl	80098f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e0a7      	b.n	80094f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80093a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093a6:	3303      	adds	r3, #3
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	f023 0303 	bic.w	r3, r3, #3
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	8b7a      	ldrh	r2, [r7, #26]
 80093b8:	4293      	cmp	r3, r2
 80093ba:	bf28      	it	cs
 80093bc:	4613      	movcs	r3, r2
 80093be:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80093c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093c2:	3310      	adds	r3, #16
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	4413      	add	r3, r2
 80093c8:	3303      	adds	r3, #3
 80093ca:	f023 0303 	bic.w	r3, r3, #3
 80093ce:	4618      	mov	r0, r3
 80093d0:	89f9      	ldrh	r1, [r7, #14]
 80093d2:	8b7a      	ldrh	r2, [r7, #26]
 80093d4:	2300      	movs	r3, #0
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	887b      	ldrh	r3, [r7, #2]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	460b      	mov	r3, r1
 80093de:	4601      	mov	r1, r0
 80093e0:	6938      	ldr	r0, [r7, #16]
 80093e2:	f7ff ff77 	bl	80092d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d006      	beq.n	8009400 <pbuf_alloc+0xd8>
 80093f2:	4b42      	ldr	r3, [pc, #264]	; (80094fc <pbuf_alloc+0x1d4>)
 80093f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093f8:	4941      	ldr	r1, [pc, #260]	; (8009500 <pbuf_alloc+0x1d8>)
 80093fa:	4842      	ldr	r0, [pc, #264]	; (8009504 <pbuf_alloc+0x1dc>)
 80093fc:	f009 fd38 	bl	8012e70 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009400:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009402:	3303      	adds	r3, #3
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800940c:	d106      	bne.n	800941c <pbuf_alloc+0xf4>
 800940e:	4b3b      	ldr	r3, [pc, #236]	; (80094fc <pbuf_alloc+0x1d4>)
 8009410:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009414:	493c      	ldr	r1, [pc, #240]	; (8009508 <pbuf_alloc+0x1e0>)
 8009416:	483b      	ldr	r0, [pc, #236]	; (8009504 <pbuf_alloc+0x1dc>)
 8009418:	f009 fd2a 	bl	8012e70 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	2b00      	cmp	r3, #0
 8009420:	d102      	bne.n	8009428 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	627b      	str	r3, [r7, #36]	; 0x24
 8009426:	e002      	b.n	800942e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8009432:	8b7a      	ldrh	r2, [r7, #26]
 8009434:	89fb      	ldrh	r3, [r7, #14]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800943e:	8b7b      	ldrh	r3, [r7, #26]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d19e      	bne.n	8009382 <pbuf_alloc+0x5a>
      break;
 8009444:	e055      	b.n	80094f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009446:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009448:	3303      	adds	r3, #3
 800944a:	b29b      	uxth	r3, r3
 800944c:	f023 0303 	bic.w	r3, r3, #3
 8009450:	b29a      	uxth	r2, r3
 8009452:	88bb      	ldrh	r3, [r7, #4]
 8009454:	3303      	adds	r3, #3
 8009456:	b29b      	uxth	r3, r3
 8009458:	f023 0303 	bic.w	r3, r3, #3
 800945c:	b29b      	uxth	r3, r3
 800945e:	4413      	add	r3, r2
 8009460:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009462:	8b3b      	ldrh	r3, [r7, #24]
 8009464:	3310      	adds	r3, #16
 8009466:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009468:	8b3a      	ldrh	r2, [r7, #24]
 800946a:	88bb      	ldrh	r3, [r7, #4]
 800946c:	3303      	adds	r3, #3
 800946e:	f023 0303 	bic.w	r3, r3, #3
 8009472:	429a      	cmp	r2, r3
 8009474:	d306      	bcc.n	8009484 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009476:	8afa      	ldrh	r2, [r7, #22]
 8009478:	88bb      	ldrh	r3, [r7, #4]
 800947a:	3303      	adds	r3, #3
 800947c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009480:	429a      	cmp	r2, r3
 8009482:	d201      	bcs.n	8009488 <pbuf_alloc+0x160>
        return NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	e035      	b.n	80094f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009488:	8afb      	ldrh	r3, [r7, #22]
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff fa3c 	bl	8008908 <mem_malloc>
 8009490:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <pbuf_alloc+0x174>
        return NULL;
 8009498:	2300      	movs	r3, #0
 800949a:	e02b      	b.n	80094f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800949c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800949e:	3310      	adds	r3, #16
 80094a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a2:	4413      	add	r3, r2
 80094a4:	3303      	adds	r3, #3
 80094a6:	f023 0303 	bic.w	r3, r3, #3
 80094aa:	4618      	mov	r0, r3
 80094ac:	88b9      	ldrh	r1, [r7, #4]
 80094ae:	88ba      	ldrh	r2, [r7, #4]
 80094b0:	2300      	movs	r3, #0
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	887b      	ldrh	r3, [r7, #2]
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	460b      	mov	r3, r1
 80094ba:	4601      	mov	r1, r0
 80094bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094be:	f7ff ff09 	bl	80092d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d010      	beq.n	80094f0 <pbuf_alloc+0x1c8>
 80094ce:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <pbuf_alloc+0x1d4>)
 80094d0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80094d4:	490d      	ldr	r1, [pc, #52]	; (800950c <pbuf_alloc+0x1e4>)
 80094d6:	480b      	ldr	r0, [pc, #44]	; (8009504 <pbuf_alloc+0x1dc>)
 80094d8:	f009 fcca 	bl	8012e70 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80094dc:	e008      	b.n	80094f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80094de:	4b07      	ldr	r3, [pc, #28]	; (80094fc <pbuf_alloc+0x1d4>)
 80094e0:	f240 1227 	movw	r2, #295	; 0x127
 80094e4:	490a      	ldr	r1, [pc, #40]	; (8009510 <pbuf_alloc+0x1e8>)
 80094e6:	4807      	ldr	r0, [pc, #28]	; (8009504 <pbuf_alloc+0x1dc>)
 80094e8:	f009 fcc2 	bl	8012e70 <iprintf>
      return NULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	e001      	b.n	80094f4 <pbuf_alloc+0x1cc>
      break;
 80094f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3728      	adds	r7, #40	; 0x28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	0801574c 	.word	0x0801574c
 8009500:	0801577c 	.word	0x0801577c
 8009504:	080157ac 	.word	0x080157ac
 8009508:	080157d4 	.word	0x080157d4
 800950c:	08015808 	.word	0x08015808
 8009510:	08015834 	.word	0x08015834

08009514 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	807b      	strh	r3, [r7, #2]
 8009520:	4613      	mov	r3, r2
 8009522:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009524:	883b      	ldrh	r3, [r7, #0]
 8009526:	2b41      	cmp	r3, #65	; 0x41
 8009528:	d009      	beq.n	800953e <pbuf_alloc_reference+0x2a>
 800952a:	883b      	ldrh	r3, [r7, #0]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d006      	beq.n	800953e <pbuf_alloc_reference+0x2a>
 8009530:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <pbuf_alloc_reference+0x5c>)
 8009532:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009536:	490f      	ldr	r1, [pc, #60]	; (8009574 <pbuf_alloc_reference+0x60>)
 8009538:	480f      	ldr	r0, [pc, #60]	; (8009578 <pbuf_alloc_reference+0x64>)
 800953a:	f009 fc99 	bl	8012e70 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800953e:	2007      	movs	r0, #7
 8009540:	f7ff fb78 	bl	8008c34 <memp_malloc>
 8009544:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800954c:	2300      	movs	r3, #0
 800954e:	e00b      	b.n	8009568 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009550:	8879      	ldrh	r1, [r7, #2]
 8009552:	887a      	ldrh	r2, [r7, #2]
 8009554:	2300      	movs	r3, #0
 8009556:	9301      	str	r3, [sp, #4]
 8009558:	883b      	ldrh	r3, [r7, #0]
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	460b      	mov	r3, r1
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7ff feb7 	bl	80092d4 <pbuf_init_alloced_pbuf>
  return p;
 8009566:	68fb      	ldr	r3, [r7, #12]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	0801574c 	.word	0x0801574c
 8009574:	08015850 	.word	0x08015850
 8009578:	080157ac 	.word	0x080157ac

0800957c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af02      	add	r7, sp, #8
 8009582:	607b      	str	r3, [r7, #4]
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]
 8009588:	460b      	mov	r3, r1
 800958a:	81bb      	strh	r3, [r7, #12]
 800958c:	4613      	mov	r3, r2
 800958e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
 8009592:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009594:	8a7b      	ldrh	r3, [r7, #18]
 8009596:	3303      	adds	r3, #3
 8009598:	f023 0203 	bic.w	r2, r3, #3
 800959c:	89bb      	ldrh	r3, [r7, #12]
 800959e:	441a      	add	r2, r3
 80095a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d901      	bls.n	80095aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e018      	b.n	80095dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80095b0:	8a7b      	ldrh	r3, [r7, #18]
 80095b2:	3303      	adds	r3, #3
 80095b4:	f023 0303 	bic.w	r3, r3, #3
 80095b8:	6a3a      	ldr	r2, [r7, #32]
 80095ba:	4413      	add	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	e001      	b.n	80095c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	89b9      	ldrh	r1, [r7, #12]
 80095c8:	89ba      	ldrh	r2, [r7, #12]
 80095ca:	2302      	movs	r3, #2
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	897b      	ldrh	r3, [r7, #10]
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	460b      	mov	r3, r1
 80095d4:	6979      	ldr	r1, [r7, #20]
 80095d6:	f7ff fe7d 	bl	80092d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80095da:	687b      	ldr	r3, [r7, #4]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d106      	bne.n	8009604 <pbuf_realloc+0x20>
 80095f6:	4b3a      	ldr	r3, [pc, #232]	; (80096e0 <pbuf_realloc+0xfc>)
 80095f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80095fc:	4939      	ldr	r1, [pc, #228]	; (80096e4 <pbuf_realloc+0x100>)
 80095fe:	483a      	ldr	r0, [pc, #232]	; (80096e8 <pbuf_realloc+0x104>)
 8009600:	f009 fc36 	bl	8012e70 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	891b      	ldrh	r3, [r3, #8]
 8009608:	887a      	ldrh	r2, [r7, #2]
 800960a:	429a      	cmp	r2, r3
 800960c:	d263      	bcs.n	80096d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	891a      	ldrh	r2, [r3, #8]
 8009612:	887b      	ldrh	r3, [r7, #2]
 8009614:	1ad3      	subs	r3, r2, r3
 8009616:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009618:	887b      	ldrh	r3, [r7, #2]
 800961a:	817b      	strh	r3, [r7, #10]
  q = p;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009620:	e018      	b.n	8009654 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	895b      	ldrh	r3, [r3, #10]
 8009626:	897a      	ldrh	r2, [r7, #10]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	891a      	ldrh	r2, [r3, #8]
 8009630:	893b      	ldrh	r3, [r7, #8]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <pbuf_realloc+0x70>
 8009646:	4b26      	ldr	r3, [pc, #152]	; (80096e0 <pbuf_realloc+0xfc>)
 8009648:	f240 12af 	movw	r2, #431	; 0x1af
 800964c:	4927      	ldr	r1, [pc, #156]	; (80096ec <pbuf_realloc+0x108>)
 800964e:	4826      	ldr	r0, [pc, #152]	; (80096e8 <pbuf_realloc+0x104>)
 8009650:	f009 fc0e 	bl	8012e70 <iprintf>
  while (rem_len > q->len) {
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	895b      	ldrh	r3, [r3, #10]
 8009658:	897a      	ldrh	r2, [r7, #10]
 800965a:	429a      	cmp	r2, r3
 800965c:	d8e1      	bhi.n	8009622 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	7b1b      	ldrb	r3, [r3, #12]
 8009662:	f003 030f 	and.w	r3, r3, #15
 8009666:	2b00      	cmp	r3, #0
 8009668:	d121      	bne.n	80096ae <pbuf_realloc+0xca>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	895b      	ldrh	r3, [r3, #10]
 800966e:	897a      	ldrh	r2, [r7, #10]
 8009670:	429a      	cmp	r2, r3
 8009672:	d01c      	beq.n	80096ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	7b5b      	ldrb	r3, [r3, #13]
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d116      	bne.n	80096ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	b29a      	uxth	r2, r3
 800968a:	897b      	ldrh	r3, [r7, #10]
 800968c:	4413      	add	r3, r2
 800968e:	b29b      	uxth	r3, r3
 8009690:	4619      	mov	r1, r3
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff f83c 	bl	8008710 <mem_trim>
 8009698:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d106      	bne.n	80096ae <pbuf_realloc+0xca>
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <pbuf_realloc+0xfc>)
 80096a2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80096a6:	4912      	ldr	r1, [pc, #72]	; (80096f0 <pbuf_realloc+0x10c>)
 80096a8:	480f      	ldr	r0, [pc, #60]	; (80096e8 <pbuf_realloc+0x104>)
 80096aa:	f009 fbe1 	bl	8012e70 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	897a      	ldrh	r2, [r7, #10]
 80096b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	895a      	ldrh	r2, [r3, #10]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 f911 	bl	80098f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e000      	b.n	80096d8 <pbuf_realloc+0xf4>
    return;
 80096d6:	bf00      	nop

}
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	0801574c 	.word	0x0801574c
 80096e4:	08015864 	.word	0x08015864
 80096e8:	080157ac 	.word	0x080157ac
 80096ec:	0801587c 	.word	0x0801587c
 80096f0:	08015894 	.word	0x08015894

080096f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d106      	bne.n	8009716 <pbuf_add_header_impl+0x22>
 8009708:	4b2b      	ldr	r3, [pc, #172]	; (80097b8 <pbuf_add_header_impl+0xc4>)
 800970a:	f240 12df 	movw	r2, #479	; 0x1df
 800970e:	492b      	ldr	r1, [pc, #172]	; (80097bc <pbuf_add_header_impl+0xc8>)
 8009710:	482b      	ldr	r0, [pc, #172]	; (80097c0 <pbuf_add_header_impl+0xcc>)
 8009712:	f009 fbad 	bl	8012e70 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d003      	beq.n	8009724 <pbuf_add_header_impl+0x30>
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009722:	d301      	bcc.n	8009728 <pbuf_add_header_impl+0x34>
    return 1;
 8009724:	2301      	movs	r3, #1
 8009726:	e043      	b.n	80097b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <pbuf_add_header_impl+0x3e>
    return 0;
 800972e:	2300      	movs	r3, #0
 8009730:	e03e      	b.n	80097b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	891a      	ldrh	r2, [r3, #8]
 800973a:	8a7b      	ldrh	r3, [r7, #18]
 800973c:	4413      	add	r3, r2
 800973e:	b29b      	uxth	r3, r3
 8009740:	8a7a      	ldrh	r2, [r7, #18]
 8009742:	429a      	cmp	r2, r3
 8009744:	d901      	bls.n	800974a <pbuf_add_header_impl+0x56>
    return 1;
 8009746:	2301      	movs	r3, #1
 8009748:	e032      	b.n	80097b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	7b1b      	ldrb	r3, [r3, #12]
 800974e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009750:	8a3b      	ldrh	r3, [r7, #16]
 8009752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00c      	beq.n	8009774 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	685a      	ldr	r2, [r3, #4]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	425b      	negs	r3, r3
 8009762:	4413      	add	r3, r2
 8009764:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3310      	adds	r3, #16
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	429a      	cmp	r2, r3
 800976e:	d20d      	bcs.n	800978c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009770:	2301      	movs	r3, #1
 8009772:	e01d      	b.n	80097b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d006      	beq.n	8009788 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	425b      	negs	r3, r3
 8009782:	4413      	add	r3, r2
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	e001      	b.n	800978c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009788:	2301      	movs	r3, #1
 800978a:	e011      	b.n	80097b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	895a      	ldrh	r2, [r3, #10]
 8009796:	8a7b      	ldrh	r3, [r7, #18]
 8009798:	4413      	add	r3, r2
 800979a:	b29a      	uxth	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	891a      	ldrh	r2, [r3, #8]
 80097a4:	8a7b      	ldrh	r3, [r7, #18]
 80097a6:	4413      	add	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	811a      	strh	r2, [r3, #8]


  return 0;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	0801574c 	.word	0x0801574c
 80097bc:	080158b0 	.word	0x080158b0
 80097c0:	080157ac 	.word	0x080157ac

080097c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80097ce:	2200      	movs	r2, #0
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff ff8e 	bl	80096f4 <pbuf_add_header_impl>
 80097d8:	4603      	mov	r3, r0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d106      	bne.n	8009802 <pbuf_remove_header+0x1e>
 80097f4:	4b20      	ldr	r3, [pc, #128]	; (8009878 <pbuf_remove_header+0x94>)
 80097f6:	f240 224b 	movw	r2, #587	; 0x24b
 80097fa:	4920      	ldr	r1, [pc, #128]	; (800987c <pbuf_remove_header+0x98>)
 80097fc:	4820      	ldr	r0, [pc, #128]	; (8009880 <pbuf_remove_header+0x9c>)
 80097fe:	f009 fb37 	bl	8012e70 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <pbuf_remove_header+0x2c>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800980e:	d301      	bcc.n	8009814 <pbuf_remove_header+0x30>
    return 1;
 8009810:	2301      	movs	r3, #1
 8009812:	e02c      	b.n	800986e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <pbuf_remove_header+0x3a>
    return 0;
 800981a:	2300      	movs	r3, #0
 800981c:	e027      	b.n	800986e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	895b      	ldrh	r3, [r3, #10]
 8009826:	89fa      	ldrh	r2, [r7, #14]
 8009828:	429a      	cmp	r2, r3
 800982a:	d908      	bls.n	800983e <pbuf_remove_header+0x5a>
 800982c:	4b12      	ldr	r3, [pc, #72]	; (8009878 <pbuf_remove_header+0x94>)
 800982e:	f240 2255 	movw	r2, #597	; 0x255
 8009832:	4914      	ldr	r1, [pc, #80]	; (8009884 <pbuf_remove_header+0xa0>)
 8009834:	4812      	ldr	r0, [pc, #72]	; (8009880 <pbuf_remove_header+0x9c>)
 8009836:	f009 fb1b 	bl	8012e70 <iprintf>
 800983a:	2301      	movs	r3, #1
 800983c:	e017      	b.n	800986e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	441a      	add	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	895a      	ldrh	r2, [r3, #10]
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	b29a      	uxth	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	891a      	ldrh	r2, [r3, #8]
 8009862:	89fb      	ldrh	r3, [r7, #14]
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	b29a      	uxth	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	0801574c 	.word	0x0801574c
 800987c:	080158b0 	.word	0x080158b0
 8009880:	080157ac 	.word	0x080157ac
 8009884:	080158bc 	.word	0x080158bc

08009888 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
 8009894:	4613      	mov	r3, r2
 8009896:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800989c:	2b00      	cmp	r3, #0
 800989e:	da08      	bge.n	80098b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80098a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098a4:	425b      	negs	r3, r3
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff ff9b 	bl	80097e4 <pbuf_remove_header>
 80098ae:	4603      	mov	r3, r0
 80098b0:	e007      	b.n	80098c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80098b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098b6:	787a      	ldrb	r2, [r7, #1]
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff ff1a 	bl	80096f4 <pbuf_add_header_impl>
 80098c0:	4603      	mov	r3, r0
  }
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b082      	sub	sp, #8
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	460b      	mov	r3, r1
 80098d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80098d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098da:	2201      	movs	r2, #1
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff ffd2 	bl	8009888 <pbuf_header_impl>
 80098e4:	4603      	mov	r3, r0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
	...

080098f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10b      	bne.n	8009916 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <pbuf_free+0x22>
 8009904:	4b38      	ldr	r3, [pc, #224]	; (80099e8 <pbuf_free+0xf8>)
 8009906:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800990a:	4938      	ldr	r1, [pc, #224]	; (80099ec <pbuf_free+0xfc>)
 800990c:	4838      	ldr	r0, [pc, #224]	; (80099f0 <pbuf_free+0x100>)
 800990e:	f009 faaf 	bl	8012e70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009912:	2300      	movs	r3, #0
 8009914:	e063      	b.n	80099de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800991a:	e05c      	b.n	80099d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7b9b      	ldrb	r3, [r3, #14]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <pbuf_free+0x42>
 8009924:	4b30      	ldr	r3, [pc, #192]	; (80099e8 <pbuf_free+0xf8>)
 8009926:	f240 22f1 	movw	r2, #753	; 0x2f1
 800992a:	4932      	ldr	r1, [pc, #200]	; (80099f4 <pbuf_free+0x104>)
 800992c:	4830      	ldr	r0, [pc, #192]	; (80099f0 <pbuf_free+0x100>)
 800992e:	f009 fa9f 	bl	8012e70 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7b9b      	ldrb	r3, [r3, #14]
 8009936:	3b01      	subs	r3, #1
 8009938:	b2da      	uxtb	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	739a      	strb	r2, [r3, #14]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7b9b      	ldrb	r3, [r3, #14]
 8009942:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009944:	7dbb      	ldrb	r3, [r7, #22]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d143      	bne.n	80099d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	7b1b      	ldrb	r3, [r3, #12]
 8009954:	f003 030f 	and.w	r3, r3, #15
 8009958:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7b5b      	ldrb	r3, [r3, #13]
 800995e:	f003 0302 	and.w	r3, r3, #2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d011      	beq.n	800998a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <pbuf_free+0x90>
 8009972:	4b1d      	ldr	r3, [pc, #116]	; (80099e8 <pbuf_free+0xf8>)
 8009974:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009978:	491f      	ldr	r1, [pc, #124]	; (80099f8 <pbuf_free+0x108>)
 800997a:	481d      	ldr	r0, [pc, #116]	; (80099f0 <pbuf_free+0x100>)
 800997c:	f009 fa78 	bl	8012e70 <iprintf>
        pc->custom_free_function(p);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	4798      	blx	r3
 8009988:	e01d      	b.n	80099c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	2b02      	cmp	r3, #2
 800998e:	d104      	bne.n	800999a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	2008      	movs	r0, #8
 8009994:	f7ff f99a 	bl	8008ccc <memp_free>
 8009998:	e015      	b.n	80099c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b01      	cmp	r3, #1
 800999e:	d104      	bne.n	80099aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80099a0:	6879      	ldr	r1, [r7, #4]
 80099a2:	2007      	movs	r0, #7
 80099a4:	f7ff f992 	bl	8008ccc <memp_free>
 80099a8:	e00d      	b.n	80099c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d103      	bne.n	80099b8 <pbuf_free+0xc8>
          mem_free(p);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7fe fe43 	bl	800863c <mem_free>
 80099b6:	e006      	b.n	80099c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80099b8:	4b0b      	ldr	r3, [pc, #44]	; (80099e8 <pbuf_free+0xf8>)
 80099ba:	f240 320f 	movw	r2, #783	; 0x30f
 80099be:	490f      	ldr	r1, [pc, #60]	; (80099fc <pbuf_free+0x10c>)
 80099c0:	480b      	ldr	r0, [pc, #44]	; (80099f0 <pbuf_free+0x100>)
 80099c2:	f009 fa55 	bl	8012e70 <iprintf>
        }
      }
      count++;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	3301      	adds	r3, #1
 80099ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	607b      	str	r3, [r7, #4]
 80099d0:	e001      	b.n	80099d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d19f      	bne.n	800991c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	0801574c 	.word	0x0801574c
 80099ec:	080158b0 	.word	0x080158b0
 80099f0:	080157ac 	.word	0x080157ac
 80099f4:	080158dc 	.word	0x080158dc
 80099f8:	080158f4 	.word	0x080158f4
 80099fc:	08015918 	.word	0x08015918

08009a00 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009a0c:	e005      	b.n	8009a1a <pbuf_clen+0x1a>
    ++len;
 8009a0e:	89fb      	ldrh	r3, [r7, #14]
 8009a10:	3301      	adds	r3, #1
 8009a12:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1f6      	bne.n	8009a0e <pbuf_clen+0xe>
  }
  return len;
 8009a20:	89fb      	ldrh	r3, [r7, #14]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d010      	beq.n	8009a60 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7b9b      	ldrb	r3, [r3, #14]
 8009a42:	3301      	adds	r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	7b9b      	ldrb	r3, [r3, #14]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <pbuf_ref+0x30>
 8009a52:	4b05      	ldr	r3, [pc, #20]	; (8009a68 <pbuf_ref+0x38>)
 8009a54:	f240 3242 	movw	r2, #834	; 0x342
 8009a58:	4904      	ldr	r1, [pc, #16]	; (8009a6c <pbuf_ref+0x3c>)
 8009a5a:	4805      	ldr	r0, [pc, #20]	; (8009a70 <pbuf_ref+0x40>)
 8009a5c:	f009 fa08 	bl	8012e70 <iprintf>
  }
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	0801574c 	.word	0x0801574c
 8009a6c:	0801592c 	.word	0x0801592c
 8009a70:	080157ac 	.word	0x080157ac

08009a74 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <pbuf_cat+0x16>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d107      	bne.n	8009a9a <pbuf_cat+0x26>
 8009a8a:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <pbuf_cat+0x98>)
 8009a8c:	f240 3259 	movw	r2, #857	; 0x359
 8009a90:	491f      	ldr	r1, [pc, #124]	; (8009b10 <pbuf_cat+0x9c>)
 8009a92:	4820      	ldr	r0, [pc, #128]	; (8009b14 <pbuf_cat+0xa0>)
 8009a94:	f009 f9ec 	bl	8012e70 <iprintf>
 8009a98:	e034      	b.n	8009b04 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	e00a      	b.n	8009ab6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	891a      	ldrh	r2, [r3, #8]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	891b      	ldrh	r3, [r3, #8]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60fb      	str	r3, [r7, #12]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f0      	bne.n	8009aa0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	891a      	ldrh	r2, [r3, #8]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	895b      	ldrh	r3, [r3, #10]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d006      	beq.n	8009ad8 <pbuf_cat+0x64>
 8009aca:	4b10      	ldr	r3, [pc, #64]	; (8009b0c <pbuf_cat+0x98>)
 8009acc:	f240 3262 	movw	r2, #866	; 0x362
 8009ad0:	4911      	ldr	r1, [pc, #68]	; (8009b18 <pbuf_cat+0xa4>)
 8009ad2:	4810      	ldr	r0, [pc, #64]	; (8009b14 <pbuf_cat+0xa0>)
 8009ad4:	f009 f9cc 	bl	8012e70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d006      	beq.n	8009aee <pbuf_cat+0x7a>
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <pbuf_cat+0x98>)
 8009ae2:	f240 3263 	movw	r2, #867	; 0x363
 8009ae6:	490d      	ldr	r1, [pc, #52]	; (8009b1c <pbuf_cat+0xa8>)
 8009ae8:	480a      	ldr	r0, [pc, #40]	; (8009b14 <pbuf_cat+0xa0>)
 8009aea:	f009 f9c1 	bl	8012e70 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	891a      	ldrh	r2, [r3, #8]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	891b      	ldrh	r3, [r3, #8]
 8009af6:	4413      	add	r3, r2
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	0801574c 	.word	0x0801574c
 8009b10:	08015940 	.word	0x08015940
 8009b14:	080157ac 	.word	0x080157ac
 8009b18:	08015978 	.word	0x08015978
 8009b1c:	080159a8 	.word	0x080159a8

08009b20 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d008      	beq.n	8009b4a <pbuf_copy+0x2a>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <pbuf_copy+0x2a>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	891a      	ldrh	r2, [r3, #8]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	891b      	ldrh	r3, [r3, #8]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d209      	bcs.n	8009b5e <pbuf_copy+0x3e>
 8009b4a:	4b57      	ldr	r3, [pc, #348]	; (8009ca8 <pbuf_copy+0x188>)
 8009b4c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009b50:	4956      	ldr	r1, [pc, #344]	; (8009cac <pbuf_copy+0x18c>)
 8009b52:	4857      	ldr	r0, [pc, #348]	; (8009cb0 <pbuf_copy+0x190>)
 8009b54:	f009 f98c 	bl	8012e70 <iprintf>
 8009b58:	f06f 030f 	mvn.w	r3, #15
 8009b5c:	e09f      	b.n	8009c9e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	895b      	ldrh	r3, [r3, #10]
 8009b62:	461a      	mov	r2, r3
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	1ad2      	subs	r2, r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	895b      	ldrh	r3, [r3, #10]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	1acb      	subs	r3, r1, r3
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d306      	bcc.n	8009b84 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	895b      	ldrh	r3, [r3, #10]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	60fb      	str	r3, [r7, #12]
 8009b82:	e005      	b.n	8009b90 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	895b      	ldrh	r3, [r3, #10]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	18d0      	adds	r0, r2, r3
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	f009 f934 	bl	8012e10 <memcpy>
    offset_to += len;
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	4413      	add	r3, r2
 8009bae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	895b      	ldrh	r3, [r3, #10]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d906      	bls.n	8009bd2 <pbuf_copy+0xb2>
 8009bc4:	4b38      	ldr	r3, [pc, #224]	; (8009ca8 <pbuf_copy+0x188>)
 8009bc6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009bca:	493a      	ldr	r1, [pc, #232]	; (8009cb4 <pbuf_copy+0x194>)
 8009bcc:	4838      	ldr	r0, [pc, #224]	; (8009cb0 <pbuf_copy+0x190>)
 8009bce:	f009 f94f 	bl	8012e70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	895b      	ldrh	r3, [r3, #10]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d906      	bls.n	8009bec <pbuf_copy+0xcc>
 8009bde:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <pbuf_copy+0x188>)
 8009be0:	f240 32da 	movw	r2, #986	; 0x3da
 8009be4:	4934      	ldr	r1, [pc, #208]	; (8009cb8 <pbuf_copy+0x198>)
 8009be6:	4832      	ldr	r0, [pc, #200]	; (8009cb0 <pbuf_copy+0x190>)
 8009be8:	f009 f942 	bl	8012e70 <iprintf>
    if (offset_from >= p_from->len) {
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	895b      	ldrh	r3, [r3, #10]
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d304      	bcc.n	8009c02 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	895b      	ldrh	r3, [r3, #10]
 8009c06:	461a      	mov	r2, r3
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d114      	bne.n	8009c38 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10c      	bne.n	8009c38 <pbuf_copy+0x118>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <pbuf_copy+0x118>
 8009c24:	4b20      	ldr	r3, [pc, #128]	; (8009ca8 <pbuf_copy+0x188>)
 8009c26:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009c2a:	4924      	ldr	r1, [pc, #144]	; (8009cbc <pbuf_copy+0x19c>)
 8009c2c:	4820      	ldr	r0, [pc, #128]	; (8009cb0 <pbuf_copy+0x190>)
 8009c2e:	f009 f91f 	bl	8012e70 <iprintf>
 8009c32:	f06f 030f 	mvn.w	r3, #15
 8009c36:	e032      	b.n	8009c9e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d013      	beq.n	8009c66 <pbuf_copy+0x146>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	895a      	ldrh	r2, [r3, #10]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	891b      	ldrh	r3, [r3, #8]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d10d      	bne.n	8009c66 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d009      	beq.n	8009c66 <pbuf_copy+0x146>
 8009c52:	4b15      	ldr	r3, [pc, #84]	; (8009ca8 <pbuf_copy+0x188>)
 8009c54:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009c58:	4919      	ldr	r1, [pc, #100]	; (8009cc0 <pbuf_copy+0x1a0>)
 8009c5a:	4815      	ldr	r0, [pc, #84]	; (8009cb0 <pbuf_copy+0x190>)
 8009c5c:	f009 f908 	bl	8012e70 <iprintf>
 8009c60:	f06f 0305 	mvn.w	r3, #5
 8009c64:	e01b      	b.n	8009c9e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d013      	beq.n	8009c94 <pbuf_copy+0x174>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	895a      	ldrh	r2, [r3, #10]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	891b      	ldrh	r3, [r3, #8]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d10d      	bne.n	8009c94 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d009      	beq.n	8009c94 <pbuf_copy+0x174>
 8009c80:	4b09      	ldr	r3, [pc, #36]	; (8009ca8 <pbuf_copy+0x188>)
 8009c82:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009c86:	490e      	ldr	r1, [pc, #56]	; (8009cc0 <pbuf_copy+0x1a0>)
 8009c88:	4809      	ldr	r0, [pc, #36]	; (8009cb0 <pbuf_copy+0x190>)
 8009c8a:	f009 f8f1 	bl	8012e70 <iprintf>
 8009c8e:	f06f 0305 	mvn.w	r3, #5
 8009c92:	e004      	b.n	8009c9e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f47f af61 	bne.w	8009b5e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	0801574c 	.word	0x0801574c
 8009cac:	080159f4 	.word	0x080159f4
 8009cb0:	080157ac 	.word	0x080157ac
 8009cb4:	08015a24 	.word	0x08015a24
 8009cb8:	08015a3c 	.word	0x08015a3c
 8009cbc:	08015a58 	.word	0x08015a58
 8009cc0:	08015a68 	.word	0x08015a68

08009cc4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	80fb      	strh	r3, [r7, #6]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d108      	bne.n	8009cfa <pbuf_copy_partial+0x36>
 8009ce8:	4b2b      	ldr	r3, [pc, #172]	; (8009d98 <pbuf_copy_partial+0xd4>)
 8009cea:	f240 420a 	movw	r2, #1034	; 0x40a
 8009cee:	492b      	ldr	r1, [pc, #172]	; (8009d9c <pbuf_copy_partial+0xd8>)
 8009cf0:	482b      	ldr	r0, [pc, #172]	; (8009da0 <pbuf_copy_partial+0xdc>)
 8009cf2:	f009 f8bd 	bl	8012e70 <iprintf>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e04a      	b.n	8009d90 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d108      	bne.n	8009d12 <pbuf_copy_partial+0x4e>
 8009d00:	4b25      	ldr	r3, [pc, #148]	; (8009d98 <pbuf_copy_partial+0xd4>)
 8009d02:	f240 420b 	movw	r2, #1035	; 0x40b
 8009d06:	4927      	ldr	r1, [pc, #156]	; (8009da4 <pbuf_copy_partial+0xe0>)
 8009d08:	4825      	ldr	r0, [pc, #148]	; (8009da0 <pbuf_copy_partial+0xdc>)
 8009d0a:	f009 f8b1 	bl	8012e70 <iprintf>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e03e      	b.n	8009d90 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	e034      	b.n	8009d82 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009d18:	88bb      	ldrh	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00a      	beq.n	8009d34 <pbuf_copy_partial+0x70>
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	895b      	ldrh	r3, [r3, #10]
 8009d22:	88ba      	ldrh	r2, [r7, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d305      	bcc.n	8009d34 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	895b      	ldrh	r3, [r3, #10]
 8009d2c:	88ba      	ldrh	r2, [r7, #4]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	80bb      	strh	r3, [r7, #4]
 8009d32:	e023      	b.n	8009d7c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	895a      	ldrh	r2, [r3, #10]
 8009d38:	88bb      	ldrh	r3, [r7, #4]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009d3e:	8b3a      	ldrh	r2, [r7, #24]
 8009d40:	88fb      	ldrh	r3, [r7, #6]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d901      	bls.n	8009d4a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009d4a:	8b7b      	ldrh	r3, [r7, #26]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	18d0      	adds	r0, r2, r3
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	685a      	ldr	r2, [r3, #4]
 8009d54:	88bb      	ldrh	r3, [r7, #4]
 8009d56:	4413      	add	r3, r2
 8009d58:	8b3a      	ldrh	r2, [r7, #24]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	f009 f858 	bl	8012e10 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009d60:	8afa      	ldrh	r2, [r7, #22]
 8009d62:	8b3b      	ldrh	r3, [r7, #24]
 8009d64:	4413      	add	r3, r2
 8009d66:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009d68:	8b7a      	ldrh	r2, [r7, #26]
 8009d6a:	8b3b      	ldrh	r3, [r7, #24]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009d70:	88fa      	ldrh	r2, [r7, #6]
 8009d72:	8b3b      	ldrh	r3, [r7, #24]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	88fb      	ldrh	r3, [r7, #6]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <pbuf_copy_partial+0xca>
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1c4      	bne.n	8009d18 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009d8e:	8afb      	ldrh	r3, [r7, #22]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	0801574c 	.word	0x0801574c
 8009d9c:	08015a94 	.word	0x08015a94
 8009da0:	080157ac 	.word	0x080157ac
 8009da4:	08015ab4 	.word	0x08015ab4

08009da8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	460b      	mov	r3, r1
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8009db6:	897b      	ldrh	r3, [r7, #10]
 8009db8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8009dbe:	e007      	b.n	8009dd0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	895b      	ldrh	r3, [r3, #10]
 8009dc4:	8afa      	ldrh	r2, [r7, #22]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <pbuf_skip_const+0x38>
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	895b      	ldrh	r3, [r3, #10]
 8009dda:	8afa      	ldrh	r2, [r7, #22]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d2ef      	bcs.n	8009dc0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8afa      	ldrh	r2, [r7, #22]
 8009dea:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8009dec:	693b      	ldr	r3, [r7, #16]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	371c      	adds	r7, #28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
	...

08009dfc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	603a      	str	r2, [r7, #0]
 8009e06:	71fb      	strb	r3, [r7, #7]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	8919      	ldrh	r1, [r3, #8]
 8009e10:	88ba      	ldrh	r2, [r7, #4]
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7ff fa87 	bl	8009328 <pbuf_alloc>
 8009e1a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d101      	bne.n	8009e26 <pbuf_clone+0x2a>
    return NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e011      	b.n	8009e4a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff fe79 	bl	8009b20 <pbuf_copy>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009e32:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d006      	beq.n	8009e48 <pbuf_clone+0x4c>
 8009e3a:	4b06      	ldr	r3, [pc, #24]	; (8009e54 <pbuf_clone+0x58>)
 8009e3c:	f240 5224 	movw	r2, #1316	; 0x524
 8009e40:	4905      	ldr	r1, [pc, #20]	; (8009e58 <pbuf_clone+0x5c>)
 8009e42:	4806      	ldr	r0, [pc, #24]	; (8009e5c <pbuf_clone+0x60>)
 8009e44:	f009 f814 	bl	8012e70 <iprintf>
  return q;
 8009e48:	68fb      	ldr	r3, [r7, #12]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	0801574c 	.word	0x0801574c
 8009e58:	08015bc0 	.word	0x08015bc0
 8009e5c:	080157ac 	.word	0x080157ac

08009e60 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8009e6c:	887b      	ldrh	r3, [r7, #2]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f80c 	bl	8009e8e <pbuf_try_get_at>
 8009e76:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	db02      	blt.n	8009e84 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	e000      	b.n	8009e86 <pbuf_get_at+0x26>
  }
  return 0;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8009e9a:	f107 020a 	add.w	r2, r7, #10
 8009e9e:	887b      	ldrh	r3, [r7, #2]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7ff ff80 	bl	8009da8 <pbuf_skip_const>
 8009ea8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <pbuf_try_get_at+0x38>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	895a      	ldrh	r2, [r3, #10]
 8009eb4:	897b      	ldrh	r3, [r7, #10]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d905      	bls.n	8009ec6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	897a      	ldrh	r2, [r7, #10]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	e001      	b.n	8009eca <pbuf_try_get_at+0x3c>
  }
  return -1;
 8009ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009ed8:	f008 ffe2 	bl	8012ea0 <rand>
 8009edc:	4603      	mov	r3, r0
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	4b01      	ldr	r3, [pc, #4]	; (8009ef4 <tcp_init+0x20>)
 8009eee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009ef0:	bf00      	nop
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	20000026 	.word	0x20000026

08009ef8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	7d1b      	ldrb	r3, [r3, #20]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d105      	bne.n	8009f14 <tcp_free+0x1c>
 8009f08:	4b06      	ldr	r3, [pc, #24]	; (8009f24 <tcp_free+0x2c>)
 8009f0a:	22d4      	movs	r2, #212	; 0xd4
 8009f0c:	4906      	ldr	r1, [pc, #24]	; (8009f28 <tcp_free+0x30>)
 8009f0e:	4807      	ldr	r0, [pc, #28]	; (8009f2c <tcp_free+0x34>)
 8009f10:	f008 ffae 	bl	8012e70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	2001      	movs	r0, #1
 8009f18:	f7fe fed8 	bl	8008ccc <memp_free>
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	08015c4c 	.word	0x08015c4c
 8009f28:	08015c7c 	.word	0x08015c7c
 8009f2c:	08015c90 	.word	0x08015c90

08009f30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	7d1b      	ldrb	r3, [r3, #20]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d105      	bne.n	8009f4c <tcp_free_listen+0x1c>
 8009f40:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <tcp_free_listen+0x2c>)
 8009f42:	22df      	movs	r2, #223	; 0xdf
 8009f44:	4906      	ldr	r1, [pc, #24]	; (8009f60 <tcp_free_listen+0x30>)
 8009f46:	4807      	ldr	r0, [pc, #28]	; (8009f64 <tcp_free_listen+0x34>)
 8009f48:	f008 ff92 	bl	8012e70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	2002      	movs	r0, #2
 8009f50:	f7fe febc 	bl	8008ccc <memp_free>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	08015c4c 	.word	0x08015c4c
 8009f60:	08015cb8 	.word	0x08015cb8
 8009f64:	08015c90 	.word	0x08015c90

08009f68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009f6c:	f001 f974 	bl	800b258 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <tcp_tmr+0x28>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <tcp_tmr+0x28>)
 8009f7a:	701a      	strb	r2, [r3, #0]
 8009f7c:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <tcp_tmr+0x28>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f003 0301 	and.w	r3, r3, #1
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009f88:	f000 fe26 	bl	800abd8 <tcp_slowtmr>
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000549 	.word	0x20000549

08009f94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d105      	bne.n	8009fb0 <tcp_remove_listener+0x1c>
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <tcp_remove_listener+0x48>)
 8009fa6:	22ff      	movs	r2, #255	; 0xff
 8009fa8:	490d      	ldr	r1, [pc, #52]	; (8009fe0 <tcp_remove_listener+0x4c>)
 8009faa:	480e      	ldr	r0, [pc, #56]	; (8009fe4 <tcp_remove_listener+0x50>)
 8009fac:	f008 ff60 	bl	8012e70 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e00a      	b.n	8009fcc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d102      	bne.n	8009fc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f1      	bne.n	8009fb6 <tcp_remove_listener+0x22>
    }
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	bf00      	nop
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	08015c4c 	.word	0x08015c4c
 8009fe0:	08015cd4 	.word	0x08015cd4
 8009fe4:	08015c90 	.word	0x08015c90

08009fe8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <tcp_listen_closed+0x1c>
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <tcp_listen_closed+0x60>)
 8009ff8:	f240 1211 	movw	r2, #273	; 0x111
 8009ffc:	4913      	ldr	r1, [pc, #76]	; (800a04c <tcp_listen_closed+0x64>)
 8009ffe:	4814      	ldr	r0, [pc, #80]	; (800a050 <tcp_listen_closed+0x68>)
 800a000:	f008 ff36 	bl	8012e70 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	7d1b      	ldrb	r3, [r3, #20]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d006      	beq.n	800a01a <tcp_listen_closed+0x32>
 800a00c:	4b0e      	ldr	r3, [pc, #56]	; (800a048 <tcp_listen_closed+0x60>)
 800a00e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a012:	4910      	ldr	r1, [pc, #64]	; (800a054 <tcp_listen_closed+0x6c>)
 800a014:	480e      	ldr	r0, [pc, #56]	; (800a050 <tcp_listen_closed+0x68>)
 800a016:	f008 ff2b 	bl	8012e70 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a01a:	2301      	movs	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	e00b      	b.n	800a038 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a020:	4a0d      	ldr	r2, [pc, #52]	; (800a058 <tcp_listen_closed+0x70>)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff ffb1 	bl	8009f94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	3301      	adds	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d9f0      	bls.n	800a020 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	08015c4c 	.word	0x08015c4c
 800a04c:	08015cfc 	.word	0x08015cfc
 800a050:	08015c90 	.word	0x08015c90
 800a054:	08015d08 	.word	0x08015d08
 800a058:	0801aad8 	.word	0x0801aad8

0800a05c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af04      	add	r7, sp, #16
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	460b      	mov	r3, r1
 800a066:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <tcp_close_shutdown+0x20>
 800a06e:	4b63      	ldr	r3, [pc, #396]	; (800a1fc <tcp_close_shutdown+0x1a0>)
 800a070:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a074:	4962      	ldr	r1, [pc, #392]	; (800a200 <tcp_close_shutdown+0x1a4>)
 800a076:	4863      	ldr	r0, [pc, #396]	; (800a204 <tcp_close_shutdown+0x1a8>)
 800a078:	f008 fefa 	bl	8012e70 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d066      	beq.n	800a150 <tcp_close_shutdown+0xf4>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7d1b      	ldrb	r3, [r3, #20]
 800a086:	2b04      	cmp	r3, #4
 800a088:	d003      	beq.n	800a092 <tcp_close_shutdown+0x36>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	7d1b      	ldrb	r3, [r3, #20]
 800a08e:	2b07      	cmp	r3, #7
 800a090:	d15e      	bne.n	800a150 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a096:	2b00      	cmp	r3, #0
 800a098:	d104      	bne.n	800a0a4 <tcp_close_shutdown+0x48>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a09e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a0a2:	d055      	beq.n	800a150 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	8b5b      	ldrh	r3, [r3, #26]
 800a0a8:	f003 0310 	and.w	r3, r3, #16
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <tcp_close_shutdown+0x62>
 800a0b0:	4b52      	ldr	r3, [pc, #328]	; (800a1fc <tcp_close_shutdown+0x1a0>)
 800a0b2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a0b6:	4954      	ldr	r1, [pc, #336]	; (800a208 <tcp_close_shutdown+0x1ac>)
 800a0b8:	4852      	ldr	r0, [pc, #328]	; (800a204 <tcp_close_shutdown+0x1a8>)
 800a0ba:	f008 fed9 	bl	8012e70 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a0c6:	687d      	ldr	r5, [r7, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	8ad2      	ldrh	r2, [r2, #22]
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	8b09      	ldrh	r1, [r1, #24]
 800a0d4:	9102      	str	r1, [sp, #8]
 800a0d6:	9201      	str	r2, [sp, #4]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	462b      	mov	r3, r5
 800a0dc:	4622      	mov	r2, r4
 800a0de:	4601      	mov	r1, r0
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f005 fea3 	bl	800fe2c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f001 fc84 	bl	800b9f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a0ec:	4b47      	ldr	r3, [pc, #284]	; (800a20c <tcp_close_shutdown+0x1b0>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d105      	bne.n	800a102 <tcp_close_shutdown+0xa6>
 800a0f6:	4b45      	ldr	r3, [pc, #276]	; (800a20c <tcp_close_shutdown+0x1b0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	4a43      	ldr	r2, [pc, #268]	; (800a20c <tcp_close_shutdown+0x1b0>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	e013      	b.n	800a12a <tcp_close_shutdown+0xce>
 800a102:	4b42      	ldr	r3, [pc, #264]	; (800a20c <tcp_close_shutdown+0x1b0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	e00c      	b.n	800a124 <tcp_close_shutdown+0xc8>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d104      	bne.n	800a11e <tcp_close_shutdown+0xc2>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	60da      	str	r2, [r3, #12]
 800a11c:	e005      	b.n	800a12a <tcp_close_shutdown+0xce>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1ef      	bne.n	800a10a <tcp_close_shutdown+0xae>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	60da      	str	r2, [r3, #12]
 800a130:	4b37      	ldr	r3, [pc, #220]	; (800a210 <tcp_close_shutdown+0x1b4>)
 800a132:	2201      	movs	r2, #1
 800a134:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a136:	4b37      	ldr	r3, [pc, #220]	; (800a214 <tcp_close_shutdown+0x1b8>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d102      	bne.n	800a146 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a140:	f004 f918 	bl	800e374 <tcp_trigger_input_pcb_close>
 800a144:	e002      	b.n	800a14c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f7ff fed6 	bl	8009ef8 <tcp_free>
      }
      return ERR_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	e050      	b.n	800a1f2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	7d1b      	ldrb	r3, [r3, #20]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d03b      	beq.n	800a1d0 <tcp_close_shutdown+0x174>
 800a158:	2b02      	cmp	r3, #2
 800a15a:	dc44      	bgt.n	800a1e6 <tcp_close_shutdown+0x18a>
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <tcp_close_shutdown+0x10a>
 800a160:	2b01      	cmp	r3, #1
 800a162:	d02a      	beq.n	800a1ba <tcp_close_shutdown+0x15e>
 800a164:	e03f      	b.n	800a1e6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	8adb      	ldrh	r3, [r3, #22]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d021      	beq.n	800a1b2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a16e:	4b2a      	ldr	r3, [pc, #168]	; (800a218 <tcp_close_shutdown+0x1bc>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d105      	bne.n	800a184 <tcp_close_shutdown+0x128>
 800a178:	4b27      	ldr	r3, [pc, #156]	; (800a218 <tcp_close_shutdown+0x1bc>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	4a26      	ldr	r2, [pc, #152]	; (800a218 <tcp_close_shutdown+0x1bc>)
 800a180:	6013      	str	r3, [r2, #0]
 800a182:	e013      	b.n	800a1ac <tcp_close_shutdown+0x150>
 800a184:	4b24      	ldr	r3, [pc, #144]	; (800a218 <tcp_close_shutdown+0x1bc>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60bb      	str	r3, [r7, #8]
 800a18a:	e00c      	b.n	800a1a6 <tcp_close_shutdown+0x14a>
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	429a      	cmp	r2, r3
 800a194:	d104      	bne.n	800a1a0 <tcp_close_shutdown+0x144>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	60da      	str	r2, [r3, #12]
 800a19e:	e005      	b.n	800a1ac <tcp_close_shutdown+0x150>
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	60bb      	str	r3, [r7, #8]
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1ef      	bne.n	800a18c <tcp_close_shutdown+0x130>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7ff fea0 	bl	8009ef8 <tcp_free>
      break;
 800a1b8:	e01a      	b.n	800a1f0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff ff14 	bl	8009fe8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4816      	ldr	r0, [pc, #88]	; (800a21c <tcp_close_shutdown+0x1c0>)
 800a1c4:	f001 fc66 	bl	800ba94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff feb1 	bl	8009f30 <tcp_free_listen>
      break;
 800a1ce:	e00f      	b.n	800a1f0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a1d0:	6879      	ldr	r1, [r7, #4]
 800a1d2:	480e      	ldr	r0, [pc, #56]	; (800a20c <tcp_close_shutdown+0x1b0>)
 800a1d4:	f001 fc5e 	bl	800ba94 <tcp_pcb_remove>
 800a1d8:	4b0d      	ldr	r3, [pc, #52]	; (800a210 <tcp_close_shutdown+0x1b4>)
 800a1da:	2201      	movs	r2, #1
 800a1dc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7ff fe8a 	bl	8009ef8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a1e4:	e004      	b.n	800a1f0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f81a 	bl	800a220 <tcp_close_shutdown_fin>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	e000      	b.n	800a1f2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1fa:	bf00      	nop
 800a1fc:	08015c4c 	.word	0x08015c4c
 800a200:	08015d20 	.word	0x08015d20
 800a204:	08015c90 	.word	0x08015c90
 800a208:	08015d40 	.word	0x08015d40
 800a20c:	200075bc 	.word	0x200075bc
 800a210:	200075b8 	.word	0x200075b8
 800a214:	200075d0 	.word	0x200075d0
 800a218:	200075c8 	.word	0x200075c8
 800a21c:	200075c4 	.word	0x200075c4

0800a220 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d106      	bne.n	800a23c <tcp_close_shutdown_fin+0x1c>
 800a22e:	4b2e      	ldr	r3, [pc, #184]	; (800a2e8 <tcp_close_shutdown_fin+0xc8>)
 800a230:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a234:	492d      	ldr	r1, [pc, #180]	; (800a2ec <tcp_close_shutdown_fin+0xcc>)
 800a236:	482e      	ldr	r0, [pc, #184]	; (800a2f0 <tcp_close_shutdown_fin+0xd0>)
 800a238:	f008 fe1a 	bl	8012e70 <iprintf>

  switch (pcb->state) {
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	7d1b      	ldrb	r3, [r3, #20]
 800a240:	2b07      	cmp	r3, #7
 800a242:	d020      	beq.n	800a286 <tcp_close_shutdown_fin+0x66>
 800a244:	2b07      	cmp	r3, #7
 800a246:	dc2b      	bgt.n	800a2a0 <tcp_close_shutdown_fin+0x80>
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d002      	beq.n	800a252 <tcp_close_shutdown_fin+0x32>
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d00d      	beq.n	800a26c <tcp_close_shutdown_fin+0x4c>
 800a250:	e026      	b.n	800a2a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f004 fef8 	bl	800f048 <tcp_send_fin>
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a25c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d11f      	bne.n	800a2a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2205      	movs	r2, #5
 800a268:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a26a:	e01b      	b.n	800a2a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f004 feeb 	bl	800f048 <tcp_send_fin>
 800a272:	4603      	mov	r3, r0
 800a274:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d114      	bne.n	800a2a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2205      	movs	r2, #5
 800a282:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a284:	e010      	b.n	800a2a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f004 fede 	bl	800f048 <tcp_send_fin>
 800a28c:	4603      	mov	r3, r0
 800a28e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d109      	bne.n	800a2ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2209      	movs	r2, #9
 800a29c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a29e:	e005      	b.n	800a2ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e01c      	b.n	800a2de <tcp_close_shutdown_fin+0xbe>
      break;
 800a2a4:	bf00      	nop
 800a2a6:	e002      	b.n	800a2ae <tcp_close_shutdown_fin+0x8e>
      break;
 800a2a8:	bf00      	nop
 800a2aa:	e000      	b.n	800a2ae <tcp_close_shutdown_fin+0x8e>
      break;
 800a2ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a2ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d103      	bne.n	800a2be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f005 f804 	bl	800f2c4 <tcp_output>
 800a2bc:	e00d      	b.n	800a2da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a2be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2c6:	d108      	bne.n	800a2da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	8b5b      	ldrh	r3, [r3, #26]
 800a2cc:	f043 0308 	orr.w	r3, r3, #8
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	e001      	b.n	800a2de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a2da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	08015c4c 	.word	0x08015c4c
 800a2ec:	08015cfc 	.word	0x08015cfc
 800a2f0:	08015c90 	.word	0x08015c90

0800a2f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d109      	bne.n	800a316 <tcp_close+0x22>
 800a302:	4b0f      	ldr	r3, [pc, #60]	; (800a340 <tcp_close+0x4c>)
 800a304:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a308:	490e      	ldr	r1, [pc, #56]	; (800a344 <tcp_close+0x50>)
 800a30a:	480f      	ldr	r0, [pc, #60]	; (800a348 <tcp_close+0x54>)
 800a30c:	f008 fdb0 	bl	8012e70 <iprintf>
 800a310:	f06f 030f 	mvn.w	r3, #15
 800a314:	e00f      	b.n	800a336 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7d1b      	ldrb	r3, [r3, #20]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d006      	beq.n	800a32c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8b5b      	ldrh	r3, [r3, #26]
 800a322:	f043 0310 	orr.w	r3, r3, #16
 800a326:	b29a      	uxth	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a32c:	2101      	movs	r1, #1
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff fe94 	bl	800a05c <tcp_close_shutdown>
 800a334:	4603      	mov	r3, r0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	08015c4c 	.word	0x08015c4c
 800a344:	08015d5c 	.word	0x08015d5c
 800a348:	08015c90 	.word	0x08015c90

0800a34c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08e      	sub	sp, #56	; 0x38
 800a350:	af04      	add	r7, sp, #16
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d107      	bne.n	800a36c <tcp_abandon+0x20>
 800a35c:	4b52      	ldr	r3, [pc, #328]	; (800a4a8 <tcp_abandon+0x15c>)
 800a35e:	f240 223d 	movw	r2, #573	; 0x23d
 800a362:	4952      	ldr	r1, [pc, #328]	; (800a4ac <tcp_abandon+0x160>)
 800a364:	4852      	ldr	r0, [pc, #328]	; (800a4b0 <tcp_abandon+0x164>)
 800a366:	f008 fd83 	bl	8012e70 <iprintf>
 800a36a:	e099      	b.n	800a4a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	7d1b      	ldrb	r3, [r3, #20]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d106      	bne.n	800a382 <tcp_abandon+0x36>
 800a374:	4b4c      	ldr	r3, [pc, #304]	; (800a4a8 <tcp_abandon+0x15c>)
 800a376:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a37a:	494e      	ldr	r1, [pc, #312]	; (800a4b4 <tcp_abandon+0x168>)
 800a37c:	484c      	ldr	r0, [pc, #304]	; (800a4b0 <tcp_abandon+0x164>)
 800a37e:	f008 fd77 	bl	8012e70 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	7d1b      	ldrb	r3, [r3, #20]
 800a386:	2b0a      	cmp	r3, #10
 800a388:	d107      	bne.n	800a39a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a38a:	6879      	ldr	r1, [r7, #4]
 800a38c:	484a      	ldr	r0, [pc, #296]	; (800a4b8 <tcp_abandon+0x16c>)
 800a38e:	f001 fb81 	bl	800ba94 <tcp_pcb_remove>
    tcp_free(pcb);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff fdb0 	bl	8009ef8 <tcp_free>
 800a398:	e082      	b.n	800a4a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	7d1b      	ldrb	r3, [r3, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d126      	bne.n	800a412 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	8adb      	ldrh	r3, [r3, #22]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d02e      	beq.n	800a42a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a3cc:	4b3b      	ldr	r3, [pc, #236]	; (800a4bc <tcp_abandon+0x170>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d105      	bne.n	800a3e2 <tcp_abandon+0x96>
 800a3d6:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <tcp_abandon+0x170>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	4a37      	ldr	r2, [pc, #220]	; (800a4bc <tcp_abandon+0x170>)
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e013      	b.n	800a40a <tcp_abandon+0xbe>
 800a3e2:	4b36      	ldr	r3, [pc, #216]	; (800a4bc <tcp_abandon+0x170>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	61fb      	str	r3, [r7, #28]
 800a3e8:	e00c      	b.n	800a404 <tcp_abandon+0xb8>
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d104      	bne.n	800a3fe <tcp_abandon+0xb2>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	60da      	str	r2, [r3, #12]
 800a3fc:	e005      	b.n	800a40a <tcp_abandon+0xbe>
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	61fb      	str	r3, [r7, #28]
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1ef      	bne.n	800a3ea <tcp_abandon+0x9e>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	60da      	str	r2, [r3, #12]
 800a410:	e00b      	b.n	800a42a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	8adb      	ldrh	r3, [r3, #22]
 800a41a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a41c:	6879      	ldr	r1, [r7, #4]
 800a41e:	4828      	ldr	r0, [pc, #160]	; (800a4c0 <tcp_abandon+0x174>)
 800a420:	f001 fb38 	bl	800ba94 <tcp_pcb_remove>
 800a424:	4b27      	ldr	r3, [pc, #156]	; (800a4c4 <tcp_abandon+0x178>)
 800a426:	2201      	movs	r2, #1
 800a428:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d004      	beq.n	800a43c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a436:	4618      	mov	r0, r3
 800a438:	f000 ffee 	bl	800b418 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a448:	4618      	mov	r0, r3
 800a44a:	f000 ffe5 	bl	800b418 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 ffdc 	bl	800b418 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	8b12      	ldrh	r2, [r2, #24]
 800a470:	9202      	str	r2, [sp, #8]
 800a472:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a474:	9201      	str	r2, [sp, #4]
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	460b      	mov	r3, r1
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	69b9      	ldr	r1, [r7, #24]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f005 fcd4 	bl	800fe2c <tcp_rst>
    }
    last_state = pcb->state;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	7d1b      	ldrb	r3, [r3, #20]
 800a488:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7ff fd34 	bl	8009ef8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d004      	beq.n	800a4a0 <tcp_abandon+0x154>
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	f06f 010c 	mvn.w	r1, #12
 800a49c:	68f8      	ldr	r0, [r7, #12]
 800a49e:	4798      	blx	r3
  }
}
 800a4a0:	3728      	adds	r7, #40	; 0x28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	08015c4c 	.word	0x08015c4c
 800a4ac:	08015d90 	.word	0x08015d90
 800a4b0:	08015c90 	.word	0x08015c90
 800a4b4:	08015dac 	.word	0x08015dac
 800a4b8:	200075cc 	.word	0x200075cc
 800a4bc:	200075c8 	.word	0x200075c8
 800a4c0:	200075bc 	.word	0x200075bc
 800a4c4:	200075b8 	.word	0x200075b8

0800a4c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f7ff ff3a 	bl	800a34c <tcp_abandon>
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b088      	sub	sp, #32
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800a4ee:	2304      	movs	r3, #4
 800a4f0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800a4f8:	4b3e      	ldr	r3, [pc, #248]	; (800a5f4 <tcp_bind+0x114>)
 800a4fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <tcp_bind+0x36>
 800a502:	4b3d      	ldr	r3, [pc, #244]	; (800a5f8 <tcp_bind+0x118>)
 800a504:	f240 22a9 	movw	r2, #681	; 0x2a9
 800a508:	493c      	ldr	r1, [pc, #240]	; (800a5fc <tcp_bind+0x11c>)
 800a50a:	483d      	ldr	r0, [pc, #244]	; (800a600 <tcp_bind+0x120>)
 800a50c:	f008 fcb0 	bl	8012e70 <iprintf>
 800a510:	f06f 030f 	mvn.w	r3, #15
 800a514:	e06a      	b.n	800a5ec <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	7d1b      	ldrb	r3, [r3, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d009      	beq.n	800a532 <tcp_bind+0x52>
 800a51e:	4b36      	ldr	r3, [pc, #216]	; (800a5f8 <tcp_bind+0x118>)
 800a520:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a524:	4937      	ldr	r1, [pc, #220]	; (800a604 <tcp_bind+0x124>)
 800a526:	4836      	ldr	r0, [pc, #216]	; (800a600 <tcp_bind+0x120>)
 800a528:	f008 fca2 	bl	8012e70 <iprintf>
 800a52c:	f06f 0305 	mvn.w	r3, #5
 800a530:	e05c      	b.n	800a5ec <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <tcp_bind+0x6c>
    port = tcp_new_port();
 800a538:	f000 f9f0 	bl	800a91c <tcp_new_port>
 800a53c:	4603      	mov	r3, r0
 800a53e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a540:	88fb      	ldrh	r3, [r7, #6]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d135      	bne.n	800a5b2 <tcp_bind+0xd2>
      return ERR_BUF;
 800a546:	f06f 0301 	mvn.w	r3, #1
 800a54a:	e04f      	b.n	800a5ec <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800a54c:	2300      	movs	r3, #0
 800a54e:	61fb      	str	r3, [r7, #28]
 800a550:	e02b      	b.n	800a5aa <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a552:	4a2d      	ldr	r2, [pc, #180]	; (800a608 <tcp_bind+0x128>)
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	61bb      	str	r3, [r7, #24]
 800a55e:	e01e      	b.n	800a59e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	8adb      	ldrh	r3, [r3, #22]
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	429a      	cmp	r2, r3
 800a568:	d116      	bne.n	800a598 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800a56a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d010      	beq.n	800a592 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00c      	beq.n	800a592 <tcp_bind+0xb2>
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d005      	beq.n	800a592 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a58e:	429a      	cmp	r2, r3
 800a590:	d102      	bne.n	800a598 <tcp_bind+0xb8>
              return ERR_USE;
 800a592:	f06f 0307 	mvn.w	r3, #7
 800a596:	e029      	b.n	800a5ec <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	61bb      	str	r3, [r7, #24]
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1dd      	bne.n	800a560 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	69fa      	ldr	r2, [r7, #28]
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	dbcf      	blt.n	800a552 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d00c      	beq.n	800a5d2 <tcp_bind+0xf2>
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d008      	beq.n	800a5d2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d002      	beq.n	800a5cc <tcp_bind+0xec>
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	e000      	b.n	800a5ce <tcp_bind+0xee>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	88fa      	ldrh	r2, [r7, #6]
 800a5d6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a5d8:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <tcp_bind+0x12c>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	60da      	str	r2, [r3, #12]
 800a5e0:	4a0a      	ldr	r2, [pc, #40]	; (800a60c <tcp_bind+0x12c>)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6013      	str	r3, [r2, #0]
 800a5e6:	f005 fde3 	bl	80101b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3720      	adds	r7, #32
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	0801ab00 	.word	0x0801ab00
 800a5f8:	08015c4c 	.word	0x08015c4c
 800a5fc:	08015de0 	.word	0x08015de0
 800a600:	08015c90 	.word	0x08015c90
 800a604:	08015df8 	.word	0x08015df8
 800a608:	0801aad8 	.word	0x0801aad8
 800a60c:	200075c8 	.word	0x200075c8

0800a610 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d106      	bne.n	800a632 <tcp_accept_null+0x22>
 800a624:	4b07      	ldr	r3, [pc, #28]	; (800a644 <tcp_accept_null+0x34>)
 800a626:	f240 320f 	movw	r2, #783	; 0x30f
 800a62a:	4907      	ldr	r1, [pc, #28]	; (800a648 <tcp_accept_null+0x38>)
 800a62c:	4807      	ldr	r0, [pc, #28]	; (800a64c <tcp_accept_null+0x3c>)
 800a62e:	f008 fc1f 	bl	8012e70 <iprintf>

  tcp_abort(pcb);
 800a632:	68b8      	ldr	r0, [r7, #8]
 800a634:	f7ff ff48 	bl	800a4c8 <tcp_abort>

  return ERR_ABRT;
 800a638:	f06f 030c 	mvn.w	r3, #12
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	08015c4c 	.word	0x08015c4c
 800a648:	08015e20 	.word	0x08015e20
 800a64c:	08015c90 	.word	0x08015c90

0800a650 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800a65c:	78fb      	ldrb	r3, [r7, #3]
 800a65e:	2200      	movs	r2, #0
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f806 	bl	800a674 <tcp_listen_with_backlog_and_err>
 800a668:	4603      	mov	r3, r0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	460b      	mov	r3, r1
 800a67e:	607a      	str	r2, [r7, #4]
 800a680:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d109      	bne.n	800a6a0 <tcp_listen_with_backlog_and_err+0x2c>
 800a68c:	4b47      	ldr	r3, [pc, #284]	; (800a7ac <tcp_listen_with_backlog_and_err+0x138>)
 800a68e:	f240 3259 	movw	r2, #857	; 0x359
 800a692:	4947      	ldr	r1, [pc, #284]	; (800a7b0 <tcp_listen_with_backlog_and_err+0x13c>)
 800a694:	4847      	ldr	r0, [pc, #284]	; (800a7b4 <tcp_listen_with_backlog_and_err+0x140>)
 800a696:	f008 fbeb 	bl	8012e70 <iprintf>
 800a69a:	23f0      	movs	r3, #240	; 0xf0
 800a69c:	76fb      	strb	r3, [r7, #27]
 800a69e:	e079      	b.n	800a794 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	7d1b      	ldrb	r3, [r3, #20]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <tcp_listen_with_backlog_and_err+0x48>
 800a6a8:	4b40      	ldr	r3, [pc, #256]	; (800a7ac <tcp_listen_with_backlog_and_err+0x138>)
 800a6aa:	f240 325a 	movw	r2, #858	; 0x35a
 800a6ae:	4942      	ldr	r1, [pc, #264]	; (800a7b8 <tcp_listen_with_backlog_and_err+0x144>)
 800a6b0:	4840      	ldr	r0, [pc, #256]	; (800a7b4 <tcp_listen_with_backlog_and_err+0x140>)
 800a6b2:	f008 fbdd 	bl	8012e70 <iprintf>
 800a6b6:	23f1      	movs	r3, #241	; 0xf1
 800a6b8:	76fb      	strb	r3, [r7, #27]
 800a6ba:	e06b      	b.n	800a794 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	7d1b      	ldrb	r3, [r3, #20]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d104      	bne.n	800a6ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800a6c8:	23f7      	movs	r3, #247	; 0xf7
 800a6ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a6cc:	e062      	b.n	800a794 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a6ce:	2002      	movs	r0, #2
 800a6d0:	f7fe fab0 	bl	8008c34 <memp_malloc>
 800a6d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d102      	bne.n	800a6e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800a6dc:	23ff      	movs	r3, #255	; 0xff
 800a6de:	76fb      	strb	r3, [r7, #27]
    goto done;
 800a6e0:	e058      	b.n	800a794 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	691a      	ldr	r2, [r3, #16]
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	8ada      	ldrh	r2, [r3, #22]
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	7d5a      	ldrb	r2, [r3, #21]
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7a5a      	ldrb	r2, [r3, #9]
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2200      	movs	r2, #0
 800a70c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	7ada      	ldrb	r2, [r3, #11]
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	7a9a      	ldrb	r2, [r3, #10]
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	8adb      	ldrh	r3, [r3, #22]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d021      	beq.n	800a772 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a72e:	4b23      	ldr	r3, [pc, #140]	; (800a7bc <tcp_listen_with_backlog_and_err+0x148>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	429a      	cmp	r2, r3
 800a736:	d105      	bne.n	800a744 <tcp_listen_with_backlog_and_err+0xd0>
 800a738:	4b20      	ldr	r3, [pc, #128]	; (800a7bc <tcp_listen_with_backlog_and_err+0x148>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	4a1f      	ldr	r2, [pc, #124]	; (800a7bc <tcp_listen_with_backlog_and_err+0x148>)
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	e013      	b.n	800a76c <tcp_listen_with_backlog_and_err+0xf8>
 800a744:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <tcp_listen_with_backlog_and_err+0x148>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e00c      	b.n	800a766 <tcp_listen_with_backlog_and_err+0xf2>
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	429a      	cmp	r2, r3
 800a754:	d104      	bne.n	800a760 <tcp_listen_with_backlog_and_err+0xec>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	68da      	ldr	r2, [r3, #12]
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	e005      	b.n	800a76c <tcp_listen_with_backlog_and_err+0xf8>
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1ef      	bne.n	800a74c <tcp_listen_with_backlog_and_err+0xd8>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f7ff fbc0 	bl	8009ef8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	4a11      	ldr	r2, [pc, #68]	; (800a7c0 <tcp_listen_with_backlog_and_err+0x14c>)
 800a77c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a77e:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <tcp_listen_with_backlog_and_err+0x150>)
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	60da      	str	r2, [r3, #12]
 800a786:	4a0f      	ldr	r2, [pc, #60]	; (800a7c4 <tcp_listen_with_backlog_and_err+0x150>)
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	f005 fd10 	bl	80101b0 <tcp_timer_needed>
  res = ERR_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7efa      	ldrb	r2, [r7, #27]
 800a79e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800a7a0:	69fb      	ldr	r3, [r7, #28]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3720      	adds	r7, #32
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	08015c4c 	.word	0x08015c4c
 800a7b0:	08015e40 	.word	0x08015e40
 800a7b4:	08015c90 	.word	0x08015c90
 800a7b8:	08015e70 	.word	0x08015e70
 800a7bc:	200075c8 	.word	0x200075c8
 800a7c0:	0800a611 	.word	0x0800a611
 800a7c4:	200075c4 	.word	0x200075c4

0800a7c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <tcp_update_rcv_ann_wnd+0x1c>
 800a7d6:	4b25      	ldr	r3, [pc, #148]	; (800a86c <tcp_update_rcv_ann_wnd+0xa4>)
 800a7d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7dc:	4924      	ldr	r1, [pc, #144]	; (800a870 <tcp_update_rcv_ann_wnd+0xa8>)
 800a7de:	4825      	ldr	r0, [pc, #148]	; (800a874 <tcp_update_rcv_ann_wnd+0xac>)
 800a7e0:	f008 fb46 	bl	8012e70 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a7ec:	4413      	add	r3, r2
 800a7ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a7f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a7fc:	bf28      	it	cs
 800a7fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a802:	b292      	uxth	r2, r2
 800a804:	4413      	add	r3, r2
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	db08      	blt.n	800a820 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	e020      	b.n	800a862 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dd03      	ble.n	800a836 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a834:	e014      	b.n	800a860 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a848:	d306      	bcc.n	800a858 <tcp_update_rcv_ann_wnd+0x90>
 800a84a:	4b08      	ldr	r3, [pc, #32]	; (800a86c <tcp_update_rcv_ann_wnd+0xa4>)
 800a84c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a850:	4909      	ldr	r1, [pc, #36]	; (800a878 <tcp_update_rcv_ann_wnd+0xb0>)
 800a852:	4808      	ldr	r0, [pc, #32]	; (800a874 <tcp_update_rcv_ann_wnd+0xac>)
 800a854:	f008 fb0c 	bl	8012e70 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a860:	2300      	movs	r3, #0
  }
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	08015c4c 	.word	0x08015c4c
 800a870:	08015ea8 	.word	0x08015ea8
 800a874:	08015c90 	.word	0x08015c90
 800a878:	08015ecc 	.word	0x08015ecc

0800a87c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d107      	bne.n	800a89e <tcp_recved+0x22>
 800a88e:	4b1f      	ldr	r3, [pc, #124]	; (800a90c <tcp_recved+0x90>)
 800a890:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a894:	491e      	ldr	r1, [pc, #120]	; (800a910 <tcp_recved+0x94>)
 800a896:	481f      	ldr	r0, [pc, #124]	; (800a914 <tcp_recved+0x98>)
 800a898:	f008 faea 	bl	8012e70 <iprintf>
 800a89c:	e032      	b.n	800a904 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	7d1b      	ldrb	r3, [r3, #20]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d106      	bne.n	800a8b4 <tcp_recved+0x38>
 800a8a6:	4b19      	ldr	r3, [pc, #100]	; (800a90c <tcp_recved+0x90>)
 800a8a8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a8ac:	491a      	ldr	r1, [pc, #104]	; (800a918 <tcp_recved+0x9c>)
 800a8ae:	4819      	ldr	r0, [pc, #100]	; (800a914 <tcp_recved+0x98>)
 800a8b0:	f008 fade 	bl	8012e70 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8b8:	887b      	ldrh	r3, [r7, #2]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a8be:	89fb      	ldrh	r3, [r7, #14]
 800a8c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a8c4:	d804      	bhi.n	800a8d0 <tcp_recved+0x54>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8ca:	89fa      	ldrh	r2, [r7, #14]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d204      	bcs.n	800a8da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a8d6:	851a      	strh	r2, [r3, #40]	; 0x28
 800a8d8:	e002      	b.n	800a8e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	89fa      	ldrh	r2, [r7, #14]
 800a8de:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff ff71 	bl	800a7c8 <tcp_update_rcv_ann_wnd>
 800a8e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a8ee:	d309      	bcc.n	800a904 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	8b5b      	ldrh	r3, [r3, #26]
 800a8f4:	f043 0302 	orr.w	r3, r3, #2
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f004 fce0 	bl	800f2c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	08015c4c 	.word	0x08015c4c
 800a910:	08015ee8 	.word	0x08015ee8
 800a914:	08015c90 	.word	0x08015c90
 800a918:	08015f00 	.word	0x08015f00

0800a91c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a926:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <tcp_new_port+0x84>)
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	3301      	adds	r3, #1
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	4b1c      	ldr	r3, [pc, #112]	; (800a9a0 <tcp_new_port+0x84>)
 800a930:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a932:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <tcp_new_port+0x84>)
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d103      	bne.n	800a946 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a93e:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <tcp_new_port+0x84>)
 800a940:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a944:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a946:	2300      	movs	r3, #0
 800a948:	71fb      	strb	r3, [r7, #7]
 800a94a:	e01e      	b.n	800a98a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	4a15      	ldr	r2, [pc, #84]	; (800a9a4 <tcp_new_port+0x88>)
 800a950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	e011      	b.n	800a97e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	8ada      	ldrh	r2, [r3, #22]
 800a95e:	4b10      	ldr	r3, [pc, #64]	; (800a9a0 <tcp_new_port+0x84>)
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	429a      	cmp	r2, r3
 800a964:	d108      	bne.n	800a978 <tcp_new_port+0x5c>
        n++;
 800a966:	88bb      	ldrh	r3, [r7, #4]
 800a968:	3301      	adds	r3, #1
 800a96a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a96c:	88bb      	ldrh	r3, [r7, #4]
 800a96e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a972:	d3d8      	bcc.n	800a926 <tcp_new_port+0xa>
          return 0;
 800a974:	2300      	movs	r3, #0
 800a976:	e00d      	b.n	800a994 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	603b      	str	r3, [r7, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1ea      	bne.n	800a95a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a984:	79fb      	ldrb	r3, [r7, #7]
 800a986:	3301      	adds	r3, #1
 800a988:	71fb      	strb	r3, [r7, #7]
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d9dd      	bls.n	800a94c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a990:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <tcp_new_port+0x84>)
 800a992:	881b      	ldrh	r3, [r3, #0]
}
 800a994:	4618      	mov	r0, r3
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr
 800a9a0:	20000026 	.word	0x20000026
 800a9a4:	0801aad8 	.word	0x0801aad8

0800a9a8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08a      	sub	sp, #40	; 0x28
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d109      	bne.n	800a9d6 <tcp_connect+0x2e>
 800a9c2:	4b7d      	ldr	r3, [pc, #500]	; (800abb8 <tcp_connect+0x210>)
 800a9c4:	f240 4235 	movw	r2, #1077	; 0x435
 800a9c8:	497c      	ldr	r1, [pc, #496]	; (800abbc <tcp_connect+0x214>)
 800a9ca:	487d      	ldr	r0, [pc, #500]	; (800abc0 <tcp_connect+0x218>)
 800a9cc:	f008 fa50 	bl	8012e70 <iprintf>
 800a9d0:	f06f 030f 	mvn.w	r3, #15
 800a9d4:	e0ec      	b.n	800abb0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d109      	bne.n	800a9f0 <tcp_connect+0x48>
 800a9dc:	4b76      	ldr	r3, [pc, #472]	; (800abb8 <tcp_connect+0x210>)
 800a9de:	f240 4236 	movw	r2, #1078	; 0x436
 800a9e2:	4978      	ldr	r1, [pc, #480]	; (800abc4 <tcp_connect+0x21c>)
 800a9e4:	4876      	ldr	r0, [pc, #472]	; (800abc0 <tcp_connect+0x218>)
 800a9e6:	f008 fa43 	bl	8012e70 <iprintf>
 800a9ea:	f06f 030f 	mvn.w	r3, #15
 800a9ee:	e0df      	b.n	800abb0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	7d1b      	ldrb	r3, [r3, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <tcp_connect+0x64>
 800a9f8:	4b6f      	ldr	r3, [pc, #444]	; (800abb8 <tcp_connect+0x210>)
 800a9fa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800a9fe:	4972      	ldr	r1, [pc, #456]	; (800abc8 <tcp_connect+0x220>)
 800aa00:	486f      	ldr	r0, [pc, #444]	; (800abc0 <tcp_connect+0x218>)
 800aa02:	f008 fa35 	bl	8012e70 <iprintf>
 800aa06:	f06f 0309 	mvn.w	r3, #9
 800aa0a:	e0d1      	b.n	800abb0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d002      	beq.n	800aa18 <tcp_connect+0x70>
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	e000      	b.n	800aa1a <tcp_connect+0x72>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	88fa      	ldrh	r2, [r7, #6]
 800aa22:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	7a1b      	ldrb	r3, [r3, #8]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	7a1b      	ldrb	r3, [r3, #8]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fbfd 	bl	8009230 <netif_get_by_index>
 800aa36:	6278      	str	r0, [r7, #36]	; 0x24
 800aa38:	e005      	b.n	800aa46 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3304      	adds	r3, #4
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f006 ffce 	bl	80119e0 <ip4_route>
 800aa44:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800aa46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d102      	bne.n	800aa52 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800aa4c:	f06f 0303 	mvn.w	r3, #3
 800aa50:	e0ae      	b.n	800abb0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d003      	beq.n	800aa60 <tcp_connect+0xb8>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d111      	bne.n	800aa84 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <tcp_connect+0xc4>
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	3304      	adds	r3, #4
 800aa6a:	e000      	b.n	800aa6e <tcp_connect+0xc6>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <tcp_connect+0xd4>
      return ERR_RTE;
 800aa76:	f06f 0303 	mvn.w	r3, #3
 800aa7a:	e099      	b.n	800abb0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8adb      	ldrh	r3, [r3, #22]
 800aa88:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8adb      	ldrh	r3, [r3, #22]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10c      	bne.n	800aaac <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800aa92:	f7ff ff43 	bl	800a91c <tcp_new_port>
 800aa96:	4603      	mov	r3, r0
 800aa98:	461a      	mov	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	8adb      	ldrh	r3, [r3, #22]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d102      	bne.n	800aaac <tcp_connect+0x104>
      return ERR_BUF;
 800aaa6:	f06f 0301 	mvn.w	r3, #1
 800aaaa:	e081      	b.n	800abb0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f001 f885 	bl	800bbbc <tcp_next_iss>
 800aab2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	1e5a      	subs	r2, r3, #1
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	1e5a      	subs	r2, r3, #1
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aade:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aaf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ab00:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3304      	adds	r3, #4
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab0e:	f001 f87b 	bl	800bc08 <tcp_eff_send_mss_netif>
 800ab12:	4603      	mov	r3, r0
 800ab14:	461a      	mov	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ab2a:	2102      	movs	r1, #2
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f004 fadb 	bl	800f0e8 <tcp_enqueue_flags>
 800ab32:	4603      	mov	r3, r0
 800ab34:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ab36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d136      	bne.n	800abac <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2202      	movs	r2, #2
 800ab42:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ab44:	8b7b      	ldrh	r3, [r7, #26]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d021      	beq.n	800ab8e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ab4a:	4b20      	ldr	r3, [pc, #128]	; (800abcc <tcp_connect+0x224>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d105      	bne.n	800ab60 <tcp_connect+0x1b8>
 800ab54:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <tcp_connect+0x224>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	4a1c      	ldr	r2, [pc, #112]	; (800abcc <tcp_connect+0x224>)
 800ab5c:	6013      	str	r3, [r2, #0]
 800ab5e:	e013      	b.n	800ab88 <tcp_connect+0x1e0>
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <tcp_connect+0x224>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	623b      	str	r3, [r7, #32]
 800ab66:	e00c      	b.n	800ab82 <tcp_connect+0x1da>
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d104      	bne.n	800ab7c <tcp_connect+0x1d4>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	68da      	ldr	r2, [r3, #12]
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	e005      	b.n	800ab88 <tcp_connect+0x1e0>
 800ab7c:	6a3b      	ldr	r3, [r7, #32]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	623b      	str	r3, [r7, #32]
 800ab82:	6a3b      	ldr	r3, [r7, #32]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1ef      	bne.n	800ab68 <tcp_connect+0x1c0>
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800ab8e:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <tcp_connect+0x228>)
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	60da      	str	r2, [r3, #12]
 800ab96:	4a0e      	ldr	r2, [pc, #56]	; (800abd0 <tcp_connect+0x228>)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	6013      	str	r3, [r2, #0]
 800ab9c:	f005 fb08 	bl	80101b0 <tcp_timer_needed>
 800aba0:	4b0c      	ldr	r3, [pc, #48]	; (800abd4 <tcp_connect+0x22c>)
 800aba2:	2201      	movs	r2, #1
 800aba4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f004 fb8c 	bl	800f2c4 <tcp_output>
  }
  return ret;
 800abac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3728      	adds	r7, #40	; 0x28
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	08015c4c 	.word	0x08015c4c
 800abbc:	08015f28 	.word	0x08015f28
 800abc0:	08015c90 	.word	0x08015c90
 800abc4:	08015f44 	.word	0x08015f44
 800abc8:	08015f60 	.word	0x08015f60
 800abcc:	200075c8 	.word	0x200075c8
 800abd0:	200075bc 	.word	0x200075bc
 800abd4:	200075b8 	.word	0x200075b8

0800abd8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800abd8:	b5b0      	push	{r4, r5, r7, lr}
 800abda:	b090      	sub	sp, #64	; 0x40
 800abdc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800abe4:	4b94      	ldr	r3, [pc, #592]	; (800ae38 <tcp_slowtmr+0x260>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	4a93      	ldr	r2, [pc, #588]	; (800ae38 <tcp_slowtmr+0x260>)
 800abec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800abee:	4b93      	ldr	r3, [pc, #588]	; (800ae3c <tcp_slowtmr+0x264>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	3301      	adds	r3, #1
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	4b91      	ldr	r3, [pc, #580]	; (800ae3c <tcp_slowtmr+0x264>)
 800abf8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800abfe:	4b90      	ldr	r3, [pc, #576]	; (800ae40 <tcp_slowtmr+0x268>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ac04:	e29f      	b.n	800b146 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	7d1b      	ldrb	r3, [r3, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d106      	bne.n	800ac1c <tcp_slowtmr+0x44>
 800ac0e:	4b8d      	ldr	r3, [pc, #564]	; (800ae44 <tcp_slowtmr+0x26c>)
 800ac10:	f240 42be 	movw	r2, #1214	; 0x4be
 800ac14:	498c      	ldr	r1, [pc, #560]	; (800ae48 <tcp_slowtmr+0x270>)
 800ac16:	488d      	ldr	r0, [pc, #564]	; (800ae4c <tcp_slowtmr+0x274>)
 800ac18:	f008 f92a 	bl	8012e70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	7d1b      	ldrb	r3, [r3, #20]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d106      	bne.n	800ac32 <tcp_slowtmr+0x5a>
 800ac24:	4b87      	ldr	r3, [pc, #540]	; (800ae44 <tcp_slowtmr+0x26c>)
 800ac26:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ac2a:	4989      	ldr	r1, [pc, #548]	; (800ae50 <tcp_slowtmr+0x278>)
 800ac2c:	4887      	ldr	r0, [pc, #540]	; (800ae4c <tcp_slowtmr+0x274>)
 800ac2e:	f008 f91f 	bl	8012e70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ac32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac34:	7d1b      	ldrb	r3, [r3, #20]
 800ac36:	2b0a      	cmp	r3, #10
 800ac38:	d106      	bne.n	800ac48 <tcp_slowtmr+0x70>
 800ac3a:	4b82      	ldr	r3, [pc, #520]	; (800ae44 <tcp_slowtmr+0x26c>)
 800ac3c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ac40:	4984      	ldr	r1, [pc, #528]	; (800ae54 <tcp_slowtmr+0x27c>)
 800ac42:	4882      	ldr	r0, [pc, #520]	; (800ae4c <tcp_slowtmr+0x274>)
 800ac44:	f008 f914 	bl	8012e70 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ac48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4a:	7f9a      	ldrb	r2, [r3, #30]
 800ac4c:	4b7b      	ldr	r3, [pc, #492]	; (800ae3c <tcp_slowtmr+0x264>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d105      	bne.n	800ac60 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ac5e:	e272      	b.n	800b146 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ac60:	4b76      	ldr	r3, [pc, #472]	; (800ae3c <tcp_slowtmr+0x264>)
 800ac62:	781a      	ldrb	r2, [r3, #0]
 800ac64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac66:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ac74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac76:	7d1b      	ldrb	r3, [r3, #20]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d10a      	bne.n	800ac92 <tcp_slowtmr+0xba>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac82:	2b05      	cmp	r3, #5
 800ac84:	d905      	bls.n	800ac92 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ac86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac90:	e11e      	b.n	800aed0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac98:	2b0b      	cmp	r3, #11
 800ac9a:	d905      	bls.n	800aca8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ac9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aca0:	3301      	adds	r3, #1
 800aca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aca6:	e113      	b.n	800aed0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d075      	beq.n	800ad9e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d006      	beq.n	800acc8 <tcp_slowtmr+0xf0>
 800acba:	4b62      	ldr	r3, [pc, #392]	; (800ae44 <tcp_slowtmr+0x26c>)
 800acbc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800acc0:	4965      	ldr	r1, [pc, #404]	; (800ae58 <tcp_slowtmr+0x280>)
 800acc2:	4862      	ldr	r0, [pc, #392]	; (800ae4c <tcp_slowtmr+0x274>)
 800acc4:	f008 f8d4 	bl	8012e70 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <tcp_slowtmr+0x106>
 800acd0:	4b5c      	ldr	r3, [pc, #368]	; (800ae44 <tcp_slowtmr+0x26c>)
 800acd2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800acd6:	4961      	ldr	r1, [pc, #388]	; (800ae5c <tcp_slowtmr+0x284>)
 800acd8:	485c      	ldr	r0, [pc, #368]	; (800ae4c <tcp_slowtmr+0x274>)
 800acda:	f008 f8c9 	bl	8012e70 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800acde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ace4:	2b0b      	cmp	r3, #11
 800ace6:	d905      	bls.n	800acf4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ace8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acec:	3301      	adds	r3, #1
 800acee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acf2:	e0ed      	b.n	800aed0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800acfa:	3b01      	subs	r3, #1
 800acfc:	4a58      	ldr	r2, [pc, #352]	; (800ae60 <tcp_slowtmr+0x288>)
 800acfe:	5cd3      	ldrb	r3, [r2, r3]
 800ad00:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ad08:	7c7a      	ldrb	r2, [r7, #17]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d907      	bls.n	800ad1e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ad14:	3301      	adds	r3, #1
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ad24:	7c7a      	ldrb	r2, [r7, #17]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	f200 80d2 	bhi.w	800aed0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d108      	bne.n	800ad4c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ad3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad3c:	f005 f96a 	bl	8010014 <tcp_zero_window_probe>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d014      	beq.n	800ad70 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ad46:	2300      	movs	r3, #0
 800ad48:	623b      	str	r3, [r7, #32]
 800ad4a:	e011      	b.n	800ad70 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad52:	4619      	mov	r1, r3
 800ad54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad56:	f004 f82f 	bl	800edb8 <tcp_split_unsent_seg>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d107      	bne.n	800ad70 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ad60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad62:	f004 faaf 	bl	800f2c4 <tcp_output>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ad70:	6a3b      	ldr	r3, [r7, #32]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 80ac 	beq.w	800aed0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ad80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	f200 80a2 	bhi.w	800aed0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad92:	3301      	adds	r3, #1
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ad9c:	e098      	b.n	800aed0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	db0f      	blt.n	800adc8 <tcp_slowtmr+0x1f0>
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800adae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d008      	beq.n	800adc8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	3301      	adds	r3, #1
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	b21a      	sxth	r2, r3
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800adc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800adce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800add4:	429a      	cmp	r2, r3
 800add6:	db7b      	blt.n	800aed0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800add8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adda:	f004 fd65 	bl	800f8a8 <tcp_rexmit_rto_prepare>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d007      	beq.n	800adf4 <tcp_slowtmr+0x21c>
 800ade4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d171      	bne.n	800aed0 <tcp_slowtmr+0x2f8>
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d06d      	beq.n	800aed0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	7d1b      	ldrb	r3, [r3, #20]
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d03a      	beq.n	800ae72 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ae02:	2b0c      	cmp	r3, #12
 800ae04:	bf28      	it	cs
 800ae06:	230c      	movcs	r3, #12
 800ae08:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ae10:	10db      	asrs	r3, r3, #3
 800ae12:	b21b      	sxth	r3, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ae1c:	4413      	add	r3, r2
 800ae1e:	7efa      	ldrb	r2, [r7, #27]
 800ae20:	4910      	ldr	r1, [pc, #64]	; (800ae64 <tcp_slowtmr+0x28c>)
 800ae22:	5c8a      	ldrb	r2, [r1, r2]
 800ae24:	4093      	lsls	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	dc1a      	bgt.n	800ae68 <tcp_slowtmr+0x290>
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	b21a      	sxth	r2, r3
 800ae36:	e019      	b.n	800ae6c <tcp_slowtmr+0x294>
 800ae38:	200075c0 	.word	0x200075c0
 800ae3c:	2000054a 	.word	0x2000054a
 800ae40:	200075bc 	.word	0x200075bc
 800ae44:	08015c4c 	.word	0x08015c4c
 800ae48:	08015f90 	.word	0x08015f90
 800ae4c:	08015c90 	.word	0x08015c90
 800ae50:	08015fbc 	.word	0x08015fbc
 800ae54:	08015fe8 	.word	0x08015fe8
 800ae58:	08016018 	.word	0x08016018
 800ae5c:	0801604c 	.word	0x0801604c
 800ae60:	0801aad0 	.word	0x0801aad0
 800ae64:	0801aac0 	.word	0x0801aac0
 800ae68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	2200      	movs	r2, #0
 800ae76:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ae84:	4293      	cmp	r3, r2
 800ae86:	bf28      	it	cs
 800ae88:	4613      	movcs	r3, r2
 800ae8a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ae8c:	8a7b      	ldrh	r3, [r7, #18]
 800ae8e:	085b      	lsrs	r3, r3, #1
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ae9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aea2:	005b      	lsls	r3, r3, #1
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d206      	bcs.n	800aeb8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800aec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800aeca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aecc:	f004 fd5c 	bl	800f988 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	7d1b      	ldrb	r3, [r3, #20]
 800aed4:	2b06      	cmp	r3, #6
 800aed6:	d111      	bne.n	800aefc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	8b5b      	ldrh	r3, [r3, #26]
 800aedc:	f003 0310 	and.w	r3, r3, #16
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d00b      	beq.n	800aefc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aee4:	4b9d      	ldr	r3, [pc, #628]	; (800b15c <tcp_slowtmr+0x584>)
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	2b28      	cmp	r3, #40	; 0x28
 800aef0:	d904      	bls.n	800aefc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800aef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef6:	3301      	adds	r3, #1
 800aef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	7a5b      	ldrb	r3, [r3, #9]
 800af00:	f003 0308 	and.w	r3, r3, #8
 800af04:	2b00      	cmp	r3, #0
 800af06:	d04c      	beq.n	800afa2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800af08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af0a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d003      	beq.n	800af18 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800af14:	2b07      	cmp	r3, #7
 800af16:	d144      	bne.n	800afa2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af18:	4b90      	ldr	r3, [pc, #576]	; (800b15c <tcp_slowtmr+0x584>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1e:	6a1b      	ldr	r3, [r3, #32]
 800af20:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800af28:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800af2c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800af30:	498b      	ldr	r1, [pc, #556]	; (800b160 <tcp_slowtmr+0x588>)
 800af32:	fba1 1303 	umull	r1, r3, r1, r3
 800af36:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af38:	429a      	cmp	r2, r3
 800af3a:	d90a      	bls.n	800af52 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800af3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af40:	3301      	adds	r3, #1
 800af42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800af46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af4a:	3301      	adds	r3, #1
 800af4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800af50:	e027      	b.n	800afa2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af52:	4b82      	ldr	r3, [pc, #520]	; (800b15c <tcp_slowtmr+0x584>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800af5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800af62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af64:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800af68:	4618      	mov	r0, r3
 800af6a:	4b7e      	ldr	r3, [pc, #504]	; (800b164 <tcp_slowtmr+0x58c>)
 800af6c:	fb03 f300 	mul.w	r3, r3, r0
 800af70:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800af72:	497b      	ldr	r1, [pc, #492]	; (800b160 <tcp_slowtmr+0x588>)
 800af74:	fba1 1303 	umull	r1, r3, r1, r3
 800af78:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d911      	bls.n	800afa2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800af7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af80:	f005 f808 	bl	800ff94 <tcp_keepalive>
 800af84:	4603      	mov	r3, r0
 800af86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800af8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d107      	bne.n	800afa2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800af92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af94:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800af98:	3301      	adds	r3, #1
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d011      	beq.n	800afce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800afaa:	4b6c      	ldr	r3, [pc, #432]	; (800b15c <tcp_slowtmr+0x584>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	1ad2      	subs	r2, r2, r3
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800afba:	4619      	mov	r1, r3
 800afbc:	460b      	mov	r3, r1
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	440b      	add	r3, r1
 800afc2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d302      	bcc.n	800afce <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800afc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afca:	f000 fec7 	bl	800bd5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800afce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd0:	7d1b      	ldrb	r3, [r3, #20]
 800afd2:	2b03      	cmp	r3, #3
 800afd4:	d10b      	bne.n	800afee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800afd6:	4b61      	ldr	r3, [pc, #388]	; (800b15c <tcp_slowtmr+0x584>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	2b28      	cmp	r3, #40	; 0x28
 800afe2:	d904      	bls.n	800afee <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800afe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800afe8:	3301      	adds	r3, #1
 800afea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	7d1b      	ldrb	r3, [r3, #20]
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	d10b      	bne.n	800b00e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aff6:	4b59      	ldr	r3, [pc, #356]	; (800b15c <tcp_slowtmr+0x584>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	2bf0      	cmp	r3, #240	; 0xf0
 800b002:	d904      	bls.n	800b00e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800b004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b008:	3301      	adds	r3, #1
 800b00a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b012:	2b00      	cmp	r3, #0
 800b014:	d060      	beq.n	800b0d8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b01c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b01e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b020:	f000 fce8 	bl	800b9f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b02a:	4b4f      	ldr	r3, [pc, #316]	; (800b168 <tcp_slowtmr+0x590>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b030:	429a      	cmp	r2, r3
 800b032:	d106      	bne.n	800b042 <tcp_slowtmr+0x46a>
 800b034:	4b4d      	ldr	r3, [pc, #308]	; (800b16c <tcp_slowtmr+0x594>)
 800b036:	f240 526d 	movw	r2, #1389	; 0x56d
 800b03a:	494d      	ldr	r1, [pc, #308]	; (800b170 <tcp_slowtmr+0x598>)
 800b03c:	484d      	ldr	r0, [pc, #308]	; (800b174 <tcp_slowtmr+0x59c>)
 800b03e:	f007 ff17 	bl	8012e70 <iprintf>
        prev->next = pcb->next;
 800b042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b044:	68da      	ldr	r2, [r3, #12]
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	60da      	str	r2, [r3, #12]
 800b04a:	e00f      	b.n	800b06c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b04c:	4b46      	ldr	r3, [pc, #280]	; (800b168 <tcp_slowtmr+0x590>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b052:	429a      	cmp	r2, r3
 800b054:	d006      	beq.n	800b064 <tcp_slowtmr+0x48c>
 800b056:	4b45      	ldr	r3, [pc, #276]	; (800b16c <tcp_slowtmr+0x594>)
 800b058:	f240 5271 	movw	r2, #1393	; 0x571
 800b05c:	4946      	ldr	r1, [pc, #280]	; (800b178 <tcp_slowtmr+0x5a0>)
 800b05e:	4845      	ldr	r0, [pc, #276]	; (800b174 <tcp_slowtmr+0x59c>)
 800b060:	f007 ff06 	bl	8012e70 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	4a3f      	ldr	r2, [pc, #252]	; (800b168 <tcp_slowtmr+0x590>)
 800b06a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b06c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b070:	2b00      	cmp	r3, #0
 800b072:	d013      	beq.n	800b09c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b076:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b07c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	3304      	adds	r3, #4
 800b082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b084:	8ad2      	ldrh	r2, [r2, #22]
 800b086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b088:	8b09      	ldrh	r1, [r1, #24]
 800b08a:	9102      	str	r1, [sp, #8]
 800b08c:	9201      	str	r2, [sp, #4]
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	462b      	mov	r3, r5
 800b092:	4622      	mov	r2, r4
 800b094:	4601      	mov	r1, r0
 800b096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b098:	f004 fec8 	bl	800fe2c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a4:	7d1b      	ldrb	r3, [r3, #20]
 800b0a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b0b2:	6838      	ldr	r0, [r7, #0]
 800b0b4:	f7fe ff20 	bl	8009ef8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800b0b8:	4b30      	ldr	r3, [pc, #192]	; (800b17c <tcp_slowtmr+0x5a4>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <tcp_slowtmr+0x4f6>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f06f 010c 	mvn.w	r1, #12
 800b0ca:	68b8      	ldr	r0, [r7, #8]
 800b0cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b0ce:	4b2b      	ldr	r3, [pc, #172]	; (800b17c <tcp_slowtmr+0x5a4>)
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d037      	beq.n	800b146 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800b0d6:	e590      	b.n	800abfa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	7f1b      	ldrb	r3, [r3, #28]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	7f1a      	ldrb	r2, [r3, #28]
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	7f5b      	ldrb	r3, [r3, #29]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d325      	bcc.n	800b146 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b100:	4b1e      	ldr	r3, [pc, #120]	; (800b17c <tcp_slowtmr+0x5a4>)
 800b102:	2200      	movs	r2, #0
 800b104:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00b      	beq.n	800b128 <tcp_slowtmr+0x550>
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b118:	6912      	ldr	r2, [r2, #16]
 800b11a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b11c:	4610      	mov	r0, r2
 800b11e:	4798      	blx	r3
 800b120:	4603      	mov	r3, r0
 800b122:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b126:	e002      	b.n	800b12e <tcp_slowtmr+0x556>
 800b128:	2300      	movs	r3, #0
 800b12a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800b12e:	4b13      	ldr	r3, [pc, #76]	; (800b17c <tcp_slowtmr+0x5a4>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d000      	beq.n	800b138 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800b136:	e560      	b.n	800abfa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b138:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800b140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b142:	f004 f8bf 	bl	800f2c4 <tcp_output>
  while (pcb != NULL) {
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f47f ad5c 	bne.w	800ac06 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b14e:	2300      	movs	r3, #0
 800b150:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800b152:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <tcp_slowtmr+0x5a8>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b158:	e067      	b.n	800b22a <tcp_slowtmr+0x652>
 800b15a:	bf00      	nop
 800b15c:	200075c0 	.word	0x200075c0
 800b160:	10624dd3 	.word	0x10624dd3
 800b164:	000124f8 	.word	0x000124f8
 800b168:	200075bc 	.word	0x200075bc
 800b16c:	08015c4c 	.word	0x08015c4c
 800b170:	08016084 	.word	0x08016084
 800b174:	08015c90 	.word	0x08015c90
 800b178:	080160b0 	.word	0x080160b0
 800b17c:	200075b8 	.word	0x200075b8
 800b180:	200075cc 	.word	0x200075cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	7d1b      	ldrb	r3, [r3, #20]
 800b188:	2b0a      	cmp	r3, #10
 800b18a:	d006      	beq.n	800b19a <tcp_slowtmr+0x5c2>
 800b18c:	4b2b      	ldr	r3, [pc, #172]	; (800b23c <tcp_slowtmr+0x664>)
 800b18e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b192:	492b      	ldr	r1, [pc, #172]	; (800b240 <tcp_slowtmr+0x668>)
 800b194:	482b      	ldr	r0, [pc, #172]	; (800b244 <tcp_slowtmr+0x66c>)
 800b196:	f007 fe6b 	bl	8012e70 <iprintf>
    pcb_remove = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b1a0:	4b29      	ldr	r3, [pc, #164]	; (800b248 <tcp_slowtmr+0x670>)
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	2bf0      	cmp	r3, #240	; 0xf0
 800b1ac:	d904      	bls.n	800b1b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800b1ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d02f      	beq.n	800b220 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b1c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b1c2:	f000 fc17 	bl	800b9f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b1cc:	4b1f      	ldr	r3, [pc, #124]	; (800b24c <tcp_slowtmr+0x674>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d106      	bne.n	800b1e4 <tcp_slowtmr+0x60c>
 800b1d6:	4b19      	ldr	r3, [pc, #100]	; (800b23c <tcp_slowtmr+0x664>)
 800b1d8:	f240 52af 	movw	r2, #1455	; 0x5af
 800b1dc:	491c      	ldr	r1, [pc, #112]	; (800b250 <tcp_slowtmr+0x678>)
 800b1de:	4819      	ldr	r0, [pc, #100]	; (800b244 <tcp_slowtmr+0x66c>)
 800b1e0:	f007 fe46 	bl	8012e70 <iprintf>
        prev->next = pcb->next;
 800b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	60da      	str	r2, [r3, #12]
 800b1ec:	e00f      	b.n	800b20e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b1ee:	4b17      	ldr	r3, [pc, #92]	; (800b24c <tcp_slowtmr+0x674>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d006      	beq.n	800b206 <tcp_slowtmr+0x62e>
 800b1f8:	4b10      	ldr	r3, [pc, #64]	; (800b23c <tcp_slowtmr+0x664>)
 800b1fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b1fe:	4915      	ldr	r1, [pc, #84]	; (800b254 <tcp_slowtmr+0x67c>)
 800b200:	4810      	ldr	r0, [pc, #64]	; (800b244 <tcp_slowtmr+0x66c>)
 800b202:	f007 fe35 	bl	8012e70 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	4a10      	ldr	r2, [pc, #64]	; (800b24c <tcp_slowtmr+0x674>)
 800b20c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b214:	68db      	ldr	r3, [r3, #12]
 800b216:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800b218:	69f8      	ldr	r0, [r7, #28]
 800b21a:	f7fe fe6d 	bl	8009ef8 <tcp_free>
 800b21e:	e004      	b.n	800b22a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b222:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d1a9      	bne.n	800b184 <tcp_slowtmr+0x5ac>
    }
  }
}
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	3730      	adds	r7, #48	; 0x30
 800b236:	46bd      	mov	sp, r7
 800b238:	bdb0      	pop	{r4, r5, r7, pc}
 800b23a:	bf00      	nop
 800b23c:	08015c4c 	.word	0x08015c4c
 800b240:	080160dc 	.word	0x080160dc
 800b244:	08015c90 	.word	0x08015c90
 800b248:	200075c0 	.word	0x200075c0
 800b24c:	200075cc 	.word	0x200075cc
 800b250:	0801610c 	.word	0x0801610c
 800b254:	08016134 	.word	0x08016134

0800b258 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b25e:	4b2d      	ldr	r3, [pc, #180]	; (800b314 <tcp_fasttmr+0xbc>)
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	3301      	adds	r3, #1
 800b264:	b2da      	uxtb	r2, r3
 800b266:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <tcp_fasttmr+0xbc>)
 800b268:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b26a:	4b2b      	ldr	r3, [pc, #172]	; (800b318 <tcp_fasttmr+0xc0>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b270:	e048      	b.n	800b304 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7f9a      	ldrb	r2, [r3, #30]
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <tcp_fasttmr+0xbc>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d03f      	beq.n	800b2fe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b27e:	4b25      	ldr	r3, [pc, #148]	; (800b314 <tcp_fasttmr+0xbc>)
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8b5b      	ldrh	r3, [r3, #26]
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d010      	beq.n	800b2b4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	8b5b      	ldrh	r3, [r3, #26]
 800b296:	f043 0302 	orr.w	r3, r3, #2
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f004 f80f 	bl	800f2c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	8b5b      	ldrh	r3, [r3, #26]
 800b2aa:	f023 0303 	bic.w	r3, r3, #3
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	8b5b      	ldrh	r3, [r3, #26]
 800b2b8:	f003 0308 	and.w	r3, r3, #8
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d009      	beq.n	800b2d4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	8b5b      	ldrh	r3, [r3, #26]
 800b2c4:	f023 0308 	bic.w	r3, r3, #8
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7fe ffa6 	bl	800a220 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00a      	beq.n	800b2f8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b2e2:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <tcp_fasttmr+0xc4>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f819 	bl	800b320 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b2ee:	4b0b      	ldr	r3, [pc, #44]	; (800b31c <tcp_fasttmr+0xc4>)
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d000      	beq.n	800b2f8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b2f6:	e7b8      	b.n	800b26a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	607b      	str	r3, [r7, #4]
 800b2fc:	e002      	b.n	800b304 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1b3      	bne.n	800b272 <tcp_fasttmr+0x1a>
    }
  }
}
 800b30a:	bf00      	nop
 800b30c:	bf00      	nop
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	2000054a 	.word	0x2000054a
 800b318:	200075bc 	.word	0x200075bc
 800b31c:	200075b8 	.word	0x200075b8

0800b320 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b320:	b590      	push	{r4, r7, lr}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d109      	bne.n	800b342 <tcp_process_refused_data+0x22>
 800b32e:	4b37      	ldr	r3, [pc, #220]	; (800b40c <tcp_process_refused_data+0xec>)
 800b330:	f240 6209 	movw	r2, #1545	; 0x609
 800b334:	4936      	ldr	r1, [pc, #216]	; (800b410 <tcp_process_refused_data+0xf0>)
 800b336:	4837      	ldr	r0, [pc, #220]	; (800b414 <tcp_process_refused_data+0xf4>)
 800b338:	f007 fd9a 	bl	8012e70 <iprintf>
 800b33c:	f06f 030f 	mvn.w	r3, #15
 800b340:	e060      	b.n	800b404 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b346:	7b5b      	ldrb	r3, [r3, #13]
 800b348:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b34e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <tcp_process_refused_data+0x58>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6918      	ldr	r0, [r3, #16]
 800b36a:	2300      	movs	r3, #0
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	47a0      	blx	r4
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]
 800b376:	e007      	b.n	800b388 <tcp_process_refused_data+0x68>
 800b378:	2300      	movs	r3, #0
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	2000      	movs	r0, #0
 800b380:	f000 f8c2 	bl	800b508 <tcp_recv_null>
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d12a      	bne.n	800b3e6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	f003 0320 	and.w	r3, r3, #32
 800b396:	2b00      	cmp	r3, #0
 800b398:	d033      	beq.n	800b402 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b39e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b3a2:	d005      	beq.n	800b3b0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00b      	beq.n	800b3d2 <tcp_process_refused_data+0xb2>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6918      	ldr	r0, [r3, #16]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	47a0      	blx	r4
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	73fb      	strb	r3, [r7, #15]
 800b3d0:	e001      	b.n	800b3d6 <tcp_process_refused_data+0xb6>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b3d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3da:	f113 0f0d 	cmn.w	r3, #13
 800b3de:	d110      	bne.n	800b402 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b3e0:	f06f 030c 	mvn.w	r3, #12
 800b3e4:	e00e      	b.n	800b404 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ea:	f113 0f0d 	cmn.w	r3, #13
 800b3ee:	d102      	bne.n	800b3f6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b3f0:	f06f 030c 	mvn.w	r3, #12
 800b3f4:	e006      	b.n	800b404 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b3fc:	f06f 0304 	mvn.w	r3, #4
 800b400:	e000      	b.n	800b404 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b402:	2300      	movs	r3, #0
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd90      	pop	{r4, r7, pc}
 800b40c:	08015c4c 	.word	0x08015c4c
 800b410:	0801615c 	.word	0x0801615c
 800b414:	08015c90 	.word	0x08015c90

0800b418 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b420:	e007      	b.n	800b432 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f80a 	bl	800b442 <tcp_seg_free>
    seg = next;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1f4      	bne.n	800b422 <tcp_segs_free+0xa>
  }
}
 800b438:	bf00      	nop
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}

0800b442 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b082      	sub	sp, #8
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00c      	beq.n	800b46a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d004      	beq.n	800b462 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fa47 	bl	80098f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	2003      	movs	r0, #3
 800b466:	f7fd fc31 	bl	8008ccc <memp_free>
  }
}
 800b46a:	bf00      	nop
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <tcp_setprio+0x22>
 800b486:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <tcp_setprio+0x30>)
 800b488:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800b48c:	4906      	ldr	r1, [pc, #24]	; (800b4a8 <tcp_setprio+0x34>)
 800b48e:	4807      	ldr	r0, [pc, #28]	; (800b4ac <tcp_setprio+0x38>)
 800b490:	f007 fcee 	bl	8012e70 <iprintf>
 800b494:	e002      	b.n	800b49c <tcp_setprio+0x28>

  pcb->prio = prio;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	755a      	strb	r2, [r3, #21]
}
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	08015c4c 	.word	0x08015c4c
 800b4a8:	08016184 	.word	0x08016184
 800b4ac:	08015c90 	.word	0x08015c90

0800b4b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b084      	sub	sp, #16
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <tcp_seg_copy+0x1c>
 800b4be:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <tcp_seg_copy+0x4c>)
 800b4c0:	f240 6282 	movw	r2, #1666	; 0x682
 800b4c4:	490e      	ldr	r1, [pc, #56]	; (800b500 <tcp_seg_copy+0x50>)
 800b4c6:	480f      	ldr	r0, [pc, #60]	; (800b504 <tcp_seg_copy+0x54>)
 800b4c8:	f007 fcd2 	bl	8012e70 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b4cc:	2003      	movs	r0, #3
 800b4ce:	f7fd fbb1 	bl	8008c34 <memp_malloc>
 800b4d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <tcp_seg_copy+0x2e>
    return NULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e00a      	b.n	800b4f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b4de:	2210      	movs	r2, #16
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f007 fc94 	bl	8012e10 <memcpy>
  pbuf_ref(cseg->p);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe fa9f 	bl	8009a30 <pbuf_ref>
  return cseg;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	08015c4c 	.word	0x08015c4c
 800b500:	080161a0 	.word	0x080161a0
 800b504:	08015c90 	.word	0x08015c90

0800b508 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <tcp_recv_null+0x28>
 800b51c:	4b12      	ldr	r3, [pc, #72]	; (800b568 <tcp_recv_null+0x60>)
 800b51e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b522:	4912      	ldr	r1, [pc, #72]	; (800b56c <tcp_recv_null+0x64>)
 800b524:	4812      	ldr	r0, [pc, #72]	; (800b570 <tcp_recv_null+0x68>)
 800b526:	f007 fca3 	bl	8012e70 <iprintf>
 800b52a:	f06f 030f 	mvn.w	r3, #15
 800b52e:	e016      	b.n	800b55e <tcp_recv_null+0x56>

  if (p != NULL) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d009      	beq.n	800b54a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	891b      	ldrh	r3, [r3, #8]
 800b53a:	4619      	mov	r1, r3
 800b53c:	68b8      	ldr	r0, [r7, #8]
 800b53e:	f7ff f99d 	bl	800a87c <tcp_recved>
    pbuf_free(p);
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f7fe f9d4 	bl	80098f0 <pbuf_free>
 800b548:	e008      	b.n	800b55c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b54a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d104      	bne.n	800b55c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b552:	68b8      	ldr	r0, [r7, #8]
 800b554:	f7fe fece 	bl	800a2f4 <tcp_close>
 800b558:	4603      	mov	r3, r0
 800b55a:	e000      	b.n	800b55e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	08015c4c 	.word	0x08015c4c
 800b56c:	080161bc 	.word	0x080161bc
 800b570:	08015c90 	.word	0x08015c90

0800b574 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b57e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b582:	2b00      	cmp	r3, #0
 800b584:	db01      	blt.n	800b58a <tcp_kill_prio+0x16>
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	e000      	b.n	800b58c <tcp_kill_prio+0x18>
 800b58a:	237f      	movs	r3, #127	; 0x7f
 800b58c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d034      	beq.n	800b5fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	3b01      	subs	r3, #1
 800b598:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5a2:	4b19      	ldr	r3, [pc, #100]	; (800b608 <tcp_kill_prio+0x94>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	e01f      	b.n	800b5ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	7d5b      	ldrb	r3, [r3, #21]
 800b5ae:	7afa      	ldrb	r2, [r7, #11]
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d80c      	bhi.n	800b5ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b5b8:	7afa      	ldrb	r2, [r7, #11]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d112      	bne.n	800b5e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <tcp_kill_prio+0x98>)
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d80a      	bhi.n	800b5e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <tcp_kill_prio+0x98>)
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	7d5b      	ldrb	r3, [r3, #21]
 800b5e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1dc      	bne.n	800b5aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d004      	beq.n	800b600 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b5f6:	6938      	ldr	r0, [r7, #16]
 800b5f8:	f7fe ff66 	bl	800a4c8 <tcp_abort>
 800b5fc:	e000      	b.n	800b600 <tcp_kill_prio+0x8c>
    return;
 800b5fe:	bf00      	nop
  }
}
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	200075bc 	.word	0x200075bc
 800b60c:	200075c0 	.word	0x200075c0

0800b610 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b61a:	79fb      	ldrb	r3, [r7, #7]
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	d009      	beq.n	800b634 <tcp_kill_state+0x24>
 800b620:	79fb      	ldrb	r3, [r7, #7]
 800b622:	2b09      	cmp	r3, #9
 800b624:	d006      	beq.n	800b634 <tcp_kill_state+0x24>
 800b626:	4b1a      	ldr	r3, [pc, #104]	; (800b690 <tcp_kill_state+0x80>)
 800b628:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b62c:	4919      	ldr	r1, [pc, #100]	; (800b694 <tcp_kill_state+0x84>)
 800b62e:	481a      	ldr	r0, [pc, #104]	; (800b698 <tcp_kill_state+0x88>)
 800b630:	f007 fc1e 	bl	8012e70 <iprintf>

  inactivity = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b638:	2300      	movs	r3, #0
 800b63a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b63c:	4b17      	ldr	r3, [pc, #92]	; (800b69c <tcp_kill_state+0x8c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	e017      	b.n	800b674 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	7d1b      	ldrb	r3, [r3, #20]
 800b648:	79fa      	ldrb	r2, [r7, #7]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d10f      	bne.n	800b66e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b64e:	4b14      	ldr	r3, [pc, #80]	; (800b6a0 <tcp_kill_state+0x90>)
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d807      	bhi.n	800b66e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b65e:	4b10      	ldr	r3, [pc, #64]	; (800b6a0 <tcp_kill_state+0x90>)
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1e4      	bne.n	800b644 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b680:	2100      	movs	r1, #0
 800b682:	6938      	ldr	r0, [r7, #16]
 800b684:	f7fe fe62 	bl	800a34c <tcp_abandon>
  }
}
 800b688:	bf00      	nop
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	08015c4c 	.word	0x08015c4c
 800b694:	080161d8 	.word	0x080161d8
 800b698:	08015c90 	.word	0x08015c90
 800b69c:	200075bc 	.word	0x200075bc
 800b6a0:	200075c0 	.word	0x200075c0

0800b6a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6b2:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <tcp_kill_timewait+0x58>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e012      	b.n	800b6e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b6ba:	4b11      	ldr	r3, [pc, #68]	; (800b700 <tcp_kill_timewait+0x5c>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d807      	bhi.n	800b6da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b6ca:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <tcp_kill_timewait+0x5c>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	1ad3      	subs	r3, r2, r3
 800b6d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	60fb      	str	r3, [r7, #12]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1e9      	bne.n	800b6ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b6ec:	68b8      	ldr	r0, [r7, #8]
 800b6ee:	f7fe feeb 	bl	800a4c8 <tcp_abort>
  }
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	200075cc 	.word	0x200075cc
 800b700:	200075c0 	.word	0x200075c0

0800b704 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b70a:	4b10      	ldr	r3, [pc, #64]	; (800b74c <tcp_handle_closepend+0x48>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b710:	e014      	b.n	800b73c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	8b5b      	ldrh	r3, [r3, #26]
 800b71c:	f003 0308 	and.w	r3, r3, #8
 800b720:	2b00      	cmp	r3, #0
 800b722:	d009      	beq.n	800b738 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	8b5b      	ldrh	r3, [r3, #26]
 800b728:	f023 0308 	bic.w	r3, r3, #8
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7fe fd74 	bl	800a220 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e7      	bne.n	800b712 <tcp_handle_closepend+0xe>
  }
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	200075bc 	.word	0x200075bc

0800b750 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b75a:	2001      	movs	r0, #1
 800b75c:	f7fd fa6a 	bl	8008c34 <memp_malloc>
 800b760:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d126      	bne.n	800b7b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b768:	f7ff ffcc 	bl	800b704 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b76c:	f7ff ff9a 	bl	800b6a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b770:	2001      	movs	r0, #1
 800b772:	f7fd fa5f 	bl	8008c34 <memp_malloc>
 800b776:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d11b      	bne.n	800b7b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b77e:	2009      	movs	r0, #9
 800b780:	f7ff ff46 	bl	800b610 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b784:	2001      	movs	r0, #1
 800b786:	f7fd fa55 	bl	8008c34 <memp_malloc>
 800b78a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d111      	bne.n	800b7b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b792:	2008      	movs	r0, #8
 800b794:	f7ff ff3c 	bl	800b610 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b798:	2001      	movs	r0, #1
 800b79a:	f7fd fa4b 	bl	8008c34 <memp_malloc>
 800b79e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d107      	bne.n	800b7b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff fee3 	bl	800b574 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f7fd fa40 	bl	8008c34 <memp_malloc>
 800b7b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d03f      	beq.n	800b83c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b7bc:	229c      	movs	r2, #156	; 0x9c
 800b7be:	2100      	movs	r1, #0
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f007 fb4d 	bl	8012e60 <memset>
    pcb->prio = prio;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	79fa      	ldrb	r2, [r7, #7]
 800b7ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b7d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	22ff      	movs	r2, #255	; 0xff
 800b7ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b7f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2206      	movs	r2, #6
 800b7f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2206      	movs	r2, #6
 800b800:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b808:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b812:	4b0d      	ldr	r3, [pc, #52]	; (800b848 <tcp_alloc+0xf8>)
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b81a:	4b0c      	ldr	r3, [pc, #48]	; (800b84c <tcp_alloc+0xfc>)
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b828:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4a08      	ldr	r2, [pc, #32]	; (800b850 <tcp_alloc+0x100>)
 800b830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4a07      	ldr	r2, [pc, #28]	; (800b854 <tcp_alloc+0x104>)
 800b838:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b83c:	68fb      	ldr	r3, [r7, #12]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	200075c0 	.word	0x200075c0
 800b84c:	2000054a 	.word	0x2000054a
 800b850:	0800b509 	.word	0x0800b509
 800b854:	006ddd00 	.word	0x006ddd00

0800b858 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b862:	2040      	movs	r0, #64	; 0x40
 800b864:	f7ff ff74 	bl	800b750 <tcp_alloc>
 800b868:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800b86a:	68fb      	ldr	r3, [r7, #12]
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	611a      	str	r2, [r3, #16]
  }
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00e      	beq.n	800b8c6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	7d1b      	ldrb	r3, [r3, #20]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d106      	bne.n	800b8be <tcp_recv+0x26>
 800b8b0:	4b07      	ldr	r3, [pc, #28]	; (800b8d0 <tcp_recv+0x38>)
 800b8b2:	f240 72df 	movw	r2, #2015	; 0x7df
 800b8b6:	4907      	ldr	r1, [pc, #28]	; (800b8d4 <tcp_recv+0x3c>)
 800b8b8:	4807      	ldr	r0, [pc, #28]	; (800b8d8 <tcp_recv+0x40>)
 800b8ba:	f007 fad9 	bl	8012e70 <iprintf>
    pcb->recv = recv;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b8c6:	bf00      	nop
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08015c4c 	.word	0x08015c4c
 800b8d4:	080161e8 	.word	0x080161e8
 800b8d8:	08015c90 	.word	0x08015c90

0800b8dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00e      	beq.n	800b90a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	7d1b      	ldrb	r3, [r3, #20]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d106      	bne.n	800b902 <tcp_sent+0x26>
 800b8f4:	4b07      	ldr	r3, [pc, #28]	; (800b914 <tcp_sent+0x38>)
 800b8f6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b8fa:	4907      	ldr	r1, [pc, #28]	; (800b918 <tcp_sent+0x3c>)
 800b8fc:	4807      	ldr	r0, [pc, #28]	; (800b91c <tcp_sent+0x40>)
 800b8fe:	f007 fab7 	bl	8012e70 <iprintf>
    pcb->sent = sent;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	08015c4c 	.word	0x08015c4c
 800b918:	08016210 	.word	0x08016210
 800b91c:	08015c90 	.word	0x08015c90

0800b920 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00e      	beq.n	800b94e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	7d1b      	ldrb	r3, [r3, #20]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d106      	bne.n	800b946 <tcp_err+0x26>
 800b938:	4b07      	ldr	r3, [pc, #28]	; (800b958 <tcp_err+0x38>)
 800b93a:	f640 020d 	movw	r2, #2061	; 0x80d
 800b93e:	4907      	ldr	r1, [pc, #28]	; (800b95c <tcp_err+0x3c>)
 800b940:	4807      	ldr	r0, [pc, #28]	; (800b960 <tcp_err+0x40>)
 800b942:	f007 fa95 	bl	8012e70 <iprintf>
    pcb->errf = err;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	08015c4c 	.word	0x08015c4c
 800b95c:	08016238 	.word	0x08016238
 800b960:	08015c90 	.word	0x08015c90

0800b964 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d008      	beq.n	800b986 <tcp_accept+0x22>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7d1b      	ldrb	r3, [r3, #20]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d104      	bne.n	800b986 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	619a      	str	r2, [r3, #24]
  }
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
	...

0800b994 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	4613      	mov	r3, r2
 800b9a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d107      	bne.n	800b9b8 <tcp_poll+0x24>
 800b9a8:	4b0e      	ldr	r3, [pc, #56]	; (800b9e4 <tcp_poll+0x50>)
 800b9aa:	f640 023d 	movw	r2, #2109	; 0x83d
 800b9ae:	490e      	ldr	r1, [pc, #56]	; (800b9e8 <tcp_poll+0x54>)
 800b9b0:	480e      	ldr	r0, [pc, #56]	; (800b9ec <tcp_poll+0x58>)
 800b9b2:	f007 fa5d 	bl	8012e70 <iprintf>
 800b9b6:	e011      	b.n	800b9dc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	7d1b      	ldrb	r3, [r3, #20]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d106      	bne.n	800b9ce <tcp_poll+0x3a>
 800b9c0:	4b08      	ldr	r3, [pc, #32]	; (800b9e4 <tcp_poll+0x50>)
 800b9c2:	f640 023e 	movw	r2, #2110	; 0x83e
 800b9c6:	490a      	ldr	r1, [pc, #40]	; (800b9f0 <tcp_poll+0x5c>)
 800b9c8:	4808      	ldr	r0, [pc, #32]	; (800b9ec <tcp_poll+0x58>)
 800b9ca:	f007 fa51 	bl	8012e70 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	79fa      	ldrb	r2, [r7, #7]
 800b9da:	775a      	strb	r2, [r3, #29]
}
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	08015c4c 	.word	0x08015c4c
 800b9e8:	08016260 	.word	0x08016260
 800b9ec:	08015c90 	.word	0x08015c90
 800b9f0:	08016278 	.word	0x08016278

0800b9f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d107      	bne.n	800ba12 <tcp_pcb_purge+0x1e>
 800ba02:	4b21      	ldr	r3, [pc, #132]	; (800ba88 <tcp_pcb_purge+0x94>)
 800ba04:	f640 0251 	movw	r2, #2129	; 0x851
 800ba08:	4920      	ldr	r1, [pc, #128]	; (800ba8c <tcp_pcb_purge+0x98>)
 800ba0a:	4821      	ldr	r0, [pc, #132]	; (800ba90 <tcp_pcb_purge+0x9c>)
 800ba0c:	f007 fa30 	bl	8012e70 <iprintf>
 800ba10:	e037      	b.n	800ba82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	7d1b      	ldrb	r3, [r3, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d033      	beq.n	800ba82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ba1e:	2b0a      	cmp	r3, #10
 800ba20:	d02f      	beq.n	800ba82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d02b      	beq.n	800ba82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d007      	beq.n	800ba42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fd ff5a 	bl	80098f0 <pbuf_free>
      pcb->refused_data = NULL;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d002      	beq.n	800ba50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f986 	bl	800bd5c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7ff fcdb 	bl	800b418 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fcd6 	bl	800b418 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	08015c4c 	.word	0x08015c4c
 800ba8c:	08016298 	.word	0x08016298
 800ba90:	08015c90 	.word	0x08015c90

0800ba94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d106      	bne.n	800bab2 <tcp_pcb_remove+0x1e>
 800baa4:	4b3e      	ldr	r3, [pc, #248]	; (800bba0 <tcp_pcb_remove+0x10c>)
 800baa6:	f640 0283 	movw	r2, #2179	; 0x883
 800baaa:	493e      	ldr	r1, [pc, #248]	; (800bba4 <tcp_pcb_remove+0x110>)
 800baac:	483e      	ldr	r0, [pc, #248]	; (800bba8 <tcp_pcb_remove+0x114>)
 800baae:	f007 f9df 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <tcp_pcb_remove+0x32>
 800bab8:	4b39      	ldr	r3, [pc, #228]	; (800bba0 <tcp_pcb_remove+0x10c>)
 800baba:	f640 0284 	movw	r2, #2180	; 0x884
 800babe:	493b      	ldr	r1, [pc, #236]	; (800bbac <tcp_pcb_remove+0x118>)
 800bac0:	4839      	ldr	r0, [pc, #228]	; (800bba8 <tcp_pcb_remove+0x114>)
 800bac2:	f007 f9d5 	bl	8012e70 <iprintf>

  TCP_RMV(pcblist, pcb);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d105      	bne.n	800badc <tcp_pcb_remove+0x48>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68da      	ldr	r2, [r3, #12]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	601a      	str	r2, [r3, #0]
 800bada:	e013      	b.n	800bb04 <tcp_pcb_remove+0x70>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	e00c      	b.n	800bafe <tcp_pcb_remove+0x6a>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	683a      	ldr	r2, [r7, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d104      	bne.n	800baf8 <tcp_pcb_remove+0x64>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	68da      	ldr	r2, [r3, #12]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	60da      	str	r2, [r3, #12]
 800baf6:	e005      	b.n	800bb04 <tcp_pcb_remove+0x70>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	60fb      	str	r3, [r7, #12]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1ef      	bne.n	800bae4 <tcp_pcb_remove+0x50>
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	2200      	movs	r2, #0
 800bb08:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bb0a:	6838      	ldr	r0, [r7, #0]
 800bb0c:	f7ff ff72 	bl	800b9f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	7d1b      	ldrb	r3, [r3, #20]
 800bb14:	2b0a      	cmp	r3, #10
 800bb16:	d013      	beq.n	800bb40 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d00f      	beq.n	800bb40 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	8b5b      	ldrh	r3, [r3, #26]
 800bb24:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	8b5b      	ldrh	r3, [r3, #26]
 800bb30:	f043 0302 	orr.w	r3, r3, #2
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb3a:	6838      	ldr	r0, [r7, #0]
 800bb3c:	f003 fbc2 	bl	800f2c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	7d1b      	ldrb	r3, [r3, #20]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d020      	beq.n	800bb8a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d006      	beq.n	800bb5e <tcp_pcb_remove+0xca>
 800bb50:	4b13      	ldr	r3, [pc, #76]	; (800bba0 <tcp_pcb_remove+0x10c>)
 800bb52:	f640 0293 	movw	r2, #2195	; 0x893
 800bb56:	4916      	ldr	r1, [pc, #88]	; (800bbb0 <tcp_pcb_remove+0x11c>)
 800bb58:	4813      	ldr	r0, [pc, #76]	; (800bba8 <tcp_pcb_remove+0x114>)
 800bb5a:	f007 f989 	bl	8012e70 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d006      	beq.n	800bb74 <tcp_pcb_remove+0xe0>
 800bb66:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <tcp_pcb_remove+0x10c>)
 800bb68:	f640 0294 	movw	r2, #2196	; 0x894
 800bb6c:	4911      	ldr	r1, [pc, #68]	; (800bbb4 <tcp_pcb_remove+0x120>)
 800bb6e:	480e      	ldr	r0, [pc, #56]	; (800bba8 <tcp_pcb_remove+0x114>)
 800bb70:	f007 f97e 	bl	8012e70 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d006      	beq.n	800bb8a <tcp_pcb_remove+0xf6>
 800bb7c:	4b08      	ldr	r3, [pc, #32]	; (800bba0 <tcp_pcb_remove+0x10c>)
 800bb7e:	f640 0296 	movw	r2, #2198	; 0x896
 800bb82:	490d      	ldr	r1, [pc, #52]	; (800bbb8 <tcp_pcb_remove+0x124>)
 800bb84:	4808      	ldr	r0, [pc, #32]	; (800bba8 <tcp_pcb_remove+0x114>)
 800bb86:	f007 f973 	bl	8012e70 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2200      	movs	r2, #0
 800bb94:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	08015c4c 	.word	0x08015c4c
 800bba4:	080162b4 	.word	0x080162b4
 800bba8:	08015c90 	.word	0x08015c90
 800bbac:	080162d0 	.word	0x080162d0
 800bbb0:	080162f0 	.word	0x080162f0
 800bbb4:	08016308 	.word	0x08016308
 800bbb8:	08016324 	.word	0x08016324

0800bbbc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <tcp_next_iss+0x1c>
 800bbca:	4b0a      	ldr	r3, [pc, #40]	; (800bbf4 <tcp_next_iss+0x38>)
 800bbcc:	f640 02af 	movw	r2, #2223	; 0x8af
 800bbd0:	4909      	ldr	r1, [pc, #36]	; (800bbf8 <tcp_next_iss+0x3c>)
 800bbd2:	480a      	ldr	r0, [pc, #40]	; (800bbfc <tcp_next_iss+0x40>)
 800bbd4:	f007 f94c 	bl	8012e70 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bbd8:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <tcp_next_iss+0x44>)
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <tcp_next_iss+0x48>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	4a07      	ldr	r2, [pc, #28]	; (800bc00 <tcp_next_iss+0x44>)
 800bbe4:	6013      	str	r3, [r2, #0]
  return iss;
 800bbe6:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <tcp_next_iss+0x44>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	08015c4c 	.word	0x08015c4c
 800bbf8:	0801633c 	.word	0x0801633c
 800bbfc:	08015c90 	.word	0x08015c90
 800bc00:	20000028 	.word	0x20000028
 800bc04:	200075c0 	.word	0x200075c0

0800bc08 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d106      	bne.n	800bc2a <tcp_eff_send_mss_netif+0x22>
 800bc1c:	4b14      	ldr	r3, [pc, #80]	; (800bc70 <tcp_eff_send_mss_netif+0x68>)
 800bc1e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800bc22:	4914      	ldr	r1, [pc, #80]	; (800bc74 <tcp_eff_send_mss_netif+0x6c>)
 800bc24:	4814      	ldr	r0, [pc, #80]	; (800bc78 <tcp_eff_send_mss_netif+0x70>)
 800bc26:	f007 f923 	bl	8012e70 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800bc30:	89fb      	ldrh	r3, [r7, #14]
 800bc32:	e019      	b.n	800bc68 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bc38:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bc3a:	8afb      	ldrh	r3, [r7, #22]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d012      	beq.n	800bc66 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800bc40:	2328      	movs	r3, #40	; 0x28
 800bc42:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800bc44:	8afa      	ldrh	r2, [r7, #22]
 800bc46:	8abb      	ldrh	r3, [r7, #20]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d904      	bls.n	800bc56 <tcp_eff_send_mss_netif+0x4e>
 800bc4c:	8afa      	ldrh	r2, [r7, #22]
 800bc4e:	8abb      	ldrh	r3, [r7, #20]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	e000      	b.n	800bc58 <tcp_eff_send_mss_netif+0x50>
 800bc56:	2300      	movs	r3, #0
 800bc58:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bc5a:	8a7a      	ldrh	r2, [r7, #18]
 800bc5c:	89fb      	ldrh	r3, [r7, #14]
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	bf28      	it	cs
 800bc62:	4613      	movcs	r3, r2
 800bc64:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800bc66:	89fb      	ldrh	r3, [r7, #14]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3718      	adds	r7, #24
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	08015c4c 	.word	0x08015c4c
 800bc74:	08016358 	.word	0x08016358
 800bc78:	08015c90 	.word	0x08015c90

0800bc7c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d119      	bne.n	800bcc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800bc90:	4b10      	ldr	r3, [pc, #64]	; (800bcd4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800bc92:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bc96:	4910      	ldr	r1, [pc, #64]	; (800bcd8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800bc98:	4810      	ldr	r0, [pc, #64]	; (800bcdc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800bc9a:	f007 f8e9 	bl	8012e70 <iprintf>

  while (pcb != NULL) {
 800bc9e:	e011      	b.n	800bcc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d108      	bne.n	800bcbe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7fe fc08 	bl	800a4c8 <tcp_abort>
      pcb = next;
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	e002      	b.n	800bcc4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1ea      	bne.n	800bca0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800bcca:	bf00      	nop
 800bccc:	bf00      	nop
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	08015c4c 	.word	0x08015c4c
 800bcd8:	08016380 	.word	0x08016380
 800bcdc:	08015c90 	.word	0x08015c90

0800bce0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d02a      	beq.n	800bd46 <tcp_netif_ip_addr_changed+0x66>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d026      	beq.n	800bd46 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bcf8:	4b15      	ldr	r3, [pc, #84]	; (800bd50 <tcp_netif_ip_addr_changed+0x70>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff ffbc 	bl	800bc7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bd04:	4b13      	ldr	r3, [pc, #76]	; (800bd54 <tcp_netif_ip_addr_changed+0x74>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff ffb6 	bl	800bc7c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d017      	beq.n	800bd46 <tcp_netif_ip_addr_changed+0x66>
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d013      	beq.n	800bd46 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd1e:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <tcp_netif_ip_addr_changed+0x78>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	e00c      	b.n	800bd40 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d103      	bne.n	800bd3a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1ef      	bne.n	800bd26 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800bd46:	bf00      	nop
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	200075bc 	.word	0x200075bc
 800bd54:	200075c8 	.word	0x200075c8
 800bd58:	200075c4 	.word	0x200075c4

0800bd5c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fb51 	bl	800b418 <tcp_segs_free>
    pcb->ooseq = NULL;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	3708      	adds	r7, #8
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bd84:	b590      	push	{r4, r7, lr}
 800bd86:	b08d      	sub	sp, #52	; 0x34
 800bd88:	af04      	add	r7, sp, #16
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d105      	bne.n	800bda0 <tcp_input+0x1c>
 800bd94:	4b9b      	ldr	r3, [pc, #620]	; (800c004 <tcp_input+0x280>)
 800bd96:	2283      	movs	r2, #131	; 0x83
 800bd98:	499b      	ldr	r1, [pc, #620]	; (800c008 <tcp_input+0x284>)
 800bd9a:	489c      	ldr	r0, [pc, #624]	; (800c00c <tcp_input+0x288>)
 800bd9c:	f007 f868 	bl	8012e70 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4a9a      	ldr	r2, [pc, #616]	; (800c010 <tcp_input+0x28c>)
 800bda6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	895b      	ldrh	r3, [r3, #10]
 800bdac:	2b13      	cmp	r3, #19
 800bdae:	f240 83c4 	bls.w	800c53a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bdb2:	4b98      	ldr	r3, [pc, #608]	; (800c014 <tcp_input+0x290>)
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	4a97      	ldr	r2, [pc, #604]	; (800c014 <tcp_input+0x290>)
 800bdb8:	6812      	ldr	r2, [r2, #0]
 800bdba:	4611      	mov	r1, r2
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f006 f8a5 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f040 83ba 	bne.w	800c53e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800bdca:	4b92      	ldr	r3, [pc, #584]	; (800c014 <tcp_input+0x290>)
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bdd2:	2be0      	cmp	r3, #224	; 0xe0
 800bdd4:	f000 83b3 	beq.w	800c53e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800bdd8:	4b8d      	ldr	r3, [pc, #564]	; (800c010 <tcp_input+0x28c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	899b      	ldrh	r3, [r3, #12]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fc fa3f 	bl	8008264 <lwip_htons>
 800bde6:	4603      	mov	r3, r0
 800bde8:	0b1b      	lsrs	r3, r3, #12
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bdf2:	7cbb      	ldrb	r3, [r7, #18]
 800bdf4:	2b13      	cmp	r3, #19
 800bdf6:	f240 83a4 	bls.w	800c542 <tcp_input+0x7be>
 800bdfa:	7cbb      	ldrb	r3, [r7, #18]
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	891b      	ldrh	r3, [r3, #8]
 800be02:	429a      	cmp	r2, r3
 800be04:	f200 839d 	bhi.w	800c542 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800be08:	7cbb      	ldrb	r3, [r7, #18]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	3b14      	subs	r3, #20
 800be0e:	b29a      	uxth	r2, r3
 800be10:	4b81      	ldr	r3, [pc, #516]	; (800c018 <tcp_input+0x294>)
 800be12:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800be14:	4b81      	ldr	r3, [pc, #516]	; (800c01c <tcp_input+0x298>)
 800be16:	2200      	movs	r2, #0
 800be18:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	895a      	ldrh	r2, [r3, #10]
 800be1e:	7cbb      	ldrb	r3, [r7, #18]
 800be20:	b29b      	uxth	r3, r3
 800be22:	429a      	cmp	r2, r3
 800be24:	d309      	bcc.n	800be3a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800be26:	4b7c      	ldr	r3, [pc, #496]	; (800c018 <tcp_input+0x294>)
 800be28:	881a      	ldrh	r2, [r3, #0]
 800be2a:	4b7d      	ldr	r3, [pc, #500]	; (800c020 <tcp_input+0x29c>)
 800be2c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800be2e:	7cbb      	ldrb	r3, [r7, #18]
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7fd fcd6 	bl	80097e4 <pbuf_remove_header>
 800be38:	e04e      	b.n	800bed8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d105      	bne.n	800be4e <tcp_input+0xca>
 800be42:	4b70      	ldr	r3, [pc, #448]	; (800c004 <tcp_input+0x280>)
 800be44:	22c2      	movs	r2, #194	; 0xc2
 800be46:	4977      	ldr	r1, [pc, #476]	; (800c024 <tcp_input+0x2a0>)
 800be48:	4870      	ldr	r0, [pc, #448]	; (800c00c <tcp_input+0x288>)
 800be4a:	f007 f811 	bl	8012e70 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800be4e:	2114      	movs	r1, #20
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7fd fcc7 	bl	80097e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	895a      	ldrh	r2, [r3, #10]
 800be5a:	4b71      	ldr	r3, [pc, #452]	; (800c020 <tcp_input+0x29c>)
 800be5c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800be5e:	4b6e      	ldr	r3, [pc, #440]	; (800c018 <tcp_input+0x294>)
 800be60:	881a      	ldrh	r2, [r3, #0]
 800be62:	4b6f      	ldr	r3, [pc, #444]	; (800c020 <tcp_input+0x29c>)
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800be6a:	4b6d      	ldr	r3, [pc, #436]	; (800c020 <tcp_input+0x29c>)
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7fd fcb7 	bl	80097e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	895b      	ldrh	r3, [r3, #10]
 800be7c:	8a3a      	ldrh	r2, [r7, #16]
 800be7e:	429a      	cmp	r2, r3
 800be80:	f200 8361 	bhi.w	800c546 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	4a64      	ldr	r2, [pc, #400]	; (800c01c <tcp_input+0x298>)
 800be8c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	8a3a      	ldrh	r2, [r7, #16]
 800be94:	4611      	mov	r1, r2
 800be96:	4618      	mov	r0, r3
 800be98:	f7fd fca4 	bl	80097e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	891a      	ldrh	r2, [r3, #8]
 800bea0:	8a3b      	ldrh	r3, [r7, #16]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	895b      	ldrh	r3, [r3, #10]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d005      	beq.n	800bebe <tcp_input+0x13a>
 800beb2:	4b54      	ldr	r3, [pc, #336]	; (800c004 <tcp_input+0x280>)
 800beb4:	22df      	movs	r2, #223	; 0xdf
 800beb6:	495c      	ldr	r1, [pc, #368]	; (800c028 <tcp_input+0x2a4>)
 800beb8:	4854      	ldr	r0, [pc, #336]	; (800c00c <tcp_input+0x288>)
 800beba:	f006 ffd9 	bl	8012e70 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	891a      	ldrh	r2, [r3, #8]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	891b      	ldrh	r3, [r3, #8]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d005      	beq.n	800bed8 <tcp_input+0x154>
 800becc:	4b4d      	ldr	r3, [pc, #308]	; (800c004 <tcp_input+0x280>)
 800bece:	22e0      	movs	r2, #224	; 0xe0
 800bed0:	4956      	ldr	r1, [pc, #344]	; (800c02c <tcp_input+0x2a8>)
 800bed2:	484e      	ldr	r0, [pc, #312]	; (800c00c <tcp_input+0x288>)
 800bed4:	f006 ffcc 	bl	8012e70 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bed8:	4b4d      	ldr	r3, [pc, #308]	; (800c010 <tcp_input+0x28c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	b29b      	uxth	r3, r3
 800bee0:	4a4b      	ldr	r2, [pc, #300]	; (800c010 <tcp_input+0x28c>)
 800bee2:	6814      	ldr	r4, [r2, #0]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fc f9bd 	bl	8008264 <lwip_htons>
 800beea:	4603      	mov	r3, r0
 800beec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800beee:	4b48      	ldr	r3, [pc, #288]	; (800c010 <tcp_input+0x28c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	885b      	ldrh	r3, [r3, #2]
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	4a46      	ldr	r2, [pc, #280]	; (800c010 <tcp_input+0x28c>)
 800bef8:	6814      	ldr	r4, [r2, #0]
 800befa:	4618      	mov	r0, r3
 800befc:	f7fc f9b2 	bl	8008264 <lwip_htons>
 800bf00:	4603      	mov	r3, r0
 800bf02:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bf04:	4b42      	ldr	r3, [pc, #264]	; (800c010 <tcp_input+0x28c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	4a41      	ldr	r2, [pc, #260]	; (800c010 <tcp_input+0x28c>)
 800bf0c:	6814      	ldr	r4, [r2, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fc f9bd 	bl	800828e <lwip_htonl>
 800bf14:	4603      	mov	r3, r0
 800bf16:	6063      	str	r3, [r4, #4]
 800bf18:	6863      	ldr	r3, [r4, #4]
 800bf1a:	4a45      	ldr	r2, [pc, #276]	; (800c030 <tcp_input+0x2ac>)
 800bf1c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bf1e:	4b3c      	ldr	r3, [pc, #240]	; (800c010 <tcp_input+0x28c>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	4a3a      	ldr	r2, [pc, #232]	; (800c010 <tcp_input+0x28c>)
 800bf26:	6814      	ldr	r4, [r2, #0]
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fc f9b0 	bl	800828e <lwip_htonl>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	60a3      	str	r3, [r4, #8]
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	4a3f      	ldr	r2, [pc, #252]	; (800c034 <tcp_input+0x2b0>)
 800bf36:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bf38:	4b35      	ldr	r3, [pc, #212]	; (800c010 <tcp_input+0x28c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	89db      	ldrh	r3, [r3, #14]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	4a33      	ldr	r2, [pc, #204]	; (800c010 <tcp_input+0x28c>)
 800bf42:	6814      	ldr	r4, [r2, #0]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7fc f98d 	bl	8008264 <lwip_htons>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bf4e:	4b30      	ldr	r3, [pc, #192]	; (800c010 <tcp_input+0x28c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	899b      	ldrh	r3, [r3, #12]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fc f984 	bl	8008264 <lwip_htons>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	4b34      	ldr	r3, [pc, #208]	; (800c038 <tcp_input+0x2b4>)
 800bf68:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	891a      	ldrh	r2, [r3, #8]
 800bf6e:	4b33      	ldr	r3, [pc, #204]	; (800c03c <tcp_input+0x2b8>)
 800bf70:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bf72:	4b31      	ldr	r3, [pc, #196]	; (800c038 <tcp_input+0x2b4>)
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00c      	beq.n	800bf98 <tcp_input+0x214>
    tcplen++;
 800bf7e:	4b2f      	ldr	r3, [pc, #188]	; (800c03c <tcp_input+0x2b8>)
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	4b2d      	ldr	r3, [pc, #180]	; (800c03c <tcp_input+0x2b8>)
 800bf88:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	891a      	ldrh	r2, [r3, #8]
 800bf8e:	4b2b      	ldr	r3, [pc, #172]	; (800c03c <tcp_input+0x2b8>)
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	f200 82d9 	bhi.w	800c54a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf9c:	4b28      	ldr	r3, [pc, #160]	; (800c040 <tcp_input+0x2bc>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	61fb      	str	r3, [r7, #28]
 800bfa2:	e09d      	b.n	800c0e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	7d1b      	ldrb	r3, [r3, #20]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <tcp_input+0x234>
 800bfac:	4b15      	ldr	r3, [pc, #84]	; (800c004 <tcp_input+0x280>)
 800bfae:	22fb      	movs	r2, #251	; 0xfb
 800bfb0:	4924      	ldr	r1, [pc, #144]	; (800c044 <tcp_input+0x2c0>)
 800bfb2:	4816      	ldr	r0, [pc, #88]	; (800c00c <tcp_input+0x288>)
 800bfb4:	f006 ff5c 	bl	8012e70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	7d1b      	ldrb	r3, [r3, #20]
 800bfbc:	2b0a      	cmp	r3, #10
 800bfbe:	d105      	bne.n	800bfcc <tcp_input+0x248>
 800bfc0:	4b10      	ldr	r3, [pc, #64]	; (800c004 <tcp_input+0x280>)
 800bfc2:	22fc      	movs	r2, #252	; 0xfc
 800bfc4:	4920      	ldr	r1, [pc, #128]	; (800c048 <tcp_input+0x2c4>)
 800bfc6:	4811      	ldr	r0, [pc, #68]	; (800c00c <tcp_input+0x288>)
 800bfc8:	f006 ff52 	bl	8012e70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d105      	bne.n	800bfe0 <tcp_input+0x25c>
 800bfd4:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <tcp_input+0x280>)
 800bfd6:	22fd      	movs	r2, #253	; 0xfd
 800bfd8:	491c      	ldr	r1, [pc, #112]	; (800c04c <tcp_input+0x2c8>)
 800bfda:	480c      	ldr	r0, [pc, #48]	; (800c00c <tcp_input+0x288>)
 800bfdc:	f006 ff48 	bl	8012e70 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	7a1b      	ldrb	r3, [r3, #8]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d033      	beq.n	800c050 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	7a1a      	ldrb	r2, [r3, #8]
 800bfec:	4b09      	ldr	r3, [pc, #36]	; (800c014 <tcp_input+0x290>)
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bff4:	3301      	adds	r3, #1
 800bff6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d029      	beq.n	800c050 <tcp_input+0x2cc>
      prev = pcb;
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	61bb      	str	r3, [r7, #24]
      continue;
 800c000:	e06b      	b.n	800c0da <tcp_input+0x356>
 800c002:	bf00      	nop
 800c004:	080163b4 	.word	0x080163b4
 800c008:	080163e8 	.word	0x080163e8
 800c00c:	08016400 	.word	0x08016400
 800c010:	2000055c 	.word	0x2000055c
 800c014:	20004078 	.word	0x20004078
 800c018:	20000560 	.word	0x20000560
 800c01c:	20000564 	.word	0x20000564
 800c020:	20000562 	.word	0x20000562
 800c024:	08016428 	.word	0x08016428
 800c028:	08016438 	.word	0x08016438
 800c02c:	08016444 	.word	0x08016444
 800c030:	2000056c 	.word	0x2000056c
 800c034:	20000570 	.word	0x20000570
 800c038:	20000578 	.word	0x20000578
 800c03c:	20000576 	.word	0x20000576
 800c040:	200075bc 	.word	0x200075bc
 800c044:	08016464 	.word	0x08016464
 800c048:	0801648c 	.word	0x0801648c
 800c04c:	080164b8 	.word	0x080164b8
    }

    if (pcb->remote_port == tcphdr->src &&
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	8b1a      	ldrh	r2, [r3, #24]
 800c054:	4b94      	ldr	r3, [pc, #592]	; (800c2a8 <tcp_input+0x524>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d13a      	bne.n	800c0d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	8ada      	ldrh	r2, [r3, #22]
 800c064:	4b90      	ldr	r3, [pc, #576]	; (800c2a8 <tcp_input+0x524>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	885b      	ldrh	r3, [r3, #2]
 800c06a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d132      	bne.n	800c0d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b8d      	ldr	r3, [pc, #564]	; (800c2ac <tcp_input+0x528>)
 800c076:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c078:	429a      	cmp	r2, r3
 800c07a:	d12c      	bne.n	800c0d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	4b8a      	ldr	r3, [pc, #552]	; (800c2ac <tcp_input+0x528>)
 800c082:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c084:	429a      	cmp	r2, r3
 800c086:	d126      	bne.n	800c0d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	69fa      	ldr	r2, [r7, #28]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d106      	bne.n	800c0a0 <tcp_input+0x31c>
 800c092:	4b87      	ldr	r3, [pc, #540]	; (800c2b0 <tcp_input+0x52c>)
 800c094:	f240 120d 	movw	r2, #269	; 0x10d
 800c098:	4986      	ldr	r1, [pc, #536]	; (800c2b4 <tcp_input+0x530>)
 800c09a:	4887      	ldr	r0, [pc, #540]	; (800c2b8 <tcp_input+0x534>)
 800c09c:	f006 fee8 	bl	8012e70 <iprintf>
      if (prev != NULL) {
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00a      	beq.n	800c0bc <tcp_input+0x338>
        prev->next = pcb->next;
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	68da      	ldr	r2, [r3, #12]
 800c0aa:	69bb      	ldr	r3, [r7, #24]
 800c0ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c0ae:	4b83      	ldr	r3, [pc, #524]	; (800c2bc <tcp_input+0x538>)
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c0b6:	4a81      	ldr	r2, [pc, #516]	; (800c2bc <tcp_input+0x538>)
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d111      	bne.n	800c0ea <tcp_input+0x366>
 800c0c6:	4b7a      	ldr	r3, [pc, #488]	; (800c2b0 <tcp_input+0x52c>)
 800c0c8:	f240 1215 	movw	r2, #277	; 0x115
 800c0cc:	497c      	ldr	r1, [pc, #496]	; (800c2c0 <tcp_input+0x53c>)
 800c0ce:	487a      	ldr	r0, [pc, #488]	; (800c2b8 <tcp_input+0x534>)
 800c0d0:	f006 fece 	bl	8012e70 <iprintf>
      break;
 800c0d4:	e009      	b.n	800c0ea <tcp_input+0x366>
    }
    prev = pcb;
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	61fb      	str	r3, [r7, #28]
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f47f af5e 	bne.w	800bfa4 <tcp_input+0x220>
 800c0e8:	e000      	b.n	800c0ec <tcp_input+0x368>
      break;
 800c0ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f040 8095 	bne.w	800c21e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0f4:	4b73      	ldr	r3, [pc, #460]	; (800c2c4 <tcp_input+0x540>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	61fb      	str	r3, [r7, #28]
 800c0fa:	e03f      	b.n	800c17c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	7d1b      	ldrb	r3, [r3, #20]
 800c100:	2b0a      	cmp	r3, #10
 800c102:	d006      	beq.n	800c112 <tcp_input+0x38e>
 800c104:	4b6a      	ldr	r3, [pc, #424]	; (800c2b0 <tcp_input+0x52c>)
 800c106:	f240 121f 	movw	r2, #287	; 0x11f
 800c10a:	496f      	ldr	r1, [pc, #444]	; (800c2c8 <tcp_input+0x544>)
 800c10c:	486a      	ldr	r0, [pc, #424]	; (800c2b8 <tcp_input+0x534>)
 800c10e:	f006 feaf 	bl	8012e70 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	7a1b      	ldrb	r3, [r3, #8]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d009      	beq.n	800c12e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	7a1a      	ldrb	r2, [r3, #8]
 800c11e:	4b63      	ldr	r3, [pc, #396]	; (800c2ac <tcp_input+0x528>)
 800c120:	685b      	ldr	r3, [r3, #4]
 800c122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c126:	3301      	adds	r3, #1
 800c128:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d122      	bne.n	800c174 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	8b1a      	ldrh	r2, [r3, #24]
 800c132:	4b5d      	ldr	r3, [pc, #372]	; (800c2a8 <tcp_input+0x524>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d11b      	bne.n	800c176 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	8ada      	ldrh	r2, [r3, #22]
 800c142:	4b59      	ldr	r3, [pc, #356]	; (800c2a8 <tcp_input+0x524>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	885b      	ldrh	r3, [r3, #2]
 800c148:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d113      	bne.n	800c176 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c14e:	69fb      	ldr	r3, [r7, #28]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	4b56      	ldr	r3, [pc, #344]	; (800c2ac <tcp_input+0x528>)
 800c154:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c156:	429a      	cmp	r2, r3
 800c158:	d10d      	bne.n	800c176 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4b53      	ldr	r3, [pc, #332]	; (800c2ac <tcp_input+0x528>)
 800c160:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c162:	429a      	cmp	r2, r3
 800c164:	d107      	bne.n	800c176 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800c166:	69f8      	ldr	r0, [r7, #28]
 800c168:	f000 fb54 	bl	800c814 <tcp_timewait_input>
        }
        pbuf_free(p);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7fd fbbf 	bl	80098f0 <pbuf_free>
        return;
 800c172:	e1f0      	b.n	800c556 <tcp_input+0x7d2>
        continue;
 800c174:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	61fb      	str	r3, [r7, #28]
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1bc      	bne.n	800c0fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c186:	4b51      	ldr	r3, [pc, #324]	; (800c2cc <tcp_input+0x548>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	617b      	str	r3, [r7, #20]
 800c18c:	e02a      	b.n	800c1e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	7a1b      	ldrb	r3, [r3, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00c      	beq.n	800c1b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	7a1a      	ldrb	r2, [r3, #8]
 800c19a:	4b44      	ldr	r3, [pc, #272]	; (800c2ac <tcp_input+0x528>)
 800c19c:	685b      	ldr	r3, [r3, #4]
 800c19e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d002      	beq.n	800c1b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	61bb      	str	r3, [r7, #24]
        continue;
 800c1ae:	e016      	b.n	800c1de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	8ada      	ldrh	r2, [r3, #22]
 800c1b4:	4b3c      	ldr	r3, [pc, #240]	; (800c2a8 <tcp_input+0x524>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	885b      	ldrh	r3, [r3, #2]
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d10c      	bne.n	800c1da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	4b39      	ldr	r3, [pc, #228]	; (800c2ac <tcp_input+0x528>)
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d00f      	beq.n	800c1ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00d      	beq.n	800c1ee <tcp_input+0x46a>
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d009      	beq.n	800c1ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1d1      	bne.n	800c18e <tcp_input+0x40a>
 800c1ea:	e000      	b.n	800c1ee <tcp_input+0x46a>
            break;
 800c1ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d014      	beq.n	800c21e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	68da      	ldr	r2, [r3, #12]
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c202:	4b32      	ldr	r3, [pc, #200]	; (800c2cc <tcp_input+0x548>)
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c20a:	4a30      	ldr	r2, [pc, #192]	; (800c2cc <tcp_input+0x548>)
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800c210:	6978      	ldr	r0, [r7, #20]
 800c212:	f000 fa01 	bl	800c618 <tcp_listen_input>
      }
      pbuf_free(p);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7fd fb6a 	bl	80098f0 <pbuf_free>
      return;
 800c21c:	e19b      	b.n	800c556 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	2b00      	cmp	r3, #0
 800c222:	f000 8160 	beq.w	800c4e6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c226:	4b2a      	ldr	r3, [pc, #168]	; (800c2d0 <tcp_input+0x54c>)
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	891a      	ldrh	r2, [r3, #8]
 800c230:	4b27      	ldr	r3, [pc, #156]	; (800c2d0 <tcp_input+0x54c>)
 800c232:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c234:	4a26      	ldr	r2, [pc, #152]	; (800c2d0 <tcp_input+0x54c>)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c23a:	4b1b      	ldr	r3, [pc, #108]	; (800c2a8 <tcp_input+0x524>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a24      	ldr	r2, [pc, #144]	; (800c2d0 <tcp_input+0x54c>)
 800c240:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c242:	4b24      	ldr	r3, [pc, #144]	; (800c2d4 <tcp_input+0x550>)
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c248:	4b23      	ldr	r3, [pc, #140]	; (800c2d8 <tcp_input+0x554>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c24e:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <tcp_input+0x558>)
 800c250:	2200      	movs	r2, #0
 800c252:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c254:	4b22      	ldr	r3, [pc, #136]	; (800c2e0 <tcp_input+0x55c>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	f003 0308 	and.w	r3, r3, #8
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7b5b      	ldrb	r3, [r3, #13]
 800c264:	f043 0301 	orr.w	r3, r3, #1
 800c268:	b2da      	uxtb	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c272:	2b00      	cmp	r3, #0
 800c274:	d038      	beq.n	800c2e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c276:	69f8      	ldr	r0, [r7, #28]
 800c278:	f7ff f852 	bl	800b320 <tcp_process_refused_data>
 800c27c:	4603      	mov	r3, r0
 800c27e:	f113 0f0d 	cmn.w	r3, #13
 800c282:	d007      	beq.n	800c294 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d02d      	beq.n	800c2e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c28c:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <tcp_input+0x560>)
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d029      	beq.n	800c2e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c298:	2b00      	cmp	r3, #0
 800c29a:	f040 8104 	bne.w	800c4a6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c29e:	69f8      	ldr	r0, [r7, #28]
 800c2a0:	f003 fe16 	bl	800fed0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c2a4:	e0ff      	b.n	800c4a6 <tcp_input+0x722>
 800c2a6:	bf00      	nop
 800c2a8:	2000055c 	.word	0x2000055c
 800c2ac:	20004078 	.word	0x20004078
 800c2b0:	080163b4 	.word	0x080163b4
 800c2b4:	080164e0 	.word	0x080164e0
 800c2b8:	08016400 	.word	0x08016400
 800c2bc:	200075bc 	.word	0x200075bc
 800c2c0:	0801650c 	.word	0x0801650c
 800c2c4:	200075cc 	.word	0x200075cc
 800c2c8:	08016538 	.word	0x08016538
 800c2cc:	200075c4 	.word	0x200075c4
 800c2d0:	2000054c 	.word	0x2000054c
 800c2d4:	2000057c 	.word	0x2000057c
 800c2d8:	20000579 	.word	0x20000579
 800c2dc:	20000574 	.word	0x20000574
 800c2e0:	20000578 	.word	0x20000578
 800c2e4:	20000576 	.word	0x20000576
      }
    }
    tcp_input_pcb = pcb;
 800c2e8:	4a9c      	ldr	r2, [pc, #624]	; (800c55c <tcp_input+0x7d8>)
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c2ee:	69f8      	ldr	r0, [r7, #28]
 800c2f0:	f000 fb0a 	bl	800c908 <tcp_process>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c2f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2fc:	f113 0f0d 	cmn.w	r3, #13
 800c300:	f000 80d3 	beq.w	800c4aa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800c304:	4b96      	ldr	r3, [pc, #600]	; (800c560 <tcp_input+0x7dc>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	f003 0308 	and.w	r3, r3, #8
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d015      	beq.n	800c33c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c316:	2b00      	cmp	r3, #0
 800c318:	d008      	beq.n	800c32c <tcp_input+0x5a8>
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c320:	69fa      	ldr	r2, [r7, #28]
 800c322:	6912      	ldr	r2, [r2, #16]
 800c324:	f06f 010d 	mvn.w	r1, #13
 800c328:	4610      	mov	r0, r2
 800c32a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c32c:	69f9      	ldr	r1, [r7, #28]
 800c32e:	488d      	ldr	r0, [pc, #564]	; (800c564 <tcp_input+0x7e0>)
 800c330:	f7ff fbb0 	bl	800ba94 <tcp_pcb_remove>
        tcp_free(pcb);
 800c334:	69f8      	ldr	r0, [r7, #28]
 800c336:	f7fd fddf 	bl	8009ef8 <tcp_free>
 800c33a:	e0c1      	b.n	800c4c0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c340:	4b89      	ldr	r3, [pc, #548]	; (800c568 <tcp_input+0x7e4>)
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d01d      	beq.n	800c384 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c348:	4b87      	ldr	r3, [pc, #540]	; (800c568 <tcp_input+0x7e4>)
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00a      	beq.n	800c36e <tcp_input+0x5ea>
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c35e:	69fa      	ldr	r2, [r7, #28]
 800c360:	6910      	ldr	r0, [r2, #16]
 800c362:	89fa      	ldrh	r2, [r7, #14]
 800c364:	69f9      	ldr	r1, [r7, #28]
 800c366:	4798      	blx	r3
 800c368:	4603      	mov	r3, r0
 800c36a:	74fb      	strb	r3, [r7, #19]
 800c36c:	e001      	b.n	800c372 <tcp_input+0x5ee>
 800c36e:	2300      	movs	r3, #0
 800c370:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c372:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c376:	f113 0f0d 	cmn.w	r3, #13
 800c37a:	f000 8098 	beq.w	800c4ae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c37e:	4b7a      	ldr	r3, [pc, #488]	; (800c568 <tcp_input+0x7e4>)
 800c380:	2200      	movs	r2, #0
 800c382:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c384:	69f8      	ldr	r0, [r7, #28]
 800c386:	f000 f907 	bl	800c598 <tcp_input_delayed_close>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f040 8090 	bne.w	800c4b2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c392:	4b76      	ldr	r3, [pc, #472]	; (800c56c <tcp_input+0x7e8>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d041      	beq.n	800c41e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d006      	beq.n	800c3b0 <tcp_input+0x62c>
 800c3a2:	4b73      	ldr	r3, [pc, #460]	; (800c570 <tcp_input+0x7ec>)
 800c3a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c3a8:	4972      	ldr	r1, [pc, #456]	; (800c574 <tcp_input+0x7f0>)
 800c3aa:	4873      	ldr	r0, [pc, #460]	; (800c578 <tcp_input+0x7f4>)
 800c3ac:	f006 fd60 	bl	8012e70 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	8b5b      	ldrh	r3, [r3, #26]
 800c3b4:	f003 0310 	and.w	r3, r3, #16
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d008      	beq.n	800c3ce <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c3bc:	4b6b      	ldr	r3, [pc, #428]	; (800c56c <tcp_input+0x7e8>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fd fa95 	bl	80098f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c3c6:	69f8      	ldr	r0, [r7, #28]
 800c3c8:	f7fe f87e 	bl	800a4c8 <tcp_abort>
            goto aborted;
 800c3cc:	e078      	b.n	800c4c0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c3ce:	69fb      	ldr	r3, [r7, #28]
 800c3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00c      	beq.n	800c3f2 <tcp_input+0x66e>
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c3de:	69fb      	ldr	r3, [r7, #28]
 800c3e0:	6918      	ldr	r0, [r3, #16]
 800c3e2:	4b62      	ldr	r3, [pc, #392]	; (800c56c <tcp_input+0x7e8>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	69f9      	ldr	r1, [r7, #28]
 800c3ea:	47a0      	blx	r4
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	74fb      	strb	r3, [r7, #19]
 800c3f0:	e008      	b.n	800c404 <tcp_input+0x680>
 800c3f2:	4b5e      	ldr	r3, [pc, #376]	; (800c56c <tcp_input+0x7e8>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	69f9      	ldr	r1, [r7, #28]
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	f7ff f884 	bl	800b508 <tcp_recv_null>
 800c400:	4603      	mov	r3, r0
 800c402:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c404:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c408:	f113 0f0d 	cmn.w	r3, #13
 800c40c:	d053      	beq.n	800c4b6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c40e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c416:	4b55      	ldr	r3, [pc, #340]	; (800c56c <tcp_input+0x7e8>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c41e:	4b50      	ldr	r3, [pc, #320]	; (800c560 <tcp_input+0x7dc>)
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d030      	beq.n	800c48c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d009      	beq.n	800c446 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c436:	7b5a      	ldrb	r2, [r3, #13]
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c43c:	f042 0220 	orr.w	r2, r2, #32
 800c440:	b2d2      	uxtb	r2, r2
 800c442:	735a      	strb	r2, [r3, #13]
 800c444:	e022      	b.n	800c48c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c446:	69fb      	ldr	r3, [r7, #28]
 800c448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c44a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c44e:	d005      	beq.n	800c45c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c454:	3301      	adds	r3, #1
 800c456:	b29a      	uxth	r2, r3
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00b      	beq.n	800c47e <tcp_input+0x6fa>
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	6918      	ldr	r0, [r3, #16]
 800c470:	2300      	movs	r3, #0
 800c472:	2200      	movs	r2, #0
 800c474:	69f9      	ldr	r1, [r7, #28]
 800c476:	47a0      	blx	r4
 800c478:	4603      	mov	r3, r0
 800c47a:	74fb      	strb	r3, [r7, #19]
 800c47c:	e001      	b.n	800c482 <tcp_input+0x6fe>
 800c47e:	2300      	movs	r3, #0
 800c480:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c482:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c486:	f113 0f0d 	cmn.w	r3, #13
 800c48a:	d016      	beq.n	800c4ba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c48c:	4b33      	ldr	r3, [pc, #204]	; (800c55c <tcp_input+0x7d8>)
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c492:	69f8      	ldr	r0, [r7, #28]
 800c494:	f000 f880 	bl	800c598 <tcp_input_delayed_close>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10f      	bne.n	800c4be <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c49e:	69f8      	ldr	r0, [r7, #28]
 800c4a0:	f002 ff10 	bl	800f2c4 <tcp_output>
 800c4a4:	e00c      	b.n	800c4c0 <tcp_input+0x73c>
        goto aborted;
 800c4a6:	bf00      	nop
 800c4a8:	e00a      	b.n	800c4c0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c4aa:	bf00      	nop
 800c4ac:	e008      	b.n	800c4c0 <tcp_input+0x73c>
              goto aborted;
 800c4ae:	bf00      	nop
 800c4b0:	e006      	b.n	800c4c0 <tcp_input+0x73c>
          goto aborted;
 800c4b2:	bf00      	nop
 800c4b4:	e004      	b.n	800c4c0 <tcp_input+0x73c>
            goto aborted;
 800c4b6:	bf00      	nop
 800c4b8:	e002      	b.n	800c4c0 <tcp_input+0x73c>
              goto aborted;
 800c4ba:	bf00      	nop
 800c4bc:	e000      	b.n	800c4c0 <tcp_input+0x73c>
          goto aborted;
 800c4be:	bf00      	nop
    tcp_input_pcb = NULL;
 800c4c0:	4b26      	ldr	r3, [pc, #152]	; (800c55c <tcp_input+0x7d8>)
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c4c6:	4b29      	ldr	r3, [pc, #164]	; (800c56c <tcp_input+0x7e8>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c4cc:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <tcp_input+0x7f8>)
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d03f      	beq.n	800c554 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c4d4:	4b29      	ldr	r3, [pc, #164]	; (800c57c <tcp_input+0x7f8>)
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fd fa09 	bl	80098f0 <pbuf_free>
      inseg.p = NULL;
 800c4de:	4b27      	ldr	r3, [pc, #156]	; (800c57c <tcp_input+0x7f8>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c4e4:	e036      	b.n	800c554 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c4e6:	4b26      	ldr	r3, [pc, #152]	; (800c580 <tcp_input+0x7fc>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	899b      	ldrh	r3, [r3, #12]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fb feb8 	bl	8008264 <lwip_htons>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d118      	bne.n	800c532 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c500:	4b20      	ldr	r3, [pc, #128]	; (800c584 <tcp_input+0x800>)
 800c502:	6819      	ldr	r1, [r3, #0]
 800c504:	4b20      	ldr	r3, [pc, #128]	; (800c588 <tcp_input+0x804>)
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	461a      	mov	r2, r3
 800c50a:	4b20      	ldr	r3, [pc, #128]	; (800c58c <tcp_input+0x808>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c510:	4b1b      	ldr	r3, [pc, #108]	; (800c580 <tcp_input+0x7fc>)
 800c512:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c514:	885b      	ldrh	r3, [r3, #2]
 800c516:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c518:	4a19      	ldr	r2, [pc, #100]	; (800c580 <tcp_input+0x7fc>)
 800c51a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c51c:	8812      	ldrh	r2, [r2, #0]
 800c51e:	b292      	uxth	r2, r2
 800c520:	9202      	str	r2, [sp, #8]
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	4b1a      	ldr	r3, [pc, #104]	; (800c590 <tcp_input+0x80c>)
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	4b1a      	ldr	r3, [pc, #104]	; (800c594 <tcp_input+0x810>)
 800c52a:	4602      	mov	r2, r0
 800c52c:	2000      	movs	r0, #0
 800c52e:	f003 fc7d 	bl	800fe2c <tcp_rst>
    pbuf_free(p);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7fd f9dc 	bl	80098f0 <pbuf_free>
  return;
 800c538:	e00c      	b.n	800c554 <tcp_input+0x7d0>
    goto dropped;
 800c53a:	bf00      	nop
 800c53c:	e006      	b.n	800c54c <tcp_input+0x7c8>
    goto dropped;
 800c53e:	bf00      	nop
 800c540:	e004      	b.n	800c54c <tcp_input+0x7c8>
    goto dropped;
 800c542:	bf00      	nop
 800c544:	e002      	b.n	800c54c <tcp_input+0x7c8>
      goto dropped;
 800c546:	bf00      	nop
 800c548:	e000      	b.n	800c54c <tcp_input+0x7c8>
      goto dropped;
 800c54a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7fd f9cf 	bl	80098f0 <pbuf_free>
 800c552:	e000      	b.n	800c556 <tcp_input+0x7d2>
  return;
 800c554:	bf00      	nop
}
 800c556:	3724      	adds	r7, #36	; 0x24
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd90      	pop	{r4, r7, pc}
 800c55c:	200075d0 	.word	0x200075d0
 800c560:	20000579 	.word	0x20000579
 800c564:	200075bc 	.word	0x200075bc
 800c568:	20000574 	.word	0x20000574
 800c56c:	2000057c 	.word	0x2000057c
 800c570:	080163b4 	.word	0x080163b4
 800c574:	08016568 	.word	0x08016568
 800c578:	08016400 	.word	0x08016400
 800c57c:	2000054c 	.word	0x2000054c
 800c580:	2000055c 	.word	0x2000055c
 800c584:	20000570 	.word	0x20000570
 800c588:	20000576 	.word	0x20000576
 800c58c:	2000056c 	.word	0x2000056c
 800c590:	20004088 	.word	0x20004088
 800c594:	2000408c 	.word	0x2000408c

0800c598 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <tcp_input_delayed_close+0x1c>
 800c5a6:	4b17      	ldr	r3, [pc, #92]	; (800c604 <tcp_input_delayed_close+0x6c>)
 800c5a8:	f240 225a 	movw	r2, #602	; 0x25a
 800c5ac:	4916      	ldr	r1, [pc, #88]	; (800c608 <tcp_input_delayed_close+0x70>)
 800c5ae:	4817      	ldr	r0, [pc, #92]	; (800c60c <tcp_input_delayed_close+0x74>)
 800c5b0:	f006 fc5e 	bl	8012e70 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c5b4:	4b16      	ldr	r3, [pc, #88]	; (800c610 <tcp_input_delayed_close+0x78>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	f003 0310 	and.w	r3, r3, #16
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01c      	beq.n	800c5fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	8b5b      	ldrh	r3, [r3, #26]
 800c5c4:	f003 0310 	and.w	r3, r3, #16
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10d      	bne.n	800c5e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d008      	beq.n	800c5e8 <tcp_input_delayed_close+0x50>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	6912      	ldr	r2, [r2, #16]
 800c5e0:	f06f 010e 	mvn.w	r1, #14
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c5e8:	6879      	ldr	r1, [r7, #4]
 800c5ea:	480a      	ldr	r0, [pc, #40]	; (800c614 <tcp_input_delayed_close+0x7c>)
 800c5ec:	f7ff fa52 	bl	800ba94 <tcp_pcb_remove>
    tcp_free(pcb);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7fd fc81 	bl	8009ef8 <tcp_free>
    return 1;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e000      	b.n	800c5fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	080163b4 	.word	0x080163b4
 800c608:	08016584 	.word	0x08016584
 800c60c:	08016400 	.word	0x08016400
 800c610:	20000579 	.word	0x20000579
 800c614:	200075bc 	.word	0x200075bc

0800c618 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c618:	b590      	push	{r4, r7, lr}
 800c61a:	b08b      	sub	sp, #44	; 0x2c
 800c61c:	af04      	add	r7, sp, #16
 800c61e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c620:	4b6f      	ldr	r3, [pc, #444]	; (800c7e0 <tcp_listen_input+0x1c8>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	f003 0304 	and.w	r3, r3, #4
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f040 80d2 	bne.w	800c7d2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <tcp_listen_input+0x2a>
 800c634:	4b6b      	ldr	r3, [pc, #428]	; (800c7e4 <tcp_listen_input+0x1cc>)
 800c636:	f240 2281 	movw	r2, #641	; 0x281
 800c63a:	496b      	ldr	r1, [pc, #428]	; (800c7e8 <tcp_listen_input+0x1d0>)
 800c63c:	486b      	ldr	r0, [pc, #428]	; (800c7ec <tcp_listen_input+0x1d4>)
 800c63e:	f006 fc17 	bl	8012e70 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c642:	4b67      	ldr	r3, [pc, #412]	; (800c7e0 <tcp_listen_input+0x1c8>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 0310 	and.w	r3, r3, #16
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d019      	beq.n	800c682 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c64e:	4b68      	ldr	r3, [pc, #416]	; (800c7f0 <tcp_listen_input+0x1d8>)
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	4b68      	ldr	r3, [pc, #416]	; (800c7f4 <tcp_listen_input+0x1dc>)
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	4b67      	ldr	r3, [pc, #412]	; (800c7f8 <tcp_listen_input+0x1e0>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c65e:	4b67      	ldr	r3, [pc, #412]	; (800c7fc <tcp_listen_input+0x1e4>)
 800c660:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c662:	885b      	ldrh	r3, [r3, #2]
 800c664:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c666:	4a65      	ldr	r2, [pc, #404]	; (800c7fc <tcp_listen_input+0x1e4>)
 800c668:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c66a:	8812      	ldrh	r2, [r2, #0]
 800c66c:	b292      	uxth	r2, r2
 800c66e:	9202      	str	r2, [sp, #8]
 800c670:	9301      	str	r3, [sp, #4]
 800c672:	4b63      	ldr	r3, [pc, #396]	; (800c800 <tcp_listen_input+0x1e8>)
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	4b63      	ldr	r3, [pc, #396]	; (800c804 <tcp_listen_input+0x1ec>)
 800c678:	4602      	mov	r2, r0
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f003 fbd6 	bl	800fe2c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c680:	e0a9      	b.n	800c7d6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c682:	4b57      	ldr	r3, [pc, #348]	; (800c7e0 <tcp_listen_input+0x1c8>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	f003 0302 	and.w	r3, r3, #2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f000 80a3 	beq.w	800c7d6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7d5b      	ldrb	r3, [r3, #21]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff f85b 	bl	800b750 <tcp_alloc>
 800c69a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d111      	bne.n	800c6c6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	699b      	ldr	r3, [r3, #24]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00a      	beq.n	800c6c0 <tcp_listen_input+0xa8>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	6910      	ldr	r0, [r2, #16]
 800c6b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4798      	blx	r3
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73bb      	strb	r3, [r7, #14]
      return;
 800c6be:	e08b      	b.n	800c7d8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c6c0:	23f0      	movs	r3, #240	; 0xf0
 800c6c2:	73bb      	strb	r3, [r7, #14]
      return;
 800c6c4:	e088      	b.n	800c7d8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c6c6:	4b50      	ldr	r3, [pc, #320]	; (800c808 <tcp_listen_input+0x1f0>)
 800c6c8:	695a      	ldr	r2, [r3, #20]
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c6ce:	4b4e      	ldr	r3, [pc, #312]	; (800c808 <tcp_listen_input+0x1f0>)
 800c6d0:	691a      	ldr	r2, [r3, #16]
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	8ada      	ldrh	r2, [r3, #22]
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c6de:	4b47      	ldr	r3, [pc, #284]	; (800c7fc <tcp_listen_input+0x1e4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c6f0:	4b41      	ldr	r3, [pc, #260]	; (800c7f8 <tcp_listen_input+0x1e0>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c702:	6978      	ldr	r0, [r7, #20]
 800c704:	f7ff fa5a 	bl	800bbbc <tcp_next_iss>
 800c708:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	693a      	ldr	r2, [r7, #16]
 800c714:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	693a      	ldr	r2, [r7, #16]
 800c720:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c722:	4b35      	ldr	r3, [pc, #212]	; (800c7f8 <tcp_listen_input+0x1e0>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	1e5a      	subs	r2, r3, #1
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	691a      	ldr	r2, [r3, #16]
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	7a5b      	ldrb	r3, [r3, #9]
 800c73e:	f003 030c 	and.w	r3, r3, #12
 800c742:	b2da      	uxtb	r2, r3
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	7a1a      	ldrb	r2, [r3, #8]
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c750:	4b2e      	ldr	r3, [pc, #184]	; (800c80c <tcp_listen_input+0x1f4>)
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	60da      	str	r2, [r3, #12]
 800c758:	4a2c      	ldr	r2, [pc, #176]	; (800c80c <tcp_listen_input+0x1f4>)
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	f003 fd27 	bl	80101b0 <tcp_timer_needed>
 800c762:	4b2b      	ldr	r3, [pc, #172]	; (800c810 <tcp_listen_input+0x1f8>)
 800c764:	2201      	movs	r2, #1
 800c766:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c768:	6978      	ldr	r0, [r7, #20]
 800c76a:	f001 fd8d 	bl	800e288 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c76e:	4b23      	ldr	r3, [pc, #140]	; (800c7fc <tcp_listen_input+0x1e4>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	89db      	ldrh	r3, [r3, #14]
 800c774:	b29a      	uxth	r2, r3
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	3304      	adds	r3, #4
 800c790:	4618      	mov	r0, r3
 800c792:	f005 f925 	bl	80119e0 <ip4_route>
 800c796:	4601      	mov	r1, r0
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	3304      	adds	r3, #4
 800c79c:	461a      	mov	r2, r3
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f7ff fa32 	bl	800bc08 <tcp_eff_send_mss_netif>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c7ac:	2112      	movs	r1, #18
 800c7ae:	6978      	ldr	r0, [r7, #20]
 800c7b0:	f002 fc9a 	bl	800f0e8 <tcp_enqueue_flags>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c7b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d004      	beq.n	800c7ca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	6978      	ldr	r0, [r7, #20]
 800c7c4:	f7fd fdc2 	bl	800a34c <tcp_abandon>
      return;
 800c7c8:	e006      	b.n	800c7d8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c7ca:	6978      	ldr	r0, [r7, #20]
 800c7cc:	f002 fd7a 	bl	800f2c4 <tcp_output>
  return;
 800c7d0:	e001      	b.n	800c7d6 <tcp_listen_input+0x1be>
    return;
 800c7d2:	bf00      	nop
 800c7d4:	e000      	b.n	800c7d8 <tcp_listen_input+0x1c0>
  return;
 800c7d6:	bf00      	nop
}
 800c7d8:	371c      	adds	r7, #28
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd90      	pop	{r4, r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20000578 	.word	0x20000578
 800c7e4:	080163b4 	.word	0x080163b4
 800c7e8:	080165ac 	.word	0x080165ac
 800c7ec:	08016400 	.word	0x08016400
 800c7f0:	20000570 	.word	0x20000570
 800c7f4:	20000576 	.word	0x20000576
 800c7f8:	2000056c 	.word	0x2000056c
 800c7fc:	2000055c 	.word	0x2000055c
 800c800:	20004088 	.word	0x20004088
 800c804:	2000408c 	.word	0x2000408c
 800c808:	20004078 	.word	0x20004078
 800c80c:	200075bc 	.word	0x200075bc
 800c810:	200075b8 	.word	0x200075b8

0800c814 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af04      	add	r7, sp, #16
 800c81a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c81c:	4b2f      	ldr	r3, [pc, #188]	; (800c8dc <tcp_timewait_input+0xc8>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	f003 0304 	and.w	r3, r3, #4
 800c824:	2b00      	cmp	r3, #0
 800c826:	d153      	bne.n	800c8d0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d106      	bne.n	800c83c <tcp_timewait_input+0x28>
 800c82e:	4b2c      	ldr	r3, [pc, #176]	; (800c8e0 <tcp_timewait_input+0xcc>)
 800c830:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c834:	492b      	ldr	r1, [pc, #172]	; (800c8e4 <tcp_timewait_input+0xd0>)
 800c836:	482c      	ldr	r0, [pc, #176]	; (800c8e8 <tcp_timewait_input+0xd4>)
 800c838:	f006 fb1a 	bl	8012e70 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c83c:	4b27      	ldr	r3, [pc, #156]	; (800c8dc <tcp_timewait_input+0xc8>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	f003 0302 	and.w	r3, r3, #2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d02a      	beq.n	800c89e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c848:	4b28      	ldr	r3, [pc, #160]	; (800c8ec <tcp_timewait_input+0xd8>)
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	db2d      	blt.n	800c8b2 <tcp_timewait_input+0x9e>
 800c856:	4b25      	ldr	r3, [pc, #148]	; (800c8ec <tcp_timewait_input+0xd8>)
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c862:	440b      	add	r3, r1
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	2b00      	cmp	r3, #0
 800c868:	dc23      	bgt.n	800c8b2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c86a:	4b21      	ldr	r3, [pc, #132]	; (800c8f0 <tcp_timewait_input+0xdc>)
 800c86c:	6819      	ldr	r1, [r3, #0]
 800c86e:	4b21      	ldr	r3, [pc, #132]	; (800c8f4 <tcp_timewait_input+0xe0>)
 800c870:	881b      	ldrh	r3, [r3, #0]
 800c872:	461a      	mov	r2, r3
 800c874:	4b1d      	ldr	r3, [pc, #116]	; (800c8ec <tcp_timewait_input+0xd8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c87a:	4b1f      	ldr	r3, [pc, #124]	; (800c8f8 <tcp_timewait_input+0xe4>)
 800c87c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c87e:	885b      	ldrh	r3, [r3, #2]
 800c880:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c882:	4a1d      	ldr	r2, [pc, #116]	; (800c8f8 <tcp_timewait_input+0xe4>)
 800c884:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c886:	8812      	ldrh	r2, [r2, #0]
 800c888:	b292      	uxth	r2, r2
 800c88a:	9202      	str	r2, [sp, #8]
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	4b1b      	ldr	r3, [pc, #108]	; (800c8fc <tcp_timewait_input+0xe8>)
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	4b1b      	ldr	r3, [pc, #108]	; (800c900 <tcp_timewait_input+0xec>)
 800c894:	4602      	mov	r2, r0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f003 fac8 	bl	800fe2c <tcp_rst>
      return;
 800c89c:	e01b      	b.n	800c8d6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c89e:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <tcp_timewait_input+0xc8>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d003      	beq.n	800c8b2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c8aa:	4b16      	ldr	r3, [pc, #88]	; (800c904 <tcp_timewait_input+0xf0>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c8b2:	4b10      	ldr	r3, [pc, #64]	; (800c8f4 <tcp_timewait_input+0xe0>)
 800c8b4:	881b      	ldrh	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00c      	beq.n	800c8d4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8b5b      	ldrh	r3, [r3, #26]
 800c8be:	f043 0302 	orr.w	r3, r3, #2
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f002 fcfb 	bl	800f2c4 <tcp_output>
  }
  return;
 800c8ce:	e001      	b.n	800c8d4 <tcp_timewait_input+0xc0>
    return;
 800c8d0:	bf00      	nop
 800c8d2:	e000      	b.n	800c8d6 <tcp_timewait_input+0xc2>
  return;
 800c8d4:	bf00      	nop
}
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20000578 	.word	0x20000578
 800c8e0:	080163b4 	.word	0x080163b4
 800c8e4:	080165cc 	.word	0x080165cc
 800c8e8:	08016400 	.word	0x08016400
 800c8ec:	2000056c 	.word	0x2000056c
 800c8f0:	20000570 	.word	0x20000570
 800c8f4:	20000576 	.word	0x20000576
 800c8f8:	2000055c 	.word	0x2000055c
 800c8fc:	20004088 	.word	0x20004088
 800c900:	2000408c 	.word	0x2000408c
 800c904:	200075c0 	.word	0x200075c0

0800c908 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b08d      	sub	sp, #52	; 0x34
 800c90c:	af04      	add	r7, sp, #16
 800c90e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c910:	2300      	movs	r3, #0
 800c912:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d106      	bne.n	800c92c <tcp_process+0x24>
 800c91e:	4ba5      	ldr	r3, [pc, #660]	; (800cbb4 <tcp_process+0x2ac>)
 800c920:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c924:	49a4      	ldr	r1, [pc, #656]	; (800cbb8 <tcp_process+0x2b0>)
 800c926:	48a5      	ldr	r0, [pc, #660]	; (800cbbc <tcp_process+0x2b4>)
 800c928:	f006 faa2 	bl	8012e70 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c92c:	4ba4      	ldr	r3, [pc, #656]	; (800cbc0 <tcp_process+0x2b8>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	f003 0304 	and.w	r3, r3, #4
 800c934:	2b00      	cmp	r3, #0
 800c936:	d04e      	beq.n	800c9d6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	7d1b      	ldrb	r3, [r3, #20]
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d108      	bne.n	800c952 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c944:	4b9f      	ldr	r3, [pc, #636]	; (800cbc4 <tcp_process+0x2bc>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d123      	bne.n	800c994 <tcp_process+0x8c>
        acceptable = 1;
 800c94c:	2301      	movs	r3, #1
 800c94e:	76fb      	strb	r3, [r7, #27]
 800c950:	e020      	b.n	800c994 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c956:	4b9c      	ldr	r3, [pc, #624]	; (800cbc8 <tcp_process+0x2c0>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d102      	bne.n	800c964 <tcp_process+0x5c>
        acceptable = 1;
 800c95e:	2301      	movs	r3, #1
 800c960:	76fb      	strb	r3, [r7, #27]
 800c962:	e017      	b.n	800c994 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c964:	4b98      	ldr	r3, [pc, #608]	; (800cbc8 <tcp_process+0x2c0>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	2b00      	cmp	r3, #0
 800c970:	db10      	blt.n	800c994 <tcp_process+0x8c>
 800c972:	4b95      	ldr	r3, [pc, #596]	; (800cbc8 <tcp_process+0x2c0>)
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c97e:	440b      	add	r3, r1
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	dc06      	bgt.n	800c994 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	8b5b      	ldrh	r3, [r3, #26]
 800c98a:	f043 0302 	orr.w	r3, r3, #2
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c994:	7efb      	ldrb	r3, [r7, #27]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d01b      	beq.n	800c9d2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	7d1b      	ldrb	r3, [r3, #20]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d106      	bne.n	800c9b0 <tcp_process+0xa8>
 800c9a2:	4b84      	ldr	r3, [pc, #528]	; (800cbb4 <tcp_process+0x2ac>)
 800c9a4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c9a8:	4988      	ldr	r1, [pc, #544]	; (800cbcc <tcp_process+0x2c4>)
 800c9aa:	4884      	ldr	r0, [pc, #528]	; (800cbbc <tcp_process+0x2b4>)
 800c9ac:	f006 fa60 	bl	8012e70 <iprintf>
      recv_flags |= TF_RESET;
 800c9b0:	4b87      	ldr	r3, [pc, #540]	; (800cbd0 <tcp_process+0x2c8>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	f043 0308 	orr.w	r3, r3, #8
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	4b85      	ldr	r3, [pc, #532]	; (800cbd0 <tcp_process+0x2c8>)
 800c9bc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	8b5b      	ldrh	r3, [r3, #26]
 800c9c2:	f023 0301 	bic.w	r3, r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c9cc:	f06f 030d 	mvn.w	r3, #13
 800c9d0:	e37a      	b.n	800d0c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e378      	b.n	800d0c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c9d6:	4b7a      	ldr	r3, [pc, #488]	; (800cbc0 <tcp_process+0x2b8>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d010      	beq.n	800ca04 <tcp_process+0xfc>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	7d1b      	ldrb	r3, [r3, #20]
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d00c      	beq.n	800ca04 <tcp_process+0xfc>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	7d1b      	ldrb	r3, [r3, #20]
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d008      	beq.n	800ca04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	8b5b      	ldrh	r3, [r3, #26]
 800c9f6:	f043 0302 	orr.w	r3, r3, #2
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	e361      	b.n	800d0c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	8b5b      	ldrh	r3, [r3, #26]
 800ca08:	f003 0310 	and.w	r3, r3, #16
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d103      	bne.n	800ca18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ca10:	4b70      	ldr	r3, [pc, #448]	; (800cbd4 <tcp_process+0x2cc>)
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f001 fc2d 	bl	800e288 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7d1b      	ldrb	r3, [r3, #20]
 800ca32:	3b02      	subs	r3, #2
 800ca34:	2b07      	cmp	r3, #7
 800ca36:	f200 8337 	bhi.w	800d0a8 <tcp_process+0x7a0>
 800ca3a:	a201      	add	r2, pc, #4	; (adr r2, 800ca40 <tcp_process+0x138>)
 800ca3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca40:	0800ca61 	.word	0x0800ca61
 800ca44:	0800cc91 	.word	0x0800cc91
 800ca48:	0800ce09 	.word	0x0800ce09
 800ca4c:	0800ce33 	.word	0x0800ce33
 800ca50:	0800cf57 	.word	0x0800cf57
 800ca54:	0800ce09 	.word	0x0800ce09
 800ca58:	0800cfe3 	.word	0x0800cfe3
 800ca5c:	0800d073 	.word	0x0800d073
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ca60:	4b57      	ldr	r3, [pc, #348]	; (800cbc0 <tcp_process+0x2b8>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	f003 0310 	and.w	r3, r3, #16
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f000 80e4 	beq.w	800cc36 <tcp_process+0x32e>
 800ca6e:	4b54      	ldr	r3, [pc, #336]	; (800cbc0 <tcp_process+0x2b8>)
 800ca70:	781b      	ldrb	r3, [r3, #0]
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80dd 	beq.w	800cc36 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca80:	1c5a      	adds	r2, r3, #1
 800ca82:	4b50      	ldr	r3, [pc, #320]	; (800cbc4 <tcp_process+0x2bc>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	f040 80d5 	bne.w	800cc36 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ca8c:	4b4e      	ldr	r3, [pc, #312]	; (800cbc8 <tcp_process+0x2c0>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ca9e:	4b49      	ldr	r3, [pc, #292]	; (800cbc4 <tcp_process+0x2bc>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800caa6:	4b4c      	ldr	r3, [pc, #304]	; (800cbd8 <tcp_process+0x2d0>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	89db      	ldrh	r3, [r3, #14]
 800caac:	b29a      	uxth	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cac0:	4b41      	ldr	r3, [pc, #260]	; (800cbc8 <tcp_process+0x2c0>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	1e5a      	subs	r2, r3, #1
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2204      	movs	r2, #4
 800cace:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	3304      	adds	r3, #4
 800cad8:	4618      	mov	r0, r3
 800cada:	f004 ff81 	bl	80119e0 <ip4_route>
 800cade:	4601      	mov	r1, r0
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	3304      	adds	r3, #4
 800cae4:	461a      	mov	r2, r3
 800cae6:	4620      	mov	r0, r4
 800cae8:	f7ff f88e 	bl	800bc08 <tcp_eff_send_mss_netif>
 800caec:	4603      	mov	r3, r0
 800caee:	461a      	mov	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caf8:	009a      	lsls	r2, r3, #2
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	f241 111c 	movw	r1, #4380	; 0x111c
 800cb04:	428b      	cmp	r3, r1
 800cb06:	bf38      	it	cc
 800cb08:	460b      	movcc	r3, r1
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d204      	bcs.n	800cb18 <tcp_process+0x210>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	e00d      	b.n	800cb34 <tcp_process+0x22c>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	f241 121c 	movw	r2, #4380	; 0x111c
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d904      	bls.n	800cb30 <tcp_process+0x228>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	e001      	b.n	800cb34 <tcp_process+0x22c>
 800cb30:	f241 131c 	movw	r3, #4380	; 0x111c
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d106      	bne.n	800cb52 <tcp_process+0x24a>
 800cb44:	4b1b      	ldr	r3, [pc, #108]	; (800cbb4 <tcp_process+0x2ac>)
 800cb46:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cb4a:	4924      	ldr	r1, [pc, #144]	; (800cbdc <tcp_process+0x2d4>)
 800cb4c:	481b      	ldr	r0, [pc, #108]	; (800cbbc <tcp_process+0x2b4>)
 800cb4e:	f006 f98f 	bl	8012e70 <iprintf>
        --pcb->snd_queuelen;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb66:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d111      	bne.n	800cb92 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb72:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <tcp_process+0x280>
 800cb7a:	4b0e      	ldr	r3, [pc, #56]	; (800cbb4 <tcp_process+0x2ac>)
 800cb7c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cb80:	4917      	ldr	r1, [pc, #92]	; (800cbe0 <tcp_process+0x2d8>)
 800cb82:	480e      	ldr	r0, [pc, #56]	; (800cbbc <tcp_process+0x2b4>)
 800cb84:	f006 f974 	bl	8012e70 <iprintf>
          pcb->unsent = rseg->next;
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	66da      	str	r2, [r3, #108]	; 0x6c
 800cb90:	e003      	b.n	800cb9a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800cb9a:	69f8      	ldr	r0, [r7, #28]
 800cb9c:	f7fe fc51 	bl	800b442 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d11d      	bne.n	800cbe4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbae:	861a      	strh	r2, [r3, #48]	; 0x30
 800cbb0:	e01f      	b.n	800cbf2 <tcp_process+0x2ea>
 800cbb2:	bf00      	nop
 800cbb4:	080163b4 	.word	0x080163b4
 800cbb8:	080165ec 	.word	0x080165ec
 800cbbc:	08016400 	.word	0x08016400
 800cbc0:	20000578 	.word	0x20000578
 800cbc4:	20000570 	.word	0x20000570
 800cbc8:	2000056c 	.word	0x2000056c
 800cbcc:	08016608 	.word	0x08016608
 800cbd0:	20000579 	.word	0x20000579
 800cbd4:	200075c0 	.word	0x200075c0
 800cbd8:	2000055c 	.word	0x2000055c
 800cbdc:	08016628 	.word	0x08016628
 800cbe0:	08016640 	.word	0x08016640
        } else {
          pcb->rtime = 0;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00a      	beq.n	800cc12 <tcp_process+0x30a>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	6910      	ldr	r0, [r2, #16]
 800cc06:	2200      	movs	r2, #0
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	4798      	blx	r3
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	76bb      	strb	r3, [r7, #26]
 800cc10:	e001      	b.n	800cc16 <tcp_process+0x30e>
 800cc12:	2300      	movs	r3, #0
 800cc14:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800cc16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cc1a:	f113 0f0d 	cmn.w	r3, #13
 800cc1e:	d102      	bne.n	800cc26 <tcp_process+0x31e>
          return ERR_ABRT;
 800cc20:	f06f 030c 	mvn.w	r3, #12
 800cc24:	e250      	b.n	800d0c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	8b5b      	ldrh	r3, [r3, #26]
 800cc2a:	f043 0302 	orr.w	r3, r3, #2
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800cc34:	e23a      	b.n	800d0ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800cc36:	4b9d      	ldr	r3, [pc, #628]	; (800ceac <tcp_process+0x5a4>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	f003 0310 	and.w	r3, r3, #16
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f000 8234 	beq.w	800d0ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc44:	4b9a      	ldr	r3, [pc, #616]	; (800ceb0 <tcp_process+0x5a8>)
 800cc46:	6819      	ldr	r1, [r3, #0]
 800cc48:	4b9a      	ldr	r3, [pc, #616]	; (800ceb4 <tcp_process+0x5ac>)
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	4b9a      	ldr	r3, [pc, #616]	; (800ceb8 <tcp_process+0x5b0>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc54:	4b99      	ldr	r3, [pc, #612]	; (800cebc <tcp_process+0x5b4>)
 800cc56:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc58:	885b      	ldrh	r3, [r3, #2]
 800cc5a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc5c:	4a97      	ldr	r2, [pc, #604]	; (800cebc <tcp_process+0x5b4>)
 800cc5e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc60:	8812      	ldrh	r2, [r2, #0]
 800cc62:	b292      	uxth	r2, r2
 800cc64:	9202      	str	r2, [sp, #8]
 800cc66:	9301      	str	r3, [sp, #4]
 800cc68:	4b95      	ldr	r3, [pc, #596]	; (800cec0 <tcp_process+0x5b8>)
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	4b95      	ldr	r3, [pc, #596]	; (800cec4 <tcp_process+0x5bc>)
 800cc6e:	4602      	mov	r2, r0
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f003 f8db 	bl	800fe2c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc7c:	2b05      	cmp	r3, #5
 800cc7e:	f200 8215 	bhi.w	800d0ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f002 fea5 	bl	800f9d8 <tcp_rexmit_rto>
      break;
 800cc8e:	e20d      	b.n	800d0ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800cc90:	4b86      	ldr	r3, [pc, #536]	; (800ceac <tcp_process+0x5a4>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	f003 0310 	and.w	r3, r3, #16
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 80a1 	beq.w	800cde0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cc9e:	4b84      	ldr	r3, [pc, #528]	; (800ceb0 <tcp_process+0x5a8>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca6:	1ad3      	subs	r3, r2, r3
 800cca8:	3b01      	subs	r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	db7e      	blt.n	800cdac <tcp_process+0x4a4>
 800ccae:	4b80      	ldr	r3, [pc, #512]	; (800ceb0 <tcp_process+0x5a8>)
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	dc77      	bgt.n	800cdac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2204      	movs	r2, #4
 800ccc0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ccca:	23fa      	movs	r3, #250	; 0xfa
 800cccc:	76bb      	strb	r3, [r7, #26]
 800ccce:	e01d      	b.n	800cd0c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccd4:	699b      	ldr	r3, [r3, #24]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <tcp_process+0x3e0>
 800ccda:	4b7b      	ldr	r3, [pc, #492]	; (800cec8 <tcp_process+0x5c0>)
 800ccdc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800cce0:	497a      	ldr	r1, [pc, #488]	; (800cecc <tcp_process+0x5c4>)
 800cce2:	487b      	ldr	r0, [pc, #492]	; (800ced0 <tcp_process+0x5c8>)
 800cce4:	f006 f8c4 	bl	8012e70 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00a      	beq.n	800cd08 <tcp_process+0x400>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	6910      	ldr	r0, [r2, #16]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	4798      	blx	r3
 800cd02:	4603      	mov	r3, r0
 800cd04:	76bb      	strb	r3, [r7, #26]
 800cd06:	e001      	b.n	800cd0c <tcp_process+0x404>
 800cd08:	23f0      	movs	r3, #240	; 0xf0
 800cd0a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800cd0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00a      	beq.n	800cd2a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800cd14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd18:	f113 0f0d 	cmn.w	r3, #13
 800cd1c:	d002      	beq.n	800cd24 <tcp_process+0x41c>
              tcp_abort(pcb);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7fd fbd2 	bl	800a4c8 <tcp_abort>
            }
            return ERR_ABRT;
 800cd24:	f06f 030c 	mvn.w	r3, #12
 800cd28:	e1ce      	b.n	800d0c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fae0 	bl	800d2f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800cd30:	4b68      	ldr	r3, [pc, #416]	; (800ced4 <tcp_process+0x5cc>)
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d005      	beq.n	800cd44 <tcp_process+0x43c>
            recv_acked--;
 800cd38:	4b66      	ldr	r3, [pc, #408]	; (800ced4 <tcp_process+0x5cc>)
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	4b64      	ldr	r3, [pc, #400]	; (800ced4 <tcp_process+0x5cc>)
 800cd42:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd48:	009a      	lsls	r2, r3, #2
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	f241 111c 	movw	r1, #4380	; 0x111c
 800cd54:	428b      	cmp	r3, r1
 800cd56:	bf38      	it	cc
 800cd58:	460b      	movcc	r3, r1
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d204      	bcs.n	800cd68 <tcp_process+0x460>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	e00d      	b.n	800cd84 <tcp_process+0x47c>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	f241 121c 	movw	r2, #4380	; 0x111c
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d904      	bls.n	800cd80 <tcp_process+0x478>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd7a:	005b      	lsls	r3, r3, #1
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	e001      	b.n	800cd84 <tcp_process+0x47c>
 800cd80:	f241 131c 	movw	r3, #4380	; 0x111c
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800cd8a:	4b53      	ldr	r3, [pc, #332]	; (800ced8 <tcp_process+0x5d0>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	f003 0320 	and.w	r3, r3, #32
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d037      	beq.n	800ce06 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	8b5b      	ldrh	r3, [r3, #26]
 800cd9a:	f043 0302 	orr.w	r3, r3, #2
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2207      	movs	r2, #7
 800cda8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800cdaa:	e02c      	b.n	800ce06 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdac:	4b40      	ldr	r3, [pc, #256]	; (800ceb0 <tcp_process+0x5a8>)
 800cdae:	6819      	ldr	r1, [r3, #0]
 800cdb0:	4b40      	ldr	r3, [pc, #256]	; (800ceb4 <tcp_process+0x5ac>)
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	4b40      	ldr	r3, [pc, #256]	; (800ceb8 <tcp_process+0x5b0>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdbc:	4b3f      	ldr	r3, [pc, #252]	; (800cebc <tcp_process+0x5b4>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdc0:	885b      	ldrh	r3, [r3, #2]
 800cdc2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cdc4:	4a3d      	ldr	r2, [pc, #244]	; (800cebc <tcp_process+0x5b4>)
 800cdc6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cdc8:	8812      	ldrh	r2, [r2, #0]
 800cdca:	b292      	uxth	r2, r2
 800cdcc:	9202      	str	r2, [sp, #8]
 800cdce:	9301      	str	r3, [sp, #4]
 800cdd0:	4b3b      	ldr	r3, [pc, #236]	; (800cec0 <tcp_process+0x5b8>)
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	4b3b      	ldr	r3, [pc, #236]	; (800cec4 <tcp_process+0x5bc>)
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f003 f827 	bl	800fe2c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800cdde:	e167      	b.n	800d0b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cde0:	4b32      	ldr	r3, [pc, #200]	; (800ceac <tcp_process+0x5a4>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	f003 0302 	and.w	r3, r3, #2
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 8161 	beq.w	800d0b0 <tcp_process+0x7a8>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf2:	1e5a      	subs	r2, r3, #1
 800cdf4:	4b30      	ldr	r3, [pc, #192]	; (800ceb8 <tcp_process+0x5b0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	f040 8159 	bne.w	800d0b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f002 fe0c 	bl	800fa1c <tcp_rexmit>
      break;
 800ce04:	e154      	b.n	800d0b0 <tcp_process+0x7a8>
 800ce06:	e153      	b.n	800d0b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 fa71 	bl	800d2f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ce0e:	4b32      	ldr	r3, [pc, #200]	; (800ced8 <tcp_process+0x5d0>)
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	f003 0320 	and.w	r3, r3, #32
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 814c 	beq.w	800d0b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	8b5b      	ldrh	r3, [r3, #26]
 800ce20:	f043 0302 	orr.w	r3, r3, #2
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2207      	movs	r2, #7
 800ce2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce30:	e140      	b.n	800d0b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fa5c 	bl	800d2f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ce38:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <tcp_process+0x5d0>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	f003 0320 	and.w	r3, r3, #32
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d071      	beq.n	800cf28 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce44:	4b19      	ldr	r3, [pc, #100]	; (800ceac <tcp_process+0x5a4>)
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	f003 0310 	and.w	r3, r3, #16
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d060      	beq.n	800cf12 <tcp_process+0x60a>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce54:	4b16      	ldr	r3, [pc, #88]	; (800ceb0 <tcp_process+0x5a8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d15a      	bne.n	800cf12 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d156      	bne.n	800cf12 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	8b5b      	ldrh	r3, [r3, #26]
 800ce68:	f043 0302 	orr.w	r3, r3, #2
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7fe fdbe 	bl	800b9f4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ce78:	4b18      	ldr	r3, [pc, #96]	; (800cedc <tcp_process+0x5d4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d105      	bne.n	800ce8e <tcp_process+0x586>
 800ce82:	4b16      	ldr	r3, [pc, #88]	; (800cedc <tcp_process+0x5d4>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	4a14      	ldr	r2, [pc, #80]	; (800cedc <tcp_process+0x5d4>)
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	e02e      	b.n	800ceec <tcp_process+0x5e4>
 800ce8e:	4b13      	ldr	r3, [pc, #76]	; (800cedc <tcp_process+0x5d4>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	617b      	str	r3, [r7, #20]
 800ce94:	e027      	b.n	800cee6 <tcp_process+0x5de>
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d11f      	bne.n	800cee0 <tcp_process+0x5d8>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	68da      	ldr	r2, [r3, #12]
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	60da      	str	r2, [r3, #12]
 800cea8:	e020      	b.n	800ceec <tcp_process+0x5e4>
 800ceaa:	bf00      	nop
 800ceac:	20000578 	.word	0x20000578
 800ceb0:	20000570 	.word	0x20000570
 800ceb4:	20000576 	.word	0x20000576
 800ceb8:	2000056c 	.word	0x2000056c
 800cebc:	2000055c 	.word	0x2000055c
 800cec0:	20004088 	.word	0x20004088
 800cec4:	2000408c 	.word	0x2000408c
 800cec8:	080163b4 	.word	0x080163b4
 800cecc:	08016654 	.word	0x08016654
 800ced0:	08016400 	.word	0x08016400
 800ced4:	20000574 	.word	0x20000574
 800ced8:	20000579 	.word	0x20000579
 800cedc:	200075bc 	.word	0x200075bc
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d1d4      	bne.n	800ce96 <tcp_process+0x58e>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	60da      	str	r2, [r3, #12]
 800cef2:	4b77      	ldr	r3, [pc, #476]	; (800d0d0 <tcp_process+0x7c8>)
 800cef4:	2201      	movs	r2, #1
 800cef6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	220a      	movs	r2, #10
 800cefc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cefe:	4b75      	ldr	r3, [pc, #468]	; (800d0d4 <tcp_process+0x7cc>)
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	60da      	str	r2, [r3, #12]
 800cf06:	4a73      	ldr	r2, [pc, #460]	; (800d0d4 <tcp_process+0x7cc>)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6013      	str	r3, [r2, #0]
 800cf0c:	f003 f950 	bl	80101b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cf10:	e0d2      	b.n	800d0b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	8b5b      	ldrh	r3, [r3, #26]
 800cf16:	f043 0302 	orr.w	r3, r3, #2
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2208      	movs	r2, #8
 800cf24:	751a      	strb	r2, [r3, #20]
      break;
 800cf26:	e0c7      	b.n	800d0b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf28:	4b6b      	ldr	r3, [pc, #428]	; (800d0d8 <tcp_process+0x7d0>)
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	f003 0310 	and.w	r3, r3, #16
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 80c1 	beq.w	800d0b8 <tcp_process+0x7b0>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf3a:	4b68      	ldr	r3, [pc, #416]	; (800d0dc <tcp_process+0x7d4>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	f040 80ba 	bne.w	800d0b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f040 80b5 	bne.w	800d0b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2206      	movs	r2, #6
 800cf52:	751a      	strb	r2, [r3, #20]
      break;
 800cf54:	e0b0      	b.n	800d0b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f9ca 	bl	800d2f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cf5c:	4b60      	ldr	r3, [pc, #384]	; (800d0e0 <tcp_process+0x7d8>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	f003 0320 	and.w	r3, r3, #32
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f000 80a9 	beq.w	800d0bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	8b5b      	ldrh	r3, [r3, #26]
 800cf6e:	f043 0302 	orr.w	r3, r3, #2
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f7fe fd3b 	bl	800b9f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cf7e:	4b59      	ldr	r3, [pc, #356]	; (800d0e4 <tcp_process+0x7dc>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d105      	bne.n	800cf94 <tcp_process+0x68c>
 800cf88:	4b56      	ldr	r3, [pc, #344]	; (800d0e4 <tcp_process+0x7dc>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68db      	ldr	r3, [r3, #12]
 800cf8e:	4a55      	ldr	r2, [pc, #340]	; (800d0e4 <tcp_process+0x7dc>)
 800cf90:	6013      	str	r3, [r2, #0]
 800cf92:	e013      	b.n	800cfbc <tcp_process+0x6b4>
 800cf94:	4b53      	ldr	r3, [pc, #332]	; (800d0e4 <tcp_process+0x7dc>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	613b      	str	r3, [r7, #16]
 800cf9a:	e00c      	b.n	800cfb6 <tcp_process+0x6ae>
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d104      	bne.n	800cfb0 <tcp_process+0x6a8>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	68da      	ldr	r2, [r3, #12]
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	60da      	str	r2, [r3, #12]
 800cfae:	e005      	b.n	800cfbc <tcp_process+0x6b4>
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	613b      	str	r3, [r7, #16]
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1ef      	bne.n	800cf9c <tcp_process+0x694>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	60da      	str	r2, [r3, #12]
 800cfc2:	4b43      	ldr	r3, [pc, #268]	; (800d0d0 <tcp_process+0x7c8>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	220a      	movs	r2, #10
 800cfcc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cfce:	4b41      	ldr	r3, [pc, #260]	; (800d0d4 <tcp_process+0x7cc>)
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	60da      	str	r2, [r3, #12]
 800cfd6:	4a3f      	ldr	r2, [pc, #252]	; (800d0d4 <tcp_process+0x7cc>)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	f003 f8e8 	bl	80101b0 <tcp_timer_needed>
      }
      break;
 800cfe0:	e06c      	b.n	800d0bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f984 	bl	800d2f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cfe8:	4b3b      	ldr	r3, [pc, #236]	; (800d0d8 <tcp_process+0x7d0>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	f003 0310 	and.w	r3, r3, #16
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d065      	beq.n	800d0c0 <tcp_process+0x7b8>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cff8:	4b38      	ldr	r3, [pc, #224]	; (800d0dc <tcp_process+0x7d4>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d15f      	bne.n	800d0c0 <tcp_process+0x7b8>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d004:	2b00      	cmp	r3, #0
 800d006:	d15b      	bne.n	800d0c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7fe fcf3 	bl	800b9f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d00e:	4b35      	ldr	r3, [pc, #212]	; (800d0e4 <tcp_process+0x7dc>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	429a      	cmp	r2, r3
 800d016:	d105      	bne.n	800d024 <tcp_process+0x71c>
 800d018:	4b32      	ldr	r3, [pc, #200]	; (800d0e4 <tcp_process+0x7dc>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	4a31      	ldr	r2, [pc, #196]	; (800d0e4 <tcp_process+0x7dc>)
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	e013      	b.n	800d04c <tcp_process+0x744>
 800d024:	4b2f      	ldr	r3, [pc, #188]	; (800d0e4 <tcp_process+0x7dc>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	60fb      	str	r3, [r7, #12]
 800d02a:	e00c      	b.n	800d046 <tcp_process+0x73e>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	429a      	cmp	r2, r3
 800d034:	d104      	bne.n	800d040 <tcp_process+0x738>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68da      	ldr	r2, [r3, #12]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	60da      	str	r2, [r3, #12]
 800d03e:	e005      	b.n	800d04c <tcp_process+0x744>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	60fb      	str	r3, [r7, #12]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1ef      	bne.n	800d02c <tcp_process+0x724>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	60da      	str	r2, [r3, #12]
 800d052:	4b1f      	ldr	r3, [pc, #124]	; (800d0d0 <tcp_process+0x7c8>)
 800d054:	2201      	movs	r2, #1
 800d056:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	220a      	movs	r2, #10
 800d05c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d05e:	4b1d      	ldr	r3, [pc, #116]	; (800d0d4 <tcp_process+0x7cc>)
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	60da      	str	r2, [r3, #12]
 800d066:	4a1b      	ldr	r2, [pc, #108]	; (800d0d4 <tcp_process+0x7cc>)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	f003 f8a0 	bl	80101b0 <tcp_timer_needed>
      }
      break;
 800d070:	e026      	b.n	800d0c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f93c 	bl	800d2f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d078:	4b17      	ldr	r3, [pc, #92]	; (800d0d8 <tcp_process+0x7d0>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	f003 0310 	and.w	r3, r3, #16
 800d080:	2b00      	cmp	r3, #0
 800d082:	d01f      	beq.n	800d0c4 <tcp_process+0x7bc>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d088:	4b14      	ldr	r3, [pc, #80]	; (800d0dc <tcp_process+0x7d4>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d119      	bne.n	800d0c4 <tcp_process+0x7bc>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d094:	2b00      	cmp	r3, #0
 800d096:	d115      	bne.n	800d0c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800d098:	4b11      	ldr	r3, [pc, #68]	; (800d0e0 <tcp_process+0x7d8>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f043 0310 	orr.w	r3, r3, #16
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <tcp_process+0x7d8>)
 800d0a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800d0a6:	e00d      	b.n	800d0c4 <tcp_process+0x7bc>
    default:
      break;
 800d0a8:	bf00      	nop
 800d0aa:	e00c      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0ac:	bf00      	nop
 800d0ae:	e00a      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0b0:	bf00      	nop
 800d0b2:	e008      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0b4:	bf00      	nop
 800d0b6:	e006      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0b8:	bf00      	nop
 800d0ba:	e004      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0bc:	bf00      	nop
 800d0be:	e002      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0c0:	bf00      	nop
 800d0c2:	e000      	b.n	800d0c6 <tcp_process+0x7be>
      break;
 800d0c4:	bf00      	nop
  }
  return ERR_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3724      	adds	r7, #36	; 0x24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd90      	pop	{r4, r7, pc}
 800d0d0:	200075b8 	.word	0x200075b8
 800d0d4:	200075cc 	.word	0x200075cc
 800d0d8:	20000578 	.word	0x20000578
 800d0dc:	20000570 	.word	0x20000570
 800d0e0:	20000579 	.word	0x20000579
 800d0e4:	200075bc 	.word	0x200075bc

0800d0e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d0e8:	b590      	push	{r4, r7, lr}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d106      	bne.n	800d106 <tcp_oos_insert_segment+0x1e>
 800d0f8:	4b3b      	ldr	r3, [pc, #236]	; (800d1e8 <tcp_oos_insert_segment+0x100>)
 800d0fa:	f240 421f 	movw	r2, #1055	; 0x41f
 800d0fe:	493b      	ldr	r1, [pc, #236]	; (800d1ec <tcp_oos_insert_segment+0x104>)
 800d100:	483b      	ldr	r0, [pc, #236]	; (800d1f0 <tcp_oos_insert_segment+0x108>)
 800d102:	f005 feb5 	bl	8012e70 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	899b      	ldrh	r3, [r3, #12]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fb f8a8 	bl	8008264 <lwip_htons>
 800d114:	4603      	mov	r3, r0
 800d116:	b2db      	uxtb	r3, r3
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d028      	beq.n	800d172 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d120:	6838      	ldr	r0, [r7, #0]
 800d122:	f7fe f979 	bl	800b418 <tcp_segs_free>
    next = NULL;
 800d126:	2300      	movs	r3, #0
 800d128:	603b      	str	r3, [r7, #0]
 800d12a:	e056      	b.n	800d1da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	899b      	ldrh	r3, [r3, #12]
 800d132:	b29b      	uxth	r3, r3
 800d134:	4618      	mov	r0, r3
 800d136:	f7fb f895 	bl	8008264 <lwip_htons>
 800d13a:	4603      	mov	r3, r0
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00d      	beq.n	800d162 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	899b      	ldrh	r3, [r3, #12]
 800d14c:	b29c      	uxth	r4, r3
 800d14e:	2001      	movs	r0, #1
 800d150:	f7fb f888 	bl	8008264 <lwip_htons>
 800d154:	4603      	mov	r3, r0
 800d156:	461a      	mov	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	4322      	orrs	r2, r4
 800d15e:	b292      	uxth	r2, r2
 800d160:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f7fe f968 	bl	800b442 <tcp_seg_free>
    while (next &&
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d00e      	beq.n	800d196 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	891b      	ldrh	r3, [r3, #8]
 800d17c:	461a      	mov	r2, r3
 800d17e:	4b1d      	ldr	r3, [pc, #116]	; (800d1f4 <tcp_oos_insert_segment+0x10c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	441a      	add	r2, r3
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	6839      	ldr	r1, [r7, #0]
 800d18c:	8909      	ldrh	r1, [r1, #8]
 800d18e:	440b      	add	r3, r1
 800d190:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d192:	2b00      	cmp	r3, #0
 800d194:	daca      	bge.n	800d12c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d01e      	beq.n	800d1da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	891b      	ldrh	r3, [r3, #8]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b14      	ldr	r3, [pc, #80]	; (800d1f4 <tcp_oos_insert_segment+0x10c>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	441a      	add	r2, r3
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dd12      	ble.n	800d1da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	4b0d      	ldr	r3, [pc, #52]	; (800d1f4 <tcp_oos_insert_segment+0x10c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	685a      	ldr	r2, [r3, #4]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	891b      	ldrh	r3, [r3, #8]
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	f7fc fa05 	bl	80095e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	683a      	ldr	r2, [r7, #0]
 800d1de:	601a      	str	r2, [r3, #0]
}
 800d1e0:	bf00      	nop
 800d1e2:	3714      	adds	r7, #20
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd90      	pop	{r4, r7, pc}
 800d1e8:	080163b4 	.word	0x080163b4
 800d1ec:	08016674 	.word	0x08016674
 800d1f0:	08016400 	.word	0x08016400
 800d1f4:	2000056c 	.word	0x2000056c

0800d1f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800d1f8:	b5b0      	push	{r4, r5, r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800d206:	e03e      	b.n	800d286 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	4618      	mov	r0, r3
 800d218:	f7fc fbf2 	bl	8009a00 <pbuf_clen>
 800d21c:	4603      	mov	r3, r0
 800d21e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d226:	8a7a      	ldrh	r2, [r7, #18]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d906      	bls.n	800d23a <tcp_free_acked_segments+0x42>
 800d22c:	4b2a      	ldr	r3, [pc, #168]	; (800d2d8 <tcp_free_acked_segments+0xe0>)
 800d22e:	f240 4257 	movw	r2, #1111	; 0x457
 800d232:	492a      	ldr	r1, [pc, #168]	; (800d2dc <tcp_free_acked_segments+0xe4>)
 800d234:	482a      	ldr	r0, [pc, #168]	; (800d2e0 <tcp_free_acked_segments+0xe8>)
 800d236:	f005 fe1b 	bl	8012e70 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800d240:	8a7b      	ldrh	r3, [r7, #18]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	b29a      	uxth	r2, r3
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	891a      	ldrh	r2, [r3, #8]
 800d250:	4b24      	ldr	r3, [pc, #144]	; (800d2e4 <tcp_free_acked_segments+0xec>)
 800d252:	881b      	ldrh	r3, [r3, #0]
 800d254:	4413      	add	r3, r2
 800d256:	b29a      	uxth	r2, r3
 800d258:	4b22      	ldr	r3, [pc, #136]	; (800d2e4 <tcp_free_acked_segments+0xec>)
 800d25a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800d25c:	6978      	ldr	r0, [r7, #20]
 800d25e:	f7fe f8f0 	bl	800b442 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00c      	beq.n	800d286 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d109      	bne.n	800d286 <tcp_free_acked_segments+0x8e>
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <tcp_free_acked_segments+0x8e>
 800d278:	4b17      	ldr	r3, [pc, #92]	; (800d2d8 <tcp_free_acked_segments+0xe0>)
 800d27a:	f240 4261 	movw	r2, #1121	; 0x461
 800d27e:	491a      	ldr	r1, [pc, #104]	; (800d2e8 <tcp_free_acked_segments+0xf0>)
 800d280:	4817      	ldr	r0, [pc, #92]	; (800d2e0 <tcp_free_acked_segments+0xe8>)
 800d282:	f005 fdf5 	bl	8012e70 <iprintf>
  while (seg_list != NULL &&
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d020      	beq.n	800d2ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	68db      	ldr	r3, [r3, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	4618      	mov	r0, r3
 800d294:	f7fa fffb 	bl	800828e <lwip_htonl>
 800d298:	4604      	mov	r4, r0
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	891b      	ldrh	r3, [r3, #8]
 800d29e:	461d      	mov	r5, r3
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	899b      	ldrh	r3, [r3, #12]
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fa ffdb 	bl	8008264 <lwip_htons>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	f003 0303 	and.w	r3, r3, #3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <tcp_free_acked_segments+0xc6>
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e000      	b.n	800d2c0 <tcp_free_acked_segments+0xc8>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	442b      	add	r3, r5
 800d2c2:	18e2      	adds	r2, r4, r3
 800d2c4:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <tcp_free_acked_segments+0xf4>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	dd9c      	ble.n	800d208 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800d2ce:	68bb      	ldr	r3, [r7, #8]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bdb0      	pop	{r4, r5, r7, pc}
 800d2d8:	080163b4 	.word	0x080163b4
 800d2dc:	0801669c 	.word	0x0801669c
 800d2e0:	08016400 	.word	0x08016400
 800d2e4:	20000574 	.word	0x20000574
 800d2e8:	080166c4 	.word	0x080166c4
 800d2ec:	20000570 	.word	0x20000570

0800d2f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d2f0:	b5b0      	push	{r4, r5, r7, lr}
 800d2f2:	b094      	sub	sp, #80	; 0x50
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d106      	bne.n	800d310 <tcp_receive+0x20>
 800d302:	4ba6      	ldr	r3, [pc, #664]	; (800d59c <tcp_receive+0x2ac>)
 800d304:	f240 427b 	movw	r2, #1147	; 0x47b
 800d308:	49a5      	ldr	r1, [pc, #660]	; (800d5a0 <tcp_receive+0x2b0>)
 800d30a:	48a6      	ldr	r0, [pc, #664]	; (800d5a4 <tcp_receive+0x2b4>)
 800d30c:	f005 fdb0 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	7d1b      	ldrb	r3, [r3, #20]
 800d314:	2b03      	cmp	r3, #3
 800d316:	d806      	bhi.n	800d326 <tcp_receive+0x36>
 800d318:	4ba0      	ldr	r3, [pc, #640]	; (800d59c <tcp_receive+0x2ac>)
 800d31a:	f240 427c 	movw	r2, #1148	; 0x47c
 800d31e:	49a2      	ldr	r1, [pc, #648]	; (800d5a8 <tcp_receive+0x2b8>)
 800d320:	48a0      	ldr	r0, [pc, #640]	; (800d5a4 <tcp_receive+0x2b4>)
 800d322:	f005 fda5 	bl	8012e70 <iprintf>

  if (flags & TCP_ACK) {
 800d326:	4ba1      	ldr	r3, [pc, #644]	; (800d5ac <tcp_receive+0x2bc>)
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	f003 0310 	and.w	r3, r3, #16
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 8263 	beq.w	800d7fa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d33a:	461a      	mov	r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d340:	4413      	add	r3, r2
 800d342:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d348:	4b99      	ldr	r3, [pc, #612]	; (800d5b0 <tcp_receive+0x2c0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	db1b      	blt.n	800d38a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d356:	4b96      	ldr	r3, [pc, #600]	; (800d5b0 <tcp_receive+0x2c0>)
 800d358:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d106      	bne.n	800d36c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d362:	4b94      	ldr	r3, [pc, #592]	; (800d5b4 <tcp_receive+0x2c4>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	db0e      	blt.n	800d38a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d370:	4b90      	ldr	r3, [pc, #576]	; (800d5b4 <tcp_receive+0x2c4>)
 800d372:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d374:	429a      	cmp	r2, r3
 800d376:	d125      	bne.n	800d3c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d378:	4b8f      	ldr	r3, [pc, #572]	; (800d5b8 <tcp_receive+0x2c8>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	89db      	ldrh	r3, [r3, #14]
 800d37e:	b29a      	uxth	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d386:	429a      	cmp	r2, r3
 800d388:	d91c      	bls.n	800d3c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d38a:	4b8b      	ldr	r3, [pc, #556]	; (800d5b8 <tcp_receive+0x2c8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	89db      	ldrh	r3, [r3, #14]
 800d390:	b29a      	uxth	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d205      	bcs.n	800d3b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800d3b4:	4b7e      	ldr	r3, [pc, #504]	; (800d5b0 <tcp_receive+0x2c0>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800d3bc:	4b7d      	ldr	r3, [pc, #500]	; (800d5b4 <tcp_receive+0x2c4>)
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d3c4:	4b7b      	ldr	r3, [pc, #492]	; (800d5b4 <tcp_receive+0x2c4>)
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	dc58      	bgt.n	800d484 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d3d2:	4b7a      	ldr	r3, [pc, #488]	; (800d5bc <tcp_receive+0x2cc>)
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d14b      	bne.n	800d472 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800d3e4:	4413      	add	r3, r2
 800d3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d142      	bne.n	800d472 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	db3d      	blt.n	800d472 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3fa:	4b6e      	ldr	r3, [pc, #440]	; (800d5b4 <tcp_receive+0x2c4>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d137      	bne.n	800d472 <tcp_receive+0x182>
              found_dupack = 1;
 800d402:	2301      	movs	r3, #1
 800d404:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d40c:	2bff      	cmp	r3, #255	; 0xff
 800d40e:	d007      	beq.n	800d420 <tcp_receive+0x130>
                ++pcb->dupacks;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d416:	3301      	adds	r3, #1
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d426:	2b03      	cmp	r3, #3
 800d428:	d91b      	bls.n	800d462 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d434:	4413      	add	r3, r2
 800d436:	b29a      	uxth	r2, r3
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d43e:	429a      	cmp	r2, r3
 800d440:	d30a      	bcc.n	800d458 <tcp_receive+0x168>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d44c:	4413      	add	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d456:	e004      	b.n	800d462 <tcp_receive+0x172>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d45e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d902      	bls.n	800d472 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f002 fb41 	bl	800faf4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d474:	2b00      	cmp	r3, #0
 800d476:	f040 8160 	bne.w	800d73a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d482:	e15a      	b.n	800d73a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d484:	4b4b      	ldr	r3, [pc, #300]	; (800d5b4 <tcp_receive+0x2c4>)
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	3b01      	subs	r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	f2c0 814d 	blt.w	800d730 <tcp_receive+0x440>
 800d496:	4b47      	ldr	r3, [pc, #284]	; (800d5b4 <tcp_receive+0x2c4>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	f300 8145 	bgt.w	800d730 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	8b5b      	ldrh	r3, [r3, #26]
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d010      	beq.n	800d4d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	8b5b      	ldrh	r3, [r3, #26]
 800d4b6:	f023 0304 	bic.w	r3, r3, #4
 800d4ba:	b29a      	uxth	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d4e2:	10db      	asrs	r3, r3, #3
 800d4e4:	b21b      	sxth	r3, r3
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	4413      	add	r3, r2
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	b21a      	sxth	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d4fc:	4b2d      	ldr	r3, [pc, #180]	; (800d5b4 <tcp_receive+0x2c4>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	b29a      	uxth	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d506:	b29b      	uxth	r3, r3
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d514:	4b27      	ldr	r3, [pc, #156]	; (800d5b4 <tcp_receive+0x2c4>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	7d1b      	ldrb	r3, [r3, #20]
 800d520:	2b03      	cmp	r3, #3
 800d522:	f240 8096 	bls.w	800d652 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d532:	429a      	cmp	r2, r3
 800d534:	d244      	bcs.n	800d5c0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	8b5b      	ldrh	r3, [r3, #26]
 800d53a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <tcp_receive+0x256>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <tcp_receive+0x258>
 800d546:	2302      	movs	r3, #2
 800d548:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d54c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d550:	b29a      	uxth	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d556:	fb12 f303 	smulbb	r3, r2, r3
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d55e:	4293      	cmp	r3, r2
 800d560:	bf28      	it	cs
 800d562:	4613      	movcs	r3, r2
 800d564:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d56c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d56e:	4413      	add	r3, r2
 800d570:	b29a      	uxth	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d578:	429a      	cmp	r2, r3
 800d57a:	d309      	bcc.n	800d590 <tcp_receive+0x2a0>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d584:	4413      	add	r3, r2
 800d586:	b29a      	uxth	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d58e:	e060      	b.n	800d652 <tcp_receive+0x362>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d59a:	e05a      	b.n	800d652 <tcp_receive+0x362>
 800d59c:	080163b4 	.word	0x080163b4
 800d5a0:	080166e4 	.word	0x080166e4
 800d5a4:	08016400 	.word	0x08016400
 800d5a8:	08016700 	.word	0x08016700
 800d5ac:	20000578 	.word	0x20000578
 800d5b0:	2000056c 	.word	0x2000056c
 800d5b4:	20000570 	.word	0x20000570
 800d5b8:	2000055c 	.word	0x2000055c
 800d5bc:	20000576 	.word	0x20000576
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d5c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5c8:	4413      	add	r3, r2
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d309      	bcc.n	800d5ea <tcp_receive+0x2fa>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d5dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5de:	4413      	add	r3, r2
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d5e8:	e004      	b.n	800d5f4 <tcp_receive+0x304>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d600:	429a      	cmp	r2, r3
 800d602:	d326      	bcc.n	800d652 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	b29a      	uxth	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d624:	4413      	add	r3, r2
 800d626:	b29a      	uxth	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d62e:	429a      	cmp	r2, r3
 800d630:	d30a      	bcc.n	800d648 <tcp_receive+0x358>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d63c:	4413      	add	r3, r2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d646:	e004      	b.n	800d652 <tcp_receive+0x362>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d64e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d65a:	4a98      	ldr	r2, [pc, #608]	; (800d8bc <tcp_receive+0x5cc>)
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff fdcb 	bl	800d1f8 <tcp_free_acked_segments>
 800d662:	4602      	mov	r2, r0
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d670:	4a93      	ldr	r2, [pc, #588]	; (800d8c0 <tcp_receive+0x5d0>)
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f7ff fdc0 	bl	800d1f8 <tcp_free_acked_segments>
 800d678:	4602      	mov	r2, r0
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d682:	2b00      	cmp	r3, #0
 800d684:	d104      	bne.n	800d690 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d68c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d68e:	e002      	b.n	800d696 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d103      	bne.n	800d6ac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d6b2:	4b84      	ldr	r3, [pc, #528]	; (800d8c4 <tcp_receive+0x5d4>)
 800d6b4:	881b      	ldrh	r3, [r3, #0]
 800d6b6:	4413      	add	r3, r2
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	8b5b      	ldrh	r3, [r3, #26]
 800d6c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d035      	beq.n	800d738 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d118      	bne.n	800d706 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00c      	beq.n	800d6f6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6e4:	68db      	ldr	r3, [r3, #12]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fa fdd0 	bl	800828e <lwip_htonl>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	dc20      	bgt.n	800d738 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	8b5b      	ldrh	r3, [r3, #26]
 800d6fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d704:	e018      	b.n	800d738 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	685b      	ldr	r3, [r3, #4]
 800d712:	4618      	mov	r0, r3
 800d714:	f7fa fdbb 	bl	800828e <lwip_htonl>
 800d718:	4603      	mov	r3, r0
 800d71a:	1ae3      	subs	r3, r4, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	dc0b      	bgt.n	800d738 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	8b5b      	ldrh	r3, [r3, #26]
 800d724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d728:	b29a      	uxth	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d72e:	e003      	b.n	800d738 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f002 fbcd 	bl	800fed0 <tcp_send_empty_ack>
 800d736:	e000      	b.n	800d73a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d738:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d05b      	beq.n	800d7fa <tcp_receive+0x50a>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d746:	4b60      	ldr	r3, [pc, #384]	; (800d8c8 <tcp_receive+0x5d8>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	da54      	bge.n	800d7fa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d750:	4b5e      	ldr	r3, [pc, #376]	; (800d8cc <tcp_receive+0x5dc>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	b29a      	uxth	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	1ad3      	subs	r3, r2, r3
 800d75e:	b29b      	uxth	r3, r3
 800d760:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d764:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d76e:	10db      	asrs	r3, r3, #3
 800d770:	b21b      	sxth	r3, r3
 800d772:	b29b      	uxth	r3, r3
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	b29b      	uxth	r3, r3
 800d778:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d782:	b29a      	uxth	r2, r3
 800d784:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d788:	4413      	add	r3, r2
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	b21a      	sxth	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d792:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d796:	2b00      	cmp	r3, #0
 800d798:	da05      	bge.n	800d7a6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800d79a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d79e:	425b      	negs	r3, r3
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d7a6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7b0:	109b      	asrs	r3, r3, #2
 800d7b2:	b21b      	sxth	r3, r3
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d7ca:	4413      	add	r3, r2
 800d7cc:	b29b      	uxth	r3, r3
 800d7ce:	b21a      	sxth	r2, r3
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d7da:	10db      	asrs	r3, r3, #3
 800d7dc:	b21b      	sxth	r3, r3
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	4413      	add	r3, r2
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	b21a      	sxth	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d7fa:	4b35      	ldr	r3, [pc, #212]	; (800d8d0 <tcp_receive+0x5e0>)
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 84e1 	beq.w	800e1c6 <tcp_receive+0xed6>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	7d1b      	ldrb	r3, [r3, #20]
 800d808:	2b06      	cmp	r3, #6
 800d80a:	f200 84dc 	bhi.w	800e1c6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d812:	4b30      	ldr	r3, [pc, #192]	; (800d8d4 <tcp_receive+0x5e4>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	3b01      	subs	r3, #1
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f2c0 808e 	blt.w	800d93c <tcp_receive+0x64c>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d824:	4b2a      	ldr	r3, [pc, #168]	; (800d8d0 <tcp_receive+0x5e0>)
 800d826:	881b      	ldrh	r3, [r3, #0]
 800d828:	4619      	mov	r1, r3
 800d82a:	4b2a      	ldr	r3, [pc, #168]	; (800d8d4 <tcp_receive+0x5e4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	440b      	add	r3, r1
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	3301      	adds	r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	f300 8081 	bgt.w	800d93c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d83a:	4b27      	ldr	r3, [pc, #156]	; (800d8d8 <tcp_receive+0x5e8>)
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d844:	4b23      	ldr	r3, [pc, #140]	; (800d8d4 <tcp_receive+0x5e4>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d84c:	4b22      	ldr	r3, [pc, #136]	; (800d8d8 <tcp_receive+0x5e8>)
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d106      	bne.n	800d862 <tcp_receive+0x572>
 800d854:	4b21      	ldr	r3, [pc, #132]	; (800d8dc <tcp_receive+0x5ec>)
 800d856:	f240 5294 	movw	r2, #1428	; 0x594
 800d85a:	4921      	ldr	r1, [pc, #132]	; (800d8e0 <tcp_receive+0x5f0>)
 800d85c:	4821      	ldr	r0, [pc, #132]	; (800d8e4 <tcp_receive+0x5f4>)
 800d85e:	f005 fb07 	bl	8012e70 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d868:	4293      	cmp	r3, r2
 800d86a:	d906      	bls.n	800d87a <tcp_receive+0x58a>
 800d86c:	4b1b      	ldr	r3, [pc, #108]	; (800d8dc <tcp_receive+0x5ec>)
 800d86e:	f240 5295 	movw	r2, #1429	; 0x595
 800d872:	491d      	ldr	r1, [pc, #116]	; (800d8e8 <tcp_receive+0x5f8>)
 800d874:	481b      	ldr	r0, [pc, #108]	; (800d8e4 <tcp_receive+0x5f4>)
 800d876:	f005 fafb 	bl	8012e70 <iprintf>
      off = (u16_t)off32;
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d880:	4b15      	ldr	r3, [pc, #84]	; (800d8d8 <tcp_receive+0x5e8>)
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	891b      	ldrh	r3, [r3, #8]
 800d886:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d906      	bls.n	800d89c <tcp_receive+0x5ac>
 800d88e:	4b13      	ldr	r3, [pc, #76]	; (800d8dc <tcp_receive+0x5ec>)
 800d890:	f240 5297 	movw	r2, #1431	; 0x597
 800d894:	4915      	ldr	r1, [pc, #84]	; (800d8ec <tcp_receive+0x5fc>)
 800d896:	4813      	ldr	r0, [pc, #76]	; (800d8e4 <tcp_receive+0x5f4>)
 800d898:	f005 faea 	bl	8012e70 <iprintf>
      inseg.len -= off;
 800d89c:	4b0e      	ldr	r3, [pc, #56]	; (800d8d8 <tcp_receive+0x5e8>)
 800d89e:	891a      	ldrh	r2, [r3, #8]
 800d8a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8a4:	1ad3      	subs	r3, r2, r3
 800d8a6:	b29a      	uxth	r2, r3
 800d8a8:	4b0b      	ldr	r3, [pc, #44]	; (800d8d8 <tcp_receive+0x5e8>)
 800d8aa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d8ac:	4b0a      	ldr	r3, [pc, #40]	; (800d8d8 <tcp_receive+0x5e8>)
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	891a      	ldrh	r2, [r3, #8]
 800d8b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d8ba:	e029      	b.n	800d910 <tcp_receive+0x620>
 800d8bc:	0801671c 	.word	0x0801671c
 800d8c0:	08016724 	.word	0x08016724
 800d8c4:	20000574 	.word	0x20000574
 800d8c8:	20000570 	.word	0x20000570
 800d8cc:	200075c0 	.word	0x200075c0
 800d8d0:	20000576 	.word	0x20000576
 800d8d4:	2000056c 	.word	0x2000056c
 800d8d8:	2000054c 	.word	0x2000054c
 800d8dc:	080163b4 	.word	0x080163b4
 800d8e0:	0801672c 	.word	0x0801672c
 800d8e4:	08016400 	.word	0x08016400
 800d8e8:	0801673c 	.word	0x0801673c
 800d8ec:	0801674c 	.word	0x0801674c
        off -= p->len;
 800d8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8f2:	895b      	ldrh	r3, [r3, #10]
 800d8f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d8fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d900:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d902:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d906:	2200      	movs	r2, #0
 800d908:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d912:	895b      	ldrh	r3, [r3, #10]
 800d914:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d918:	429a      	cmp	r2, r3
 800d91a:	d8e9      	bhi.n	800d8f0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d91c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d920:	4619      	mov	r1, r3
 800d922:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d924:	f7fb ff5e 	bl	80097e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92c:	4a91      	ldr	r2, [pc, #580]	; (800db74 <tcp_receive+0x884>)
 800d92e:	6013      	str	r3, [r2, #0]
 800d930:	4b91      	ldr	r3, [pc, #580]	; (800db78 <tcp_receive+0x888>)
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	4a8f      	ldr	r2, [pc, #572]	; (800db74 <tcp_receive+0x884>)
 800d936:	6812      	ldr	r2, [r2, #0]
 800d938:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d93a:	e00d      	b.n	800d958 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d93c:	4b8d      	ldr	r3, [pc, #564]	; (800db74 <tcp_receive+0x884>)
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	da06      	bge.n	800d958 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	8b5b      	ldrh	r3, [r3, #26]
 800d94e:	f043 0302 	orr.w	r3, r3, #2
 800d952:	b29a      	uxth	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d958:	4b86      	ldr	r3, [pc, #536]	; (800db74 <tcp_receive+0x884>)
 800d95a:	681a      	ldr	r2, [r3, #0]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	2b00      	cmp	r3, #0
 800d964:	f2c0 842a 	blt.w	800e1bc <tcp_receive+0xecc>
 800d968:	4b82      	ldr	r3, [pc, #520]	; (800db74 <tcp_receive+0x884>)
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d970:	6879      	ldr	r1, [r7, #4]
 800d972:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d974:	440b      	add	r3, r1
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	3301      	adds	r3, #1
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	f300 841e 	bgt.w	800e1bc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d984:	4b7b      	ldr	r3, [pc, #492]	; (800db74 <tcp_receive+0x884>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	f040 829a 	bne.w	800dec2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d98e:	4b7a      	ldr	r3, [pc, #488]	; (800db78 <tcp_receive+0x888>)
 800d990:	891c      	ldrh	r4, [r3, #8]
 800d992:	4b79      	ldr	r3, [pc, #484]	; (800db78 <tcp_receive+0x888>)
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	899b      	ldrh	r3, [r3, #12]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fa fc62 	bl	8008264 <lwip_htons>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	f003 0303 	and.w	r3, r3, #3
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <tcp_receive+0x6c0>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <tcp_receive+0x6c2>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	4423      	add	r3, r4
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	4b71      	ldr	r3, [pc, #452]	; (800db7c <tcp_receive+0x88c>)
 800d9b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9be:	4b6f      	ldr	r3, [pc, #444]	; (800db7c <tcp_receive+0x88c>)
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d275      	bcs.n	800dab2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d9c6:	4b6c      	ldr	r3, [pc, #432]	; (800db78 <tcp_receive+0x888>)
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	899b      	ldrh	r3, [r3, #12]
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fa fc48 	bl	8008264 <lwip_htons>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d01f      	beq.n	800da20 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d9e0:	4b65      	ldr	r3, [pc, #404]	; (800db78 <tcp_receive+0x888>)
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	899b      	ldrh	r3, [r3, #12]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	b21b      	sxth	r3, r3
 800d9ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d9ee:	b21c      	sxth	r4, r3
 800d9f0:	4b61      	ldr	r3, [pc, #388]	; (800db78 <tcp_receive+0x888>)
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	899b      	ldrh	r3, [r3, #12]
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fa fc33 	bl	8008264 <lwip_htons>
 800d9fe:	4603      	mov	r3, r0
 800da00:	b2db      	uxtb	r3, r3
 800da02:	b29b      	uxth	r3, r3
 800da04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800da08:	b29b      	uxth	r3, r3
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fa fc2a 	bl	8008264 <lwip_htons>
 800da10:	4603      	mov	r3, r0
 800da12:	b21b      	sxth	r3, r3
 800da14:	4323      	orrs	r3, r4
 800da16:	b21a      	sxth	r2, r3
 800da18:	4b57      	ldr	r3, [pc, #348]	; (800db78 <tcp_receive+0x888>)
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	b292      	uxth	r2, r2
 800da1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800da24:	4b54      	ldr	r3, [pc, #336]	; (800db78 <tcp_receive+0x888>)
 800da26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800da28:	4b53      	ldr	r3, [pc, #332]	; (800db78 <tcp_receive+0x888>)
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	899b      	ldrh	r3, [r3, #12]
 800da2e:	b29b      	uxth	r3, r3
 800da30:	4618      	mov	r0, r3
 800da32:	f7fa fc17 	bl	8008264 <lwip_htons>
 800da36:	4603      	mov	r3, r0
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	f003 0302 	and.w	r3, r3, #2
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d005      	beq.n	800da4e <tcp_receive+0x75e>
            inseg.len -= 1;
 800da42:	4b4d      	ldr	r3, [pc, #308]	; (800db78 <tcp_receive+0x888>)
 800da44:	891b      	ldrh	r3, [r3, #8]
 800da46:	3b01      	subs	r3, #1
 800da48:	b29a      	uxth	r2, r3
 800da4a:	4b4b      	ldr	r3, [pc, #300]	; (800db78 <tcp_receive+0x888>)
 800da4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800da4e:	4b4a      	ldr	r3, [pc, #296]	; (800db78 <tcp_receive+0x888>)
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	4a49      	ldr	r2, [pc, #292]	; (800db78 <tcp_receive+0x888>)
 800da54:	8912      	ldrh	r2, [r2, #8]
 800da56:	4611      	mov	r1, r2
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fb fdc3 	bl	80095e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800da5e:	4b46      	ldr	r3, [pc, #280]	; (800db78 <tcp_receive+0x888>)
 800da60:	891c      	ldrh	r4, [r3, #8]
 800da62:	4b45      	ldr	r3, [pc, #276]	; (800db78 <tcp_receive+0x888>)
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	899b      	ldrh	r3, [r3, #12]
 800da68:	b29b      	uxth	r3, r3
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fa fbfa 	bl	8008264 <lwip_htons>
 800da70:	4603      	mov	r3, r0
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0303 	and.w	r3, r3, #3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d001      	beq.n	800da80 <tcp_receive+0x790>
 800da7c:	2301      	movs	r3, #1
 800da7e:	e000      	b.n	800da82 <tcp_receive+0x792>
 800da80:	2300      	movs	r3, #0
 800da82:	4423      	add	r3, r4
 800da84:	b29a      	uxth	r2, r3
 800da86:	4b3d      	ldr	r3, [pc, #244]	; (800db7c <tcp_receive+0x88c>)
 800da88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800da8a:	4b3c      	ldr	r3, [pc, #240]	; (800db7c <tcp_receive+0x88c>)
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	461a      	mov	r2, r3
 800da90:	4b38      	ldr	r3, [pc, #224]	; (800db74 <tcp_receive+0x884>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	441a      	add	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da9e:	440b      	add	r3, r1
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d006      	beq.n	800dab2 <tcp_receive+0x7c2>
 800daa4:	4b36      	ldr	r3, [pc, #216]	; (800db80 <tcp_receive+0x890>)
 800daa6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800daaa:	4936      	ldr	r1, [pc, #216]	; (800db84 <tcp_receive+0x894>)
 800daac:	4836      	ldr	r0, [pc, #216]	; (800db88 <tcp_receive+0x898>)
 800daae:	f005 f9df 	bl	8012e70 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 80e7 	beq.w	800dc8a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dabc:	4b2e      	ldr	r3, [pc, #184]	; (800db78 <tcp_receive+0x888>)
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	899b      	ldrh	r3, [r3, #12]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7fa fbcd 	bl	8008264 <lwip_htons>
 800daca:	4603      	mov	r3, r0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d010      	beq.n	800daf8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800dad6:	e00a      	b.n	800daee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dadc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f7fd fcaa 	bl	800b442 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1f0      	bne.n	800dad8 <tcp_receive+0x7e8>
 800daf6:	e0c8      	b.n	800dc8a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dafc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800dafe:	e052      	b.n	800dba6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800db00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	899b      	ldrh	r3, [r3, #12]
 800db06:	b29b      	uxth	r3, r3
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fa fbab 	bl	8008264 <lwip_htons>
 800db0e:	4603      	mov	r3, r0
 800db10:	b2db      	uxtb	r3, r3
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	2b00      	cmp	r3, #0
 800db18:	d03d      	beq.n	800db96 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800db1a:	4b17      	ldr	r3, [pc, #92]	; (800db78 <tcp_receive+0x888>)
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	899b      	ldrh	r3, [r3, #12]
 800db20:	b29b      	uxth	r3, r3
 800db22:	4618      	mov	r0, r3
 800db24:	f7fa fb9e 	bl	8008264 <lwip_htons>
 800db28:	4603      	mov	r3, r0
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800db30:	2b00      	cmp	r3, #0
 800db32:	d130      	bne.n	800db96 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800db34:	4b10      	ldr	r3, [pc, #64]	; (800db78 <tcp_receive+0x888>)
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	899b      	ldrh	r3, [r3, #12]
 800db3a:	b29c      	uxth	r4, r3
 800db3c:	2001      	movs	r0, #1
 800db3e:	f7fa fb91 	bl	8008264 <lwip_htons>
 800db42:	4603      	mov	r3, r0
 800db44:	461a      	mov	r2, r3
 800db46:	4b0c      	ldr	r3, [pc, #48]	; (800db78 <tcp_receive+0x888>)
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	4322      	orrs	r2, r4
 800db4c:	b292      	uxth	r2, r2
 800db4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800db50:	4b09      	ldr	r3, [pc, #36]	; (800db78 <tcp_receive+0x888>)
 800db52:	891c      	ldrh	r4, [r3, #8]
 800db54:	4b08      	ldr	r3, [pc, #32]	; (800db78 <tcp_receive+0x888>)
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	899b      	ldrh	r3, [r3, #12]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7fa fb81 	bl	8008264 <lwip_htons>
 800db62:	4603      	mov	r3, r0
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0303 	and.w	r3, r3, #3
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00e      	beq.n	800db8c <tcp_receive+0x89c>
 800db6e:	2301      	movs	r3, #1
 800db70:	e00d      	b.n	800db8e <tcp_receive+0x89e>
 800db72:	bf00      	nop
 800db74:	2000056c 	.word	0x2000056c
 800db78:	2000054c 	.word	0x2000054c
 800db7c:	20000576 	.word	0x20000576
 800db80:	080163b4 	.word	0x080163b4
 800db84:	0801675c 	.word	0x0801675c
 800db88:	08016400 	.word	0x08016400
 800db8c:	2300      	movs	r3, #0
 800db8e:	4423      	add	r3, r4
 800db90:	b29a      	uxth	r2, r3
 800db92:	4b98      	ldr	r3, [pc, #608]	; (800ddf4 <tcp_receive+0xb04>)
 800db94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800db96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db98:	613b      	str	r3, [r7, #16]
              next = next->next;
 800db9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800dba0:	6938      	ldr	r0, [r7, #16]
 800dba2:	f7fd fc4e 	bl	800b442 <tcp_seg_free>
            while (next &&
 800dba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00e      	beq.n	800dbca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800dbac:	4b91      	ldr	r3, [pc, #580]	; (800ddf4 <tcp_receive+0xb04>)
 800dbae:	881b      	ldrh	r3, [r3, #0]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	4b91      	ldr	r3, [pc, #580]	; (800ddf8 <tcp_receive+0xb08>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	441a      	add	r2, r3
 800dbb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dbc0:	8909      	ldrh	r1, [r1, #8]
 800dbc2:	440b      	add	r3, r1
 800dbc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	da9a      	bge.n	800db00 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800dbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d059      	beq.n	800dc84 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800dbd0:	4b88      	ldr	r3, [pc, #544]	; (800ddf4 <tcp_receive+0xb04>)
 800dbd2:	881b      	ldrh	r3, [r3, #0]
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	4b88      	ldr	r3, [pc, #544]	; (800ddf8 <tcp_receive+0xb08>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	441a      	add	r2, r3
 800dbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	dd4d      	ble.n	800dc84 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800dbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	4b81      	ldr	r3, [pc, #516]	; (800ddf8 <tcp_receive+0xb08>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	4b80      	ldr	r3, [pc, #512]	; (800ddfc <tcp_receive+0xb0c>)
 800dbfc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dbfe:	4b7f      	ldr	r3, [pc, #508]	; (800ddfc <tcp_receive+0xb0c>)
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	899b      	ldrh	r3, [r3, #12]
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fa fb2c 	bl	8008264 <lwip_htons>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	b2db      	uxtb	r3, r3
 800dc10:	f003 0302 	and.w	r3, r3, #2
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <tcp_receive+0x934>
                inseg.len -= 1;
 800dc18:	4b78      	ldr	r3, [pc, #480]	; (800ddfc <tcp_receive+0xb0c>)
 800dc1a:	891b      	ldrh	r3, [r3, #8]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	4b76      	ldr	r3, [pc, #472]	; (800ddfc <tcp_receive+0xb0c>)
 800dc22:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dc24:	4b75      	ldr	r3, [pc, #468]	; (800ddfc <tcp_receive+0xb0c>)
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	4a74      	ldr	r2, [pc, #464]	; (800ddfc <tcp_receive+0xb0c>)
 800dc2a:	8912      	ldrh	r2, [r2, #8]
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fb fcd8 	bl	80095e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dc34:	4b71      	ldr	r3, [pc, #452]	; (800ddfc <tcp_receive+0xb0c>)
 800dc36:	891c      	ldrh	r4, [r3, #8]
 800dc38:	4b70      	ldr	r3, [pc, #448]	; (800ddfc <tcp_receive+0xb0c>)
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	899b      	ldrh	r3, [r3, #12]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fa fb0f 	bl	8008264 <lwip_htons>
 800dc46:	4603      	mov	r3, r0
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d001      	beq.n	800dc56 <tcp_receive+0x966>
 800dc52:	2301      	movs	r3, #1
 800dc54:	e000      	b.n	800dc58 <tcp_receive+0x968>
 800dc56:	2300      	movs	r3, #0
 800dc58:	4423      	add	r3, r4
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	4b65      	ldr	r3, [pc, #404]	; (800ddf4 <tcp_receive+0xb04>)
 800dc5e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dc60:	4b64      	ldr	r3, [pc, #400]	; (800ddf4 <tcp_receive+0xb04>)
 800dc62:	881b      	ldrh	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	4b64      	ldr	r3, [pc, #400]	; (800ddf8 <tcp_receive+0xb08>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	441a      	add	r2, r3
 800dc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d006      	beq.n	800dc84 <tcp_receive+0x994>
 800dc76:	4b62      	ldr	r3, [pc, #392]	; (800de00 <tcp_receive+0xb10>)
 800dc78:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800dc7c:	4961      	ldr	r1, [pc, #388]	; (800de04 <tcp_receive+0xb14>)
 800dc7e:	4862      	ldr	r0, [pc, #392]	; (800de08 <tcp_receive+0xb18>)
 800dc80:	f005 f8f6 	bl	8012e70 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc88:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dc8a:	4b5a      	ldr	r3, [pc, #360]	; (800ddf4 <tcp_receive+0xb04>)
 800dc8c:	881b      	ldrh	r3, [r3, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	4b59      	ldr	r3, [pc, #356]	; (800ddf8 <tcp_receive+0xb08>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	441a      	add	r2, r3
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc9e:	4b55      	ldr	r3, [pc, #340]	; (800ddf4 <tcp_receive+0xb04>)
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d206      	bcs.n	800dcb4 <tcp_receive+0x9c4>
 800dca6:	4b56      	ldr	r3, [pc, #344]	; (800de00 <tcp_receive+0xb10>)
 800dca8:	f240 6207 	movw	r2, #1543	; 0x607
 800dcac:	4957      	ldr	r1, [pc, #348]	; (800de0c <tcp_receive+0xb1c>)
 800dcae:	4856      	ldr	r0, [pc, #344]	; (800de08 <tcp_receive+0xb18>)
 800dcb0:	f005 f8de 	bl	8012e70 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dcb8:	4b4e      	ldr	r3, [pc, #312]	; (800ddf4 <tcp_receive+0xb04>)
 800dcba:	881b      	ldrh	r3, [r3, #0]
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	b29a      	uxth	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f7fc fd7f 	bl	800a7c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dcca:	4b4c      	ldr	r3, [pc, #304]	; (800ddfc <tcp_receive+0xb0c>)
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	891b      	ldrh	r3, [r3, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d006      	beq.n	800dce2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800dcd4:	4b49      	ldr	r3, [pc, #292]	; (800ddfc <tcp_receive+0xb0c>)
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	4a4d      	ldr	r2, [pc, #308]	; (800de10 <tcp_receive+0xb20>)
 800dcda:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dcdc:	4b47      	ldr	r3, [pc, #284]	; (800ddfc <tcp_receive+0xb0c>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dce2:	4b46      	ldr	r3, [pc, #280]	; (800ddfc <tcp_receive+0xb0c>)
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	899b      	ldrh	r3, [r3, #12]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fa faba 	bl	8008264 <lwip_htons>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	f003 0301 	and.w	r3, r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 80b8 	beq.w	800de6e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dcfe:	4b45      	ldr	r3, [pc, #276]	; (800de14 <tcp_receive+0xb24>)
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	f043 0320 	orr.w	r3, r3, #32
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	4b42      	ldr	r3, [pc, #264]	; (800de14 <tcp_receive+0xb24>)
 800dd0a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dd0c:	e0af      	b.n	800de6e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd12:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	4a36      	ldr	r2, [pc, #216]	; (800ddf8 <tcp_receive+0xb08>)
 800dd1e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	891b      	ldrh	r3, [r3, #8]
 800dd24:	461c      	mov	r4, r3
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	899b      	ldrh	r3, [r3, #12]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fa fa98 	bl	8008264 <lwip_htons>
 800dd34:	4603      	mov	r3, r0
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	f003 0303 	and.w	r3, r3, #3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <tcp_receive+0xa54>
 800dd40:	2301      	movs	r3, #1
 800dd42:	e000      	b.n	800dd46 <tcp_receive+0xa56>
 800dd44:	2300      	movs	r3, #0
 800dd46:	191a      	adds	r2, r3, r4
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4c:	441a      	add	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd56:	461c      	mov	r4, r3
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	891b      	ldrh	r3, [r3, #8]
 800dd5c:	461d      	mov	r5, r3
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	899b      	ldrh	r3, [r3, #12]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fa fa7c 	bl	8008264 <lwip_htons>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	f003 0303 	and.w	r3, r3, #3
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d001      	beq.n	800dd7c <tcp_receive+0xa8c>
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e000      	b.n	800dd7e <tcp_receive+0xa8e>
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	442b      	add	r3, r5
 800dd80:	429c      	cmp	r4, r3
 800dd82:	d206      	bcs.n	800dd92 <tcp_receive+0xaa2>
 800dd84:	4b1e      	ldr	r3, [pc, #120]	; (800de00 <tcp_receive+0xb10>)
 800dd86:	f240 622b 	movw	r2, #1579	; 0x62b
 800dd8a:	4923      	ldr	r1, [pc, #140]	; (800de18 <tcp_receive+0xb28>)
 800dd8c:	481e      	ldr	r0, [pc, #120]	; (800de08 <tcp_receive+0xb18>)
 800dd8e:	f005 f86f 	bl	8012e70 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	891b      	ldrh	r3, [r3, #8]
 800dd96:	461c      	mov	r4, r3
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	899b      	ldrh	r3, [r3, #12]
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fa fa5f 	bl	8008264 <lwip_htons>
 800dda6:	4603      	mov	r3, r0
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	f003 0303 	and.w	r3, r3, #3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <tcp_receive+0xac6>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e000      	b.n	800ddb8 <tcp_receive+0xac8>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	1919      	adds	r1, r3, r4
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ddbe:	b28b      	uxth	r3, r1
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7fc fcfd 	bl	800a7c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	891b      	ldrh	r3, [r3, #8]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d028      	beq.n	800de2a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ddd8:	4b0d      	ldr	r3, [pc, #52]	; (800de10 <tcp_receive+0xb20>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d01d      	beq.n	800de1c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800dde0:	4b0b      	ldr	r3, [pc, #44]	; (800de10 <tcp_receive+0xb20>)
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	4619      	mov	r1, r3
 800ddea:	4610      	mov	r0, r2
 800ddec:	f7fb fe42 	bl	8009a74 <pbuf_cat>
 800ddf0:	e018      	b.n	800de24 <tcp_receive+0xb34>
 800ddf2:	bf00      	nop
 800ddf4:	20000576 	.word	0x20000576
 800ddf8:	2000056c 	.word	0x2000056c
 800ddfc:	2000054c 	.word	0x2000054c
 800de00:	080163b4 	.word	0x080163b4
 800de04:	08016794 	.word	0x08016794
 800de08:	08016400 	.word	0x08016400
 800de0c:	080167d0 	.word	0x080167d0
 800de10:	2000057c 	.word	0x2000057c
 800de14:	20000579 	.word	0x20000579
 800de18:	080167f0 	.word	0x080167f0
            } else {
              recv_data = cseg->p;
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	4a70      	ldr	r2, [pc, #448]	; (800dfe4 <tcp_receive+0xcf4>)
 800de22:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2200      	movs	r2, #0
 800de28:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	899b      	ldrh	r3, [r3, #12]
 800de30:	b29b      	uxth	r3, r3
 800de32:	4618      	mov	r0, r3
 800de34:	f7fa fa16 	bl	8008264 <lwip_htons>
 800de38:	4603      	mov	r3, r0
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00d      	beq.n	800de60 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800de44:	4b68      	ldr	r3, [pc, #416]	; (800dfe8 <tcp_receive+0xcf8>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	f043 0320 	orr.w	r3, r3, #32
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	4b66      	ldr	r3, [pc, #408]	; (800dfe8 <tcp_receive+0xcf8>)
 800de50:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	7d1b      	ldrb	r3, [r3, #20]
 800de56:	2b04      	cmp	r3, #4
 800de58:	d102      	bne.n	800de60 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2207      	movs	r2, #7
 800de5e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800de68:	68b8      	ldr	r0, [r7, #8]
 800de6a:	f7fd faea 	bl	800b442 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de72:	2b00      	cmp	r3, #0
 800de74:	d008      	beq.n	800de88 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800de82:	429a      	cmp	r2, r3
 800de84:	f43f af43 	beq.w	800dd0e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	8b5b      	ldrh	r3, [r3, #26]
 800de8c:	f003 0301 	and.w	r3, r3, #1
 800de90:	2b00      	cmp	r3, #0
 800de92:	d00e      	beq.n	800deb2 <tcp_receive+0xbc2>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	8b5b      	ldrh	r3, [r3, #26]
 800de98:	f023 0301 	bic.w	r3, r3, #1
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	835a      	strh	r2, [r3, #26]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	8b5b      	ldrh	r3, [r3, #26]
 800dea6:	f043 0302 	orr.w	r3, r3, #2
 800deaa:	b29a      	uxth	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800deb0:	e188      	b.n	800e1c4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	8b5b      	ldrh	r3, [r3, #26]
 800deb6:	f043 0301 	orr.w	r3, r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800dec0:	e180      	b.n	800e1c4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800deca:	4848      	ldr	r0, [pc, #288]	; (800dfec <tcp_receive+0xcfc>)
 800decc:	f7fd faf0 	bl	800b4b0 <tcp_seg_copy>
 800ded0:	4602      	mov	r2, r0
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	675a      	str	r2, [r3, #116]	; 0x74
 800ded6:	e16d      	b.n	800e1b4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ded8:	2300      	movs	r3, #0
 800deda:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dee0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dee2:	e157      	b.n	800e194 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	685a      	ldr	r2, [r3, #4]
 800deea:	4b41      	ldr	r3, [pc, #260]	; (800dff0 <tcp_receive+0xd00>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d11d      	bne.n	800df2e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800def2:	4b3e      	ldr	r3, [pc, #248]	; (800dfec <tcp_receive+0xcfc>)
 800def4:	891a      	ldrh	r2, [r3, #8]
 800def6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	429a      	cmp	r2, r3
 800defc:	f240 814f 	bls.w	800e19e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800df00:	483a      	ldr	r0, [pc, #232]	; (800dfec <tcp_receive+0xcfc>)
 800df02:	f7fd fad5 	bl	800b4b0 <tcp_seg_copy>
 800df06:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 8149 	beq.w	800e1a2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800df10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df12:	2b00      	cmp	r3, #0
 800df14:	d003      	beq.n	800df1e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800df16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	e002      	b.n	800df24 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	697a      	ldr	r2, [r7, #20]
 800df22:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800df24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df26:	6978      	ldr	r0, [r7, #20]
 800df28:	f7ff f8de 	bl	800d0e8 <tcp_oos_insert_segment>
                }
                break;
 800df2c:	e139      	b.n	800e1a2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800df2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df30:	2b00      	cmp	r3, #0
 800df32:	d117      	bne.n	800df64 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800df34:	4b2e      	ldr	r3, [pc, #184]	; (800dff0 <tcp_receive+0xd00>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	da57      	bge.n	800dff4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800df44:	4829      	ldr	r0, [pc, #164]	; (800dfec <tcp_receive+0xcfc>)
 800df46:	f7fd fab3 	bl	800b4b0 <tcp_seg_copy>
 800df4a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f000 8129 	beq.w	800e1a6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	69ba      	ldr	r2, [r7, #24]
 800df58:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800df5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df5c:	69b8      	ldr	r0, [r7, #24]
 800df5e:	f7ff f8c3 	bl	800d0e8 <tcp_oos_insert_segment>
                  }
                  break;
 800df62:	e120      	b.n	800e1a6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800df64:	4b22      	ldr	r3, [pc, #136]	; (800dff0 <tcp_receive+0xd00>)
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	3b01      	subs	r3, #1
 800df72:	2b00      	cmp	r3, #0
 800df74:	db3e      	blt.n	800dff4 <tcp_receive+0xd04>
 800df76:	4b1e      	ldr	r3, [pc, #120]	; (800dff0 <tcp_receive+0xd00>)
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	3301      	adds	r3, #1
 800df84:	2b00      	cmp	r3, #0
 800df86:	dc35      	bgt.n	800dff4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800df88:	4818      	ldr	r0, [pc, #96]	; (800dfec <tcp_receive+0xcfc>)
 800df8a:	f7fd fa91 	bl	800b4b0 <tcp_seg_copy>
 800df8e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 8109 	beq.w	800e1aa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800df98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df9a:	68db      	ldr	r3, [r3, #12]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfa0:	8912      	ldrh	r2, [r2, #8]
 800dfa2:	441a      	add	r2, r3
 800dfa4:	4b12      	ldr	r3, [pc, #72]	; (800dff0 <tcp_receive+0xd00>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	dd12      	ble.n	800dfd4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dfae:	4b10      	ldr	r3, [pc, #64]	; (800dff0 <tcp_receive+0xd00>)
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800dfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfc6:	685a      	ldr	r2, [r3, #4]
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfca:	891b      	ldrh	r3, [r3, #8]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	4610      	mov	r0, r2
 800dfd0:	f7fb fb08 	bl	80095e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd6:	69fa      	ldr	r2, [r7, #28]
 800dfd8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dfda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dfdc:	69f8      	ldr	r0, [r7, #28]
 800dfde:	f7ff f883 	bl	800d0e8 <tcp_oos_insert_segment>
                  }
                  break;
 800dfe2:	e0e2      	b.n	800e1aa <tcp_receive+0xeba>
 800dfe4:	2000057c 	.word	0x2000057c
 800dfe8:	20000579 	.word	0x20000579
 800dfec:	2000054c 	.word	0x2000054c
 800dff0:	2000056c 	.word	0x2000056c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 80c6 	bne.w	800e18e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e002:	4b80      	ldr	r3, [pc, #512]	; (800e204 <tcp_receive+0xf14>)
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e00e:	2b00      	cmp	r3, #0
 800e010:	f340 80bd 	ble.w	800e18e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	899b      	ldrh	r3, [r3, #12]
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fa f921 	bl	8008264 <lwip_htons>
 800e022:	4603      	mov	r3, r0
 800e024:	b2db      	uxtb	r3, r3
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f040 80bf 	bne.w	800e1ae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e030:	4875      	ldr	r0, [pc, #468]	; (800e208 <tcp_receive+0xf18>)
 800e032:	f7fd fa3d 	bl	800b4b0 <tcp_seg_copy>
 800e036:	4602      	mov	r2, r0
 800e038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 80b6 	beq.w	800e1b2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04e:	8912      	ldrh	r2, [r2, #8]
 800e050:	441a      	add	r2, r3
 800e052:	4b6c      	ldr	r3, [pc, #432]	; (800e204 <tcp_receive+0xf14>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	1ad3      	subs	r3, r2, r3
 800e058:	2b00      	cmp	r3, #0
 800e05a:	dd12      	ble.n	800e082 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e05c:	4b69      	ldr	r3, [pc, #420]	; (800e204 <tcp_receive+0xf14>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	b29a      	uxth	r2, r3
 800e062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e070:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e074:	685a      	ldr	r2, [r3, #4]
 800e076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e078:	891b      	ldrh	r3, [r3, #8]
 800e07a:	4619      	mov	r1, r3
 800e07c:	4610      	mov	r0, r2
 800e07e:	f7fb fab1 	bl	80095e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e082:	4b62      	ldr	r3, [pc, #392]	; (800e20c <tcp_receive+0xf1c>)
 800e084:	881b      	ldrh	r3, [r3, #0]
 800e086:	461a      	mov	r2, r3
 800e088:	4b5e      	ldr	r3, [pc, #376]	; (800e204 <tcp_receive+0xf14>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	441a      	add	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e092:	6879      	ldr	r1, [r7, #4]
 800e094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e096:	440b      	add	r3, r1
 800e098:	1ad3      	subs	r3, r2, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f340 8089 	ble.w	800e1b2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	899b      	ldrh	r3, [r3, #12]
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fa f8da 	bl	8008264 <lwip_htons>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	f003 0301 	and.w	r3, r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d022      	beq.n	800e102 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	899b      	ldrh	r3, [r3, #12]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	b21b      	sxth	r3, r3
 800e0c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e0cc:	b21c      	sxth	r4, r3
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	899b      	ldrh	r3, [r3, #12]
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fa f8c3 	bl	8008264 <lwip_htons>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f7fa f8ba 	bl	8008264 <lwip_htons>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	b21b      	sxth	r3, r3
 800e0f4:	4323      	orrs	r3, r4
 800e0f6:	b21a      	sxth	r2, r3
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	b292      	uxth	r2, r2
 800e100:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	b29a      	uxth	r2, r3
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e10c:	4413      	add	r3, r2
 800e10e:	b299      	uxth	r1, r3
 800e110:	4b3c      	ldr	r3, [pc, #240]	; (800e204 <tcp_receive+0xf14>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	b29a      	uxth	r2, r3
 800e116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	1a8a      	subs	r2, r1, r2
 800e11c:	b292      	uxth	r2, r2
 800e11e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	891b      	ldrh	r3, [r3, #8]
 800e12c:	4619      	mov	r1, r3
 800e12e:	4610      	mov	r0, r2
 800e130:	f7fb fa58 	bl	80095e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	891c      	ldrh	r4, [r3, #8]
 800e13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68db      	ldr	r3, [r3, #12]
 800e140:	899b      	ldrh	r3, [r3, #12]
 800e142:	b29b      	uxth	r3, r3
 800e144:	4618      	mov	r0, r3
 800e146:	f7fa f88d 	bl	8008264 <lwip_htons>
 800e14a:	4603      	mov	r3, r0
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 0303 	and.w	r3, r3, #3
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <tcp_receive+0xe6a>
 800e156:	2301      	movs	r3, #1
 800e158:	e000      	b.n	800e15c <tcp_receive+0xe6c>
 800e15a:	2300      	movs	r3, #0
 800e15c:	4423      	add	r3, r4
 800e15e:	b29a      	uxth	r2, r3
 800e160:	4b2a      	ldr	r3, [pc, #168]	; (800e20c <tcp_receive+0xf1c>)
 800e162:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e164:	4b29      	ldr	r3, [pc, #164]	; (800e20c <tcp_receive+0xf1c>)
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	461a      	mov	r2, r3
 800e16a:	4b26      	ldr	r3, [pc, #152]	; (800e204 <tcp_receive+0xf14>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	441a      	add	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e178:	440b      	add	r3, r1
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d019      	beq.n	800e1b2 <tcp_receive+0xec2>
 800e17e:	4b24      	ldr	r3, [pc, #144]	; (800e210 <tcp_receive+0xf20>)
 800e180:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800e184:	4923      	ldr	r1, [pc, #140]	; (800e214 <tcp_receive+0xf24>)
 800e186:	4824      	ldr	r0, [pc, #144]	; (800e218 <tcp_receive+0xf28>)
 800e188:	f004 fe72 	bl	8012e70 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e18c:	e011      	b.n	800e1b2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	63bb      	str	r3, [r7, #56]	; 0x38
 800e194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e196:	2b00      	cmp	r3, #0
 800e198:	f47f aea4 	bne.w	800dee4 <tcp_receive+0xbf4>
 800e19c:	e00a      	b.n	800e1b4 <tcp_receive+0xec4>
                break;
 800e19e:	bf00      	nop
 800e1a0:	e008      	b.n	800e1b4 <tcp_receive+0xec4>
                break;
 800e1a2:	bf00      	nop
 800e1a4:	e006      	b.n	800e1b4 <tcp_receive+0xec4>
                  break;
 800e1a6:	bf00      	nop
 800e1a8:	e004      	b.n	800e1b4 <tcp_receive+0xec4>
                  break;
 800e1aa:	bf00      	nop
 800e1ac:	e002      	b.n	800e1b4 <tcp_receive+0xec4>
                  break;
 800e1ae:	bf00      	nop
 800e1b0:	e000      	b.n	800e1b4 <tcp_receive+0xec4>
                break;
 800e1b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 fe8b 	bl	800fed0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800e1ba:	e003      	b.n	800e1c4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 fe87 	bl	800fed0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e1c2:	e01a      	b.n	800e1fa <tcp_receive+0xf0a>
 800e1c4:	e019      	b.n	800e1fa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e1c6:	4b0f      	ldr	r3, [pc, #60]	; (800e204 <tcp_receive+0xf14>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	db0a      	blt.n	800e1ea <tcp_receive+0xefa>
 800e1d4:	4b0b      	ldr	r3, [pc, #44]	; (800e204 <tcp_receive+0xf14>)
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1dc:	6879      	ldr	r1, [r7, #4]
 800e1de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e1e0:	440b      	add	r3, r1
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	dd07      	ble.n	800e1fa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	8b5b      	ldrh	r3, [r3, #26]
 800e1ee:	f043 0302 	orr.w	r3, r3, #2
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800e1f8:	e7ff      	b.n	800e1fa <tcp_receive+0xf0a>
 800e1fa:	bf00      	nop
 800e1fc:	3750      	adds	r7, #80	; 0x50
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bdb0      	pop	{r4, r5, r7, pc}
 800e202:	bf00      	nop
 800e204:	2000056c 	.word	0x2000056c
 800e208:	2000054c 	.word	0x2000054c
 800e20c:	20000576 	.word	0x20000576
 800e210:	080163b4 	.word	0x080163b4
 800e214:	0801675c 	.word	0x0801675c
 800e218:	08016400 	.word	0x08016400

0800e21c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800e222:	4b15      	ldr	r3, [pc, #84]	; (800e278 <tcp_get_next_optbyte+0x5c>)
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	b291      	uxth	r1, r2
 800e22a:	4a13      	ldr	r2, [pc, #76]	; (800e278 <tcp_get_next_optbyte+0x5c>)
 800e22c:	8011      	strh	r1, [r2, #0]
 800e22e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800e230:	4b12      	ldr	r3, [pc, #72]	; (800e27c <tcp_get_next_optbyte+0x60>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d004      	beq.n	800e242 <tcp_get_next_optbyte+0x26>
 800e238:	4b11      	ldr	r3, [pc, #68]	; (800e280 <tcp_get_next_optbyte+0x64>)
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	88fa      	ldrh	r2, [r7, #6]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d208      	bcs.n	800e254 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800e242:	4b10      	ldr	r3, [pc, #64]	; (800e284 <tcp_get_next_optbyte+0x68>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	3314      	adds	r3, #20
 800e248:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800e24a:	88fb      	ldrh	r3, [r7, #6]
 800e24c:	683a      	ldr	r2, [r7, #0]
 800e24e:	4413      	add	r3, r2
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	e00b      	b.n	800e26c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800e254:	88fb      	ldrh	r3, [r7, #6]
 800e256:	b2da      	uxtb	r2, r3
 800e258:	4b09      	ldr	r3, [pc, #36]	; (800e280 <tcp_get_next_optbyte+0x64>)
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800e262:	4b06      	ldr	r3, [pc, #24]	; (800e27c <tcp_get_next_optbyte+0x60>)
 800e264:	681a      	ldr	r2, [r3, #0]
 800e266:	797b      	ldrb	r3, [r7, #5]
 800e268:	4413      	add	r3, r2
 800e26a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	20000568 	.word	0x20000568
 800e27c:	20000564 	.word	0x20000564
 800e280:	20000562 	.word	0x20000562
 800e284:	2000055c 	.word	0x2000055c

0800e288 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d106      	bne.n	800e2a4 <tcp_parseopt+0x1c>
 800e296:	4b32      	ldr	r3, [pc, #200]	; (800e360 <tcp_parseopt+0xd8>)
 800e298:	f240 727d 	movw	r2, #1917	; 0x77d
 800e29c:	4931      	ldr	r1, [pc, #196]	; (800e364 <tcp_parseopt+0xdc>)
 800e29e:	4832      	ldr	r0, [pc, #200]	; (800e368 <tcp_parseopt+0xe0>)
 800e2a0:	f004 fde6 	bl	8012e70 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e2a4:	4b31      	ldr	r3, [pc, #196]	; (800e36c <tcp_parseopt+0xe4>)
 800e2a6:	881b      	ldrh	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d055      	beq.n	800e358 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e2ac:	4b30      	ldr	r3, [pc, #192]	; (800e370 <tcp_parseopt+0xe8>)
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	801a      	strh	r2, [r3, #0]
 800e2b2:	e045      	b.n	800e340 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800e2b4:	f7ff ffb2 	bl	800e21c <tcp_get_next_optbyte>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e2bc:	7bfb      	ldrb	r3, [r7, #15]
 800e2be:	2b02      	cmp	r3, #2
 800e2c0:	d006      	beq.n	800e2d0 <tcp_parseopt+0x48>
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	dc2b      	bgt.n	800e31e <tcp_parseopt+0x96>
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d041      	beq.n	800e34e <tcp_parseopt+0xc6>
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d127      	bne.n	800e31e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800e2ce:	e037      	b.n	800e340 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e2d0:	f7ff ffa4 	bl	800e21c <tcp_get_next_optbyte>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b04      	cmp	r3, #4
 800e2d8:	d13b      	bne.n	800e352 <tcp_parseopt+0xca>
 800e2da:	4b25      	ldr	r3, [pc, #148]	; (800e370 <tcp_parseopt+0xe8>)
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	4a22      	ldr	r2, [pc, #136]	; (800e36c <tcp_parseopt+0xe4>)
 800e2e2:	8812      	ldrh	r2, [r2, #0]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	da34      	bge.n	800e352 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800e2e8:	f7ff ff98 	bl	800e21c <tcp_get_next_optbyte>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	021b      	lsls	r3, r3, #8
 800e2f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800e2f4:	f7ff ff92 	bl	800e21c <tcp_get_next_optbyte>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	89bb      	ldrh	r3, [r7, #12]
 800e2fe:	4313      	orrs	r3, r2
 800e300:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e302:	89bb      	ldrh	r3, [r7, #12]
 800e304:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e308:	d804      	bhi.n	800e314 <tcp_parseopt+0x8c>
 800e30a:	89bb      	ldrh	r3, [r7, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <tcp_parseopt+0x8c>
 800e310:	89ba      	ldrh	r2, [r7, #12]
 800e312:	e001      	b.n	800e318 <tcp_parseopt+0x90>
 800e314:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800e31c:	e010      	b.n	800e340 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800e31e:	f7ff ff7d 	bl	800e21c <tcp_get_next_optbyte>
 800e322:	4603      	mov	r3, r0
 800e324:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800e326:	7afb      	ldrb	r3, [r7, #11]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d914      	bls.n	800e356 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800e32c:	7afb      	ldrb	r3, [r7, #11]
 800e32e:	b29a      	uxth	r2, r3
 800e330:	4b0f      	ldr	r3, [pc, #60]	; (800e370 <tcp_parseopt+0xe8>)
 800e332:	881b      	ldrh	r3, [r3, #0]
 800e334:	4413      	add	r3, r2
 800e336:	b29b      	uxth	r3, r3
 800e338:	3b02      	subs	r3, #2
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	4b0c      	ldr	r3, [pc, #48]	; (800e370 <tcp_parseopt+0xe8>)
 800e33e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e340:	4b0b      	ldr	r3, [pc, #44]	; (800e370 <tcp_parseopt+0xe8>)
 800e342:	881a      	ldrh	r2, [r3, #0]
 800e344:	4b09      	ldr	r3, [pc, #36]	; (800e36c <tcp_parseopt+0xe4>)
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d3b3      	bcc.n	800e2b4 <tcp_parseopt+0x2c>
 800e34c:	e004      	b.n	800e358 <tcp_parseopt+0xd0>
          return;
 800e34e:	bf00      	nop
 800e350:	e002      	b.n	800e358 <tcp_parseopt+0xd0>
            return;
 800e352:	bf00      	nop
 800e354:	e000      	b.n	800e358 <tcp_parseopt+0xd0>
            return;
 800e356:	bf00      	nop
      }
    }
  }
}
 800e358:	3710      	adds	r7, #16
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	080163b4 	.word	0x080163b4
 800e364:	08016818 	.word	0x08016818
 800e368:	08016400 	.word	0x08016400
 800e36c:	20000560 	.word	0x20000560
 800e370:	20000568 	.word	0x20000568

0800e374 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e374:	b480      	push	{r7}
 800e376:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e378:	4b05      	ldr	r3, [pc, #20]	; (800e390 <tcp_trigger_input_pcb_close+0x1c>)
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	f043 0310 	orr.w	r3, r3, #16
 800e380:	b2da      	uxtb	r2, r3
 800e382:	4b03      	ldr	r3, [pc, #12]	; (800e390 <tcp_trigger_input_pcb_close+0x1c>)
 800e384:	701a      	strb	r2, [r3, #0]
}
 800e386:	bf00      	nop
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	20000579 	.word	0x20000579

0800e394 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <tcp_route+0x28>
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	7a1b      	ldrb	r3, [r3, #8]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d006      	beq.n	800e3bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	7a1b      	ldrb	r3, [r3, #8]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fa ff3c 	bl	8009230 <netif_get_by_index>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	e003      	b.n	800e3c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f003 fb0f 	bl	80119e0 <ip4_route>
 800e3c2:	4603      	mov	r3, r0
  }
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b087      	sub	sp, #28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	603b      	str	r3, [r7, #0]
 800e3d8:	4613      	mov	r3, r2
 800e3da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d105      	bne.n	800e3ee <tcp_create_segment+0x22>
 800e3e2:	4b44      	ldr	r3, [pc, #272]	; (800e4f4 <tcp_create_segment+0x128>)
 800e3e4:	22a3      	movs	r2, #163	; 0xa3
 800e3e6:	4944      	ldr	r1, [pc, #272]	; (800e4f8 <tcp_create_segment+0x12c>)
 800e3e8:	4844      	ldr	r0, [pc, #272]	; (800e4fc <tcp_create_segment+0x130>)
 800e3ea:	f004 fd41 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d105      	bne.n	800e400 <tcp_create_segment+0x34>
 800e3f4:	4b3f      	ldr	r3, [pc, #252]	; (800e4f4 <tcp_create_segment+0x128>)
 800e3f6:	22a4      	movs	r2, #164	; 0xa4
 800e3f8:	4941      	ldr	r1, [pc, #260]	; (800e500 <tcp_create_segment+0x134>)
 800e3fa:	4840      	ldr	r0, [pc, #256]	; (800e4fc <tcp_create_segment+0x130>)
 800e3fc:	f004 fd38 	bl	8012e70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	b2db      	uxtb	r3, r3
 800e408:	f003 0304 	and.w	r3, r3, #4
 800e40c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e40e:	2003      	movs	r0, #3
 800e410:	f7fa fc10 	bl	8008c34 <memp_malloc>
 800e414:	6138      	str	r0, [r7, #16]
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d104      	bne.n	800e426 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e41c:	68b8      	ldr	r0, [r7, #8]
 800e41e:	f7fb fa67 	bl	80098f0 <pbuf_free>
    return NULL;
 800e422:	2300      	movs	r3, #0
 800e424:	e061      	b.n	800e4ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e42c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	68ba      	ldr	r2, [r7, #8]
 800e438:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	891a      	ldrh	r2, [r3, #8]
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	b29b      	uxth	r3, r3
 800e442:	429a      	cmp	r2, r3
 800e444:	d205      	bcs.n	800e452 <tcp_create_segment+0x86>
 800e446:	4b2b      	ldr	r3, [pc, #172]	; (800e4f4 <tcp_create_segment+0x128>)
 800e448:	22b0      	movs	r2, #176	; 0xb0
 800e44a:	492e      	ldr	r1, [pc, #184]	; (800e504 <tcp_create_segment+0x138>)
 800e44c:	482b      	ldr	r0, [pc, #172]	; (800e4fc <tcp_create_segment+0x130>)
 800e44e:	f004 fd0f 	bl	8012e70 <iprintf>
  seg->len = p->tot_len - optlen;
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	891a      	ldrh	r2, [r3, #8]
 800e456:	7dfb      	ldrb	r3, [r7, #23]
 800e458:	b29b      	uxth	r3, r3
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	693b      	ldr	r3, [r7, #16]
 800e460:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e462:	2114      	movs	r1, #20
 800e464:	68b8      	ldr	r0, [r7, #8]
 800e466:	f7fb f9ad 	bl	80097c4 <pbuf_add_header>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d004      	beq.n	800e47a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e470:	6938      	ldr	r0, [r7, #16]
 800e472:	f7fc ffe6 	bl	800b442 <tcp_seg_free>
    return NULL;
 800e476:	2300      	movs	r3, #0
 800e478:	e037      	b.n	800e4ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	685a      	ldr	r2, [r3, #4]
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	8ada      	ldrh	r2, [r3, #22]
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	68dc      	ldr	r4, [r3, #12]
 800e48c:	4610      	mov	r0, r2
 800e48e:	f7f9 fee9 	bl	8008264 <lwip_htons>
 800e492:	4603      	mov	r3, r0
 800e494:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	8b1a      	ldrh	r2, [r3, #24]
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	68dc      	ldr	r4, [r3, #12]
 800e49e:	4610      	mov	r0, r2
 800e4a0:	f7f9 fee0 	bl	8008264 <lwip_htons>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	68dc      	ldr	r4, [r3, #12]
 800e4ac:	6838      	ldr	r0, [r7, #0]
 800e4ae:	f7f9 feee 	bl	800828e <lwip_htonl>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e4b6:	7dfb      	ldrb	r3, [r7, #23]
 800e4b8:	089b      	lsrs	r3, r3, #2
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	3305      	adds	r3, #5
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	031b      	lsls	r3, r3, #12
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	68dc      	ldr	r4, [r3, #12]
 800e4d2:	4610      	mov	r0, r2
 800e4d4:	f7f9 fec6 	bl	8008264 <lwip_htons>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	749a      	strb	r2, [r3, #18]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	74da      	strb	r2, [r3, #19]
  return seg;
 800e4e8:	693b      	ldr	r3, [r7, #16]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	371c      	adds	r7, #28
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd90      	pop	{r4, r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	08016834 	.word	0x08016834
 800e4f8:	08016868 	.word	0x08016868
 800e4fc:	08016888 	.word	0x08016888
 800e500:	080168b0 	.word	0x080168b0
 800e504:	080168d4 	.word	0x080168d4

0800e508 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b086      	sub	sp, #24
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	607b      	str	r3, [r7, #4]
 800e510:	4603      	mov	r3, r0
 800e512:	73fb      	strb	r3, [r7, #15]
 800e514:	460b      	mov	r3, r1
 800e516:	81bb      	strh	r3, [r7, #12]
 800e518:	4613      	mov	r3, r2
 800e51a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e51c:	89bb      	ldrh	r3, [r7, #12]
 800e51e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d105      	bne.n	800e532 <tcp_pbuf_prealloc+0x2a>
 800e526:	4b30      	ldr	r3, [pc, #192]	; (800e5e8 <tcp_pbuf_prealloc+0xe0>)
 800e528:	22e8      	movs	r2, #232	; 0xe8
 800e52a:	4930      	ldr	r1, [pc, #192]	; (800e5ec <tcp_pbuf_prealloc+0xe4>)
 800e52c:	4830      	ldr	r0, [pc, #192]	; (800e5f0 <tcp_pbuf_prealloc+0xe8>)
 800e52e:	f004 fc9f 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d105      	bne.n	800e544 <tcp_pbuf_prealloc+0x3c>
 800e538:	4b2b      	ldr	r3, [pc, #172]	; (800e5e8 <tcp_pbuf_prealloc+0xe0>)
 800e53a:	22e9      	movs	r2, #233	; 0xe9
 800e53c:	492d      	ldr	r1, [pc, #180]	; (800e5f4 <tcp_pbuf_prealloc+0xec>)
 800e53e:	482c      	ldr	r0, [pc, #176]	; (800e5f0 <tcp_pbuf_prealloc+0xe8>)
 800e540:	f004 fc96 	bl	8012e70 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e544:	89ba      	ldrh	r2, [r7, #12]
 800e546:	897b      	ldrh	r3, [r7, #10]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d221      	bcs.n	800e590 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e54c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e550:	f003 0302 	and.w	r3, r3, #2
 800e554:	2b00      	cmp	r3, #0
 800e556:	d111      	bne.n	800e57c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	8b5b      	ldrh	r3, [r3, #26]
 800e55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e560:	2b00      	cmp	r3, #0
 800e562:	d115      	bne.n	800e590 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d007      	beq.n	800e57c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e56c:	6a3b      	ldr	r3, [r7, #32]
 800e56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e570:	2b00      	cmp	r3, #0
 800e572:	d103      	bne.n	800e57c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e574:	6a3b      	ldr	r3, [r7, #32]
 800e576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d009      	beq.n	800e590 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e57c:	89bb      	ldrh	r3, [r7, #12]
 800e57e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e582:	f023 0203 	bic.w	r2, r3, #3
 800e586:	897b      	ldrh	r3, [r7, #10]
 800e588:	4293      	cmp	r3, r2
 800e58a:	bf28      	it	cs
 800e58c:	4613      	movcs	r3, r2
 800e58e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e590:	8af9      	ldrh	r1, [r7, #22]
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fa fec5 	bl	8009328 <pbuf_alloc>
 800e59e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d101      	bne.n	800e5aa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	e019      	b.n	800e5de <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d006      	beq.n	800e5c0 <tcp_pbuf_prealloc+0xb8>
 800e5b2:	4b0d      	ldr	r3, [pc, #52]	; (800e5e8 <tcp_pbuf_prealloc+0xe0>)
 800e5b4:	f240 120b 	movw	r2, #267	; 0x10b
 800e5b8:	490f      	ldr	r1, [pc, #60]	; (800e5f8 <tcp_pbuf_prealloc+0xf0>)
 800e5ba:	480d      	ldr	r0, [pc, #52]	; (800e5f0 <tcp_pbuf_prealloc+0xe8>)
 800e5bc:	f004 fc58 	bl	8012e70 <iprintf>
  *oversize = p->len - length;
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	895a      	ldrh	r2, [r3, #10]
 800e5c4:	89bb      	ldrh	r3, [r7, #12]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	89ba      	ldrh	r2, [r7, #12]
 800e5d2:	811a      	strh	r2, [r3, #8]
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	891a      	ldrh	r2, [r3, #8]
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	815a      	strh	r2, [r3, #10]
  return p;
 800e5dc:	693b      	ldr	r3, [r7, #16]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3718      	adds	r7, #24
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	08016834 	.word	0x08016834
 800e5ec:	080168ec 	.word	0x080168ec
 800e5f0:	08016888 	.word	0x08016888
 800e5f4:	08016910 	.word	0x08016910
 800e5f8:	08016930 	.word	0x08016930

0800e5fc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d106      	bne.n	800e61c <tcp_write_checks+0x20>
 800e60e:	4b33      	ldr	r3, [pc, #204]	; (800e6dc <tcp_write_checks+0xe0>)
 800e610:	f240 1233 	movw	r2, #307	; 0x133
 800e614:	4932      	ldr	r1, [pc, #200]	; (800e6e0 <tcp_write_checks+0xe4>)
 800e616:	4833      	ldr	r0, [pc, #204]	; (800e6e4 <tcp_write_checks+0xe8>)
 800e618:	f004 fc2a 	bl	8012e70 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	7d1b      	ldrb	r3, [r3, #20]
 800e620:	2b04      	cmp	r3, #4
 800e622:	d00e      	beq.n	800e642 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e628:	2b07      	cmp	r3, #7
 800e62a:	d00a      	beq.n	800e642 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e630:	2b02      	cmp	r3, #2
 800e632:	d006      	beq.n	800e642 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d002      	beq.n	800e642 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e63c:	f06f 030a 	mvn.w	r3, #10
 800e640:	e048      	b.n	800e6d4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800e642:	887b      	ldrh	r3, [r7, #2]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d101      	bne.n	800e64c <tcp_write_checks+0x50>
    return ERR_OK;
 800e648:	2300      	movs	r3, #0
 800e64a:	e043      	b.n	800e6d4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e652:	887a      	ldrh	r2, [r7, #2]
 800e654:	429a      	cmp	r2, r3
 800e656:	d909      	bls.n	800e66c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	8b5b      	ldrh	r3, [r3, #26]
 800e65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e660:	b29a      	uxth	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e66a:	e033      	b.n	800e6d4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e672:	2b08      	cmp	r3, #8
 800e674:	d909      	bls.n	800e68a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	8b5b      	ldrh	r3, [r3, #26]
 800e67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e67e:	b29a      	uxth	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e688:	e024      	b.n	800e6d4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00f      	beq.n	800e6b4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d11a      	bne.n	800e6d2 <tcp_write_checks+0xd6>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d116      	bne.n	800e6d2 <tcp_write_checks+0xd6>
 800e6a4:	4b0d      	ldr	r3, [pc, #52]	; (800e6dc <tcp_write_checks+0xe0>)
 800e6a6:	f240 1255 	movw	r2, #341	; 0x155
 800e6aa:	490f      	ldr	r1, [pc, #60]	; (800e6e8 <tcp_write_checks+0xec>)
 800e6ac:	480d      	ldr	r0, [pc, #52]	; (800e6e4 <tcp_write_checks+0xe8>)
 800e6ae:	f004 fbdf 	bl	8012e70 <iprintf>
 800e6b2:	e00e      	b.n	800e6d2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <tcp_write_checks+0xc8>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d006      	beq.n	800e6d2 <tcp_write_checks+0xd6>
 800e6c4:	4b05      	ldr	r3, [pc, #20]	; (800e6dc <tcp_write_checks+0xe0>)
 800e6c6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800e6ca:	4908      	ldr	r1, [pc, #32]	; (800e6ec <tcp_write_checks+0xf0>)
 800e6cc:	4805      	ldr	r0, [pc, #20]	; (800e6e4 <tcp_write_checks+0xe8>)
 800e6ce:	f004 fbcf 	bl	8012e70 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3708      	adds	r7, #8
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	08016834 	.word	0x08016834
 800e6e0:	08016944 	.word	0x08016944
 800e6e4:	08016888 	.word	0x08016888
 800e6e8:	08016964 	.word	0x08016964
 800e6ec:	080169a0 	.word	0x080169a0

0800e6f0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e6f0:	b590      	push	{r4, r7, lr}
 800e6f2:	b09b      	sub	sp, #108	; 0x6c
 800e6f4:	af04      	add	r7, sp, #16
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	460b      	mov	r3, r1
 800e700:	80fb      	strh	r3, [r7, #6]
 800e702:	4613      	mov	r3, r2
 800e704:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e706:	2300      	movs	r3, #0
 800e708:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e70a:	2300      	movs	r3, #0
 800e70c:	653b      	str	r3, [r7, #80]	; 0x50
 800e70e:	2300      	movs	r3, #0
 800e710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e712:	2300      	movs	r3, #0
 800e714:	64bb      	str	r3, [r7, #72]	; 0x48
 800e716:	2300      	movs	r3, #0
 800e718:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e71a:	2300      	movs	r3, #0
 800e71c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800e720:	2300      	movs	r3, #0
 800e722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e726:	2300      	movs	r3, #0
 800e728:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e72e:	2300      	movs	r3, #0
 800e730:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d109      	bne.n	800e74c <tcp_write+0x5c>
 800e738:	4ba4      	ldr	r3, [pc, #656]	; (800e9cc <tcp_write+0x2dc>)
 800e73a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e73e:	49a4      	ldr	r1, [pc, #656]	; (800e9d0 <tcp_write+0x2e0>)
 800e740:	48a4      	ldr	r0, [pc, #656]	; (800e9d4 <tcp_write+0x2e4>)
 800e742:	f004 fb95 	bl	8012e70 <iprintf>
 800e746:	f06f 030f 	mvn.w	r3, #15
 800e74a:	e32a      	b.n	800eda2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e752:	085b      	lsrs	r3, r3, #1
 800e754:	b29a      	uxth	r2, r3
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e75a:	4293      	cmp	r3, r2
 800e75c:	bf28      	it	cs
 800e75e:	4613      	movcs	r3, r2
 800e760:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e764:	2b00      	cmp	r3, #0
 800e766:	d102      	bne.n	800e76e <tcp_write+0x7e>
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e76c:	e000      	b.n	800e770 <tcp_write+0x80>
 800e76e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e770:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d109      	bne.n	800e78c <tcp_write+0x9c>
 800e778:	4b94      	ldr	r3, [pc, #592]	; (800e9cc <tcp_write+0x2dc>)
 800e77a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800e77e:	4996      	ldr	r1, [pc, #600]	; (800e9d8 <tcp_write+0x2e8>)
 800e780:	4894      	ldr	r0, [pc, #592]	; (800e9d4 <tcp_write+0x2e4>)
 800e782:	f004 fb75 	bl	8012e70 <iprintf>
 800e786:	f06f 030f 	mvn.w	r3, #15
 800e78a:	e30a      	b.n	800eda2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e78c:	88fb      	ldrh	r3, [r7, #6]
 800e78e:	4619      	mov	r1, r3
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff ff33 	bl	800e5fc <tcp_write_checks>
 800e796:	4603      	mov	r3, r0
 800e798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e79c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <tcp_write+0xba>
    return err;
 800e7a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e7a8:	e2fb      	b.n	800eda2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e7b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f000 80f6 	beq.w	800e9b0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7c8:	653b      	str	r3, [r7, #80]	; 0x50
 800e7ca:	e002      	b.n	800e7d2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1f8      	bne.n	800e7cc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e7da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7dc:	7a9b      	ldrb	r3, [r3, #10]
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	f003 0304 	and.w	r3, r3, #4
 800e7e6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e7e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ec:	891b      	ldrh	r3, [r3, #8]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	8c3b      	ldrh	r3, [r7, #32]
 800e7f2:	440b      	add	r3, r1
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	da06      	bge.n	800e806 <tcp_write+0x116>
 800e7f8:	4b74      	ldr	r3, [pc, #464]	; (800e9cc <tcp_write+0x2dc>)
 800e7fa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e7fe:	4977      	ldr	r1, [pc, #476]	; (800e9dc <tcp_write+0x2ec>)
 800e800:	4874      	ldr	r0, [pc, #464]	; (800e9d4 <tcp_write+0x2e4>)
 800e802:	f004 fb35 	bl	8012e70 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e808:	891a      	ldrh	r2, [r3, #8]
 800e80a:	8c3b      	ldrh	r3, [r7, #32]
 800e80c:	4413      	add	r3, r2
 800e80e:	b29b      	uxth	r3, r3
 800e810:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e81c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e81e:	8a7b      	ldrh	r3, [r7, #18]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d026      	beq.n	800e872 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e824:	8a7b      	ldrh	r3, [r7, #18]
 800e826:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e828:	429a      	cmp	r2, r3
 800e82a:	d206      	bcs.n	800e83a <tcp_write+0x14a>
 800e82c:	4b67      	ldr	r3, [pc, #412]	; (800e9cc <tcp_write+0x2dc>)
 800e82e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e832:	496b      	ldr	r1, [pc, #428]	; (800e9e0 <tcp_write+0x2f0>)
 800e834:	4867      	ldr	r0, [pc, #412]	; (800e9d4 <tcp_write+0x2e4>)
 800e836:	f004 fb1b 	bl	8012e70 <iprintf>
      seg = last_unsent;
 800e83a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e83c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e83e:	8a7b      	ldrh	r3, [r7, #18]
 800e840:	88fa      	ldrh	r2, [r7, #6]
 800e842:	4293      	cmp	r3, r2
 800e844:	bf28      	it	cs
 800e846:	4613      	movcs	r3, r2
 800e848:	b29b      	uxth	r3, r3
 800e84a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e84c:	4293      	cmp	r3, r2
 800e84e:	bf28      	it	cs
 800e850:	4613      	movcs	r3, r2
 800e852:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e858:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e85a:	4413      	add	r3, r2
 800e85c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e860:	8a7a      	ldrh	r2, [r7, #18]
 800e862:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	b29b      	uxth	r3, r3
 800e868:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e86a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e86c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e872:	8a7b      	ldrh	r3, [r7, #18]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d00b      	beq.n	800e890 <tcp_write+0x1a0>
 800e878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e87c:	88fb      	ldrh	r3, [r7, #6]
 800e87e:	429a      	cmp	r2, r3
 800e880:	d006      	beq.n	800e890 <tcp_write+0x1a0>
 800e882:	4b52      	ldr	r3, [pc, #328]	; (800e9cc <tcp_write+0x2dc>)
 800e884:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e888:	4956      	ldr	r1, [pc, #344]	; (800e9e4 <tcp_write+0x2f4>)
 800e88a:	4852      	ldr	r0, [pc, #328]	; (800e9d4 <tcp_write+0x2e4>)
 800e88c:	f004 faf0 	bl	8012e70 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e890:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e894:	88fb      	ldrh	r3, [r7, #6]
 800e896:	429a      	cmp	r2, r3
 800e898:	f080 8167 	bcs.w	800eb6a <tcp_write+0x47a>
 800e89c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f000 8163 	beq.w	800eb6a <tcp_write+0x47a>
 800e8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a6:	891b      	ldrh	r3, [r3, #8]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	f000 815e 	beq.w	800eb6a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e8ae:	88fa      	ldrh	r2, [r7, #6]
 800e8b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8b4:	1ad2      	subs	r2, r2, r3
 800e8b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	bfa8      	it	ge
 800e8bc:	4613      	movge	r3, r2
 800e8be:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e8c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e8c4:	797b      	ldrb	r3, [r7, #5]
 800e8c6:	f003 0301 	and.w	r3, r3, #1
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d027      	beq.n	800e91e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e8ce:	f107 0012 	add.w	r0, r7, #18
 800e8d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e8d4:	8bf9      	ldrh	r1, [r7, #30]
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	9302      	str	r3, [sp, #8]
 800e8da:	797b      	ldrb	r3, [r7, #5]
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	9300      	str	r3, [sp, #0]
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2000      	movs	r0, #0
 800e8e6:	f7ff fe0f 	bl	800e508 <tcp_pbuf_prealloc>
 800e8ea:	6578      	str	r0, [r7, #84]	; 0x54
 800e8ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 8225 	beq.w	800ed3e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e8f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8f6:	6858      	ldr	r0, [r3, #4]
 800e8f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	4413      	add	r3, r2
 800e900:	8bfa      	ldrh	r2, [r7, #30]
 800e902:	4619      	mov	r1, r3
 800e904:	f004 fa84 	bl	8012e10 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e908:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e90a:	f7fb f879 	bl	8009a00 <pbuf_clen>
 800e90e:	4603      	mov	r3, r0
 800e910:	461a      	mov	r2, r3
 800e912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e916:	4413      	add	r3, r2
 800e918:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e91c:	e041      	b.n	800e9a2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	637b      	str	r3, [r7, #52]	; 0x34
 800e924:	e002      	b.n	800e92c <tcp_write+0x23c>
 800e926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	637b      	str	r3, [r7, #52]	; 0x34
 800e92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1f8      	bne.n	800e926 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e936:	7b1b      	ldrb	r3, [r3, #12]
 800e938:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d115      	bne.n	800e96c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e946:	8952      	ldrh	r2, [r2, #10]
 800e948:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d10d      	bne.n	800e96c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e954:	2b00      	cmp	r3, #0
 800e956:	d006      	beq.n	800e966 <tcp_write+0x276>
 800e958:	4b1c      	ldr	r3, [pc, #112]	; (800e9cc <tcp_write+0x2dc>)
 800e95a:	f240 2231 	movw	r2, #561	; 0x231
 800e95e:	4922      	ldr	r1, [pc, #136]	; (800e9e8 <tcp_write+0x2f8>)
 800e960:	481c      	ldr	r0, [pc, #112]	; (800e9d4 <tcp_write+0x2e4>)
 800e962:	f004 fa85 	bl	8012e70 <iprintf>
          extendlen = seglen;
 800e966:	8bfb      	ldrh	r3, [r7, #30]
 800e968:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e96a:	e01a      	b.n	800e9a2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e96c:	8bfb      	ldrh	r3, [r7, #30]
 800e96e:	2201      	movs	r2, #1
 800e970:	4619      	mov	r1, r3
 800e972:	2000      	movs	r0, #0
 800e974:	f7fa fcd8 	bl	8009328 <pbuf_alloc>
 800e978:	6578      	str	r0, [r7, #84]	; 0x54
 800e97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f000 81e0 	beq.w	800ed42 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	441a      	add	r2, r3
 800e98a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e98c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e98e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e990:	f7fb f836 	bl	8009a00 <pbuf_clen>
 800e994:	4603      	mov	r3, r0
 800e996:	461a      	mov	r2, r3
 800e998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e99c:	4413      	add	r3, r2
 800e99e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e9a2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9a6:	8bfb      	ldrh	r3, [r7, #30]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e9ae:	e0dc      	b.n	800eb6a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f000 80d7 	beq.w	800eb6a <tcp_write+0x47a>
 800e9bc:	4b03      	ldr	r3, [pc, #12]	; (800e9cc <tcp_write+0x2dc>)
 800e9be:	f240 224a 	movw	r2, #586	; 0x24a
 800e9c2:	490a      	ldr	r1, [pc, #40]	; (800e9ec <tcp_write+0x2fc>)
 800e9c4:	4803      	ldr	r0, [pc, #12]	; (800e9d4 <tcp_write+0x2e4>)
 800e9c6:	f004 fa53 	bl	8012e70 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e9ca:	e0ce      	b.n	800eb6a <tcp_write+0x47a>
 800e9cc:	08016834 	.word	0x08016834
 800e9d0:	080169d4 	.word	0x080169d4
 800e9d4:	08016888 	.word	0x08016888
 800e9d8:	080169ec 	.word	0x080169ec
 800e9dc:	08016a20 	.word	0x08016a20
 800e9e0:	08016a38 	.word	0x08016a38
 800e9e4:	08016a58 	.word	0x08016a58
 800e9e8:	08016a78 	.word	0x08016a78
 800e9ec:	08016aa4 	.word	0x08016aa4
    struct pbuf *p;
    u16_t left = len - pos;
 800e9f0:	88fa      	ldrh	r2, [r7, #6]
 800e9f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e9fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ea06:	8b7a      	ldrh	r2, [r7, #26]
 800ea08:	8bbb      	ldrh	r3, [r7, #28]
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	bf28      	it	cs
 800ea0e:	4613      	movcs	r3, r2
 800ea10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ea12:	797b      	ldrb	r3, [r7, #5]
 800ea14:	f003 0301 	and.w	r3, r3, #1
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d036      	beq.n	800ea8a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ea1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	8b3b      	ldrh	r3, [r7, #24]
 800ea24:	4413      	add	r3, r2
 800ea26:	b299      	uxth	r1, r3
 800ea28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	bf0c      	ite	eq
 800ea2e:	2301      	moveq	r3, #1
 800ea30:	2300      	movne	r3, #0
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	f107 0012 	add.w	r0, r7, #18
 800ea38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea3a:	9302      	str	r3, [sp, #8]
 800ea3c:	797b      	ldrb	r3, [r7, #5]
 800ea3e:	9301      	str	r3, [sp, #4]
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	4603      	mov	r3, r0
 800ea46:	2036      	movs	r0, #54	; 0x36
 800ea48:	f7ff fd5e 	bl	800e508 <tcp_pbuf_prealloc>
 800ea4c:	6338      	str	r0, [r7, #48]	; 0x30
 800ea4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f000 8178 	beq.w	800ed46 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	895b      	ldrh	r3, [r3, #10]
 800ea5a:	8b3a      	ldrh	r2, [r7, #24]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d906      	bls.n	800ea6e <tcp_write+0x37e>
 800ea60:	4b8c      	ldr	r3, [pc, #560]	; (800ec94 <tcp_write+0x5a4>)
 800ea62:	f240 2266 	movw	r2, #614	; 0x266
 800ea66:	498c      	ldr	r1, [pc, #560]	; (800ec98 <tcp_write+0x5a8>)
 800ea68:	488c      	ldr	r0, [pc, #560]	; (800ec9c <tcp_write+0x5ac>)
 800ea6a:	f004 fa01 	bl	8012e70 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ea6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea70:	685a      	ldr	r2, [r3, #4]
 800ea72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ea76:	18d0      	adds	r0, r2, r3
 800ea78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	4413      	add	r3, r2
 800ea80:	8b3a      	ldrh	r2, [r7, #24]
 800ea82:	4619      	mov	r1, r3
 800ea84:	f004 f9c4 	bl	8012e10 <memcpy>
 800ea88:	e02f      	b.n	800eaea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ea8a:	8a7b      	ldrh	r3, [r7, #18]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d006      	beq.n	800ea9e <tcp_write+0x3ae>
 800ea90:	4b80      	ldr	r3, [pc, #512]	; (800ec94 <tcp_write+0x5a4>)
 800ea92:	f240 2271 	movw	r2, #625	; 0x271
 800ea96:	4982      	ldr	r1, [pc, #520]	; (800eca0 <tcp_write+0x5b0>)
 800ea98:	4880      	ldr	r0, [pc, #512]	; (800ec9c <tcp_write+0x5ac>)
 800ea9a:	f004 f9e9 	bl	8012e70 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ea9e:	8b3b      	ldrh	r3, [r7, #24]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	2036      	movs	r0, #54	; 0x36
 800eaa6:	f7fa fc3f 	bl	8009328 <pbuf_alloc>
 800eaaa:	6178      	str	r0, [r7, #20]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f000 814b 	beq.w	800ed4a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800eab4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eab8:	68ba      	ldr	r2, [r7, #8]
 800eaba:	441a      	add	r2, r3
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800eac0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eaca:	4619      	mov	r1, r3
 800eacc:	2036      	movs	r0, #54	; 0x36
 800eace:	f7fa fc2b 	bl	8009328 <pbuf_alloc>
 800ead2:	6338      	str	r0, [r7, #48]	; 0x30
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d103      	bne.n	800eae2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800eada:	6978      	ldr	r0, [r7, #20]
 800eadc:	f7fa ff08 	bl	80098f0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800eae0:	e136      	b.n	800ed50 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800eae2:	6979      	ldr	r1, [r7, #20]
 800eae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eae6:	f7fa ffc5 	bl	8009a74 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800eaea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaec:	f7fa ff88 	bl	8009a00 <pbuf_clen>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eaf8:	4413      	add	r3, r2
 800eafa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800eafe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eb02:	2b09      	cmp	r3, #9
 800eb04:	d903      	bls.n	800eb0e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800eb06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb08:	f7fa fef2 	bl	80098f0 <pbuf_free>
      goto memerr;
 800eb0c:	e120      	b.n	800ed50 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb16:	441a      	add	r2, r3
 800eb18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb1c:	9300      	str	r3, [sp, #0]
 800eb1e:	4613      	mov	r3, r2
 800eb20:	2200      	movs	r2, #0
 800eb22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f7ff fc51 	bl	800e3cc <tcp_create_segment>
 800eb2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800eb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 810d 	beq.w	800ed4e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800eb34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d102      	bne.n	800eb40 <tcp_write+0x450>
      queue = seg;
 800eb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb3c:	647b      	str	r3, [r7, #68]	; 0x44
 800eb3e:	e00c      	b.n	800eb5a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800eb40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d106      	bne.n	800eb54 <tcp_write+0x464>
 800eb46:	4b53      	ldr	r3, [pc, #332]	; (800ec94 <tcp_write+0x5a4>)
 800eb48:	f240 22ab 	movw	r2, #683	; 0x2ab
 800eb4c:	4955      	ldr	r1, [pc, #340]	; (800eca4 <tcp_write+0x5b4>)
 800eb4e:	4853      	ldr	r0, [pc, #332]	; (800ec9c <tcp_write+0x5ac>)
 800eb50:	f004 f98e 	bl	8012e70 <iprintf>
      prev_seg->next = seg;
 800eb54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb58:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800eb5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb5c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800eb5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb62:	8b3b      	ldrh	r3, [r7, #24]
 800eb64:	4413      	add	r3, r2
 800eb66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800eb6a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb6e:	88fb      	ldrh	r3, [r7, #6]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	f4ff af3d 	bcc.w	800e9f0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800eb76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d02c      	beq.n	800ebd6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800eb7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb82:	e01e      	b.n	800ebc2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	891a      	ldrh	r2, [r3, #8]
 800eb88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb8a:	4413      	add	r3, r2
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800eb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d110      	bne.n	800ebbc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eba0:	8952      	ldrh	r2, [r2, #10]
 800eba2:	4413      	add	r3, r2
 800eba4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eba6:	68b9      	ldr	r1, [r7, #8]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f004 f931 	bl	8012e10 <memcpy>
        p->len += oversize_used;
 800ebae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb0:	895a      	ldrh	r2, [r3, #10]
 800ebb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ebb4:	4413      	add	r3, r2
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1dd      	bne.n	800eb84 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800ebc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebca:	891a      	ldrh	r2, [r3, #8]
 800ebcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ebce:	4413      	add	r3, r2
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebd4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ebd6:	8a7a      	ldrh	r2, [r7, #18]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ebde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d018      	beq.n	800ec16 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ebe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d106      	bne.n	800ebf8 <tcp_write+0x508>
 800ebea:	4b2a      	ldr	r3, [pc, #168]	; (800ec94 <tcp_write+0x5a4>)
 800ebec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800ebf0:	492d      	ldr	r1, [pc, #180]	; (800eca8 <tcp_write+0x5b8>)
 800ebf2:	482a      	ldr	r0, [pc, #168]	; (800ec9c <tcp_write+0x5ac>)
 800ebf4:	f004 f93c 	bl	8012e70 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ebf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fa ff38 	bl	8009a74 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ec04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec06:	891a      	ldrh	r2, [r3, #8]
 800ec08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec0a:	891b      	ldrh	r3, [r3, #8]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec12:	811a      	strh	r2, [r3, #8]
 800ec14:	e037      	b.n	800ec86 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ec16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d034      	beq.n	800ec86 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ec1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d003      	beq.n	800ec2a <tcp_write+0x53a>
 800ec22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <tcp_write+0x548>
 800ec2a:	4b1a      	ldr	r3, [pc, #104]	; (800ec94 <tcp_write+0x5a4>)
 800ec2c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ec30:	491e      	ldr	r1, [pc, #120]	; (800ecac <tcp_write+0x5bc>)
 800ec32:	481a      	ldr	r0, [pc, #104]	; (800ec9c <tcp_write+0x5ac>)
 800ec34:	f004 f91c 	bl	8012e70 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ec38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec3e:	e009      	b.n	800ec54 <tcp_write+0x564>
      p->tot_len += extendlen;
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	891a      	ldrh	r2, [r3, #8]
 800ec44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec46:	4413      	add	r3, r2
 800ec48:	b29a      	uxth	r2, r3
 800ec4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ec4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1f1      	bne.n	800ec40 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ec5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5e:	891a      	ldrh	r2, [r3, #8]
 800ec60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec62:	4413      	add	r3, r2
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	895a      	ldrh	r2, [r3, #10]
 800ec6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec70:	4413      	add	r3, r2
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ec78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec7a:	891a      	ldrh	r2, [r3, #8]
 800ec7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec7e:	4413      	add	r3, r2
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec84:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ec86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d111      	bne.n	800ecb0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec90:	66da      	str	r2, [r3, #108]	; 0x6c
 800ec92:	e010      	b.n	800ecb6 <tcp_write+0x5c6>
 800ec94:	08016834 	.word	0x08016834
 800ec98:	08016ad4 	.word	0x08016ad4
 800ec9c:	08016888 	.word	0x08016888
 800eca0:	08016b14 	.word	0x08016b14
 800eca4:	08016b24 	.word	0x08016b24
 800eca8:	08016b38 	.word	0x08016b38
 800ecac:	08016b70 	.word	0x08016b70
  } else {
    last_unsent->next = queue;
 800ecb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecb4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecba:	88fb      	ldrh	r3, [r7, #6]
 800ecbc:	441a      	add	r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ecc8:	88fb      	ldrh	r3, [r7, #6]
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ecda:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00e      	beq.n	800ed06 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d10a      	bne.n	800ed06 <tcp_write+0x616>
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d106      	bne.n	800ed06 <tcp_write+0x616>
 800ecf8:	4b2c      	ldr	r3, [pc, #176]	; (800edac <tcp_write+0x6bc>)
 800ecfa:	f240 3212 	movw	r2, #786	; 0x312
 800ecfe:	492c      	ldr	r1, [pc, #176]	; (800edb0 <tcp_write+0x6c0>)
 800ed00:	482c      	ldr	r0, [pc, #176]	; (800edb4 <tcp_write+0x6c4>)
 800ed02:	f004 f8b5 	bl	8012e70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800ed06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d016      	beq.n	800ed3a <tcp_write+0x64a>
 800ed0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed0e:	68db      	ldr	r3, [r3, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d012      	beq.n	800ed3a <tcp_write+0x64a>
 800ed14:	797b      	ldrb	r3, [r7, #5]
 800ed16:	f003 0302 	and.w	r3, r3, #2
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10d      	bne.n	800ed3a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800ed1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed20:	68db      	ldr	r3, [r3, #12]
 800ed22:	899b      	ldrh	r3, [r3, #12]
 800ed24:	b29c      	uxth	r4, r3
 800ed26:	2008      	movs	r0, #8
 800ed28:	f7f9 fa9c 	bl	8008264 <lwip_htons>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	4322      	orrs	r2, r4
 800ed36:	b292      	uxth	r2, r2
 800ed38:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	e031      	b.n	800eda2 <tcp_write+0x6b2>
          goto memerr;
 800ed3e:	bf00      	nop
 800ed40:	e006      	b.n	800ed50 <tcp_write+0x660>
            goto memerr;
 800ed42:	bf00      	nop
 800ed44:	e004      	b.n	800ed50 <tcp_write+0x660>
        goto memerr;
 800ed46:	bf00      	nop
 800ed48:	e002      	b.n	800ed50 <tcp_write+0x660>
        goto memerr;
 800ed4a:	bf00      	nop
 800ed4c:	e000      	b.n	800ed50 <tcp_write+0x660>
      goto memerr;
 800ed4e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	8b5b      	ldrh	r3, [r3, #26]
 800ed54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800ed5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d002      	beq.n	800ed6a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800ed64:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ed66:	f7fa fdc3 	bl	80098f0 <pbuf_free>
  }
  if (queue != NULL) {
 800ed6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d002      	beq.n	800ed76 <tcp_write+0x686>
    tcp_segs_free(queue);
 800ed70:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed72:	f7fc fb51 	bl	800b418 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00e      	beq.n	800ed9e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d10a      	bne.n	800ed9e <tcp_write+0x6ae>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d106      	bne.n	800ed9e <tcp_write+0x6ae>
 800ed90:	4b06      	ldr	r3, [pc, #24]	; (800edac <tcp_write+0x6bc>)
 800ed92:	f240 3227 	movw	r2, #807	; 0x327
 800ed96:	4906      	ldr	r1, [pc, #24]	; (800edb0 <tcp_write+0x6c0>)
 800ed98:	4806      	ldr	r0, [pc, #24]	; (800edb4 <tcp_write+0x6c4>)
 800ed9a:	f004 f869 	bl	8012e70 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	375c      	adds	r7, #92	; 0x5c
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd90      	pop	{r4, r7, pc}
 800edaa:	bf00      	nop
 800edac:	08016834 	.word	0x08016834
 800edb0:	08016ba8 	.word	0x08016ba8
 800edb4:	08016888 	.word	0x08016888

0800edb8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800edb8:	b590      	push	{r4, r7, lr}
 800edba:	b08b      	sub	sp, #44	; 0x2c
 800edbc:	af02      	add	r7, sp, #8
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	460b      	mov	r3, r1
 800edc2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	61fb      	str	r3, [r7, #28]
 800edc8:	2300      	movs	r3, #0
 800edca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d106      	bne.n	800ede4 <tcp_split_unsent_seg+0x2c>
 800edd6:	4b95      	ldr	r3, [pc, #596]	; (800f02c <tcp_split_unsent_seg+0x274>)
 800edd8:	f240 324b 	movw	r2, #843	; 0x34b
 800eddc:	4994      	ldr	r1, [pc, #592]	; (800f030 <tcp_split_unsent_seg+0x278>)
 800edde:	4895      	ldr	r0, [pc, #596]	; (800f034 <tcp_split_unsent_seg+0x27c>)
 800ede0:	f004 f846 	bl	8012e70 <iprintf>

  useg = pcb->unsent;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ede8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d102      	bne.n	800edf6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800edf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800edf4:	e116      	b.n	800f024 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800edf6:	887b      	ldrh	r3, [r7, #2]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d109      	bne.n	800ee10 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800edfc:	4b8b      	ldr	r3, [pc, #556]	; (800f02c <tcp_split_unsent_seg+0x274>)
 800edfe:	f240 3253 	movw	r2, #851	; 0x353
 800ee02:	498d      	ldr	r1, [pc, #564]	; (800f038 <tcp_split_unsent_seg+0x280>)
 800ee04:	488b      	ldr	r0, [pc, #556]	; (800f034 <tcp_split_unsent_seg+0x27c>)
 800ee06:	f004 f833 	bl	8012e70 <iprintf>
    return ERR_VAL;
 800ee0a:	f06f 0305 	mvn.w	r3, #5
 800ee0e:	e109      	b.n	800f024 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	891b      	ldrh	r3, [r3, #8]
 800ee14:	887a      	ldrh	r2, [r7, #2]
 800ee16:	429a      	cmp	r2, r3
 800ee18:	d301      	bcc.n	800ee1e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	e102      	b.n	800f024 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee22:	887a      	ldrh	r2, [r7, #2]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d906      	bls.n	800ee36 <tcp_split_unsent_seg+0x7e>
 800ee28:	4b80      	ldr	r3, [pc, #512]	; (800f02c <tcp_split_unsent_seg+0x274>)
 800ee2a:	f240 325b 	movw	r2, #859	; 0x35b
 800ee2e:	4983      	ldr	r1, [pc, #524]	; (800f03c <tcp_split_unsent_seg+0x284>)
 800ee30:	4880      	ldr	r0, [pc, #512]	; (800f034 <tcp_split_unsent_seg+0x27c>)
 800ee32:	f004 f81d 	bl	8012e70 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	891b      	ldrh	r3, [r3, #8]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d106      	bne.n	800ee4c <tcp_split_unsent_seg+0x94>
 800ee3e:	4b7b      	ldr	r3, [pc, #492]	; (800f02c <tcp_split_unsent_seg+0x274>)
 800ee40:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ee44:	497e      	ldr	r1, [pc, #504]	; (800f040 <tcp_split_unsent_seg+0x288>)
 800ee46:	487b      	ldr	r0, [pc, #492]	; (800f034 <tcp_split_unsent_seg+0x27c>)
 800ee48:	f004 f812 	bl	8012e70 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	7a9b      	ldrb	r3, [r3, #10]
 800ee50:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	f003 0304 	and.w	r3, r3, #4
 800ee5c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	891a      	ldrh	r2, [r3, #8]
 800ee62:	887b      	ldrh	r3, [r7, #2]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	89bb      	ldrh	r3, [r7, #12]
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee76:	4619      	mov	r1, r3
 800ee78:	2036      	movs	r0, #54	; 0x36
 800ee7a:	f7fa fa55 	bl	8009328 <pbuf_alloc>
 800ee7e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 80b7 	beq.w	800eff6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	891a      	ldrh	r2, [r3, #8]
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	891b      	ldrh	r3, [r3, #8]
 800ee92:	1ad3      	subs	r3, r2, r3
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	887b      	ldrh	r3, [r7, #2]
 800ee98:	4413      	add	r3, r2
 800ee9a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	6858      	ldr	r0, [r3, #4]
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	685a      	ldr	r2, [r3, #4]
 800eea4:	7bbb      	ldrb	r3, [r7, #14]
 800eea6:	18d1      	adds	r1, r2, r3
 800eea8:	897b      	ldrh	r3, [r7, #10]
 800eeaa:	89ba      	ldrh	r2, [r7, #12]
 800eeac:	f7fa ff0a 	bl	8009cc4 <pbuf_copy_partial>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	89bb      	ldrh	r3, [r7, #12]
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	f040 809f 	bne.w	800effa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	899b      	ldrh	r3, [r3, #12]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7f9 f9cd 	bl	8008264 <lwip_htons>
 800eeca:	4603      	mov	r3, r0
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eed2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eed4:	2300      	movs	r3, #0
 800eed6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800eed8:	7efb      	ldrb	r3, [r7, #27]
 800eeda:	f003 0308 	and.w	r3, r3, #8
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d007      	beq.n	800eef2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eee2:	7efb      	ldrb	r3, [r7, #27]
 800eee4:	f023 0308 	bic.w	r3, r3, #8
 800eee8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800eeea:	7ebb      	ldrb	r3, [r7, #26]
 800eeec:	f043 0308 	orr.w	r3, r3, #8
 800eef0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800eef2:	7efb      	ldrb	r3, [r7, #27]
 800eef4:	f003 0301 	and.w	r3, r3, #1
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d007      	beq.n	800ef0c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800eefc:	7efb      	ldrb	r3, [r7, #27]
 800eefe:	f023 0301 	bic.w	r3, r3, #1
 800ef02:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ef04:	7ebb      	ldrb	r3, [r7, #26]
 800ef06:	f043 0301 	orr.w	r3, r3, #1
 800ef0a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7f9 f9bb 	bl	800828e <lwip_htonl>
 800ef18:	4602      	mov	r2, r0
 800ef1a:	887b      	ldrh	r3, [r7, #2]
 800ef1c:	18d1      	adds	r1, r2, r3
 800ef1e:	7eba      	ldrb	r2, [r7, #26]
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	460b      	mov	r3, r1
 800ef26:	6939      	ldr	r1, [r7, #16]
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff fa4f 	bl	800e3cc <tcp_create_segment>
 800ef2e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d063      	beq.n	800effe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	685b      	ldr	r3, [r3, #4]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7fa fd60 	bl	8009a00 <pbuf_clen>
 800ef40:	4603      	mov	r3, r0
 800ef42:	461a      	mov	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef4a:	1a9b      	subs	r3, r3, r2
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	6858      	ldr	r0, [r3, #4]
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	891a      	ldrh	r2, [r3, #8]
 800ef5e:	89bb      	ldrh	r3, [r7, #12]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	4619      	mov	r1, r3
 800ef66:	f7fa fb3d 	bl	80095e4 <pbuf_realloc>
  useg->len -= remainder;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	891a      	ldrh	r2, [r3, #8]
 800ef6e:	89bb      	ldrh	r3, [r7, #12]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	899b      	ldrh	r3, [r3, #12]
 800ef7e:	b29c      	uxth	r4, r3
 800ef80:	7efb      	ldrb	r3, [r7, #27]
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7f9 f96d 	bl	8008264 <lwip_htons>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	4322      	orrs	r2, r4
 800ef94:	b292      	uxth	r2, r2
 800ef96:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fa fd2f 	bl	8009a00 <pbuf_clen>
 800efa2:	4603      	mov	r3, r0
 800efa4:	461a      	mov	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efac:	4413      	add	r3, r2
 800efae:	b29a      	uxth	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fa fd20 	bl	8009a00 <pbuf_clen>
 800efc0:	4603      	mov	r3, r0
 800efc2:	461a      	mov	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800efca:	4413      	add	r3, r2
 800efcc:	b29a      	uxth	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800efe2:	69fb      	ldr	r3, [r7, #28]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d103      	bne.n	800eff2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e016      	b.n	800f024 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800eff6:	bf00      	nop
 800eff8:	e002      	b.n	800f000 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800effa:	bf00      	nop
 800effc:	e000      	b.n	800f000 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800effe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d006      	beq.n	800f014 <tcp_split_unsent_seg+0x25c>
 800f006:	4b09      	ldr	r3, [pc, #36]	; (800f02c <tcp_split_unsent_seg+0x274>)
 800f008:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f00c:	490d      	ldr	r1, [pc, #52]	; (800f044 <tcp_split_unsent_seg+0x28c>)
 800f00e:	4809      	ldr	r0, [pc, #36]	; (800f034 <tcp_split_unsent_seg+0x27c>)
 800f010:	f003 ff2e 	bl	8012e70 <iprintf>
  if (p != NULL) {
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d002      	beq.n	800f020 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f01a:	6938      	ldr	r0, [r7, #16]
 800f01c:	f7fa fc68 	bl	80098f0 <pbuf_free>
  }

  return ERR_MEM;
 800f020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f024:	4618      	mov	r0, r3
 800f026:	3724      	adds	r7, #36	; 0x24
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd90      	pop	{r4, r7, pc}
 800f02c:	08016834 	.word	0x08016834
 800f030:	08016bc8 	.word	0x08016bc8
 800f034:	08016888 	.word	0x08016888
 800f038:	08016bec 	.word	0x08016bec
 800f03c:	08016c10 	.word	0x08016c10
 800f040:	08016c20 	.word	0x08016c20
 800f044:	08016c30 	.word	0x08016c30

0800f048 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f048:	b590      	push	{r4, r7, lr}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d106      	bne.n	800f064 <tcp_send_fin+0x1c>
 800f056:	4b21      	ldr	r3, [pc, #132]	; (800f0dc <tcp_send_fin+0x94>)
 800f058:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f05c:	4920      	ldr	r1, [pc, #128]	; (800f0e0 <tcp_send_fin+0x98>)
 800f05e:	4821      	ldr	r0, [pc, #132]	; (800f0e4 <tcp_send_fin+0x9c>)
 800f060:	f003 ff06 	bl	8012e70 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d02e      	beq.n	800f0ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f070:	60fb      	str	r3, [r7, #12]
 800f072:	e002      	b.n	800f07a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1f8      	bne.n	800f074 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	899b      	ldrh	r3, [r3, #12]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7f9 f8ea 	bl	8008264 <lwip_htons>
 800f090:	4603      	mov	r3, r0
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f003 0307 	and.w	r3, r3, #7
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d116      	bne.n	800f0ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	899b      	ldrh	r3, [r3, #12]
 800f0a2:	b29c      	uxth	r4, r3
 800f0a4:	2001      	movs	r0, #1
 800f0a6:	f7f9 f8dd 	bl	8008264 <lwip_htons>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	4322      	orrs	r2, r4
 800f0b4:	b292      	uxth	r2, r2
 800f0b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	8b5b      	ldrh	r3, [r3, #26]
 800f0bc:	f043 0320 	orr.w	r3, r3, #32
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	e004      	b.n	800f0d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f0ca:	2101      	movs	r1, #1
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 f80b 	bl	800f0e8 <tcp_enqueue_flags>
 800f0d2:	4603      	mov	r3, r0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd90      	pop	{r4, r7, pc}
 800f0dc:	08016834 	.word	0x08016834
 800f0e0:	08016c3c 	.word	0x08016c3c
 800f0e4:	08016888 	.word	0x08016888

0800f0e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b08a      	sub	sp, #40	; 0x28
 800f0ec:	af02      	add	r7, sp, #8
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f0fc:	78fb      	ldrb	r3, [r7, #3]
 800f0fe:	f003 0303 	and.w	r3, r3, #3
 800f102:	2b00      	cmp	r3, #0
 800f104:	d106      	bne.n	800f114 <tcp_enqueue_flags+0x2c>
 800f106:	4b67      	ldr	r3, [pc, #412]	; (800f2a4 <tcp_enqueue_flags+0x1bc>)
 800f108:	f240 4211 	movw	r2, #1041	; 0x411
 800f10c:	4966      	ldr	r1, [pc, #408]	; (800f2a8 <tcp_enqueue_flags+0x1c0>)
 800f10e:	4867      	ldr	r0, [pc, #412]	; (800f2ac <tcp_enqueue_flags+0x1c4>)
 800f110:	f003 feae 	bl	8012e70 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <tcp_enqueue_flags+0x40>
 800f11a:	4b62      	ldr	r3, [pc, #392]	; (800f2a4 <tcp_enqueue_flags+0x1bc>)
 800f11c:	f240 4213 	movw	r2, #1043	; 0x413
 800f120:	4963      	ldr	r1, [pc, #396]	; (800f2b0 <tcp_enqueue_flags+0x1c8>)
 800f122:	4862      	ldr	r0, [pc, #392]	; (800f2ac <tcp_enqueue_flags+0x1c4>)
 800f124:	f003 fea4 	bl	8012e70 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f128:	78fb      	ldrb	r3, [r7, #3]
 800f12a:	f003 0302 	and.w	r3, r3, #2
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d001      	beq.n	800f136 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f132:	2301      	movs	r3, #1
 800f134:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f136:	7ffb      	ldrb	r3, [r7, #31]
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	f003 0304 	and.w	r3, r3, #4
 800f140:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f142:	7dfb      	ldrb	r3, [r7, #23]
 800f144:	b29b      	uxth	r3, r3
 800f146:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f14a:	4619      	mov	r1, r3
 800f14c:	2036      	movs	r0, #54	; 0x36
 800f14e:	f7fa f8eb 	bl	8009328 <pbuf_alloc>
 800f152:	6138      	str	r0, [r7, #16]
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d109      	bne.n	800f16e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8b5b      	ldrh	r3, [r3, #26]
 800f15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f162:	b29a      	uxth	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f16c:	e095      	b.n	800f29a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	895a      	ldrh	r2, [r3, #10]
 800f172:	7dfb      	ldrb	r3, [r7, #23]
 800f174:	b29b      	uxth	r3, r3
 800f176:	429a      	cmp	r2, r3
 800f178:	d206      	bcs.n	800f188 <tcp_enqueue_flags+0xa0>
 800f17a:	4b4a      	ldr	r3, [pc, #296]	; (800f2a4 <tcp_enqueue_flags+0x1bc>)
 800f17c:	f240 4239 	movw	r2, #1081	; 0x439
 800f180:	494c      	ldr	r1, [pc, #304]	; (800f2b4 <tcp_enqueue_flags+0x1cc>)
 800f182:	484a      	ldr	r0, [pc, #296]	; (800f2ac <tcp_enqueue_flags+0x1c4>)
 800f184:	f003 fe74 	bl	8012e70 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f18c:	78fa      	ldrb	r2, [r7, #3]
 800f18e:	7ffb      	ldrb	r3, [r7, #31]
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	460b      	mov	r3, r1
 800f194:	6939      	ldr	r1, [r7, #16]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f7ff f918 	bl	800e3cc <tcp_create_segment>
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d109      	bne.n	800f1b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	8b5b      	ldrh	r3, [r3, #26]
 800f1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f1b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1b6:	e070      	b.n	800f29a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	f003 0303 	and.w	r3, r3, #3
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d006      	beq.n	800f1d2 <tcp_enqueue_flags+0xea>
 800f1c4:	4b37      	ldr	r3, [pc, #220]	; (800f2a4 <tcp_enqueue_flags+0x1bc>)
 800f1c6:	f240 4242 	movw	r2, #1090	; 0x442
 800f1ca:	493b      	ldr	r1, [pc, #236]	; (800f2b8 <tcp_enqueue_flags+0x1d0>)
 800f1cc:	4837      	ldr	r0, [pc, #220]	; (800f2ac <tcp_enqueue_flags+0x1c4>)
 800f1ce:	f003 fe4f 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	891b      	ldrh	r3, [r3, #8]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d006      	beq.n	800f1e8 <tcp_enqueue_flags+0x100>
 800f1da:	4b32      	ldr	r3, [pc, #200]	; (800f2a4 <tcp_enqueue_flags+0x1bc>)
 800f1dc:	f240 4243 	movw	r2, #1091	; 0x443
 800f1e0:	4936      	ldr	r1, [pc, #216]	; (800f2bc <tcp_enqueue_flags+0x1d4>)
 800f1e2:	4832      	ldr	r0, [pc, #200]	; (800f2ac <tcp_enqueue_flags+0x1c4>)
 800f1e4:	f003 fe44 	bl	8012e70 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d103      	bne.n	800f1f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	68fa      	ldr	r2, [r7, #12]
 800f1f4:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1f6:	e00d      	b.n	800f214 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1fc:	61bb      	str	r3, [r7, #24]
 800f1fe:	e002      	b.n	800f206 <tcp_enqueue_flags+0x11e>
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	61bb      	str	r3, [r7, #24]
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1f8      	bne.n	800f200 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f20e:	69bb      	ldr	r3, [r7, #24]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	f003 0302 	and.w	r3, r3, #2
 800f222:	2b00      	cmp	r3, #0
 800f224:	d104      	bne.n	800f230 <tcp_enqueue_flags+0x148>
 800f226:	78fb      	ldrb	r3, [r7, #3]
 800f228:	f003 0301 	and.w	r3, r3, #1
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f234:	1c5a      	adds	r2, r3, #1
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f23a:	78fb      	ldrb	r3, [r7, #3]
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	2b00      	cmp	r3, #0
 800f242:	d006      	beq.n	800f252 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	8b5b      	ldrh	r3, [r3, #26]
 800f248:	f043 0320 	orr.w	r3, r3, #32
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	4618      	mov	r0, r3
 800f258:	f7fa fbd2 	bl	8009a00 <pbuf_clen>
 800f25c:	4603      	mov	r3, r0
 800f25e:	461a      	mov	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f266:	4413      	add	r3, r2
 800f268:	b29a      	uxth	r2, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f276:	2b00      	cmp	r3, #0
 800f278:	d00e      	beq.n	800f298 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10a      	bne.n	800f298 <tcp_enqueue_flags+0x1b0>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f286:	2b00      	cmp	r3, #0
 800f288:	d106      	bne.n	800f298 <tcp_enqueue_flags+0x1b0>
 800f28a:	4b06      	ldr	r3, [pc, #24]	; (800f2a4 <tcp_enqueue_flags+0x1bc>)
 800f28c:	f240 4265 	movw	r2, #1125	; 0x465
 800f290:	490b      	ldr	r1, [pc, #44]	; (800f2c0 <tcp_enqueue_flags+0x1d8>)
 800f292:	4806      	ldr	r0, [pc, #24]	; (800f2ac <tcp_enqueue_flags+0x1c4>)
 800f294:	f003 fdec 	bl	8012e70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3720      	adds	r7, #32
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	08016834 	.word	0x08016834
 800f2a8:	08016c58 	.word	0x08016c58
 800f2ac:	08016888 	.word	0x08016888
 800f2b0:	08016cb0 	.word	0x08016cb0
 800f2b4:	08016cd0 	.word	0x08016cd0
 800f2b8:	08016d0c 	.word	0x08016d0c
 800f2bc:	08016d24 	.word	0x08016d24
 800f2c0:	08016d50 	.word	0x08016d50

0800f2c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f2c4:	b5b0      	push	{r4, r5, r7, lr}
 800f2c6:	b08a      	sub	sp, #40	; 0x28
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d106      	bne.n	800f2e0 <tcp_output+0x1c>
 800f2d2:	4b9e      	ldr	r3, [pc, #632]	; (800f54c <tcp_output+0x288>)
 800f2d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f2d8:	499d      	ldr	r1, [pc, #628]	; (800f550 <tcp_output+0x28c>)
 800f2da:	489e      	ldr	r0, [pc, #632]	; (800f554 <tcp_output+0x290>)
 800f2dc:	f003 fdc8 	bl	8012e70 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	7d1b      	ldrb	r3, [r3, #20]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d106      	bne.n	800f2f6 <tcp_output+0x32>
 800f2e8:	4b98      	ldr	r3, [pc, #608]	; (800f54c <tcp_output+0x288>)
 800f2ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f2ee:	499a      	ldr	r1, [pc, #616]	; (800f558 <tcp_output+0x294>)
 800f2f0:	4898      	ldr	r0, [pc, #608]	; (800f554 <tcp_output+0x290>)
 800f2f2:	f003 fdbd 	bl	8012e70 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f2f6:	4b99      	ldr	r3, [pc, #612]	; (800f55c <tcp_output+0x298>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d101      	bne.n	800f304 <tcp_output+0x40>
    return ERR_OK;
 800f300:	2300      	movs	r3, #0
 800f302:	e1ce      	b.n	800f6a2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f310:	4293      	cmp	r3, r2
 800f312:	bf28      	it	cs
 800f314:	4613      	movcs	r3, r2
 800f316:	b29b      	uxth	r3, r3
 800f318:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f31e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f322:	2b00      	cmp	r3, #0
 800f324:	d10b      	bne.n	800f33e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	8b5b      	ldrh	r3, [r3, #26]
 800f32a:	f003 0302 	and.w	r3, r3, #2
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f000 81aa 	beq.w	800f688 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fdcb 	bl	800fed0 <tcp_send_empty_ack>
 800f33a:	4603      	mov	r3, r0
 800f33c:	e1b1      	b.n	800f6a2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3304      	adds	r3, #4
 800f344:	461a      	mov	r2, r3
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7ff f824 	bl	800e394 <tcp_route>
 800f34c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <tcp_output+0x96>
    return ERR_RTE;
 800f354:	f06f 0303 	mvn.w	r3, #3
 800f358:	e1a3      	b.n	800f6a2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <tcp_output+0xa4>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d111      	bne.n	800f38c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d002      	beq.n	800f374 <tcp_output+0xb0>
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	3304      	adds	r3, #4
 800f372:	e000      	b.n	800f376 <tcp_output+0xb2>
 800f374:	2300      	movs	r3, #0
 800f376:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <tcp_output+0xc0>
      return ERR_RTE;
 800f37e:	f06f 0303 	mvn.w	r3, #3
 800f382:	e18e      	b.n	800f6a2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38e:	68db      	ldr	r3, [r3, #12]
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	4618      	mov	r0, r3
 800f394:	f7f8 ff7b 	bl	800828e <lwip_htonl>
 800f398:	4602      	mov	r2, r0
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3a2:	8912      	ldrh	r2, [r2, #8]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	69ba      	ldr	r2, [r7, #24]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d227      	bcs.n	800f3fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d114      	bne.n	800f3e4 <tcp_output+0x120>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d110      	bne.n	800f3e4 <tcp_output+0x120>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10b      	bne.n	800f3e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	8b5b      	ldrh	r3, [r3, #26]
 800f3e8:	f003 0302 	and.w	r3, r3, #2
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f000 814d 	beq.w	800f68c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fd6c 	bl	800fed0 <tcp_send_empty_ack>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	e152      	b.n	800f6a2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f408:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f40a:	6a3b      	ldr	r3, [r7, #32]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f000 811c 	beq.w	800f64a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f412:	e002      	b.n	800f41a <tcp_output+0x156>
 800f414:	6a3b      	ldr	r3, [r7, #32]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	623b      	str	r3, [r7, #32]
 800f41a:	6a3b      	ldr	r3, [r7, #32]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d1f8      	bne.n	800f414 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f422:	e112      	b.n	800f64a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f426:	68db      	ldr	r3, [r3, #12]
 800f428:	899b      	ldrh	r3, [r3, #12]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7f8 ff19 	bl	8008264 <lwip_htons>
 800f432:	4603      	mov	r3, r0
 800f434:	b2db      	uxtb	r3, r3
 800f436:	f003 0304 	and.w	r3, r3, #4
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d006      	beq.n	800f44c <tcp_output+0x188>
 800f43e:	4b43      	ldr	r3, [pc, #268]	; (800f54c <tcp_output+0x288>)
 800f440:	f240 5236 	movw	r2, #1334	; 0x536
 800f444:	4946      	ldr	r1, [pc, #280]	; (800f560 <tcp_output+0x29c>)
 800f446:	4843      	ldr	r0, [pc, #268]	; (800f554 <tcp_output+0x290>)
 800f448:	f003 fd12 	bl	8012e70 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f450:	2b00      	cmp	r3, #0
 800f452:	d01f      	beq.n	800f494 <tcp_output+0x1d0>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	8b5b      	ldrh	r3, [r3, #26]
 800f458:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d119      	bne.n	800f494 <tcp_output+0x1d0>
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00b      	beq.n	800f480 <tcp_output+0x1bc>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d110      	bne.n	800f494 <tcp_output+0x1d0>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f476:	891a      	ldrh	r2, [r3, #8]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d209      	bcs.n	800f494 <tcp_output+0x1d0>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f486:	2b00      	cmp	r3, #0
 800f488:	d004      	beq.n	800f494 <tcp_output+0x1d0>
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f490:	2b08      	cmp	r3, #8
 800f492:	d901      	bls.n	800f498 <tcp_output+0x1d4>
 800f494:	2301      	movs	r3, #1
 800f496:	e000      	b.n	800f49a <tcp_output+0x1d6>
 800f498:	2300      	movs	r3, #0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d106      	bne.n	800f4ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	8b5b      	ldrh	r3, [r3, #26]
 800f4a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 80e4 	beq.w	800f674 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	7d1b      	ldrb	r3, [r3, #20]
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d00d      	beq.n	800f4d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	899b      	ldrh	r3, [r3, #12]
 800f4ba:	b29c      	uxth	r4, r3
 800f4bc:	2010      	movs	r0, #16
 800f4be:	f7f8 fed1 	bl	8008264 <lwip_htons>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	4322      	orrs	r2, r4
 800f4cc:	b292      	uxth	r2, r2
 800f4ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	6879      	ldr	r1, [r7, #4]
 800f4d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4d6:	f000 f909 	bl	800f6ec <tcp_output_segment>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f4de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d009      	beq.n	800f4fa <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	8b5b      	ldrh	r3, [r3, #26]
 800f4ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	835a      	strh	r2, [r3, #26]
      return err;
 800f4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4f8:	e0d3      	b.n	800f6a2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	7d1b      	ldrb	r3, [r3, #20]
 800f506:	2b02      	cmp	r3, #2
 800f508:	d006      	beq.n	800f518 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	8b5b      	ldrh	r3, [r3, #26]
 800f50e:	f023 0303 	bic.w	r3, r3, #3
 800f512:	b29a      	uxth	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51a:	68db      	ldr	r3, [r3, #12]
 800f51c:	685b      	ldr	r3, [r3, #4]
 800f51e:	4618      	mov	r0, r3
 800f520:	f7f8 feb5 	bl	800828e <lwip_htonl>
 800f524:	4604      	mov	r4, r0
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	891b      	ldrh	r3, [r3, #8]
 800f52a:	461d      	mov	r5, r3
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	899b      	ldrh	r3, [r3, #12]
 800f532:	b29b      	uxth	r3, r3
 800f534:	4618      	mov	r0, r3
 800f536:	f7f8 fe95 	bl	8008264 <lwip_htons>
 800f53a:	4603      	mov	r3, r0
 800f53c:	b2db      	uxtb	r3, r3
 800f53e:	f003 0303 	and.w	r3, r3, #3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00e      	beq.n	800f564 <tcp_output+0x2a0>
 800f546:	2301      	movs	r3, #1
 800f548:	e00d      	b.n	800f566 <tcp_output+0x2a2>
 800f54a:	bf00      	nop
 800f54c:	08016834 	.word	0x08016834
 800f550:	08016d78 	.word	0x08016d78
 800f554:	08016888 	.word	0x08016888
 800f558:	08016d90 	.word	0x08016d90
 800f55c:	200075d0 	.word	0x200075d0
 800f560:	08016db8 	.word	0x08016db8
 800f564:	2300      	movs	r3, #0
 800f566:	442b      	add	r3, r5
 800f568:	4423      	add	r3, r4
 800f56a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	da02      	bge.n	800f57e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	891b      	ldrh	r3, [r3, #8]
 800f582:	461c      	mov	r4, r3
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	899b      	ldrh	r3, [r3, #12]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7f8 fe69 	bl	8008264 <lwip_htons>
 800f592:	4603      	mov	r3, r0
 800f594:	b2db      	uxtb	r3, r3
 800f596:	f003 0303 	and.w	r3, r3, #3
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <tcp_output+0x2de>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e000      	b.n	800f5a4 <tcp_output+0x2e0>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	4423      	add	r3, r4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d049      	beq.n	800f63e <tcp_output+0x37a>
      seg->next = NULL;
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d105      	bne.n	800f5c4 <tcp_output+0x300>
        pcb->unacked = seg;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5bc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c0:	623b      	str	r3, [r7, #32]
 800f5c2:	e03f      	b.n	800f644 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7f8 fe5f 	bl	800828e <lwip_htonl>
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	6a3b      	ldr	r3, [r7, #32]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7f8 fe58 	bl	800828e <lwip_htonl>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	1ae3      	subs	r3, r4, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	da24      	bge.n	800f630 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3370      	adds	r3, #112	; 0x70
 800f5ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f5ec:	e002      	b.n	800f5f4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d011      	beq.n	800f620 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	4618      	mov	r0, r3
 800f606:	f7f8 fe42 	bl	800828e <lwip_htonl>
 800f60a:	4604      	mov	r4, r0
 800f60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	4618      	mov	r0, r3
 800f614:	f7f8 fe3b 	bl	800828e <lwip_htonl>
 800f618:	4603      	mov	r3, r0
 800f61a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	dbe6      	blt.n	800f5ee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f62c:	601a      	str	r2, [r3, #0]
 800f62e:	e009      	b.n	800f644 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f630:	6a3b      	ldr	r3, [r7, #32]
 800f632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f634:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	623b      	str	r3, [r7, #32]
 800f63c:	e002      	b.n	800f644 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f640:	f7fb feff 	bl	800b442 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f648:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d012      	beq.n	800f676 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	4618      	mov	r0, r3
 800f658:	f7f8 fe19 	bl	800828e <lwip_htonl>
 800f65c:	4602      	mov	r2, r0
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f666:	8912      	ldrh	r2, [r2, #8]
 800f668:	4413      	add	r3, r2
  while (seg != NULL &&
 800f66a:	69ba      	ldr	r2, [r7, #24]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	f4bf aed9 	bcs.w	800f424 <tcp_output+0x160>
 800f672:	e000      	b.n	800f676 <tcp_output+0x3b2>
      break;
 800f674:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d108      	bne.n	800f690 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f686:	e004      	b.n	800f692 <tcp_output+0x3ce>
    goto output_done;
 800f688:	bf00      	nop
 800f68a:	e002      	b.n	800f692 <tcp_output+0x3ce>
    goto output_done;
 800f68c:	bf00      	nop
 800f68e:	e000      	b.n	800f692 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f690:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	8b5b      	ldrh	r3, [r3, #26]
 800f696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3728      	adds	r7, #40	; 0x28
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f6aa:	bf00      	nop

0800f6ac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d106      	bne.n	800f6c8 <tcp_output_segment_busy+0x1c>
 800f6ba:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <tcp_output_segment_busy+0x34>)
 800f6bc:	f240 529a 	movw	r2, #1434	; 0x59a
 800f6c0:	4908      	ldr	r1, [pc, #32]	; (800f6e4 <tcp_output_segment_busy+0x38>)
 800f6c2:	4809      	ldr	r0, [pc, #36]	; (800f6e8 <tcp_output_segment_busy+0x3c>)
 800f6c4:	f003 fbd4 	bl	8012e70 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	7b9b      	ldrb	r3, [r3, #14]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d001      	beq.n	800f6d6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e000      	b.n	800f6d8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3708      	adds	r7, #8
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	08016834 	.word	0x08016834
 800f6e4:	08016dd0 	.word	0x08016dd0
 800f6e8:	08016888 	.word	0x08016888

0800f6ec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f6ec:	b5b0      	push	{r4, r5, r7, lr}
 800f6ee:	b08c      	sub	sp, #48	; 0x30
 800f6f0:	af04      	add	r7, sp, #16
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d106      	bne.n	800f70c <tcp_output_segment+0x20>
 800f6fe:	4b63      	ldr	r3, [pc, #396]	; (800f88c <tcp_output_segment+0x1a0>)
 800f700:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f704:	4962      	ldr	r1, [pc, #392]	; (800f890 <tcp_output_segment+0x1a4>)
 800f706:	4863      	ldr	r0, [pc, #396]	; (800f894 <tcp_output_segment+0x1a8>)
 800f708:	f003 fbb2 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d106      	bne.n	800f720 <tcp_output_segment+0x34>
 800f712:	4b5e      	ldr	r3, [pc, #376]	; (800f88c <tcp_output_segment+0x1a0>)
 800f714:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f718:	495f      	ldr	r1, [pc, #380]	; (800f898 <tcp_output_segment+0x1ac>)
 800f71a:	485e      	ldr	r0, [pc, #376]	; (800f894 <tcp_output_segment+0x1a8>)
 800f71c:	f003 fba8 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d106      	bne.n	800f734 <tcp_output_segment+0x48>
 800f726:	4b59      	ldr	r3, [pc, #356]	; (800f88c <tcp_output_segment+0x1a0>)
 800f728:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f72c:	495b      	ldr	r1, [pc, #364]	; (800f89c <tcp_output_segment+0x1b0>)
 800f72e:	4859      	ldr	r0, [pc, #356]	; (800f894 <tcp_output_segment+0x1a8>)
 800f730:	f003 fb9e 	bl	8012e70 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f7ff ffb9 	bl	800f6ac <tcp_output_segment_busy>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d001      	beq.n	800f744 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f740:	2300      	movs	r3, #0
 800f742:	e09f      	b.n	800f884 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	68dc      	ldr	r4, [r3, #12]
 800f74c:	4610      	mov	r0, r2
 800f74e:	f7f8 fd9e 	bl	800828e <lwip_htonl>
 800f752:	4603      	mov	r3, r0
 800f754:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	68dc      	ldr	r4, [r3, #12]
 800f75e:	4610      	mov	r0, r2
 800f760:	f7f8 fd80 	bl	8008264 <lwip_htons>
 800f764:	4603      	mov	r3, r0
 800f766:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f770:	441a      	add	r2, r3
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	3314      	adds	r3, #20
 800f77c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	7a9b      	ldrb	r3, [r3, #10]
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	2b00      	cmp	r3, #0
 800f788:	d015      	beq.n	800f7b6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	3304      	adds	r3, #4
 800f78e:	461a      	mov	r2, r3
 800f790:	6879      	ldr	r1, [r7, #4]
 800f792:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f796:	f7fc fa37 	bl	800bc08 <tcp_eff_send_mss_netif>
 800f79a:	4603      	mov	r3, r0
 800f79c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f79e:	8b7b      	ldrh	r3, [r7, #26]
 800f7a0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7f8 fd72 	bl	800828e <lwip_htonl>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	69fb      	ldr	r3, [r7, #28]
 800f7ae:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da02      	bge.n	800f7c6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10c      	bne.n	800f7e8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f7ce:	4b34      	ldr	r3, [pc, #208]	; (800f8a0 <tcp_output_segment+0x1b4>)
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7f8 fd56 	bl	800828e <lwip_htonl>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	68da      	ldr	r2, [r3, #12]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	685b      	ldr	r3, [r3, #4]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	8959      	ldrh	r1, [r3, #10]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	8b3a      	ldrh	r2, [r7, #24]
 800f802:	1a8a      	subs	r2, r1, r2
 800f804:	b292      	uxth	r2, r2
 800f806:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	8919      	ldrh	r1, [r3, #8]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	8b3a      	ldrh	r2, [r7, #24]
 800f814:	1a8a      	subs	r2, r1, r2
 800f816:	b292      	uxth	r2, r2
 800f818:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	68d2      	ldr	r2, [r2, #12]
 800f822:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	2200      	movs	r2, #0
 800f82a:	741a      	strb	r2, [r3, #16]
 800f82c:	2200      	movs	r2, #0
 800f82e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	68db      	ldr	r3, [r3, #12]
 800f834:	f103 0214 	add.w	r2, r3, #20
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	7a9b      	ldrb	r3, [r3, #10]
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	f003 0304 	and.w	r3, r3, #4
 800f842:	4413      	add	r3, r2
 800f844:	69fa      	ldr	r2, [r7, #28]
 800f846:	429a      	cmp	r2, r3
 800f848:	d006      	beq.n	800f858 <tcp_output_segment+0x16c>
 800f84a:	4b10      	ldr	r3, [pc, #64]	; (800f88c <tcp_output_segment+0x1a0>)
 800f84c:	f240 621c 	movw	r2, #1564	; 0x61c
 800f850:	4914      	ldr	r1, [pc, #80]	; (800f8a4 <tcp_output_segment+0x1b8>)
 800f852:	4810      	ldr	r0, [pc, #64]	; (800f894 <tcp_output_segment+0x1a8>)
 800f854:	f003 fb0c 	bl	8012e70 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6858      	ldr	r0, [r3, #4]
 800f85c:	68b9      	ldr	r1, [r7, #8]
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	1d1c      	adds	r4, r3, #4
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	7add      	ldrb	r5, [r3, #11]
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	7a9b      	ldrb	r3, [r3, #10]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	9202      	str	r2, [sp, #8]
 800f86e:	2206      	movs	r2, #6
 800f870:	9201      	str	r2, [sp, #4]
 800f872:	9300      	str	r3, [sp, #0]
 800f874:	462b      	mov	r3, r5
 800f876:	4622      	mov	r2, r4
 800f878:	f002 fa70 	bl	8011d5c <ip4_output_if>
 800f87c:	4603      	mov	r3, r0
 800f87e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f880:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3720      	adds	r7, #32
 800f888:	46bd      	mov	sp, r7
 800f88a:	bdb0      	pop	{r4, r5, r7, pc}
 800f88c:	08016834 	.word	0x08016834
 800f890:	08016df8 	.word	0x08016df8
 800f894:	08016888 	.word	0x08016888
 800f898:	08016e18 	.word	0x08016e18
 800f89c:	08016e38 	.word	0x08016e38
 800f8a0:	200075c0 	.word	0x200075c0
 800f8a4:	08016e5c 	.word	0x08016e5c

0800f8a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f8a8:	b5b0      	push	{r4, r5, r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <tcp_rexmit_rto_prepare+0x1c>
 800f8b6:	4b31      	ldr	r3, [pc, #196]	; (800f97c <tcp_rexmit_rto_prepare+0xd4>)
 800f8b8:	f240 6263 	movw	r2, #1635	; 0x663
 800f8bc:	4930      	ldr	r1, [pc, #192]	; (800f980 <tcp_rexmit_rto_prepare+0xd8>)
 800f8be:	4831      	ldr	r0, [pc, #196]	; (800f984 <tcp_rexmit_rto_prepare+0xdc>)
 800f8c0:	f003 fad6 	bl	8012e70 <iprintf>

  if (pcb->unacked == NULL) {
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d102      	bne.n	800f8d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f8cc:	f06f 0305 	mvn.w	r3, #5
 800f8d0:	e050      	b.n	800f974 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d6:	60fb      	str	r3, [r7, #12]
 800f8d8:	e00b      	b.n	800f8f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f8da:	68f8      	ldr	r0, [r7, #12]
 800f8dc:	f7ff fee6 	bl	800f6ac <tcp_output_segment_busy>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f8e6:	f06f 0305 	mvn.w	r3, #5
 800f8ea:	e043      	b.n	800f974 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	60fb      	str	r3, [r7, #12]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1ef      	bne.n	800f8da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff fed6 	bl	800f6ac <tcp_output_segment_busy>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f906:	f06f 0305 	mvn.w	r3, #5
 800f90a:	e033      	b.n	800f974 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	8b5b      	ldrh	r3, [r3, #26]
 800f926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	4618      	mov	r0, r3
 800f938:	f7f8 fca9 	bl	800828e <lwip_htonl>
 800f93c:	4604      	mov	r4, r0
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	891b      	ldrh	r3, [r3, #8]
 800f942:	461d      	mov	r5, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7f8 fc89 	bl	8008264 <lwip_htons>
 800f952:	4603      	mov	r3, r0
 800f954:	b2db      	uxtb	r3, r3
 800f956:	f003 0303 	and.w	r3, r3, #3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d001      	beq.n	800f962 <tcp_rexmit_rto_prepare+0xba>
 800f95e:	2301      	movs	r3, #1
 800f960:	e000      	b.n	800f964 <tcp_rexmit_rto_prepare+0xbc>
 800f962:	2300      	movs	r3, #0
 800f964:	442b      	add	r3, r5
 800f966:	18e2      	adds	r2, r4, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2200      	movs	r2, #0
 800f970:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f972:	2300      	movs	r3, #0
}
 800f974:	4618      	mov	r0, r3
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bdb0      	pop	{r4, r5, r7, pc}
 800f97c:	08016834 	.word	0x08016834
 800f980:	08016e70 	.word	0x08016e70
 800f984:	08016888 	.word	0x08016888

0800f988 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d106      	bne.n	800f9a4 <tcp_rexmit_rto_commit+0x1c>
 800f996:	4b0d      	ldr	r3, [pc, #52]	; (800f9cc <tcp_rexmit_rto_commit+0x44>)
 800f998:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f99c:	490c      	ldr	r1, [pc, #48]	; (800f9d0 <tcp_rexmit_rto_commit+0x48>)
 800f99e:	480d      	ldr	r0, [pc, #52]	; (800f9d4 <tcp_rexmit_rto_commit+0x4c>)
 800f9a0:	f003 fa66 	bl	8012e70 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9aa:	2bff      	cmp	r3, #255	; 0xff
 800f9ac:	d007      	beq.n	800f9be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7ff fc80 	bl	800f2c4 <tcp_output>
}
 800f9c4:	bf00      	nop
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	08016834 	.word	0x08016834
 800f9d0:	08016e94 	.word	0x08016e94
 800f9d4:	08016888 	.word	0x08016888

0800f9d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d106      	bne.n	800f9f4 <tcp_rexmit_rto+0x1c>
 800f9e6:	4b0a      	ldr	r3, [pc, #40]	; (800fa10 <tcp_rexmit_rto+0x38>)
 800f9e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f9ec:	4909      	ldr	r1, [pc, #36]	; (800fa14 <tcp_rexmit_rto+0x3c>)
 800f9ee:	480a      	ldr	r0, [pc, #40]	; (800fa18 <tcp_rexmit_rto+0x40>)
 800f9f0:	f003 fa3e 	bl	8012e70 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7ff ff57 	bl	800f8a8 <tcp_rexmit_rto_prepare>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f7ff ffc1 	bl	800f988 <tcp_rexmit_rto_commit>
  }
}
 800fa06:	bf00      	nop
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	08016834 	.word	0x08016834
 800fa14:	08016eb8 	.word	0x08016eb8
 800fa18:	08016888 	.word	0x08016888

0800fa1c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fa1c:	b590      	push	{r4, r7, lr}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d106      	bne.n	800fa38 <tcp_rexmit+0x1c>
 800fa2a:	4b2f      	ldr	r3, [pc, #188]	; (800fae8 <tcp_rexmit+0xcc>)
 800fa2c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fa30:	492e      	ldr	r1, [pc, #184]	; (800faec <tcp_rexmit+0xd0>)
 800fa32:	482f      	ldr	r0, [pc, #188]	; (800faf0 <tcp_rexmit+0xd4>)
 800fa34:	f003 fa1c 	bl	8012e70 <iprintf>

  if (pcb->unacked == NULL) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d102      	bne.n	800fa46 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fa40:	f06f 0305 	mvn.w	r3, #5
 800fa44:	e04c      	b.n	800fae0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa4a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fa4c:	68b8      	ldr	r0, [r7, #8]
 800fa4e:	f7ff fe2d 	bl	800f6ac <tcp_output_segment_busy>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d002      	beq.n	800fa5e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fa58:	f06f 0305 	mvn.w	r3, #5
 800fa5c:	e040      	b.n	800fae0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	681a      	ldr	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	336c      	adds	r3, #108	; 0x6c
 800fa6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fa6c:	e002      	b.n	800fa74 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d011      	beq.n	800faa0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	68db      	ldr	r3, [r3, #12]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	4618      	mov	r0, r3
 800fa86:	f7f8 fc02 	bl	800828e <lwip_htonl>
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f8 fbfb 	bl	800828e <lwip_htonl>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	dbe6      	blt.n	800fa6e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d103      	bne.n	800fabe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fac4:	2bff      	cmp	r3, #255	; 0xff
 800fac6:	d007      	beq.n	800fad8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800face:	3301      	adds	r3, #1
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3714      	adds	r7, #20
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd90      	pop	{r4, r7, pc}
 800fae8:	08016834 	.word	0x08016834
 800faec:	08016ed4 	.word	0x08016ed4
 800faf0:	08016888 	.word	0x08016888

0800faf4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d106      	bne.n	800fb10 <tcp_rexmit_fast+0x1c>
 800fb02:	4b2a      	ldr	r3, [pc, #168]	; (800fbac <tcp_rexmit_fast+0xb8>)
 800fb04:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fb08:	4929      	ldr	r1, [pc, #164]	; (800fbb0 <tcp_rexmit_fast+0xbc>)
 800fb0a:	482a      	ldr	r0, [pc, #168]	; (800fbb4 <tcp_rexmit_fast+0xc0>)
 800fb0c:	f003 f9b0 	bl	8012e70 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d044      	beq.n	800fba2 <tcp_rexmit_fast+0xae>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	8b5b      	ldrh	r3, [r3, #26]
 800fb1c:	f003 0304 	and.w	r3, r3, #4
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d13e      	bne.n	800fba2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ff79 	bl	800fa1c <tcp_rexmit>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d138      	bne.n	800fba2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	bf28      	it	cs
 800fb40:	4613      	movcs	r3, r2
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	0fda      	lsrs	r2, r3, #31
 800fb46:	4413      	add	r3, r2
 800fb48:	105b      	asrs	r3, r3, #1
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb58:	461a      	mov	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	429a      	cmp	r2, r3
 800fb62:	d206      	bcs.n	800fb72 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	b29a      	uxth	r2, r3
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	0049      	lsls	r1, r1, #1
 800fb80:	440b      	add	r3, r1
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	4413      	add	r3, r2
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	8b5b      	ldrh	r3, [r3, #26]
 800fb92:	f043 0304 	orr.w	r3, r3, #4
 800fb96:	b29a      	uxth	r2, r3
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fba2:	bf00      	nop
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	08016834 	.word	0x08016834
 800fbb0:	08016eec 	.word	0x08016eec
 800fbb4:	08016888 	.word	0x08016888

0800fbb8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b086      	sub	sp, #24
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	607b      	str	r3, [r7, #4]
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	817b      	strh	r3, [r7, #10]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fbca:	897a      	ldrh	r2, [r7, #10]
 800fbcc:	893b      	ldrh	r3, [r7, #8]
 800fbce:	4413      	add	r3, r2
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	3314      	adds	r3, #20
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fbda:	4619      	mov	r1, r3
 800fbdc:	2022      	movs	r0, #34	; 0x22
 800fbde:	f7f9 fba3 	bl	8009328 <pbuf_alloc>
 800fbe2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d04d      	beq.n	800fc86 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fbea:	897b      	ldrh	r3, [r7, #10]
 800fbec:	3313      	adds	r3, #19
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	8952      	ldrh	r2, [r2, #10]
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	db06      	blt.n	800fc04 <tcp_output_alloc_header_common+0x4c>
 800fbf6:	4b26      	ldr	r3, [pc, #152]	; (800fc90 <tcp_output_alloc_header_common+0xd8>)
 800fbf8:	f240 7223 	movw	r2, #1827	; 0x723
 800fbfc:	4925      	ldr	r1, [pc, #148]	; (800fc94 <tcp_output_alloc_header_common+0xdc>)
 800fbfe:	4826      	ldr	r0, [pc, #152]	; (800fc98 <tcp_output_alloc_header_common+0xe0>)
 800fc00:	f003 f936 	bl	8012e70 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fc0a:	8c3b      	ldrh	r3, [r7, #32]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7f8 fb29 	bl	8008264 <lwip_htons>
 800fc12:	4603      	mov	r3, r0
 800fc14:	461a      	mov	r2, r3
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fc1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7f8 fb21 	bl	8008264 <lwip_htons>
 800fc22:	4603      	mov	r3, r0
 800fc24:	461a      	mov	r2, r3
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f7f8 fb2c 	bl	800828e <lwip_htonl>
 800fc36:	4602      	mov	r2, r0
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fc3c:	897b      	ldrh	r3, [r7, #10]
 800fc3e:	089b      	lsrs	r3, r3, #2
 800fc40:	b29b      	uxth	r3, r3
 800fc42:	3305      	adds	r3, #5
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	031b      	lsls	r3, r3, #12
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	4313      	orrs	r3, r2
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7f8 fb05 	bl	8008264 <lwip_htons>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fc62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7f8 fafd 	bl	8008264 <lwip_htons>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	2200      	movs	r2, #0
 800fc76:	741a      	strb	r2, [r3, #16]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	749a      	strb	r2, [r3, #18]
 800fc82:	2200      	movs	r2, #0
 800fc84:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fc86:	697b      	ldr	r3, [r7, #20]
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3718      	adds	r7, #24
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	08016834 	.word	0x08016834
 800fc94:	08016f0c 	.word	0x08016f0c
 800fc98:	08016888 	.word	0x08016888

0800fc9c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fc9c:	b5b0      	push	{r4, r5, r7, lr}
 800fc9e:	b08a      	sub	sp, #40	; 0x28
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	607b      	str	r3, [r7, #4]
 800fca6:	460b      	mov	r3, r1
 800fca8:	817b      	strh	r3, [r7, #10]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d106      	bne.n	800fcc2 <tcp_output_alloc_header+0x26>
 800fcb4:	4b15      	ldr	r3, [pc, #84]	; (800fd0c <tcp_output_alloc_header+0x70>)
 800fcb6:	f240 7242 	movw	r2, #1858	; 0x742
 800fcba:	4915      	ldr	r1, [pc, #84]	; (800fd10 <tcp_output_alloc_header+0x74>)
 800fcbc:	4815      	ldr	r0, [pc, #84]	; (800fd14 <tcp_output_alloc_header+0x78>)
 800fcbe:	f003 f8d7 	bl	8012e70 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	8adb      	ldrh	r3, [r3, #22]
 800fcca:	68fa      	ldr	r2, [r7, #12]
 800fccc:	8b12      	ldrh	r2, [r2, #24]
 800fcce:	68f9      	ldr	r1, [r7, #12]
 800fcd0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800fcd2:	893d      	ldrh	r5, [r7, #8]
 800fcd4:	897c      	ldrh	r4, [r7, #10]
 800fcd6:	9103      	str	r1, [sp, #12]
 800fcd8:	2110      	movs	r1, #16
 800fcda:	9102      	str	r1, [sp, #8]
 800fcdc:	9201      	str	r2, [sp, #4]
 800fcde:	9300      	str	r3, [sp, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	462a      	mov	r2, r5
 800fce4:	4621      	mov	r1, r4
 800fce6:	f7ff ff67 	bl	800fbb8 <tcp_output_alloc_header_common>
 800fcea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d006      	beq.n	800fd00 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fcfa:	441a      	add	r2, r3
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fd00:	697b      	ldr	r3, [r7, #20]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3718      	adds	r7, #24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bdb0      	pop	{r4, r5, r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	08016834 	.word	0x08016834
 800fd10:	08016f3c 	.word	0x08016f3c
 800fd14:	08016888 	.word	0x08016888

0800fd18 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b088      	sub	sp, #32
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	4611      	mov	r1, r2
 800fd24:	461a      	mov	r2, r3
 800fd26:	460b      	mov	r3, r1
 800fd28:	71fb      	strb	r3, [r7, #7]
 800fd2a:	4613      	mov	r3, r2
 800fd2c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d106      	bne.n	800fd46 <tcp_output_fill_options+0x2e>
 800fd38:	4b13      	ldr	r3, [pc, #76]	; (800fd88 <tcp_output_fill_options+0x70>)
 800fd3a:	f240 7256 	movw	r2, #1878	; 0x756
 800fd3e:	4913      	ldr	r1, [pc, #76]	; (800fd8c <tcp_output_fill_options+0x74>)
 800fd40:	4813      	ldr	r0, [pc, #76]	; (800fd90 <tcp_output_fill_options+0x78>)
 800fd42:	f003 f895 	bl	8012e70 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	3314      	adds	r3, #20
 800fd50:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	f103 0214 	add.w	r2, r3, #20
 800fd58:	8bfb      	ldrh	r3, [r7, #30]
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	79fb      	ldrb	r3, [r7, #7]
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	f003 0304 	and.w	r3, r3, #4
 800fd66:	440b      	add	r3, r1
 800fd68:	4413      	add	r3, r2
 800fd6a:	697a      	ldr	r2, [r7, #20]
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d006      	beq.n	800fd7e <tcp_output_fill_options+0x66>
 800fd70:	4b05      	ldr	r3, [pc, #20]	; (800fd88 <tcp_output_fill_options+0x70>)
 800fd72:	f240 7275 	movw	r2, #1909	; 0x775
 800fd76:	4907      	ldr	r1, [pc, #28]	; (800fd94 <tcp_output_fill_options+0x7c>)
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <tcp_output_fill_options+0x78>)
 800fd7a:	f003 f879 	bl	8012e70 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800fd7e:	bf00      	nop
 800fd80:	3720      	adds	r7, #32
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	08016834 	.word	0x08016834
 800fd8c:	08016f64 	.word	0x08016f64
 800fd90:	08016888 	.word	0x08016888
 800fd94:	08016e5c 	.word	0x08016e5c

0800fd98 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b08a      	sub	sp, #40	; 0x28
 800fd9c:	af04      	add	r7, sp, #16
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	607a      	str	r2, [r7, #4]
 800fda4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d106      	bne.n	800fdba <tcp_output_control_segment+0x22>
 800fdac:	4b1c      	ldr	r3, [pc, #112]	; (800fe20 <tcp_output_control_segment+0x88>)
 800fdae:	f240 7287 	movw	r2, #1927	; 0x787
 800fdb2:	491c      	ldr	r1, [pc, #112]	; (800fe24 <tcp_output_control_segment+0x8c>)
 800fdb4:	481c      	ldr	r0, [pc, #112]	; (800fe28 <tcp_output_control_segment+0x90>)
 800fdb6:	f003 f85b 	bl	8012e70 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	6879      	ldr	r1, [r7, #4]
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7fe fae8 	bl	800e394 <tcp_route>
 800fdc4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d102      	bne.n	800fdd2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800fdcc:	23fc      	movs	r3, #252	; 0xfc
 800fdce:	75fb      	strb	r3, [r7, #23]
 800fdd0:	e01c      	b.n	800fe0c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d006      	beq.n	800fde6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	7adb      	ldrb	r3, [r3, #11]
 800fddc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	7a9b      	ldrb	r3, [r3, #10]
 800fde2:	757b      	strb	r3, [r7, #21]
 800fde4:	e003      	b.n	800fdee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800fde6:	23ff      	movs	r3, #255	; 0xff
 800fde8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800fdee:	7dba      	ldrb	r2, [r7, #22]
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	9302      	str	r3, [sp, #8]
 800fdf4:	2306      	movs	r3, #6
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	7d7b      	ldrb	r3, [r7, #21]
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	4613      	mov	r3, r2
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	6879      	ldr	r1, [r7, #4]
 800fe02:	68b8      	ldr	r0, [r7, #8]
 800fe04:	f001 ffaa 	bl	8011d5c <ip4_output_if>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fe0c:	68b8      	ldr	r0, [r7, #8]
 800fe0e:	f7f9 fd6f 	bl	80098f0 <pbuf_free>
  return err;
 800fe12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3718      	adds	r7, #24
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	08016834 	.word	0x08016834
 800fe24:	08016f8c 	.word	0x08016f8c
 800fe28:	08016888 	.word	0x08016888

0800fe2c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fe2c:	b590      	push	{r4, r7, lr}
 800fe2e:	b08b      	sub	sp, #44	; 0x2c
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
 800fe38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d106      	bne.n	800fe4e <tcp_rst+0x22>
 800fe40:	4b1f      	ldr	r3, [pc, #124]	; (800fec0 <tcp_rst+0x94>)
 800fe42:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fe46:	491f      	ldr	r1, [pc, #124]	; (800fec4 <tcp_rst+0x98>)
 800fe48:	481f      	ldr	r0, [pc, #124]	; (800fec8 <tcp_rst+0x9c>)
 800fe4a:	f003 f811 	bl	8012e70 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fe4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d106      	bne.n	800fe62 <tcp_rst+0x36>
 800fe54:	4b1a      	ldr	r3, [pc, #104]	; (800fec0 <tcp_rst+0x94>)
 800fe56:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fe5a:	491c      	ldr	r1, [pc, #112]	; (800fecc <tcp_rst+0xa0>)
 800fe5c:	481a      	ldr	r0, [pc, #104]	; (800fec8 <tcp_rst+0x9c>)
 800fe5e:	f003 f807 	bl	8012e70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fe62:	2300      	movs	r3, #0
 800fe64:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fe66:	f246 0308 	movw	r3, #24584	; 0x6008
 800fe6a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fe6c:	7dfb      	ldrb	r3, [r7, #23]
 800fe6e:	b29c      	uxth	r4, r3
 800fe70:	68b8      	ldr	r0, [r7, #8]
 800fe72:	f7f8 fa0c 	bl	800828e <lwip_htonl>
 800fe76:	4602      	mov	r2, r0
 800fe78:	8abb      	ldrh	r3, [r7, #20]
 800fe7a:	9303      	str	r3, [sp, #12]
 800fe7c:	2314      	movs	r3, #20
 800fe7e:	9302      	str	r3, [sp, #8]
 800fe80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fe82:	9301      	str	r3, [sp, #4]
 800fe84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fe92 	bl	800fbb8 <tcp_output_alloc_header_common>
 800fe94:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00c      	beq.n	800feb6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fe9c:	7dfb      	ldrb	r3, [r7, #23]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	6939      	ldr	r1, [r7, #16]
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f7ff ff38 	bl	800fd18 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	6939      	ldr	r1, [r7, #16]
 800feae:	68f8      	ldr	r0, [r7, #12]
 800feb0:	f7ff ff72 	bl	800fd98 <tcp_output_control_segment>
 800feb4:	e000      	b.n	800feb8 <tcp_rst+0x8c>
    return;
 800feb6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800feb8:	371c      	adds	r7, #28
 800feba:	46bd      	mov	sp, r7
 800febc:	bd90      	pop	{r4, r7, pc}
 800febe:	bf00      	nop
 800fec0:	08016834 	.word	0x08016834
 800fec4:	08016fb8 	.word	0x08016fb8
 800fec8:	08016888 	.word	0x08016888
 800fecc:	08016fd4 	.word	0x08016fd4

0800fed0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fed0:	b590      	push	{r4, r7, lr}
 800fed2:	b087      	sub	sp, #28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800fed8:	2300      	movs	r3, #0
 800feda:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fedc:	2300      	movs	r3, #0
 800fede:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d106      	bne.n	800fef4 <tcp_send_empty_ack+0x24>
 800fee6:	4b28      	ldr	r3, [pc, #160]	; (800ff88 <tcp_send_empty_ack+0xb8>)
 800fee8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800feec:	4927      	ldr	r1, [pc, #156]	; (800ff8c <tcp_send_empty_ack+0xbc>)
 800feee:	4828      	ldr	r0, [pc, #160]	; (800ff90 <tcp_send_empty_ack+0xc0>)
 800fef0:	f002 ffbe 	bl	8012e70 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fef4:	7dfb      	ldrb	r3, [r7, #23]
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	b2db      	uxtb	r3, r3
 800fefa:	f003 0304 	and.w	r3, r3, #4
 800fefe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ff00:	7d7b      	ldrb	r3, [r7, #21]
 800ff02:	b29c      	uxth	r4, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7f8 f9c0 	bl	800828e <lwip_htonl>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	2200      	movs	r2, #0
 800ff12:	4621      	mov	r1, r4
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f7ff fec1 	bl	800fc9c <tcp_output_alloc_header>
 800ff1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff1c:	693b      	ldr	r3, [r7, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d109      	bne.n	800ff36 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	8b5b      	ldrh	r3, [r3, #26]
 800ff26:	f043 0303 	orr.w	r3, r3, #3
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ff30:	f06f 0301 	mvn.w	r3, #1
 800ff34:	e023      	b.n	800ff7e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ff36:	7dbb      	ldrb	r3, [r7, #22]
 800ff38:	7dfa      	ldrb	r2, [r7, #23]
 800ff3a:	6939      	ldr	r1, [r7, #16]
 800ff3c:	6878      	ldr	r0, [r7, #4]
 800ff3e:	f7ff feeb 	bl	800fd18 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	3304      	adds	r3, #4
 800ff48:	6939      	ldr	r1, [r7, #16]
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7ff ff24 	bl	800fd98 <tcp_output_control_segment>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ff54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d007      	beq.n	800ff6c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8b5b      	ldrh	r3, [r3, #26]
 800ff60:	f043 0303 	orr.w	r3, r3, #3
 800ff64:	b29a      	uxth	r2, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	835a      	strh	r2, [r3, #26]
 800ff6a:	e006      	b.n	800ff7a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	8b5b      	ldrh	r3, [r3, #26]
 800ff70:	f023 0303 	bic.w	r3, r3, #3
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ff7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	371c      	adds	r7, #28
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd90      	pop	{r4, r7, pc}
 800ff86:	bf00      	nop
 800ff88:	08016834 	.word	0x08016834
 800ff8c:	08016ff0 	.word	0x08016ff0
 800ff90:	08016888 	.word	0x08016888

0800ff94 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ff94:	b590      	push	{r4, r7, lr}
 800ff96:	b087      	sub	sp, #28
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <tcp_keepalive+0x20>
 800ffa6:	4b18      	ldr	r3, [pc, #96]	; (8010008 <tcp_keepalive+0x74>)
 800ffa8:	f640 0224 	movw	r2, #2084	; 0x824
 800ffac:	4917      	ldr	r1, [pc, #92]	; (801000c <tcp_keepalive+0x78>)
 800ffae:	4818      	ldr	r0, [pc, #96]	; (8010010 <tcp_keepalive+0x7c>)
 800ffb0:	f002 ff5e 	bl	8012e70 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ffb4:	7dfb      	ldrb	r3, [r7, #23]
 800ffb6:	b29c      	uxth	r4, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7f8 f965 	bl	800828e <lwip_htonl>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	4621      	mov	r1, r4
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f7ff fe66 	bl	800fc9c <tcp_output_alloc_header>
 800ffd0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d102      	bne.n	800ffde <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ffd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffdc:	e010      	b.n	8010000 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	6939      	ldr	r1, [r7, #16]
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff fe97 	bl	800fd18 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	3304      	adds	r3, #4
 800fff0:	6939      	ldr	r1, [r7, #16]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff fed0 	bl	800fd98 <tcp_output_control_segment>
 800fff8:	4603      	mov	r3, r0
 800fffa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010000:	4618      	mov	r0, r3
 8010002:	371c      	adds	r7, #28
 8010004:	46bd      	mov	sp, r7
 8010006:	bd90      	pop	{r4, r7, pc}
 8010008:	08016834 	.word	0x08016834
 801000c:	08017010 	.word	0x08017010
 8010010:	08016888 	.word	0x08016888

08010014 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b08b      	sub	sp, #44	; 0x2c
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801001c:	2300      	movs	r3, #0
 801001e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d106      	bne.n	8010036 <tcp_zero_window_probe+0x22>
 8010028:	4b4c      	ldr	r3, [pc, #304]	; (801015c <tcp_zero_window_probe+0x148>)
 801002a:	f640 024f 	movw	r2, #2127	; 0x84f
 801002e:	494c      	ldr	r1, [pc, #304]	; (8010160 <tcp_zero_window_probe+0x14c>)
 8010030:	484c      	ldr	r0, [pc, #304]	; (8010164 <tcp_zero_window_probe+0x150>)
 8010032:	f002 ff1d 	bl	8012e70 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801003a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801003c:	6a3b      	ldr	r3, [r7, #32]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d101      	bne.n	8010046 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	e086      	b.n	8010154 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801004c:	2bff      	cmp	r3, #255	; 0xff
 801004e:	d007      	beq.n	8010060 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010056:	3301      	adds	r3, #1
 8010058:	b2da      	uxtb	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010060:	6a3b      	ldr	r3, [r7, #32]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	899b      	ldrh	r3, [r3, #12]
 8010066:	b29b      	uxth	r3, r3
 8010068:	4618      	mov	r0, r3
 801006a:	f7f8 f8fb 	bl	8008264 <lwip_htons>
 801006e:	4603      	mov	r3, r0
 8010070:	b2db      	uxtb	r3, r3
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	2b00      	cmp	r3, #0
 8010078:	d005      	beq.n	8010086 <tcp_zero_window_probe+0x72>
 801007a:	6a3b      	ldr	r3, [r7, #32]
 801007c:	891b      	ldrh	r3, [r3, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d101      	bne.n	8010086 <tcp_zero_window_probe+0x72>
 8010082:	2301      	movs	r3, #1
 8010084:	e000      	b.n	8010088 <tcp_zero_window_probe+0x74>
 8010086:	2300      	movs	r3, #0
 8010088:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801008a:	7ffb      	ldrb	r3, [r7, #31]
 801008c:	2b00      	cmp	r3, #0
 801008e:	bf0c      	ite	eq
 8010090:	2301      	moveq	r3, #1
 8010092:	2300      	movne	r3, #0
 8010094:	b2db      	uxtb	r3, r3
 8010096:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801009c:	b299      	uxth	r1, r3
 801009e:	6a3b      	ldr	r3, [r7, #32]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	8bba      	ldrh	r2, [r7, #28]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f7ff fdf8 	bl	800fc9c <tcp_output_alloc_header>
 80100ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d102      	bne.n	80100ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80100b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100b8:	e04c      	b.n	8010154 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80100c0:	7ffb      	ldrb	r3, [r7, #31]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d011      	beq.n	80100ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	899b      	ldrh	r3, [r3, #12]
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	b21b      	sxth	r3, r3
 80100ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80100d2:	b21c      	sxth	r4, r3
 80100d4:	2011      	movs	r0, #17
 80100d6:	f7f8 f8c5 	bl	8008264 <lwip_htons>
 80100da:	4603      	mov	r3, r0
 80100dc:	b21b      	sxth	r3, r3
 80100de:	4323      	orrs	r3, r4
 80100e0:	b21b      	sxth	r3, r3
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	819a      	strh	r2, [r3, #12]
 80100e8:	e010      	b.n	801010c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	3314      	adds	r3, #20
 80100f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80100f2:	6a3b      	ldr	r3, [r7, #32]
 80100f4:	6858      	ldr	r0, [r3, #4]
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	891a      	ldrh	r2, [r3, #8]
 80100fc:	6a3b      	ldr	r3, [r7, #32]
 80100fe:	891b      	ldrh	r3, [r3, #8]
 8010100:	1ad3      	subs	r3, r2, r3
 8010102:	b29b      	uxth	r3, r3
 8010104:	2201      	movs	r2, #1
 8010106:	6939      	ldr	r1, [r7, #16]
 8010108:	f7f9 fddc 	bl	8009cc4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801010c:	6a3b      	ldr	r3, [r7, #32]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	4618      	mov	r0, r3
 8010114:	f7f8 f8bb 	bl	800828e <lwip_htonl>
 8010118:	4603      	mov	r3, r0
 801011a:	3301      	adds	r3, #1
 801011c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	2b00      	cmp	r3, #0
 8010128:	da02      	bge.n	8010130 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010134:	2200      	movs	r2, #0
 8010136:	69b9      	ldr	r1, [r7, #24]
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7ff fded 	bl	800fd18 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3304      	adds	r3, #4
 8010144:	69b9      	ldr	r1, [r7, #24]
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7ff fe26 	bl	800fd98 <tcp_output_control_segment>
 801014c:	4603      	mov	r3, r0
 801014e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010150:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010154:	4618      	mov	r0, r3
 8010156:	372c      	adds	r7, #44	; 0x2c
 8010158:	46bd      	mov	sp, r7
 801015a:	bd90      	pop	{r4, r7, pc}
 801015c:	08016834 	.word	0x08016834
 8010160:	0801702c 	.word	0x0801702c
 8010164:	08016888 	.word	0x08016888

08010168 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010170:	f7f9 fefa 	bl	8009f68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010174:	4b0a      	ldr	r3, [pc, #40]	; (80101a0 <tcpip_tcp_timer+0x38>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d103      	bne.n	8010184 <tcpip_tcp_timer+0x1c>
 801017c:	4b09      	ldr	r3, [pc, #36]	; (80101a4 <tcpip_tcp_timer+0x3c>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d005      	beq.n	8010190 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010184:	2200      	movs	r2, #0
 8010186:	4908      	ldr	r1, [pc, #32]	; (80101a8 <tcpip_tcp_timer+0x40>)
 8010188:	20fa      	movs	r0, #250	; 0xfa
 801018a:	f000 f8f3 	bl	8010374 <sys_timeout>
 801018e:	e003      	b.n	8010198 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010190:	4b06      	ldr	r3, [pc, #24]	; (80101ac <tcpip_tcp_timer+0x44>)
 8010192:	2200      	movs	r2, #0
 8010194:	601a      	str	r2, [r3, #0]
  }
}
 8010196:	bf00      	nop
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	200075bc 	.word	0x200075bc
 80101a4:	200075cc 	.word	0x200075cc
 80101a8:	08010169 	.word	0x08010169
 80101ac:	20000588 	.word	0x20000588

080101b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80101b4:	4b0a      	ldr	r3, [pc, #40]	; (80101e0 <tcp_timer_needed+0x30>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d10f      	bne.n	80101dc <tcp_timer_needed+0x2c>
 80101bc:	4b09      	ldr	r3, [pc, #36]	; (80101e4 <tcp_timer_needed+0x34>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d103      	bne.n	80101cc <tcp_timer_needed+0x1c>
 80101c4:	4b08      	ldr	r3, [pc, #32]	; (80101e8 <tcp_timer_needed+0x38>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d007      	beq.n	80101dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <tcp_timer_needed+0x30>)
 80101ce:	2201      	movs	r2, #1
 80101d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80101d2:	2200      	movs	r2, #0
 80101d4:	4905      	ldr	r1, [pc, #20]	; (80101ec <tcp_timer_needed+0x3c>)
 80101d6:	20fa      	movs	r0, #250	; 0xfa
 80101d8:	f000 f8cc 	bl	8010374 <sys_timeout>
  }
}
 80101dc:	bf00      	nop
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20000588 	.word	0x20000588
 80101e4:	200075bc 	.word	0x200075bc
 80101e8:	200075cc 	.word	0x200075cc
 80101ec:	08010169 	.word	0x08010169

080101f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b086      	sub	sp, #24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80101fc:	2006      	movs	r0, #6
 80101fe:	f7f8 fd19 	bl	8008c34 <memp_malloc>
 8010202:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010204:	693b      	ldr	r3, [r7, #16]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d109      	bne.n	801021e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d151      	bne.n	80102b4 <sys_timeout_abs+0xc4>
 8010210:	4b2a      	ldr	r3, [pc, #168]	; (80102bc <sys_timeout_abs+0xcc>)
 8010212:	22be      	movs	r2, #190	; 0xbe
 8010214:	492a      	ldr	r1, [pc, #168]	; (80102c0 <sys_timeout_abs+0xd0>)
 8010216:	482b      	ldr	r0, [pc, #172]	; (80102c4 <sys_timeout_abs+0xd4>)
 8010218:	f002 fe2a 	bl	8012e70 <iprintf>
    return;
 801021c:	e04a      	b.n	80102b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010236:	4b24      	ldr	r3, [pc, #144]	; (80102c8 <sys_timeout_abs+0xd8>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d103      	bne.n	8010246 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801023e:	4a22      	ldr	r2, [pc, #136]	; (80102c8 <sys_timeout_abs+0xd8>)
 8010240:	693b      	ldr	r3, [r7, #16]
 8010242:	6013      	str	r3, [r2, #0]
    return;
 8010244:	e037      	b.n	80102b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	685a      	ldr	r2, [r3, #4]
 801024a:	4b1f      	ldr	r3, [pc, #124]	; (80102c8 <sys_timeout_abs+0xd8>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	1ad3      	subs	r3, r2, r3
 8010252:	0fdb      	lsrs	r3, r3, #31
 8010254:	f003 0301 	and.w	r3, r3, #1
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	d007      	beq.n	801026e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801025e:	4b1a      	ldr	r3, [pc, #104]	; (80102c8 <sys_timeout_abs+0xd8>)
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010266:	4a18      	ldr	r2, [pc, #96]	; (80102c8 <sys_timeout_abs+0xd8>)
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	6013      	str	r3, [r2, #0]
 801026c:	e023      	b.n	80102b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801026e:	4b16      	ldr	r3, [pc, #88]	; (80102c8 <sys_timeout_abs+0xd8>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	617b      	str	r3, [r7, #20]
 8010274:	e01a      	b.n	80102ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d00b      	beq.n	8010296 <sys_timeout_abs+0xa6>
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	685a      	ldr	r2, [r3, #4]
 8010282:	697b      	ldr	r3, [r7, #20]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	1ad3      	subs	r3, r2, r3
 801028a:	0fdb      	lsrs	r3, r3, #31
 801028c:	f003 0301 	and.w	r3, r3, #1
 8010290:	b2db      	uxtb	r3, r3
 8010292:	2b00      	cmp	r3, #0
 8010294:	d007      	beq.n	80102a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	693a      	ldr	r2, [r7, #16]
 80102a2:	601a      	str	r2, [r3, #0]
        break;
 80102a4:	e007      	b.n	80102b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	617b      	str	r3, [r7, #20]
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e1      	bne.n	8010276 <sys_timeout_abs+0x86>
 80102b2:	e000      	b.n	80102b6 <sys_timeout_abs+0xc6>
    return;
 80102b4:	bf00      	nop
      }
    }
  }
}
 80102b6:	3718      	adds	r7, #24
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	08017050 	.word	0x08017050
 80102c0:	08017084 	.word	0x08017084
 80102c4:	080170c4 	.word	0x080170c4
 80102c8:	20000580 	.word	0x20000580

080102cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4798      	blx	r3

  now = sys_now();
 80102de:	f7f4 fe8b 	bl	8004ff8 <sys_now>
 80102e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	4b0f      	ldr	r3, [pc, #60]	; (8010328 <lwip_cyclic_timer+0x5c>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4413      	add	r3, r2
 80102ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	0fdb      	lsrs	r3, r3, #31
 80102f8:	f003 0301 	and.w	r3, r3, #1
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d009      	beq.n	8010316 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	4413      	add	r3, r2
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	4907      	ldr	r1, [pc, #28]	; (801032c <lwip_cyclic_timer+0x60>)
 801030e:	4618      	mov	r0, r3
 8010310:	f7ff ff6e 	bl	80101f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010314:	e004      	b.n	8010320 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	4904      	ldr	r1, [pc, #16]	; (801032c <lwip_cyclic_timer+0x60>)
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f7ff ff68 	bl	80101f0 <sys_timeout_abs>
}
 8010320:	bf00      	nop
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	20000584 	.word	0x20000584
 801032c:	080102cd 	.word	0x080102cd

08010330 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010336:	2301      	movs	r3, #1
 8010338:	607b      	str	r3, [r7, #4]
 801033a:	e00e      	b.n	801035a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801033c:	4a0b      	ldr	r2, [pc, #44]	; (801036c <sys_timeouts_init+0x3c>)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	4a08      	ldr	r2, [pc, #32]	; (801036c <sys_timeouts_init+0x3c>)
 801034a:	4413      	add	r3, r2
 801034c:	461a      	mov	r2, r3
 801034e:	4908      	ldr	r1, [pc, #32]	; (8010370 <sys_timeouts_init+0x40>)
 8010350:	f000 f810 	bl	8010374 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3301      	adds	r3, #1
 8010358:	607b      	str	r3, [r7, #4]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b02      	cmp	r3, #2
 801035e:	d9ed      	bls.n	801033c <sys_timeouts_init+0xc>
  }
}
 8010360:	bf00      	nop
 8010362:	bf00      	nop
 8010364:	3708      	adds	r7, #8
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	0801aae8 	.word	0x0801aae8
 8010370:	080102cd 	.word	0x080102cd

08010374 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010386:	d306      	bcc.n	8010396 <sys_timeout+0x22>
 8010388:	4b0a      	ldr	r3, [pc, #40]	; (80103b4 <sys_timeout+0x40>)
 801038a:	f240 1229 	movw	r2, #297	; 0x129
 801038e:	490a      	ldr	r1, [pc, #40]	; (80103b8 <sys_timeout+0x44>)
 8010390:	480a      	ldr	r0, [pc, #40]	; (80103bc <sys_timeout+0x48>)
 8010392:	f002 fd6d 	bl	8012e70 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010396:	f7f4 fe2f 	bl	8004ff8 <sys_now>
 801039a:	4602      	mov	r2, r0
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	4413      	add	r3, r2
 80103a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	68b9      	ldr	r1, [r7, #8]
 80103a6:	6978      	ldr	r0, [r7, #20]
 80103a8:	f7ff ff22 	bl	80101f0 <sys_timeout_abs>
#endif
}
 80103ac:	bf00      	nop
 80103ae:	3718      	adds	r7, #24
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	08017050 	.word	0x08017050
 80103b8:	080170ec 	.word	0x080170ec
 80103bc:	080170c4 	.word	0x080170c4

080103c0 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80103ca:	4b19      	ldr	r3, [pc, #100]	; (8010430 <sys_untimeout+0x70>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d029      	beq.n	8010426 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80103d2:	4b17      	ldr	r3, [pc, #92]	; (8010430 <sys_untimeout+0x70>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	60bb      	str	r3, [r7, #8]
 80103d8:	2300      	movs	r3, #0
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	e01f      	b.n	801041e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	687a      	ldr	r2, [r7, #4]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d115      	bne.n	8010414 <sys_untimeout+0x54>
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	683a      	ldr	r2, [r7, #0]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d110      	bne.n	8010414 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d104      	bne.n	8010402 <sys_untimeout+0x42>
        next_timeout = t->next;
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a0c      	ldr	r2, [pc, #48]	; (8010430 <sys_untimeout+0x70>)
 80103fe:	6013      	str	r3, [r2, #0]
 8010400:	e003      	b.n	801040a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801040a:	68b9      	ldr	r1, [r7, #8]
 801040c:	2006      	movs	r0, #6
 801040e:	f7f8 fc5d 	bl	8008ccc <memp_free>
      return;
 8010412:	e009      	b.n	8010428 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	60fb      	str	r3, [r7, #12]
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	60bb      	str	r3, [r7, #8]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d1dc      	bne.n	80103de <sys_untimeout+0x1e>
    }
  }
  return;
 8010424:	e000      	b.n	8010428 <sys_untimeout+0x68>
    return;
 8010426:	bf00      	nop
}
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	20000580 	.word	0x20000580

08010434 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801043a:	f7f4 fddd 	bl	8004ff8 <sys_now>
 801043e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010440:	4b1a      	ldr	r3, [pc, #104]	; (80104ac <sys_check_timeouts+0x78>)
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <sys_check_timeouts+0x1a>
 801044a:	f7f8 ff17 	bl	800927c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801044e:	4b18      	ldr	r3, [pc, #96]	; (80104b0 <sys_check_timeouts+0x7c>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d022      	beq.n	80104a0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	68fa      	ldr	r2, [r7, #12]
 8010460:	1ad3      	subs	r3, r2, r3
 8010462:	0fdb      	lsrs	r3, r3, #31
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d11a      	bne.n	80104a4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4a0f      	ldr	r2, [pc, #60]	; (80104b0 <sys_check_timeouts+0x7c>)
 8010474:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	4a0b      	ldr	r2, [pc, #44]	; (80104b4 <sys_check_timeouts+0x80>)
 8010488:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801048a:	68b9      	ldr	r1, [r7, #8]
 801048c:	2006      	movs	r0, #6
 801048e:	f7f8 fc1d 	bl	8008ccc <memp_free>
    if (handler != NULL) {
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d0d3      	beq.n	8010440 <sys_check_timeouts+0xc>
      handler(arg);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6838      	ldr	r0, [r7, #0]
 801049c:	4798      	blx	r3
  do {
 801049e:	e7cf      	b.n	8010440 <sys_check_timeouts+0xc>
      return;
 80104a0:	bf00      	nop
 80104a2:	e000      	b.n	80104a6 <sys_check_timeouts+0x72>
      return;
 80104a4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	200075b4 	.word	0x200075b4
 80104b0:	20000580 	.word	0x20000580
 80104b4:	20000584 	.word	0x20000584

080104b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80104bc:	f002 fcf0 	bl	8012ea0 <rand>
 80104c0:	4603      	mov	r3, r0
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80104ce:	b29a      	uxth	r2, r3
 80104d0:	4b01      	ldr	r3, [pc, #4]	; (80104d8 <udp_init+0x20>)
 80104d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80104d4:	bf00      	nop
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	2000002c 	.word	0x2000002c

080104dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	4613      	mov	r3, r2
 80104e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d105      	bne.n	80104fc <udp_input_local_match+0x20>
 80104f0:	4b27      	ldr	r3, [pc, #156]	; (8010590 <udp_input_local_match+0xb4>)
 80104f2:	2287      	movs	r2, #135	; 0x87
 80104f4:	4927      	ldr	r1, [pc, #156]	; (8010594 <udp_input_local_match+0xb8>)
 80104f6:	4828      	ldr	r0, [pc, #160]	; (8010598 <udp_input_local_match+0xbc>)
 80104f8:	f002 fcba 	bl	8012e70 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d105      	bne.n	801050e <udp_input_local_match+0x32>
 8010502:	4b23      	ldr	r3, [pc, #140]	; (8010590 <udp_input_local_match+0xb4>)
 8010504:	2288      	movs	r2, #136	; 0x88
 8010506:	4925      	ldr	r1, [pc, #148]	; (801059c <udp_input_local_match+0xc0>)
 8010508:	4823      	ldr	r0, [pc, #140]	; (8010598 <udp_input_local_match+0xbc>)
 801050a:	f002 fcb1 	bl	8012e70 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	7a1b      	ldrb	r3, [r3, #8]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00b      	beq.n	801052e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	7a1a      	ldrb	r2, [r3, #8]
 801051a:	4b21      	ldr	r3, [pc, #132]	; (80105a0 <udp_input_local_match+0xc4>)
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010522:	3301      	adds	r3, #1
 8010524:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010526:	429a      	cmp	r2, r3
 8010528:	d001      	beq.n	801052e <udp_input_local_match+0x52>
    return 0;
 801052a:	2300      	movs	r3, #0
 801052c:	e02b      	b.n	8010586 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801052e:	79fb      	ldrb	r3, [r7, #7]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d018      	beq.n	8010566 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d013      	beq.n	8010562 <udp_input_local_match+0x86>
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00f      	beq.n	8010562 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010542:	4b17      	ldr	r3, [pc, #92]	; (80105a0 <udp_input_local_match+0xc4>)
 8010544:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801054a:	d00a      	beq.n	8010562 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	4b13      	ldr	r3, [pc, #76]	; (80105a0 <udp_input_local_match+0xc4>)
 8010552:	695b      	ldr	r3, [r3, #20]
 8010554:	405a      	eors	r2, r3
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	3308      	adds	r3, #8
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801055e:	2b00      	cmp	r3, #0
 8010560:	d110      	bne.n	8010584 <udp_input_local_match+0xa8>
          return 1;
 8010562:	2301      	movs	r3, #1
 8010564:	e00f      	b.n	8010586 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d009      	beq.n	8010580 <udp_input_local_match+0xa4>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d005      	beq.n	8010580 <udp_input_local_match+0xa4>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681a      	ldr	r2, [r3, #0]
 8010578:	4b09      	ldr	r3, [pc, #36]	; (80105a0 <udp_input_local_match+0xc4>)
 801057a:	695b      	ldr	r3, [r3, #20]
 801057c:	429a      	cmp	r2, r3
 801057e:	d101      	bne.n	8010584 <udp_input_local_match+0xa8>
        return 1;
 8010580:	2301      	movs	r3, #1
 8010582:	e000      	b.n	8010586 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3710      	adds	r7, #16
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	08017138 	.word	0x08017138
 8010594:	08017168 	.word	0x08017168
 8010598:	0801718c 	.word	0x0801718c
 801059c:	080171b4 	.word	0x080171b4
 80105a0:	20004078 	.word	0x20004078

080105a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b08d      	sub	sp, #52	; 0x34
 80105a8:	af02      	add	r7, sp, #8
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d105      	bne.n	80105c4 <udp_input+0x20>
 80105b8:	4b7c      	ldr	r3, [pc, #496]	; (80107ac <udp_input+0x208>)
 80105ba:	22cf      	movs	r2, #207	; 0xcf
 80105bc:	497c      	ldr	r1, [pc, #496]	; (80107b0 <udp_input+0x20c>)
 80105be:	487d      	ldr	r0, [pc, #500]	; (80107b4 <udp_input+0x210>)
 80105c0:	f002 fc56 	bl	8012e70 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d105      	bne.n	80105d6 <udp_input+0x32>
 80105ca:	4b78      	ldr	r3, [pc, #480]	; (80107ac <udp_input+0x208>)
 80105cc:	22d0      	movs	r2, #208	; 0xd0
 80105ce:	497a      	ldr	r1, [pc, #488]	; (80107b8 <udp_input+0x214>)
 80105d0:	4878      	ldr	r0, [pc, #480]	; (80107b4 <udp_input+0x210>)
 80105d2:	f002 fc4d 	bl	8012e70 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	895b      	ldrh	r3, [r3, #10]
 80105da:	2b07      	cmp	r3, #7
 80105dc:	d803      	bhi.n	80105e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f7f9 f986 	bl	80098f0 <pbuf_free>
    goto end;
 80105e4:	e0de      	b.n	80107a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80105ec:	4b73      	ldr	r3, [pc, #460]	; (80107bc <udp_input+0x218>)
 80105ee:	695b      	ldr	r3, [r3, #20]
 80105f0:	4a72      	ldr	r2, [pc, #456]	; (80107bc <udp_input+0x218>)
 80105f2:	6812      	ldr	r2, [r2, #0]
 80105f4:	4611      	mov	r1, r2
 80105f6:	4618      	mov	r0, r3
 80105f8:	f001 fc88 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 80105fc:	4603      	mov	r3, r0
 80105fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	881b      	ldrh	r3, [r3, #0]
 8010604:	b29b      	uxth	r3, r3
 8010606:	4618      	mov	r0, r3
 8010608:	f7f7 fe2c 	bl	8008264 <lwip_htons>
 801060c:	4603      	mov	r3, r0
 801060e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	885b      	ldrh	r3, [r3, #2]
 8010614:	b29b      	uxth	r3, r3
 8010616:	4618      	mov	r0, r3
 8010618:	f7f7 fe24 	bl	8008264 <lwip_htons>
 801061c:	4603      	mov	r3, r0
 801061e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010620:	2300      	movs	r3, #0
 8010622:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010624:	2300      	movs	r3, #0
 8010626:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010628:	2300      	movs	r3, #0
 801062a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801062c:	4b64      	ldr	r3, [pc, #400]	; (80107c0 <udp_input+0x21c>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	627b      	str	r3, [r7, #36]	; 0x24
 8010632:	e054      	b.n	80106de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	8a5b      	ldrh	r3, [r3, #18]
 8010638:	89fa      	ldrh	r2, [r7, #14]
 801063a:	429a      	cmp	r2, r3
 801063c:	d14a      	bne.n	80106d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801063e:	7cfb      	ldrb	r3, [r7, #19]
 8010640:	461a      	mov	r2, r3
 8010642:	6839      	ldr	r1, [r7, #0]
 8010644:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010646:	f7ff ff49 	bl	80104dc <udp_input_local_match>
 801064a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801064c:	2b00      	cmp	r3, #0
 801064e:	d041      	beq.n	80106d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010652:	7c1b      	ldrb	r3, [r3, #16]
 8010654:	f003 0304 	and.w	r3, r3, #4
 8010658:	2b00      	cmp	r3, #0
 801065a:	d11d      	bne.n	8010698 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d102      	bne.n	8010668 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010664:	61fb      	str	r3, [r7, #28]
 8010666:	e017      	b.n	8010698 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010668:	7cfb      	ldrb	r3, [r7, #19]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d014      	beq.n	8010698 <udp_input+0xf4>
 801066e:	4b53      	ldr	r3, [pc, #332]	; (80107bc <udp_input+0x218>)
 8010670:	695b      	ldr	r3, [r3, #20]
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010676:	d10f      	bne.n	8010698 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	3304      	adds	r3, #4
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	429a      	cmp	r2, r3
 8010684:	d008      	beq.n	8010698 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	3304      	adds	r3, #4
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	429a      	cmp	r2, r3
 8010692:	d101      	bne.n	8010698 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010696:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069a:	8a9b      	ldrh	r3, [r3, #20]
 801069c:	8a3a      	ldrh	r2, [r7, #16]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d118      	bne.n	80106d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80106a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d005      	beq.n	80106b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80106aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ac:	685a      	ldr	r2, [r3, #4]
 80106ae:	4b43      	ldr	r3, [pc, #268]	; (80107bc <udp_input+0x218>)
 80106b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d10e      	bne.n	80106d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80106b6:	6a3b      	ldr	r3, [r7, #32]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d014      	beq.n	80106e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106be:	68da      	ldr	r2, [r3, #12]
 80106c0:	6a3b      	ldr	r3, [r7, #32]
 80106c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80106c4:	4b3e      	ldr	r3, [pc, #248]	; (80107c0 <udp_input+0x21c>)
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80106cc:	4a3c      	ldr	r2, [pc, #240]	; (80107c0 <udp_input+0x21c>)
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80106d2:	e008      	b.n	80106e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	627b      	str	r3, [r7, #36]	; 0x24
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d1a7      	bne.n	8010634 <udp_input+0x90>
 80106e4:	e000      	b.n	80106e8 <udp_input+0x144>
        break;
 80106e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80106f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <udp_input+0x15a>
    for_us = 1;
 80106f8:	2301      	movs	r3, #1
 80106fa:	76fb      	strb	r3, [r7, #27]
 80106fc:	e00a      	b.n	8010714 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	3304      	adds	r3, #4
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	4b2d      	ldr	r3, [pc, #180]	; (80107bc <udp_input+0x218>)
 8010706:	695b      	ldr	r3, [r3, #20]
 8010708:	429a      	cmp	r2, r3
 801070a:	bf0c      	ite	eq
 801070c:	2301      	moveq	r3, #1
 801070e:	2300      	movne	r3, #0
 8010710:	b2db      	uxtb	r3, r3
 8010712:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010714:	7efb      	ldrb	r3, [r7, #27]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d041      	beq.n	801079e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801071a:	2108      	movs	r1, #8
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7f9 f861 	bl	80097e4 <pbuf_remove_header>
 8010722:	4603      	mov	r3, r0
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00a      	beq.n	801073e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010728:	4b20      	ldr	r3, [pc, #128]	; (80107ac <udp_input+0x208>)
 801072a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801072e:	4925      	ldr	r1, [pc, #148]	; (80107c4 <udp_input+0x220>)
 8010730:	4820      	ldr	r0, [pc, #128]	; (80107b4 <udp_input+0x210>)
 8010732:	f002 fb9d 	bl	8012e70 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7f9 f8da 	bl	80098f0 <pbuf_free>
      goto end;
 801073c:	e032      	b.n	80107a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010740:	2b00      	cmp	r3, #0
 8010742:	d012      	beq.n	801076a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00a      	beq.n	8010762 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074e:	699c      	ldr	r4, [r3, #24]
 8010750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010752:	69d8      	ldr	r0, [r3, #28]
 8010754:	8a3b      	ldrh	r3, [r7, #16]
 8010756:	9300      	str	r3, [sp, #0]
 8010758:	4b1b      	ldr	r3, [pc, #108]	; (80107c8 <udp_input+0x224>)
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801075e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010760:	e021      	b.n	80107a6 <udp_input+0x202>
        pbuf_free(p);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7f9 f8c4 	bl	80098f0 <pbuf_free>
        goto end;
 8010768:	e01c      	b.n	80107a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801076a:	7cfb      	ldrb	r3, [r7, #19]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d112      	bne.n	8010796 <udp_input+0x1f2>
 8010770:	4b12      	ldr	r3, [pc, #72]	; (80107bc <udp_input+0x218>)
 8010772:	695b      	ldr	r3, [r3, #20]
 8010774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010778:	2be0      	cmp	r3, #224	; 0xe0
 801077a:	d00c      	beq.n	8010796 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <udp_input+0x218>)
 801077e:	899b      	ldrh	r3, [r3, #12]
 8010780:	3308      	adds	r3, #8
 8010782:	b29b      	uxth	r3, r3
 8010784:	b21b      	sxth	r3, r3
 8010786:	4619      	mov	r1, r3
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f7f9 f89e 	bl	80098ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801078e:	2103      	movs	r1, #3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f001 f89b 	bl	80118cc <icmp_dest_unreach>
      pbuf_free(p);
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f7f9 f8aa 	bl	80098f0 <pbuf_free>
  return;
 801079c:	e003      	b.n	80107a6 <udp_input+0x202>
    pbuf_free(p);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f7f9 f8a6 	bl	80098f0 <pbuf_free>
  return;
 80107a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80107a6:	372c      	adds	r7, #44	; 0x2c
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd90      	pop	{r4, r7, pc}
 80107ac:	08017138 	.word	0x08017138
 80107b0:	080171dc 	.word	0x080171dc
 80107b4:	0801718c 	.word	0x0801718c
 80107b8:	080171f4 	.word	0x080171f4
 80107bc:	20004078 	.word	0x20004078
 80107c0:	200075d4 	.word	0x200075d4
 80107c4:	08017210 	.word	0x08017210
 80107c8:	20004088 	.word	0x20004088

080107cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d01e      	beq.n	801081a <udp_netif_ip_addr_changed+0x4e>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01a      	beq.n	801081a <udp_netif_ip_addr_changed+0x4e>
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d017      	beq.n	801081a <udp_netif_ip_addr_changed+0x4e>
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d013      	beq.n	801081a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80107f2:	4b0d      	ldr	r3, [pc, #52]	; (8010828 <udp_netif_ip_addr_changed+0x5c>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	60fb      	str	r3, [r7, #12]
 80107f8:	e00c      	b.n	8010814 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681a      	ldr	r2, [r3, #0]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	429a      	cmp	r2, r3
 8010804:	d103      	bne.n	801080e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	60fb      	str	r3, [r7, #12]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1ef      	bne.n	80107fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801081a:	bf00      	nop
 801081c:	3714      	adds	r7, #20
 801081e:	46bd      	mov	sp, r7
 8010820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	200075d4 	.word	0x200075d4

0801082c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010834:	4915      	ldr	r1, [pc, #84]	; (801088c <etharp_free_entry+0x60>)
 8010836:	687a      	ldr	r2, [r7, #4]
 8010838:	4613      	mov	r3, r2
 801083a:	005b      	lsls	r3, r3, #1
 801083c:	4413      	add	r3, r2
 801083e:	00db      	lsls	r3, r3, #3
 8010840:	440b      	add	r3, r1
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d013      	beq.n	8010870 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010848:	4910      	ldr	r1, [pc, #64]	; (801088c <etharp_free_entry+0x60>)
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	4613      	mov	r3, r2
 801084e:	005b      	lsls	r3, r3, #1
 8010850:	4413      	add	r3, r2
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	440b      	add	r3, r1
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4618      	mov	r0, r3
 801085a:	f7f9 f849 	bl	80098f0 <pbuf_free>
    arp_table[i].q = NULL;
 801085e:	490b      	ldr	r1, [pc, #44]	; (801088c <etharp_free_entry+0x60>)
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	4613      	mov	r3, r2
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	4413      	add	r3, r2
 8010868:	00db      	lsls	r3, r3, #3
 801086a:	440b      	add	r3, r1
 801086c:	2200      	movs	r2, #0
 801086e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010870:	4906      	ldr	r1, [pc, #24]	; (801088c <etharp_free_entry+0x60>)
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	4613      	mov	r3, r2
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	4413      	add	r3, r2
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	440b      	add	r3, r1
 801087e:	3314      	adds	r3, #20
 8010880:	2200      	movs	r2, #0
 8010882:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010884:	bf00      	nop
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	2000058c 	.word	0x2000058c

08010890 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010896:	2300      	movs	r3, #0
 8010898:	607b      	str	r3, [r7, #4]
 801089a:	e096      	b.n	80109ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801089c:	494f      	ldr	r1, [pc, #316]	; (80109dc <etharp_tmr+0x14c>)
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	4613      	mov	r3, r2
 80108a2:	005b      	lsls	r3, r3, #1
 80108a4:	4413      	add	r3, r2
 80108a6:	00db      	lsls	r3, r3, #3
 80108a8:	440b      	add	r3, r1
 80108aa:	3314      	adds	r3, #20
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80108b0:	78fb      	ldrb	r3, [r7, #3]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	f000 8086 	beq.w	80109c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80108b8:	4948      	ldr	r1, [pc, #288]	; (80109dc <etharp_tmr+0x14c>)
 80108ba:	687a      	ldr	r2, [r7, #4]
 80108bc:	4613      	mov	r3, r2
 80108be:	005b      	lsls	r3, r3, #1
 80108c0:	4413      	add	r3, r2
 80108c2:	00db      	lsls	r3, r3, #3
 80108c4:	440b      	add	r3, r1
 80108c6:	3312      	adds	r3, #18
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	3301      	adds	r3, #1
 80108cc:	b298      	uxth	r0, r3
 80108ce:	4943      	ldr	r1, [pc, #268]	; (80109dc <etharp_tmr+0x14c>)
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	4613      	mov	r3, r2
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	4413      	add	r3, r2
 80108d8:	00db      	lsls	r3, r3, #3
 80108da:	440b      	add	r3, r1
 80108dc:	3312      	adds	r3, #18
 80108de:	4602      	mov	r2, r0
 80108e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80108e2:	493e      	ldr	r1, [pc, #248]	; (80109dc <etharp_tmr+0x14c>)
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	4613      	mov	r3, r2
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	4413      	add	r3, r2
 80108ec:	00db      	lsls	r3, r3, #3
 80108ee:	440b      	add	r3, r1
 80108f0:	3312      	adds	r3, #18
 80108f2:	881b      	ldrh	r3, [r3, #0]
 80108f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80108f8:	d215      	bcs.n	8010926 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80108fa:	4938      	ldr	r1, [pc, #224]	; (80109dc <etharp_tmr+0x14c>)
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	4613      	mov	r3, r2
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	4413      	add	r3, r2
 8010904:	00db      	lsls	r3, r3, #3
 8010906:	440b      	add	r3, r1
 8010908:	3314      	adds	r3, #20
 801090a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801090c:	2b01      	cmp	r3, #1
 801090e:	d10e      	bne.n	801092e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010910:	4932      	ldr	r1, [pc, #200]	; (80109dc <etharp_tmr+0x14c>)
 8010912:	687a      	ldr	r2, [r7, #4]
 8010914:	4613      	mov	r3, r2
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	4413      	add	r3, r2
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	440b      	add	r3, r1
 801091e:	3312      	adds	r3, #18
 8010920:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010922:	2b04      	cmp	r3, #4
 8010924:	d903      	bls.n	801092e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7ff ff80 	bl	801082c <etharp_free_entry>
 801092c:	e04a      	b.n	80109c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801092e:	492b      	ldr	r1, [pc, #172]	; (80109dc <etharp_tmr+0x14c>)
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	4613      	mov	r3, r2
 8010934:	005b      	lsls	r3, r3, #1
 8010936:	4413      	add	r3, r2
 8010938:	00db      	lsls	r3, r3, #3
 801093a:	440b      	add	r3, r1
 801093c:	3314      	adds	r3, #20
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	2b03      	cmp	r3, #3
 8010942:	d10a      	bne.n	801095a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010944:	4925      	ldr	r1, [pc, #148]	; (80109dc <etharp_tmr+0x14c>)
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	4613      	mov	r3, r2
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	4413      	add	r3, r2
 801094e:	00db      	lsls	r3, r3, #3
 8010950:	440b      	add	r3, r1
 8010952:	3314      	adds	r3, #20
 8010954:	2204      	movs	r2, #4
 8010956:	701a      	strb	r2, [r3, #0]
 8010958:	e034      	b.n	80109c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801095a:	4920      	ldr	r1, [pc, #128]	; (80109dc <etharp_tmr+0x14c>)
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	4613      	mov	r3, r2
 8010960:	005b      	lsls	r3, r3, #1
 8010962:	4413      	add	r3, r2
 8010964:	00db      	lsls	r3, r3, #3
 8010966:	440b      	add	r3, r1
 8010968:	3314      	adds	r3, #20
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b04      	cmp	r3, #4
 801096e:	d10a      	bne.n	8010986 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010970:	491a      	ldr	r1, [pc, #104]	; (80109dc <etharp_tmr+0x14c>)
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	4613      	mov	r3, r2
 8010976:	005b      	lsls	r3, r3, #1
 8010978:	4413      	add	r3, r2
 801097a:	00db      	lsls	r3, r3, #3
 801097c:	440b      	add	r3, r1
 801097e:	3314      	adds	r3, #20
 8010980:	2202      	movs	r2, #2
 8010982:	701a      	strb	r2, [r3, #0]
 8010984:	e01e      	b.n	80109c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010986:	4915      	ldr	r1, [pc, #84]	; (80109dc <etharp_tmr+0x14c>)
 8010988:	687a      	ldr	r2, [r7, #4]
 801098a:	4613      	mov	r3, r2
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	440b      	add	r3, r1
 8010994:	3314      	adds	r3, #20
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	2b01      	cmp	r3, #1
 801099a:	d113      	bne.n	80109c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801099c:	490f      	ldr	r1, [pc, #60]	; (80109dc <etharp_tmr+0x14c>)
 801099e:	687a      	ldr	r2, [r7, #4]
 80109a0:	4613      	mov	r3, r2
 80109a2:	005b      	lsls	r3, r3, #1
 80109a4:	4413      	add	r3, r2
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	440b      	add	r3, r1
 80109aa:	3308      	adds	r3, #8
 80109ac:	6818      	ldr	r0, [r3, #0]
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	4613      	mov	r3, r2
 80109b2:	005b      	lsls	r3, r3, #1
 80109b4:	4413      	add	r3, r2
 80109b6:	00db      	lsls	r3, r3, #3
 80109b8:	4a08      	ldr	r2, [pc, #32]	; (80109dc <etharp_tmr+0x14c>)
 80109ba:	4413      	add	r3, r2
 80109bc:	3304      	adds	r3, #4
 80109be:	4619      	mov	r1, r3
 80109c0:	f000 fe6e 	bl	80116a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	3301      	adds	r3, #1
 80109c8:	607b      	str	r3, [r7, #4]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b09      	cmp	r3, #9
 80109ce:	f77f af65 	ble.w	801089c <etharp_tmr+0xc>
      }
    }
  }
}
 80109d2:	bf00      	nop
 80109d4:	bf00      	nop
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	2000058c 	.word	0x2000058c

080109e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b08a      	sub	sp, #40	; 0x28
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	60f8      	str	r0, [r7, #12]
 80109e8:	460b      	mov	r3, r1
 80109ea:	607a      	str	r2, [r7, #4]
 80109ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80109ee:	230a      	movs	r3, #10
 80109f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80109f2:	230a      	movs	r3, #10
 80109f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80109f6:	230a      	movs	r3, #10
 80109f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80109fe:	230a      	movs	r3, #10
 8010a00:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	83bb      	strh	r3, [r7, #28]
 8010a06:	2300      	movs	r3, #0
 8010a08:	837b      	strh	r3, [r7, #26]
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a0e:	2300      	movs	r3, #0
 8010a10:	843b      	strh	r3, [r7, #32]
 8010a12:	e0ae      	b.n	8010b72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010a14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a18:	49a6      	ldr	r1, [pc, #664]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	005b      	lsls	r3, r3, #1
 8010a1e:	4413      	add	r3, r2
 8010a20:	00db      	lsls	r3, r3, #3
 8010a22:	440b      	add	r3, r1
 8010a24:	3314      	adds	r3, #20
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010a2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010a2e:	2b0a      	cmp	r3, #10
 8010a30:	d105      	bne.n	8010a3e <etharp_find_entry+0x5e>
 8010a32:	7dfb      	ldrb	r3, [r7, #23]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d102      	bne.n	8010a3e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010a38:	8c3b      	ldrh	r3, [r7, #32]
 8010a3a:	847b      	strh	r3, [r7, #34]	; 0x22
 8010a3c:	e095      	b.n	8010b6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010a3e:	7dfb      	ldrb	r3, [r7, #23]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	f000 8092 	beq.w	8010b6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010a46:	7dfb      	ldrb	r3, [r7, #23]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d009      	beq.n	8010a60 <etharp_find_entry+0x80>
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d806      	bhi.n	8010a60 <etharp_find_entry+0x80>
 8010a52:	4b99      	ldr	r3, [pc, #612]	; (8010cb8 <etharp_find_entry+0x2d8>)
 8010a54:	f240 1223 	movw	r2, #291	; 0x123
 8010a58:	4998      	ldr	r1, [pc, #608]	; (8010cbc <etharp_find_entry+0x2dc>)
 8010a5a:	4899      	ldr	r0, [pc, #612]	; (8010cc0 <etharp_find_entry+0x2e0>)
 8010a5c:	f002 fa08 	bl	8012e70 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d020      	beq.n	8010aa8 <etharp_find_entry+0xc8>
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6819      	ldr	r1, [r3, #0]
 8010a6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a6e:	4891      	ldr	r0, [pc, #580]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010a70:	4613      	mov	r3, r2
 8010a72:	005b      	lsls	r3, r3, #1
 8010a74:	4413      	add	r3, r2
 8010a76:	00db      	lsls	r3, r3, #3
 8010a78:	4403      	add	r3, r0
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4299      	cmp	r1, r3
 8010a80:	d112      	bne.n	8010aa8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d00c      	beq.n	8010aa2 <etharp_find_entry+0xc2>
 8010a88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010a8c:	4989      	ldr	r1, [pc, #548]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010a8e:	4613      	mov	r3, r2
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	00db      	lsls	r3, r3, #3
 8010a96:	440b      	add	r3, r1
 8010a98:	3308      	adds	r3, #8
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d102      	bne.n	8010aa8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010aa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010aa6:	e100      	b.n	8010caa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010aa8:	7dfb      	ldrb	r3, [r7, #23]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d140      	bne.n	8010b30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010aae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ab2:	4980      	ldr	r1, [pc, #512]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	4413      	add	r3, r2
 8010aba:	00db      	lsls	r3, r3, #3
 8010abc:	440b      	add	r3, r1
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d01a      	beq.n	8010afa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010ac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ac8:	497a      	ldr	r1, [pc, #488]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010aca:	4613      	mov	r3, r2
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	4413      	add	r3, r2
 8010ad0:	00db      	lsls	r3, r3, #3
 8010ad2:	440b      	add	r3, r1
 8010ad4:	3312      	adds	r3, #18
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	8bba      	ldrh	r2, [r7, #28]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d845      	bhi.n	8010b6a <etharp_find_entry+0x18a>
            old_queue = i;
 8010ade:	8c3b      	ldrh	r3, [r7, #32]
 8010ae0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010ae2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010ae6:	4973      	ldr	r1, [pc, #460]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010ae8:	4613      	mov	r3, r2
 8010aea:	005b      	lsls	r3, r3, #1
 8010aec:	4413      	add	r3, r2
 8010aee:	00db      	lsls	r3, r3, #3
 8010af0:	440b      	add	r3, r1
 8010af2:	3312      	adds	r3, #18
 8010af4:	881b      	ldrh	r3, [r3, #0]
 8010af6:	83bb      	strh	r3, [r7, #28]
 8010af8:	e037      	b.n	8010b6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010afa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010afe:	496d      	ldr	r1, [pc, #436]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010b00:	4613      	mov	r3, r2
 8010b02:	005b      	lsls	r3, r3, #1
 8010b04:	4413      	add	r3, r2
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	440b      	add	r3, r1
 8010b0a:	3312      	adds	r3, #18
 8010b0c:	881b      	ldrh	r3, [r3, #0]
 8010b0e:	8b7a      	ldrh	r2, [r7, #26]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d82a      	bhi.n	8010b6a <etharp_find_entry+0x18a>
            old_pending = i;
 8010b14:	8c3b      	ldrh	r3, [r7, #32]
 8010b16:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010b18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b1c:	4965      	ldr	r1, [pc, #404]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010b1e:	4613      	mov	r3, r2
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	440b      	add	r3, r1
 8010b28:	3312      	adds	r3, #18
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	837b      	strh	r3, [r7, #26]
 8010b2e:	e01c      	b.n	8010b6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010b30:	7dfb      	ldrb	r3, [r7, #23]
 8010b32:	2b01      	cmp	r3, #1
 8010b34:	d919      	bls.n	8010b6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010b36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b3a:	495e      	ldr	r1, [pc, #376]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3312      	adds	r3, #18
 8010b48:	881b      	ldrh	r3, [r3, #0]
 8010b4a:	8b3a      	ldrh	r2, [r7, #24]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d80c      	bhi.n	8010b6a <etharp_find_entry+0x18a>
            old_stable = i;
 8010b50:	8c3b      	ldrh	r3, [r7, #32]
 8010b52:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8010b54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010b58:	4956      	ldr	r1, [pc, #344]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	005b      	lsls	r3, r3, #1
 8010b5e:	4413      	add	r3, r2
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	440b      	add	r3, r1
 8010b64:	3312      	adds	r3, #18
 8010b66:	881b      	ldrh	r3, [r3, #0]
 8010b68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b6a:	8c3b      	ldrh	r3, [r7, #32]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	843b      	strh	r3, [r7, #32]
 8010b72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010b76:	2b09      	cmp	r3, #9
 8010b78:	f77f af4c 	ble.w	8010a14 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010b7c:	7afb      	ldrb	r3, [r7, #11]
 8010b7e:	f003 0302 	and.w	r3, r3, #2
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d108      	bne.n	8010b98 <etharp_find_entry+0x1b8>
 8010b86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010b8a:	2b0a      	cmp	r3, #10
 8010b8c:	d107      	bne.n	8010b9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010b8e:	7afb      	ldrb	r3, [r7, #11]
 8010b90:	f003 0301 	and.w	r3, r3, #1
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d102      	bne.n	8010b9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b9c:	e085      	b.n	8010caa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010b9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010ba2:	2b09      	cmp	r3, #9
 8010ba4:	dc02      	bgt.n	8010bac <etharp_find_entry+0x1cc>
    i = empty;
 8010ba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ba8:	843b      	strh	r3, [r7, #32]
 8010baa:	e039      	b.n	8010c20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010bac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8010bb0:	2b09      	cmp	r3, #9
 8010bb2:	dc14      	bgt.n	8010bde <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bb6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010bb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010bbc:	493d      	ldr	r1, [pc, #244]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	005b      	lsls	r3, r3, #1
 8010bc2:	4413      	add	r3, r2
 8010bc4:	00db      	lsls	r3, r3, #3
 8010bc6:	440b      	add	r3, r1
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d018      	beq.n	8010c00 <etharp_find_entry+0x220>
 8010bce:	4b3a      	ldr	r3, [pc, #232]	; (8010cb8 <etharp_find_entry+0x2d8>)
 8010bd0:	f240 126d 	movw	r2, #365	; 0x16d
 8010bd4:	493b      	ldr	r1, [pc, #236]	; (8010cc4 <etharp_find_entry+0x2e4>)
 8010bd6:	483a      	ldr	r0, [pc, #232]	; (8010cc0 <etharp_find_entry+0x2e0>)
 8010bd8:	f002 f94a 	bl	8012e70 <iprintf>
 8010bdc:	e010      	b.n	8010c00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010bde:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010be2:	2b09      	cmp	r3, #9
 8010be4:	dc02      	bgt.n	8010bec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010be8:	843b      	strh	r3, [r7, #32]
 8010bea:	e009      	b.n	8010c00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010bec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010bf0:	2b09      	cmp	r3, #9
 8010bf2:	dc02      	bgt.n	8010bfa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010bf4:	8bfb      	ldrh	r3, [r7, #30]
 8010bf6:	843b      	strh	r3, [r7, #32]
 8010bf8:	e002      	b.n	8010c00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bfe:	e054      	b.n	8010caa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c04:	2b09      	cmp	r3, #9
 8010c06:	dd06      	ble.n	8010c16 <etharp_find_entry+0x236>
 8010c08:	4b2b      	ldr	r3, [pc, #172]	; (8010cb8 <etharp_find_entry+0x2d8>)
 8010c0a:	f240 127f 	movw	r2, #383	; 0x17f
 8010c0e:	492e      	ldr	r1, [pc, #184]	; (8010cc8 <etharp_find_entry+0x2e8>)
 8010c10:	482b      	ldr	r0, [pc, #172]	; (8010cc0 <etharp_find_entry+0x2e0>)
 8010c12:	f002 f92d 	bl	8012e70 <iprintf>
    etharp_free_entry(i);
 8010c16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7ff fe06 	bl	801082c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010c24:	2b09      	cmp	r3, #9
 8010c26:	dd06      	ble.n	8010c36 <etharp_find_entry+0x256>
 8010c28:	4b23      	ldr	r3, [pc, #140]	; (8010cb8 <etharp_find_entry+0x2d8>)
 8010c2a:	f240 1283 	movw	r2, #387	; 0x183
 8010c2e:	4926      	ldr	r1, [pc, #152]	; (8010cc8 <etharp_find_entry+0x2e8>)
 8010c30:	4823      	ldr	r0, [pc, #140]	; (8010cc0 <etharp_find_entry+0x2e0>)
 8010c32:	f002 f91d 	bl	8012e70 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c3a:	491e      	ldr	r1, [pc, #120]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010c3c:	4613      	mov	r3, r2
 8010c3e:	005b      	lsls	r3, r3, #1
 8010c40:	4413      	add	r3, r2
 8010c42:	00db      	lsls	r3, r3, #3
 8010c44:	440b      	add	r3, r1
 8010c46:	3314      	adds	r3, #20
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d006      	beq.n	8010c5c <etharp_find_entry+0x27c>
 8010c4e:	4b1a      	ldr	r3, [pc, #104]	; (8010cb8 <etharp_find_entry+0x2d8>)
 8010c50:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8010c54:	491d      	ldr	r1, [pc, #116]	; (8010ccc <etharp_find_entry+0x2ec>)
 8010c56:	481a      	ldr	r0, [pc, #104]	; (8010cc0 <etharp_find_entry+0x2e0>)
 8010c58:	f002 f90a 	bl	8012e70 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d00b      	beq.n	8010c7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010c62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6819      	ldr	r1, [r3, #0]
 8010c6a:	4812      	ldr	r0, [pc, #72]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	4413      	add	r3, r2
 8010c72:	00db      	lsls	r3, r3, #3
 8010c74:	4403      	add	r3, r0
 8010c76:	3304      	adds	r3, #4
 8010c78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c7e:	490d      	ldr	r1, [pc, #52]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010c80:	4613      	mov	r3, r2
 8010c82:	005b      	lsls	r3, r3, #1
 8010c84:	4413      	add	r3, r2
 8010c86:	00db      	lsls	r3, r3, #3
 8010c88:	440b      	add	r3, r1
 8010c8a:	3312      	adds	r3, #18
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010c94:	4907      	ldr	r1, [pc, #28]	; (8010cb4 <etharp_find_entry+0x2d4>)
 8010c96:	4613      	mov	r3, r2
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	4413      	add	r3, r2
 8010c9c:	00db      	lsls	r3, r3, #3
 8010c9e:	440b      	add	r3, r1
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	687a      	ldr	r2, [r7, #4]
 8010ca4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010ca6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3728      	adds	r7, #40	; 0x28
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	2000058c 	.word	0x2000058c
 8010cb8:	0801749c 	.word	0x0801749c
 8010cbc:	080174d4 	.word	0x080174d4
 8010cc0:	08017514 	.word	0x08017514
 8010cc4:	0801753c 	.word	0x0801753c
 8010cc8:	08017554 	.word	0x08017554
 8010ccc:	08017568 	.word	0x08017568

08010cd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b088      	sub	sp, #32
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010ce4:	2b06      	cmp	r3, #6
 8010ce6:	d006      	beq.n	8010cf6 <etharp_update_arp_entry+0x26>
 8010ce8:	4b48      	ldr	r3, [pc, #288]	; (8010e0c <etharp_update_arp_entry+0x13c>)
 8010cea:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010cee:	4948      	ldr	r1, [pc, #288]	; (8010e10 <etharp_update_arp_entry+0x140>)
 8010cf0:	4848      	ldr	r0, [pc, #288]	; (8010e14 <etharp_update_arp_entry+0x144>)
 8010cf2:	f002 f8bd 	bl	8012e70 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d012      	beq.n	8010d22 <etharp_update_arp_entry+0x52>
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00e      	beq.n	8010d22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	68f9      	ldr	r1, [r7, #12]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f001 f8fe 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 8010d10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d105      	bne.n	8010d22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d1e:	2be0      	cmp	r3, #224	; 0xe0
 8010d20:	d102      	bne.n	8010d28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d22:	f06f 030f 	mvn.w	r3, #15
 8010d26:	e06c      	b.n	8010e02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010d28:	78fb      	ldrb	r3, [r7, #3]
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	4619      	mov	r1, r3
 8010d2e:	68b8      	ldr	r0, [r7, #8]
 8010d30:	f7ff fe56 	bl	80109e0 <etharp_find_entry>
 8010d34:	4603      	mov	r3, r0
 8010d36:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010d38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	da02      	bge.n	8010d46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010d40:	8afb      	ldrh	r3, [r7, #22]
 8010d42:	b25b      	sxtb	r3, r3
 8010d44:	e05d      	b.n	8010e02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010d46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d4a:	4933      	ldr	r1, [pc, #204]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	005b      	lsls	r3, r3, #1
 8010d50:	4413      	add	r3, r2
 8010d52:	00db      	lsls	r3, r3, #3
 8010d54:	440b      	add	r3, r1
 8010d56:	3314      	adds	r3, #20
 8010d58:	2202      	movs	r2, #2
 8010d5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010d5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d60:	492d      	ldr	r1, [pc, #180]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010d62:	4613      	mov	r3, r2
 8010d64:	005b      	lsls	r3, r3, #1
 8010d66:	4413      	add	r3, r2
 8010d68:	00db      	lsls	r3, r3, #3
 8010d6a:	440b      	add	r3, r1
 8010d6c:	3308      	adds	r3, #8
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010d72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d76:	4613      	mov	r3, r2
 8010d78:	005b      	lsls	r3, r3, #1
 8010d7a:	4413      	add	r3, r2
 8010d7c:	00db      	lsls	r3, r3, #3
 8010d7e:	3308      	adds	r3, #8
 8010d80:	4a25      	ldr	r2, [pc, #148]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010d82:	4413      	add	r3, r2
 8010d84:	3304      	adds	r3, #4
 8010d86:	2206      	movs	r2, #6
 8010d88:	6879      	ldr	r1, [r7, #4]
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f002 f840 	bl	8012e10 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010d90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010d94:	4920      	ldr	r1, [pc, #128]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010d96:	4613      	mov	r3, r2
 8010d98:	005b      	lsls	r3, r3, #1
 8010d9a:	4413      	add	r3, r2
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	440b      	add	r3, r1
 8010da0:	3312      	adds	r3, #18
 8010da2:	2200      	movs	r2, #0
 8010da4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010da6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010daa:	491b      	ldr	r1, [pc, #108]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010dac:	4613      	mov	r3, r2
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	00db      	lsls	r3, r3, #3
 8010db4:	440b      	add	r3, r1
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d021      	beq.n	8010e00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010dbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010dc0:	4915      	ldr	r1, [pc, #84]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	005b      	lsls	r3, r3, #1
 8010dc6:	4413      	add	r3, r2
 8010dc8:	00db      	lsls	r3, r3, #3
 8010dca:	440b      	add	r3, r1
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010dd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010dd4:	4910      	ldr	r1, [pc, #64]	; (8010e18 <etharp_update_arp_entry+0x148>)
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	4413      	add	r3, r2
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	440b      	add	r3, r1
 8010de0:	2200      	movs	r2, #0
 8010de2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010dea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6939      	ldr	r1, [r7, #16]
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	f001 ff91 	bl	8012d1c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010dfa:	6938      	ldr	r0, [r7, #16]
 8010dfc:	f7f8 fd78 	bl	80098f0 <pbuf_free>
  }
  return ERR_OK;
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3718      	adds	r7, #24
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	0801749c 	.word	0x0801749c
 8010e10:	08017594 	.word	0x08017594
 8010e14:	08017514 	.word	0x08017514
 8010e18:	2000058c 	.word	0x2000058c

08010e1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e24:	2300      	movs	r3, #0
 8010e26:	60fb      	str	r3, [r7, #12]
 8010e28:	e01e      	b.n	8010e68 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010e2a:	4913      	ldr	r1, [pc, #76]	; (8010e78 <etharp_cleanup_netif+0x5c>)
 8010e2c:	68fa      	ldr	r2, [r7, #12]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	005b      	lsls	r3, r3, #1
 8010e32:	4413      	add	r3, r2
 8010e34:	00db      	lsls	r3, r3, #3
 8010e36:	440b      	add	r3, r1
 8010e38:	3314      	adds	r3, #20
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010e3e:	7afb      	ldrb	r3, [r7, #11]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d00e      	beq.n	8010e62 <etharp_cleanup_netif+0x46>
 8010e44:	490c      	ldr	r1, [pc, #48]	; (8010e78 <etharp_cleanup_netif+0x5c>)
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	4413      	add	r3, r2
 8010e4e:	00db      	lsls	r3, r3, #3
 8010e50:	440b      	add	r3, r1
 8010e52:	3308      	adds	r3, #8
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	687a      	ldr	r2, [r7, #4]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d102      	bne.n	8010e62 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f7ff fce5 	bl	801082c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3301      	adds	r3, #1
 8010e66:	60fb      	str	r3, [r7, #12]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b09      	cmp	r3, #9
 8010e6c:	dddd      	ble.n	8010e2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8010e6e:	bf00      	nop
 8010e70:	bf00      	nop
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	2000058c 	.word	0x2000058c

08010e7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010e7c:	b5b0      	push	{r4, r5, r7, lr}
 8010e7e:	b08a      	sub	sp, #40	; 0x28
 8010e80:	af04      	add	r7, sp, #16
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d107      	bne.n	8010e9c <etharp_input+0x20>
 8010e8c:	4b3d      	ldr	r3, [pc, #244]	; (8010f84 <etharp_input+0x108>)
 8010e8e:	f240 228a 	movw	r2, #650	; 0x28a
 8010e92:	493d      	ldr	r1, [pc, #244]	; (8010f88 <etharp_input+0x10c>)
 8010e94:	483d      	ldr	r0, [pc, #244]	; (8010f8c <etharp_input+0x110>)
 8010e96:	f001 ffeb 	bl	8012e70 <iprintf>
 8010e9a:	e06f      	b.n	8010f7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	685b      	ldr	r3, [r3, #4]
 8010ea0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010eac:	d10c      	bne.n	8010ec8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8010eb2:	2b06      	cmp	r3, #6
 8010eb4:	d108      	bne.n	8010ec8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010eba:	2b04      	cmp	r3, #4
 8010ebc:	d104      	bne.n	8010ec8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	885b      	ldrh	r3, [r3, #2]
 8010ec2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ec4:	2b08      	cmp	r3, #8
 8010ec6:	d003      	beq.n	8010ed0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f7f8 fd11 	bl	80098f0 <pbuf_free>
    return;
 8010ece:	e055      	b.n	8010f7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	330e      	adds	r3, #14
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	3318      	adds	r3, #24
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d102      	bne.n	8010ef0 <etharp_input+0x74>
    for_us = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	75fb      	strb	r3, [r7, #23]
 8010eee:	e009      	b.n	8010f04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	3304      	adds	r3, #4
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	bf0c      	ite	eq
 8010efc:	2301      	moveq	r3, #1
 8010efe:	2300      	movne	r3, #0
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	f103 0208 	add.w	r2, r3, #8
 8010f0a:	7dfb      	ldrb	r3, [r7, #23]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d001      	beq.n	8010f14 <etharp_input+0x98>
 8010f10:	2301      	movs	r3, #1
 8010f12:	e000      	b.n	8010f16 <etharp_input+0x9a>
 8010f14:	2302      	movs	r3, #2
 8010f16:	f107 010c 	add.w	r1, r7, #12
 8010f1a:	6838      	ldr	r0, [r7, #0]
 8010f1c:	f7ff fed8 	bl	8010cd0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	88db      	ldrh	r3, [r3, #6]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f2a:	d003      	beq.n	8010f34 <etharp_input+0xb8>
 8010f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f30:	d01e      	beq.n	8010f70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010f32:	e020      	b.n	8010f76 <etharp_input+0xfa>
      if (for_us) {
 8010f34:	7dfb      	ldrb	r3, [r7, #23]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d01c      	beq.n	8010f74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010f54:	2102      	movs	r1, #2
 8010f56:	9103      	str	r1, [sp, #12]
 8010f58:	f107 010c 	add.w	r1, r7, #12
 8010f5c:	9102      	str	r1, [sp, #8]
 8010f5e:	9201      	str	r2, [sp, #4]
 8010f60:	9300      	str	r3, [sp, #0]
 8010f62:	462b      	mov	r3, r5
 8010f64:	4622      	mov	r2, r4
 8010f66:	4601      	mov	r1, r0
 8010f68:	6838      	ldr	r0, [r7, #0]
 8010f6a:	f000 faeb 	bl	8011544 <etharp_raw>
      break;
 8010f6e:	e001      	b.n	8010f74 <etharp_input+0xf8>
      break;
 8010f70:	bf00      	nop
 8010f72:	e000      	b.n	8010f76 <etharp_input+0xfa>
      break;
 8010f74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f7f8 fcba 	bl	80098f0 <pbuf_free>
}
 8010f7c:	3718      	adds	r7, #24
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bdb0      	pop	{r4, r5, r7, pc}
 8010f82:	bf00      	nop
 8010f84:	0801749c 	.word	0x0801749c
 8010f88:	080175ec 	.word	0x080175ec
 8010f8c:	08017514 	.word	0x08017514

08010f90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af02      	add	r7, sp, #8
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010f9e:	79fa      	ldrb	r2, [r7, #7]
 8010fa0:	4944      	ldr	r1, [pc, #272]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	005b      	lsls	r3, r3, #1
 8010fa6:	4413      	add	r3, r2
 8010fa8:	00db      	lsls	r3, r3, #3
 8010faa:	440b      	add	r3, r1
 8010fac:	3314      	adds	r3, #20
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d806      	bhi.n	8010fc2 <etharp_output_to_arp_index+0x32>
 8010fb4:	4b40      	ldr	r3, [pc, #256]	; (80110b8 <etharp_output_to_arp_index+0x128>)
 8010fb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010fba:	4940      	ldr	r1, [pc, #256]	; (80110bc <etharp_output_to_arp_index+0x12c>)
 8010fbc:	4840      	ldr	r0, [pc, #256]	; (80110c0 <etharp_output_to_arp_index+0x130>)
 8010fbe:	f001 ff57 	bl	8012e70 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010fc2:	79fa      	ldrb	r2, [r7, #7]
 8010fc4:	493b      	ldr	r1, [pc, #236]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8010fc6:	4613      	mov	r3, r2
 8010fc8:	005b      	lsls	r3, r3, #1
 8010fca:	4413      	add	r3, r2
 8010fcc:	00db      	lsls	r3, r3, #3
 8010fce:	440b      	add	r3, r1
 8010fd0:	3314      	adds	r3, #20
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	d153      	bne.n	8011080 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010fd8:	79fa      	ldrb	r2, [r7, #7]
 8010fda:	4936      	ldr	r1, [pc, #216]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8010fdc:	4613      	mov	r3, r2
 8010fde:	005b      	lsls	r3, r3, #1
 8010fe0:	4413      	add	r3, r2
 8010fe2:	00db      	lsls	r3, r3, #3
 8010fe4:	440b      	add	r3, r1
 8010fe6:	3312      	adds	r3, #18
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010fee:	d919      	bls.n	8011024 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010ff0:	79fa      	ldrb	r2, [r7, #7]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	4a2e      	ldr	r2, [pc, #184]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8010ffc:	4413      	add	r3, r2
 8010ffe:	3304      	adds	r3, #4
 8011000:	4619      	mov	r1, r3
 8011002:	68f8      	ldr	r0, [r7, #12]
 8011004:	f000 fb4c 	bl	80116a0 <etharp_request>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	d138      	bne.n	8011080 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801100e:	79fa      	ldrb	r2, [r7, #7]
 8011010:	4928      	ldr	r1, [pc, #160]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8011012:	4613      	mov	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	440b      	add	r3, r1
 801101c:	3314      	adds	r3, #20
 801101e:	2203      	movs	r2, #3
 8011020:	701a      	strb	r2, [r3, #0]
 8011022:	e02d      	b.n	8011080 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011024:	79fa      	ldrb	r2, [r7, #7]
 8011026:	4923      	ldr	r1, [pc, #140]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8011028:	4613      	mov	r3, r2
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	440b      	add	r3, r1
 8011032:	3312      	adds	r3, #18
 8011034:	881b      	ldrh	r3, [r3, #0]
 8011036:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801103a:	d321      	bcc.n	8011080 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801103c:	79fa      	ldrb	r2, [r7, #7]
 801103e:	4613      	mov	r3, r2
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	4413      	add	r3, r2
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	4a1b      	ldr	r2, [pc, #108]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8011048:	4413      	add	r3, r2
 801104a:	1d19      	adds	r1, r3, #4
 801104c:	79fa      	ldrb	r2, [r7, #7]
 801104e:	4613      	mov	r3, r2
 8011050:	005b      	lsls	r3, r3, #1
 8011052:	4413      	add	r3, r2
 8011054:	00db      	lsls	r3, r3, #3
 8011056:	3308      	adds	r3, #8
 8011058:	4a16      	ldr	r2, [pc, #88]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 801105a:	4413      	add	r3, r2
 801105c:	3304      	adds	r3, #4
 801105e:	461a      	mov	r2, r3
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	f000 fafb 	bl	801165c <etharp_request_dst>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d109      	bne.n	8011080 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801106c:	79fa      	ldrb	r2, [r7, #7]
 801106e:	4911      	ldr	r1, [pc, #68]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8011070:	4613      	mov	r3, r2
 8011072:	005b      	lsls	r3, r3, #1
 8011074:	4413      	add	r3, r2
 8011076:	00db      	lsls	r3, r3, #3
 8011078:	440b      	add	r3, r1
 801107a:	3314      	adds	r3, #20
 801107c:	2203      	movs	r2, #3
 801107e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011086:	79fa      	ldrb	r2, [r7, #7]
 8011088:	4613      	mov	r3, r2
 801108a:	005b      	lsls	r3, r3, #1
 801108c:	4413      	add	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	3308      	adds	r3, #8
 8011092:	4a08      	ldr	r2, [pc, #32]	; (80110b4 <etharp_output_to_arp_index+0x124>)
 8011094:	4413      	add	r3, r2
 8011096:	3304      	adds	r3, #4
 8011098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801109c:	9200      	str	r2, [sp, #0]
 801109e:	460a      	mov	r2, r1
 80110a0:	68b9      	ldr	r1, [r7, #8]
 80110a2:	68f8      	ldr	r0, [r7, #12]
 80110a4:	f001 fe3a 	bl	8012d1c <ethernet_output>
 80110a8:	4603      	mov	r3, r0
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3710      	adds	r7, #16
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	2000058c 	.word	0x2000058c
 80110b8:	0801749c 	.word	0x0801749c
 80110bc:	0801760c 	.word	0x0801760c
 80110c0:	08017514 	.word	0x08017514

080110c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b08a      	sub	sp, #40	; 0x28
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d106      	bne.n	80110e8 <etharp_output+0x24>
 80110da:	4b73      	ldr	r3, [pc, #460]	; (80112a8 <etharp_output+0x1e4>)
 80110dc:	f240 321e 	movw	r2, #798	; 0x31e
 80110e0:	4972      	ldr	r1, [pc, #456]	; (80112ac <etharp_output+0x1e8>)
 80110e2:	4873      	ldr	r0, [pc, #460]	; (80112b0 <etharp_output+0x1ec>)
 80110e4:	f001 fec4 	bl	8012e70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d106      	bne.n	80110fc <etharp_output+0x38>
 80110ee:	4b6e      	ldr	r3, [pc, #440]	; (80112a8 <etharp_output+0x1e4>)
 80110f0:	f240 321f 	movw	r2, #799	; 0x31f
 80110f4:	496f      	ldr	r1, [pc, #444]	; (80112b4 <etharp_output+0x1f0>)
 80110f6:	486e      	ldr	r0, [pc, #440]	; (80112b0 <etharp_output+0x1ec>)
 80110f8:	f001 feba 	bl	8012e70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d106      	bne.n	8011110 <etharp_output+0x4c>
 8011102:	4b69      	ldr	r3, [pc, #420]	; (80112a8 <etharp_output+0x1e4>)
 8011104:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011108:	496b      	ldr	r1, [pc, #428]	; (80112b8 <etharp_output+0x1f4>)
 801110a:	4869      	ldr	r0, [pc, #420]	; (80112b0 <etharp_output+0x1ec>)
 801110c:	f001 feb0 	bl	8012e70 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	68f9      	ldr	r1, [r7, #12]
 8011116:	4618      	mov	r0, r3
 8011118:	f000 fef8 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d002      	beq.n	8011128 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011122:	4b66      	ldr	r3, [pc, #408]	; (80112bc <etharp_output+0x1f8>)
 8011124:	61fb      	str	r3, [r7, #28]
 8011126:	e0af      	b.n	8011288 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011130:	2be0      	cmp	r3, #224	; 0xe0
 8011132:	d118      	bne.n	8011166 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011134:	2301      	movs	r3, #1
 8011136:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011138:	2300      	movs	r3, #0
 801113a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801113c:	235e      	movs	r3, #94	; 0x5e
 801113e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	3301      	adds	r3, #1
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801114a:	b2db      	uxtb	r3, r3
 801114c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	3302      	adds	r3, #2
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	3303      	adds	r3, #3
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801115e:	f107 0310 	add.w	r3, r7, #16
 8011162:	61fb      	str	r3, [r7, #28]
 8011164:	e090      	b.n	8011288 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681a      	ldr	r2, [r3, #0]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	3304      	adds	r3, #4
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	405a      	eors	r2, r3
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3308      	adds	r3, #8
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	4013      	ands	r3, r2
 801117a:	2b00      	cmp	r3, #0
 801117c:	d012      	beq.n	80111a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011184:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011188:	4293      	cmp	r3, r2
 801118a:	d00b      	beq.n	80111a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	330c      	adds	r3, #12
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d003      	beq.n	801119e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	330c      	adds	r3, #12
 801119a:	61bb      	str	r3, [r7, #24]
 801119c:	e002      	b.n	80111a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801119e:	f06f 0303 	mvn.w	r3, #3
 80111a2:	e07d      	b.n	80112a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111a4:	4b46      	ldr	r3, [pc, #280]	; (80112c0 <etharp_output+0x1fc>)
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	4619      	mov	r1, r3
 80111aa:	4a46      	ldr	r2, [pc, #280]	; (80112c4 <etharp_output+0x200>)
 80111ac:	460b      	mov	r3, r1
 80111ae:	005b      	lsls	r3, r3, #1
 80111b0:	440b      	add	r3, r1
 80111b2:	00db      	lsls	r3, r3, #3
 80111b4:	4413      	add	r3, r2
 80111b6:	3314      	adds	r3, #20
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d925      	bls.n	801120a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111be:	4b40      	ldr	r3, [pc, #256]	; (80112c0 <etharp_output+0x1fc>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	4619      	mov	r1, r3
 80111c4:	4a3f      	ldr	r2, [pc, #252]	; (80112c4 <etharp_output+0x200>)
 80111c6:	460b      	mov	r3, r1
 80111c8:	005b      	lsls	r3, r3, #1
 80111ca:	440b      	add	r3, r1
 80111cc:	00db      	lsls	r3, r3, #3
 80111ce:	4413      	add	r3, r2
 80111d0:	3308      	adds	r3, #8
 80111d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d117      	bne.n	801120a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	4b38      	ldr	r3, [pc, #224]	; (80112c0 <etharp_output+0x1fc>)
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	4618      	mov	r0, r3
 80111e4:	4937      	ldr	r1, [pc, #220]	; (80112c4 <etharp_output+0x200>)
 80111e6:	4603      	mov	r3, r0
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	4403      	add	r3, r0
 80111ec:	00db      	lsls	r3, r3, #3
 80111ee:	440b      	add	r3, r1
 80111f0:	3304      	adds	r3, #4
 80111f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d108      	bne.n	801120a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80111f8:	4b31      	ldr	r3, [pc, #196]	; (80112c0 <etharp_output+0x1fc>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	461a      	mov	r2, r3
 80111fe:	68b9      	ldr	r1, [r7, #8]
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f7ff fec5 	bl	8010f90 <etharp_output_to_arp_index>
 8011206:	4603      	mov	r3, r0
 8011208:	e04a      	b.n	80112a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801120a:	2300      	movs	r3, #0
 801120c:	75fb      	strb	r3, [r7, #23]
 801120e:	e031      	b.n	8011274 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011210:	7dfa      	ldrb	r2, [r7, #23]
 8011212:	492c      	ldr	r1, [pc, #176]	; (80112c4 <etharp_output+0x200>)
 8011214:	4613      	mov	r3, r2
 8011216:	005b      	lsls	r3, r3, #1
 8011218:	4413      	add	r3, r2
 801121a:	00db      	lsls	r3, r3, #3
 801121c:	440b      	add	r3, r1
 801121e:	3314      	adds	r3, #20
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	2b01      	cmp	r3, #1
 8011224:	d923      	bls.n	801126e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011226:	7dfa      	ldrb	r2, [r7, #23]
 8011228:	4926      	ldr	r1, [pc, #152]	; (80112c4 <etharp_output+0x200>)
 801122a:	4613      	mov	r3, r2
 801122c:	005b      	lsls	r3, r3, #1
 801122e:	4413      	add	r3, r2
 8011230:	00db      	lsls	r3, r3, #3
 8011232:	440b      	add	r3, r1
 8011234:	3308      	adds	r3, #8
 8011236:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	429a      	cmp	r2, r3
 801123c:	d117      	bne.n	801126e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	6819      	ldr	r1, [r3, #0]
 8011242:	7dfa      	ldrb	r2, [r7, #23]
 8011244:	481f      	ldr	r0, [pc, #124]	; (80112c4 <etharp_output+0x200>)
 8011246:	4613      	mov	r3, r2
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	4413      	add	r3, r2
 801124c:	00db      	lsls	r3, r3, #3
 801124e:	4403      	add	r3, r0
 8011250:	3304      	adds	r3, #4
 8011252:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011254:	4299      	cmp	r1, r3
 8011256:	d10a      	bne.n	801126e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011258:	4a19      	ldr	r2, [pc, #100]	; (80112c0 <etharp_output+0x1fc>)
 801125a:	7dfb      	ldrb	r3, [r7, #23]
 801125c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801125e:	7dfb      	ldrb	r3, [r7, #23]
 8011260:	461a      	mov	r2, r3
 8011262:	68b9      	ldr	r1, [r7, #8]
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f7ff fe93 	bl	8010f90 <etharp_output_to_arp_index>
 801126a:	4603      	mov	r3, r0
 801126c:	e018      	b.n	80112a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801126e:	7dfb      	ldrb	r3, [r7, #23]
 8011270:	3301      	adds	r3, #1
 8011272:	75fb      	strb	r3, [r7, #23]
 8011274:	7dfb      	ldrb	r3, [r7, #23]
 8011276:	2b09      	cmp	r3, #9
 8011278:	d9ca      	bls.n	8011210 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	69b9      	ldr	r1, [r7, #24]
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 f822 	bl	80112c8 <etharp_query>
 8011284:	4603      	mov	r3, r0
 8011286:	e00b      	b.n	80112a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801128e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	68b9      	ldr	r1, [r7, #8]
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f001 fd3f 	bl	8012d1c <ethernet_output>
 801129e:	4603      	mov	r3, r0
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3720      	adds	r7, #32
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	0801749c 	.word	0x0801749c
 80112ac:	080175ec 	.word	0x080175ec
 80112b0:	08017514 	.word	0x08017514
 80112b4:	0801763c 	.word	0x0801763c
 80112b8:	080175dc 	.word	0x080175dc
 80112bc:	0801ab04 	.word	0x0801ab04
 80112c0:	2000067c 	.word	0x2000067c
 80112c4:	2000058c 	.word	0x2000058c

080112c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b08c      	sub	sp, #48	; 0x30
 80112cc:	af02      	add	r7, sp, #8
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	3326      	adds	r3, #38	; 0x26
 80112d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80112da:	23ff      	movs	r3, #255	; 0xff
 80112dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80112e0:	2300      	movs	r3, #0
 80112e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	68f9      	ldr	r1, [r7, #12]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f000 fe0e 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d10c      	bne.n	8011310 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80112fe:	2be0      	cmp	r3, #224	; 0xe0
 8011300:	d006      	beq.n	8011310 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d003      	beq.n	8011310 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d102      	bne.n	8011316 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011310:	f06f 030f 	mvn.w	r3, #15
 8011314:	e101      	b.n	801151a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011316:	68fa      	ldr	r2, [r7, #12]
 8011318:	2101      	movs	r1, #1
 801131a:	68b8      	ldr	r0, [r7, #8]
 801131c:	f7ff fb60 	bl	80109e0 <etharp_find_entry>
 8011320:	4603      	mov	r3, r0
 8011322:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011328:	2b00      	cmp	r3, #0
 801132a:	da02      	bge.n	8011332 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801132c:	8a7b      	ldrh	r3, [r7, #18]
 801132e:	b25b      	sxtb	r3, r3
 8011330:	e0f3      	b.n	801151a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011332:	8a7b      	ldrh	r3, [r7, #18]
 8011334:	2b7e      	cmp	r3, #126	; 0x7e
 8011336:	d906      	bls.n	8011346 <etharp_query+0x7e>
 8011338:	4b7a      	ldr	r3, [pc, #488]	; (8011524 <etharp_query+0x25c>)
 801133a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801133e:	497a      	ldr	r1, [pc, #488]	; (8011528 <etharp_query+0x260>)
 8011340:	487a      	ldr	r0, [pc, #488]	; (801152c <etharp_query+0x264>)
 8011342:	f001 fd95 	bl	8012e70 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011346:	8a7b      	ldrh	r3, [r7, #18]
 8011348:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801134a:	7c7a      	ldrb	r2, [r7, #17]
 801134c:	4978      	ldr	r1, [pc, #480]	; (8011530 <etharp_query+0x268>)
 801134e:	4613      	mov	r3, r2
 8011350:	005b      	lsls	r3, r3, #1
 8011352:	4413      	add	r3, r2
 8011354:	00db      	lsls	r3, r3, #3
 8011356:	440b      	add	r3, r1
 8011358:	3314      	adds	r3, #20
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d115      	bne.n	801138c <etharp_query+0xc4>
    is_new_entry = 1;
 8011360:	2301      	movs	r3, #1
 8011362:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011364:	7c7a      	ldrb	r2, [r7, #17]
 8011366:	4972      	ldr	r1, [pc, #456]	; (8011530 <etharp_query+0x268>)
 8011368:	4613      	mov	r3, r2
 801136a:	005b      	lsls	r3, r3, #1
 801136c:	4413      	add	r3, r2
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	440b      	add	r3, r1
 8011372:	3314      	adds	r3, #20
 8011374:	2201      	movs	r2, #1
 8011376:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011378:	7c7a      	ldrb	r2, [r7, #17]
 801137a:	496d      	ldr	r1, [pc, #436]	; (8011530 <etharp_query+0x268>)
 801137c:	4613      	mov	r3, r2
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	4413      	add	r3, r2
 8011382:	00db      	lsls	r3, r3, #3
 8011384:	440b      	add	r3, r1
 8011386:	3308      	adds	r3, #8
 8011388:	68fa      	ldr	r2, [r7, #12]
 801138a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801138c:	7c7a      	ldrb	r2, [r7, #17]
 801138e:	4968      	ldr	r1, [pc, #416]	; (8011530 <etharp_query+0x268>)
 8011390:	4613      	mov	r3, r2
 8011392:	005b      	lsls	r3, r3, #1
 8011394:	4413      	add	r3, r2
 8011396:	00db      	lsls	r3, r3, #3
 8011398:	440b      	add	r3, r1
 801139a:	3314      	adds	r3, #20
 801139c:	781b      	ldrb	r3, [r3, #0]
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d011      	beq.n	80113c6 <etharp_query+0xfe>
 80113a2:	7c7a      	ldrb	r2, [r7, #17]
 80113a4:	4962      	ldr	r1, [pc, #392]	; (8011530 <etharp_query+0x268>)
 80113a6:	4613      	mov	r3, r2
 80113a8:	005b      	lsls	r3, r3, #1
 80113aa:	4413      	add	r3, r2
 80113ac:	00db      	lsls	r3, r3, #3
 80113ae:	440b      	add	r3, r1
 80113b0:	3314      	adds	r3, #20
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d806      	bhi.n	80113c6 <etharp_query+0xfe>
 80113b8:	4b5a      	ldr	r3, [pc, #360]	; (8011524 <etharp_query+0x25c>)
 80113ba:	f240 32cd 	movw	r2, #973	; 0x3cd
 80113be:	495d      	ldr	r1, [pc, #372]	; (8011534 <etharp_query+0x26c>)
 80113c0:	485a      	ldr	r0, [pc, #360]	; (801152c <etharp_query+0x264>)
 80113c2:	f001 fd55 	bl	8012e70 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d102      	bne.n	80113d2 <etharp_query+0x10a>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d10c      	bne.n	80113ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80113d2:	68b9      	ldr	r1, [r7, #8]
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f000 f963 	bl	80116a0 <etharp_request>
 80113da:	4603      	mov	r3, r0
 80113dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d102      	bne.n	80113ec <etharp_query+0x124>
      return result;
 80113e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80113ea:	e096      	b.n	801151a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d106      	bne.n	8011400 <etharp_query+0x138>
 80113f2:	4b4c      	ldr	r3, [pc, #304]	; (8011524 <etharp_query+0x25c>)
 80113f4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80113f8:	494f      	ldr	r1, [pc, #316]	; (8011538 <etharp_query+0x270>)
 80113fa:	484c      	ldr	r0, [pc, #304]	; (801152c <etharp_query+0x264>)
 80113fc:	f001 fd38 	bl	8012e70 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011400:	7c7a      	ldrb	r2, [r7, #17]
 8011402:	494b      	ldr	r1, [pc, #300]	; (8011530 <etharp_query+0x268>)
 8011404:	4613      	mov	r3, r2
 8011406:	005b      	lsls	r3, r3, #1
 8011408:	4413      	add	r3, r2
 801140a:	00db      	lsls	r3, r3, #3
 801140c:	440b      	add	r3, r1
 801140e:	3314      	adds	r3, #20
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	2b01      	cmp	r3, #1
 8011414:	d917      	bls.n	8011446 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011416:	4a49      	ldr	r2, [pc, #292]	; (801153c <etharp_query+0x274>)
 8011418:	7c7b      	ldrb	r3, [r7, #17]
 801141a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801141c:	7c7a      	ldrb	r2, [r7, #17]
 801141e:	4613      	mov	r3, r2
 8011420:	005b      	lsls	r3, r3, #1
 8011422:	4413      	add	r3, r2
 8011424:	00db      	lsls	r3, r3, #3
 8011426:	3308      	adds	r3, #8
 8011428:	4a41      	ldr	r2, [pc, #260]	; (8011530 <etharp_query+0x268>)
 801142a:	4413      	add	r3, r2
 801142c:	3304      	adds	r3, #4
 801142e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011432:	9200      	str	r2, [sp, #0]
 8011434:	697a      	ldr	r2, [r7, #20]
 8011436:	6879      	ldr	r1, [r7, #4]
 8011438:	68f8      	ldr	r0, [r7, #12]
 801143a:	f001 fc6f 	bl	8012d1c <ethernet_output>
 801143e:	4603      	mov	r3, r0
 8011440:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011444:	e067      	b.n	8011516 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011446:	7c7a      	ldrb	r2, [r7, #17]
 8011448:	4939      	ldr	r1, [pc, #228]	; (8011530 <etharp_query+0x268>)
 801144a:	4613      	mov	r3, r2
 801144c:	005b      	lsls	r3, r3, #1
 801144e:	4413      	add	r3, r2
 8011450:	00db      	lsls	r3, r3, #3
 8011452:	440b      	add	r3, r1
 8011454:	3314      	adds	r3, #20
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	2b01      	cmp	r3, #1
 801145a:	d15c      	bne.n	8011516 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801145c:	2300      	movs	r3, #0
 801145e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011464:	e01c      	b.n	80114a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	895a      	ldrh	r2, [r3, #10]
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	891b      	ldrh	r3, [r3, #8]
 801146e:	429a      	cmp	r2, r3
 8011470:	d10a      	bne.n	8011488 <etharp_query+0x1c0>
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d006      	beq.n	8011488 <etharp_query+0x1c0>
 801147a:	4b2a      	ldr	r3, [pc, #168]	; (8011524 <etharp_query+0x25c>)
 801147c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011480:	492f      	ldr	r1, [pc, #188]	; (8011540 <etharp_query+0x278>)
 8011482:	482a      	ldr	r0, [pc, #168]	; (801152c <etharp_query+0x264>)
 8011484:	f001 fcf4 	bl	8012e70 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	7b1b      	ldrb	r3, [r3, #12]
 801148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011490:	2b00      	cmp	r3, #0
 8011492:	d002      	beq.n	801149a <etharp_query+0x1d2>
        copy_needed = 1;
 8011494:	2301      	movs	r3, #1
 8011496:	61bb      	str	r3, [r7, #24]
        break;
 8011498:	e005      	b.n	80114a6 <etharp_query+0x1de>
      }
      p = p->next;
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d1df      	bne.n	8011466 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d007      	beq.n	80114bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80114ac:	687a      	ldr	r2, [r7, #4]
 80114ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80114b2:	200e      	movs	r0, #14
 80114b4:	f7f8 fca2 	bl	8009dfc <pbuf_clone>
 80114b8:	61f8      	str	r0, [r7, #28]
 80114ba:	e004      	b.n	80114c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80114c0:	69f8      	ldr	r0, [r7, #28]
 80114c2:	f7f8 fab5 	bl	8009a30 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d021      	beq.n	8011510 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80114cc:	7c7a      	ldrb	r2, [r7, #17]
 80114ce:	4918      	ldr	r1, [pc, #96]	; (8011530 <etharp_query+0x268>)
 80114d0:	4613      	mov	r3, r2
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	4413      	add	r3, r2
 80114d6:	00db      	lsls	r3, r3, #3
 80114d8:	440b      	add	r3, r1
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00a      	beq.n	80114f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80114e0:	7c7a      	ldrb	r2, [r7, #17]
 80114e2:	4913      	ldr	r1, [pc, #76]	; (8011530 <etharp_query+0x268>)
 80114e4:	4613      	mov	r3, r2
 80114e6:	005b      	lsls	r3, r3, #1
 80114e8:	4413      	add	r3, r2
 80114ea:	00db      	lsls	r3, r3, #3
 80114ec:	440b      	add	r3, r1
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7f8 f9fd 	bl	80098f0 <pbuf_free>
      }
      arp_table[i].q = p;
 80114f6:	7c7a      	ldrb	r2, [r7, #17]
 80114f8:	490d      	ldr	r1, [pc, #52]	; (8011530 <etharp_query+0x268>)
 80114fa:	4613      	mov	r3, r2
 80114fc:	005b      	lsls	r3, r3, #1
 80114fe:	4413      	add	r3, r2
 8011500:	00db      	lsls	r3, r3, #3
 8011502:	440b      	add	r3, r1
 8011504:	69fa      	ldr	r2, [r7, #28]
 8011506:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801150e:	e002      	b.n	8011516 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011510:	23ff      	movs	r3, #255	; 0xff
 8011512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011516:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801151a:	4618      	mov	r0, r3
 801151c:	3728      	adds	r7, #40	; 0x28
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	0801749c 	.word	0x0801749c
 8011528:	08017648 	.word	0x08017648
 801152c:	08017514 	.word	0x08017514
 8011530:	2000058c 	.word	0x2000058c
 8011534:	08017658 	.word	0x08017658
 8011538:	0801763c 	.word	0x0801763c
 801153c:	2000067c 	.word	0x2000067c
 8011540:	08017680 	.word	0x08017680

08011544 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b08a      	sub	sp, #40	; 0x28
 8011548:	af02      	add	r7, sp, #8
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	607a      	str	r2, [r7, #4]
 8011550:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011552:	2300      	movs	r3, #0
 8011554:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d106      	bne.n	801156a <etharp_raw+0x26>
 801155c:	4b3a      	ldr	r3, [pc, #232]	; (8011648 <etharp_raw+0x104>)
 801155e:	f240 4257 	movw	r2, #1111	; 0x457
 8011562:	493a      	ldr	r1, [pc, #232]	; (801164c <etharp_raw+0x108>)
 8011564:	483a      	ldr	r0, [pc, #232]	; (8011650 <etharp_raw+0x10c>)
 8011566:	f001 fc83 	bl	8012e70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801156a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801156e:	211c      	movs	r1, #28
 8011570:	200e      	movs	r0, #14
 8011572:	f7f7 fed9 	bl	8009328 <pbuf_alloc>
 8011576:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d102      	bne.n	8011584 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801157e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011582:	e05d      	b.n	8011640 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011584:	69bb      	ldr	r3, [r7, #24]
 8011586:	895b      	ldrh	r3, [r3, #10]
 8011588:	2b1b      	cmp	r3, #27
 801158a:	d806      	bhi.n	801159a <etharp_raw+0x56>
 801158c:	4b2e      	ldr	r3, [pc, #184]	; (8011648 <etharp_raw+0x104>)
 801158e:	f240 4262 	movw	r2, #1122	; 0x462
 8011592:	4930      	ldr	r1, [pc, #192]	; (8011654 <etharp_raw+0x110>)
 8011594:	482e      	ldr	r0, [pc, #184]	; (8011650 <etharp_raw+0x10c>)
 8011596:	f001 fc6b 	bl	8012e70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80115a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7f6 fe5e 	bl	8008264 <lwip_htons>
 80115a8:	4603      	mov	r3, r0
 80115aa:	461a      	mov	r2, r3
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80115b6:	2b06      	cmp	r3, #6
 80115b8:	d006      	beq.n	80115c8 <etharp_raw+0x84>
 80115ba:	4b23      	ldr	r3, [pc, #140]	; (8011648 <etharp_raw+0x104>)
 80115bc:	f240 4269 	movw	r2, #1129	; 0x469
 80115c0:	4925      	ldr	r1, [pc, #148]	; (8011658 <etharp_raw+0x114>)
 80115c2:	4823      	ldr	r0, [pc, #140]	; (8011650 <etharp_raw+0x10c>)
 80115c4:	f001 fc54 	bl	8012e70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	3308      	adds	r3, #8
 80115cc:	2206      	movs	r2, #6
 80115ce:	6839      	ldr	r1, [r7, #0]
 80115d0:	4618      	mov	r0, r3
 80115d2:	f001 fc1d 	bl	8012e10 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	3312      	adds	r3, #18
 80115da:	2206      	movs	r2, #6
 80115dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115de:	4618      	mov	r0, r3
 80115e0:	f001 fc16 	bl	8012e10 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	330e      	adds	r3, #14
 80115e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115ea:	6812      	ldr	r2, [r2, #0]
 80115ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	3318      	adds	r3, #24
 80115f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115f4:	6812      	ldr	r2, [r2, #0]
 80115f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	2200      	movs	r2, #0
 80115fc:	701a      	strb	r2, [r3, #0]
 80115fe:	2200      	movs	r2, #0
 8011600:	f042 0201 	orr.w	r2, r2, #1
 8011604:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	2200      	movs	r2, #0
 801160a:	f042 0208 	orr.w	r2, r2, #8
 801160e:	709a      	strb	r2, [r3, #2]
 8011610:	2200      	movs	r2, #0
 8011612:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	2206      	movs	r2, #6
 8011618:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	2204      	movs	r2, #4
 801161e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011620:	f640 0306 	movw	r3, #2054	; 0x806
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	69b9      	ldr	r1, [r7, #24]
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f001 fb75 	bl	8012d1c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011632:	69b8      	ldr	r0, [r7, #24]
 8011634:	f7f8 f95c 	bl	80098f0 <pbuf_free>
  p = NULL;
 8011638:	2300      	movs	r3, #0
 801163a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801163c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3720      	adds	r7, #32
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	0801749c 	.word	0x0801749c
 801164c:	080175ec 	.word	0x080175ec
 8011650:	08017514 	.word	0x08017514
 8011654:	0801769c 	.word	0x0801769c
 8011658:	080176d0 	.word	0x080176d0

0801165c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b088      	sub	sp, #32
 8011660:	af04      	add	r7, sp, #16
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011678:	2201      	movs	r2, #1
 801167a:	9203      	str	r2, [sp, #12]
 801167c:	68ba      	ldr	r2, [r7, #8]
 801167e:	9202      	str	r2, [sp, #8]
 8011680:	4a06      	ldr	r2, [pc, #24]	; (801169c <etharp_request_dst+0x40>)
 8011682:	9201      	str	r2, [sp, #4]
 8011684:	9300      	str	r3, [sp, #0]
 8011686:	4603      	mov	r3, r0
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f7ff ff5a 	bl	8011544 <etharp_raw>
 8011690:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011692:	4618      	mov	r0, r3
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	0801ab0c 	.word	0x0801ab0c

080116a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b082      	sub	sp, #8
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80116aa:	4a05      	ldr	r2, [pc, #20]	; (80116c0 <etharp_request+0x20>)
 80116ac:	6839      	ldr	r1, [r7, #0]
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7ff ffd4 	bl	801165c <etharp_request_dst>
 80116b4:	4603      	mov	r3, r0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3708      	adds	r7, #8
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	0801ab04 	.word	0x0801ab04

080116c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b08e      	sub	sp, #56	; 0x38
 80116c8:	af04      	add	r7, sp, #16
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80116ce:	4b79      	ldr	r3, [pc, #484]	; (80118b4 <icmp_input+0x1f0>)
 80116d0:	689b      	ldr	r3, [r3, #8]
 80116d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80116d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	f003 030f 	and.w	r3, r3, #15
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	009b      	lsls	r3, r3, #2
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80116e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80116e6:	2b13      	cmp	r3, #19
 80116e8:	f240 80cd 	bls.w	8011886 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	895b      	ldrh	r3, [r3, #10]
 80116f0:	2b03      	cmp	r3, #3
 80116f2:	f240 80ca 	bls.w	801188a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011700:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011704:	2b00      	cmp	r3, #0
 8011706:	f000 80b7 	beq.w	8011878 <icmp_input+0x1b4>
 801170a:	2b08      	cmp	r3, #8
 801170c:	f040 80b7 	bne.w	801187e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011710:	4b69      	ldr	r3, [pc, #420]	; (80118b8 <icmp_input+0x1f4>)
 8011712:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011714:	4b67      	ldr	r3, [pc, #412]	; (80118b4 <icmp_input+0x1f0>)
 8011716:	695b      	ldr	r3, [r3, #20]
 8011718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801171c:	2be0      	cmp	r3, #224	; 0xe0
 801171e:	f000 80bb 	beq.w	8011898 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011722:	4b64      	ldr	r3, [pc, #400]	; (80118b4 <icmp_input+0x1f0>)
 8011724:	695b      	ldr	r3, [r3, #20]
 8011726:	4a63      	ldr	r2, [pc, #396]	; (80118b4 <icmp_input+0x1f0>)
 8011728:	6812      	ldr	r2, [r2, #0]
 801172a:	4611      	mov	r1, r2
 801172c:	4618      	mov	r0, r3
 801172e:	f000 fbed 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 8011732:	4603      	mov	r3, r0
 8011734:	2b00      	cmp	r3, #0
 8011736:	f040 80b1 	bne.w	801189c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	891b      	ldrh	r3, [r3, #8]
 801173e:	2b07      	cmp	r3, #7
 8011740:	f240 80a5 	bls.w	801188e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011746:	330e      	adds	r3, #14
 8011748:	4619      	mov	r1, r3
 801174a:	6878      	ldr	r0, [r7, #4]
 801174c:	f7f8 f83a 	bl	80097c4 <pbuf_add_header>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d04b      	beq.n	80117ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	891a      	ldrh	r2, [r3, #8]
 801175a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801175c:	4413      	add	r3, r2
 801175e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	891b      	ldrh	r3, [r3, #8]
 8011764:	8b7a      	ldrh	r2, [r7, #26]
 8011766:	429a      	cmp	r2, r3
 8011768:	f0c0 809a 	bcc.w	80118a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801176c:	8b7b      	ldrh	r3, [r7, #26]
 801176e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011772:	4619      	mov	r1, r3
 8011774:	200e      	movs	r0, #14
 8011776:	f7f7 fdd7 	bl	8009328 <pbuf_alloc>
 801177a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2b00      	cmp	r3, #0
 8011780:	f000 8090 	beq.w	80118a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	895b      	ldrh	r3, [r3, #10]
 8011788:	461a      	mov	r2, r3
 801178a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801178c:	3308      	adds	r3, #8
 801178e:	429a      	cmp	r2, r3
 8011790:	d203      	bcs.n	801179a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011792:	6978      	ldr	r0, [r7, #20]
 8011794:	f7f8 f8ac 	bl	80098f0 <pbuf_free>
          goto icmperr;
 8011798:	e085      	b.n	80118a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80117a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117a2:	4618      	mov	r0, r3
 80117a4:	f001 fb34 	bl	8012e10 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80117a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117aa:	4619      	mov	r1, r3
 80117ac:	6978      	ldr	r0, [r7, #20]
 80117ae:	f7f8 f819 	bl	80097e4 <pbuf_remove_header>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d009      	beq.n	80117cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80117b8:	4b40      	ldr	r3, [pc, #256]	; (80118bc <icmp_input+0x1f8>)
 80117ba:	22b6      	movs	r2, #182	; 0xb6
 80117bc:	4940      	ldr	r1, [pc, #256]	; (80118c0 <icmp_input+0x1fc>)
 80117be:	4841      	ldr	r0, [pc, #260]	; (80118c4 <icmp_input+0x200>)
 80117c0:	f001 fb56 	bl	8012e70 <iprintf>
          pbuf_free(r);
 80117c4:	6978      	ldr	r0, [r7, #20]
 80117c6:	f7f8 f893 	bl	80098f0 <pbuf_free>
          goto icmperr;
 80117ca:	e06c      	b.n	80118a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80117cc:	6879      	ldr	r1, [r7, #4]
 80117ce:	6978      	ldr	r0, [r7, #20]
 80117d0:	f7f8 f9a6 	bl	8009b20 <pbuf_copy>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d003      	beq.n	80117e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80117da:	6978      	ldr	r0, [r7, #20]
 80117dc:	f7f8 f888 	bl	80098f0 <pbuf_free>
          goto icmperr;
 80117e0:	e061      	b.n	80118a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f7f8 f884 	bl	80098f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	607b      	str	r3, [r7, #4]
 80117ec:	e00f      	b.n	801180e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80117ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117f0:	330e      	adds	r3, #14
 80117f2:	4619      	mov	r1, r3
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f7f7 fff5 	bl	80097e4 <pbuf_remove_header>
 80117fa:	4603      	mov	r3, r0
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d006      	beq.n	801180e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011800:	4b2e      	ldr	r3, [pc, #184]	; (80118bc <icmp_input+0x1f8>)
 8011802:	22c7      	movs	r2, #199	; 0xc7
 8011804:	4930      	ldr	r1, [pc, #192]	; (80118c8 <icmp_input+0x204>)
 8011806:	482f      	ldr	r0, [pc, #188]	; (80118c4 <icmp_input+0x200>)
 8011808:	f001 fb32 	bl	8012e70 <iprintf>
          goto icmperr;
 801180c:	e04b      	b.n	80118a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011816:	4619      	mov	r1, r3
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7f7 ffd3 	bl	80097c4 <pbuf_add_header>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d12b      	bne.n	801187c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	685b      	ldr	r3, [r3, #4]
 8011828:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801182a:	69fb      	ldr	r3, [r7, #28]
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011832:	4b20      	ldr	r3, [pc, #128]	; (80118b4 <icmp_input+0x1f0>)
 8011834:	691a      	ldr	r2, [r3, #16]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	2200      	movs	r2, #0
 801183e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	2200      	movs	r2, #0
 8011844:	709a      	strb	r2, [r3, #2]
 8011846:	2200      	movs	r2, #0
 8011848:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	22ff      	movs	r2, #255	; 0xff
 801184e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	2200      	movs	r2, #0
 8011854:	729a      	strb	r2, [r3, #10]
 8011856:	2200      	movs	r2, #0
 8011858:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	9302      	str	r3, [sp, #8]
 801185e:	2301      	movs	r3, #1
 8011860:	9301      	str	r3, [sp, #4]
 8011862:	2300      	movs	r3, #0
 8011864:	9300      	str	r3, [sp, #0]
 8011866:	23ff      	movs	r3, #255	; 0xff
 8011868:	2200      	movs	r2, #0
 801186a:	69f9      	ldr	r1, [r7, #28]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 fa75 	bl	8011d5c <ip4_output_if>
 8011872:	4603      	mov	r3, r0
 8011874:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011876:	e001      	b.n	801187c <icmp_input+0x1b8>
      break;
 8011878:	bf00      	nop
 801187a:	e000      	b.n	801187e <icmp_input+0x1ba>
      break;
 801187c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	f7f8 f836 	bl	80098f0 <pbuf_free>
  return;
 8011884:	e013      	b.n	80118ae <icmp_input+0x1ea>
    goto lenerr;
 8011886:	bf00      	nop
 8011888:	e002      	b.n	8011890 <icmp_input+0x1cc>
    goto lenerr;
 801188a:	bf00      	nop
 801188c:	e000      	b.n	8011890 <icmp_input+0x1cc>
        goto lenerr;
 801188e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7f8 f82d 	bl	80098f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011896:	e00a      	b.n	80118ae <icmp_input+0x1ea>
        goto icmperr;
 8011898:	bf00      	nop
 801189a:	e004      	b.n	80118a6 <icmp_input+0x1e2>
        goto icmperr;
 801189c:	bf00      	nop
 801189e:	e002      	b.n	80118a6 <icmp_input+0x1e2>
          goto icmperr;
 80118a0:	bf00      	nop
 80118a2:	e000      	b.n	80118a6 <icmp_input+0x1e2>
          goto icmperr;
 80118a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7f8 f822 	bl	80098f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80118ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80118ae:	3728      	adds	r7, #40	; 0x28
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}
 80118b4:	20004078 	.word	0x20004078
 80118b8:	2000408c 	.word	0x2000408c
 80118bc:	08017714 	.word	0x08017714
 80118c0:	0801774c 	.word	0x0801774c
 80118c4:	08017784 	.word	0x08017784
 80118c8:	080177ac 	.word	0x080177ac

080118cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	460b      	mov	r3, r1
 80118d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80118d8:	78fb      	ldrb	r3, [r7, #3]
 80118da:	461a      	mov	r2, r3
 80118dc:	2103      	movs	r1, #3
 80118de:	6878      	ldr	r0, [r7, #4]
 80118e0:	f000 f814 	bl	801190c <icmp_send_response>
}
 80118e4:	bf00      	nop
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	460b      	mov	r3, r1
 80118f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80118f8:	78fb      	ldrb	r3, [r7, #3]
 80118fa:	461a      	mov	r2, r3
 80118fc:	210b      	movs	r1, #11
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f804 	bl	801190c <icmp_send_response>
}
 8011904:	bf00      	nop
 8011906:	3708      	adds	r7, #8
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b08c      	sub	sp, #48	; 0x30
 8011910:	af04      	add	r7, sp, #16
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	460b      	mov	r3, r1
 8011916:	70fb      	strb	r3, [r7, #3]
 8011918:	4613      	mov	r3, r2
 801191a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801191c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011920:	2124      	movs	r1, #36	; 0x24
 8011922:	2022      	movs	r0, #34	; 0x22
 8011924:	f7f7 fd00 	bl	8009328 <pbuf_alloc>
 8011928:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d04c      	beq.n	80119ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011930:	69fb      	ldr	r3, [r7, #28]
 8011932:	895b      	ldrh	r3, [r3, #10]
 8011934:	2b23      	cmp	r3, #35	; 0x23
 8011936:	d806      	bhi.n	8011946 <icmp_send_response+0x3a>
 8011938:	4b26      	ldr	r3, [pc, #152]	; (80119d4 <icmp_send_response+0xc8>)
 801193a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801193e:	4926      	ldr	r1, [pc, #152]	; (80119d8 <icmp_send_response+0xcc>)
 8011940:	4826      	ldr	r0, [pc, #152]	; (80119dc <icmp_send_response+0xd0>)
 8011942:	f001 fa95 	bl	8012e70 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801194c:	69fb      	ldr	r3, [r7, #28]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	78fa      	ldrb	r2, [r7, #3]
 8011956:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	78ba      	ldrb	r2, [r7, #2]
 801195c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	2200      	movs	r2, #0
 8011962:	711a      	strb	r2, [r3, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	2200      	movs	r2, #0
 801196c:	719a      	strb	r2, [r3, #6]
 801196e:	2200      	movs	r2, #0
 8011970:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011972:	69fb      	ldr	r3, [r7, #28]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	f103 0008 	add.w	r0, r3, #8
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	685b      	ldr	r3, [r3, #4]
 801197e:	221c      	movs	r2, #28
 8011980:	4619      	mov	r1, r3
 8011982:	f001 fa45 	bl	8012e10 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801198c:	f107 030c 	add.w	r3, r7, #12
 8011990:	4618      	mov	r0, r3
 8011992:	f000 f825 	bl	80119e0 <ip4_route>
 8011996:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d011      	beq.n	80119c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2200      	movs	r2, #0
 80119a2:	709a      	strb	r2, [r3, #2]
 80119a4:	2200      	movs	r2, #0
 80119a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80119a8:	f107 020c 	add.w	r2, r7, #12
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	9302      	str	r3, [sp, #8]
 80119b0:	2301      	movs	r3, #1
 80119b2:	9301      	str	r3, [sp, #4]
 80119b4:	2300      	movs	r3, #0
 80119b6:	9300      	str	r3, [sp, #0]
 80119b8:	23ff      	movs	r3, #255	; 0xff
 80119ba:	2100      	movs	r1, #0
 80119bc:	69f8      	ldr	r0, [r7, #28]
 80119be:	f000 f9cd 	bl	8011d5c <ip4_output_if>
  }
  pbuf_free(q);
 80119c2:	69f8      	ldr	r0, [r7, #28]
 80119c4:	f7f7 ff94 	bl	80098f0 <pbuf_free>
 80119c8:	e000      	b.n	80119cc <icmp_send_response+0xc0>
    return;
 80119ca:	bf00      	nop
}
 80119cc:	3720      	adds	r7, #32
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	08017714 	.word	0x08017714
 80119d8:	080177e0 	.word	0x080177e0
 80119dc:	08017784 	.word	0x08017784

080119e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80119e8:	4b33      	ldr	r3, [pc, #204]	; (8011ab8 <ip4_route+0xd8>)
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	60fb      	str	r3, [r7, #12]
 80119ee:	e036      	b.n	8011a5e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80119f6:	f003 0301 	and.w	r3, r3, #1
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d02b      	beq.n	8011a58 <ip4_route+0x78>
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a06:	089b      	lsrs	r3, r3, #2
 8011a08:	f003 0301 	and.w	r3, r3, #1
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d022      	beq.n	8011a58 <ip4_route+0x78>
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	3304      	adds	r3, #4
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d01d      	beq.n	8011a58 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	3304      	adds	r3, #4
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	405a      	eors	r2, r3
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	3308      	adds	r3, #8
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4013      	ands	r3, r2
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d101      	bne.n	8011a38 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	e038      	b.n	8011aaa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a3e:	f003 0302 	and.w	r3, r3, #2
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d108      	bne.n	8011a58 <ip4_route+0x78>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	330c      	adds	r3, #12
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d101      	bne.n	8011a58 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	e028      	b.n	8011aaa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	60fb      	str	r3, [r7, #12]
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d1c5      	bne.n	80119f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a64:	4b15      	ldr	r3, [pc, #84]	; (8011abc <ip4_route+0xdc>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d01a      	beq.n	8011aa2 <ip4_route+0xc2>
 8011a6c:	4b13      	ldr	r3, [pc, #76]	; (8011abc <ip4_route+0xdc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a74:	f003 0301 	and.w	r3, r3, #1
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d012      	beq.n	8011aa2 <ip4_route+0xc2>
 8011a7c:	4b0f      	ldr	r3, [pc, #60]	; (8011abc <ip4_route+0xdc>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011a84:	f003 0304 	and.w	r3, r3, #4
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d00a      	beq.n	8011aa2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a8c:	4b0b      	ldr	r3, [pc, #44]	; (8011abc <ip4_route+0xdc>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	3304      	adds	r3, #4
 8011a92:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d004      	beq.n	8011aa2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8011aa0:	d101      	bne.n	8011aa6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	e001      	b.n	8011aaa <ip4_route+0xca>
  }

  return netif_default;
 8011aa6:	4b05      	ldr	r3, [pc, #20]	; (8011abc <ip4_route+0xdc>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
 8011ab6:	bf00      	nop
 8011ab8:	200075ac 	.word	0x200075ac
 8011abc:	200075b0 	.word	0x200075b0

08011ac0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011ace:	f003 0301 	and.w	r3, r3, #1
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d016      	beq.n	8011b06 <ip4_input_accept+0x46>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	3304      	adds	r3, #4
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d011      	beq.n	8011b06 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011ae2:	4b0b      	ldr	r3, [pc, #44]	; (8011b10 <ip4_input_accept+0x50>)
 8011ae4:	695a      	ldr	r2, [r3, #20]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d008      	beq.n	8011b02 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011af0:	4b07      	ldr	r3, [pc, #28]	; (8011b10 <ip4_input_accept+0x50>)
 8011af2:	695b      	ldr	r3, [r3, #20]
 8011af4:	6879      	ldr	r1, [r7, #4]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f000 fa08 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 8011afc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d001      	beq.n	8011b06 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011b02:	2301      	movs	r3, #1
 8011b04:	e000      	b.n	8011b08 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	20004078 	.word	0x20004078

08011b14 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	091b      	lsrs	r3, r3, #4
 8011b2a:	b2db      	uxtb	r3, r3
 8011b2c:	2b04      	cmp	r3, #4
 8011b2e:	d004      	beq.n	8011b3a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7f7 fedd 	bl	80098f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	e107      	b.n	8011d4a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	f003 030f 	and.w	r3, r3, #15
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	885b      	ldrh	r3, [r3, #2]
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7f6 fb87 	bl	8008264 <lwip_htons>
 8011b56:	4603      	mov	r3, r0
 8011b58:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	891b      	ldrh	r3, [r3, #8]
 8011b5e:	89ba      	ldrh	r2, [r7, #12]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d204      	bcs.n	8011b6e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011b64:	89bb      	ldrh	r3, [r7, #12]
 8011b66:	4619      	mov	r1, r3
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7f7 fd3b 	bl	80095e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	895b      	ldrh	r3, [r3, #10]
 8011b72:	89fa      	ldrh	r2, [r7, #14]
 8011b74:	429a      	cmp	r2, r3
 8011b76:	d807      	bhi.n	8011b88 <ip4_input+0x74>
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	891b      	ldrh	r3, [r3, #8]
 8011b7c:	89ba      	ldrh	r2, [r7, #12]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d802      	bhi.n	8011b88 <ip4_input+0x74>
 8011b82:	89fb      	ldrh	r3, [r7, #14]
 8011b84:	2b13      	cmp	r3, #19
 8011b86:	d804      	bhi.n	8011b92 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7f7 feb1 	bl	80098f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	e0db      	b.n	8011d4a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	691b      	ldr	r3, [r3, #16]
 8011b96:	4a6f      	ldr	r2, [pc, #444]	; (8011d54 <ip4_input+0x240>)
 8011b98:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	4a6d      	ldr	r2, [pc, #436]	; (8011d54 <ip4_input+0x240>)
 8011ba0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ba2:	4b6c      	ldr	r3, [pc, #432]	; (8011d54 <ip4_input+0x240>)
 8011ba4:	695b      	ldr	r3, [r3, #20]
 8011ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011baa:	2be0      	cmp	r3, #224	; 0xe0
 8011bac:	d112      	bne.n	8011bd4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011bb4:	f003 0301 	and.w	r3, r3, #1
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d007      	beq.n	8011bce <ip4_input+0xba>
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	3304      	adds	r3, #4
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <ip4_input+0xba>
      netif = inp;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	613b      	str	r3, [r7, #16]
 8011bcc:	e02a      	b.n	8011c24 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	613b      	str	r3, [r7, #16]
 8011bd2:	e027      	b.n	8011c24 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011bd4:	6838      	ldr	r0, [r7, #0]
 8011bd6:	f7ff ff73 	bl	8011ac0 <ip4_input_accept>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d002      	beq.n	8011be6 <ip4_input+0xd2>
      netif = inp;
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	613b      	str	r3, [r7, #16]
 8011be4:	e01e      	b.n	8011c24 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011be6:	2300      	movs	r3, #0
 8011be8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8011bea:	4b5a      	ldr	r3, [pc, #360]	; (8011d54 <ip4_input+0x240>)
 8011bec:	695b      	ldr	r3, [r3, #20]
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8011bf2:	d017      	beq.n	8011c24 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011bf4:	4b58      	ldr	r3, [pc, #352]	; (8011d58 <ip4_input+0x244>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	613b      	str	r3, [r7, #16]
 8011bfa:	e00e      	b.n	8011c1a <ip4_input+0x106>
          if (netif == inp) {
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d006      	beq.n	8011c12 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011c04:	6938      	ldr	r0, [r7, #16]
 8011c06:	f7ff ff5b 	bl	8011ac0 <ip4_input_accept>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d108      	bne.n	8011c22 <ip4_input+0x10e>
 8011c10:	e000      	b.n	8011c14 <ip4_input+0x100>
            continue;
 8011c12:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	613b      	str	r3, [r7, #16]
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1ed      	bne.n	8011bfc <ip4_input+0xe8>
 8011c20:	e000      	b.n	8011c24 <ip4_input+0x110>
            break;
 8011c22:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c24:	4b4b      	ldr	r3, [pc, #300]	; (8011d54 <ip4_input+0x240>)
 8011c26:	691b      	ldr	r3, [r3, #16]
 8011c28:	6839      	ldr	r1, [r7, #0]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 f96e 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d105      	bne.n	8011c42 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011c36:	4b47      	ldr	r3, [pc, #284]	; (8011d54 <ip4_input+0x240>)
 8011c38:	691b      	ldr	r3, [r3, #16]
 8011c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c3e:	2be0      	cmp	r3, #224	; 0xe0
 8011c40:	d104      	bne.n	8011c4c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f7f7 fe54 	bl	80098f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	e07e      	b.n	8011d4a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d104      	bne.n	8011c5c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7f7 fe4c 	bl	80098f0 <pbuf_free>
    return ERR_OK;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e076      	b.n	8011d4a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	88db      	ldrh	r3, [r3, #6]
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	461a      	mov	r2, r3
 8011c64:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011c68:	4013      	ands	r3, r2
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d00b      	beq.n	8011c86 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f000 fc92 	bl	8012598 <ip4_reass>
 8011c74:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d101      	bne.n	8011c80 <ip4_input+0x16c>
      return ERR_OK;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	e064      	b.n	8011d4a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011c86:	4a33      	ldr	r2, [pc, #204]	; (8011d54 <ip4_input+0x240>)
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011c8c:	4a31      	ldr	r2, [pc, #196]	; (8011d54 <ip4_input+0x240>)
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011c92:	4a30      	ldr	r2, [pc, #192]	; (8011d54 <ip4_input+0x240>)
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	f003 030f 	and.w	r3, r3, #15
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	4b2a      	ldr	r3, [pc, #168]	; (8011d54 <ip4_input+0x240>)
 8011caa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011cac:	89fb      	ldrh	r3, [r7, #14]
 8011cae:	4619      	mov	r1, r3
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7f7 fd97 	bl	80097e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	7a5b      	ldrb	r3, [r3, #9]
 8011cba:	2b11      	cmp	r3, #17
 8011cbc:	d006      	beq.n	8011ccc <ip4_input+0x1b8>
 8011cbe:	2b11      	cmp	r3, #17
 8011cc0:	dc13      	bgt.n	8011cea <ip4_input+0x1d6>
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d00c      	beq.n	8011ce0 <ip4_input+0x1cc>
 8011cc6:	2b06      	cmp	r3, #6
 8011cc8:	d005      	beq.n	8011cd6 <ip4_input+0x1c2>
 8011cca:	e00e      	b.n	8011cea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011ccc:	6839      	ldr	r1, [r7, #0]
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7fe fc68 	bl	80105a4 <udp_input>
        break;
 8011cd4:	e026      	b.n	8011d24 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7fa f853 	bl	800bd84 <tcp_input>
        break;
 8011cde:	e021      	b.n	8011d24 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7ff fcee 	bl	80116c4 <icmp_input>
        break;
 8011ce8:	e01c      	b.n	8011d24 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011cea:	4b1a      	ldr	r3, [pc, #104]	; (8011d54 <ip4_input+0x240>)
 8011cec:	695b      	ldr	r3, [r3, #20]
 8011cee:	6939      	ldr	r1, [r7, #16]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f000 f90b 	bl	8011f0c <ip4_addr_isbroadcast_u32>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d10f      	bne.n	8011d1c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011cfc:	4b15      	ldr	r3, [pc, #84]	; (8011d54 <ip4_input+0x240>)
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d04:	2be0      	cmp	r3, #224	; 0xe0
 8011d06:	d009      	beq.n	8011d1c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011d08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7f7 fddb 	bl	80098ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011d14:	2102      	movs	r1, #2
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff fdd8 	bl	80118cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7f7 fde7 	bl	80098f0 <pbuf_free>
        break;
 8011d22:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011d24:	4b0b      	ldr	r3, [pc, #44]	; (8011d54 <ip4_input+0x240>)
 8011d26:	2200      	movs	r2, #0
 8011d28:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011d2a:	4b0a      	ldr	r3, [pc, #40]	; (8011d54 <ip4_input+0x240>)
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011d30:	4b08      	ldr	r3, [pc, #32]	; (8011d54 <ip4_input+0x240>)
 8011d32:	2200      	movs	r2, #0
 8011d34:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011d36:	4b07      	ldr	r3, [pc, #28]	; (8011d54 <ip4_input+0x240>)
 8011d38:	2200      	movs	r2, #0
 8011d3a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011d3c:	4b05      	ldr	r3, [pc, #20]	; (8011d54 <ip4_input+0x240>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011d42:	4b04      	ldr	r3, [pc, #16]	; (8011d54 <ip4_input+0x240>)
 8011d44:	2200      	movs	r2, #0
 8011d46:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011d48:	2300      	movs	r3, #0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20004078 	.word	0x20004078
 8011d58:	200075ac 	.word	0x200075ac

08011d5c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08a      	sub	sp, #40	; 0x28
 8011d60:	af04      	add	r7, sp, #16
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	607a      	str	r2, [r7, #4]
 8011d68:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d009      	beq.n	8011d88 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d003      	beq.n	8011d82 <ip4_output_if+0x26>
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d102      	bne.n	8011d88 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d84:	3304      	adds	r3, #4
 8011d86:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011d88:	78fa      	ldrb	r2, [r7, #3]
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	9302      	str	r3, [sp, #8]
 8011d8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d92:	9301      	str	r3, [sp, #4]
 8011d94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d98:	9300      	str	r3, [sp, #0]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	6979      	ldr	r1, [r7, #20]
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f000 f805 	bl	8011db0 <ip4_output_if_src>
 8011da6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3718      	adds	r7, #24
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}

08011db0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b088      	sub	sp, #32
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	7b9b      	ldrb	r3, [r3, #14]
 8011dc2:	2b01      	cmp	r3, #1
 8011dc4:	d006      	beq.n	8011dd4 <ip4_output_if_src+0x24>
 8011dc6:	4b4b      	ldr	r3, [pc, #300]	; (8011ef4 <ip4_output_if_src+0x144>)
 8011dc8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011dcc:	494a      	ldr	r1, [pc, #296]	; (8011ef8 <ip4_output_if_src+0x148>)
 8011dce:	484b      	ldr	r0, [pc, #300]	; (8011efc <ip4_output_if_src+0x14c>)
 8011dd0:	f001 f84e 	bl	8012e70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d060      	beq.n	8011e9c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011dda:	2314      	movs	r3, #20
 8011ddc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011dde:	2114      	movs	r1, #20
 8011de0:	68f8      	ldr	r0, [r7, #12]
 8011de2:	f7f7 fcef 	bl	80097c4 <pbuf_add_header>
 8011de6:	4603      	mov	r3, r0
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011dec:	f06f 0301 	mvn.w	r3, #1
 8011df0:	e07c      	b.n	8011eec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	895b      	ldrh	r3, [r3, #10]
 8011dfc:	2b13      	cmp	r3, #19
 8011dfe:	d806      	bhi.n	8011e0e <ip4_output_if_src+0x5e>
 8011e00:	4b3c      	ldr	r3, [pc, #240]	; (8011ef4 <ip4_output_if_src+0x144>)
 8011e02:	f44f 7262 	mov.w	r2, #904	; 0x388
 8011e06:	493e      	ldr	r1, [pc, #248]	; (8011f00 <ip4_output_if_src+0x150>)
 8011e08:	483c      	ldr	r0, [pc, #240]	; (8011efc <ip4_output_if_src+0x14c>)
 8011e0a:	f001 f831 	bl	8012e70 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	78fa      	ldrb	r2, [r7, #3]
 8011e12:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011e1a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	69fb      	ldr	r3, [r7, #28]
 8011e22:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011e24:	8b7b      	ldrh	r3, [r7, #26]
 8011e26:	089b      	lsrs	r3, r3, #2
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e30:	b2da      	uxtb	r2, r3
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011e3c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	891b      	ldrh	r3, [r3, #8]
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7f6 fa0e 	bl	8008264 <lwip_htons>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	2200      	movs	r2, #0
 8011e54:	719a      	strb	r2, [r3, #6]
 8011e56:	2200      	movs	r2, #0
 8011e58:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011e5a:	4b2a      	ldr	r3, [pc, #168]	; (8011f04 <ip4_output_if_src+0x154>)
 8011e5c:	881b      	ldrh	r3, [r3, #0]
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7f6 fa00 	bl	8008264 <lwip_htons>
 8011e64:	4603      	mov	r3, r0
 8011e66:	461a      	mov	r2, r3
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011e6c:	4b25      	ldr	r3, [pc, #148]	; (8011f04 <ip4_output_if_src+0x154>)
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	3301      	adds	r3, #1
 8011e72:	b29a      	uxth	r2, r3
 8011e74:	4b23      	ldr	r3, [pc, #140]	; (8011f04 <ip4_output_if_src+0x154>)
 8011e76:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d104      	bne.n	8011e88 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011e7e:	4b22      	ldr	r3, [pc, #136]	; (8011f08 <ip4_output_if_src+0x158>)
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	60da      	str	r2, [r3, #12]
 8011e86:	e003      	b.n	8011e90 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011e90:	69fb      	ldr	r3, [r7, #28]
 8011e92:	2200      	movs	r2, #0
 8011e94:	729a      	strb	r2, [r3, #10]
 8011e96:	2200      	movs	r2, #0
 8011e98:	72da      	strb	r2, [r3, #11]
 8011e9a:	e00f      	b.n	8011ebc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	895b      	ldrh	r3, [r3, #10]
 8011ea0:	2b13      	cmp	r3, #19
 8011ea2:	d802      	bhi.n	8011eaa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011ea4:	f06f 0301 	mvn.w	r3, #1
 8011ea8:	e020      	b.n	8011eec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011eb6:	f107 0314 	add.w	r3, r7, #20
 8011eba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d00c      	beq.n	8011ede <ip4_output_if_src+0x12e>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	891a      	ldrh	r2, [r3, #8]
 8011ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d906      	bls.n	8011ede <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f000 fd4d 	bl	8012974 <ip4_frag>
 8011eda:	4603      	mov	r3, r0
 8011edc:	e006      	b.n	8011eec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee0:	695b      	ldr	r3, [r3, #20]
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	68f9      	ldr	r1, [r7, #12]
 8011ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ee8:	4798      	blx	r3
 8011eea:	4603      	mov	r3, r0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3720      	adds	r7, #32
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	0801780c 	.word	0x0801780c
 8011ef8:	08017840 	.word	0x08017840
 8011efc:	0801784c 	.word	0x0801784c
 8011f00:	08017874 	.word	0x08017874
 8011f04:	2000067e 	.word	0x2000067e
 8011f08:	0801ab00 	.word	0x0801ab00

08011f0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f20:	d002      	beq.n	8011f28 <ip4_addr_isbroadcast_u32+0x1c>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d101      	bne.n	8011f2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	e02a      	b.n	8011f82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f32:	f003 0302 	and.w	r3, r3, #2
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d101      	bne.n	8011f3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e021      	b.n	8011f82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	3304      	adds	r3, #4
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d101      	bne.n	8011f4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	e019      	b.n	8011f82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	3304      	adds	r3, #4
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	405a      	eors	r2, r3
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	3308      	adds	r3, #8
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	4013      	ands	r3, r2
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d10d      	bne.n	8011f80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	3308      	adds	r3, #8
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	43da      	mvns	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011f70:	683b      	ldr	r3, [r7, #0]
 8011f72:	3308      	adds	r3, #8
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d101      	bne.n	8011f80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	e000      	b.n	8011f82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011f80:	2300      	movs	r3, #0
  }
}
 8011f82:	4618      	mov	r0, r3
 8011f84:	3714      	adds	r7, #20
 8011f86:	46bd      	mov	sp, r7
 8011f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8c:	4770      	bx	lr
	...

08011f90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011f96:	2300      	movs	r3, #0
 8011f98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011f9a:	4b12      	ldr	r3, [pc, #72]	; (8011fe4 <ip_reass_tmr+0x54>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011fa0:	e018      	b.n	8011fd4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	7fdb      	ldrb	r3, [r3, #31]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00b      	beq.n	8011fc2 <ip_reass_tmr+0x32>
      r->timer--;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	7fdb      	ldrb	r3, [r3, #31]
 8011fae:	3b01      	subs	r3, #1
 8011fb0:	b2da      	uxtb	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	60fb      	str	r3, [r7, #12]
 8011fc0:	e008      	b.n	8011fd4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011fcc:	68b9      	ldr	r1, [r7, #8]
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f000 f80a 	bl	8011fe8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e3      	bne.n	8011fa2 <ip_reass_tmr+0x12>
    }
  }
}
 8011fda:	bf00      	nop
 8011fdc:	bf00      	nop
 8011fde:	3710      	adds	r7, #16
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20000680 	.word	0x20000680

08011fe8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b088      	sub	sp, #32
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011ff6:	683a      	ldr	r2, [r7, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d105      	bne.n	801200a <ip_reass_free_complete_datagram+0x22>
 8011ffe:	4b45      	ldr	r3, [pc, #276]	; (8012114 <ip_reass_free_complete_datagram+0x12c>)
 8012000:	22ab      	movs	r2, #171	; 0xab
 8012002:	4945      	ldr	r1, [pc, #276]	; (8012118 <ip_reass_free_complete_datagram+0x130>)
 8012004:	4845      	ldr	r0, [pc, #276]	; (801211c <ip_reass_free_complete_datagram+0x134>)
 8012006:	f000 ff33 	bl	8012e70 <iprintf>
  if (prev != NULL) {
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d00a      	beq.n	8012026 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	429a      	cmp	r2, r3
 8012018:	d005      	beq.n	8012026 <ip_reass_free_complete_datagram+0x3e>
 801201a:	4b3e      	ldr	r3, [pc, #248]	; (8012114 <ip_reass_free_complete_datagram+0x12c>)
 801201c:	22ad      	movs	r2, #173	; 0xad
 801201e:	4940      	ldr	r1, [pc, #256]	; (8012120 <ip_reass_free_complete_datagram+0x138>)
 8012020:	483e      	ldr	r0, [pc, #248]	; (801211c <ip_reass_free_complete_datagram+0x134>)
 8012022:	f000 ff25 	bl	8012e70 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801202e:	697b      	ldr	r3, [r7, #20]
 8012030:	889b      	ldrh	r3, [r3, #4]
 8012032:	b29b      	uxth	r3, r3
 8012034:	2b00      	cmp	r3, #0
 8012036:	d12a      	bne.n	801208e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801203e:	697b      	ldr	r3, [r7, #20]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	6858      	ldr	r0, [r3, #4]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	3308      	adds	r3, #8
 801204e:	2214      	movs	r2, #20
 8012050:	4619      	mov	r1, r3
 8012052:	f000 fedd 	bl	8012e10 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012056:	2101      	movs	r1, #1
 8012058:	69b8      	ldr	r0, [r7, #24]
 801205a:	f7ff fc47 	bl	80118ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801205e:	69b8      	ldr	r0, [r7, #24]
 8012060:	f7f7 fcce 	bl	8009a00 <pbuf_clen>
 8012064:	4603      	mov	r3, r0
 8012066:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012068:	8bfa      	ldrh	r2, [r7, #30]
 801206a:	8a7b      	ldrh	r3, [r7, #18]
 801206c:	4413      	add	r3, r2
 801206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012072:	db05      	blt.n	8012080 <ip_reass_free_complete_datagram+0x98>
 8012074:	4b27      	ldr	r3, [pc, #156]	; (8012114 <ip_reass_free_complete_datagram+0x12c>)
 8012076:	22bc      	movs	r2, #188	; 0xbc
 8012078:	492a      	ldr	r1, [pc, #168]	; (8012124 <ip_reass_free_complete_datagram+0x13c>)
 801207a:	4828      	ldr	r0, [pc, #160]	; (801211c <ip_reass_free_complete_datagram+0x134>)
 801207c:	f000 fef8 	bl	8012e70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012080:	8bfa      	ldrh	r2, [r7, #30]
 8012082:	8a7b      	ldrh	r3, [r7, #18]
 8012084:	4413      	add	r3, r2
 8012086:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012088:	69b8      	ldr	r0, [r7, #24]
 801208a:	f7f7 fc31 	bl	80098f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012094:	e01f      	b.n	80120d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012096:	69bb      	ldr	r3, [r7, #24]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f7f7 fcaa 	bl	8009a00 <pbuf_clen>
 80120ac:	4603      	mov	r3, r0
 80120ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80120b0:	8bfa      	ldrh	r2, [r7, #30]
 80120b2:	8a7b      	ldrh	r3, [r7, #18]
 80120b4:	4413      	add	r3, r2
 80120b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120ba:	db05      	blt.n	80120c8 <ip_reass_free_complete_datagram+0xe0>
 80120bc:	4b15      	ldr	r3, [pc, #84]	; (8012114 <ip_reass_free_complete_datagram+0x12c>)
 80120be:	22cc      	movs	r2, #204	; 0xcc
 80120c0:	4918      	ldr	r1, [pc, #96]	; (8012124 <ip_reass_free_complete_datagram+0x13c>)
 80120c2:	4816      	ldr	r0, [pc, #88]	; (801211c <ip_reass_free_complete_datagram+0x134>)
 80120c4:	f000 fed4 	bl	8012e70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80120c8:	8bfa      	ldrh	r2, [r7, #30]
 80120ca:	8a7b      	ldrh	r3, [r7, #18]
 80120cc:	4413      	add	r3, r2
 80120ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	f7f7 fc0d 	bl	80098f0 <pbuf_free>
  while (p != NULL) {
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d1dc      	bne.n	8012096 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80120dc:	6839      	ldr	r1, [r7, #0]
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 f8c2 	bl	8012268 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80120e4:	4b10      	ldr	r3, [pc, #64]	; (8012128 <ip_reass_free_complete_datagram+0x140>)
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	8bfa      	ldrh	r2, [r7, #30]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d905      	bls.n	80120fa <ip_reass_free_complete_datagram+0x112>
 80120ee:	4b09      	ldr	r3, [pc, #36]	; (8012114 <ip_reass_free_complete_datagram+0x12c>)
 80120f0:	22d2      	movs	r2, #210	; 0xd2
 80120f2:	490e      	ldr	r1, [pc, #56]	; (801212c <ip_reass_free_complete_datagram+0x144>)
 80120f4:	4809      	ldr	r0, [pc, #36]	; (801211c <ip_reass_free_complete_datagram+0x134>)
 80120f6:	f000 febb 	bl	8012e70 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80120fa:	4b0b      	ldr	r3, [pc, #44]	; (8012128 <ip_reass_free_complete_datagram+0x140>)
 80120fc:	881a      	ldrh	r2, [r3, #0]
 80120fe:	8bfb      	ldrh	r3, [r7, #30]
 8012100:	1ad3      	subs	r3, r2, r3
 8012102:	b29a      	uxth	r2, r3
 8012104:	4b08      	ldr	r3, [pc, #32]	; (8012128 <ip_reass_free_complete_datagram+0x140>)
 8012106:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012108:	8bfb      	ldrh	r3, [r7, #30]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3720      	adds	r7, #32
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	080178a4 	.word	0x080178a4
 8012118:	080178e0 	.word	0x080178e0
 801211c:	080178ec 	.word	0x080178ec
 8012120:	08017914 	.word	0x08017914
 8012124:	08017928 	.word	0x08017928
 8012128:	20000684 	.word	0x20000684
 801212c:	08017948 	.word	0x08017948

08012130 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b08a      	sub	sp, #40	; 0x28
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801213a:	2300      	movs	r3, #0
 801213c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801213e:	2300      	movs	r3, #0
 8012140:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012142:	2300      	movs	r3, #0
 8012144:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012146:	2300      	movs	r3, #0
 8012148:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801214a:	2300      	movs	r3, #0
 801214c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801214e:	4b28      	ldr	r3, [pc, #160]	; (80121f0 <ip_reass_remove_oldest_datagram+0xc0>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012154:	e030      	b.n	80121b8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012158:	695a      	ldr	r2, [r3, #20]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	429a      	cmp	r2, r3
 8012160:	d10c      	bne.n	801217c <ip_reass_remove_oldest_datagram+0x4c>
 8012162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012164:	699a      	ldr	r2, [r3, #24]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	429a      	cmp	r2, r3
 801216c:	d106      	bne.n	801217c <ip_reass_remove_oldest_datagram+0x4c>
 801216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012170:	899a      	ldrh	r2, [r3, #12]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	889b      	ldrh	r3, [r3, #4]
 8012176:	b29b      	uxth	r3, r3
 8012178:	429a      	cmp	r2, r3
 801217a:	d014      	beq.n	80121a6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	3301      	adds	r3, #1
 8012180:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012182:	6a3b      	ldr	r3, [r7, #32]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d104      	bne.n	8012192 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801218c:	69fb      	ldr	r3, [r7, #28]
 801218e:	61bb      	str	r3, [r7, #24]
 8012190:	e009      	b.n	80121a6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012194:	7fda      	ldrb	r2, [r3, #31]
 8012196:	6a3b      	ldr	r3, [r7, #32]
 8012198:	7fdb      	ldrb	r3, [r3, #31]
 801219a:	429a      	cmp	r2, r3
 801219c:	d803      	bhi.n	80121a6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80121a2:	69fb      	ldr	r3, [r7, #28]
 80121a4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d001      	beq.n	80121b2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80121ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80121b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80121b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d1cb      	bne.n	8012156 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80121be:	6a3b      	ldr	r3, [r7, #32]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d008      	beq.n	80121d6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80121c4:	69b9      	ldr	r1, [r7, #24]
 80121c6:	6a38      	ldr	r0, [r7, #32]
 80121c8:	f7ff ff0e 	bl	8011fe8 <ip_reass_free_complete_datagram>
 80121cc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80121ce:	697a      	ldr	r2, [r7, #20]
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	4413      	add	r3, r2
 80121d4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80121d6:	697a      	ldr	r2, [r7, #20]
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	429a      	cmp	r2, r3
 80121dc:	da02      	bge.n	80121e4 <ip_reass_remove_oldest_datagram+0xb4>
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	dcac      	bgt.n	801213e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80121e4:	697b      	ldr	r3, [r7, #20]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3728      	adds	r7, #40	; 0x28
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	20000680 	.word	0x20000680

080121f4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80121fe:	2004      	movs	r0, #4
 8012200:	f7f6 fd18 	bl	8008c34 <memp_malloc>
 8012204:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d110      	bne.n	801222e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7ff ff8e 	bl	8012130 <ip_reass_remove_oldest_datagram>
 8012214:	4602      	mov	r2, r0
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	4293      	cmp	r3, r2
 801221a:	dc03      	bgt.n	8012224 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801221c:	2004      	movs	r0, #4
 801221e:	f7f6 fd09 	bl	8008c34 <memp_malloc>
 8012222:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801222a:	2300      	movs	r3, #0
 801222c:	e016      	b.n	801225c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801222e:	2220      	movs	r2, #32
 8012230:	2100      	movs	r1, #0
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	f000 fe14 	bl	8012e60 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	220f      	movs	r2, #15
 801223c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801223e:	4b09      	ldr	r3, [pc, #36]	; (8012264 <ip_reass_enqueue_new_datagram+0x70>)
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012246:	4a07      	ldr	r2, [pc, #28]	; (8012264 <ip_reass_enqueue_new_datagram+0x70>)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	3308      	adds	r3, #8
 8012250:	2214      	movs	r2, #20
 8012252:	6879      	ldr	r1, [r7, #4]
 8012254:	4618      	mov	r0, r3
 8012256:	f000 fddb 	bl	8012e10 <memcpy>
  return ipr;
 801225a:	68fb      	ldr	r3, [r7, #12]
}
 801225c:	4618      	mov	r0, r3
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}
 8012264:	20000680 	.word	0x20000680

08012268 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012272:	4b10      	ldr	r3, [pc, #64]	; (80122b4 <ip_reass_dequeue_datagram+0x4c>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	687a      	ldr	r2, [r7, #4]
 8012278:	429a      	cmp	r2, r3
 801227a:	d104      	bne.n	8012286 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a0c      	ldr	r2, [pc, #48]	; (80122b4 <ip_reass_dequeue_datagram+0x4c>)
 8012282:	6013      	str	r3, [r2, #0]
 8012284:	e00d      	b.n	80122a2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d106      	bne.n	801229a <ip_reass_dequeue_datagram+0x32>
 801228c:	4b0a      	ldr	r3, [pc, #40]	; (80122b8 <ip_reass_dequeue_datagram+0x50>)
 801228e:	f240 1245 	movw	r2, #325	; 0x145
 8012292:	490a      	ldr	r1, [pc, #40]	; (80122bc <ip_reass_dequeue_datagram+0x54>)
 8012294:	480a      	ldr	r0, [pc, #40]	; (80122c0 <ip_reass_dequeue_datagram+0x58>)
 8012296:	f000 fdeb 	bl	8012e70 <iprintf>
    prev->next = ipr->next;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	2004      	movs	r0, #4
 80122a6:	f7f6 fd11 	bl	8008ccc <memp_free>
}
 80122aa:	bf00      	nop
 80122ac:	3708      	adds	r7, #8
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20000680 	.word	0x20000680
 80122b8:	080178a4 	.word	0x080178a4
 80122bc:	0801796c 	.word	0x0801796c
 80122c0:	080178ec 	.word	0x080178ec

080122c4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b08c      	sub	sp, #48	; 0x30
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80122d0:	2300      	movs	r3, #0
 80122d2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80122d4:	2301      	movs	r3, #1
 80122d6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80122d8:	68bb      	ldr	r3, [r7, #8]
 80122da:	685b      	ldr	r3, [r3, #4]
 80122dc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	885b      	ldrh	r3, [r3, #2]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7f5 ffbd 	bl	8008264 <lwip_htons>
 80122ea:	4603      	mov	r3, r0
 80122ec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	f003 030f 	and.w	r3, r3, #15
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80122fc:	7e7b      	ldrb	r3, [r7, #25]
 80122fe:	b29b      	uxth	r3, r3
 8012300:	8b7a      	ldrh	r2, [r7, #26]
 8012302:	429a      	cmp	r2, r3
 8012304:	d202      	bcs.n	801230c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801230a:	e135      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801230c:	7e7b      	ldrb	r3, [r7, #25]
 801230e:	b29b      	uxth	r3, r3
 8012310:	8b7a      	ldrh	r2, [r7, #26]
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	88db      	ldrh	r3, [r3, #6]
 801231a:	b29b      	uxth	r3, r3
 801231c:	4618      	mov	r0, r3
 801231e:	f7f5 ffa1 	bl	8008264 <lwip_htons>
 8012322:	4603      	mov	r3, r0
 8012324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012328:	b29b      	uxth	r3, r3
 801232a:	00db      	lsls	r3, r3, #3
 801232c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801232e:	68bb      	ldr	r3, [r7, #8]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012336:	2200      	movs	r2, #0
 8012338:	701a      	strb	r2, [r3, #0]
 801233a:	2200      	movs	r2, #0
 801233c:	705a      	strb	r2, [r3, #1]
 801233e:	2200      	movs	r2, #0
 8012340:	709a      	strb	r2, [r3, #2]
 8012342:	2200      	movs	r2, #0
 8012344:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012348:	8afa      	ldrh	r2, [r7, #22]
 801234a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801234c:	8afa      	ldrh	r2, [r7, #22]
 801234e:	8b7b      	ldrh	r3, [r7, #26]
 8012350:	4413      	add	r3, r2
 8012352:	b29a      	uxth	r2, r3
 8012354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012356:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	88db      	ldrh	r3, [r3, #6]
 801235c:	b29b      	uxth	r3, r3
 801235e:	8afa      	ldrh	r2, [r7, #22]
 8012360:	429a      	cmp	r2, r3
 8012362:	d902      	bls.n	801236a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012368:	e106      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	627b      	str	r3, [r7, #36]	; 0x24
 8012370:	e068      	b.n	8012444 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	889b      	ldrh	r3, [r3, #4]
 801237c:	b29a      	uxth	r2, r3
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	889b      	ldrh	r3, [r3, #4]
 8012382:	b29b      	uxth	r3, r3
 8012384:	429a      	cmp	r2, r3
 8012386:	d235      	bcs.n	80123f4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801238c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012390:	2b00      	cmp	r3, #0
 8012392:	d020      	beq.n	80123d6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012396:	889b      	ldrh	r3, [r3, #4]
 8012398:	b29a      	uxth	r2, r3
 801239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239c:	88db      	ldrh	r3, [r3, #6]
 801239e:	b29b      	uxth	r3, r3
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d307      	bcc.n	80123b4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80123a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a6:	88db      	ldrh	r3, [r3, #6]
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	889b      	ldrh	r3, [r3, #4]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	429a      	cmp	r2, r3
 80123b2:	d902      	bls.n	80123ba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123b8:	e0de      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80123c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123c2:	88db      	ldrh	r3, [r3, #6]
 80123c4:	b29a      	uxth	r2, r3
 80123c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c8:	889b      	ldrh	r3, [r3, #4]
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d03d      	beq.n	801244c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80123d0:	2300      	movs	r3, #0
 80123d2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80123d4:	e03a      	b.n	801244c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80123d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d8:	88db      	ldrh	r3, [r3, #6]
 80123da:	b29a      	uxth	r2, r3
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	889b      	ldrh	r3, [r3, #4]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d902      	bls.n	80123ec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80123e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123ea:	e0c5      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	605a      	str	r2, [r3, #4]
      break;
 80123f2:	e02b      	b.n	801244c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80123f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123f6:	889b      	ldrh	r3, [r3, #4]
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	889b      	ldrh	r3, [r3, #4]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	429a      	cmp	r2, r3
 8012402:	d102      	bne.n	801240a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012408:	e0b6      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240c:	889b      	ldrh	r3, [r3, #4]
 801240e:	b29a      	uxth	r2, r3
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	88db      	ldrh	r3, [r3, #6]
 8012414:	b29b      	uxth	r3, r3
 8012416:	429a      	cmp	r2, r3
 8012418:	d202      	bcs.n	8012420 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801241e:	e0ab      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012422:	2b00      	cmp	r3, #0
 8012424:	d009      	beq.n	801243a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012428:	88db      	ldrh	r3, [r3, #6]
 801242a:	b29a      	uxth	r2, r3
 801242c:	693b      	ldr	r3, [r7, #16]
 801242e:	889b      	ldrh	r3, [r3, #4]
 8012430:	b29b      	uxth	r3, r3
 8012432:	429a      	cmp	r2, r3
 8012434:	d001      	beq.n	801243a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012436:	2300      	movs	r3, #0
 8012438:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	2b00      	cmp	r3, #0
 8012448:	d193      	bne.n	8012372 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801244a:	e000      	b.n	801244e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801244c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012450:	2b00      	cmp	r3, #0
 8012452:	d12d      	bne.n	80124b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012456:	2b00      	cmp	r3, #0
 8012458:	d01c      	beq.n	8012494 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245c:	88db      	ldrh	r3, [r3, #6]
 801245e:	b29a      	uxth	r2, r3
 8012460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012462:	889b      	ldrh	r3, [r3, #4]
 8012464:	b29b      	uxth	r3, r3
 8012466:	429a      	cmp	r2, r3
 8012468:	d906      	bls.n	8012478 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801246a:	4b45      	ldr	r3, [pc, #276]	; (8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801246c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012470:	4944      	ldr	r1, [pc, #272]	; (8012584 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012472:	4845      	ldr	r0, [pc, #276]	; (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012474:	f000 fcfc 	bl	8012e70 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247a:	68ba      	ldr	r2, [r7, #8]
 801247c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012480:	88db      	ldrh	r3, [r3, #6]
 8012482:	b29a      	uxth	r2, r3
 8012484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012486:	889b      	ldrh	r3, [r3, #4]
 8012488:	b29b      	uxth	r3, r3
 801248a:	429a      	cmp	r2, r3
 801248c:	d010      	beq.n	80124b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	623b      	str	r3, [r7, #32]
 8012492:	e00d      	b.n	80124b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d006      	beq.n	80124aa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801249c:	4b38      	ldr	r3, [pc, #224]	; (8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801249e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80124a2:	493a      	ldr	r1, [pc, #232]	; (801258c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80124a4:	4838      	ldr	r0, [pc, #224]	; (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80124a6:	f000 fce3 	bl	8012e70 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	68ba      	ldr	r2, [r7, #8]
 80124ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d105      	bne.n	80124c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	7f9b      	ldrb	r3, [r3, #30]
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d059      	beq.n	8012576 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d04f      	beq.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d006      	beq.n	80124de <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	889b      	ldrh	r3, [r3, #4]
 80124d8:	b29b      	uxth	r3, r3
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d002      	beq.n	80124e4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80124de:	2300      	movs	r3, #0
 80124e0:	623b      	str	r3, [r7, #32]
 80124e2:	e041      	b.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80124e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80124e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80124ee:	e012      	b.n	8012516 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80124f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80124f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f8:	88db      	ldrh	r3, [r3, #6]
 80124fa:	b29a      	uxth	r2, r3
 80124fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fe:	889b      	ldrh	r3, [r3, #4]
 8012500:	b29b      	uxth	r3, r3
 8012502:	429a      	cmp	r2, r3
 8012504:	d002      	beq.n	801250c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	623b      	str	r3, [r7, #32]
            break;
 801250a:	e007      	b.n	801251c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012518:	2b00      	cmp	r3, #0
 801251a:	d1e9      	bne.n	80124f0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801251c:	6a3b      	ldr	r3, [r7, #32]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d022      	beq.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d106      	bne.n	8012538 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801252a:	4b15      	ldr	r3, [pc, #84]	; (8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801252c:	f240 12df 	movw	r2, #479	; 0x1df
 8012530:	4917      	ldr	r1, [pc, #92]	; (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012532:	4815      	ldr	r0, [pc, #84]	; (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012534:	f000 fc9c 	bl	8012e70 <iprintf>
          LWIP_ASSERT("sanity check",
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012540:	429a      	cmp	r2, r3
 8012542:	d106      	bne.n	8012552 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012544:	4b0e      	ldr	r3, [pc, #56]	; (8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012546:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801254a:	4911      	ldr	r1, [pc, #68]	; (8012590 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801254c:	480e      	ldr	r0, [pc, #56]	; (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801254e:	f000 fc8f 	bl	8012e70 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d006      	beq.n	8012568 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801255a:	4b09      	ldr	r3, [pc, #36]	; (8012580 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801255c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012560:	490c      	ldr	r1, [pc, #48]	; (8012594 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012562:	4809      	ldr	r0, [pc, #36]	; (8012588 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012564:	f000 fc84 	bl	8012e70 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012568:	6a3b      	ldr	r3, [r7, #32]
 801256a:	2b00      	cmp	r3, #0
 801256c:	bf14      	ite	ne
 801256e:	2301      	movne	r3, #1
 8012570:	2300      	moveq	r3, #0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	e000      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3730      	adds	r7, #48	; 0x30
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	080178a4 	.word	0x080178a4
 8012584:	08017988 	.word	0x08017988
 8012588:	080178ec 	.word	0x080178ec
 801258c:	080179a8 	.word	0x080179a8
 8012590:	080179e0 	.word	0x080179e0
 8012594:	080179f0 	.word	0x080179f0

08012598 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b08e      	sub	sp, #56	; 0x38
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80125a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a8:	781b      	ldrb	r3, [r3, #0]
 80125aa:	f003 030f 	and.w	r3, r3, #15
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	2b14      	cmp	r3, #20
 80125b6:	f040 8167 	bne.w	8012888 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80125ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125bc:	88db      	ldrh	r3, [r3, #6]
 80125be:	b29b      	uxth	r3, r3
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f5 fe4f 	bl	8008264 <lwip_htons>
 80125c6:	4603      	mov	r3, r0
 80125c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	00db      	lsls	r3, r3, #3
 80125d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80125d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d4:	885b      	ldrh	r3, [r3, #2]
 80125d6:	b29b      	uxth	r3, r3
 80125d8:	4618      	mov	r0, r3
 80125da:	f7f5 fe43 	bl	8008264 <lwip_htons>
 80125de:	4603      	mov	r3, r0
 80125e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80125e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	f003 030f 	and.w	r3, r3, #15
 80125ea:	b2db      	uxtb	r3, r3
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80125f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125fa:	429a      	cmp	r2, r3
 80125fc:	f0c0 8146 	bcc.w	801288c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012604:	b29b      	uxth	r3, r3
 8012606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012608:	1ad3      	subs	r3, r2, r3
 801260a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f7f7 f9f7 	bl	8009a00 <pbuf_clen>
 8012612:	4603      	mov	r3, r0
 8012614:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012616:	4b9f      	ldr	r3, [pc, #636]	; (8012894 <ip4_reass+0x2fc>)
 8012618:	881b      	ldrh	r3, [r3, #0]
 801261a:	461a      	mov	r2, r3
 801261c:	8c3b      	ldrh	r3, [r7, #32]
 801261e:	4413      	add	r3, r2
 8012620:	2b0a      	cmp	r3, #10
 8012622:	dd10      	ble.n	8012646 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012624:	8c3b      	ldrh	r3, [r7, #32]
 8012626:	4619      	mov	r1, r3
 8012628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801262a:	f7ff fd81 	bl	8012130 <ip_reass_remove_oldest_datagram>
 801262e:	4603      	mov	r3, r0
 8012630:	2b00      	cmp	r3, #0
 8012632:	f000 812d 	beq.w	8012890 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012636:	4b97      	ldr	r3, [pc, #604]	; (8012894 <ip4_reass+0x2fc>)
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	461a      	mov	r2, r3
 801263c:	8c3b      	ldrh	r3, [r7, #32]
 801263e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012640:	2b0a      	cmp	r3, #10
 8012642:	f300 8125 	bgt.w	8012890 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012646:	4b94      	ldr	r3, [pc, #592]	; (8012898 <ip4_reass+0x300>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	633b      	str	r3, [r7, #48]	; 0x30
 801264c:	e015      	b.n	801267a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012650:	695a      	ldr	r2, [r3, #20]
 8012652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012654:	68db      	ldr	r3, [r3, #12]
 8012656:	429a      	cmp	r2, r3
 8012658:	d10c      	bne.n	8012674 <ip4_reass+0xdc>
 801265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265c:	699a      	ldr	r2, [r3, #24]
 801265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012660:	691b      	ldr	r3, [r3, #16]
 8012662:	429a      	cmp	r2, r3
 8012664:	d106      	bne.n	8012674 <ip4_reass+0xdc>
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	899a      	ldrh	r2, [r3, #12]
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	889b      	ldrh	r3, [r3, #4]
 801266e:	b29b      	uxth	r3, r3
 8012670:	429a      	cmp	r2, r3
 8012672:	d006      	beq.n	8012682 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	633b      	str	r3, [r7, #48]	; 0x30
 801267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267c:	2b00      	cmp	r3, #0
 801267e:	d1e6      	bne.n	801264e <ip4_reass+0xb6>
 8012680:	e000      	b.n	8012684 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012682:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012686:	2b00      	cmp	r3, #0
 8012688:	d109      	bne.n	801269e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801268a:	8c3b      	ldrh	r3, [r7, #32]
 801268c:	4619      	mov	r1, r3
 801268e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012690:	f7ff fdb0 	bl	80121f4 <ip_reass_enqueue_new_datagram>
 8012694:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012698:	2b00      	cmp	r3, #0
 801269a:	d11c      	bne.n	80126d6 <ip4_reass+0x13e>
      goto nullreturn;
 801269c:	e109      	b.n	80128b2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126a0:	88db      	ldrh	r3, [r3, #6]
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7f5 fddd 	bl	8008264 <lwip_htons>
 80126aa:	4603      	mov	r3, r0
 80126ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d110      	bne.n	80126d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80126b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b6:	89db      	ldrh	r3, [r3, #14]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7f5 fdd3 	bl	8008264 <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d006      	beq.n	80126d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80126c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ca:	3308      	adds	r3, #8
 80126cc:	2214      	movs	r2, #20
 80126ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126d0:	4618      	mov	r0, r3
 80126d2:	f000 fb9d 	bl	8012e10 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80126d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d8:	88db      	ldrh	r3, [r3, #6]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	f003 0320 	and.w	r3, r3, #32
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	bf0c      	ite	eq
 80126e4:	2301      	moveq	r3, #1
 80126e6:	2300      	movne	r3, #0
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00e      	beq.n	8012710 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80126f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80126f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126f6:	4413      	add	r3, r2
 80126f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80126fa:	8b7a      	ldrh	r2, [r7, #26]
 80126fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80126fe:	429a      	cmp	r2, r3
 8012700:	f0c0 80a0 	bcc.w	8012844 <ip4_reass+0x2ac>
 8012704:	8b7b      	ldrh	r3, [r7, #26]
 8012706:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801270a:	4293      	cmp	r3, r2
 801270c:	f200 809a 	bhi.w	8012844 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012710:	69fa      	ldr	r2, [r7, #28]
 8012712:	6879      	ldr	r1, [r7, #4]
 8012714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012716:	f7ff fdd5 	bl	80122c4 <ip_reass_chain_frag_into_datagram_and_validate>
 801271a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012722:	f000 8091 	beq.w	8012848 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012726:	4b5b      	ldr	r3, [pc, #364]	; (8012894 <ip4_reass+0x2fc>)
 8012728:	881a      	ldrh	r2, [r3, #0]
 801272a:	8c3b      	ldrh	r3, [r7, #32]
 801272c:	4413      	add	r3, r2
 801272e:	b29a      	uxth	r2, r3
 8012730:	4b58      	ldr	r3, [pc, #352]	; (8012894 <ip4_reass+0x2fc>)
 8012732:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00d      	beq.n	8012756 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801273a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801273c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801273e:	4413      	add	r3, r2
 8012740:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012744:	8a7a      	ldrh	r2, [r7, #18]
 8012746:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274a:	7f9b      	ldrb	r3, [r3, #30]
 801274c:	f043 0301 	orr.w	r3, r3, #1
 8012750:	b2da      	uxtb	r2, r3
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	2b01      	cmp	r3, #1
 801275a:	d171      	bne.n	8012840 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275e:	8b9b      	ldrh	r3, [r3, #28]
 8012760:	3314      	adds	r3, #20
 8012762:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	3308      	adds	r3, #8
 801277a:	2214      	movs	r2, #20
 801277c:	4619      	mov	r1, r3
 801277e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012780:	f000 fb46 	bl	8012e10 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012784:	8a3b      	ldrh	r3, [r7, #16]
 8012786:	4618      	mov	r0, r3
 8012788:	f7f5 fd6c 	bl	8008264 <lwip_htons>
 801278c:	4603      	mov	r3, r0
 801278e:	461a      	mov	r2, r3
 8012790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012792:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	2200      	movs	r2, #0
 8012798:	719a      	strb	r2, [r3, #6]
 801279a:	2200      	movs	r2, #0
 801279c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a0:	2200      	movs	r2, #0
 80127a2:	729a      	strb	r2, [r3, #10]
 80127a4:	2200      	movs	r2, #0
 80127a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80127a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80127ae:	e00d      	b.n	80127cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80127b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b2:	685b      	ldr	r3, [r3, #4]
 80127b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80127b6:	2114      	movs	r1, #20
 80127b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80127ba:	f7f7 f813 	bl	80097e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80127be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f7f7 f957 	bl	8009a74 <pbuf_cat>
      r = iprh->next_pbuf;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80127cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1ee      	bne.n	80127b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80127d2:	4b31      	ldr	r3, [pc, #196]	; (8012898 <ip4_reass+0x300>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127d8:	429a      	cmp	r2, r3
 80127da:	d102      	bne.n	80127e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80127dc:	2300      	movs	r3, #0
 80127de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127e0:	e010      	b.n	8012804 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127e2:	4b2d      	ldr	r3, [pc, #180]	; (8012898 <ip4_reass+0x300>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127e8:	e007      	b.n	80127fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80127ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d006      	beq.n	8012802 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d1f4      	bne.n	80127ea <ip4_reass+0x252>
 8012800:	e000      	b.n	8012804 <ip4_reass+0x26c>
          break;
 8012802:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012808:	f7ff fd2e 	bl	8012268 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7f7 f8f7 	bl	8009a00 <pbuf_clen>
 8012812:	4603      	mov	r3, r0
 8012814:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012816:	4b1f      	ldr	r3, [pc, #124]	; (8012894 <ip4_reass+0x2fc>)
 8012818:	881b      	ldrh	r3, [r3, #0]
 801281a:	8c3a      	ldrh	r2, [r7, #32]
 801281c:	429a      	cmp	r2, r3
 801281e:	d906      	bls.n	801282e <ip4_reass+0x296>
 8012820:	4b1e      	ldr	r3, [pc, #120]	; (801289c <ip4_reass+0x304>)
 8012822:	f240 229b 	movw	r2, #667	; 0x29b
 8012826:	491e      	ldr	r1, [pc, #120]	; (80128a0 <ip4_reass+0x308>)
 8012828:	481e      	ldr	r0, [pc, #120]	; (80128a4 <ip4_reass+0x30c>)
 801282a:	f000 fb21 	bl	8012e70 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801282e:	4b19      	ldr	r3, [pc, #100]	; (8012894 <ip4_reass+0x2fc>)
 8012830:	881a      	ldrh	r2, [r3, #0]
 8012832:	8c3b      	ldrh	r3, [r7, #32]
 8012834:	1ad3      	subs	r3, r2, r3
 8012836:	b29a      	uxth	r2, r3
 8012838:	4b16      	ldr	r3, [pc, #88]	; (8012894 <ip4_reass+0x2fc>)
 801283a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	e03c      	b.n	80128ba <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012840:	2300      	movs	r3, #0
 8012842:	e03a      	b.n	80128ba <ip4_reass+0x322>
      goto nullreturn_ipr;
 8012844:	bf00      	nop
 8012846:	e000      	b.n	801284a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012848:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284c:	2b00      	cmp	r3, #0
 801284e:	d106      	bne.n	801285e <ip4_reass+0x2c6>
 8012850:	4b12      	ldr	r3, [pc, #72]	; (801289c <ip4_reass+0x304>)
 8012852:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012856:	4914      	ldr	r1, [pc, #80]	; (80128a8 <ip4_reass+0x310>)
 8012858:	4812      	ldr	r0, [pc, #72]	; (80128a4 <ip4_reass+0x30c>)
 801285a:	f000 fb09 	bl	8012e70 <iprintf>
  if (ipr->p == NULL) {
 801285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d124      	bne.n	80128b0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012866:	4b0c      	ldr	r3, [pc, #48]	; (8012898 <ip4_reass+0x300>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801286c:	429a      	cmp	r2, r3
 801286e:	d006      	beq.n	801287e <ip4_reass+0x2e6>
 8012870:	4b0a      	ldr	r3, [pc, #40]	; (801289c <ip4_reass+0x304>)
 8012872:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012876:	490d      	ldr	r1, [pc, #52]	; (80128ac <ip4_reass+0x314>)
 8012878:	480a      	ldr	r0, [pc, #40]	; (80128a4 <ip4_reass+0x30c>)
 801287a:	f000 faf9 	bl	8012e70 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801287e:	2100      	movs	r1, #0
 8012880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012882:	f7ff fcf1 	bl	8012268 <ip_reass_dequeue_datagram>
 8012886:	e014      	b.n	80128b2 <ip4_reass+0x31a>
    goto nullreturn;
 8012888:	bf00      	nop
 801288a:	e012      	b.n	80128b2 <ip4_reass+0x31a>
    goto nullreturn;
 801288c:	bf00      	nop
 801288e:	e010      	b.n	80128b2 <ip4_reass+0x31a>
      goto nullreturn;
 8012890:	bf00      	nop
 8012892:	e00e      	b.n	80128b2 <ip4_reass+0x31a>
 8012894:	20000684 	.word	0x20000684
 8012898:	20000680 	.word	0x20000680
 801289c:	080178a4 	.word	0x080178a4
 80128a0:	08017a14 	.word	0x08017a14
 80128a4:	080178ec 	.word	0x080178ec
 80128a8:	08017a30 	.word	0x08017a30
 80128ac:	08017a3c 	.word	0x08017a3c
  }

nullreturn:
 80128b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7f7 f81c 	bl	80098f0 <pbuf_free>
  return NULL;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3738      	adds	r7, #56	; 0x38
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop

080128c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80128c8:	2005      	movs	r0, #5
 80128ca:	f7f6 f9b3 	bl	8008c34 <memp_malloc>
 80128ce:	4603      	mov	r3, r0
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b082      	sub	sp, #8
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d106      	bne.n	80128f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80128e2:	4b07      	ldr	r3, [pc, #28]	; (8012900 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80128e4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80128e8:	4906      	ldr	r1, [pc, #24]	; (8012904 <ip_frag_free_pbuf_custom_ref+0x30>)
 80128ea:	4807      	ldr	r0, [pc, #28]	; (8012908 <ip_frag_free_pbuf_custom_ref+0x34>)
 80128ec:	f000 fac0 	bl	8012e70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80128f0:	6879      	ldr	r1, [r7, #4]
 80128f2:	2005      	movs	r0, #5
 80128f4:	f7f6 f9ea 	bl	8008ccc <memp_free>
}
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	080178a4 	.word	0x080178a4
 8012904:	08017a5c 	.word	0x08017a5c
 8012908:	080178ec 	.word	0x080178ec

0801290c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d106      	bne.n	801292c <ipfrag_free_pbuf_custom+0x20>
 801291e:	4b11      	ldr	r3, [pc, #68]	; (8012964 <ipfrag_free_pbuf_custom+0x58>)
 8012920:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012924:	4910      	ldr	r1, [pc, #64]	; (8012968 <ipfrag_free_pbuf_custom+0x5c>)
 8012926:	4811      	ldr	r0, [pc, #68]	; (801296c <ipfrag_free_pbuf_custom+0x60>)
 8012928:	f000 faa2 	bl	8012e70 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801292c:	68fa      	ldr	r2, [r7, #12]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	429a      	cmp	r2, r3
 8012932:	d006      	beq.n	8012942 <ipfrag_free_pbuf_custom+0x36>
 8012934:	4b0b      	ldr	r3, [pc, #44]	; (8012964 <ipfrag_free_pbuf_custom+0x58>)
 8012936:	f240 22cf 	movw	r2, #719	; 0x2cf
 801293a:	490d      	ldr	r1, [pc, #52]	; (8012970 <ipfrag_free_pbuf_custom+0x64>)
 801293c:	480b      	ldr	r0, [pc, #44]	; (801296c <ipfrag_free_pbuf_custom+0x60>)
 801293e:	f000 fa97 	bl	8012e70 <iprintf>
  if (pcr->original != NULL) {
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	695b      	ldr	r3, [r3, #20]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d004      	beq.n	8012954 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	695b      	ldr	r3, [r3, #20]
 801294e:	4618      	mov	r0, r3
 8012950:	f7f6 ffce 	bl	80098f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f7ff ffbd 	bl	80128d4 <ip_frag_free_pbuf_custom_ref>
}
 801295a:	bf00      	nop
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	080178a4 	.word	0x080178a4
 8012968:	08017a68 	.word	0x08017a68
 801296c:	080178ec 	.word	0x080178ec
 8012970:	08017a74 	.word	0x08017a74

08012974 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012974:	b580      	push	{r7, lr}
 8012976:	b094      	sub	sp, #80	; 0x50
 8012978:	af02      	add	r7, sp, #8
 801297a:	60f8      	str	r0, [r7, #12]
 801297c:	60b9      	str	r1, [r7, #8]
 801297e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801298a:	3b14      	subs	r3, #20
 801298c:	2b00      	cmp	r3, #0
 801298e:	da00      	bge.n	8012992 <ip4_frag+0x1e>
 8012990:	3307      	adds	r3, #7
 8012992:	10db      	asrs	r3, r3, #3
 8012994:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012996:	2314      	movs	r3, #20
 8012998:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80129a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80129a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	f003 030f 	and.w	r3, r3, #15
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	009b      	lsls	r3, r3, #2
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b14      	cmp	r3, #20
 80129b4:	d002      	beq.n	80129bc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80129b6:	f06f 0305 	mvn.w	r3, #5
 80129ba:	e110      	b.n	8012bde <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	895b      	ldrh	r3, [r3, #10]
 80129c0:	2b13      	cmp	r3, #19
 80129c2:	d809      	bhi.n	80129d8 <ip4_frag+0x64>
 80129c4:	4b88      	ldr	r3, [pc, #544]	; (8012be8 <ip4_frag+0x274>)
 80129c6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80129ca:	4988      	ldr	r1, [pc, #544]	; (8012bec <ip4_frag+0x278>)
 80129cc:	4888      	ldr	r0, [pc, #544]	; (8012bf0 <ip4_frag+0x27c>)
 80129ce:	f000 fa4f 	bl	8012e70 <iprintf>
 80129d2:	f06f 0305 	mvn.w	r3, #5
 80129d6:	e102      	b.n	8012bde <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80129d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129da:	88db      	ldrh	r3, [r3, #6]
 80129dc:	b29b      	uxth	r3, r3
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f5 fc40 	bl	8008264 <lwip_htons>
 80129e4:	4603      	mov	r3, r0
 80129e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80129e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80129ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80129f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80129f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80129f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	891b      	ldrh	r3, [r3, #8]
 80129fe:	3b14      	subs	r3, #20
 8012a00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012a04:	e0e1      	b.n	8012bca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012a06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a08:	00db      	lsls	r3, r3, #3
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a10:	4293      	cmp	r3, r2
 8012a12:	bf28      	it	cs
 8012a14:	4613      	movcs	r3, r2
 8012a16:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012a18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a1c:	2114      	movs	r1, #20
 8012a1e:	200e      	movs	r0, #14
 8012a20:	f7f6 fc82 	bl	8009328 <pbuf_alloc>
 8012a24:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8012a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 80d5 	beq.w	8012bd8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a30:	895b      	ldrh	r3, [r3, #10]
 8012a32:	2b13      	cmp	r3, #19
 8012a34:	d806      	bhi.n	8012a44 <ip4_frag+0xd0>
 8012a36:	4b6c      	ldr	r3, [pc, #432]	; (8012be8 <ip4_frag+0x274>)
 8012a38:	f44f 7249 	mov.w	r2, #804	; 0x324
 8012a3c:	496d      	ldr	r1, [pc, #436]	; (8012bf4 <ip4_frag+0x280>)
 8012a3e:	486c      	ldr	r0, [pc, #432]	; (8012bf0 <ip4_frag+0x27c>)
 8012a40:	f000 fa16 	bl	8012e70 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	2214      	movs	r2, #20
 8012a4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f000 f9df 	bl	8012e10 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8012a58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012a5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012a5e:	e064      	b.n	8012b2a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	895a      	ldrh	r2, [r3, #10]
 8012a64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a66:	1ad3      	subs	r3, r2, r3
 8012a68:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	895b      	ldrh	r3, [r3, #10]
 8012a6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d906      	bls.n	8012a82 <ip4_frag+0x10e>
 8012a74:	4b5c      	ldr	r3, [pc, #368]	; (8012be8 <ip4_frag+0x274>)
 8012a76:	f240 322d 	movw	r2, #813	; 0x32d
 8012a7a:	495f      	ldr	r1, [pc, #380]	; (8012bf8 <ip4_frag+0x284>)
 8012a7c:	485c      	ldr	r0, [pc, #368]	; (8012bf0 <ip4_frag+0x27c>)
 8012a7e:	f000 f9f7 	bl	8012e70 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8012a82:	8bfa      	ldrh	r2, [r7, #30]
 8012a84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	bf28      	it	cs
 8012a8c:	4613      	movcs	r3, r2
 8012a8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012a92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d105      	bne.n	8012aa6 <ip4_frag+0x132>
        poff = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	60fb      	str	r3, [r7, #12]
        continue;
 8012aa4:	e041      	b.n	8012b2a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012aa6:	f7ff ff0d 	bl	80128c4 <ip_frag_alloc_pbuf_custom_ref>
 8012aaa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8012aac:	69bb      	ldr	r3, [r7, #24]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d103      	bne.n	8012aba <ip4_frag+0x146>
        pbuf_free(rambuf);
 8012ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ab4:	f7f6 ff1c 	bl	80098f0 <pbuf_free>
        goto memerr;
 8012ab8:	e08f      	b.n	8012bda <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012aba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012ac2:	4413      	add	r3, r2
 8012ac4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8012ac8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012acc:	9201      	str	r2, [sp, #4]
 8012ace:	9300      	str	r3, [sp, #0]
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2241      	movs	r2, #65	; 0x41
 8012ad4:	2000      	movs	r0, #0
 8012ad6:	f7f6 fd51 	bl	800957c <pbuf_alloced_custom>
 8012ada:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012ae2:	69b8      	ldr	r0, [r7, #24]
 8012ae4:	f7ff fef6 	bl	80128d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012ae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012aea:	f7f6 ff01 	bl	80098f0 <pbuf_free>
        goto memerr;
 8012aee:	e074      	b.n	8012bda <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8012af0:	68f8      	ldr	r0, [r7, #12]
 8012af2:	f7f6 ff9d 	bl	8009a30 <pbuf_ref>
      pcr->original = p;
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	68fa      	ldr	r2, [r7, #12]
 8012afa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	4a3f      	ldr	r2, [pc, #252]	; (8012bfc <ip4_frag+0x288>)
 8012b00:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012b02:	6979      	ldr	r1, [r7, #20]
 8012b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b06:	f7f6 ffb5 	bl	8009a74 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012b0a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012b0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b12:	1ad3      	subs	r3, r2, r3
 8012b14:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8012b18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d004      	beq.n	8012b2a <ip4_frag+0x1b6>
        poff = 0;
 8012b20:	2300      	movs	r3, #0
 8012b22:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012b2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d196      	bne.n	8012a60 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012b32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012b38:	4413      	add	r3, r2
 8012b3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b40:	f1a3 0213 	sub.w	r2, r3, #19
 8012b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	bfcc      	ite	gt
 8012b4c:	2301      	movgt	r3, #1
 8012b4e:	2300      	movle	r3, #0
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012b5c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012b5e:	6a3b      	ldr	r3, [r7, #32]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d002      	beq.n	8012b6a <ip4_frag+0x1f6>
 8012b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d003      	beq.n	8012b72 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012b6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012b72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7f5 fb75 	bl	8008264 <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	461a      	mov	r2, r3
 8012b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b80:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012b82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012b84:	3314      	adds	r3, #20
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f5 fb6b 	bl	8008264 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	461a      	mov	r2, r3
 8012b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b94:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b98:	2200      	movs	r2, #0
 8012b9a:	729a      	strb	r2, [r3, #10]
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	695b      	ldr	r3, [r3, #20]
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ba8:	68b8      	ldr	r0, [r7, #8]
 8012baa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012bac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bae:	f7f6 fe9f 	bl	80098f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012bb2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012bb8:	1ad3      	subs	r3, r2, r3
 8012bba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012bbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012bc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8012bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f47f af19 	bne.w	8012a06 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e002      	b.n	8012bde <ip4_frag+0x26a>
      goto memerr;
 8012bd8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3748      	adds	r7, #72	; 0x48
 8012be2:	46bd      	mov	sp, r7
 8012be4:	bd80      	pop	{r7, pc}
 8012be6:	bf00      	nop
 8012be8:	080178a4 	.word	0x080178a4
 8012bec:	08017a80 	.word	0x08017a80
 8012bf0:	080178ec 	.word	0x080178ec
 8012bf4:	08017a9c 	.word	0x08017a9c
 8012bf8:	08017abc 	.word	0x08017abc
 8012bfc:	0801290d 	.word	0x0801290d

08012c00 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b086      	sub	sp, #24
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012c0a:	230e      	movs	r3, #14
 8012c0c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	895b      	ldrh	r3, [r3, #10]
 8012c12:	2b0e      	cmp	r3, #14
 8012c14:	d96e      	bls.n	8012cf4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	7bdb      	ldrb	r3, [r3, #15]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d106      	bne.n	8012c2c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c24:	3301      	adds	r3, #1
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	7b1a      	ldrb	r2, [r3, #12]
 8012c36:	7b5b      	ldrb	r3, [r3, #13]
 8012c38:	021b      	lsls	r3, r3, #8
 8012c3a:	4313      	orrs	r3, r2
 8012c3c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d023      	beq.n	8012c92 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	781b      	ldrb	r3, [r3, #0]
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	d10f      	bne.n	8012c72 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	785b      	ldrb	r3, [r3, #1]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d11b      	bne.n	8012c92 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012c5e:	2b5e      	cmp	r3, #94	; 0x5e
 8012c60:	d117      	bne.n	8012c92 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	7b5b      	ldrb	r3, [r3, #13]
 8012c66:	f043 0310 	orr.w	r3, r3, #16
 8012c6a:	b2da      	uxtb	r2, r3
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	735a      	strb	r2, [r3, #13]
 8012c70:	e00f      	b.n	8012c92 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	2206      	movs	r2, #6
 8012c76:	4928      	ldr	r1, [pc, #160]	; (8012d18 <ethernet_input+0x118>)
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f000 f8bb 	bl	8012df4 <memcmp>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d106      	bne.n	8012c92 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	7b5b      	ldrb	r3, [r3, #13]
 8012c88:	f043 0308 	orr.w	r3, r3, #8
 8012c8c:	b2da      	uxtb	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012c92:	89fb      	ldrh	r3, [r7, #14]
 8012c94:	2b08      	cmp	r3, #8
 8012c96:	d003      	beq.n	8012ca0 <ethernet_input+0xa0>
 8012c98:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012c9c:	d014      	beq.n	8012cc8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012c9e:	e032      	b.n	8012d06 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ca6:	f003 0308 	and.w	r3, r3, #8
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d024      	beq.n	8012cf8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cae:	8afb      	ldrh	r3, [r7, #22]
 8012cb0:	4619      	mov	r1, r3
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f7f6 fd96 	bl	80097e4 <pbuf_remove_header>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d11e      	bne.n	8012cfc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012cbe:	6839      	ldr	r1, [r7, #0]
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7fe ff27 	bl	8011b14 <ip4_input>
      break;
 8012cc6:	e013      	b.n	8012cf0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cce:	f003 0308 	and.w	r3, r3, #8
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d014      	beq.n	8012d00 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012cd6:	8afb      	ldrh	r3, [r7, #22]
 8012cd8:	4619      	mov	r1, r3
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7f6 fd82 	bl	80097e4 <pbuf_remove_header>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d10e      	bne.n	8012d04 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f7fe f8c7 	bl	8010e7c <etharp_input>
      break;
 8012cee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	e00c      	b.n	8012d0e <ethernet_input+0x10e>
    goto free_and_return;
 8012cf4:	bf00      	nop
 8012cf6:	e006      	b.n	8012d06 <ethernet_input+0x106>
        goto free_and_return;
 8012cf8:	bf00      	nop
 8012cfa:	e004      	b.n	8012d06 <ethernet_input+0x106>
        goto free_and_return;
 8012cfc:	bf00      	nop
 8012cfe:	e002      	b.n	8012d06 <ethernet_input+0x106>
        goto free_and_return;
 8012d00:	bf00      	nop
 8012d02:	e000      	b.n	8012d06 <ethernet_input+0x106>
        goto free_and_return;
 8012d04:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f7f6 fdf2 	bl	80098f0 <pbuf_free>
  return ERR_OK;
 8012d0c:	2300      	movs	r3, #0
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3718      	adds	r7, #24
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	0801ab04 	.word	0x0801ab04

08012d1c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	60f8      	str	r0, [r7, #12]
 8012d24:	60b9      	str	r1, [r7, #8]
 8012d26:	607a      	str	r2, [r7, #4]
 8012d28:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012d2a:	8c3b      	ldrh	r3, [r7, #32]
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7f5 fa99 	bl	8008264 <lwip_htons>
 8012d32:	4603      	mov	r3, r0
 8012d34:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012d36:	210e      	movs	r1, #14
 8012d38:	68b8      	ldr	r0, [r7, #8]
 8012d3a:	f7f6 fd43 	bl	80097c4 <pbuf_add_header>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d125      	bne.n	8012d90 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012d44:	68bb      	ldr	r3, [r7, #8]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012d4a:	693b      	ldr	r3, [r7, #16]
 8012d4c:	8afa      	ldrh	r2, [r7, #22]
 8012d4e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012d50:	693b      	ldr	r3, [r7, #16]
 8012d52:	2206      	movs	r2, #6
 8012d54:	6839      	ldr	r1, [r7, #0]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f000 f85a 	bl	8012e10 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	3306      	adds	r3, #6
 8012d60:	2206      	movs	r2, #6
 8012d62:	6879      	ldr	r1, [r7, #4]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f000 f853 	bl	8012e10 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012d70:	2b06      	cmp	r3, #6
 8012d72:	d006      	beq.n	8012d82 <ethernet_output+0x66>
 8012d74:	4b0a      	ldr	r3, [pc, #40]	; (8012da0 <ethernet_output+0x84>)
 8012d76:	f44f 7299 	mov.w	r2, #306	; 0x132
 8012d7a:	490a      	ldr	r1, [pc, #40]	; (8012da4 <ethernet_output+0x88>)
 8012d7c:	480a      	ldr	r0, [pc, #40]	; (8012da8 <ethernet_output+0x8c>)
 8012d7e:	f000 f877 	bl	8012e70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	699b      	ldr	r3, [r3, #24]
 8012d86:	68b9      	ldr	r1, [r7, #8]
 8012d88:	68f8      	ldr	r0, [r7, #12]
 8012d8a:	4798      	blx	r3
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	e002      	b.n	8012d96 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012d90:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012d92:	f06f 0301 	mvn.w	r3, #1
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3718      	adds	r7, #24
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	08017acc 	.word	0x08017acc
 8012da4:	08017b04 	.word	0x08017b04
 8012da8:	08017b38 	.word	0x08017b38

08012dac <__libc_init_array>:
 8012dac:	b570      	push	{r4, r5, r6, lr}
 8012dae:	4d0d      	ldr	r5, [pc, #52]	; (8012de4 <__libc_init_array+0x38>)
 8012db0:	4c0d      	ldr	r4, [pc, #52]	; (8012de8 <__libc_init_array+0x3c>)
 8012db2:	1b64      	subs	r4, r4, r5
 8012db4:	10a4      	asrs	r4, r4, #2
 8012db6:	2600      	movs	r6, #0
 8012db8:	42a6      	cmp	r6, r4
 8012dba:	d109      	bne.n	8012dd0 <__libc_init_array+0x24>
 8012dbc:	4d0b      	ldr	r5, [pc, #44]	; (8012dec <__libc_init_array+0x40>)
 8012dbe:	4c0c      	ldr	r4, [pc, #48]	; (8012df0 <__libc_init_array+0x44>)
 8012dc0:	f001 fa42 	bl	8014248 <_init>
 8012dc4:	1b64      	subs	r4, r4, r5
 8012dc6:	10a4      	asrs	r4, r4, #2
 8012dc8:	2600      	movs	r6, #0
 8012dca:	42a6      	cmp	r6, r4
 8012dcc:	d105      	bne.n	8012dda <__libc_init_array+0x2e>
 8012dce:	bd70      	pop	{r4, r5, r6, pc}
 8012dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dd4:	4798      	blx	r3
 8012dd6:	3601      	adds	r6, #1
 8012dd8:	e7ee      	b.n	8012db8 <__libc_init_array+0xc>
 8012dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8012dde:	4798      	blx	r3
 8012de0:	3601      	adds	r6, #1
 8012de2:	e7f2      	b.n	8012dca <__libc_init_array+0x1e>
 8012de4:	0801ac68 	.word	0x0801ac68
 8012de8:	0801ac68 	.word	0x0801ac68
 8012dec:	0801ac68 	.word	0x0801ac68
 8012df0:	0801ac6c 	.word	0x0801ac6c

08012df4 <memcmp>:
 8012df4:	b530      	push	{r4, r5, lr}
 8012df6:	3901      	subs	r1, #1
 8012df8:	2400      	movs	r4, #0
 8012dfa:	42a2      	cmp	r2, r4
 8012dfc:	d101      	bne.n	8012e02 <memcmp+0xe>
 8012dfe:	2000      	movs	r0, #0
 8012e00:	e005      	b.n	8012e0e <memcmp+0x1a>
 8012e02:	5d03      	ldrb	r3, [r0, r4]
 8012e04:	3401      	adds	r4, #1
 8012e06:	5d0d      	ldrb	r5, [r1, r4]
 8012e08:	42ab      	cmp	r3, r5
 8012e0a:	d0f6      	beq.n	8012dfa <memcmp+0x6>
 8012e0c:	1b58      	subs	r0, r3, r5
 8012e0e:	bd30      	pop	{r4, r5, pc}

08012e10 <memcpy>:
 8012e10:	440a      	add	r2, r1
 8012e12:	4291      	cmp	r1, r2
 8012e14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012e18:	d100      	bne.n	8012e1c <memcpy+0xc>
 8012e1a:	4770      	bx	lr
 8012e1c:	b510      	push	{r4, lr}
 8012e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e26:	4291      	cmp	r1, r2
 8012e28:	d1f9      	bne.n	8012e1e <memcpy+0xe>
 8012e2a:	bd10      	pop	{r4, pc}

08012e2c <memmove>:
 8012e2c:	4288      	cmp	r0, r1
 8012e2e:	b510      	push	{r4, lr}
 8012e30:	eb01 0402 	add.w	r4, r1, r2
 8012e34:	d902      	bls.n	8012e3c <memmove+0x10>
 8012e36:	4284      	cmp	r4, r0
 8012e38:	4623      	mov	r3, r4
 8012e3a:	d807      	bhi.n	8012e4c <memmove+0x20>
 8012e3c:	1e43      	subs	r3, r0, #1
 8012e3e:	42a1      	cmp	r1, r4
 8012e40:	d008      	beq.n	8012e54 <memmove+0x28>
 8012e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012e4a:	e7f8      	b.n	8012e3e <memmove+0x12>
 8012e4c:	4402      	add	r2, r0
 8012e4e:	4601      	mov	r1, r0
 8012e50:	428a      	cmp	r2, r1
 8012e52:	d100      	bne.n	8012e56 <memmove+0x2a>
 8012e54:	bd10      	pop	{r4, pc}
 8012e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012e5e:	e7f7      	b.n	8012e50 <memmove+0x24>

08012e60 <memset>:
 8012e60:	4402      	add	r2, r0
 8012e62:	4603      	mov	r3, r0
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d100      	bne.n	8012e6a <memset+0xa>
 8012e68:	4770      	bx	lr
 8012e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8012e6e:	e7f9      	b.n	8012e64 <memset+0x4>

08012e70 <iprintf>:
 8012e70:	b40f      	push	{r0, r1, r2, r3}
 8012e72:	4b0a      	ldr	r3, [pc, #40]	; (8012e9c <iprintf+0x2c>)
 8012e74:	b513      	push	{r0, r1, r4, lr}
 8012e76:	681c      	ldr	r4, [r3, #0]
 8012e78:	b124      	cbz	r4, 8012e84 <iprintf+0x14>
 8012e7a:	69a3      	ldr	r3, [r4, #24]
 8012e7c:	b913      	cbnz	r3, 8012e84 <iprintf+0x14>
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 f90c 	bl	801309c <__sinit>
 8012e84:	ab05      	add	r3, sp, #20
 8012e86:	9a04      	ldr	r2, [sp, #16]
 8012e88:	68a1      	ldr	r1, [r4, #8]
 8012e8a:	9301      	str	r3, [sp, #4]
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f000 fbef 	bl	8013670 <_vfiprintf_r>
 8012e92:	b002      	add	sp, #8
 8012e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e98:	b004      	add	sp, #16
 8012e9a:	4770      	bx	lr
 8012e9c:	20000030 	.word	0x20000030

08012ea0 <rand>:
 8012ea0:	4b17      	ldr	r3, [pc, #92]	; (8012f00 <rand+0x60>)
 8012ea2:	b510      	push	{r4, lr}
 8012ea4:	681c      	ldr	r4, [r3, #0]
 8012ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012ea8:	b9b3      	cbnz	r3, 8012ed8 <rand+0x38>
 8012eaa:	2018      	movs	r0, #24
 8012eac:	f000 f9a8 	bl	8013200 <malloc>
 8012eb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8012eb2:	b928      	cbnz	r0, 8012ec0 <rand+0x20>
 8012eb4:	4602      	mov	r2, r0
 8012eb6:	4b13      	ldr	r3, [pc, #76]	; (8012f04 <rand+0x64>)
 8012eb8:	4813      	ldr	r0, [pc, #76]	; (8012f08 <rand+0x68>)
 8012eba:	214e      	movs	r1, #78	; 0x4e
 8012ebc:	f000 f878 	bl	8012fb0 <__assert_func>
 8012ec0:	4a12      	ldr	r2, [pc, #72]	; (8012f0c <rand+0x6c>)
 8012ec2:	4b13      	ldr	r3, [pc, #76]	; (8012f10 <rand+0x70>)
 8012ec4:	e9c0 2300 	strd	r2, r3, [r0]
 8012ec8:	4b12      	ldr	r3, [pc, #72]	; (8012f14 <rand+0x74>)
 8012eca:	6083      	str	r3, [r0, #8]
 8012ecc:	230b      	movs	r3, #11
 8012ece:	8183      	strh	r3, [r0, #12]
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012ed8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012eda:	480f      	ldr	r0, [pc, #60]	; (8012f18 <rand+0x78>)
 8012edc:	690a      	ldr	r2, [r1, #16]
 8012ede:	694b      	ldr	r3, [r1, #20]
 8012ee0:	4c0e      	ldr	r4, [pc, #56]	; (8012f1c <rand+0x7c>)
 8012ee2:	4350      	muls	r0, r2
 8012ee4:	fb04 0003 	mla	r0, r4, r3, r0
 8012ee8:	fba2 3404 	umull	r3, r4, r2, r4
 8012eec:	1c5a      	adds	r2, r3, #1
 8012eee:	4404      	add	r4, r0
 8012ef0:	f144 0000 	adc.w	r0, r4, #0
 8012ef4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012ef8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012efc:	bd10      	pop	{r4, pc}
 8012efe:	bf00      	nop
 8012f00:	20000030 	.word	0x20000030
 8012f04:	0801ab18 	.word	0x0801ab18
 8012f08:	0801ab2f 	.word	0x0801ab2f
 8012f0c:	abcd330e 	.word	0xabcd330e
 8012f10:	e66d1234 	.word	0xe66d1234
 8012f14:	0005deec 	.word	0x0005deec
 8012f18:	5851f42d 	.word	0x5851f42d
 8012f1c:	4c957f2d 	.word	0x4c957f2d

08012f20 <siprintf>:
 8012f20:	b40e      	push	{r1, r2, r3}
 8012f22:	b500      	push	{lr}
 8012f24:	b09c      	sub	sp, #112	; 0x70
 8012f26:	ab1d      	add	r3, sp, #116	; 0x74
 8012f28:	9002      	str	r0, [sp, #8]
 8012f2a:	9006      	str	r0, [sp, #24]
 8012f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012f30:	4809      	ldr	r0, [pc, #36]	; (8012f58 <siprintf+0x38>)
 8012f32:	9107      	str	r1, [sp, #28]
 8012f34:	9104      	str	r1, [sp, #16]
 8012f36:	4909      	ldr	r1, [pc, #36]	; (8012f5c <siprintf+0x3c>)
 8012f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f3c:	9105      	str	r1, [sp, #20]
 8012f3e:	6800      	ldr	r0, [r0, #0]
 8012f40:	9301      	str	r3, [sp, #4]
 8012f42:	a902      	add	r1, sp, #8
 8012f44:	f000 fa6a 	bl	801341c <_svfiprintf_r>
 8012f48:	9b02      	ldr	r3, [sp, #8]
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	701a      	strb	r2, [r3, #0]
 8012f4e:	b01c      	add	sp, #112	; 0x70
 8012f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f54:	b003      	add	sp, #12
 8012f56:	4770      	bx	lr
 8012f58:	20000030 	.word	0x20000030
 8012f5c:	ffff0208 	.word	0xffff0208

08012f60 <strchr>:
 8012f60:	b2c9      	uxtb	r1, r1
 8012f62:	4603      	mov	r3, r0
 8012f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f68:	b11a      	cbz	r2, 8012f72 <strchr+0x12>
 8012f6a:	428a      	cmp	r2, r1
 8012f6c:	d1f9      	bne.n	8012f62 <strchr+0x2>
 8012f6e:	4618      	mov	r0, r3
 8012f70:	4770      	bx	lr
 8012f72:	2900      	cmp	r1, #0
 8012f74:	bf18      	it	ne
 8012f76:	2300      	movne	r3, #0
 8012f78:	e7f9      	b.n	8012f6e <strchr+0xe>

08012f7a <strcpy>:
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012f80:	f803 2b01 	strb.w	r2, [r3], #1
 8012f84:	2a00      	cmp	r2, #0
 8012f86:	d1f9      	bne.n	8012f7c <strcpy+0x2>
 8012f88:	4770      	bx	lr

08012f8a <strncmp>:
 8012f8a:	b510      	push	{r4, lr}
 8012f8c:	b16a      	cbz	r2, 8012faa <strncmp+0x20>
 8012f8e:	3901      	subs	r1, #1
 8012f90:	1884      	adds	r4, r0, r2
 8012f92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012f96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d103      	bne.n	8012fa6 <strncmp+0x1c>
 8012f9e:	42a0      	cmp	r0, r4
 8012fa0:	d001      	beq.n	8012fa6 <strncmp+0x1c>
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d1f5      	bne.n	8012f92 <strncmp+0x8>
 8012fa6:	1a98      	subs	r0, r3, r2
 8012fa8:	bd10      	pop	{r4, pc}
 8012faa:	4610      	mov	r0, r2
 8012fac:	e7fc      	b.n	8012fa8 <strncmp+0x1e>
	...

08012fb0 <__assert_func>:
 8012fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012fb2:	4614      	mov	r4, r2
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	4b09      	ldr	r3, [pc, #36]	; (8012fdc <__assert_func+0x2c>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	4605      	mov	r5, r0
 8012fbc:	68d8      	ldr	r0, [r3, #12]
 8012fbe:	b14c      	cbz	r4, 8012fd4 <__assert_func+0x24>
 8012fc0:	4b07      	ldr	r3, [pc, #28]	; (8012fe0 <__assert_func+0x30>)
 8012fc2:	9100      	str	r1, [sp, #0]
 8012fc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fc8:	4906      	ldr	r1, [pc, #24]	; (8012fe4 <__assert_func+0x34>)
 8012fca:	462b      	mov	r3, r5
 8012fcc:	f000 f8e4 	bl	8013198 <fiprintf>
 8012fd0:	f000 ff38 	bl	8013e44 <abort>
 8012fd4:	4b04      	ldr	r3, [pc, #16]	; (8012fe8 <__assert_func+0x38>)
 8012fd6:	461c      	mov	r4, r3
 8012fd8:	e7f3      	b.n	8012fc2 <__assert_func+0x12>
 8012fda:	bf00      	nop
 8012fdc:	20000030 	.word	0x20000030
 8012fe0:	0801ab8e 	.word	0x0801ab8e
 8012fe4:	0801ab9b 	.word	0x0801ab9b
 8012fe8:	0801abc9 	.word	0x0801abc9

08012fec <std>:
 8012fec:	2300      	movs	r3, #0
 8012fee:	b510      	push	{r4, lr}
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8012ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ffa:	6083      	str	r3, [r0, #8]
 8012ffc:	8181      	strh	r1, [r0, #12]
 8012ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8013000:	81c2      	strh	r2, [r0, #14]
 8013002:	6183      	str	r3, [r0, #24]
 8013004:	4619      	mov	r1, r3
 8013006:	2208      	movs	r2, #8
 8013008:	305c      	adds	r0, #92	; 0x5c
 801300a:	f7ff ff29 	bl	8012e60 <memset>
 801300e:	4b05      	ldr	r3, [pc, #20]	; (8013024 <std+0x38>)
 8013010:	6263      	str	r3, [r4, #36]	; 0x24
 8013012:	4b05      	ldr	r3, [pc, #20]	; (8013028 <std+0x3c>)
 8013014:	62a3      	str	r3, [r4, #40]	; 0x28
 8013016:	4b05      	ldr	r3, [pc, #20]	; (801302c <std+0x40>)
 8013018:	62e3      	str	r3, [r4, #44]	; 0x2c
 801301a:	4b05      	ldr	r3, [pc, #20]	; (8013030 <std+0x44>)
 801301c:	6224      	str	r4, [r4, #32]
 801301e:	6323      	str	r3, [r4, #48]	; 0x30
 8013020:	bd10      	pop	{r4, pc}
 8013022:	bf00      	nop
 8013024:	08013c19 	.word	0x08013c19
 8013028:	08013c3b 	.word	0x08013c3b
 801302c:	08013c73 	.word	0x08013c73
 8013030:	08013c97 	.word	0x08013c97

08013034 <_cleanup_r>:
 8013034:	4901      	ldr	r1, [pc, #4]	; (801303c <_cleanup_r+0x8>)
 8013036:	f000 b8c1 	b.w	80131bc <_fwalk_reent>
 801303a:	bf00      	nop
 801303c:	08013f81 	.word	0x08013f81

08013040 <__sfmoreglue>:
 8013040:	b570      	push	{r4, r5, r6, lr}
 8013042:	1e4a      	subs	r2, r1, #1
 8013044:	2568      	movs	r5, #104	; 0x68
 8013046:	4355      	muls	r5, r2
 8013048:	460e      	mov	r6, r1
 801304a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801304e:	f000 f92f 	bl	80132b0 <_malloc_r>
 8013052:	4604      	mov	r4, r0
 8013054:	b140      	cbz	r0, 8013068 <__sfmoreglue+0x28>
 8013056:	2100      	movs	r1, #0
 8013058:	e9c0 1600 	strd	r1, r6, [r0]
 801305c:	300c      	adds	r0, #12
 801305e:	60a0      	str	r0, [r4, #8]
 8013060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013064:	f7ff fefc 	bl	8012e60 <memset>
 8013068:	4620      	mov	r0, r4
 801306a:	bd70      	pop	{r4, r5, r6, pc}

0801306c <__sfp_lock_acquire>:
 801306c:	4801      	ldr	r0, [pc, #4]	; (8013074 <__sfp_lock_acquire+0x8>)
 801306e:	f000 b8c5 	b.w	80131fc <__retarget_lock_acquire_recursive>
 8013072:	bf00      	nop
 8013074:	200075e4 	.word	0x200075e4

08013078 <__sfp_lock_release>:
 8013078:	4801      	ldr	r0, [pc, #4]	; (8013080 <__sfp_lock_release+0x8>)
 801307a:	f000 b8c0 	b.w	80131fe <__retarget_lock_release_recursive>
 801307e:	bf00      	nop
 8013080:	200075e4 	.word	0x200075e4

08013084 <__sinit_lock_acquire>:
 8013084:	4801      	ldr	r0, [pc, #4]	; (801308c <__sinit_lock_acquire+0x8>)
 8013086:	f000 b8b9 	b.w	80131fc <__retarget_lock_acquire_recursive>
 801308a:	bf00      	nop
 801308c:	200075df 	.word	0x200075df

08013090 <__sinit_lock_release>:
 8013090:	4801      	ldr	r0, [pc, #4]	; (8013098 <__sinit_lock_release+0x8>)
 8013092:	f000 b8b4 	b.w	80131fe <__retarget_lock_release_recursive>
 8013096:	bf00      	nop
 8013098:	200075df 	.word	0x200075df

0801309c <__sinit>:
 801309c:	b510      	push	{r4, lr}
 801309e:	4604      	mov	r4, r0
 80130a0:	f7ff fff0 	bl	8013084 <__sinit_lock_acquire>
 80130a4:	69a3      	ldr	r3, [r4, #24]
 80130a6:	b11b      	cbz	r3, 80130b0 <__sinit+0x14>
 80130a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130ac:	f7ff bff0 	b.w	8013090 <__sinit_lock_release>
 80130b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80130b4:	6523      	str	r3, [r4, #80]	; 0x50
 80130b6:	4b13      	ldr	r3, [pc, #76]	; (8013104 <__sinit+0x68>)
 80130b8:	4a13      	ldr	r2, [pc, #76]	; (8013108 <__sinit+0x6c>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80130be:	42a3      	cmp	r3, r4
 80130c0:	bf04      	itt	eq
 80130c2:	2301      	moveq	r3, #1
 80130c4:	61a3      	streq	r3, [r4, #24]
 80130c6:	4620      	mov	r0, r4
 80130c8:	f000 f820 	bl	801310c <__sfp>
 80130cc:	6060      	str	r0, [r4, #4]
 80130ce:	4620      	mov	r0, r4
 80130d0:	f000 f81c 	bl	801310c <__sfp>
 80130d4:	60a0      	str	r0, [r4, #8]
 80130d6:	4620      	mov	r0, r4
 80130d8:	f000 f818 	bl	801310c <__sfp>
 80130dc:	2200      	movs	r2, #0
 80130de:	60e0      	str	r0, [r4, #12]
 80130e0:	2104      	movs	r1, #4
 80130e2:	6860      	ldr	r0, [r4, #4]
 80130e4:	f7ff ff82 	bl	8012fec <std>
 80130e8:	68a0      	ldr	r0, [r4, #8]
 80130ea:	2201      	movs	r2, #1
 80130ec:	2109      	movs	r1, #9
 80130ee:	f7ff ff7d 	bl	8012fec <std>
 80130f2:	68e0      	ldr	r0, [r4, #12]
 80130f4:	2202      	movs	r2, #2
 80130f6:	2112      	movs	r1, #18
 80130f8:	f7ff ff78 	bl	8012fec <std>
 80130fc:	2301      	movs	r3, #1
 80130fe:	61a3      	str	r3, [r4, #24]
 8013100:	e7d2      	b.n	80130a8 <__sinit+0xc>
 8013102:	bf00      	nop
 8013104:	0801ab14 	.word	0x0801ab14
 8013108:	08013035 	.word	0x08013035

0801310c <__sfp>:
 801310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801310e:	4607      	mov	r7, r0
 8013110:	f7ff ffac 	bl	801306c <__sfp_lock_acquire>
 8013114:	4b1e      	ldr	r3, [pc, #120]	; (8013190 <__sfp+0x84>)
 8013116:	681e      	ldr	r6, [r3, #0]
 8013118:	69b3      	ldr	r3, [r6, #24]
 801311a:	b913      	cbnz	r3, 8013122 <__sfp+0x16>
 801311c:	4630      	mov	r0, r6
 801311e:	f7ff ffbd 	bl	801309c <__sinit>
 8013122:	3648      	adds	r6, #72	; 0x48
 8013124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013128:	3b01      	subs	r3, #1
 801312a:	d503      	bpl.n	8013134 <__sfp+0x28>
 801312c:	6833      	ldr	r3, [r6, #0]
 801312e:	b30b      	cbz	r3, 8013174 <__sfp+0x68>
 8013130:	6836      	ldr	r6, [r6, #0]
 8013132:	e7f7      	b.n	8013124 <__sfp+0x18>
 8013134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013138:	b9d5      	cbnz	r5, 8013170 <__sfp+0x64>
 801313a:	4b16      	ldr	r3, [pc, #88]	; (8013194 <__sfp+0x88>)
 801313c:	60e3      	str	r3, [r4, #12]
 801313e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013142:	6665      	str	r5, [r4, #100]	; 0x64
 8013144:	f000 f859 	bl	80131fa <__retarget_lock_init_recursive>
 8013148:	f7ff ff96 	bl	8013078 <__sfp_lock_release>
 801314c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013150:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013154:	6025      	str	r5, [r4, #0]
 8013156:	61a5      	str	r5, [r4, #24]
 8013158:	2208      	movs	r2, #8
 801315a:	4629      	mov	r1, r5
 801315c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013160:	f7ff fe7e 	bl	8012e60 <memset>
 8013164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801316c:	4620      	mov	r0, r4
 801316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013170:	3468      	adds	r4, #104	; 0x68
 8013172:	e7d9      	b.n	8013128 <__sfp+0x1c>
 8013174:	2104      	movs	r1, #4
 8013176:	4638      	mov	r0, r7
 8013178:	f7ff ff62 	bl	8013040 <__sfmoreglue>
 801317c:	4604      	mov	r4, r0
 801317e:	6030      	str	r0, [r6, #0]
 8013180:	2800      	cmp	r0, #0
 8013182:	d1d5      	bne.n	8013130 <__sfp+0x24>
 8013184:	f7ff ff78 	bl	8013078 <__sfp_lock_release>
 8013188:	230c      	movs	r3, #12
 801318a:	603b      	str	r3, [r7, #0]
 801318c:	e7ee      	b.n	801316c <__sfp+0x60>
 801318e:	bf00      	nop
 8013190:	0801ab14 	.word	0x0801ab14
 8013194:	ffff0001 	.word	0xffff0001

08013198 <fiprintf>:
 8013198:	b40e      	push	{r1, r2, r3}
 801319a:	b503      	push	{r0, r1, lr}
 801319c:	4601      	mov	r1, r0
 801319e:	ab03      	add	r3, sp, #12
 80131a0:	4805      	ldr	r0, [pc, #20]	; (80131b8 <fiprintf+0x20>)
 80131a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131a6:	6800      	ldr	r0, [r0, #0]
 80131a8:	9301      	str	r3, [sp, #4]
 80131aa:	f000 fa61 	bl	8013670 <_vfiprintf_r>
 80131ae:	b002      	add	sp, #8
 80131b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131b4:	b003      	add	sp, #12
 80131b6:	4770      	bx	lr
 80131b8:	20000030 	.word	0x20000030

080131bc <_fwalk_reent>:
 80131bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131c0:	4606      	mov	r6, r0
 80131c2:	4688      	mov	r8, r1
 80131c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131c8:	2700      	movs	r7, #0
 80131ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80131ce:	f1b9 0901 	subs.w	r9, r9, #1
 80131d2:	d505      	bpl.n	80131e0 <_fwalk_reent+0x24>
 80131d4:	6824      	ldr	r4, [r4, #0]
 80131d6:	2c00      	cmp	r4, #0
 80131d8:	d1f7      	bne.n	80131ca <_fwalk_reent+0xe>
 80131da:	4638      	mov	r0, r7
 80131dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131e0:	89ab      	ldrh	r3, [r5, #12]
 80131e2:	2b01      	cmp	r3, #1
 80131e4:	d907      	bls.n	80131f6 <_fwalk_reent+0x3a>
 80131e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131ea:	3301      	adds	r3, #1
 80131ec:	d003      	beq.n	80131f6 <_fwalk_reent+0x3a>
 80131ee:	4629      	mov	r1, r5
 80131f0:	4630      	mov	r0, r6
 80131f2:	47c0      	blx	r8
 80131f4:	4307      	orrs	r7, r0
 80131f6:	3568      	adds	r5, #104	; 0x68
 80131f8:	e7e9      	b.n	80131ce <_fwalk_reent+0x12>

080131fa <__retarget_lock_init_recursive>:
 80131fa:	4770      	bx	lr

080131fc <__retarget_lock_acquire_recursive>:
 80131fc:	4770      	bx	lr

080131fe <__retarget_lock_release_recursive>:
 80131fe:	4770      	bx	lr

08013200 <malloc>:
 8013200:	4b02      	ldr	r3, [pc, #8]	; (801320c <malloc+0xc>)
 8013202:	4601      	mov	r1, r0
 8013204:	6818      	ldr	r0, [r3, #0]
 8013206:	f000 b853 	b.w	80132b0 <_malloc_r>
 801320a:	bf00      	nop
 801320c:	20000030 	.word	0x20000030

08013210 <_free_r>:
 8013210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013212:	2900      	cmp	r1, #0
 8013214:	d048      	beq.n	80132a8 <_free_r+0x98>
 8013216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801321a:	9001      	str	r0, [sp, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	f1a1 0404 	sub.w	r4, r1, #4
 8013222:	bfb8      	it	lt
 8013224:	18e4      	addlt	r4, r4, r3
 8013226:	f000 ff5d 	bl	80140e4 <__malloc_lock>
 801322a:	4a20      	ldr	r2, [pc, #128]	; (80132ac <_free_r+0x9c>)
 801322c:	9801      	ldr	r0, [sp, #4]
 801322e:	6813      	ldr	r3, [r2, #0]
 8013230:	4615      	mov	r5, r2
 8013232:	b933      	cbnz	r3, 8013242 <_free_r+0x32>
 8013234:	6063      	str	r3, [r4, #4]
 8013236:	6014      	str	r4, [r2, #0]
 8013238:	b003      	add	sp, #12
 801323a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801323e:	f000 bf57 	b.w	80140f0 <__malloc_unlock>
 8013242:	42a3      	cmp	r3, r4
 8013244:	d90b      	bls.n	801325e <_free_r+0x4e>
 8013246:	6821      	ldr	r1, [r4, #0]
 8013248:	1862      	adds	r2, r4, r1
 801324a:	4293      	cmp	r3, r2
 801324c:	bf04      	itt	eq
 801324e:	681a      	ldreq	r2, [r3, #0]
 8013250:	685b      	ldreq	r3, [r3, #4]
 8013252:	6063      	str	r3, [r4, #4]
 8013254:	bf04      	itt	eq
 8013256:	1852      	addeq	r2, r2, r1
 8013258:	6022      	streq	r2, [r4, #0]
 801325a:	602c      	str	r4, [r5, #0]
 801325c:	e7ec      	b.n	8013238 <_free_r+0x28>
 801325e:	461a      	mov	r2, r3
 8013260:	685b      	ldr	r3, [r3, #4]
 8013262:	b10b      	cbz	r3, 8013268 <_free_r+0x58>
 8013264:	42a3      	cmp	r3, r4
 8013266:	d9fa      	bls.n	801325e <_free_r+0x4e>
 8013268:	6811      	ldr	r1, [r2, #0]
 801326a:	1855      	adds	r5, r2, r1
 801326c:	42a5      	cmp	r5, r4
 801326e:	d10b      	bne.n	8013288 <_free_r+0x78>
 8013270:	6824      	ldr	r4, [r4, #0]
 8013272:	4421      	add	r1, r4
 8013274:	1854      	adds	r4, r2, r1
 8013276:	42a3      	cmp	r3, r4
 8013278:	6011      	str	r1, [r2, #0]
 801327a:	d1dd      	bne.n	8013238 <_free_r+0x28>
 801327c:	681c      	ldr	r4, [r3, #0]
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	6053      	str	r3, [r2, #4]
 8013282:	4421      	add	r1, r4
 8013284:	6011      	str	r1, [r2, #0]
 8013286:	e7d7      	b.n	8013238 <_free_r+0x28>
 8013288:	d902      	bls.n	8013290 <_free_r+0x80>
 801328a:	230c      	movs	r3, #12
 801328c:	6003      	str	r3, [r0, #0]
 801328e:	e7d3      	b.n	8013238 <_free_r+0x28>
 8013290:	6825      	ldr	r5, [r4, #0]
 8013292:	1961      	adds	r1, r4, r5
 8013294:	428b      	cmp	r3, r1
 8013296:	bf04      	itt	eq
 8013298:	6819      	ldreq	r1, [r3, #0]
 801329a:	685b      	ldreq	r3, [r3, #4]
 801329c:	6063      	str	r3, [r4, #4]
 801329e:	bf04      	itt	eq
 80132a0:	1949      	addeq	r1, r1, r5
 80132a2:	6021      	streq	r1, [r4, #0]
 80132a4:	6054      	str	r4, [r2, #4]
 80132a6:	e7c7      	b.n	8013238 <_free_r+0x28>
 80132a8:	b003      	add	sp, #12
 80132aa:	bd30      	pop	{r4, r5, pc}
 80132ac:	20000688 	.word	0x20000688

080132b0 <_malloc_r>:
 80132b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b2:	1ccd      	adds	r5, r1, #3
 80132b4:	f025 0503 	bic.w	r5, r5, #3
 80132b8:	3508      	adds	r5, #8
 80132ba:	2d0c      	cmp	r5, #12
 80132bc:	bf38      	it	cc
 80132be:	250c      	movcc	r5, #12
 80132c0:	2d00      	cmp	r5, #0
 80132c2:	4606      	mov	r6, r0
 80132c4:	db01      	blt.n	80132ca <_malloc_r+0x1a>
 80132c6:	42a9      	cmp	r1, r5
 80132c8:	d903      	bls.n	80132d2 <_malloc_r+0x22>
 80132ca:	230c      	movs	r3, #12
 80132cc:	6033      	str	r3, [r6, #0]
 80132ce:	2000      	movs	r0, #0
 80132d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132d2:	f000 ff07 	bl	80140e4 <__malloc_lock>
 80132d6:	4921      	ldr	r1, [pc, #132]	; (801335c <_malloc_r+0xac>)
 80132d8:	680a      	ldr	r2, [r1, #0]
 80132da:	4614      	mov	r4, r2
 80132dc:	b99c      	cbnz	r4, 8013306 <_malloc_r+0x56>
 80132de:	4f20      	ldr	r7, [pc, #128]	; (8013360 <_malloc_r+0xb0>)
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	b923      	cbnz	r3, 80132ee <_malloc_r+0x3e>
 80132e4:	4621      	mov	r1, r4
 80132e6:	4630      	mov	r0, r6
 80132e8:	f000 fc86 	bl	8013bf8 <_sbrk_r>
 80132ec:	6038      	str	r0, [r7, #0]
 80132ee:	4629      	mov	r1, r5
 80132f0:	4630      	mov	r0, r6
 80132f2:	f000 fc81 	bl	8013bf8 <_sbrk_r>
 80132f6:	1c43      	adds	r3, r0, #1
 80132f8:	d123      	bne.n	8013342 <_malloc_r+0x92>
 80132fa:	230c      	movs	r3, #12
 80132fc:	6033      	str	r3, [r6, #0]
 80132fe:	4630      	mov	r0, r6
 8013300:	f000 fef6 	bl	80140f0 <__malloc_unlock>
 8013304:	e7e3      	b.n	80132ce <_malloc_r+0x1e>
 8013306:	6823      	ldr	r3, [r4, #0]
 8013308:	1b5b      	subs	r3, r3, r5
 801330a:	d417      	bmi.n	801333c <_malloc_r+0x8c>
 801330c:	2b0b      	cmp	r3, #11
 801330e:	d903      	bls.n	8013318 <_malloc_r+0x68>
 8013310:	6023      	str	r3, [r4, #0]
 8013312:	441c      	add	r4, r3
 8013314:	6025      	str	r5, [r4, #0]
 8013316:	e004      	b.n	8013322 <_malloc_r+0x72>
 8013318:	6863      	ldr	r3, [r4, #4]
 801331a:	42a2      	cmp	r2, r4
 801331c:	bf0c      	ite	eq
 801331e:	600b      	streq	r3, [r1, #0]
 8013320:	6053      	strne	r3, [r2, #4]
 8013322:	4630      	mov	r0, r6
 8013324:	f000 fee4 	bl	80140f0 <__malloc_unlock>
 8013328:	f104 000b 	add.w	r0, r4, #11
 801332c:	1d23      	adds	r3, r4, #4
 801332e:	f020 0007 	bic.w	r0, r0, #7
 8013332:	1ac2      	subs	r2, r0, r3
 8013334:	d0cc      	beq.n	80132d0 <_malloc_r+0x20>
 8013336:	1a1b      	subs	r3, r3, r0
 8013338:	50a3      	str	r3, [r4, r2]
 801333a:	e7c9      	b.n	80132d0 <_malloc_r+0x20>
 801333c:	4622      	mov	r2, r4
 801333e:	6864      	ldr	r4, [r4, #4]
 8013340:	e7cc      	b.n	80132dc <_malloc_r+0x2c>
 8013342:	1cc4      	adds	r4, r0, #3
 8013344:	f024 0403 	bic.w	r4, r4, #3
 8013348:	42a0      	cmp	r0, r4
 801334a:	d0e3      	beq.n	8013314 <_malloc_r+0x64>
 801334c:	1a21      	subs	r1, r4, r0
 801334e:	4630      	mov	r0, r6
 8013350:	f000 fc52 	bl	8013bf8 <_sbrk_r>
 8013354:	3001      	adds	r0, #1
 8013356:	d1dd      	bne.n	8013314 <_malloc_r+0x64>
 8013358:	e7cf      	b.n	80132fa <_malloc_r+0x4a>
 801335a:	bf00      	nop
 801335c:	20000688 	.word	0x20000688
 8013360:	2000068c 	.word	0x2000068c

08013364 <__ssputs_r>:
 8013364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013368:	688e      	ldr	r6, [r1, #8]
 801336a:	429e      	cmp	r6, r3
 801336c:	4682      	mov	sl, r0
 801336e:	460c      	mov	r4, r1
 8013370:	4690      	mov	r8, r2
 8013372:	461f      	mov	r7, r3
 8013374:	d838      	bhi.n	80133e8 <__ssputs_r+0x84>
 8013376:	898a      	ldrh	r2, [r1, #12]
 8013378:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801337c:	d032      	beq.n	80133e4 <__ssputs_r+0x80>
 801337e:	6825      	ldr	r5, [r4, #0]
 8013380:	6909      	ldr	r1, [r1, #16]
 8013382:	eba5 0901 	sub.w	r9, r5, r1
 8013386:	6965      	ldr	r5, [r4, #20]
 8013388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801338c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013390:	3301      	adds	r3, #1
 8013392:	444b      	add	r3, r9
 8013394:	106d      	asrs	r5, r5, #1
 8013396:	429d      	cmp	r5, r3
 8013398:	bf38      	it	cc
 801339a:	461d      	movcc	r5, r3
 801339c:	0553      	lsls	r3, r2, #21
 801339e:	d531      	bpl.n	8013404 <__ssputs_r+0xa0>
 80133a0:	4629      	mov	r1, r5
 80133a2:	f7ff ff85 	bl	80132b0 <_malloc_r>
 80133a6:	4606      	mov	r6, r0
 80133a8:	b950      	cbnz	r0, 80133c0 <__ssputs_r+0x5c>
 80133aa:	230c      	movs	r3, #12
 80133ac:	f8ca 3000 	str.w	r3, [sl]
 80133b0:	89a3      	ldrh	r3, [r4, #12]
 80133b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133b6:	81a3      	strh	r3, [r4, #12]
 80133b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c0:	6921      	ldr	r1, [r4, #16]
 80133c2:	464a      	mov	r2, r9
 80133c4:	f7ff fd24 	bl	8012e10 <memcpy>
 80133c8:	89a3      	ldrh	r3, [r4, #12]
 80133ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80133ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133d2:	81a3      	strh	r3, [r4, #12]
 80133d4:	6126      	str	r6, [r4, #16]
 80133d6:	6165      	str	r5, [r4, #20]
 80133d8:	444e      	add	r6, r9
 80133da:	eba5 0509 	sub.w	r5, r5, r9
 80133de:	6026      	str	r6, [r4, #0]
 80133e0:	60a5      	str	r5, [r4, #8]
 80133e2:	463e      	mov	r6, r7
 80133e4:	42be      	cmp	r6, r7
 80133e6:	d900      	bls.n	80133ea <__ssputs_r+0x86>
 80133e8:	463e      	mov	r6, r7
 80133ea:	4632      	mov	r2, r6
 80133ec:	6820      	ldr	r0, [r4, #0]
 80133ee:	4641      	mov	r1, r8
 80133f0:	f7ff fd1c 	bl	8012e2c <memmove>
 80133f4:	68a3      	ldr	r3, [r4, #8]
 80133f6:	6822      	ldr	r2, [r4, #0]
 80133f8:	1b9b      	subs	r3, r3, r6
 80133fa:	4432      	add	r2, r6
 80133fc:	60a3      	str	r3, [r4, #8]
 80133fe:	6022      	str	r2, [r4, #0]
 8013400:	2000      	movs	r0, #0
 8013402:	e7db      	b.n	80133bc <__ssputs_r+0x58>
 8013404:	462a      	mov	r2, r5
 8013406:	f000 fe79 	bl	80140fc <_realloc_r>
 801340a:	4606      	mov	r6, r0
 801340c:	2800      	cmp	r0, #0
 801340e:	d1e1      	bne.n	80133d4 <__ssputs_r+0x70>
 8013410:	6921      	ldr	r1, [r4, #16]
 8013412:	4650      	mov	r0, sl
 8013414:	f7ff fefc 	bl	8013210 <_free_r>
 8013418:	e7c7      	b.n	80133aa <__ssputs_r+0x46>
	...

0801341c <_svfiprintf_r>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	4698      	mov	r8, r3
 8013422:	898b      	ldrh	r3, [r1, #12]
 8013424:	061b      	lsls	r3, r3, #24
 8013426:	b09d      	sub	sp, #116	; 0x74
 8013428:	4607      	mov	r7, r0
 801342a:	460d      	mov	r5, r1
 801342c:	4614      	mov	r4, r2
 801342e:	d50e      	bpl.n	801344e <_svfiprintf_r+0x32>
 8013430:	690b      	ldr	r3, [r1, #16]
 8013432:	b963      	cbnz	r3, 801344e <_svfiprintf_r+0x32>
 8013434:	2140      	movs	r1, #64	; 0x40
 8013436:	f7ff ff3b 	bl	80132b0 <_malloc_r>
 801343a:	6028      	str	r0, [r5, #0]
 801343c:	6128      	str	r0, [r5, #16]
 801343e:	b920      	cbnz	r0, 801344a <_svfiprintf_r+0x2e>
 8013440:	230c      	movs	r3, #12
 8013442:	603b      	str	r3, [r7, #0]
 8013444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013448:	e0d1      	b.n	80135ee <_svfiprintf_r+0x1d2>
 801344a:	2340      	movs	r3, #64	; 0x40
 801344c:	616b      	str	r3, [r5, #20]
 801344e:	2300      	movs	r3, #0
 8013450:	9309      	str	r3, [sp, #36]	; 0x24
 8013452:	2320      	movs	r3, #32
 8013454:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013458:	f8cd 800c 	str.w	r8, [sp, #12]
 801345c:	2330      	movs	r3, #48	; 0x30
 801345e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013608 <_svfiprintf_r+0x1ec>
 8013462:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013466:	f04f 0901 	mov.w	r9, #1
 801346a:	4623      	mov	r3, r4
 801346c:	469a      	mov	sl, r3
 801346e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013472:	b10a      	cbz	r2, 8013478 <_svfiprintf_r+0x5c>
 8013474:	2a25      	cmp	r2, #37	; 0x25
 8013476:	d1f9      	bne.n	801346c <_svfiprintf_r+0x50>
 8013478:	ebba 0b04 	subs.w	fp, sl, r4
 801347c:	d00b      	beq.n	8013496 <_svfiprintf_r+0x7a>
 801347e:	465b      	mov	r3, fp
 8013480:	4622      	mov	r2, r4
 8013482:	4629      	mov	r1, r5
 8013484:	4638      	mov	r0, r7
 8013486:	f7ff ff6d 	bl	8013364 <__ssputs_r>
 801348a:	3001      	adds	r0, #1
 801348c:	f000 80aa 	beq.w	80135e4 <_svfiprintf_r+0x1c8>
 8013490:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013492:	445a      	add	r2, fp
 8013494:	9209      	str	r2, [sp, #36]	; 0x24
 8013496:	f89a 3000 	ldrb.w	r3, [sl]
 801349a:	2b00      	cmp	r3, #0
 801349c:	f000 80a2 	beq.w	80135e4 <_svfiprintf_r+0x1c8>
 80134a0:	2300      	movs	r3, #0
 80134a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134aa:	f10a 0a01 	add.w	sl, sl, #1
 80134ae:	9304      	str	r3, [sp, #16]
 80134b0:	9307      	str	r3, [sp, #28]
 80134b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134b6:	931a      	str	r3, [sp, #104]	; 0x68
 80134b8:	4654      	mov	r4, sl
 80134ba:	2205      	movs	r2, #5
 80134bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134c0:	4851      	ldr	r0, [pc, #324]	; (8013608 <_svfiprintf_r+0x1ec>)
 80134c2:	f7ec fe9d 	bl	8000200 <memchr>
 80134c6:	9a04      	ldr	r2, [sp, #16]
 80134c8:	b9d8      	cbnz	r0, 8013502 <_svfiprintf_r+0xe6>
 80134ca:	06d0      	lsls	r0, r2, #27
 80134cc:	bf44      	itt	mi
 80134ce:	2320      	movmi	r3, #32
 80134d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134d4:	0711      	lsls	r1, r2, #28
 80134d6:	bf44      	itt	mi
 80134d8:	232b      	movmi	r3, #43	; 0x2b
 80134da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134de:	f89a 3000 	ldrb.w	r3, [sl]
 80134e2:	2b2a      	cmp	r3, #42	; 0x2a
 80134e4:	d015      	beq.n	8013512 <_svfiprintf_r+0xf6>
 80134e6:	9a07      	ldr	r2, [sp, #28]
 80134e8:	4654      	mov	r4, sl
 80134ea:	2000      	movs	r0, #0
 80134ec:	f04f 0c0a 	mov.w	ip, #10
 80134f0:	4621      	mov	r1, r4
 80134f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80134f6:	3b30      	subs	r3, #48	; 0x30
 80134f8:	2b09      	cmp	r3, #9
 80134fa:	d94e      	bls.n	801359a <_svfiprintf_r+0x17e>
 80134fc:	b1b0      	cbz	r0, 801352c <_svfiprintf_r+0x110>
 80134fe:	9207      	str	r2, [sp, #28]
 8013500:	e014      	b.n	801352c <_svfiprintf_r+0x110>
 8013502:	eba0 0308 	sub.w	r3, r0, r8
 8013506:	fa09 f303 	lsl.w	r3, r9, r3
 801350a:	4313      	orrs	r3, r2
 801350c:	9304      	str	r3, [sp, #16]
 801350e:	46a2      	mov	sl, r4
 8013510:	e7d2      	b.n	80134b8 <_svfiprintf_r+0x9c>
 8013512:	9b03      	ldr	r3, [sp, #12]
 8013514:	1d19      	adds	r1, r3, #4
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	9103      	str	r1, [sp, #12]
 801351a:	2b00      	cmp	r3, #0
 801351c:	bfbb      	ittet	lt
 801351e:	425b      	neglt	r3, r3
 8013520:	f042 0202 	orrlt.w	r2, r2, #2
 8013524:	9307      	strge	r3, [sp, #28]
 8013526:	9307      	strlt	r3, [sp, #28]
 8013528:	bfb8      	it	lt
 801352a:	9204      	strlt	r2, [sp, #16]
 801352c:	7823      	ldrb	r3, [r4, #0]
 801352e:	2b2e      	cmp	r3, #46	; 0x2e
 8013530:	d10c      	bne.n	801354c <_svfiprintf_r+0x130>
 8013532:	7863      	ldrb	r3, [r4, #1]
 8013534:	2b2a      	cmp	r3, #42	; 0x2a
 8013536:	d135      	bne.n	80135a4 <_svfiprintf_r+0x188>
 8013538:	9b03      	ldr	r3, [sp, #12]
 801353a:	1d1a      	adds	r2, r3, #4
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	9203      	str	r2, [sp, #12]
 8013540:	2b00      	cmp	r3, #0
 8013542:	bfb8      	it	lt
 8013544:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013548:	3402      	adds	r4, #2
 801354a:	9305      	str	r3, [sp, #20]
 801354c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013618 <_svfiprintf_r+0x1fc>
 8013550:	7821      	ldrb	r1, [r4, #0]
 8013552:	2203      	movs	r2, #3
 8013554:	4650      	mov	r0, sl
 8013556:	f7ec fe53 	bl	8000200 <memchr>
 801355a:	b140      	cbz	r0, 801356e <_svfiprintf_r+0x152>
 801355c:	2340      	movs	r3, #64	; 0x40
 801355e:	eba0 000a 	sub.w	r0, r0, sl
 8013562:	fa03 f000 	lsl.w	r0, r3, r0
 8013566:	9b04      	ldr	r3, [sp, #16]
 8013568:	4303      	orrs	r3, r0
 801356a:	3401      	adds	r4, #1
 801356c:	9304      	str	r3, [sp, #16]
 801356e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013572:	4826      	ldr	r0, [pc, #152]	; (801360c <_svfiprintf_r+0x1f0>)
 8013574:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013578:	2206      	movs	r2, #6
 801357a:	f7ec fe41 	bl	8000200 <memchr>
 801357e:	2800      	cmp	r0, #0
 8013580:	d038      	beq.n	80135f4 <_svfiprintf_r+0x1d8>
 8013582:	4b23      	ldr	r3, [pc, #140]	; (8013610 <_svfiprintf_r+0x1f4>)
 8013584:	bb1b      	cbnz	r3, 80135ce <_svfiprintf_r+0x1b2>
 8013586:	9b03      	ldr	r3, [sp, #12]
 8013588:	3307      	adds	r3, #7
 801358a:	f023 0307 	bic.w	r3, r3, #7
 801358e:	3308      	adds	r3, #8
 8013590:	9303      	str	r3, [sp, #12]
 8013592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013594:	4433      	add	r3, r6
 8013596:	9309      	str	r3, [sp, #36]	; 0x24
 8013598:	e767      	b.n	801346a <_svfiprintf_r+0x4e>
 801359a:	fb0c 3202 	mla	r2, ip, r2, r3
 801359e:	460c      	mov	r4, r1
 80135a0:	2001      	movs	r0, #1
 80135a2:	e7a5      	b.n	80134f0 <_svfiprintf_r+0xd4>
 80135a4:	2300      	movs	r3, #0
 80135a6:	3401      	adds	r4, #1
 80135a8:	9305      	str	r3, [sp, #20]
 80135aa:	4619      	mov	r1, r3
 80135ac:	f04f 0c0a 	mov.w	ip, #10
 80135b0:	4620      	mov	r0, r4
 80135b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135b6:	3a30      	subs	r2, #48	; 0x30
 80135b8:	2a09      	cmp	r2, #9
 80135ba:	d903      	bls.n	80135c4 <_svfiprintf_r+0x1a8>
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d0c5      	beq.n	801354c <_svfiprintf_r+0x130>
 80135c0:	9105      	str	r1, [sp, #20]
 80135c2:	e7c3      	b.n	801354c <_svfiprintf_r+0x130>
 80135c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80135c8:	4604      	mov	r4, r0
 80135ca:	2301      	movs	r3, #1
 80135cc:	e7f0      	b.n	80135b0 <_svfiprintf_r+0x194>
 80135ce:	ab03      	add	r3, sp, #12
 80135d0:	9300      	str	r3, [sp, #0]
 80135d2:	462a      	mov	r2, r5
 80135d4:	4b0f      	ldr	r3, [pc, #60]	; (8013614 <_svfiprintf_r+0x1f8>)
 80135d6:	a904      	add	r1, sp, #16
 80135d8:	4638      	mov	r0, r7
 80135da:	f3af 8000 	nop.w
 80135de:	1c42      	adds	r2, r0, #1
 80135e0:	4606      	mov	r6, r0
 80135e2:	d1d6      	bne.n	8013592 <_svfiprintf_r+0x176>
 80135e4:	89ab      	ldrh	r3, [r5, #12]
 80135e6:	065b      	lsls	r3, r3, #25
 80135e8:	f53f af2c 	bmi.w	8013444 <_svfiprintf_r+0x28>
 80135ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80135ee:	b01d      	add	sp, #116	; 0x74
 80135f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135f4:	ab03      	add	r3, sp, #12
 80135f6:	9300      	str	r3, [sp, #0]
 80135f8:	462a      	mov	r2, r5
 80135fa:	4b06      	ldr	r3, [pc, #24]	; (8013614 <_svfiprintf_r+0x1f8>)
 80135fc:	a904      	add	r1, sp, #16
 80135fe:	4638      	mov	r0, r7
 8013600:	f000 f9d4 	bl	80139ac <_printf_i>
 8013604:	e7eb      	b.n	80135de <_svfiprintf_r+0x1c2>
 8013606:	bf00      	nop
 8013608:	0801ac2c 	.word	0x0801ac2c
 801360c:	0801ac36 	.word	0x0801ac36
 8013610:	00000000 	.word	0x00000000
 8013614:	08013365 	.word	0x08013365
 8013618:	0801ac32 	.word	0x0801ac32

0801361c <__sfputc_r>:
 801361c:	6893      	ldr	r3, [r2, #8]
 801361e:	3b01      	subs	r3, #1
 8013620:	2b00      	cmp	r3, #0
 8013622:	b410      	push	{r4}
 8013624:	6093      	str	r3, [r2, #8]
 8013626:	da08      	bge.n	801363a <__sfputc_r+0x1e>
 8013628:	6994      	ldr	r4, [r2, #24]
 801362a:	42a3      	cmp	r3, r4
 801362c:	db01      	blt.n	8013632 <__sfputc_r+0x16>
 801362e:	290a      	cmp	r1, #10
 8013630:	d103      	bne.n	801363a <__sfputc_r+0x1e>
 8013632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013636:	f000 bb33 	b.w	8013ca0 <__swbuf_r>
 801363a:	6813      	ldr	r3, [r2, #0]
 801363c:	1c58      	adds	r0, r3, #1
 801363e:	6010      	str	r0, [r2, #0]
 8013640:	7019      	strb	r1, [r3, #0]
 8013642:	4608      	mov	r0, r1
 8013644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013648:	4770      	bx	lr

0801364a <__sfputs_r>:
 801364a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801364c:	4606      	mov	r6, r0
 801364e:	460f      	mov	r7, r1
 8013650:	4614      	mov	r4, r2
 8013652:	18d5      	adds	r5, r2, r3
 8013654:	42ac      	cmp	r4, r5
 8013656:	d101      	bne.n	801365c <__sfputs_r+0x12>
 8013658:	2000      	movs	r0, #0
 801365a:	e007      	b.n	801366c <__sfputs_r+0x22>
 801365c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013660:	463a      	mov	r2, r7
 8013662:	4630      	mov	r0, r6
 8013664:	f7ff ffda 	bl	801361c <__sfputc_r>
 8013668:	1c43      	adds	r3, r0, #1
 801366a:	d1f3      	bne.n	8013654 <__sfputs_r+0xa>
 801366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013670 <_vfiprintf_r>:
 8013670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013674:	460d      	mov	r5, r1
 8013676:	b09d      	sub	sp, #116	; 0x74
 8013678:	4614      	mov	r4, r2
 801367a:	4698      	mov	r8, r3
 801367c:	4606      	mov	r6, r0
 801367e:	b118      	cbz	r0, 8013688 <_vfiprintf_r+0x18>
 8013680:	6983      	ldr	r3, [r0, #24]
 8013682:	b90b      	cbnz	r3, 8013688 <_vfiprintf_r+0x18>
 8013684:	f7ff fd0a 	bl	801309c <__sinit>
 8013688:	4b89      	ldr	r3, [pc, #548]	; (80138b0 <_vfiprintf_r+0x240>)
 801368a:	429d      	cmp	r5, r3
 801368c:	d11b      	bne.n	80136c6 <_vfiprintf_r+0x56>
 801368e:	6875      	ldr	r5, [r6, #4]
 8013690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013692:	07d9      	lsls	r1, r3, #31
 8013694:	d405      	bmi.n	80136a2 <_vfiprintf_r+0x32>
 8013696:	89ab      	ldrh	r3, [r5, #12]
 8013698:	059a      	lsls	r2, r3, #22
 801369a:	d402      	bmi.n	80136a2 <_vfiprintf_r+0x32>
 801369c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801369e:	f7ff fdad 	bl	80131fc <__retarget_lock_acquire_recursive>
 80136a2:	89ab      	ldrh	r3, [r5, #12]
 80136a4:	071b      	lsls	r3, r3, #28
 80136a6:	d501      	bpl.n	80136ac <_vfiprintf_r+0x3c>
 80136a8:	692b      	ldr	r3, [r5, #16]
 80136aa:	b9eb      	cbnz	r3, 80136e8 <_vfiprintf_r+0x78>
 80136ac:	4629      	mov	r1, r5
 80136ae:	4630      	mov	r0, r6
 80136b0:	f000 fb5a 	bl	8013d68 <__swsetup_r>
 80136b4:	b1c0      	cbz	r0, 80136e8 <_vfiprintf_r+0x78>
 80136b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136b8:	07dc      	lsls	r4, r3, #31
 80136ba:	d50e      	bpl.n	80136da <_vfiprintf_r+0x6a>
 80136bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80136c0:	b01d      	add	sp, #116	; 0x74
 80136c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136c6:	4b7b      	ldr	r3, [pc, #492]	; (80138b4 <_vfiprintf_r+0x244>)
 80136c8:	429d      	cmp	r5, r3
 80136ca:	d101      	bne.n	80136d0 <_vfiprintf_r+0x60>
 80136cc:	68b5      	ldr	r5, [r6, #8]
 80136ce:	e7df      	b.n	8013690 <_vfiprintf_r+0x20>
 80136d0:	4b79      	ldr	r3, [pc, #484]	; (80138b8 <_vfiprintf_r+0x248>)
 80136d2:	429d      	cmp	r5, r3
 80136d4:	bf08      	it	eq
 80136d6:	68f5      	ldreq	r5, [r6, #12]
 80136d8:	e7da      	b.n	8013690 <_vfiprintf_r+0x20>
 80136da:	89ab      	ldrh	r3, [r5, #12]
 80136dc:	0598      	lsls	r0, r3, #22
 80136de:	d4ed      	bmi.n	80136bc <_vfiprintf_r+0x4c>
 80136e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136e2:	f7ff fd8c 	bl	80131fe <__retarget_lock_release_recursive>
 80136e6:	e7e9      	b.n	80136bc <_vfiprintf_r+0x4c>
 80136e8:	2300      	movs	r3, #0
 80136ea:	9309      	str	r3, [sp, #36]	; 0x24
 80136ec:	2320      	movs	r3, #32
 80136ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80136f6:	2330      	movs	r3, #48	; 0x30
 80136f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80138bc <_vfiprintf_r+0x24c>
 80136fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013700:	f04f 0901 	mov.w	r9, #1
 8013704:	4623      	mov	r3, r4
 8013706:	469a      	mov	sl, r3
 8013708:	f813 2b01 	ldrb.w	r2, [r3], #1
 801370c:	b10a      	cbz	r2, 8013712 <_vfiprintf_r+0xa2>
 801370e:	2a25      	cmp	r2, #37	; 0x25
 8013710:	d1f9      	bne.n	8013706 <_vfiprintf_r+0x96>
 8013712:	ebba 0b04 	subs.w	fp, sl, r4
 8013716:	d00b      	beq.n	8013730 <_vfiprintf_r+0xc0>
 8013718:	465b      	mov	r3, fp
 801371a:	4622      	mov	r2, r4
 801371c:	4629      	mov	r1, r5
 801371e:	4630      	mov	r0, r6
 8013720:	f7ff ff93 	bl	801364a <__sfputs_r>
 8013724:	3001      	adds	r0, #1
 8013726:	f000 80aa 	beq.w	801387e <_vfiprintf_r+0x20e>
 801372a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801372c:	445a      	add	r2, fp
 801372e:	9209      	str	r2, [sp, #36]	; 0x24
 8013730:	f89a 3000 	ldrb.w	r3, [sl]
 8013734:	2b00      	cmp	r3, #0
 8013736:	f000 80a2 	beq.w	801387e <_vfiprintf_r+0x20e>
 801373a:	2300      	movs	r3, #0
 801373c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013744:	f10a 0a01 	add.w	sl, sl, #1
 8013748:	9304      	str	r3, [sp, #16]
 801374a:	9307      	str	r3, [sp, #28]
 801374c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013750:	931a      	str	r3, [sp, #104]	; 0x68
 8013752:	4654      	mov	r4, sl
 8013754:	2205      	movs	r2, #5
 8013756:	f814 1b01 	ldrb.w	r1, [r4], #1
 801375a:	4858      	ldr	r0, [pc, #352]	; (80138bc <_vfiprintf_r+0x24c>)
 801375c:	f7ec fd50 	bl	8000200 <memchr>
 8013760:	9a04      	ldr	r2, [sp, #16]
 8013762:	b9d8      	cbnz	r0, 801379c <_vfiprintf_r+0x12c>
 8013764:	06d1      	lsls	r1, r2, #27
 8013766:	bf44      	itt	mi
 8013768:	2320      	movmi	r3, #32
 801376a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801376e:	0713      	lsls	r3, r2, #28
 8013770:	bf44      	itt	mi
 8013772:	232b      	movmi	r3, #43	; 0x2b
 8013774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013778:	f89a 3000 	ldrb.w	r3, [sl]
 801377c:	2b2a      	cmp	r3, #42	; 0x2a
 801377e:	d015      	beq.n	80137ac <_vfiprintf_r+0x13c>
 8013780:	9a07      	ldr	r2, [sp, #28]
 8013782:	4654      	mov	r4, sl
 8013784:	2000      	movs	r0, #0
 8013786:	f04f 0c0a 	mov.w	ip, #10
 801378a:	4621      	mov	r1, r4
 801378c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013790:	3b30      	subs	r3, #48	; 0x30
 8013792:	2b09      	cmp	r3, #9
 8013794:	d94e      	bls.n	8013834 <_vfiprintf_r+0x1c4>
 8013796:	b1b0      	cbz	r0, 80137c6 <_vfiprintf_r+0x156>
 8013798:	9207      	str	r2, [sp, #28]
 801379a:	e014      	b.n	80137c6 <_vfiprintf_r+0x156>
 801379c:	eba0 0308 	sub.w	r3, r0, r8
 80137a0:	fa09 f303 	lsl.w	r3, r9, r3
 80137a4:	4313      	orrs	r3, r2
 80137a6:	9304      	str	r3, [sp, #16]
 80137a8:	46a2      	mov	sl, r4
 80137aa:	e7d2      	b.n	8013752 <_vfiprintf_r+0xe2>
 80137ac:	9b03      	ldr	r3, [sp, #12]
 80137ae:	1d19      	adds	r1, r3, #4
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	9103      	str	r1, [sp, #12]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	bfbb      	ittet	lt
 80137b8:	425b      	neglt	r3, r3
 80137ba:	f042 0202 	orrlt.w	r2, r2, #2
 80137be:	9307      	strge	r3, [sp, #28]
 80137c0:	9307      	strlt	r3, [sp, #28]
 80137c2:	bfb8      	it	lt
 80137c4:	9204      	strlt	r2, [sp, #16]
 80137c6:	7823      	ldrb	r3, [r4, #0]
 80137c8:	2b2e      	cmp	r3, #46	; 0x2e
 80137ca:	d10c      	bne.n	80137e6 <_vfiprintf_r+0x176>
 80137cc:	7863      	ldrb	r3, [r4, #1]
 80137ce:	2b2a      	cmp	r3, #42	; 0x2a
 80137d0:	d135      	bne.n	801383e <_vfiprintf_r+0x1ce>
 80137d2:	9b03      	ldr	r3, [sp, #12]
 80137d4:	1d1a      	adds	r2, r3, #4
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	9203      	str	r2, [sp, #12]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	bfb8      	it	lt
 80137de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80137e2:	3402      	adds	r4, #2
 80137e4:	9305      	str	r3, [sp, #20]
 80137e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80138cc <_vfiprintf_r+0x25c>
 80137ea:	7821      	ldrb	r1, [r4, #0]
 80137ec:	2203      	movs	r2, #3
 80137ee:	4650      	mov	r0, sl
 80137f0:	f7ec fd06 	bl	8000200 <memchr>
 80137f4:	b140      	cbz	r0, 8013808 <_vfiprintf_r+0x198>
 80137f6:	2340      	movs	r3, #64	; 0x40
 80137f8:	eba0 000a 	sub.w	r0, r0, sl
 80137fc:	fa03 f000 	lsl.w	r0, r3, r0
 8013800:	9b04      	ldr	r3, [sp, #16]
 8013802:	4303      	orrs	r3, r0
 8013804:	3401      	adds	r4, #1
 8013806:	9304      	str	r3, [sp, #16]
 8013808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801380c:	482c      	ldr	r0, [pc, #176]	; (80138c0 <_vfiprintf_r+0x250>)
 801380e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013812:	2206      	movs	r2, #6
 8013814:	f7ec fcf4 	bl	8000200 <memchr>
 8013818:	2800      	cmp	r0, #0
 801381a:	d03f      	beq.n	801389c <_vfiprintf_r+0x22c>
 801381c:	4b29      	ldr	r3, [pc, #164]	; (80138c4 <_vfiprintf_r+0x254>)
 801381e:	bb1b      	cbnz	r3, 8013868 <_vfiprintf_r+0x1f8>
 8013820:	9b03      	ldr	r3, [sp, #12]
 8013822:	3307      	adds	r3, #7
 8013824:	f023 0307 	bic.w	r3, r3, #7
 8013828:	3308      	adds	r3, #8
 801382a:	9303      	str	r3, [sp, #12]
 801382c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801382e:	443b      	add	r3, r7
 8013830:	9309      	str	r3, [sp, #36]	; 0x24
 8013832:	e767      	b.n	8013704 <_vfiprintf_r+0x94>
 8013834:	fb0c 3202 	mla	r2, ip, r2, r3
 8013838:	460c      	mov	r4, r1
 801383a:	2001      	movs	r0, #1
 801383c:	e7a5      	b.n	801378a <_vfiprintf_r+0x11a>
 801383e:	2300      	movs	r3, #0
 8013840:	3401      	adds	r4, #1
 8013842:	9305      	str	r3, [sp, #20]
 8013844:	4619      	mov	r1, r3
 8013846:	f04f 0c0a 	mov.w	ip, #10
 801384a:	4620      	mov	r0, r4
 801384c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013850:	3a30      	subs	r2, #48	; 0x30
 8013852:	2a09      	cmp	r2, #9
 8013854:	d903      	bls.n	801385e <_vfiprintf_r+0x1ee>
 8013856:	2b00      	cmp	r3, #0
 8013858:	d0c5      	beq.n	80137e6 <_vfiprintf_r+0x176>
 801385a:	9105      	str	r1, [sp, #20]
 801385c:	e7c3      	b.n	80137e6 <_vfiprintf_r+0x176>
 801385e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013862:	4604      	mov	r4, r0
 8013864:	2301      	movs	r3, #1
 8013866:	e7f0      	b.n	801384a <_vfiprintf_r+0x1da>
 8013868:	ab03      	add	r3, sp, #12
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	462a      	mov	r2, r5
 801386e:	4b16      	ldr	r3, [pc, #88]	; (80138c8 <_vfiprintf_r+0x258>)
 8013870:	a904      	add	r1, sp, #16
 8013872:	4630      	mov	r0, r6
 8013874:	f3af 8000 	nop.w
 8013878:	4607      	mov	r7, r0
 801387a:	1c78      	adds	r0, r7, #1
 801387c:	d1d6      	bne.n	801382c <_vfiprintf_r+0x1bc>
 801387e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013880:	07d9      	lsls	r1, r3, #31
 8013882:	d405      	bmi.n	8013890 <_vfiprintf_r+0x220>
 8013884:	89ab      	ldrh	r3, [r5, #12]
 8013886:	059a      	lsls	r2, r3, #22
 8013888:	d402      	bmi.n	8013890 <_vfiprintf_r+0x220>
 801388a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801388c:	f7ff fcb7 	bl	80131fe <__retarget_lock_release_recursive>
 8013890:	89ab      	ldrh	r3, [r5, #12]
 8013892:	065b      	lsls	r3, r3, #25
 8013894:	f53f af12 	bmi.w	80136bc <_vfiprintf_r+0x4c>
 8013898:	9809      	ldr	r0, [sp, #36]	; 0x24
 801389a:	e711      	b.n	80136c0 <_vfiprintf_r+0x50>
 801389c:	ab03      	add	r3, sp, #12
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	462a      	mov	r2, r5
 80138a2:	4b09      	ldr	r3, [pc, #36]	; (80138c8 <_vfiprintf_r+0x258>)
 80138a4:	a904      	add	r1, sp, #16
 80138a6:	4630      	mov	r0, r6
 80138a8:	f000 f880 	bl	80139ac <_printf_i>
 80138ac:	e7e4      	b.n	8013878 <_vfiprintf_r+0x208>
 80138ae:	bf00      	nop
 80138b0:	0801abec 	.word	0x0801abec
 80138b4:	0801ac0c 	.word	0x0801ac0c
 80138b8:	0801abcc 	.word	0x0801abcc
 80138bc:	0801ac2c 	.word	0x0801ac2c
 80138c0:	0801ac36 	.word	0x0801ac36
 80138c4:	00000000 	.word	0x00000000
 80138c8:	0801364b 	.word	0x0801364b
 80138cc:	0801ac32 	.word	0x0801ac32

080138d0 <_printf_common>:
 80138d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138d4:	4616      	mov	r6, r2
 80138d6:	4699      	mov	r9, r3
 80138d8:	688a      	ldr	r2, [r1, #8]
 80138da:	690b      	ldr	r3, [r1, #16]
 80138dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138e0:	4293      	cmp	r3, r2
 80138e2:	bfb8      	it	lt
 80138e4:	4613      	movlt	r3, r2
 80138e6:	6033      	str	r3, [r6, #0]
 80138e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80138ec:	4607      	mov	r7, r0
 80138ee:	460c      	mov	r4, r1
 80138f0:	b10a      	cbz	r2, 80138f6 <_printf_common+0x26>
 80138f2:	3301      	adds	r3, #1
 80138f4:	6033      	str	r3, [r6, #0]
 80138f6:	6823      	ldr	r3, [r4, #0]
 80138f8:	0699      	lsls	r1, r3, #26
 80138fa:	bf42      	ittt	mi
 80138fc:	6833      	ldrmi	r3, [r6, #0]
 80138fe:	3302      	addmi	r3, #2
 8013900:	6033      	strmi	r3, [r6, #0]
 8013902:	6825      	ldr	r5, [r4, #0]
 8013904:	f015 0506 	ands.w	r5, r5, #6
 8013908:	d106      	bne.n	8013918 <_printf_common+0x48>
 801390a:	f104 0a19 	add.w	sl, r4, #25
 801390e:	68e3      	ldr	r3, [r4, #12]
 8013910:	6832      	ldr	r2, [r6, #0]
 8013912:	1a9b      	subs	r3, r3, r2
 8013914:	42ab      	cmp	r3, r5
 8013916:	dc26      	bgt.n	8013966 <_printf_common+0x96>
 8013918:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801391c:	1e13      	subs	r3, r2, #0
 801391e:	6822      	ldr	r2, [r4, #0]
 8013920:	bf18      	it	ne
 8013922:	2301      	movne	r3, #1
 8013924:	0692      	lsls	r2, r2, #26
 8013926:	d42b      	bmi.n	8013980 <_printf_common+0xb0>
 8013928:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801392c:	4649      	mov	r1, r9
 801392e:	4638      	mov	r0, r7
 8013930:	47c0      	blx	r8
 8013932:	3001      	adds	r0, #1
 8013934:	d01e      	beq.n	8013974 <_printf_common+0xa4>
 8013936:	6823      	ldr	r3, [r4, #0]
 8013938:	68e5      	ldr	r5, [r4, #12]
 801393a:	6832      	ldr	r2, [r6, #0]
 801393c:	f003 0306 	and.w	r3, r3, #6
 8013940:	2b04      	cmp	r3, #4
 8013942:	bf08      	it	eq
 8013944:	1aad      	subeq	r5, r5, r2
 8013946:	68a3      	ldr	r3, [r4, #8]
 8013948:	6922      	ldr	r2, [r4, #16]
 801394a:	bf0c      	ite	eq
 801394c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013950:	2500      	movne	r5, #0
 8013952:	4293      	cmp	r3, r2
 8013954:	bfc4      	itt	gt
 8013956:	1a9b      	subgt	r3, r3, r2
 8013958:	18ed      	addgt	r5, r5, r3
 801395a:	2600      	movs	r6, #0
 801395c:	341a      	adds	r4, #26
 801395e:	42b5      	cmp	r5, r6
 8013960:	d11a      	bne.n	8013998 <_printf_common+0xc8>
 8013962:	2000      	movs	r0, #0
 8013964:	e008      	b.n	8013978 <_printf_common+0xa8>
 8013966:	2301      	movs	r3, #1
 8013968:	4652      	mov	r2, sl
 801396a:	4649      	mov	r1, r9
 801396c:	4638      	mov	r0, r7
 801396e:	47c0      	blx	r8
 8013970:	3001      	adds	r0, #1
 8013972:	d103      	bne.n	801397c <_printf_common+0xac>
 8013974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801397c:	3501      	adds	r5, #1
 801397e:	e7c6      	b.n	801390e <_printf_common+0x3e>
 8013980:	18e1      	adds	r1, r4, r3
 8013982:	1c5a      	adds	r2, r3, #1
 8013984:	2030      	movs	r0, #48	; 0x30
 8013986:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801398a:	4422      	add	r2, r4
 801398c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013990:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013994:	3302      	adds	r3, #2
 8013996:	e7c7      	b.n	8013928 <_printf_common+0x58>
 8013998:	2301      	movs	r3, #1
 801399a:	4622      	mov	r2, r4
 801399c:	4649      	mov	r1, r9
 801399e:	4638      	mov	r0, r7
 80139a0:	47c0      	blx	r8
 80139a2:	3001      	adds	r0, #1
 80139a4:	d0e6      	beq.n	8013974 <_printf_common+0xa4>
 80139a6:	3601      	adds	r6, #1
 80139a8:	e7d9      	b.n	801395e <_printf_common+0x8e>
	...

080139ac <_printf_i>:
 80139ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139b0:	460c      	mov	r4, r1
 80139b2:	4691      	mov	r9, r2
 80139b4:	7e27      	ldrb	r7, [r4, #24]
 80139b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80139b8:	2f78      	cmp	r7, #120	; 0x78
 80139ba:	4680      	mov	r8, r0
 80139bc:	469a      	mov	sl, r3
 80139be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80139c2:	d807      	bhi.n	80139d4 <_printf_i+0x28>
 80139c4:	2f62      	cmp	r7, #98	; 0x62
 80139c6:	d80a      	bhi.n	80139de <_printf_i+0x32>
 80139c8:	2f00      	cmp	r7, #0
 80139ca:	f000 80d8 	beq.w	8013b7e <_printf_i+0x1d2>
 80139ce:	2f58      	cmp	r7, #88	; 0x58
 80139d0:	f000 80a3 	beq.w	8013b1a <_printf_i+0x16e>
 80139d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80139d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139dc:	e03a      	b.n	8013a54 <_printf_i+0xa8>
 80139de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80139e2:	2b15      	cmp	r3, #21
 80139e4:	d8f6      	bhi.n	80139d4 <_printf_i+0x28>
 80139e6:	a001      	add	r0, pc, #4	; (adr r0, 80139ec <_printf_i+0x40>)
 80139e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80139ec:	08013a45 	.word	0x08013a45
 80139f0:	08013a59 	.word	0x08013a59
 80139f4:	080139d5 	.word	0x080139d5
 80139f8:	080139d5 	.word	0x080139d5
 80139fc:	080139d5 	.word	0x080139d5
 8013a00:	080139d5 	.word	0x080139d5
 8013a04:	08013a59 	.word	0x08013a59
 8013a08:	080139d5 	.word	0x080139d5
 8013a0c:	080139d5 	.word	0x080139d5
 8013a10:	080139d5 	.word	0x080139d5
 8013a14:	080139d5 	.word	0x080139d5
 8013a18:	08013b65 	.word	0x08013b65
 8013a1c:	08013a89 	.word	0x08013a89
 8013a20:	08013b47 	.word	0x08013b47
 8013a24:	080139d5 	.word	0x080139d5
 8013a28:	080139d5 	.word	0x080139d5
 8013a2c:	08013b87 	.word	0x08013b87
 8013a30:	080139d5 	.word	0x080139d5
 8013a34:	08013a89 	.word	0x08013a89
 8013a38:	080139d5 	.word	0x080139d5
 8013a3c:	080139d5 	.word	0x080139d5
 8013a40:	08013b4f 	.word	0x08013b4f
 8013a44:	680b      	ldr	r3, [r1, #0]
 8013a46:	1d1a      	adds	r2, r3, #4
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	600a      	str	r2, [r1, #0]
 8013a4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a54:	2301      	movs	r3, #1
 8013a56:	e0a3      	b.n	8013ba0 <_printf_i+0x1f4>
 8013a58:	6825      	ldr	r5, [r4, #0]
 8013a5a:	6808      	ldr	r0, [r1, #0]
 8013a5c:	062e      	lsls	r6, r5, #24
 8013a5e:	f100 0304 	add.w	r3, r0, #4
 8013a62:	d50a      	bpl.n	8013a7a <_printf_i+0xce>
 8013a64:	6805      	ldr	r5, [r0, #0]
 8013a66:	600b      	str	r3, [r1, #0]
 8013a68:	2d00      	cmp	r5, #0
 8013a6a:	da03      	bge.n	8013a74 <_printf_i+0xc8>
 8013a6c:	232d      	movs	r3, #45	; 0x2d
 8013a6e:	426d      	negs	r5, r5
 8013a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a74:	485e      	ldr	r0, [pc, #376]	; (8013bf0 <_printf_i+0x244>)
 8013a76:	230a      	movs	r3, #10
 8013a78:	e019      	b.n	8013aae <_printf_i+0x102>
 8013a7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013a7e:	6805      	ldr	r5, [r0, #0]
 8013a80:	600b      	str	r3, [r1, #0]
 8013a82:	bf18      	it	ne
 8013a84:	b22d      	sxthne	r5, r5
 8013a86:	e7ef      	b.n	8013a68 <_printf_i+0xbc>
 8013a88:	680b      	ldr	r3, [r1, #0]
 8013a8a:	6825      	ldr	r5, [r4, #0]
 8013a8c:	1d18      	adds	r0, r3, #4
 8013a8e:	6008      	str	r0, [r1, #0]
 8013a90:	0628      	lsls	r0, r5, #24
 8013a92:	d501      	bpl.n	8013a98 <_printf_i+0xec>
 8013a94:	681d      	ldr	r5, [r3, #0]
 8013a96:	e002      	b.n	8013a9e <_printf_i+0xf2>
 8013a98:	0669      	lsls	r1, r5, #25
 8013a9a:	d5fb      	bpl.n	8013a94 <_printf_i+0xe8>
 8013a9c:	881d      	ldrh	r5, [r3, #0]
 8013a9e:	4854      	ldr	r0, [pc, #336]	; (8013bf0 <_printf_i+0x244>)
 8013aa0:	2f6f      	cmp	r7, #111	; 0x6f
 8013aa2:	bf0c      	ite	eq
 8013aa4:	2308      	moveq	r3, #8
 8013aa6:	230a      	movne	r3, #10
 8013aa8:	2100      	movs	r1, #0
 8013aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013aae:	6866      	ldr	r6, [r4, #4]
 8013ab0:	60a6      	str	r6, [r4, #8]
 8013ab2:	2e00      	cmp	r6, #0
 8013ab4:	bfa2      	ittt	ge
 8013ab6:	6821      	ldrge	r1, [r4, #0]
 8013ab8:	f021 0104 	bicge.w	r1, r1, #4
 8013abc:	6021      	strge	r1, [r4, #0]
 8013abe:	b90d      	cbnz	r5, 8013ac4 <_printf_i+0x118>
 8013ac0:	2e00      	cmp	r6, #0
 8013ac2:	d04d      	beq.n	8013b60 <_printf_i+0x1b4>
 8013ac4:	4616      	mov	r6, r2
 8013ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8013aca:	fb03 5711 	mls	r7, r3, r1, r5
 8013ace:	5dc7      	ldrb	r7, [r0, r7]
 8013ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ad4:	462f      	mov	r7, r5
 8013ad6:	42bb      	cmp	r3, r7
 8013ad8:	460d      	mov	r5, r1
 8013ada:	d9f4      	bls.n	8013ac6 <_printf_i+0x11a>
 8013adc:	2b08      	cmp	r3, #8
 8013ade:	d10b      	bne.n	8013af8 <_printf_i+0x14c>
 8013ae0:	6823      	ldr	r3, [r4, #0]
 8013ae2:	07df      	lsls	r7, r3, #31
 8013ae4:	d508      	bpl.n	8013af8 <_printf_i+0x14c>
 8013ae6:	6923      	ldr	r3, [r4, #16]
 8013ae8:	6861      	ldr	r1, [r4, #4]
 8013aea:	4299      	cmp	r1, r3
 8013aec:	bfde      	ittt	le
 8013aee:	2330      	movle	r3, #48	; 0x30
 8013af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013af4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8013af8:	1b92      	subs	r2, r2, r6
 8013afa:	6122      	str	r2, [r4, #16]
 8013afc:	f8cd a000 	str.w	sl, [sp]
 8013b00:	464b      	mov	r3, r9
 8013b02:	aa03      	add	r2, sp, #12
 8013b04:	4621      	mov	r1, r4
 8013b06:	4640      	mov	r0, r8
 8013b08:	f7ff fee2 	bl	80138d0 <_printf_common>
 8013b0c:	3001      	adds	r0, #1
 8013b0e:	d14c      	bne.n	8013baa <_printf_i+0x1fe>
 8013b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b14:	b004      	add	sp, #16
 8013b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b1a:	4835      	ldr	r0, [pc, #212]	; (8013bf0 <_printf_i+0x244>)
 8013b1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	680e      	ldr	r6, [r1, #0]
 8013b24:	061f      	lsls	r7, r3, #24
 8013b26:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b2a:	600e      	str	r6, [r1, #0]
 8013b2c:	d514      	bpl.n	8013b58 <_printf_i+0x1ac>
 8013b2e:	07d9      	lsls	r1, r3, #31
 8013b30:	bf44      	itt	mi
 8013b32:	f043 0320 	orrmi.w	r3, r3, #32
 8013b36:	6023      	strmi	r3, [r4, #0]
 8013b38:	b91d      	cbnz	r5, 8013b42 <_printf_i+0x196>
 8013b3a:	6823      	ldr	r3, [r4, #0]
 8013b3c:	f023 0320 	bic.w	r3, r3, #32
 8013b40:	6023      	str	r3, [r4, #0]
 8013b42:	2310      	movs	r3, #16
 8013b44:	e7b0      	b.n	8013aa8 <_printf_i+0xfc>
 8013b46:	6823      	ldr	r3, [r4, #0]
 8013b48:	f043 0320 	orr.w	r3, r3, #32
 8013b4c:	6023      	str	r3, [r4, #0]
 8013b4e:	2378      	movs	r3, #120	; 0x78
 8013b50:	4828      	ldr	r0, [pc, #160]	; (8013bf4 <_printf_i+0x248>)
 8013b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b56:	e7e3      	b.n	8013b20 <_printf_i+0x174>
 8013b58:	065e      	lsls	r6, r3, #25
 8013b5a:	bf48      	it	mi
 8013b5c:	b2ad      	uxthmi	r5, r5
 8013b5e:	e7e6      	b.n	8013b2e <_printf_i+0x182>
 8013b60:	4616      	mov	r6, r2
 8013b62:	e7bb      	b.n	8013adc <_printf_i+0x130>
 8013b64:	680b      	ldr	r3, [r1, #0]
 8013b66:	6826      	ldr	r6, [r4, #0]
 8013b68:	6960      	ldr	r0, [r4, #20]
 8013b6a:	1d1d      	adds	r5, r3, #4
 8013b6c:	600d      	str	r5, [r1, #0]
 8013b6e:	0635      	lsls	r5, r6, #24
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	d501      	bpl.n	8013b78 <_printf_i+0x1cc>
 8013b74:	6018      	str	r0, [r3, #0]
 8013b76:	e002      	b.n	8013b7e <_printf_i+0x1d2>
 8013b78:	0671      	lsls	r1, r6, #25
 8013b7a:	d5fb      	bpl.n	8013b74 <_printf_i+0x1c8>
 8013b7c:	8018      	strh	r0, [r3, #0]
 8013b7e:	2300      	movs	r3, #0
 8013b80:	6123      	str	r3, [r4, #16]
 8013b82:	4616      	mov	r6, r2
 8013b84:	e7ba      	b.n	8013afc <_printf_i+0x150>
 8013b86:	680b      	ldr	r3, [r1, #0]
 8013b88:	1d1a      	adds	r2, r3, #4
 8013b8a:	600a      	str	r2, [r1, #0]
 8013b8c:	681e      	ldr	r6, [r3, #0]
 8013b8e:	6862      	ldr	r2, [r4, #4]
 8013b90:	2100      	movs	r1, #0
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7ec fb34 	bl	8000200 <memchr>
 8013b98:	b108      	cbz	r0, 8013b9e <_printf_i+0x1f2>
 8013b9a:	1b80      	subs	r0, r0, r6
 8013b9c:	6060      	str	r0, [r4, #4]
 8013b9e:	6863      	ldr	r3, [r4, #4]
 8013ba0:	6123      	str	r3, [r4, #16]
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ba8:	e7a8      	b.n	8013afc <_printf_i+0x150>
 8013baa:	6923      	ldr	r3, [r4, #16]
 8013bac:	4632      	mov	r2, r6
 8013bae:	4649      	mov	r1, r9
 8013bb0:	4640      	mov	r0, r8
 8013bb2:	47d0      	blx	sl
 8013bb4:	3001      	adds	r0, #1
 8013bb6:	d0ab      	beq.n	8013b10 <_printf_i+0x164>
 8013bb8:	6823      	ldr	r3, [r4, #0]
 8013bba:	079b      	lsls	r3, r3, #30
 8013bbc:	d413      	bmi.n	8013be6 <_printf_i+0x23a>
 8013bbe:	68e0      	ldr	r0, [r4, #12]
 8013bc0:	9b03      	ldr	r3, [sp, #12]
 8013bc2:	4298      	cmp	r0, r3
 8013bc4:	bfb8      	it	lt
 8013bc6:	4618      	movlt	r0, r3
 8013bc8:	e7a4      	b.n	8013b14 <_printf_i+0x168>
 8013bca:	2301      	movs	r3, #1
 8013bcc:	4632      	mov	r2, r6
 8013bce:	4649      	mov	r1, r9
 8013bd0:	4640      	mov	r0, r8
 8013bd2:	47d0      	blx	sl
 8013bd4:	3001      	adds	r0, #1
 8013bd6:	d09b      	beq.n	8013b10 <_printf_i+0x164>
 8013bd8:	3501      	adds	r5, #1
 8013bda:	68e3      	ldr	r3, [r4, #12]
 8013bdc:	9903      	ldr	r1, [sp, #12]
 8013bde:	1a5b      	subs	r3, r3, r1
 8013be0:	42ab      	cmp	r3, r5
 8013be2:	dcf2      	bgt.n	8013bca <_printf_i+0x21e>
 8013be4:	e7eb      	b.n	8013bbe <_printf_i+0x212>
 8013be6:	2500      	movs	r5, #0
 8013be8:	f104 0619 	add.w	r6, r4, #25
 8013bec:	e7f5      	b.n	8013bda <_printf_i+0x22e>
 8013bee:	bf00      	nop
 8013bf0:	0801ac3d 	.word	0x0801ac3d
 8013bf4:	0801ac4e 	.word	0x0801ac4e

08013bf8 <_sbrk_r>:
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4d06      	ldr	r5, [pc, #24]	; (8013c14 <_sbrk_r+0x1c>)
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	4604      	mov	r4, r0
 8013c00:	4608      	mov	r0, r1
 8013c02:	602b      	str	r3, [r5, #0]
 8013c04:	f7ed fcd6 	bl	80015b4 <_sbrk>
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	d102      	bne.n	8013c12 <_sbrk_r+0x1a>
 8013c0c:	682b      	ldr	r3, [r5, #0]
 8013c0e:	b103      	cbz	r3, 8013c12 <_sbrk_r+0x1a>
 8013c10:	6023      	str	r3, [r4, #0]
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	200075d8 	.word	0x200075d8

08013c18 <__sread>:
 8013c18:	b510      	push	{r4, lr}
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c20:	f000 fa92 	bl	8014148 <_read_r>
 8013c24:	2800      	cmp	r0, #0
 8013c26:	bfab      	itete	ge
 8013c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8013c2c:	181b      	addge	r3, r3, r0
 8013c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013c32:	bfac      	ite	ge
 8013c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8013c36:	81a3      	strhlt	r3, [r4, #12]
 8013c38:	bd10      	pop	{r4, pc}

08013c3a <__swrite>:
 8013c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c3e:	461f      	mov	r7, r3
 8013c40:	898b      	ldrh	r3, [r1, #12]
 8013c42:	05db      	lsls	r3, r3, #23
 8013c44:	4605      	mov	r5, r0
 8013c46:	460c      	mov	r4, r1
 8013c48:	4616      	mov	r6, r2
 8013c4a:	d505      	bpl.n	8013c58 <__swrite+0x1e>
 8013c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c50:	2302      	movs	r3, #2
 8013c52:	2200      	movs	r2, #0
 8013c54:	f000 f9d0 	bl	8013ff8 <_lseek_r>
 8013c58:	89a3      	ldrh	r3, [r4, #12]
 8013c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c62:	81a3      	strh	r3, [r4, #12]
 8013c64:	4632      	mov	r2, r6
 8013c66:	463b      	mov	r3, r7
 8013c68:	4628      	mov	r0, r5
 8013c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6e:	f000 b869 	b.w	8013d44 <_write_r>

08013c72 <__sseek>:
 8013c72:	b510      	push	{r4, lr}
 8013c74:	460c      	mov	r4, r1
 8013c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c7a:	f000 f9bd 	bl	8013ff8 <_lseek_r>
 8013c7e:	1c43      	adds	r3, r0, #1
 8013c80:	89a3      	ldrh	r3, [r4, #12]
 8013c82:	bf15      	itete	ne
 8013c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c8e:	81a3      	strheq	r3, [r4, #12]
 8013c90:	bf18      	it	ne
 8013c92:	81a3      	strhne	r3, [r4, #12]
 8013c94:	bd10      	pop	{r4, pc}

08013c96 <__sclose>:
 8013c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c9a:	f000 b8db 	b.w	8013e54 <_close_r>
	...

08013ca0 <__swbuf_r>:
 8013ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ca2:	460e      	mov	r6, r1
 8013ca4:	4614      	mov	r4, r2
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	b118      	cbz	r0, 8013cb2 <__swbuf_r+0x12>
 8013caa:	6983      	ldr	r3, [r0, #24]
 8013cac:	b90b      	cbnz	r3, 8013cb2 <__swbuf_r+0x12>
 8013cae:	f7ff f9f5 	bl	801309c <__sinit>
 8013cb2:	4b21      	ldr	r3, [pc, #132]	; (8013d38 <__swbuf_r+0x98>)
 8013cb4:	429c      	cmp	r4, r3
 8013cb6:	d12b      	bne.n	8013d10 <__swbuf_r+0x70>
 8013cb8:	686c      	ldr	r4, [r5, #4]
 8013cba:	69a3      	ldr	r3, [r4, #24]
 8013cbc:	60a3      	str	r3, [r4, #8]
 8013cbe:	89a3      	ldrh	r3, [r4, #12]
 8013cc0:	071a      	lsls	r2, r3, #28
 8013cc2:	d52f      	bpl.n	8013d24 <__swbuf_r+0x84>
 8013cc4:	6923      	ldr	r3, [r4, #16]
 8013cc6:	b36b      	cbz	r3, 8013d24 <__swbuf_r+0x84>
 8013cc8:	6923      	ldr	r3, [r4, #16]
 8013cca:	6820      	ldr	r0, [r4, #0]
 8013ccc:	1ac0      	subs	r0, r0, r3
 8013cce:	6963      	ldr	r3, [r4, #20]
 8013cd0:	b2f6      	uxtb	r6, r6
 8013cd2:	4283      	cmp	r3, r0
 8013cd4:	4637      	mov	r7, r6
 8013cd6:	dc04      	bgt.n	8013ce2 <__swbuf_r+0x42>
 8013cd8:	4621      	mov	r1, r4
 8013cda:	4628      	mov	r0, r5
 8013cdc:	f000 f950 	bl	8013f80 <_fflush_r>
 8013ce0:	bb30      	cbnz	r0, 8013d30 <__swbuf_r+0x90>
 8013ce2:	68a3      	ldr	r3, [r4, #8]
 8013ce4:	3b01      	subs	r3, #1
 8013ce6:	60a3      	str	r3, [r4, #8]
 8013ce8:	6823      	ldr	r3, [r4, #0]
 8013cea:	1c5a      	adds	r2, r3, #1
 8013cec:	6022      	str	r2, [r4, #0]
 8013cee:	701e      	strb	r6, [r3, #0]
 8013cf0:	6963      	ldr	r3, [r4, #20]
 8013cf2:	3001      	adds	r0, #1
 8013cf4:	4283      	cmp	r3, r0
 8013cf6:	d004      	beq.n	8013d02 <__swbuf_r+0x62>
 8013cf8:	89a3      	ldrh	r3, [r4, #12]
 8013cfa:	07db      	lsls	r3, r3, #31
 8013cfc:	d506      	bpl.n	8013d0c <__swbuf_r+0x6c>
 8013cfe:	2e0a      	cmp	r6, #10
 8013d00:	d104      	bne.n	8013d0c <__swbuf_r+0x6c>
 8013d02:	4621      	mov	r1, r4
 8013d04:	4628      	mov	r0, r5
 8013d06:	f000 f93b 	bl	8013f80 <_fflush_r>
 8013d0a:	b988      	cbnz	r0, 8013d30 <__swbuf_r+0x90>
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d10:	4b0a      	ldr	r3, [pc, #40]	; (8013d3c <__swbuf_r+0x9c>)
 8013d12:	429c      	cmp	r4, r3
 8013d14:	d101      	bne.n	8013d1a <__swbuf_r+0x7a>
 8013d16:	68ac      	ldr	r4, [r5, #8]
 8013d18:	e7cf      	b.n	8013cba <__swbuf_r+0x1a>
 8013d1a:	4b09      	ldr	r3, [pc, #36]	; (8013d40 <__swbuf_r+0xa0>)
 8013d1c:	429c      	cmp	r4, r3
 8013d1e:	bf08      	it	eq
 8013d20:	68ec      	ldreq	r4, [r5, #12]
 8013d22:	e7ca      	b.n	8013cba <__swbuf_r+0x1a>
 8013d24:	4621      	mov	r1, r4
 8013d26:	4628      	mov	r0, r5
 8013d28:	f000 f81e 	bl	8013d68 <__swsetup_r>
 8013d2c:	2800      	cmp	r0, #0
 8013d2e:	d0cb      	beq.n	8013cc8 <__swbuf_r+0x28>
 8013d30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013d34:	e7ea      	b.n	8013d0c <__swbuf_r+0x6c>
 8013d36:	bf00      	nop
 8013d38:	0801abec 	.word	0x0801abec
 8013d3c:	0801ac0c 	.word	0x0801ac0c
 8013d40:	0801abcc 	.word	0x0801abcc

08013d44 <_write_r>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4d07      	ldr	r5, [pc, #28]	; (8013d64 <_write_r+0x20>)
 8013d48:	4604      	mov	r4, r0
 8013d4a:	4608      	mov	r0, r1
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	2200      	movs	r2, #0
 8013d50:	602a      	str	r2, [r5, #0]
 8013d52:	461a      	mov	r2, r3
 8013d54:	f7ed fbdd 	bl	8001512 <_write>
 8013d58:	1c43      	adds	r3, r0, #1
 8013d5a:	d102      	bne.n	8013d62 <_write_r+0x1e>
 8013d5c:	682b      	ldr	r3, [r5, #0]
 8013d5e:	b103      	cbz	r3, 8013d62 <_write_r+0x1e>
 8013d60:	6023      	str	r3, [r4, #0]
 8013d62:	bd38      	pop	{r3, r4, r5, pc}
 8013d64:	200075d8 	.word	0x200075d8

08013d68 <__swsetup_r>:
 8013d68:	4b32      	ldr	r3, [pc, #200]	; (8013e34 <__swsetup_r+0xcc>)
 8013d6a:	b570      	push	{r4, r5, r6, lr}
 8013d6c:	681d      	ldr	r5, [r3, #0]
 8013d6e:	4606      	mov	r6, r0
 8013d70:	460c      	mov	r4, r1
 8013d72:	b125      	cbz	r5, 8013d7e <__swsetup_r+0x16>
 8013d74:	69ab      	ldr	r3, [r5, #24]
 8013d76:	b913      	cbnz	r3, 8013d7e <__swsetup_r+0x16>
 8013d78:	4628      	mov	r0, r5
 8013d7a:	f7ff f98f 	bl	801309c <__sinit>
 8013d7e:	4b2e      	ldr	r3, [pc, #184]	; (8013e38 <__swsetup_r+0xd0>)
 8013d80:	429c      	cmp	r4, r3
 8013d82:	d10f      	bne.n	8013da4 <__swsetup_r+0x3c>
 8013d84:	686c      	ldr	r4, [r5, #4]
 8013d86:	89a3      	ldrh	r3, [r4, #12]
 8013d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d8c:	0719      	lsls	r1, r3, #28
 8013d8e:	d42c      	bmi.n	8013dea <__swsetup_r+0x82>
 8013d90:	06dd      	lsls	r5, r3, #27
 8013d92:	d411      	bmi.n	8013db8 <__swsetup_r+0x50>
 8013d94:	2309      	movs	r3, #9
 8013d96:	6033      	str	r3, [r6, #0]
 8013d98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013d9c:	81a3      	strh	r3, [r4, #12]
 8013d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013da2:	e03e      	b.n	8013e22 <__swsetup_r+0xba>
 8013da4:	4b25      	ldr	r3, [pc, #148]	; (8013e3c <__swsetup_r+0xd4>)
 8013da6:	429c      	cmp	r4, r3
 8013da8:	d101      	bne.n	8013dae <__swsetup_r+0x46>
 8013daa:	68ac      	ldr	r4, [r5, #8]
 8013dac:	e7eb      	b.n	8013d86 <__swsetup_r+0x1e>
 8013dae:	4b24      	ldr	r3, [pc, #144]	; (8013e40 <__swsetup_r+0xd8>)
 8013db0:	429c      	cmp	r4, r3
 8013db2:	bf08      	it	eq
 8013db4:	68ec      	ldreq	r4, [r5, #12]
 8013db6:	e7e6      	b.n	8013d86 <__swsetup_r+0x1e>
 8013db8:	0758      	lsls	r0, r3, #29
 8013dba:	d512      	bpl.n	8013de2 <__swsetup_r+0x7a>
 8013dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013dbe:	b141      	cbz	r1, 8013dd2 <__swsetup_r+0x6a>
 8013dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013dc4:	4299      	cmp	r1, r3
 8013dc6:	d002      	beq.n	8013dce <__swsetup_r+0x66>
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f7ff fa21 	bl	8013210 <_free_r>
 8013dce:	2300      	movs	r3, #0
 8013dd0:	6363      	str	r3, [r4, #52]	; 0x34
 8013dd2:	89a3      	ldrh	r3, [r4, #12]
 8013dd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013dd8:	81a3      	strh	r3, [r4, #12]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	6063      	str	r3, [r4, #4]
 8013dde:	6923      	ldr	r3, [r4, #16]
 8013de0:	6023      	str	r3, [r4, #0]
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	f043 0308 	orr.w	r3, r3, #8
 8013de8:	81a3      	strh	r3, [r4, #12]
 8013dea:	6923      	ldr	r3, [r4, #16]
 8013dec:	b94b      	cbnz	r3, 8013e02 <__swsetup_r+0x9a>
 8013dee:	89a3      	ldrh	r3, [r4, #12]
 8013df0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013df8:	d003      	beq.n	8013e02 <__swsetup_r+0x9a>
 8013dfa:	4621      	mov	r1, r4
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f000 f931 	bl	8014064 <__smakebuf_r>
 8013e02:	89a0      	ldrh	r0, [r4, #12]
 8013e04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e08:	f010 0301 	ands.w	r3, r0, #1
 8013e0c:	d00a      	beq.n	8013e24 <__swsetup_r+0xbc>
 8013e0e:	2300      	movs	r3, #0
 8013e10:	60a3      	str	r3, [r4, #8]
 8013e12:	6963      	ldr	r3, [r4, #20]
 8013e14:	425b      	negs	r3, r3
 8013e16:	61a3      	str	r3, [r4, #24]
 8013e18:	6923      	ldr	r3, [r4, #16]
 8013e1a:	b943      	cbnz	r3, 8013e2e <__swsetup_r+0xc6>
 8013e1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013e20:	d1ba      	bne.n	8013d98 <__swsetup_r+0x30>
 8013e22:	bd70      	pop	{r4, r5, r6, pc}
 8013e24:	0781      	lsls	r1, r0, #30
 8013e26:	bf58      	it	pl
 8013e28:	6963      	ldrpl	r3, [r4, #20]
 8013e2a:	60a3      	str	r3, [r4, #8]
 8013e2c:	e7f4      	b.n	8013e18 <__swsetup_r+0xb0>
 8013e2e:	2000      	movs	r0, #0
 8013e30:	e7f7      	b.n	8013e22 <__swsetup_r+0xba>
 8013e32:	bf00      	nop
 8013e34:	20000030 	.word	0x20000030
 8013e38:	0801abec 	.word	0x0801abec
 8013e3c:	0801ac0c 	.word	0x0801ac0c
 8013e40:	0801abcc 	.word	0x0801abcc

08013e44 <abort>:
 8013e44:	b508      	push	{r3, lr}
 8013e46:	2006      	movs	r0, #6
 8013e48:	f000 f9b8 	bl	80141bc <raise>
 8013e4c:	2001      	movs	r0, #1
 8013e4e:	f7ed fb39 	bl	80014c4 <_exit>
	...

08013e54 <_close_r>:
 8013e54:	b538      	push	{r3, r4, r5, lr}
 8013e56:	4d06      	ldr	r5, [pc, #24]	; (8013e70 <_close_r+0x1c>)
 8013e58:	2300      	movs	r3, #0
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	4608      	mov	r0, r1
 8013e5e:	602b      	str	r3, [r5, #0]
 8013e60:	f7ed fb73 	bl	800154a <_close>
 8013e64:	1c43      	adds	r3, r0, #1
 8013e66:	d102      	bne.n	8013e6e <_close_r+0x1a>
 8013e68:	682b      	ldr	r3, [r5, #0]
 8013e6a:	b103      	cbz	r3, 8013e6e <_close_r+0x1a>
 8013e6c:	6023      	str	r3, [r4, #0]
 8013e6e:	bd38      	pop	{r3, r4, r5, pc}
 8013e70:	200075d8 	.word	0x200075d8

08013e74 <__sflush_r>:
 8013e74:	898a      	ldrh	r2, [r1, #12]
 8013e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e7a:	4605      	mov	r5, r0
 8013e7c:	0710      	lsls	r0, r2, #28
 8013e7e:	460c      	mov	r4, r1
 8013e80:	d458      	bmi.n	8013f34 <__sflush_r+0xc0>
 8013e82:	684b      	ldr	r3, [r1, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	dc05      	bgt.n	8013e94 <__sflush_r+0x20>
 8013e88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	dc02      	bgt.n	8013e94 <__sflush_r+0x20>
 8013e8e:	2000      	movs	r0, #0
 8013e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e96:	2e00      	cmp	r6, #0
 8013e98:	d0f9      	beq.n	8013e8e <__sflush_r+0x1a>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ea0:	682f      	ldr	r7, [r5, #0]
 8013ea2:	602b      	str	r3, [r5, #0]
 8013ea4:	d032      	beq.n	8013f0c <__sflush_r+0x98>
 8013ea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013ea8:	89a3      	ldrh	r3, [r4, #12]
 8013eaa:	075a      	lsls	r2, r3, #29
 8013eac:	d505      	bpl.n	8013eba <__sflush_r+0x46>
 8013eae:	6863      	ldr	r3, [r4, #4]
 8013eb0:	1ac0      	subs	r0, r0, r3
 8013eb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013eb4:	b10b      	cbz	r3, 8013eba <__sflush_r+0x46>
 8013eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013eb8:	1ac0      	subs	r0, r0, r3
 8013eba:	2300      	movs	r3, #0
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013ec0:	6a21      	ldr	r1, [r4, #32]
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	47b0      	blx	r6
 8013ec6:	1c43      	adds	r3, r0, #1
 8013ec8:	89a3      	ldrh	r3, [r4, #12]
 8013eca:	d106      	bne.n	8013eda <__sflush_r+0x66>
 8013ecc:	6829      	ldr	r1, [r5, #0]
 8013ece:	291d      	cmp	r1, #29
 8013ed0:	d82c      	bhi.n	8013f2c <__sflush_r+0xb8>
 8013ed2:	4a2a      	ldr	r2, [pc, #168]	; (8013f7c <__sflush_r+0x108>)
 8013ed4:	40ca      	lsrs	r2, r1
 8013ed6:	07d6      	lsls	r6, r2, #31
 8013ed8:	d528      	bpl.n	8013f2c <__sflush_r+0xb8>
 8013eda:	2200      	movs	r2, #0
 8013edc:	6062      	str	r2, [r4, #4]
 8013ede:	04d9      	lsls	r1, r3, #19
 8013ee0:	6922      	ldr	r2, [r4, #16]
 8013ee2:	6022      	str	r2, [r4, #0]
 8013ee4:	d504      	bpl.n	8013ef0 <__sflush_r+0x7c>
 8013ee6:	1c42      	adds	r2, r0, #1
 8013ee8:	d101      	bne.n	8013eee <__sflush_r+0x7a>
 8013eea:	682b      	ldr	r3, [r5, #0]
 8013eec:	b903      	cbnz	r3, 8013ef0 <__sflush_r+0x7c>
 8013eee:	6560      	str	r0, [r4, #84]	; 0x54
 8013ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ef2:	602f      	str	r7, [r5, #0]
 8013ef4:	2900      	cmp	r1, #0
 8013ef6:	d0ca      	beq.n	8013e8e <__sflush_r+0x1a>
 8013ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013efc:	4299      	cmp	r1, r3
 8013efe:	d002      	beq.n	8013f06 <__sflush_r+0x92>
 8013f00:	4628      	mov	r0, r5
 8013f02:	f7ff f985 	bl	8013210 <_free_r>
 8013f06:	2000      	movs	r0, #0
 8013f08:	6360      	str	r0, [r4, #52]	; 0x34
 8013f0a:	e7c1      	b.n	8013e90 <__sflush_r+0x1c>
 8013f0c:	6a21      	ldr	r1, [r4, #32]
 8013f0e:	2301      	movs	r3, #1
 8013f10:	4628      	mov	r0, r5
 8013f12:	47b0      	blx	r6
 8013f14:	1c41      	adds	r1, r0, #1
 8013f16:	d1c7      	bne.n	8013ea8 <__sflush_r+0x34>
 8013f18:	682b      	ldr	r3, [r5, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d0c4      	beq.n	8013ea8 <__sflush_r+0x34>
 8013f1e:	2b1d      	cmp	r3, #29
 8013f20:	d001      	beq.n	8013f26 <__sflush_r+0xb2>
 8013f22:	2b16      	cmp	r3, #22
 8013f24:	d101      	bne.n	8013f2a <__sflush_r+0xb6>
 8013f26:	602f      	str	r7, [r5, #0]
 8013f28:	e7b1      	b.n	8013e8e <__sflush_r+0x1a>
 8013f2a:	89a3      	ldrh	r3, [r4, #12]
 8013f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f30:	81a3      	strh	r3, [r4, #12]
 8013f32:	e7ad      	b.n	8013e90 <__sflush_r+0x1c>
 8013f34:	690f      	ldr	r7, [r1, #16]
 8013f36:	2f00      	cmp	r7, #0
 8013f38:	d0a9      	beq.n	8013e8e <__sflush_r+0x1a>
 8013f3a:	0793      	lsls	r3, r2, #30
 8013f3c:	680e      	ldr	r6, [r1, #0]
 8013f3e:	bf08      	it	eq
 8013f40:	694b      	ldreq	r3, [r1, #20]
 8013f42:	600f      	str	r7, [r1, #0]
 8013f44:	bf18      	it	ne
 8013f46:	2300      	movne	r3, #0
 8013f48:	eba6 0807 	sub.w	r8, r6, r7
 8013f4c:	608b      	str	r3, [r1, #8]
 8013f4e:	f1b8 0f00 	cmp.w	r8, #0
 8013f52:	dd9c      	ble.n	8013e8e <__sflush_r+0x1a>
 8013f54:	6a21      	ldr	r1, [r4, #32]
 8013f56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f58:	4643      	mov	r3, r8
 8013f5a:	463a      	mov	r2, r7
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	47b0      	blx	r6
 8013f60:	2800      	cmp	r0, #0
 8013f62:	dc06      	bgt.n	8013f72 <__sflush_r+0xfe>
 8013f64:	89a3      	ldrh	r3, [r4, #12]
 8013f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f6a:	81a3      	strh	r3, [r4, #12]
 8013f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f70:	e78e      	b.n	8013e90 <__sflush_r+0x1c>
 8013f72:	4407      	add	r7, r0
 8013f74:	eba8 0800 	sub.w	r8, r8, r0
 8013f78:	e7e9      	b.n	8013f4e <__sflush_r+0xda>
 8013f7a:	bf00      	nop
 8013f7c:	20400001 	.word	0x20400001

08013f80 <_fflush_r>:
 8013f80:	b538      	push	{r3, r4, r5, lr}
 8013f82:	690b      	ldr	r3, [r1, #16]
 8013f84:	4605      	mov	r5, r0
 8013f86:	460c      	mov	r4, r1
 8013f88:	b913      	cbnz	r3, 8013f90 <_fflush_r+0x10>
 8013f8a:	2500      	movs	r5, #0
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	bd38      	pop	{r3, r4, r5, pc}
 8013f90:	b118      	cbz	r0, 8013f9a <_fflush_r+0x1a>
 8013f92:	6983      	ldr	r3, [r0, #24]
 8013f94:	b90b      	cbnz	r3, 8013f9a <_fflush_r+0x1a>
 8013f96:	f7ff f881 	bl	801309c <__sinit>
 8013f9a:	4b14      	ldr	r3, [pc, #80]	; (8013fec <_fflush_r+0x6c>)
 8013f9c:	429c      	cmp	r4, r3
 8013f9e:	d11b      	bne.n	8013fd8 <_fflush_r+0x58>
 8013fa0:	686c      	ldr	r4, [r5, #4]
 8013fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d0ef      	beq.n	8013f8a <_fflush_r+0xa>
 8013faa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013fac:	07d0      	lsls	r0, r2, #31
 8013fae:	d404      	bmi.n	8013fba <_fflush_r+0x3a>
 8013fb0:	0599      	lsls	r1, r3, #22
 8013fb2:	d402      	bmi.n	8013fba <_fflush_r+0x3a>
 8013fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fb6:	f7ff f921 	bl	80131fc <__retarget_lock_acquire_recursive>
 8013fba:	4628      	mov	r0, r5
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	f7ff ff59 	bl	8013e74 <__sflush_r>
 8013fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013fc4:	07da      	lsls	r2, r3, #31
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	d4e0      	bmi.n	8013f8c <_fflush_r+0xc>
 8013fca:	89a3      	ldrh	r3, [r4, #12]
 8013fcc:	059b      	lsls	r3, r3, #22
 8013fce:	d4dd      	bmi.n	8013f8c <_fflush_r+0xc>
 8013fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013fd2:	f7ff f914 	bl	80131fe <__retarget_lock_release_recursive>
 8013fd6:	e7d9      	b.n	8013f8c <_fflush_r+0xc>
 8013fd8:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <_fflush_r+0x70>)
 8013fda:	429c      	cmp	r4, r3
 8013fdc:	d101      	bne.n	8013fe2 <_fflush_r+0x62>
 8013fde:	68ac      	ldr	r4, [r5, #8]
 8013fe0:	e7df      	b.n	8013fa2 <_fflush_r+0x22>
 8013fe2:	4b04      	ldr	r3, [pc, #16]	; (8013ff4 <_fflush_r+0x74>)
 8013fe4:	429c      	cmp	r4, r3
 8013fe6:	bf08      	it	eq
 8013fe8:	68ec      	ldreq	r4, [r5, #12]
 8013fea:	e7da      	b.n	8013fa2 <_fflush_r+0x22>
 8013fec:	0801abec 	.word	0x0801abec
 8013ff0:	0801ac0c 	.word	0x0801ac0c
 8013ff4:	0801abcc 	.word	0x0801abcc

08013ff8 <_lseek_r>:
 8013ff8:	b538      	push	{r3, r4, r5, lr}
 8013ffa:	4d07      	ldr	r5, [pc, #28]	; (8014018 <_lseek_r+0x20>)
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	4608      	mov	r0, r1
 8014000:	4611      	mov	r1, r2
 8014002:	2200      	movs	r2, #0
 8014004:	602a      	str	r2, [r5, #0]
 8014006:	461a      	mov	r2, r3
 8014008:	f7ed fac6 	bl	8001598 <_lseek>
 801400c:	1c43      	adds	r3, r0, #1
 801400e:	d102      	bne.n	8014016 <_lseek_r+0x1e>
 8014010:	682b      	ldr	r3, [r5, #0]
 8014012:	b103      	cbz	r3, 8014016 <_lseek_r+0x1e>
 8014014:	6023      	str	r3, [r4, #0]
 8014016:	bd38      	pop	{r3, r4, r5, pc}
 8014018:	200075d8 	.word	0x200075d8

0801401c <__swhatbuf_r>:
 801401c:	b570      	push	{r4, r5, r6, lr}
 801401e:	460e      	mov	r6, r1
 8014020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014024:	2900      	cmp	r1, #0
 8014026:	b096      	sub	sp, #88	; 0x58
 8014028:	4614      	mov	r4, r2
 801402a:	461d      	mov	r5, r3
 801402c:	da07      	bge.n	801403e <__swhatbuf_r+0x22>
 801402e:	2300      	movs	r3, #0
 8014030:	602b      	str	r3, [r5, #0]
 8014032:	89b3      	ldrh	r3, [r6, #12]
 8014034:	061a      	lsls	r2, r3, #24
 8014036:	d410      	bmi.n	801405a <__swhatbuf_r+0x3e>
 8014038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801403c:	e00e      	b.n	801405c <__swhatbuf_r+0x40>
 801403e:	466a      	mov	r2, sp
 8014040:	f000 f8d8 	bl	80141f4 <_fstat_r>
 8014044:	2800      	cmp	r0, #0
 8014046:	dbf2      	blt.n	801402e <__swhatbuf_r+0x12>
 8014048:	9a01      	ldr	r2, [sp, #4]
 801404a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801404e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014052:	425a      	negs	r2, r3
 8014054:	415a      	adcs	r2, r3
 8014056:	602a      	str	r2, [r5, #0]
 8014058:	e7ee      	b.n	8014038 <__swhatbuf_r+0x1c>
 801405a:	2340      	movs	r3, #64	; 0x40
 801405c:	2000      	movs	r0, #0
 801405e:	6023      	str	r3, [r4, #0]
 8014060:	b016      	add	sp, #88	; 0x58
 8014062:	bd70      	pop	{r4, r5, r6, pc}

08014064 <__smakebuf_r>:
 8014064:	898b      	ldrh	r3, [r1, #12]
 8014066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014068:	079d      	lsls	r5, r3, #30
 801406a:	4606      	mov	r6, r0
 801406c:	460c      	mov	r4, r1
 801406e:	d507      	bpl.n	8014080 <__smakebuf_r+0x1c>
 8014070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014074:	6023      	str	r3, [r4, #0]
 8014076:	6123      	str	r3, [r4, #16]
 8014078:	2301      	movs	r3, #1
 801407a:	6163      	str	r3, [r4, #20]
 801407c:	b002      	add	sp, #8
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	ab01      	add	r3, sp, #4
 8014082:	466a      	mov	r2, sp
 8014084:	f7ff ffca 	bl	801401c <__swhatbuf_r>
 8014088:	9900      	ldr	r1, [sp, #0]
 801408a:	4605      	mov	r5, r0
 801408c:	4630      	mov	r0, r6
 801408e:	f7ff f90f 	bl	80132b0 <_malloc_r>
 8014092:	b948      	cbnz	r0, 80140a8 <__smakebuf_r+0x44>
 8014094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014098:	059a      	lsls	r2, r3, #22
 801409a:	d4ef      	bmi.n	801407c <__smakebuf_r+0x18>
 801409c:	f023 0303 	bic.w	r3, r3, #3
 80140a0:	f043 0302 	orr.w	r3, r3, #2
 80140a4:	81a3      	strh	r3, [r4, #12]
 80140a6:	e7e3      	b.n	8014070 <__smakebuf_r+0xc>
 80140a8:	4b0d      	ldr	r3, [pc, #52]	; (80140e0 <__smakebuf_r+0x7c>)
 80140aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80140ac:	89a3      	ldrh	r3, [r4, #12]
 80140ae:	6020      	str	r0, [r4, #0]
 80140b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140b4:	81a3      	strh	r3, [r4, #12]
 80140b6:	9b00      	ldr	r3, [sp, #0]
 80140b8:	6163      	str	r3, [r4, #20]
 80140ba:	9b01      	ldr	r3, [sp, #4]
 80140bc:	6120      	str	r0, [r4, #16]
 80140be:	b15b      	cbz	r3, 80140d8 <__smakebuf_r+0x74>
 80140c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140c4:	4630      	mov	r0, r6
 80140c6:	f000 f8a7 	bl	8014218 <_isatty_r>
 80140ca:	b128      	cbz	r0, 80140d8 <__smakebuf_r+0x74>
 80140cc:	89a3      	ldrh	r3, [r4, #12]
 80140ce:	f023 0303 	bic.w	r3, r3, #3
 80140d2:	f043 0301 	orr.w	r3, r3, #1
 80140d6:	81a3      	strh	r3, [r4, #12]
 80140d8:	89a0      	ldrh	r0, [r4, #12]
 80140da:	4305      	orrs	r5, r0
 80140dc:	81a5      	strh	r5, [r4, #12]
 80140de:	e7cd      	b.n	801407c <__smakebuf_r+0x18>
 80140e0:	08013035 	.word	0x08013035

080140e4 <__malloc_lock>:
 80140e4:	4801      	ldr	r0, [pc, #4]	; (80140ec <__malloc_lock+0x8>)
 80140e6:	f7ff b889 	b.w	80131fc <__retarget_lock_acquire_recursive>
 80140ea:	bf00      	nop
 80140ec:	200075e0 	.word	0x200075e0

080140f0 <__malloc_unlock>:
 80140f0:	4801      	ldr	r0, [pc, #4]	; (80140f8 <__malloc_unlock+0x8>)
 80140f2:	f7ff b884 	b.w	80131fe <__retarget_lock_release_recursive>
 80140f6:	bf00      	nop
 80140f8:	200075e0 	.word	0x200075e0

080140fc <_realloc_r>:
 80140fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140fe:	4607      	mov	r7, r0
 8014100:	4614      	mov	r4, r2
 8014102:	460e      	mov	r6, r1
 8014104:	b921      	cbnz	r1, 8014110 <_realloc_r+0x14>
 8014106:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801410a:	4611      	mov	r1, r2
 801410c:	f7ff b8d0 	b.w	80132b0 <_malloc_r>
 8014110:	b922      	cbnz	r2, 801411c <_realloc_r+0x20>
 8014112:	f7ff f87d 	bl	8013210 <_free_r>
 8014116:	4625      	mov	r5, r4
 8014118:	4628      	mov	r0, r5
 801411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801411c:	f000 f88c 	bl	8014238 <_malloc_usable_size_r>
 8014120:	42a0      	cmp	r0, r4
 8014122:	d20f      	bcs.n	8014144 <_realloc_r+0x48>
 8014124:	4621      	mov	r1, r4
 8014126:	4638      	mov	r0, r7
 8014128:	f7ff f8c2 	bl	80132b0 <_malloc_r>
 801412c:	4605      	mov	r5, r0
 801412e:	2800      	cmp	r0, #0
 8014130:	d0f2      	beq.n	8014118 <_realloc_r+0x1c>
 8014132:	4631      	mov	r1, r6
 8014134:	4622      	mov	r2, r4
 8014136:	f7fe fe6b 	bl	8012e10 <memcpy>
 801413a:	4631      	mov	r1, r6
 801413c:	4638      	mov	r0, r7
 801413e:	f7ff f867 	bl	8013210 <_free_r>
 8014142:	e7e9      	b.n	8014118 <_realloc_r+0x1c>
 8014144:	4635      	mov	r5, r6
 8014146:	e7e7      	b.n	8014118 <_realloc_r+0x1c>

08014148 <_read_r>:
 8014148:	b538      	push	{r3, r4, r5, lr}
 801414a:	4d07      	ldr	r5, [pc, #28]	; (8014168 <_read_r+0x20>)
 801414c:	4604      	mov	r4, r0
 801414e:	4608      	mov	r0, r1
 8014150:	4611      	mov	r1, r2
 8014152:	2200      	movs	r2, #0
 8014154:	602a      	str	r2, [r5, #0]
 8014156:	461a      	mov	r2, r3
 8014158:	f7ed f9be 	bl	80014d8 <_read>
 801415c:	1c43      	adds	r3, r0, #1
 801415e:	d102      	bne.n	8014166 <_read_r+0x1e>
 8014160:	682b      	ldr	r3, [r5, #0]
 8014162:	b103      	cbz	r3, 8014166 <_read_r+0x1e>
 8014164:	6023      	str	r3, [r4, #0]
 8014166:	bd38      	pop	{r3, r4, r5, pc}
 8014168:	200075d8 	.word	0x200075d8

0801416c <_raise_r>:
 801416c:	291f      	cmp	r1, #31
 801416e:	b538      	push	{r3, r4, r5, lr}
 8014170:	4604      	mov	r4, r0
 8014172:	460d      	mov	r5, r1
 8014174:	d904      	bls.n	8014180 <_raise_r+0x14>
 8014176:	2316      	movs	r3, #22
 8014178:	6003      	str	r3, [r0, #0]
 801417a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801417e:	bd38      	pop	{r3, r4, r5, pc}
 8014180:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014182:	b112      	cbz	r2, 801418a <_raise_r+0x1e>
 8014184:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014188:	b94b      	cbnz	r3, 801419e <_raise_r+0x32>
 801418a:	4620      	mov	r0, r4
 801418c:	f000 f830 	bl	80141f0 <_getpid_r>
 8014190:	462a      	mov	r2, r5
 8014192:	4601      	mov	r1, r0
 8014194:	4620      	mov	r0, r4
 8014196:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801419a:	f000 b817 	b.w	80141cc <_kill_r>
 801419e:	2b01      	cmp	r3, #1
 80141a0:	d00a      	beq.n	80141b8 <_raise_r+0x4c>
 80141a2:	1c59      	adds	r1, r3, #1
 80141a4:	d103      	bne.n	80141ae <_raise_r+0x42>
 80141a6:	2316      	movs	r3, #22
 80141a8:	6003      	str	r3, [r0, #0]
 80141aa:	2001      	movs	r0, #1
 80141ac:	e7e7      	b.n	801417e <_raise_r+0x12>
 80141ae:	2400      	movs	r4, #0
 80141b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80141b4:	4628      	mov	r0, r5
 80141b6:	4798      	blx	r3
 80141b8:	2000      	movs	r0, #0
 80141ba:	e7e0      	b.n	801417e <_raise_r+0x12>

080141bc <raise>:
 80141bc:	4b02      	ldr	r3, [pc, #8]	; (80141c8 <raise+0xc>)
 80141be:	4601      	mov	r1, r0
 80141c0:	6818      	ldr	r0, [r3, #0]
 80141c2:	f7ff bfd3 	b.w	801416c <_raise_r>
 80141c6:	bf00      	nop
 80141c8:	20000030 	.word	0x20000030

080141cc <_kill_r>:
 80141cc:	b538      	push	{r3, r4, r5, lr}
 80141ce:	4d07      	ldr	r5, [pc, #28]	; (80141ec <_kill_r+0x20>)
 80141d0:	2300      	movs	r3, #0
 80141d2:	4604      	mov	r4, r0
 80141d4:	4608      	mov	r0, r1
 80141d6:	4611      	mov	r1, r2
 80141d8:	602b      	str	r3, [r5, #0]
 80141da:	f7ed f961 	bl	80014a0 <_kill>
 80141de:	1c43      	adds	r3, r0, #1
 80141e0:	d102      	bne.n	80141e8 <_kill_r+0x1c>
 80141e2:	682b      	ldr	r3, [r5, #0]
 80141e4:	b103      	cbz	r3, 80141e8 <_kill_r+0x1c>
 80141e6:	6023      	str	r3, [r4, #0]
 80141e8:	bd38      	pop	{r3, r4, r5, pc}
 80141ea:	bf00      	nop
 80141ec:	200075d8 	.word	0x200075d8

080141f0 <_getpid_r>:
 80141f0:	f7ed b94e 	b.w	8001490 <_getpid>

080141f4 <_fstat_r>:
 80141f4:	b538      	push	{r3, r4, r5, lr}
 80141f6:	4d07      	ldr	r5, [pc, #28]	; (8014214 <_fstat_r+0x20>)
 80141f8:	2300      	movs	r3, #0
 80141fa:	4604      	mov	r4, r0
 80141fc:	4608      	mov	r0, r1
 80141fe:	4611      	mov	r1, r2
 8014200:	602b      	str	r3, [r5, #0]
 8014202:	f7ed f9ae 	bl	8001562 <_fstat>
 8014206:	1c43      	adds	r3, r0, #1
 8014208:	d102      	bne.n	8014210 <_fstat_r+0x1c>
 801420a:	682b      	ldr	r3, [r5, #0]
 801420c:	b103      	cbz	r3, 8014210 <_fstat_r+0x1c>
 801420e:	6023      	str	r3, [r4, #0]
 8014210:	bd38      	pop	{r3, r4, r5, pc}
 8014212:	bf00      	nop
 8014214:	200075d8 	.word	0x200075d8

08014218 <_isatty_r>:
 8014218:	b538      	push	{r3, r4, r5, lr}
 801421a:	4d06      	ldr	r5, [pc, #24]	; (8014234 <_isatty_r+0x1c>)
 801421c:	2300      	movs	r3, #0
 801421e:	4604      	mov	r4, r0
 8014220:	4608      	mov	r0, r1
 8014222:	602b      	str	r3, [r5, #0]
 8014224:	f7ed f9ad 	bl	8001582 <_isatty>
 8014228:	1c43      	adds	r3, r0, #1
 801422a:	d102      	bne.n	8014232 <_isatty_r+0x1a>
 801422c:	682b      	ldr	r3, [r5, #0]
 801422e:	b103      	cbz	r3, 8014232 <_isatty_r+0x1a>
 8014230:	6023      	str	r3, [r4, #0]
 8014232:	bd38      	pop	{r3, r4, r5, pc}
 8014234:	200075d8 	.word	0x200075d8

08014238 <_malloc_usable_size_r>:
 8014238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801423c:	1f18      	subs	r0, r3, #4
 801423e:	2b00      	cmp	r3, #0
 8014240:	bfbc      	itt	lt
 8014242:	580b      	ldrlt	r3, [r1, r0]
 8014244:	18c0      	addlt	r0, r0, r3
 8014246:	4770      	bx	lr

08014248 <_init>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	bf00      	nop
 801424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801424e:	bc08      	pop	{r3}
 8014250:	469e      	mov	lr, r3
 8014252:	4770      	bx	lr

08014254 <_fini>:
 8014254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014256:	bf00      	nop
 8014258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801425a:	bc08      	pop	{r3}
 801425c:	469e      	mov	lr, r3
 801425e:	4770      	bx	lr
