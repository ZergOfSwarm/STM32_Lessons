
NRF_RX_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08004b5c  08004b5c  00014b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d60  08004d60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d68  08004d68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000124  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001044c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000213e  00000000  00000000  000304ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00032630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  00033580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bc7  00000000  00000000  00034408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010415  00000000  00000000  00055fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd5e0  00000000  00000000  000663e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001339c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004478  00000000  00000000  00133a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b44 	.word	0x08004b44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b44 	.word	0x08004b44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	0000      	movs	r0, r0
	...

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b09e      	sub	sp, #120	; 0x78
 800058c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f001 fa2b 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 fa4b 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fb13 	bl	8000bc0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800059a:	f000 fab1 	bl	8000b00 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800059e:	f000 fae5 	bl	8000b6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_Init(); // счётчик для микросекундных пауз
 80005a2:	f000 fb75 	bl	8000c90 <DWT_Init>

    //const uint64_t pipe0 = 0x787878787878;
    const uint64_t pipe1 = 0xE8E8F0F0E2LL; // адрес первой трубы
 80005a6:	a3e9      	add	r3, pc, #932	; (adr r3, 800094c <main+0x3c4>)
 80005a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ac:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
    //const uint64_t pipe2 = 0xE8E8F0F0A2LL;
    //const uint64_t pipe3 = 0xE8E8F0F0D1LL;
    //const uint64_t pipe4 = 0xE8E8F0F0C3LL;
    //const uint64_t pipe5 = 0xE8E8F0F0E7LL;

    uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 80005b0:	f000 fd7a 	bl	80010a8 <isChipConnected>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    char str[64] = {0,};
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
 80005be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c2:	223c      	movs	r2, #60	; 0x3c
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fe40 	bl	800424c <memset>
    snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 80005cc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80005d0:	4bc7      	ldr	r3, [pc, #796]	; (80008f0 <main+0x368>)
 80005d2:	4ac8      	ldr	r2, [pc, #800]	; (80008f4 <main+0x36c>)
 80005d4:	2140      	movs	r1, #64	; 0x40
 80005d6:	f003 fe41 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80005da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fdf6 	bl	80001d0 <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80005ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f0:	48c1      	ldr	r0, [pc, #772]	; (80008f8 <main+0x370>)
 80005f2:	f003 fa7e 	bl	8003af2 <HAL_UART_Transmit>

    res = NRF_Init(); // инициализация
 80005f6:	f000 fce1 	bl	8000fbc <NRF_Init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 8000600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <main+0x8c>
 8000608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800060c:	2bff      	cmp	r3, #255	; 0xff
 800060e:	d001      	beq.n	8000614 <main+0x8c>
 8000610:	4bb7      	ldr	r3, [pc, #732]	; (80008f0 <main+0x368>)
 8000612:	e000      	b.n	8000616 <main+0x8e>
 8000614:	4bb9      	ldr	r3, [pc, #740]	; (80008fc <main+0x374>)
 8000616:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800061a:	4ab9      	ldr	r2, [pc, #740]	; (8000900 <main+0x378>)
 800061c:	2140      	movs	r1, #64	; 0x40
 800061e:	f003 fe1d 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fdd2 	bl	80001d0 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	48af      	ldr	r0, [pc, #700]	; (80008f8 <main+0x370>)
 800063a:	f003 fa5a 	bl	8003af2 <HAL_UART_Transmit>

    ////////////// SET ////////////////
    enableAckPayload();
 800063e:	f000 fecf 	bl	80013e0 <enableAckPayload>
    //setAutoAck(false);
    //setPayloadSize(3);
    setChannel(200);
 8000642:	20c8      	movs	r0, #200	; 0xc8
 8000644:	f000 fc98 	bl	8000f78 <setChannel>
    openReadingPipe(1, pipe1);
 8000648:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800064c:	2001      	movs	r0, #1
 800064e:	f000 fe2f 	bl	80012b0 <openReadingPipe>
    startListening();
 8000652:	f000 fd3f 	bl	80010d4 <startListening>
    ///////////////////////////////////

    ////////////////////////// Вывод всяких статусов, для работы не нужно /////////////////////////////
    uint8_t status = get_status();
 8000656:	f000 fc87 	bl	8000f68 <get_status>
 800065a:	4603      	mov	r3, r0
 800065c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "get_status: 0x%02x\n", status);
 8000660:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000664:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000668:	4aa6      	ldr	r2, [pc, #664]	; (8000904 <main+0x37c>)
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	f003 fdf6 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdab 	bl	80001d0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	489c      	ldr	r0, [pc, #624]	; (80008f8 <main+0x370>)
 8000688:	f003 fa33 	bl	8003af2 <HAL_UART_Transmit>

    status = getPALevel();
 800068c:	f000 ff22 	bl	80014d4 <getPALevel>
 8000690:	4603      	mov	r3, r0
 8000692:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 8000696:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800069a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800069e:	4a9a      	ldr	r2, [pc, #616]	; (8000908 <main+0x380>)
 80006a0:	2140      	movs	r1, #64	; 0x40
 80006a2:	f003 fddb 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80006a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fd90 	bl	80001d0 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006bc:	488e      	ldr	r0, [pc, #568]	; (80008f8 <main+0x370>)
 80006be:	f003 fa18 	bl	8003af2 <HAL_UART_Transmit>

    if(status == 0x00)
 80006c2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d107      	bne.n	80006da <main+0x152>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MIN\n", strlen("RF24_PA_MIN\n"), 1000);
 80006ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ce:	220c      	movs	r2, #12
 80006d0:	498e      	ldr	r1, [pc, #568]	; (800090c <main+0x384>)
 80006d2:	4889      	ldr	r0, [pc, #548]	; (80008f8 <main+0x370>)
 80006d4:	f003 fa0d 	bl	8003af2 <HAL_UART_Transmit>
 80006d8:	e022      	b.n	8000720 <main+0x198>
    }
    else if(status == 0x01)
 80006da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d107      	bne.n	80006f2 <main+0x16a>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_LOW\n", strlen("RF24_PA_LOW\n"), 1000);
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	220c      	movs	r2, #12
 80006e8:	4989      	ldr	r1, [pc, #548]	; (8000910 <main+0x388>)
 80006ea:	4883      	ldr	r0, [pc, #524]	; (80008f8 <main+0x370>)
 80006ec:	f003 fa01 	bl	8003af2 <HAL_UART_Transmit>
 80006f0:	e016      	b.n	8000720 <main+0x198>
    }
    else if(status == 0x02)
 80006f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d107      	bne.n	800070a <main+0x182>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_HIGH\n", strlen("RF24_PA_HIGH\n"), 1000);
 80006fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fe:	220d      	movs	r2, #13
 8000700:	4984      	ldr	r1, [pc, #528]	; (8000914 <main+0x38c>)
 8000702:	487d      	ldr	r0, [pc, #500]	; (80008f8 <main+0x370>)
 8000704:	f003 f9f5 	bl	8003af2 <HAL_UART_Transmit>
 8000708:	e00a      	b.n	8000720 <main+0x198>
    }
    else if(status == 0x03)
 800070a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800070e:	2b03      	cmp	r3, #3
 8000710:	d106      	bne.n	8000720 <main+0x198>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 8000712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000716:	220c      	movs	r2, #12
 8000718:	497f      	ldr	r1, [pc, #508]	; (8000918 <main+0x390>)
 800071a:	4877      	ldr	r0, [pc, #476]	; (80008f8 <main+0x370>)
 800071c:	f003 f9e9 	bl	8003af2 <HAL_UART_Transmit>
    }

    status = getChannel();
 8000720:	f000 fc38 	bl	8000f94 <getChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 800072a:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800072e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4613      	mov	r3, r2
 800073a:	4a78      	ldr	r2, [pc, #480]	; (800091c <main+0x394>)
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	f003 fd8d 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd42 	bl	80001d0 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000758:	4867      	ldr	r0, [pc, #412]	; (80008f8 <main+0x370>)
 800075a:	f003 f9ca 	bl	8003af2 <HAL_UART_Transmit>

    status = getDataRate();
 800075e:	f000 ff07 	bl	8001570 <getDataRate>
 8000762:	4603      	mov	r3, r0
 8000764:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 8000768:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800076c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000770:	4a6b      	ldr	r2, [pc, #428]	; (8000920 <main+0x398>)
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	f003 fd72 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd27 	bl	80001d0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	485a      	ldr	r0, [pc, #360]	; (80008f8 <main+0x370>)
 8000790:	f003 f9af 	bl	8003af2 <HAL_UART_Transmit>

    if(status == 0x02)
 8000794:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000798:	2b02      	cmp	r3, #2
 800079a:	d107      	bne.n	80007ac <main+0x224>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 800079c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a0:	220d      	movs	r2, #13
 80007a2:	4960      	ldr	r1, [pc, #384]	; (8000924 <main+0x39c>)
 80007a4:	4854      	ldr	r0, [pc, #336]	; (80008f8 <main+0x370>)
 80007a6:	f003 f9a4 	bl	8003af2 <HAL_UART_Transmit>
 80007aa:	e012      	b.n	80007d2 <main+0x24a>
    }
    else if(status == 0x01)
 80007ac:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d107      	bne.n	80007c4 <main+0x23c>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_2MBPS\n", strlen("RF24_2MBPS\n"), 1000);
 80007b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b8:	220b      	movs	r2, #11
 80007ba:	495b      	ldr	r1, [pc, #364]	; (8000928 <main+0x3a0>)
 80007bc:	484e      	ldr	r0, [pc, #312]	; (80008f8 <main+0x370>)
 80007be:	f003 f998 	bl	8003af2 <HAL_UART_Transmit>
 80007c2:	e006      	b.n	80007d2 <main+0x24a>
    }
    else
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 80007c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c8:	220b      	movs	r2, #11
 80007ca:	4958      	ldr	r1, [pc, #352]	; (800092c <main+0x3a4>)
 80007cc:	484a      	ldr	r0, [pc, #296]	; (80008f8 <main+0x370>)
 80007ce:	f003 f990 	bl	8003af2 <HAL_UART_Transmit>
    }

    status = getPayloadSize();
 80007d2:	f000 fbe7 	bl	8000fa4 <getPayloadSize>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getPayloadSize: %d\n", status);
 80007dc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80007e0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80007e4:	4a52      	ldr	r2, [pc, #328]	; (8000930 <main+0x3a8>)
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	f003 fd38 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fced 	bl	80001d0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	483d      	ldr	r0, [pc, #244]	; (80008f8 <main+0x370>)
 8000804:	f003 f975 	bl	8003af2 <HAL_UART_Transmit>

    status = getCRCLength();
 8000808:	f000 fecf 	bl	80015aa <getCRCLength>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
    snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 8000812:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800081a:	4a46      	ldr	r2, [pc, #280]	; (8000934 <main+0x3ac>)
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	f003 fd1d 	bl	800425c <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fcd2 	bl	80001d0 <strlen>
 800082c:	4603      	mov	r3, r0
 800082e:	b29a      	uxth	r2, r3
 8000830:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	482f      	ldr	r0, [pc, #188]	; (80008f8 <main+0x370>)
 800083a:	f003 f95a 	bl	8003af2 <HAL_UART_Transmit>

    if(status == 0x00)
 800083e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000842:	2b00      	cmp	r3, #0
 8000844:	d107      	bne.n	8000856 <main+0x2ce>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_DISABLED\n", strlen("RF24_CRC_DISABLED\n"), 1000);
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	2212      	movs	r2, #18
 800084c:	493a      	ldr	r1, [pc, #232]	; (8000938 <main+0x3b0>)
 800084e:	482a      	ldr	r0, [pc, #168]	; (80008f8 <main+0x370>)
 8000850:	f003 f94f 	bl	8003af2 <HAL_UART_Transmit>
 8000854:	e016      	b.n	8000884 <main+0x2fc>
    }
    else if(status == 0x01)
 8000856:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800085a:	2b01      	cmp	r3, #1
 800085c:	d107      	bne.n	800086e <main+0x2e6>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_8\n", strlen("RF24_CRC_8\n"), 1000);
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	220b      	movs	r2, #11
 8000864:	4935      	ldr	r1, [pc, #212]	; (800093c <main+0x3b4>)
 8000866:	4824      	ldr	r0, [pc, #144]	; (80008f8 <main+0x370>)
 8000868:	f003 f943 	bl	8003af2 <HAL_UART_Transmit>
 800086c:	e00a      	b.n	8000884 <main+0x2fc>
    }
    else if(status == 0x02)
 800086e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000872:	2b02      	cmp	r3, #2
 8000874:	d106      	bne.n	8000884 <main+0x2fc>
    {
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	220c      	movs	r2, #12
 800087c:	4930      	ldr	r1, [pc, #192]	; (8000940 <main+0x3b8>)
 800087e:	481e      	ldr	r0, [pc, #120]	; (80008f8 <main+0x370>)
 8000880:	f003 f937 	bl	8003af2 <HAL_UART_Transmit>
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////


    maskIRQ(true, true, true); // маскируем прерывания
 8000884:	2201      	movs	r2, #1
 8000886:	2101      	movs	r1, #1
 8000888:	2001      	movs	r0, #1
 800088a:	f000 fc75 	bl	8001178 <maskIRQ>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ///////////////////////////////////// ПРИЁМ /////////////////////////////////////////////
	  	uint8_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]
	  	static uint8_t remsg = 0;
	  	uint8_t pipe_num = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  	if(available(&pipe_num)) // проверяем пришло ли что-то
 80008aa:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fcc8 	bl	8001244 <available>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d0e9      	beq.n	800088e <main+0x306>
	  	{
	  		remsg++;
 80008ba:	4b22      	ldr	r3, [pc, #136]	; (8000944 <main+0x3bc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3301      	adds	r3, #1
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <main+0x3bc>)
 80008c4:	701a      	strb	r2, [r3, #0]

	  		writeAckPayload(pipe_num, &remsg, sizeof(remsg)); // отправляем полезную нагрузку вместе с подтверждением
 80008c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008ca:	2201      	movs	r2, #1
 80008cc:	491d      	ldr	r1, [pc, #116]	; (8000944 <main+0x3bc>)
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fda6 	bl	8001420 <writeAckPayload>

	  		if(pipe_num == 0) // проверяем в какую трубу пришли данные
 80008d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d13b      	bne.n	8000954 <main+0x3cc>
	  		{
	  			HAL_UART_Transmit(&huart1, (uint8_t*)"pipe 0\n", strlen("pipe 0\n"), 1000);
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	2207      	movs	r2, #7
 80008e2:	4919      	ldr	r1, [pc, #100]	; (8000948 <main+0x3c0>)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <main+0x370>)
 80008e6:	f003 f904 	bl	8003af2 <HAL_UART_Transmit>
 80008ea:	e7d0      	b.n	800088e <main+0x306>
 80008ec:	f3af 8000 	nop.w
 80008f0:	08004b64 	.word	0x08004b64
 80008f4:	08004b68 	.word	0x08004b68
 80008f8:	200000e4 	.word	0x200000e4
 80008fc:	08004b78 	.word	0x08004b78
 8000900:	08004b80 	.word	0x08004b80
 8000904:	08004b8c 	.word	0x08004b8c
 8000908:	08004ba0 	.word	0x08004ba0
 800090c:	08004bb8 	.word	0x08004bb8
 8000910:	08004bc8 	.word	0x08004bc8
 8000914:	08004bd8 	.word	0x08004bd8
 8000918:	08004be8 	.word	0x08004be8
 800091c:	08004bf8 	.word	0x08004bf8
 8000920:	08004c14 	.word	0x08004c14
 8000924:	08004c2c 	.word	0x08004c2c
 8000928:	08004c3c 	.word	0x08004c3c
 800092c:	08004c48 	.word	0x08004c48
 8000930:	08004c54 	.word	0x08004c54
 8000934:	08004c68 	.word	0x08004c68
 8000938:	08004c80 	.word	0x08004c80
 800093c:	08004c94 	.word	0x08004c94
 8000940:	08004ca0 	.word	0x08004ca0
 8000944:	20000128 	.word	0x20000128
 8000948:	08004cb0 	.word	0x08004cb0
 800094c:	e8f0f0e2 	.word	0xe8f0f0e2
 8000950:	000000e8 	.word	0x000000e8
	  		}

	  		else if(pipe_num == 1)
 8000954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000958:	2b01      	cmp	r3, #1
 800095a:	d13d      	bne.n	80009d8 <main+0x450>
	  		{
	  			HAL_UART_Transmit(&huart1, (uint8_t*)"pipe 1\n", strlen("pipe 1\n"), 1000);
 800095c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000960:	2207      	movs	r2, #7
 8000962:	492c      	ldr	r1, [pc, #176]	; (8000a14 <main+0x48c>)
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <main+0x490>)
 8000966:	f003 f8c4 	bl	8003af2 <HAL_UART_Transmit>

	  			uint8_t count = getDynamicPayloadSize(); // смотрим сколько байт прилетело
 800096a:	f000 fc33 	bl	80011d4 <getDynamicPayloadSize>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	  			read(&nrf_data, count); // Читаем данные в массив nrf_data и указываем сколько байт читать
 8000974:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000978:	463b      	mov	r3, r7
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fc83 	bl	8001288 <read>

	  			if(nrf_data[0] == 77 && nrf_data[1] == 86 && nrf_data[2] == 97) // проверяем правильность данных
 8000982:	783b      	ldrb	r3, [r7, #0]
 8000984:	2b4d      	cmp	r3, #77	; 0x4d
 8000986:	d182      	bne.n	800088e <main+0x306>
 8000988:	787b      	ldrb	r3, [r7, #1]
 800098a:	2b56      	cmp	r3, #86	; 0x56
 800098c:	f47f af7f 	bne.w	800088e <main+0x306>
 8000990:	78bb      	ldrb	r3, [r7, #2]
 8000992:	2b61      	cmp	r3, #97	; 0x61
 8000994:	f47f af7b 	bne.w	800088e <main+0x306>
	  			{
	  				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000998:	2102      	movs	r1, #2
 800099a:	4820      	ldr	r0, [pc, #128]	; (8000a1c <main+0x494>)
 800099c:	f001 fb21 	bl	8001fe2 <HAL_GPIO_TogglePin>
	  				snprintf(str, 64, "data[0]=%d data[1]=%d data[2]=%d\n", nrf_data[0], nrf_data[1], nrf_data[2]);
 80009a0:	783b      	ldrb	r3, [r7, #0]
 80009a2:	4619      	mov	r1, r3
 80009a4:	787b      	ldrb	r3, [r7, #1]
 80009a6:	78ba      	ldrb	r2, [r7, #2]
 80009a8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	460b      	mov	r3, r1
 80009b2:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <main+0x498>)
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	f003 fc51 	bl	800425c <sniprintf>
	  				HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fc06 	bl	80001d0 <strlen>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d0:	4811      	ldr	r0, [pc, #68]	; (8000a18 <main+0x490>)
 80009d2:	f003 f88e 	bl	8003af2 <HAL_UART_Transmit>
 80009d6:	e75a      	b.n	800088e <main+0x306>
	  			}
	  		}

	  		else if(pipe_num == 2)
 80009d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d113      	bne.n	8000a08 <main+0x480>
	  		{
	  			HAL_UART_Transmit(&huart1, (uint8_t*)"pipe 2\n", strlen("pipe 2\n"), 1000);
 80009e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009e4:	2207      	movs	r2, #7
 80009e6:	490f      	ldr	r1, [pc, #60]	; (8000a24 <main+0x49c>)
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <main+0x490>)
 80009ea:	f003 f882 	bl	8003af2 <HAL_UART_Transmit>
 80009ee:	e74e      	b.n	800088e <main+0x306>

	  		else
	  		{
	  			while(availableMy()) // если данные придут от неуказанной трубы, то попадут сюда
	  			{
	  				read(&nrf_data, sizeof(nrf_data));
 80009f0:	463b      	mov	r3, r7
 80009f2:	2120      	movs	r1, #32
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fc47 	bl	8001288 <read>
	  				HAL_UART_Transmit(&huart1, (uint8_t*)"Unknown pipe\n", strlen("Unknown pipe\n"), 1000);
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	220d      	movs	r2, #13
 8000a00:	4909      	ldr	r1, [pc, #36]	; (8000a28 <main+0x4a0>)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <main+0x490>)
 8000a04:	f003 f875 	bl	8003af2 <HAL_UART_Transmit>
	  			while(availableMy()) // если данные придут от неуказанной трубы, то попадут сюда
 8000a08:	f000 fc14 	bl	8001234 <availableMy>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1ee      	bne.n	80009f0 <main+0x468>
  {
 8000a12:	e73c      	b.n	800088e <main+0x306>
 8000a14:	08004cb8 	.word	0x08004cb8
 8000a18:	200000e4 	.word	0x200000e4
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	08004cc0 	.word	0x08004cc0
 8000a24:	08004ce4 	.word	0x08004ce4
 8000a28:	08004cec 	.word	0x08004cec

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f003 fc06 	bl	800424c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <SystemClock_Config+0xd0>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	6013      	str	r3, [r2, #0]
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <SystemClock_Config+0xd0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa0:	23a8      	movs	r3, #168	; 0xa8
 8000aa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fab1 	bl	8002018 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000abc:	f000 f8e2 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000acc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2105      	movs	r1, #5
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fd12 	bl	8002508 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aea:	f000 f8cb 	bl	8000c84 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_SPI1_Init+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b34:	2210      	movs	r2, #16
 8000b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_SPI1_Init+0x64>)
 8000b52:	f001 ff2b 	bl	80029ac <HAL_SPI_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f000 f892 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	f002 ff58 	bl	8003a58 <HAL_UART_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bae:	f000 f869 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000e4 	.word	0x200000e4
 8000bbc:	40011000 	.word	0x40011000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_GPIO_Init+0x98>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <MX_GPIO_Init+0x98>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_GPIO_Init+0x98>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_GPIO_Init+0x98>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <MX_GPIO_Init+0x98>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_GPIO_Init+0x98>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	211a      	movs	r1, #26
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c14:	f001 f9cc 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CE_Pin|CSN_Pin;
 8000c18:	231a      	movs	r3, #26
 8000c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c30:	f001 f822 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000c34:	2304      	movs	r3, #4
 8000c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c38:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4619      	mov	r1, r3
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <MX_GPIO_Init+0x9c>)
 8000c4a:	f001 f815 	bl	8001c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c4e:	bf00      	nop
 8000c50:	3720      	adds	r7, #32
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c72:	f000 fedb 	bl	8001a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40002000 	.word	0x40002000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <DWT_Init>:
uint8_t addr_width = 0; /**< The address width to use - 3,4 or 5 bytes. */
uint8_t txDelay = 0;


void DWT_Init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <DWT_Init+0x28>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <DWT_Init+0x28>)
 8000c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c9e:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <DWT_Init+0x2c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <DWT_Init+0x2c>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000edfc 	.word	0xe000edfc
 8000cbc:	e0001000 	.word	0xe0001000

08000cc0 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <delay_us+0x3c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <delay_us+0x40>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	0c9a      	lsrs	r2, r3, #18
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <delay_us+0x44>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8000ce2:	bf00      	nop
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <delay_us+0x44>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d8fa      	bhi.n	8000ce4 <delay_us+0x24>
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20000000 	.word	0x20000000
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	e0001000 	.word	0xe0001000

08000d08 <csn>:

void csn(uint8_t level)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	461a      	mov	r2, r3
 8000d16:	2110      	movs	r1, #16
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <csn+0x24>)
 8000d1a:	f001 f949 	bl	8001fb0 <HAL_GPIO_WritePin>
	delay_us(5);
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f7ff ffce 	bl	8000cc0 <delay_us>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40020000 	.word	0x40020000

08000d30 <ce>:

void ce(uint8_t level)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	2108      	movs	r1, #8
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <ce+0x20>)
 8000d42:	f001 f935 	bl	8001fb0 <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40020000 	.word	0x40020000

08000d54 <read_register>:

uint8_t read_register(uint8_t reg)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af02      	add	r7, sp, #8
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 031f 	and.w	r3, r3, #31
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ffcb 	bl	8000d08 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8000d72:	f107 020e 	add.w	r2, r7, #14
 8000d76:	f107 010f 	add.w	r1, r7, #15
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <read_register+0x58>)
 8000d84:	f002 f8e8 	bl	8002f58 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 8000d88:	f107 020e 	add.w	r2, r7, #14
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	21ff      	movs	r1, #255	; 0xff
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <read_register+0x58>)
 8000d98:	f002 f8de 	bl	8002f58 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff ffb3 	bl	8000d08 <csn>
	return dt;
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000008c 	.word	0x2000008c

08000db0 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f043 0320 	orr.w	r3, r3, #32
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff ff97 	bl	8000d08 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000dda:	f107 020f 	add.w	r2, r7, #15
 8000dde:	f107 010e 	add.w	r1, r7, #14
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2301      	movs	r3, #1
 8000de8:	4808      	ldr	r0, [pc, #32]	; (8000e0c <write_registerMy+0x5c>)
 8000dea:	f002 f8b5 	bl	8002f58 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	2364      	movs	r3, #100	; 0x64
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <write_registerMy+0x5c>)
 8000df8:	f001 fe61 	bl	8002abe <HAL_SPI_Transmit>
	csn(HIGH);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff ff83 	bl	8000d08 <csn>
	return status;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000008c 	.word	0x2000008c

08000e10 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 031f 	and.w	r3, r3, #31
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f043 0320 	orr.w	r3, r3, #32
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff ff67 	bl	8000d08 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8000e3a:	f107 020f 	add.w	r2, r7, #15
 8000e3e:	f107 010e 	add.w	r1, r7, #14
 8000e42:	2364      	movs	r3, #100	; 0x64
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2301      	movs	r3, #1
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <write_register+0x5c>)
 8000e4a:	f002 f885 	bl	8002f58 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8000e4e:	1db9      	adds	r1, r7, #6
 8000e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e54:	2201      	movs	r2, #1
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <write_register+0x5c>)
 8000e58:	f001 fe31 	bl	8002abe <HAL_SPI_Transmit>
	csn(HIGH);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff53 	bl	8000d08 <csn>
	return status;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000008c 	.word	0x2000008c

08000e70 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	uint8_t status = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	75bb      	strb	r3, [r7, #22]
	uint8_t* current = (uint8_t*)buf;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	613b      	str	r3, [r7, #16]

	if(data_len > payload_size)
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <read_payload+0x90>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	78fa      	ldrb	r2, [r7, #3]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d902      	bls.n	8000e94 <read_payload+0x24>
	{
		data_len = payload_size;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <read_payload+0x90>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	70fb      	strb	r3, [r7, #3]
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <read_payload+0x94>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <read_payload+0x30>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	e004      	b.n	8000eaa <read_payload+0x3a>
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <read_payload+0x90>)
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	78fb      	ldrb	r3, [r7, #3]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	75fb      	strb	r3, [r7, #23]

	uint8_t addr = R_RX_PAYLOAD;
 8000eac:	2361      	movs	r3, #97	; 0x61
 8000eae:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff ff29 	bl	8000d08 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 8000eb6:	f107 010f 	add.w	r1, r7, #15
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <read_payload+0x98>)
 8000ec0:	f001 fdfd 	bl	8002abe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	6939      	ldr	r1, [r7, #16]
 8000ecc:	480e      	ldr	r0, [pc, #56]	; (8000f08 <read_payload+0x98>)
 8000ece:	f001 ff32 	bl	8002d36 <HAL_SPI_Receive>

	while(blank_len--)
 8000ed2:	e008      	b.n	8000ee6 <read_payload+0x76>
	{
		uint8_t empt = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73bb      	strb	r3, [r7, #14]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8000ed8:	f107 010e 	add.w	r1, r7, #14
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <read_payload+0x98>)
 8000ee2:	f001 ff28 	bl	8002d36 <HAL_SPI_Receive>
	while(blank_len--)
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	1e5a      	subs	r2, r3, #1
 8000eea:	75fa      	strb	r2, [r7, #23]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f1      	bne.n	8000ed4 <read_payload+0x64>
	}

	csn(HIGH);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff ff09 	bl	8000d08 <csn>
	return status;
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000012a 	.word	0x2000012a
 8000f04:	2000012b 	.word	0x2000012b
 8000f08:	2000008c 	.word	0x2000008c

08000f0c <flush_rx>:

uint8_t flush_rx(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8000f10:	20e2      	movs	r0, #226	; 0xe2
 8000f12:	f000 f80b 	bl	8000f2c <spiTrans>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <flush_tx>:

uint8_t flush_tx(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8000f20:	20e1      	movs	r0, #225	; 0xe1
 8000f22:	f000 f803 	bl	8000f2c <spiTrans>
 8000f26:	4603      	mov	r3, r0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fee4 	bl	8000d08 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8000f40:	f107 020f 	add.w	r2, r7, #15
 8000f44:	1df9      	adds	r1, r7, #7
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <spiTrans+0x38>)
 8000f50:	f002 f802 	bl	8002f58 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fed7 	bl	8000d08 <csn>
	return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000008c 	.word	0x2000008c

08000f68 <get_status>:

uint8_t get_status(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	return spiTrans(NOP);
 8000f6c:	20ff      	movs	r0, #255	; 0xff
 8000f6e:	f7ff ffdd 	bl	8000f2c <spiTrans>
 8000f72:	4603      	mov	r3, r0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <setChannel>:

void setChannel(uint8_t channel)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4619      	mov	r1, r3
 8000f86:	2005      	movs	r0, #5
 8000f88:	f7ff ff42 	bl	8000e10 <write_register>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <getChannel>:

uint8_t getChannel()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	return read_register(RF_CH);
 8000f98:	2005      	movs	r0, #5
 8000f9a:	f7ff fedb 	bl	8000d54 <read_register>
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <getPayloadSize>:
{
	payload_size = rf24_min(size, 32);
}

uint8_t getPayloadSize(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	return payload_size;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <getPayloadSize+0x14>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000012a 	.word	0x2000012a

08000fbc <NRF_Init>:

uint8_t NRF_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <NRF_Init+0xd8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <NRF_Init+0xdc>)
 8000fce:	2220      	movs	r2, #32
 8000fd0:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <NRF_Init+0xe0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8000fd8:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <NRF_Init+0xe4>)
 8000fda:	2205      	movs	r2, #5
 8000fdc:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 8000fde:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <NRF_Init+0xe8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fea3 	bl	8000d30 <ce>
	csn(HIGH);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fe8c 	bl	8000d08 <csn>
	HAL_Delay(5);
 8000ff0:	2005      	movs	r0, #5
 8000ff2:	f000 fd3b 	bl	8001a6c <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8000ff6:	210c      	movs	r1, #12
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ff09 	bl	8000e10 <write_register>
	setRetries(5, 15);
 8000ffe:	210f      	movs	r1, #15
 8001000:	2005      	movs	r0, #5
 8001002:	f000 fafa 	bl	80015fa <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8001006:	2003      	movs	r0, #3
 8001008:	f000 fa40 	bl	800148c <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 800100c:	2002      	movs	r0, #2
 800100e:	f000 fa6f 	bl	80014f0 <setDataRate>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <NRF_Init+0x62>
	{
		p_variant = true;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <NRF_Init+0xd8>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 800101e:	2006      	movs	r0, #6
 8001020:	f7ff fe98 	bl	8000d54 <read_register>
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8001028:	2000      	movs	r0, #0
 800102a:	f000 fa61 	bl	80014f0 <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 800102e:	f000 f9b7 	bl	80013a0 <toggle_features>
	write_register(FEATURE, 0);
 8001032:	2100      	movs	r1, #0
 8001034:	201d      	movs	r0, #29
 8001036:	f7ff feeb 	bl	8000e10 <write_register>
	write_register(DYNPD, 0);
 800103a:	2100      	movs	r1, #0
 800103c:	201c      	movs	r0, #28
 800103e:	f7ff fee7 	bl	8000e10 <write_register>
	dynamic_payloads_enabled = false;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <NRF_Init+0xe0>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001048:	2170      	movs	r1, #112	; 0x70
 800104a:	2007      	movs	r0, #7
 800104c:	f7ff fee0 	bl	8000e10 <write_register>
	setChannel(76);
 8001050:	204c      	movs	r0, #76	; 0x4c
 8001052:	f7ff ff91 	bl	8000f78 <setChannel>
	flush_rx();
 8001056:	f7ff ff59 	bl	8000f0c <flush_rx>
	flush_tx();
 800105a:	f7ff ff5f 	bl	8000f1c <flush_tx>
	powerUp(); //Power up by default when begin() is called
 800105e:	f000 f86f 	bl	8001140 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff fe76 	bl	8000d54 <read_register>
 8001068:	4603      	mov	r3, r0
 800106a:	f023 0301 	bic.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fecc 	bl	8000e10 <write_register>
	return (setup != 0 && setup != 0xff);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <NRF_Init+0xcc>
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2bff      	cmp	r3, #255	; 0xff
 8001082:	d001      	beq.n	8001088 <NRF_Init+0xcc>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <NRF_Init+0xce>
 8001088:	2300      	movs	r3, #0
 800108a:	b2db      	uxtb	r3, r3
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000129 	.word	0x20000129
 8001098:	2000012a 	.word	0x2000012a
 800109c:	2000012b 	.word	0x2000012b
 80010a0:	20000131 	.word	0x20000131
 80010a4:	2000012c 	.word	0x2000012c

080010a8 <isChipConnected>:

bool isChipConnected()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff fe50 	bl	8000d54 <read_register>
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <isChipConnected+0x20>
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d801      	bhi.n	80010c8 <isChipConnected+0x20>
	{
		return true;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <isChipConnected+0x22>
	}

	return false;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <startListening>:

void startListening(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	powerUp();
 80010d8:	f000 f832 	bl	8001140 <powerUp>

	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fe39 	bl	8000d54 <read_register>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	4619      	mov	r1, r3
 80010ec:	2000      	movs	r0, #0
 80010ee:	f7ff fe8f 	bl	8000e10 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 80010f2:	2170      	movs	r1, #112	; 0x70
 80010f4:	2007      	movs	r0, #7
 80010f6:	f7ff fe8b 	bl	8000e10 <write_register>
	ce(HIGH);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fe18 	bl	8000d30 <ce>
	// Restore the pipe0 adddress, if exists
	if(pipe0_reading_address[0] > 0)
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <startListening+0x64>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d007      	beq.n	8001118 <startListening+0x44>
	{
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <startListening+0x68>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	490a      	ldr	r1, [pc, #40]	; (8001138 <startListening+0x64>)
 8001110:	200a      	movs	r0, #10
 8001112:	f7ff fe4d 	bl	8000db0 <write_registerMy>
 8001116:	e002      	b.n	800111e <startListening+0x4a>
	}
	else
	{
		closeReadingPipe(0);
 8001118:	2000      	movs	r0, #0
 800111a:	f000 f921 	bl	8001360 <closeReadingPipe>
	}

	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 800111e:	201d      	movs	r0, #29
 8001120:	f7ff fe18 	bl	8000d54 <read_register>
 8001124:	4603      	mov	r3, r0
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <startListening+0x5e>
	{
		flush_tx();
 800112e:	f7ff fef5 	bl	8000f1c <flush_tx>
	}
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000012c 	.word	0x2000012c
 800113c:	20000131 	.word	0x20000131

08001140 <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fe04 	bl	8000d54 <read_register>
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10a      	bne.n	8001170 <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fe53 	bl	8000e10 <write_register>
		HAL_Delay(5);
 800116a:	2005      	movs	r0, #5
 800116c:	f000 fc7e 	bl	8001a6c <HAL_Delay>
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <maskIRQ>:
		ce(HIGH);
	}
}

void maskIRQ(bool tx, bool fail, bool rx)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	460b      	mov	r3, r1
 8001184:	71bb      	strb	r3, [r7, #6]
 8001186:	4613      	mov	r3, r2
 8001188:	717b      	strb	r3, [r7, #5]
	uint8_t config = read_register(NRF_CONFIG);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fde2 	bl	8000d54 <read_register>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800119a:	73fb      	strb	r3, [r7, #15]
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	015b      	lsls	r3, r3, #5
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25a      	sxtb	r2, r3
 80011ac:	797b      	ldrb	r3, [r7, #5]
 80011ae:	019b      	lsls	r3, r3, #6
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b25a      	sxtb	r2, r3
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	73fb      	strb	r3, [r7, #15]
	write_register(NRF_CONFIG, config);
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	4619      	mov	r1, r3
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fe23 	bl	8000e10 <write_register>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <getDynamicPayloadSize>:

uint8_t getDynamicPayloadSize(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af02      	add	r7, sp, #8
	uint8_t result = 0, addr;
 80011da:	2300      	movs	r3, #0
 80011dc:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fd92 	bl	8000d08 <csn>
	addr = R_RX_PL_WID;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1, &addr, &result, 1, 1000);
 80011e8:	1dfa      	adds	r2, r7, #7
 80011ea:	1db9      	adds	r1, r7, #6
 80011ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	480e      	ldr	r0, [pc, #56]	; (8001230 <getDynamicPayloadSize+0x5c>)
 80011f6:	f001 feaf 	bl	8002f58 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &result, 1, 1000);
 80011fa:	1dfa      	adds	r2, r7, #7
 80011fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2301      	movs	r3, #1
 8001204:	21ff      	movs	r1, #255	; 0xff
 8001206:	480a      	ldr	r0, [pc, #40]	; (8001230 <getDynamicPayloadSize+0x5c>)
 8001208:	f001 fea6 	bl	8002f58 <HAL_SPI_TransmitReceive>
	csn(HIGH);
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fd7b 	bl	8000d08 <csn>

	if(result > 32)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b20      	cmp	r3, #32
 8001216:	d906      	bls.n	8001226 <getDynamicPayloadSize+0x52>
	{
		flush_rx();
 8001218:	f7ff fe78 	bl	8000f0c <flush_rx>
		HAL_Delay(2);
 800121c:	2002      	movs	r0, #2
 800121e:	f000 fc25 	bl	8001a6c <HAL_Delay>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <getDynamicPayloadSize+0x54>
	}

	return result;
 8001226:	79fb      	ldrb	r3, [r7, #7]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000008c 	.word	0x2000008c

08001234 <availableMy>:

bool availableMy(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	return available(NULL);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f803 	bl	8001244 <available>
 800123e:	4603      	mov	r3, r0
}
 8001240:	4618      	mov	r0, r3
 8001242:	bd80      	pop	{r7, pc}

08001244 <available>:

bool available(uint8_t* pipe_num)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 800124c:	2017      	movs	r0, #23
 800124e:	f7ff fd81 	bl	8000d54 <read_register>
 8001252:	4603      	mov	r3, r0
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d110      	bne.n	800127e <available+0x3a>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <available+0x36>
		{
			uint8_t status = get_status();
 8001262:	f7ff fe81 	bl	8000f68 <get_status>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
			*pipe_num = (status >> RX_P_NO) & 0x07;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	b2da      	uxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	701a      	strb	r2, [r3, #0]
		}

		return 1;
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <available+0x3c>
	}

	return 0;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <read>:

void read(void* buf, uint8_t len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]
	read_payload(buf, len);
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fde9 	bl	8000e70 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 800129e:	2170      	movs	r1, #112	; 0x70
 80012a0:	2007      	movs	r0, #7
 80012a2:	f7ff fdb5 	bl	8000e10 <write_register>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4601      	mov	r1, r0
 80012b8:	e9c7 2300 	strd	r2, r3, [r7]
 80012bc:	460b      	mov	r3, r1
 80012be:	73fb      	strb	r3, [r7, #15]
	if(child == 0)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d107      	bne.n	80012d6 <openReadingPipe+0x26>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <openReadingPipe+0x98>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	481e      	ldr	r0, [pc, #120]	; (800134c <openReadingPipe+0x9c>)
 80012d2:	f002 ffad 	bl	8004230 <memcpy>
	}

	if(child <= 6)
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b06      	cmp	r3, #6
 80012da:	d830      	bhi.n	800133e <openReadingPipe+0x8e>
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d809      	bhi.n	80012f6 <openReadingPipe+0x46>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <openReadingPipe+0xa0>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <openReadingPipe+0x98>)
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	4639      	mov	r1, r7
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd5e 	bl	8000db0 <write_registerMy>
 80012f4:	e007      	b.n	8001306 <openReadingPipe+0x56>
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	4a15      	ldr	r2, [pc, #84]	; (8001350 <openReadingPipe+0xa0>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	4639      	mov	r1, r7
 80012fe:	2201      	movs	r2, #1
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fd55 	bl	8000db0 <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4a12      	ldr	r2, [pc, #72]	; (8001354 <openReadingPipe+0xa4>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	4a12      	ldr	r2, [pc, #72]	; (8001358 <openReadingPipe+0xa8>)
 800130e:	7812      	ldrb	r2, [r2, #0]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fd7c 	bl	8000e10 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 8001318:	2002      	movs	r0, #2
 800131a:	f7ff fd1b 	bl	8000d54 <read_register>
 800131e:	4603      	mov	r3, r0
 8001320:	b25a      	sxtb	r2, r3
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	490d      	ldr	r1, [pc, #52]	; (800135c <openReadingPipe+0xac>)
 8001326:	5ccb      	ldrb	r3, [r1, r3]
 8001328:	4619      	mov	r1, r3
 800132a:	2301      	movs	r3, #1
 800132c:	408b      	lsls	r3, r1
 800132e:	b25b      	sxtb	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4619      	mov	r1, r3
 8001338:	2002      	movs	r0, #2
 800133a:	f7ff fd69 	bl	8000e10 <write_register>
	}
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000131 	.word	0x20000131
 800134c:	2000012c 	.word	0x2000012c
 8001350:	08004d04 	.word	0x08004d04
 8001354:	08004d0c 	.word	0x08004d0c
 8001358:	2000012a 	.word	0x2000012a
 800135c:	08004cfc 	.word	0x08004cfc

08001360 <closeReadingPipe>:
        addr_width = 2;
    }
}

void closeReadingPipe(uint8_t pipe)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff fcf2 	bl	8000d54 <read_register>
 8001370:	4603      	mov	r3, r0
 8001372:	b25a      	sxtb	r2, r3
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4909      	ldr	r1, [pc, #36]	; (800139c <closeReadingPipe+0x3c>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	4619      	mov	r1, r3
 800137c:	2301      	movs	r3, #1
 800137e:	408b      	lsls	r3, r1
 8001380:	b25b      	sxtb	r3, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	b25b      	sxtb	r3, r3
 8001386:	4013      	ands	r3, r2
 8001388:	b25b      	sxtb	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4619      	mov	r1, r3
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff fd3e 	bl	8000e10 <write_register>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08004cfc 	.word	0x08004cfc

080013a0 <toggle_features>:

void toggle_features(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 80013a6:	2350      	movs	r3, #80	; 0x50
 80013a8:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fcac 	bl	8000d08 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	2201      	movs	r2, #1
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <toggle_features+0x3c>)
 80013ba:	f001 fb80 	bl	8002abe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	2201      	movs	r2, #1
 80013c4:	2173      	movs	r1, #115	; 0x73
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <toggle_features+0x3c>)
 80013c8:	f001 fb79 	bl	8002abe <HAL_SPI_Transmit>
	csn(HIGH);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f7ff fc9b 	bl	8000d08 <csn>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000008c 	.word	0x2000008c

080013e0 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 80013e4:	201d      	movs	r0, #29
 80013e6:	f7ff fcb5 	bl	8000d54 <read_register>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f043 0306 	orr.w	r3, r3, #6
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	201d      	movs	r0, #29
 80013f6:	f7ff fd0b 	bl	8000e10 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 80013fa:	201c      	movs	r0, #28
 80013fc:	f7ff fcaa 	bl	8000d54 <read_register>
 8001400:	4603      	mov	r3, r0
 8001402:	f043 0303 	orr.w	r3, r3, #3
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	201c      	movs	r0, #28
 800140c:	f7ff fd00 	bl	8000e10 <write_register>
	dynamic_payloads_enabled = true;
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <enableAckPayload+0x3c>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000012b 	.word	0x2000012b

08001420 <writeAckPayload>:
{
    write_register(FEATURE, read_register(FEATURE) | (1 << EN_DYN_ACK));
}

void writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	4613      	mov	r3, r2
 800142e:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (const uint8_t*)buf;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	60fb      	str	r3, [r7, #12]
	uint8_t data_len = rf24_min(len, 32);
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2b20      	cmp	r3, #32
 8001438:	bf28      	it	cs
 800143a:	2320      	movcs	r3, #32
 800143c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr = W_ACK_PAYLOAD | (pipe & 0x07);
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	b25b      	sxtb	r3, r3
 8001448:	f063 0357 	orn	r3, r3, #87	; 0x57
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	72bb      	strb	r3, [r7, #10]
	csn(LOW);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fc58 	bl	8000d08 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8001458:	f107 010a 	add.w	r1, r7, #10
 800145c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001460:	2201      	movs	r2, #1
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <writeAckPayload+0x68>)
 8001464:	f001 fb2b 	bl	8002abe <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)current, data_len, 1000);
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	b29a      	uxth	r2, r3
 800146c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001470:	68f9      	ldr	r1, [r7, #12]
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <writeAckPayload+0x68>)
 8001474:	f001 fb23 	bl	8002abe <HAL_SPI_Transmit>
	csn(HIGH);
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff fc45 	bl	8000d08 <csn>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000008c 	.word	0x2000008c

0800148c <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8001496:	2006      	movs	r0, #6
 8001498:	f7ff fc5c 	bl	8000d54 <read_register>
 800149c:	4603      	mov	r3, r0
 800149e:	f023 0307 	bic.w	r3, r3, #7
 80014a2:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d902      	bls.n	80014b0 <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 80014aa:	2307      	movs	r3, #7
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	e004      	b.n	80014ba <setPALevel+0x2e>
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 80014ba:	7bfa      	ldrb	r2, [r7, #15]
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	4313      	orrs	r3, r2
 80014c0:	73fb      	strb	r3, [r7, #15]
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4619      	mov	r1, r3
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff fca2 	bl	8000e10 <write_register>
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <getPALevel>:

uint8_t getPALevel(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 80014d8:	2006      	movs	r0, #6
 80014da:	f7ff fc3b 	bl	8000d54 <read_register>
 80014de:	4603      	mov	r3, r0
 80014e0:	105b      	asrs	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 80014fe:	2006      	movs	r0, #6
 8001500:	f7ff fc28 	bl	8000d54 <read_register>
 8001504:	4603      	mov	r3, r0
 8001506:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800150e:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <setDataRate+0x7c>)
 8001512:	2255      	movs	r2, #85	; 0x55
 8001514:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d107      	bne.n	800152c <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	f043 0320 	orr.w	r3, r3, #32
 8001522:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <setDataRate+0x7c>)
 8001526:	229b      	movs	r2, #155	; 0x9b
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e009      	b.n	8001540 <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d106      	bne.n	8001540 <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <setDataRate+0x7c>)
 800153c:	2241      	movs	r2, #65	; 0x41
 800153e:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 8001540:	7bbb      	ldrb	r3, [r7, #14]
 8001542:	4619      	mov	r1, r3
 8001544:	2006      	movs	r0, #6
 8001546:	f7ff fc63 	bl	8000e10 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 800154a:	2006      	movs	r0, #6
 800154c:	f7ff fc02 	bl	8000d54 <read_register>
 8001550:	4603      	mov	r3, r0
 8001552:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 8001554:	7b7a      	ldrb	r2, [r7, #13]
 8001556:	7bbb      	ldrb	r3, [r7, #14]
 8001558:	429a      	cmp	r2, r3
 800155a:	d101      	bne.n	8001560 <setDataRate+0x70>
	{
		result = true;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000132 	.word	0x20000132

08001570 <getDataRate>:

rf24_datarate_e getDataRate(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
	rf24_datarate_e result ;
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001576:	2006      	movs	r0, #6
 8001578:	f7ff fbec 	bl	8000d54 <read_register>
 800157c:	4603      	mov	r3, r0
 800157e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001582:	71bb      	strb	r3, [r7, #6]

	// switch uses RAM (evil!)
	// Order matters in our case below
	if(dr == (1 << RF_DR_LOW))
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b20      	cmp	r3, #32
 8001588:	d102      	bne.n	8001590 <getDataRate+0x20>
	{
		result = RF24_250KBPS;
 800158a:	2302      	movs	r3, #2
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e007      	b.n	80015a0 <getDataRate+0x30>
	}
	else if(dr == (1 << RF_DR_HIGH))
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d102      	bne.n	800159c <getDataRate+0x2c>
	{
		result = RF24_2MBPS;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <getDataRate+0x30>
	}
	else
	{
		result = RF24_1MBPS;
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <getCRCLength>:

	write_register(NRF_CONFIG, config);
}

rf24_crclength_e getCRCLength(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
	rf24_crclength_e result = RF24_CRC_DISABLED;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]

	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff fbcd 	bl	8000d54 <read_register>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f003 030c 	and.w	r3, r3, #12
 80015c0:	71bb      	strb	r3, [r7, #6]
	uint8_t AA = read_register(EN_AA);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff fbc6 	bl	8000d54 <read_register>
 80015c8:	4603      	mov	r3, r0
 80015ca:	717b      	strb	r3, [r7, #5]

	if(config & (1 << EN_CRC) || AA)
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <getCRCLength+0x32>
 80015d6:	797b      	ldrb	r3, [r7, #5]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d009      	beq.n	80015f0 <getCRCLength+0x46>
	{
		if(config & (1 << CRCO))
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	f003 0304 	and.w	r3, r3, #4
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <getCRCLength+0x42>
		  result = RF24_CRC_16;
 80015e6:	2302      	movs	r3, #2
 80015e8:	71fb      	strb	r3, [r7, #7]
 80015ea:	e001      	b.n	80015f0 <getCRCLength+0x46>
		else
		  result = RF24_CRC_8;
 80015ec:	2301      	movs	r3, #1
 80015ee:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 80015f0:	79fb      	ldrb	r3, [r7, #7]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	460a      	mov	r2, r1
 8001604:	71fb      	strb	r3, [r7, #7]
 8001606:	4613      	mov	r3, r2
 8001608:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	b25a      	sxtb	r2, r3
 8001610:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	b25b      	sxtb	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	b25b      	sxtb	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	2004      	movs	r0, #4
 8001624:	f7ff fbf4 	bl	8000e10 <write_register>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_MspInit+0x4c>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b09      	ldr	r3, [pc, #36]	; (800167c <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	; (800167c <HAL_MspInit+0x4c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_SPI_MspInit+0x84>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d12b      	bne.n	80016fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <HAL_SPI_MspInit+0x88>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <HAL_SPI_MspInit+0x88>)
 80016ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_SPI_MspInit+0x88>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_SPI_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <HAL_SPI_MspInit+0x88>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_SPI_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016da:	23e0      	movs	r3, #224	; 0xe0
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ea:	2305      	movs	r3, #5
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_SPI_MspInit+0x8c>)
 80016f6:	f000 fabf 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013000 	.word	0x40013000
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <HAL_UART_MspInit+0x84>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d12c      	bne.n	800178c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_UART_MspInit+0x88>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <HAL_UART_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177c:	2307      	movs	r3, #7
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <HAL_UART_MspInit+0x8c>)
 8001788:	f000 fa76 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	; 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40011000 	.word	0x40011000
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000

080017a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08e      	sub	sp, #56	; 0x38
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_InitTick+0xe4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a32      	ldr	r2, [pc, #200]	; (8001884 <HAL_InitTick+0xe4>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b30      	ldr	r3, [pc, #192]	; (8001884 <HAL_InitTick+0xe4>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017cc:	f107 0210 	add.w	r2, r7, #16
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 f8b6 	bl	8002948 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017e6:	f001 f887 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 80017ea:	6378      	str	r0, [r7, #52]	; 0x34
 80017ec:	e004      	b.n	80017f8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017ee:	f001 f883 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017fa:	4a23      	ldr	r2, [pc, #140]	; (8001888 <HAL_InitTick+0xe8>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0c9b      	lsrs	r3, r3, #18
 8001802:	3b01      	subs	r3, #1
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001806:	4b21      	ldr	r3, [pc, #132]	; (800188c <HAL_InitTick+0xec>)
 8001808:	4a21      	ldr	r2, [pc, #132]	; (8001890 <HAL_InitTick+0xf0>)
 800180a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_InitTick+0xec>)
 800180e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001812:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001814:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_InitTick+0xec>)
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800181a:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_InitTick+0xec>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_InitTick+0xec>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_InitTick+0xec>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 800182c:	4817      	ldr	r0, [pc, #92]	; (800188c <HAL_InitTick+0xec>)
 800182e:	f001 fe65 	bl	80034fc <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11b      	bne.n	8001878 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <HAL_InitTick+0xec>)
 8001842:	f001 feb5 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800184c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001850:	2b00      	cmp	r3, #0
 8001852:	d111      	bne.n	8001878 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001854:	202d      	movs	r0, #45	; 0x2d
 8001856:	f000 fa01 	bl	8001c5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d808      	bhi.n	8001872 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	202d      	movs	r0, #45	; 0x2d
 8001866:	f000 f9dd 	bl	8001c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_InitTick+0xf4>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e002      	b.n	8001878 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800187c:	4618      	mov	r0, r3
 800187e:	3738      	adds	r7, #56	; 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	431bde83 	.word	0x431bde83
 800188c:	20000134 	.word	0x20000134
 8001890:	40002000 	.word	0x40002000
 8001894:	20000004 	.word	0x20000004

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018f6:	f001 fecb 	bl	8003690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000134 	.word	0x20000134

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f002 fc52 	bl	80041dc <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20020000 	.word	0x20020000
 8001964:	00000400 	.word	0x00000400
 8001968:	2000017c 	.word	0x2000017c
 800196c:	20000198 	.word	0x20000198

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001998:	480d      	ldr	r0, [pc, #52]	; (80019d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800199a:	490e      	ldr	r1, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a0:	e002      	b.n	80019a8 <LoopCopyDataInit>

080019a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a6:	3304      	adds	r3, #4

080019a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ac:	d3f9      	bcc.n	80019a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019b0:	4c0b      	ldr	r4, [pc, #44]	; (80019e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b4:	e001      	b.n	80019ba <LoopFillZerobss>

080019b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b8:	3204      	adds	r2, #4

080019ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019bc:	d3fb      	bcc.n	80019b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019be:	f7ff ffd7 	bl	8001970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f002 fc11 	bl	80041e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7fe fddf 	bl	8000588 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019d8:	08004d70 	.word	0x08004d70
  ldr r2, =_sbss
 80019dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019e0:	20000194 	.word	0x20000194

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f8fc 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	200f      	movs	r0, #15
 8001a18:	f7ff fec2 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fe08 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000180 	.word	0x20000180

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000180 	.word	0x20000180

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff4c 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c36:	f7ff ff61 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7ff ffb1 	bl	8001ba8 <NVIC_EncodePriority>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff80 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff54 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e16b      	b.n	8001f6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 815a 	bne.w	8001f66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d005      	beq.n	8001cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80b4 	beq.w	8001f66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b60      	ldr	r3, [pc, #384]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a5f      	ldr	r2, [pc, #380]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a5b      	ldr	r2, [pc, #364]	; (8001f88 <HAL_GPIO_Init+0x310>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_GPIO_Init+0x314>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d02b      	beq.n	8001e9e <HAL_GPIO_Init+0x226>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_GPIO_Init+0x318>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d025      	beq.n	8001e9a <HAL_GPIO_Init+0x222>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a50      	ldr	r2, [pc, #320]	; (8001f94 <HAL_GPIO_Init+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <HAL_GPIO_Init+0x21e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_GPIO_Init+0x320>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x216>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4d      	ldr	r2, [pc, #308]	; (8001fa0 <HAL_GPIO_Init+0x328>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x212>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_GPIO_Init+0x32c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_GPIO_Init+0x330>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x20a>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00e      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e82:	2308      	movs	r3, #8
 8001e84:	e00c      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e00a      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x310>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a32      	ldr	r2, [pc, #200]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f ae90 	bls.w	8001c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40021c00 	.word	0x40021c00
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ff4:	887a      	ldrh	r2, [r7, #2]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	041a      	lsls	r2, r3, #16
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	887b      	ldrh	r3, [r7, #2]
 8002002:	400b      	ands	r3, r1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e267      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d075      	beq.n	8002122 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002036:	4b88      	ldr	r3, [pc, #544]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b04      	cmp	r3, #4
 8002040:	d00c      	beq.n	800205c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002042:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204a:	2b08      	cmp	r3, #8
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204e:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205a:	d10b      	bne.n	8002074 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	4b7e      	ldr	r3, [pc, #504]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d05b      	beq.n	8002120 <HAL_RCC_OscConfig+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d157      	bne.n	8002120 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e242      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207c:	d106      	bne.n	800208c <HAL_RCC_OscConfig+0x74>
 800207e:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a75      	ldr	r2, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e01d      	b.n	80020c8 <HAL_RCC_OscConfig+0xb0>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x98>
 8002096:	4b70      	ldr	r3, [pc, #448]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6f      	ldr	r2, [pc, #444]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b6d      	ldr	r3, [pc, #436]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a6c      	ldr	r2, [pc, #432]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xb0>
 80020b0:	4b69      	ldr	r3, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a68      	ldr	r2, [pc, #416]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b66      	ldr	r3, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a65      	ldr	r2, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fcc0 	bl	8001a54 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fcbc 	bl	8001a54 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e207      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b5b      	ldr	r3, [pc, #364]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0xc0>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fcac 	bl	8001a54 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff fca8 	bl	8001a54 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e1f3      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	4b51      	ldr	r3, [pc, #324]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0xe8>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d063      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002142:	2b08      	cmp	r3, #8
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002146:	4b44      	ldr	r3, [pc, #272]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x152>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1c7      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4937      	ldr	r1, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e03a      	b.n	80021f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d020      	beq.n	80021ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b34      	ldr	r3, [pc, #208]	; (800225c <HAL_RCC_OscConfig+0x244>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff fc61 	bl	8001a54 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002196:	f7ff fc5d 	bl	8001a54 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1a8      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4925      	ldr	r1, [pc, #148]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]
 80021c8:	e015      	b.n	80021f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_OscConfig+0x244>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fc40 	bl	8001a54 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff fc3c 	bl	8001a54 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e187      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d036      	beq.n	8002270 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d016      	beq.n	8002238 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_RCC_OscConfig+0x248>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7ff fc20 	bl	8001a54 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002218:	f7ff fc1c 	bl	8001a54 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e167      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_RCC_OscConfig+0x240>)
 800222c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x200>
 8002236:	e01b      	b.n	8002270 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_OscConfig+0x248>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223e:	f7ff fc09 	bl	8001a54 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	e00e      	b.n	8002264 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002246:	f7ff fc05 	bl	8001a54 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d907      	bls.n	8002264 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e150      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
 8002258:	40023800 	.word	0x40023800
 800225c:	42470000 	.word	0x42470000
 8002260:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ea      	bne.n	8002246 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8097 	beq.w	80023ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002282:	4b81      	ldr	r3, [pc, #516]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a7c      	ldr	r2, [pc, #496]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b7a      	ldr	r3, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	4b77      	ldr	r3, [pc, #476]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d118      	bne.n	80022ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ba:	4b74      	ldr	r3, [pc, #464]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a73      	ldr	r2, [pc, #460]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c6:	f7ff fbc5 	bl	8001a54 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ce:	f7ff fbc1 	bl	8001a54 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e10c      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x474>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x2ea>
 80022f4:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f8:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002300:	e01c      	b.n	800233c <HAL_RCC_OscConfig+0x324>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b05      	cmp	r3, #5
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x30c>
 800230a:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a5e      	ldr	r2, [pc, #376]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231a:	4a5b      	ldr	r2, [pc, #364]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6713      	str	r3, [r2, #112]	; 0x70
 8002322:	e00b      	b.n	800233c <HAL_RCC_OscConfig+0x324>
 8002324:	4b58      	ldr	r3, [pc, #352]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	4b55      	ldr	r3, [pc, #340]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	4a54      	ldr	r2, [pc, #336]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002344:	f7ff fb86 	bl	8001a54 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff fb82 	bl	8001a54 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0cb      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002362:	4b49      	ldr	r3, [pc, #292]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ee      	beq.n	800234c <HAL_RCC_OscConfig+0x334>
 800236e:	e014      	b.n	800239a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7ff fb70 	bl	8001a54 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	e00a      	b.n	800238e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7ff fb6c 	bl	8001a54 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	; 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0b5      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238e:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ee      	bne.n	8002378 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b39      	ldr	r3, [pc, #228]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	4a38      	ldr	r2, [pc, #224]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80a1 	beq.w	80024f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d05c      	beq.n	800247c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d141      	bne.n	800244e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCC_OscConfig+0x478>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff fb40 	bl	8001a54 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff fb3c 	bl	8001a54 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e087      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	491b      	ldr	r1, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x478>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff fb15 	bl	8001a54 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff fb11 	bl	8001a54 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e05c      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x416>
 800244c:	e054      	b.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_OscConfig+0x478>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fafe 	bl	8001a54 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff fafa 	bl	8001a54 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e045      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x470>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x444>
 800247a:	e03d      	b.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e038      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
 8002490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <HAL_RCC_OscConfig+0x4ec>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d121      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d11a      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0cc      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d90c      	bls.n	8002544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b8      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	494d      	ldr	r1, [pc, #308]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d044      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d119      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e067      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff fa2c 	bl	8001a54 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff fa28 	bl	8001a54 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e04f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d20c      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e032      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f821 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490a      	ldr	r1, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f876 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08004d14 	.word	0x08004d14
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000004 	.word	0x20000004

080026d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026d8:	b094      	sub	sp, #80	; 0x50
 80026da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	647b      	str	r3, [r7, #68]	; 0x44
 80026e0:	2300      	movs	r3, #0
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d00d      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x40>
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	f200 80e1 	bhi.w	80028c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x34>
 8002702:	2b04      	cmp	r3, #4
 8002704:	d003      	beq.n	800270e <HAL_RCC_GetSysClockFreq+0x3a>
 8002706:	e0db      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800270c:	e0db      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800270e:	4b73      	ldr	r3, [pc, #460]	; (80028dc <HAL_RCC_GetSysClockFreq+0x208>)
 8002710:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002712:	e0d8      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271e:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d063      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	2200      	movs	r2, #0
 8002732:	63bb      	str	r3, [r7, #56]	; 0x38
 8002734:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
 8002742:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002746:	4622      	mov	r2, r4
 8002748:	462b      	mov	r3, r5
 800274a:	f04f 0000 	mov.w	r0, #0
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	0159      	lsls	r1, r3, #5
 8002754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002758:	0150      	lsls	r0, r2, #5
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4621      	mov	r1, r4
 8002760:	1a51      	subs	r1, r2, r1
 8002762:	6139      	str	r1, [r7, #16]
 8002764:	4629      	mov	r1, r5
 8002766:	eb63 0301 	sbc.w	r3, r3, r1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002778:	4659      	mov	r1, fp
 800277a:	018b      	lsls	r3, r1, #6
 800277c:	4651      	mov	r1, sl
 800277e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002782:	4651      	mov	r1, sl
 8002784:	018a      	lsls	r2, r1, #6
 8002786:	4651      	mov	r1, sl
 8002788:	ebb2 0801 	subs.w	r8, r2, r1
 800278c:	4659      	mov	r1, fp
 800278e:	eb63 0901 	sbc.w	r9, r3, r1
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a6:	4690      	mov	r8, r2
 80027a8:	4699      	mov	r9, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	eb18 0303 	adds.w	r3, r8, r3
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	462b      	mov	r3, r5
 80027b4:	eb49 0303 	adc.w	r3, r9, r3
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027c6:	4629      	mov	r1, r5
 80027c8:	024b      	lsls	r3, r1, #9
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d0:	4621      	mov	r1, r4
 80027d2:	024a      	lsls	r2, r1, #9
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027da:	2200      	movs	r2, #0
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e4:	f7fd fd4c 	bl	8000280 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027f0:	e058      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	2200      	movs	r2, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	4611      	mov	r1, r2
 80027fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
 8002808:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800280c:	4642      	mov	r2, r8
 800280e:	464b      	mov	r3, r9
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	0159      	lsls	r1, r3, #5
 800281a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281e:	0150      	lsls	r0, r2, #5
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4641      	mov	r1, r8
 8002826:	ebb2 0a01 	subs.w	sl, r2, r1
 800282a:	4649      	mov	r1, r9
 800282c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800283c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002840:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002844:	ebb2 040a 	subs.w	r4, r2, sl
 8002848:	eb63 050b 	sbc.w	r5, r3, fp
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	00eb      	lsls	r3, r5, #3
 8002856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285a:	00e2      	lsls	r2, r4, #3
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	4643      	mov	r3, r8
 8002862:	18e3      	adds	r3, r4, r3
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	464b      	mov	r3, r9
 8002868:	eb45 0303 	adc.w	r3, r5, r3
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287a:	4629      	mov	r1, r5
 800287c:	028b      	lsls	r3, r1, #10
 800287e:	4621      	mov	r1, r4
 8002880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002884:	4621      	mov	r1, r4
 8002886:	028a      	lsls	r2, r1, #10
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800288e:	2200      	movs	r2, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	61fa      	str	r2, [r7, #28]
 8002894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002898:	f7fd fcf2 	bl	8000280 <__aeabi_uldivmod>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4613      	mov	r3, r2
 80028a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	3301      	adds	r3, #1
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028be:	e002      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3750      	adds	r7, #80	; 0x50
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	007a1200 	.word	0x007a1200

080028e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000000 	.word	0x20000000

080028f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028fc:	f7ff fff0 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0a9b      	lsrs	r3, r3, #10
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <HAL_RCC_GetPCLK1Freq+0x24>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002914:	4618      	mov	r0, r3
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40023800 	.word	0x40023800
 800291c:	08004d24 	.word	0x08004d24

08002920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002924:	f7ff ffdc 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0b5b      	lsrs	r3, r3, #13
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4903      	ldr	r1, [pc, #12]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	08004d24 	.word	0x08004d24

08002948 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	220f      	movs	r2, #15
 8002956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_RCC_GetClockConfig+0x5c>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0203 	and.w	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002970:	4b0c      	ldr	r3, [pc, #48]	; (80029a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_GetClockConfig+0x5c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	08db      	lsrs	r3, r3, #3
 8002982:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800298a:	4b07      	ldr	r3, [pc, #28]	; (80029a8 <HAL_RCC_GetClockConfig+0x60>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0207 	and.w	r2, r3, #7
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	601a      	str	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40023c00 	.word	0x40023c00

080029ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e07b      	b.n	8002ab6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029ce:	d009      	beq.n	80029e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	61da      	str	r2, [r3, #28]
 80029d6:	e005      	b.n	80029e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fe3e 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	ea42 0103 	orr.w	r1, r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0104 	and.w	r1, r3, #4
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	f003 0210 	and.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b088      	sub	sp, #32
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_SPI_Transmit+0x22>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e126      	b.n	8002d2e <HAL_SPI_Transmit+0x270>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ae8:	f7fe ffb4 	bl	8001a54 <HAL_GetTick>
 8002aec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d002      	beq.n	8002b04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b02:	e10b      	b.n	8002d1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_SPI_Transmit+0x52>
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b14:	e102      	b.n	8002d1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5c:	d10f      	bne.n	8002b7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d007      	beq.n	8002b9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba4:	d14b      	bne.n	8002c3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_SPI_Transmit+0xf6>
 8002bae:	8afb      	ldrh	r3, [r7, #22]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d13e      	bne.n	8002c32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	881a      	ldrh	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	1c9a      	adds	r2, r3, #2
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bd8:	e02b      	b.n	8002c32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d112      	bne.n	8002c0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	881a      	ldrh	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c0c:	e011      	b.n	8002c32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c0e:	f7fe ff21 	bl	8001a54 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d803      	bhi.n	8002c26 <HAL_SPI_Transmit+0x168>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_Transmit+0x16e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c30:	e074      	b.n	8002d1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ce      	bne.n	8002bda <HAL_SPI_Transmit+0x11c>
 8002c3c:	e04c      	b.n	8002cd8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_SPI_Transmit+0x18e>
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d140      	bne.n	8002cce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c72:	e02c      	b.n	8002cce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d113      	bne.n	8002caa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ca8:	e011      	b.n	8002cce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002caa:	f7fe fed3 	bl	8001a54 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_Transmit+0x204>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_Transmit+0x20a>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ccc:	e026      	b.n	8002d1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1cd      	bne.n	8002c74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 fbcb 	bl	8003478 <SPI_EndRxTxTransaction>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e000      	b.n	8002d1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8002d1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b088      	sub	sp, #32
 8002d3a:	af02      	add	r7, sp, #8
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d52:	d112      	bne.n	8002d7a <HAL_SPI_Receive+0x44>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10e      	bne.n	8002d7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f8f1 	bl	8002f58 <HAL_SPI_TransmitReceive>
 8002d76:	4603      	mov	r3, r0
 8002d78:	e0ea      	b.n	8002f50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_SPI_Receive+0x52>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0e3      	b.n	8002f50 <HAL_SPI_Receive+0x21a>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d90:	f7fe fe60 	bl	8001a54 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d002      	beq.n	8002da8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002da6:	e0ca      	b.n	8002f3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Receive+0x7e>
 8002dae:	88fb      	ldrh	r3, [r7, #6]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002db8:	e0c1      	b.n	8002f3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	88fa      	ldrh	r2, [r7, #6]
 8002dd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e00:	d10f      	bne.n	8002e22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d007      	beq.n	8002e40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d162      	bne.n	8002f0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e48:	e02e      	b.n	8002ea8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d115      	bne.n	8002e84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f103 020c 	add.w	r2, r3, #12
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e82:	e011      	b.n	8002ea8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e84:	f7fe fde6 	bl	8001a54 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d803      	bhi.n	8002e9c <HAL_SPI_Receive+0x166>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9a:	d102      	bne.n	8002ea2 <HAL_SPI_Receive+0x16c>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ea6:	e04a      	b.n	8002f3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1cb      	bne.n	8002e4a <HAL_SPI_Receive+0x114>
 8002eb2:	e031      	b.n	8002f18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d113      	bne.n	8002eea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	1c9a      	adds	r2, r3, #2
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ee8:	e011      	b.n	8002f0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eea:	f7fe fdb3 	bl	8001a54 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d803      	bhi.n	8002f02 <HAL_SPI_Receive+0x1cc>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f00:	d102      	bne.n	8002f08 <HAL_SPI_Receive+0x1d2>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f0c:	e017      	b.n	8002f3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1cd      	bne.n	8002eb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fa45 	bl	80033ac <SPI_EndRxTransaction>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
 8002f3a:	e000      	b.n	8002f3e <HAL_SPI_Receive+0x208>
  }

error :
 8002f3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f66:	2301      	movs	r3, #1
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_SPI_TransmitReceive+0x26>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e18a      	b.n	8003294 <HAL_SPI_TransmitReceive+0x33c>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f86:	f7fe fd65 	bl	8001a54 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d00f      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x70>
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d107      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d103      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x68>
 8002fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d003      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fc6:	e15b      	b.n	8003280 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <HAL_SPI_TransmitReceive+0x82>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_TransmitReceive+0x82>
 8002fd4:	887b      	ldrh	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fe0:	e14e      	b.n	8003280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d003      	beq.n	8002ff6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2205      	movs	r2, #5
 8002ff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	887a      	ldrh	r2, [r7, #2]
 8003006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	887a      	ldrh	r2, [r7, #2]
 800301e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d007      	beq.n	800304a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003052:	d178      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_SPI_TransmitReceive+0x10a>
 800305c:	8b7b      	ldrh	r3, [r7, #26]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d166      	bne.n	8003130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	881a      	ldrh	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	1c9a      	adds	r2, r3, #2
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003086:	e053      	b.n	8003130 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b02      	cmp	r3, #2
 8003094:	d11b      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x176>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d016      	beq.n	80030ce <HAL_SPI_TransmitReceive+0x176>
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d113      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	881a      	ldrh	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	1c9a      	adds	r2, r3, #2
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d119      	bne.n	8003110 <HAL_SPI_TransmitReceive+0x1b8>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d014      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	b292      	uxth	r2, r2
 80030f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	1c9a      	adds	r2, r3, #2
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800310c:	2301      	movs	r3, #1
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003110:	f7fe fca0 	bl	8001a54 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800311c:	429a      	cmp	r2, r3
 800311e:	d807      	bhi.n	8003130 <HAL_SPI_TransmitReceive+0x1d8>
 8003120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003126:	d003      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800312e:	e0a7      	b.n	8003280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1a6      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x130>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1a1      	bne.n	8003088 <HAL_SPI_TransmitReceive+0x130>
 8003144:	e07c      	b.n	8003240 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_SPI_TransmitReceive+0x1fc>
 800314e:	8b7b      	ldrh	r3, [r7, #26]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d16b      	bne.n	800322c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317a:	e057      	b.n	800322c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d11c      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x26c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x26c>
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d114      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x2ae>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d014      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003202:	2301      	movs	r3, #1
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003206:	f7fe fc25 	bl	8001a54 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003212:	429a      	cmp	r2, r3
 8003214:	d803      	bhi.n	800321e <HAL_SPI_TransmitReceive+0x2c6>
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321c:	d102      	bne.n	8003224 <HAL_SPI_TransmitReceive+0x2cc>
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d103      	bne.n	800322c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800322a:	e029      	b.n	8003280 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1a2      	bne.n	800317c <HAL_SPI_TransmitReceive+0x224>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d19d      	bne.n	800317c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f917 	bl	8003478 <SPI_EndRxTxTransaction>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800325c:	e010      	b.n	8003280 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	e000      	b.n	8003280 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800327e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003290:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003294:	4618      	mov	r0, r3
 8003296:	3730      	adds	r7, #48	; 0x30
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032ac:	f7fe fbd2 	bl	8001a54 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032bc:	f7fe fbca 	bl	8001a54 <HAL_GetTick>
 80032c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	015b      	lsls	r3, r3, #5
 80032c8:	0d1b      	lsrs	r3, r3, #20
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d2:	e054      	b.n	800337e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032da:	d050      	beq.n	800337e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032dc:	f7fe fbba 	bl	8001a54 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d902      	bls.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d13d      	bne.n	800336e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003300:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800330a:	d111      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x94>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003314:	d004      	beq.n	8003320 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d107      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d10f      	bne.n	800335a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003358:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e017      	b.n	800339e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	3b01      	subs	r3, #1
 800337c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	429a      	cmp	r2, r3
 800338c:	bf0c      	ite	eq
 800338e:	2301      	moveq	r3, #1
 8003390:	2300      	movne	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	461a      	mov	r2, r3
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	429a      	cmp	r2, r3
 800339a:	d19b      	bne.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000000 	.word	0x20000000

080033ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033c0:	d111      	bne.n	80033e6 <SPI_EndRxTransaction+0x3a>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ca:	d004      	beq.n	80033d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d4:	d107      	bne.n	80033e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ee:	d12a      	bne.n	8003446 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f8:	d012      	beq.n	8003420 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2200      	movs	r2, #0
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ff49 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02d      	beq.n	800346c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f043 0220 	orr.w	r2, r3, #32
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e026      	b.n	800346e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2200      	movs	r2, #0
 8003428:	2101      	movs	r1, #1
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f7ff ff36 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d01a      	beq.n	800346c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	f043 0220 	orr.w	r2, r3, #32
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e013      	b.n	800346e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	2101      	movs	r1, #1
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff ff23 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e000      	b.n	800346e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <SPI_EndRxTxTransaction+0x7c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <SPI_EndRxTxTransaction+0x80>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0d5b      	lsrs	r3, r3, #21
 8003490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003494:	fb02 f303 	mul.w	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a2:	d112      	bne.n	80034ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2200      	movs	r2, #0
 80034ac:	2180      	movs	r1, #128	; 0x80
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f7ff fef4 	bl	800329c <SPI_WaitFlagStateUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e00f      	b.n	80034ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d0f2      	beq.n	80034ca <SPI_EndRxTxTransaction+0x52>
 80034e4:	e000      	b.n	80034e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80034e6:	bf00      	nop
  }

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000
 80034f8:	165e9f81 	.word	0x165e9f81

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e041      	b.n	8003592 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f839 	bl	800359a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 f9d8 	bl	80038f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e04e      	b.n	8003666 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_TIM_Base_Start_IT+0xc4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d022      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d01d      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1f      	ldr	r2, [pc, #124]	; (8003678 <HAL_TIM_Base_Start_IT+0xc8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1e      	ldr	r2, [pc, #120]	; (800367c <HAL_TIM_Base_Start_IT+0xcc>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1c      	ldr	r2, [pc, #112]	; (8003680 <HAL_TIM_Base_Start_IT+0xd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <HAL_TIM_Base_Start_IT+0xd4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_TIM_Base_Start_IT+0xd8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a18      	ldr	r2, [pc, #96]	; (800368c <HAL_TIM_Base_Start_IT+0xdc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d111      	bne.n	8003654 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b06      	cmp	r3, #6
 8003640:	d010      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003652:	e007      	b.n	8003664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40010400 	.word	0x40010400
 8003688:	40014000 	.word	0x40014000
 800368c:	40001800 	.word	0x40001800

08003690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0202 	mvn.w	r2, #2
 80036bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8ee 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f8e0 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8f1 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b04      	cmp	r3, #4
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0204 	mvn.w	r2, #4
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2202      	movs	r2, #2
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8c4 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8b6 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f8c7 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b08      	cmp	r3, #8
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0208 	mvn.w	r2, #8
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0303 	and.w	r3, r3, #3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f89a 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f88c 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f89d 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d122      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0310 	and.w	r3, r3, #16
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0210 	mvn.w	r2, #16
 80037b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2208      	movs	r2, #8
 80037be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f870 	bl	80038b4 <HAL_TIM_IC_CaptureCallback>
 80037d4:	e005      	b.n	80037e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f862 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f873 	bl	80038c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0201 	mvn.w	r2, #1
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fa26 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382c:	2b80      	cmp	r3, #128	; 0x80
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f902 	bl	8003a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d10e      	bne.n	800386c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d107      	bne.n	800386c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f838 	bl	80038dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b20      	cmp	r3, #32
 8003878:	d10e      	bne.n	8003898 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b20      	cmp	r3, #32
 8003886:	d107      	bne.n	8003898 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0220 	mvn.w	r2, #32
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8cc 	bl	8003a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a40      	ldr	r2, [pc, #256]	; (8003a04 <TIM_Base_SetConfig+0x114>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d00f      	beq.n	8003930 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3d      	ldr	r2, [pc, #244]	; (8003a08 <TIM_Base_SetConfig+0x118>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00b      	beq.n	8003930 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3c      	ldr	r2, [pc, #240]	; (8003a0c <TIM_Base_SetConfig+0x11c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d007      	beq.n	8003930 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <TIM_Base_SetConfig+0x120>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d003      	beq.n	8003930 <TIM_Base_SetConfig+0x40>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3a      	ldr	r2, [pc, #232]	; (8003a14 <TIM_Base_SetConfig+0x124>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d108      	bne.n	8003942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a2f      	ldr	r2, [pc, #188]	; (8003a04 <TIM_Base_SetConfig+0x114>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d02b      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d027      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <TIM_Base_SetConfig+0x118>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d023      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2b      	ldr	r2, [pc, #172]	; (8003a0c <TIM_Base_SetConfig+0x11c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01f      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2a      	ldr	r2, [pc, #168]	; (8003a10 <TIM_Base_SetConfig+0x120>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01b      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <TIM_Base_SetConfig+0x124>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d017      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a28      	ldr	r2, [pc, #160]	; (8003a18 <TIM_Base_SetConfig+0x128>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <TIM_Base_SetConfig+0x12c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00f      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a26      	ldr	r2, [pc, #152]	; (8003a20 <TIM_Base_SetConfig+0x130>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <TIM_Base_SetConfig+0x134>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <TIM_Base_SetConfig+0x138>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <TIM_Base_SetConfig+0x13c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <TIM_Base_SetConfig+0x114>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d003      	beq.n	80039e8 <TIM_Base_SetConfig+0xf8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <TIM_Base_SetConfig+0x124>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d103      	bne.n	80039f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	615a      	str	r2, [r3, #20]
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40010000 	.word	0x40010000
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40000800 	.word	0x40000800
 8003a10:	40000c00 	.word	0x40000c00
 8003a14:	40010400 	.word	0x40010400
 8003a18:	40014000 	.word	0x40014000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800
 8003a24:	40001800 	.word	0x40001800
 8003a28:	40001c00 	.word	0x40001c00
 8003a2c:	40002000 	.word	0x40002000

08003a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e03f      	b.n	8003aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fe46 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	; 0x24
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f929 	bl	8003cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	d17c      	bne.n	8003c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <HAL_UART_Transmit+0x2c>
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e075      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_UART_Transmit+0x3e>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e06e      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2221      	movs	r2, #33	; 0x21
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b46:	f7fd ff85 	bl	8001a54 <HAL_GetTick>
 8003b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d108      	bne.n	8003b74 <HAL_UART_Transmit+0x82>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b84:	e02a      	b.n	8003bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2180      	movs	r1, #128	; 0x80
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f840 	bl	8003c16 <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e036      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e007      	b.n	8003bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1cf      	bne.n	8003b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f810 	bl	8003c16 <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e006      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b090      	sub	sp, #64	; 0x40
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c26:	e050      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c2e:	d04c      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c36:	f7fd ff0d 	bl	8001a54 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d241      	bcs.n	8003cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	e853 3f00 	ldrex	r3, [r3]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	330c      	adds	r3, #12
 8003c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c66:	637a      	str	r2, [r7, #52]	; 0x34
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e5      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c9a:	623a      	str	r2, [r7, #32]
 8003c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e00f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d09f      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3740      	adds	r7, #64	; 0x40
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b0c0      	sub	sp, #256	; 0x100
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	68d9      	ldr	r1, [r3, #12]
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	ea40 0301 	orr.w	r3, r0, r1
 8003d1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d4c:	f021 010c 	bic.w	r1, r1, #12
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6e:	6999      	ldr	r1, [r3, #24]
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	ea40 0301 	orr.w	r3, r0, r1
 8003d7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b8f      	ldr	r3, [pc, #572]	; (8003fc0 <UART_SetConfig+0x2cc>)
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d005      	beq.n	8003d94 <UART_SetConfig+0xa0>
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b8d      	ldr	r3, [pc, #564]	; (8003fc4 <UART_SetConfig+0x2d0>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d104      	bne.n	8003d9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7fe fdc4 	bl	8002920 <HAL_RCC_GetPCLK2Freq>
 8003d98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d9c:	e003      	b.n	8003da6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d9e:	f7fe fdab 	bl	80028f8 <HAL_RCC_GetPCLK1Freq>
 8003da2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db0:	f040 810c 	bne.w	8003fcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db8:	2200      	movs	r2, #0
 8003dba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003dc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003dc6:	4622      	mov	r2, r4
 8003dc8:	462b      	mov	r3, r5
 8003dca:	1891      	adds	r1, r2, r2
 8003dcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003dce:	415b      	adcs	r3, r3
 8003dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	eb12 0801 	adds.w	r8, r2, r1
 8003ddc:	4629      	mov	r1, r5
 8003dde:	eb43 0901 	adc.w	r9, r3, r1
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df6:	4690      	mov	r8, r2
 8003df8:	4699      	mov	r9, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	eb18 0303 	adds.w	r3, r8, r3
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e04:	462b      	mov	r3, r5
 8003e06:	eb49 0303 	adc.w	r3, r9, r3
 8003e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e22:	460b      	mov	r3, r1
 8003e24:	18db      	adds	r3, r3, r3
 8003e26:	653b      	str	r3, [r7, #80]	; 0x50
 8003e28:	4613      	mov	r3, r2
 8003e2a:	eb42 0303 	adc.w	r3, r2, r3
 8003e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e38:	f7fc fa22 	bl	8000280 <__aeabi_uldivmod>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4b61      	ldr	r3, [pc, #388]	; (8003fc8 <UART_SetConfig+0x2d4>)
 8003e42:	fba3 2302 	umull	r2, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	011c      	lsls	r4, r3, #4
 8003e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	1891      	adds	r1, r2, r2
 8003e62:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e64:	415b      	adcs	r3, r3
 8003e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003e72:	4649      	mov	r1, r9
 8003e74:	eb43 0b01 	adc.w	fp, r3, r1
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e8c:	4692      	mov	sl, r2
 8003e8e:	469b      	mov	fp, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	eb1a 0303 	adds.w	r3, sl, r3
 8003e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003eb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	18db      	adds	r3, r3, r3
 8003ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	eb42 0303 	adc.w	r3, r2, r3
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ece:	f7fc f9d7 	bl	8000280 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4b3b      	ldr	r3, [pc, #236]	; (8003fc8 <UART_SetConfig+0x2d4>)
 8003eda:	fba3 2301 	umull	r2, r3, r3, r1
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2264      	movs	r2, #100	; 0x64
 8003ee2:	fb02 f303 	mul.w	r3, r2, r3
 8003ee6:	1acb      	subs	r3, r1, r3
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003eee:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <UART_SetConfig+0x2d4>)
 8003ef0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003efc:	441c      	add	r4, r3
 8003efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f08:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f10:	4642      	mov	r2, r8
 8003f12:	464b      	mov	r3, r9
 8003f14:	1891      	adds	r1, r2, r2
 8003f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f20:	4641      	mov	r1, r8
 8003f22:	1851      	adds	r1, r2, r1
 8003f24:	6339      	str	r1, [r7, #48]	; 0x30
 8003f26:	4649      	mov	r1, r9
 8003f28:	414b      	adcs	r3, r1
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f38:	4659      	mov	r1, fp
 8003f3a:	00cb      	lsls	r3, r1, #3
 8003f3c:	4651      	mov	r1, sl
 8003f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f42:	4651      	mov	r1, sl
 8003f44:	00ca      	lsls	r2, r1, #3
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f54:	464b      	mov	r3, r9
 8003f56:	460a      	mov	r2, r1
 8003f58:	eb42 0303 	adc.w	r3, r2, r3
 8003f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f6c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f74:	460b      	mov	r3, r1
 8003f76:	18db      	adds	r3, r3, r3
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f8a:	f7fc f979 	bl	8000280 <__aeabi_uldivmod>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <UART_SetConfig+0x2d4>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	2164      	movs	r1, #100	; 0x64
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	00db      	lsls	r3, r3, #3
 8003fa4:	3332      	adds	r3, #50	; 0x32
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <UART_SetConfig+0x2d4>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	f003 0207 	and.w	r2, r3, #7
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4422      	add	r2, r4
 8003fba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fbc:	e105      	b.n	80041ca <UART_SetConfig+0x4d6>
 8003fbe:	bf00      	nop
 8003fc0:	40011000 	.word	0x40011000
 8003fc4:	40011400 	.word	0x40011400
 8003fc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fd6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fde:	4642      	mov	r2, r8
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	1891      	adds	r1, r2, r2
 8003fe4:	6239      	str	r1, [r7, #32]
 8003fe6:	415b      	adcs	r3, r3
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fee:	4641      	mov	r1, r8
 8003ff0:	1854      	adds	r4, r2, r1
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	eb43 0501 	adc.w	r5, r3, r1
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	00eb      	lsls	r3, r5, #3
 8004002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004006:	00e2      	lsls	r2, r4, #3
 8004008:	4614      	mov	r4, r2
 800400a:	461d      	mov	r5, r3
 800400c:	4643      	mov	r3, r8
 800400e:	18e3      	adds	r3, r4, r3
 8004010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004014:	464b      	mov	r3, r9
 8004016:	eb45 0303 	adc.w	r3, r5, r3
 800401a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800402a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800403a:	4629      	mov	r1, r5
 800403c:	008b      	lsls	r3, r1, #2
 800403e:	4621      	mov	r1, r4
 8004040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004044:	4621      	mov	r1, r4
 8004046:	008a      	lsls	r2, r1, #2
 8004048:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800404c:	f7fc f918 	bl	8000280 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <UART_SetConfig+0x4e4>)
 8004056:	fba3 2302 	umull	r2, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	011c      	lsls	r4, r3, #4
 800405e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004062:	2200      	movs	r2, #0
 8004064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004068:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800406c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004070:	4642      	mov	r2, r8
 8004072:	464b      	mov	r3, r9
 8004074:	1891      	adds	r1, r2, r2
 8004076:	61b9      	str	r1, [r7, #24]
 8004078:	415b      	adcs	r3, r3
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004080:	4641      	mov	r1, r8
 8004082:	1851      	adds	r1, r2, r1
 8004084:	6139      	str	r1, [r7, #16]
 8004086:	4649      	mov	r1, r9
 8004088:	414b      	adcs	r3, r1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004098:	4659      	mov	r1, fp
 800409a:	00cb      	lsls	r3, r1, #3
 800409c:	4651      	mov	r1, sl
 800409e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a2:	4651      	mov	r1, sl
 80040a4:	00ca      	lsls	r2, r1, #3
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	4642      	mov	r2, r8
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040b4:	464b      	mov	r3, r9
 80040b6:	460a      	mov	r2, r1
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040d8:	4649      	mov	r1, r9
 80040da:	008b      	lsls	r3, r1, #2
 80040dc:	4641      	mov	r1, r8
 80040de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e2:	4641      	mov	r1, r8
 80040e4:	008a      	lsls	r2, r1, #2
 80040e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040ea:	f7fc f8c9 	bl	8000280 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b39      	ldr	r3, [pc, #228]	; (80041d8 <UART_SetConfig+0x4e4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a34      	ldr	r2, [pc, #208]	; (80041d8 <UART_SetConfig+0x4e4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004112:	441c      	add	r4, r3
 8004114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004118:	2200      	movs	r2, #0
 800411a:	673b      	str	r3, [r7, #112]	; 0x70
 800411c:	677a      	str	r2, [r7, #116]	; 0x74
 800411e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004122:	4642      	mov	r2, r8
 8004124:	464b      	mov	r3, r9
 8004126:	1891      	adds	r1, r2, r2
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	415b      	adcs	r3, r3
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004132:	4641      	mov	r1, r8
 8004134:	1851      	adds	r1, r2, r1
 8004136:	6039      	str	r1, [r7, #0]
 8004138:	4649      	mov	r1, r9
 800413a:	414b      	adcs	r3, r1
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800414a:	4659      	mov	r1, fp
 800414c:	00cb      	lsls	r3, r1, #3
 800414e:	4651      	mov	r1, sl
 8004150:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004154:	4651      	mov	r1, sl
 8004156:	00ca      	lsls	r2, r1, #3
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	4603      	mov	r3, r0
 800415e:	4642      	mov	r2, r8
 8004160:	189b      	adds	r3, r3, r2
 8004162:	66bb      	str	r3, [r7, #104]	; 0x68
 8004164:	464b      	mov	r3, r9
 8004166:	460a      	mov	r2, r1
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	663b      	str	r3, [r7, #96]	; 0x60
 8004178:	667a      	str	r2, [r7, #100]	; 0x64
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004186:	4649      	mov	r1, r9
 8004188:	008b      	lsls	r3, r1, #2
 800418a:	4641      	mov	r1, r8
 800418c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004190:	4641      	mov	r1, r8
 8004192:	008a      	lsls	r2, r1, #2
 8004194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004198:	f7fc f872 	bl	8000280 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <UART_SetConfig+0x4e4>)
 80041a2:	fba3 1302 	umull	r1, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2164      	movs	r1, #100	; 0x64
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <UART_SetConfig+0x4e4>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4422      	add	r2, r4
 80041c8:	609a      	str	r2, [r3, #8]
}
 80041ca:	bf00      	nop
 80041cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	51eb851f 	.word	0x51eb851f

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4d0d      	ldr	r5, [pc, #52]	; (8004220 <__libc_init_array+0x38>)
 80041ec:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	2600      	movs	r6, #0
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	4d0b      	ldr	r5, [pc, #44]	; (8004228 <__libc_init_array+0x40>)
 80041fa:	4c0c      	ldr	r4, [pc, #48]	; (800422c <__libc_init_array+0x44>)
 80041fc:	f000 fca2 	bl	8004b44 <_init>
 8004200:	1b64      	subs	r4, r4, r5
 8004202:	10a4      	asrs	r4, r4, #2
 8004204:	2600      	movs	r6, #0
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	f855 3b04 	ldr.w	r3, [r5], #4
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004d68 	.word	0x08004d68
 8004224:	08004d68 	.word	0x08004d68
 8004228:	08004d68 	.word	0x08004d68
 800422c:	08004d6c 	.word	0x08004d6c

08004230 <memcpy>:
 8004230:	440a      	add	r2, r1
 8004232:	4291      	cmp	r1, r2
 8004234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004238:	d100      	bne.n	800423c <memcpy+0xc>
 800423a:	4770      	bx	lr
 800423c:	b510      	push	{r4, lr}
 800423e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004246:	4291      	cmp	r1, r2
 8004248:	d1f9      	bne.n	800423e <memcpy+0xe>
 800424a:	bd10      	pop	{r4, pc}

0800424c <memset>:
 800424c:	4402      	add	r2, r0
 800424e:	4603      	mov	r3, r0
 8004250:	4293      	cmp	r3, r2
 8004252:	d100      	bne.n	8004256 <memset+0xa>
 8004254:	4770      	bx	lr
 8004256:	f803 1b01 	strb.w	r1, [r3], #1
 800425a:	e7f9      	b.n	8004250 <memset+0x4>

0800425c <sniprintf>:
 800425c:	b40c      	push	{r2, r3}
 800425e:	b530      	push	{r4, r5, lr}
 8004260:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <sniprintf+0x64>)
 8004262:	1e0c      	subs	r4, r1, #0
 8004264:	681d      	ldr	r5, [r3, #0]
 8004266:	b09d      	sub	sp, #116	; 0x74
 8004268:	da08      	bge.n	800427c <sniprintf+0x20>
 800426a:	238b      	movs	r3, #139	; 0x8b
 800426c:	602b      	str	r3, [r5, #0]
 800426e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004272:	b01d      	add	sp, #116	; 0x74
 8004274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004278:	b002      	add	sp, #8
 800427a:	4770      	bx	lr
 800427c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004280:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004284:	bf14      	ite	ne
 8004286:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800428a:	4623      	moveq	r3, r4
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	9307      	str	r3, [sp, #28]
 8004290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004294:	9002      	str	r0, [sp, #8]
 8004296:	9006      	str	r0, [sp, #24]
 8004298:	f8ad 3016 	strh.w	r3, [sp, #22]
 800429c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800429e:	ab21      	add	r3, sp, #132	; 0x84
 80042a0:	a902      	add	r1, sp, #8
 80042a2:	4628      	mov	r0, r5
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	f000 f869 	bl	800437c <_svfiprintf_r>
 80042aa:	1c43      	adds	r3, r0, #1
 80042ac:	bfbc      	itt	lt
 80042ae:	238b      	movlt	r3, #139	; 0x8b
 80042b0:	602b      	strlt	r3, [r5, #0]
 80042b2:	2c00      	cmp	r4, #0
 80042b4:	d0dd      	beq.n	8004272 <sniprintf+0x16>
 80042b6:	9b02      	ldr	r3, [sp, #8]
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
 80042bc:	e7d9      	b.n	8004272 <sniprintf+0x16>
 80042be:	bf00      	nop
 80042c0:	2000000c 	.word	0x2000000c

080042c4 <__ssputs_r>:
 80042c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c8:	688e      	ldr	r6, [r1, #8]
 80042ca:	429e      	cmp	r6, r3
 80042cc:	4682      	mov	sl, r0
 80042ce:	460c      	mov	r4, r1
 80042d0:	4690      	mov	r8, r2
 80042d2:	461f      	mov	r7, r3
 80042d4:	d838      	bhi.n	8004348 <__ssputs_r+0x84>
 80042d6:	898a      	ldrh	r2, [r1, #12]
 80042d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042dc:	d032      	beq.n	8004344 <__ssputs_r+0x80>
 80042de:	6825      	ldr	r5, [r4, #0]
 80042e0:	6909      	ldr	r1, [r1, #16]
 80042e2:	eba5 0901 	sub.w	r9, r5, r1
 80042e6:	6965      	ldr	r5, [r4, #20]
 80042e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042f0:	3301      	adds	r3, #1
 80042f2:	444b      	add	r3, r9
 80042f4:	106d      	asrs	r5, r5, #1
 80042f6:	429d      	cmp	r5, r3
 80042f8:	bf38      	it	cc
 80042fa:	461d      	movcc	r5, r3
 80042fc:	0553      	lsls	r3, r2, #21
 80042fe:	d531      	bpl.n	8004364 <__ssputs_r+0xa0>
 8004300:	4629      	mov	r1, r5
 8004302:	f000 fb55 	bl	80049b0 <_malloc_r>
 8004306:	4606      	mov	r6, r0
 8004308:	b950      	cbnz	r0, 8004320 <__ssputs_r+0x5c>
 800430a:	230c      	movs	r3, #12
 800430c:	f8ca 3000 	str.w	r3, [sl]
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004320:	6921      	ldr	r1, [r4, #16]
 8004322:	464a      	mov	r2, r9
 8004324:	f7ff ff84 	bl	8004230 <memcpy>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800432e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	6126      	str	r6, [r4, #16]
 8004336:	6165      	str	r5, [r4, #20]
 8004338:	444e      	add	r6, r9
 800433a:	eba5 0509 	sub.w	r5, r5, r9
 800433e:	6026      	str	r6, [r4, #0]
 8004340:	60a5      	str	r5, [r4, #8]
 8004342:	463e      	mov	r6, r7
 8004344:	42be      	cmp	r6, r7
 8004346:	d900      	bls.n	800434a <__ssputs_r+0x86>
 8004348:	463e      	mov	r6, r7
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	4632      	mov	r2, r6
 800434e:	4641      	mov	r1, r8
 8004350:	f000 faa8 	bl	80048a4 <memmove>
 8004354:	68a3      	ldr	r3, [r4, #8]
 8004356:	1b9b      	subs	r3, r3, r6
 8004358:	60a3      	str	r3, [r4, #8]
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	4433      	add	r3, r6
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	2000      	movs	r0, #0
 8004362:	e7db      	b.n	800431c <__ssputs_r+0x58>
 8004364:	462a      	mov	r2, r5
 8004366:	f000 fb97 	bl	8004a98 <_realloc_r>
 800436a:	4606      	mov	r6, r0
 800436c:	2800      	cmp	r0, #0
 800436e:	d1e1      	bne.n	8004334 <__ssputs_r+0x70>
 8004370:	6921      	ldr	r1, [r4, #16]
 8004372:	4650      	mov	r0, sl
 8004374:	f000 fab0 	bl	80048d8 <_free_r>
 8004378:	e7c7      	b.n	800430a <__ssputs_r+0x46>
	...

0800437c <_svfiprintf_r>:
 800437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004380:	4698      	mov	r8, r3
 8004382:	898b      	ldrh	r3, [r1, #12]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	b09d      	sub	sp, #116	; 0x74
 8004388:	4607      	mov	r7, r0
 800438a:	460d      	mov	r5, r1
 800438c:	4614      	mov	r4, r2
 800438e:	d50e      	bpl.n	80043ae <_svfiprintf_r+0x32>
 8004390:	690b      	ldr	r3, [r1, #16]
 8004392:	b963      	cbnz	r3, 80043ae <_svfiprintf_r+0x32>
 8004394:	2140      	movs	r1, #64	; 0x40
 8004396:	f000 fb0b 	bl	80049b0 <_malloc_r>
 800439a:	6028      	str	r0, [r5, #0]
 800439c:	6128      	str	r0, [r5, #16]
 800439e:	b920      	cbnz	r0, 80043aa <_svfiprintf_r+0x2e>
 80043a0:	230c      	movs	r3, #12
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043a8:	e0d1      	b.n	800454e <_svfiprintf_r+0x1d2>
 80043aa:	2340      	movs	r3, #64	; 0x40
 80043ac:	616b      	str	r3, [r5, #20]
 80043ae:	2300      	movs	r3, #0
 80043b0:	9309      	str	r3, [sp, #36]	; 0x24
 80043b2:	2320      	movs	r3, #32
 80043b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043bc:	2330      	movs	r3, #48	; 0x30
 80043be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004568 <_svfiprintf_r+0x1ec>
 80043c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043c6:	f04f 0901 	mov.w	r9, #1
 80043ca:	4623      	mov	r3, r4
 80043cc:	469a      	mov	sl, r3
 80043ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d2:	b10a      	cbz	r2, 80043d8 <_svfiprintf_r+0x5c>
 80043d4:	2a25      	cmp	r2, #37	; 0x25
 80043d6:	d1f9      	bne.n	80043cc <_svfiprintf_r+0x50>
 80043d8:	ebba 0b04 	subs.w	fp, sl, r4
 80043dc:	d00b      	beq.n	80043f6 <_svfiprintf_r+0x7a>
 80043de:	465b      	mov	r3, fp
 80043e0:	4622      	mov	r2, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	4638      	mov	r0, r7
 80043e6:	f7ff ff6d 	bl	80042c4 <__ssputs_r>
 80043ea:	3001      	adds	r0, #1
 80043ec:	f000 80aa 	beq.w	8004544 <_svfiprintf_r+0x1c8>
 80043f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f2:	445a      	add	r2, fp
 80043f4:	9209      	str	r2, [sp, #36]	; 0x24
 80043f6:	f89a 3000 	ldrb.w	r3, [sl]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80a2 	beq.w	8004544 <_svfiprintf_r+0x1c8>
 8004400:	2300      	movs	r3, #0
 8004402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800440a:	f10a 0a01 	add.w	sl, sl, #1
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	9307      	str	r3, [sp, #28]
 8004412:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004416:	931a      	str	r3, [sp, #104]	; 0x68
 8004418:	4654      	mov	r4, sl
 800441a:	2205      	movs	r2, #5
 800441c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004420:	4851      	ldr	r0, [pc, #324]	; (8004568 <_svfiprintf_r+0x1ec>)
 8004422:	f7fb fedd 	bl	80001e0 <memchr>
 8004426:	9a04      	ldr	r2, [sp, #16]
 8004428:	b9d8      	cbnz	r0, 8004462 <_svfiprintf_r+0xe6>
 800442a:	06d0      	lsls	r0, r2, #27
 800442c:	bf44      	itt	mi
 800442e:	2320      	movmi	r3, #32
 8004430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004434:	0711      	lsls	r1, r2, #28
 8004436:	bf44      	itt	mi
 8004438:	232b      	movmi	r3, #43	; 0x2b
 800443a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800443e:	f89a 3000 	ldrb.w	r3, [sl]
 8004442:	2b2a      	cmp	r3, #42	; 0x2a
 8004444:	d015      	beq.n	8004472 <_svfiprintf_r+0xf6>
 8004446:	9a07      	ldr	r2, [sp, #28]
 8004448:	4654      	mov	r4, sl
 800444a:	2000      	movs	r0, #0
 800444c:	f04f 0c0a 	mov.w	ip, #10
 8004450:	4621      	mov	r1, r4
 8004452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004456:	3b30      	subs	r3, #48	; 0x30
 8004458:	2b09      	cmp	r3, #9
 800445a:	d94e      	bls.n	80044fa <_svfiprintf_r+0x17e>
 800445c:	b1b0      	cbz	r0, 800448c <_svfiprintf_r+0x110>
 800445e:	9207      	str	r2, [sp, #28]
 8004460:	e014      	b.n	800448c <_svfiprintf_r+0x110>
 8004462:	eba0 0308 	sub.w	r3, r0, r8
 8004466:	fa09 f303 	lsl.w	r3, r9, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	9304      	str	r3, [sp, #16]
 800446e:	46a2      	mov	sl, r4
 8004470:	e7d2      	b.n	8004418 <_svfiprintf_r+0x9c>
 8004472:	9b03      	ldr	r3, [sp, #12]
 8004474:	1d19      	adds	r1, r3, #4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	9103      	str	r1, [sp, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	bfbb      	ittet	lt
 800447e:	425b      	neglt	r3, r3
 8004480:	f042 0202 	orrlt.w	r2, r2, #2
 8004484:	9307      	strge	r3, [sp, #28]
 8004486:	9307      	strlt	r3, [sp, #28]
 8004488:	bfb8      	it	lt
 800448a:	9204      	strlt	r2, [sp, #16]
 800448c:	7823      	ldrb	r3, [r4, #0]
 800448e:	2b2e      	cmp	r3, #46	; 0x2e
 8004490:	d10c      	bne.n	80044ac <_svfiprintf_r+0x130>
 8004492:	7863      	ldrb	r3, [r4, #1]
 8004494:	2b2a      	cmp	r3, #42	; 0x2a
 8004496:	d135      	bne.n	8004504 <_svfiprintf_r+0x188>
 8004498:	9b03      	ldr	r3, [sp, #12]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	9203      	str	r2, [sp, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	bfb8      	it	lt
 80044a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044a8:	3402      	adds	r4, #2
 80044aa:	9305      	str	r3, [sp, #20]
 80044ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004578 <_svfiprintf_r+0x1fc>
 80044b0:	7821      	ldrb	r1, [r4, #0]
 80044b2:	2203      	movs	r2, #3
 80044b4:	4650      	mov	r0, sl
 80044b6:	f7fb fe93 	bl	80001e0 <memchr>
 80044ba:	b140      	cbz	r0, 80044ce <_svfiprintf_r+0x152>
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	eba0 000a 	sub.w	r0, r0, sl
 80044c2:	fa03 f000 	lsl.w	r0, r3, r0
 80044c6:	9b04      	ldr	r3, [sp, #16]
 80044c8:	4303      	orrs	r3, r0
 80044ca:	3401      	adds	r4, #1
 80044cc:	9304      	str	r3, [sp, #16]
 80044ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d2:	4826      	ldr	r0, [pc, #152]	; (800456c <_svfiprintf_r+0x1f0>)
 80044d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044d8:	2206      	movs	r2, #6
 80044da:	f7fb fe81 	bl	80001e0 <memchr>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d038      	beq.n	8004554 <_svfiprintf_r+0x1d8>
 80044e2:	4b23      	ldr	r3, [pc, #140]	; (8004570 <_svfiprintf_r+0x1f4>)
 80044e4:	bb1b      	cbnz	r3, 800452e <_svfiprintf_r+0x1b2>
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	3307      	adds	r3, #7
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	3308      	adds	r3, #8
 80044f0:	9303      	str	r3, [sp, #12]
 80044f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f4:	4433      	add	r3, r6
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	e767      	b.n	80043ca <_svfiprintf_r+0x4e>
 80044fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80044fe:	460c      	mov	r4, r1
 8004500:	2001      	movs	r0, #1
 8004502:	e7a5      	b.n	8004450 <_svfiprintf_r+0xd4>
 8004504:	2300      	movs	r3, #0
 8004506:	3401      	adds	r4, #1
 8004508:	9305      	str	r3, [sp, #20]
 800450a:	4619      	mov	r1, r3
 800450c:	f04f 0c0a 	mov.w	ip, #10
 8004510:	4620      	mov	r0, r4
 8004512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004516:	3a30      	subs	r2, #48	; 0x30
 8004518:	2a09      	cmp	r2, #9
 800451a:	d903      	bls.n	8004524 <_svfiprintf_r+0x1a8>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0c5      	beq.n	80044ac <_svfiprintf_r+0x130>
 8004520:	9105      	str	r1, [sp, #20]
 8004522:	e7c3      	b.n	80044ac <_svfiprintf_r+0x130>
 8004524:	fb0c 2101 	mla	r1, ip, r1, r2
 8004528:	4604      	mov	r4, r0
 800452a:	2301      	movs	r3, #1
 800452c:	e7f0      	b.n	8004510 <_svfiprintf_r+0x194>
 800452e:	ab03      	add	r3, sp, #12
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	462a      	mov	r2, r5
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <_svfiprintf_r+0x1f8>)
 8004536:	a904      	add	r1, sp, #16
 8004538:	4638      	mov	r0, r7
 800453a:	f3af 8000 	nop.w
 800453e:	1c42      	adds	r2, r0, #1
 8004540:	4606      	mov	r6, r0
 8004542:	d1d6      	bne.n	80044f2 <_svfiprintf_r+0x176>
 8004544:	89ab      	ldrh	r3, [r5, #12]
 8004546:	065b      	lsls	r3, r3, #25
 8004548:	f53f af2c 	bmi.w	80043a4 <_svfiprintf_r+0x28>
 800454c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800454e:	b01d      	add	sp, #116	; 0x74
 8004550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	ab03      	add	r3, sp, #12
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	462a      	mov	r2, r5
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <_svfiprintf_r+0x1f8>)
 800455c:	a904      	add	r1, sp, #16
 800455e:	4638      	mov	r0, r7
 8004560:	f000 f87a 	bl	8004658 <_printf_i>
 8004564:	e7eb      	b.n	800453e <_svfiprintf_r+0x1c2>
 8004566:	bf00      	nop
 8004568:	08004d2c 	.word	0x08004d2c
 800456c:	08004d36 	.word	0x08004d36
 8004570:	00000000 	.word	0x00000000
 8004574:	080042c5 	.word	0x080042c5
 8004578:	08004d32 	.word	0x08004d32

0800457c <_printf_common>:
 800457c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	4616      	mov	r6, r2
 8004582:	4699      	mov	r9, r3
 8004584:	688a      	ldr	r2, [r1, #8]
 8004586:	690b      	ldr	r3, [r1, #16]
 8004588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800458c:	4293      	cmp	r3, r2
 800458e:	bfb8      	it	lt
 8004590:	4613      	movlt	r3, r2
 8004592:	6033      	str	r3, [r6, #0]
 8004594:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004598:	4607      	mov	r7, r0
 800459a:	460c      	mov	r4, r1
 800459c:	b10a      	cbz	r2, 80045a2 <_printf_common+0x26>
 800459e:	3301      	adds	r3, #1
 80045a0:	6033      	str	r3, [r6, #0]
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	0699      	lsls	r1, r3, #26
 80045a6:	bf42      	ittt	mi
 80045a8:	6833      	ldrmi	r3, [r6, #0]
 80045aa:	3302      	addmi	r3, #2
 80045ac:	6033      	strmi	r3, [r6, #0]
 80045ae:	6825      	ldr	r5, [r4, #0]
 80045b0:	f015 0506 	ands.w	r5, r5, #6
 80045b4:	d106      	bne.n	80045c4 <_printf_common+0x48>
 80045b6:	f104 0a19 	add.w	sl, r4, #25
 80045ba:	68e3      	ldr	r3, [r4, #12]
 80045bc:	6832      	ldr	r2, [r6, #0]
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	42ab      	cmp	r3, r5
 80045c2:	dc26      	bgt.n	8004612 <_printf_common+0x96>
 80045c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045c8:	1e13      	subs	r3, r2, #0
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	bf18      	it	ne
 80045ce:	2301      	movne	r3, #1
 80045d0:	0692      	lsls	r2, r2, #26
 80045d2:	d42b      	bmi.n	800462c <_printf_common+0xb0>
 80045d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045d8:	4649      	mov	r1, r9
 80045da:	4638      	mov	r0, r7
 80045dc:	47c0      	blx	r8
 80045de:	3001      	adds	r0, #1
 80045e0:	d01e      	beq.n	8004620 <_printf_common+0xa4>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	68e5      	ldr	r5, [r4, #12]
 80045e6:	6832      	ldr	r2, [r6, #0]
 80045e8:	f003 0306 	and.w	r3, r3, #6
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	bf08      	it	eq
 80045f0:	1aad      	subeq	r5, r5, r2
 80045f2:	68a3      	ldr	r3, [r4, #8]
 80045f4:	6922      	ldr	r2, [r4, #16]
 80045f6:	bf0c      	ite	eq
 80045f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045fc:	2500      	movne	r5, #0
 80045fe:	4293      	cmp	r3, r2
 8004600:	bfc4      	itt	gt
 8004602:	1a9b      	subgt	r3, r3, r2
 8004604:	18ed      	addgt	r5, r5, r3
 8004606:	2600      	movs	r6, #0
 8004608:	341a      	adds	r4, #26
 800460a:	42b5      	cmp	r5, r6
 800460c:	d11a      	bne.n	8004644 <_printf_common+0xc8>
 800460e:	2000      	movs	r0, #0
 8004610:	e008      	b.n	8004624 <_printf_common+0xa8>
 8004612:	2301      	movs	r3, #1
 8004614:	4652      	mov	r2, sl
 8004616:	4649      	mov	r1, r9
 8004618:	4638      	mov	r0, r7
 800461a:	47c0      	blx	r8
 800461c:	3001      	adds	r0, #1
 800461e:	d103      	bne.n	8004628 <_printf_common+0xac>
 8004620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004628:	3501      	adds	r5, #1
 800462a:	e7c6      	b.n	80045ba <_printf_common+0x3e>
 800462c:	18e1      	adds	r1, r4, r3
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	2030      	movs	r0, #48	; 0x30
 8004632:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004636:	4422      	add	r2, r4
 8004638:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800463c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004640:	3302      	adds	r3, #2
 8004642:	e7c7      	b.n	80045d4 <_printf_common+0x58>
 8004644:	2301      	movs	r3, #1
 8004646:	4622      	mov	r2, r4
 8004648:	4649      	mov	r1, r9
 800464a:	4638      	mov	r0, r7
 800464c:	47c0      	blx	r8
 800464e:	3001      	adds	r0, #1
 8004650:	d0e6      	beq.n	8004620 <_printf_common+0xa4>
 8004652:	3601      	adds	r6, #1
 8004654:	e7d9      	b.n	800460a <_printf_common+0x8e>
	...

08004658 <_printf_i>:
 8004658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800465c:	7e0f      	ldrb	r7, [r1, #24]
 800465e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004660:	2f78      	cmp	r7, #120	; 0x78
 8004662:	4691      	mov	r9, r2
 8004664:	4680      	mov	r8, r0
 8004666:	460c      	mov	r4, r1
 8004668:	469a      	mov	sl, r3
 800466a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800466e:	d807      	bhi.n	8004680 <_printf_i+0x28>
 8004670:	2f62      	cmp	r7, #98	; 0x62
 8004672:	d80a      	bhi.n	800468a <_printf_i+0x32>
 8004674:	2f00      	cmp	r7, #0
 8004676:	f000 80d8 	beq.w	800482a <_printf_i+0x1d2>
 800467a:	2f58      	cmp	r7, #88	; 0x58
 800467c:	f000 80a3 	beq.w	80047c6 <_printf_i+0x16e>
 8004680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004688:	e03a      	b.n	8004700 <_printf_i+0xa8>
 800468a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800468e:	2b15      	cmp	r3, #21
 8004690:	d8f6      	bhi.n	8004680 <_printf_i+0x28>
 8004692:	a101      	add	r1, pc, #4	; (adr r1, 8004698 <_printf_i+0x40>)
 8004694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004698:	080046f1 	.word	0x080046f1
 800469c:	08004705 	.word	0x08004705
 80046a0:	08004681 	.word	0x08004681
 80046a4:	08004681 	.word	0x08004681
 80046a8:	08004681 	.word	0x08004681
 80046ac:	08004681 	.word	0x08004681
 80046b0:	08004705 	.word	0x08004705
 80046b4:	08004681 	.word	0x08004681
 80046b8:	08004681 	.word	0x08004681
 80046bc:	08004681 	.word	0x08004681
 80046c0:	08004681 	.word	0x08004681
 80046c4:	08004811 	.word	0x08004811
 80046c8:	08004735 	.word	0x08004735
 80046cc:	080047f3 	.word	0x080047f3
 80046d0:	08004681 	.word	0x08004681
 80046d4:	08004681 	.word	0x08004681
 80046d8:	08004833 	.word	0x08004833
 80046dc:	08004681 	.word	0x08004681
 80046e0:	08004735 	.word	0x08004735
 80046e4:	08004681 	.word	0x08004681
 80046e8:	08004681 	.word	0x08004681
 80046ec:	080047fb 	.word	0x080047fb
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	1d1a      	adds	r2, r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	602a      	str	r2, [r5, #0]
 80046f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004700:	2301      	movs	r3, #1
 8004702:	e0a3      	b.n	800484c <_printf_i+0x1f4>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	6829      	ldr	r1, [r5, #0]
 8004708:	0606      	lsls	r6, r0, #24
 800470a:	f101 0304 	add.w	r3, r1, #4
 800470e:	d50a      	bpl.n	8004726 <_printf_i+0xce>
 8004710:	680e      	ldr	r6, [r1, #0]
 8004712:	602b      	str	r3, [r5, #0]
 8004714:	2e00      	cmp	r6, #0
 8004716:	da03      	bge.n	8004720 <_printf_i+0xc8>
 8004718:	232d      	movs	r3, #45	; 0x2d
 800471a:	4276      	negs	r6, r6
 800471c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004720:	485e      	ldr	r0, [pc, #376]	; (800489c <_printf_i+0x244>)
 8004722:	230a      	movs	r3, #10
 8004724:	e019      	b.n	800475a <_printf_i+0x102>
 8004726:	680e      	ldr	r6, [r1, #0]
 8004728:	602b      	str	r3, [r5, #0]
 800472a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800472e:	bf18      	it	ne
 8004730:	b236      	sxthne	r6, r6
 8004732:	e7ef      	b.n	8004714 <_printf_i+0xbc>
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	6820      	ldr	r0, [r4, #0]
 8004738:	1d19      	adds	r1, r3, #4
 800473a:	6029      	str	r1, [r5, #0]
 800473c:	0601      	lsls	r1, r0, #24
 800473e:	d501      	bpl.n	8004744 <_printf_i+0xec>
 8004740:	681e      	ldr	r6, [r3, #0]
 8004742:	e002      	b.n	800474a <_printf_i+0xf2>
 8004744:	0646      	lsls	r6, r0, #25
 8004746:	d5fb      	bpl.n	8004740 <_printf_i+0xe8>
 8004748:	881e      	ldrh	r6, [r3, #0]
 800474a:	4854      	ldr	r0, [pc, #336]	; (800489c <_printf_i+0x244>)
 800474c:	2f6f      	cmp	r7, #111	; 0x6f
 800474e:	bf0c      	ite	eq
 8004750:	2308      	moveq	r3, #8
 8004752:	230a      	movne	r3, #10
 8004754:	2100      	movs	r1, #0
 8004756:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800475a:	6865      	ldr	r5, [r4, #4]
 800475c:	60a5      	str	r5, [r4, #8]
 800475e:	2d00      	cmp	r5, #0
 8004760:	bfa2      	ittt	ge
 8004762:	6821      	ldrge	r1, [r4, #0]
 8004764:	f021 0104 	bicge.w	r1, r1, #4
 8004768:	6021      	strge	r1, [r4, #0]
 800476a:	b90e      	cbnz	r6, 8004770 <_printf_i+0x118>
 800476c:	2d00      	cmp	r5, #0
 800476e:	d04d      	beq.n	800480c <_printf_i+0x1b4>
 8004770:	4615      	mov	r5, r2
 8004772:	fbb6 f1f3 	udiv	r1, r6, r3
 8004776:	fb03 6711 	mls	r7, r3, r1, r6
 800477a:	5dc7      	ldrb	r7, [r0, r7]
 800477c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004780:	4637      	mov	r7, r6
 8004782:	42bb      	cmp	r3, r7
 8004784:	460e      	mov	r6, r1
 8004786:	d9f4      	bls.n	8004772 <_printf_i+0x11a>
 8004788:	2b08      	cmp	r3, #8
 800478a:	d10b      	bne.n	80047a4 <_printf_i+0x14c>
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	07de      	lsls	r6, r3, #31
 8004790:	d508      	bpl.n	80047a4 <_printf_i+0x14c>
 8004792:	6923      	ldr	r3, [r4, #16]
 8004794:	6861      	ldr	r1, [r4, #4]
 8004796:	4299      	cmp	r1, r3
 8004798:	bfde      	ittt	le
 800479a:	2330      	movle	r3, #48	; 0x30
 800479c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047a4:	1b52      	subs	r2, r2, r5
 80047a6:	6122      	str	r2, [r4, #16]
 80047a8:	f8cd a000 	str.w	sl, [sp]
 80047ac:	464b      	mov	r3, r9
 80047ae:	aa03      	add	r2, sp, #12
 80047b0:	4621      	mov	r1, r4
 80047b2:	4640      	mov	r0, r8
 80047b4:	f7ff fee2 	bl	800457c <_printf_common>
 80047b8:	3001      	adds	r0, #1
 80047ba:	d14c      	bne.n	8004856 <_printf_i+0x1fe>
 80047bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047c0:	b004      	add	sp, #16
 80047c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c6:	4835      	ldr	r0, [pc, #212]	; (800489c <_printf_i+0x244>)
 80047c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047cc:	6829      	ldr	r1, [r5, #0]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047d4:	6029      	str	r1, [r5, #0]
 80047d6:	061d      	lsls	r5, r3, #24
 80047d8:	d514      	bpl.n	8004804 <_printf_i+0x1ac>
 80047da:	07df      	lsls	r7, r3, #31
 80047dc:	bf44      	itt	mi
 80047de:	f043 0320 	orrmi.w	r3, r3, #32
 80047e2:	6023      	strmi	r3, [r4, #0]
 80047e4:	b91e      	cbnz	r6, 80047ee <_printf_i+0x196>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	f023 0320 	bic.w	r3, r3, #32
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	2310      	movs	r3, #16
 80047f0:	e7b0      	b.n	8004754 <_printf_i+0xfc>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	f043 0320 	orr.w	r3, r3, #32
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	2378      	movs	r3, #120	; 0x78
 80047fc:	4828      	ldr	r0, [pc, #160]	; (80048a0 <_printf_i+0x248>)
 80047fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004802:	e7e3      	b.n	80047cc <_printf_i+0x174>
 8004804:	0659      	lsls	r1, r3, #25
 8004806:	bf48      	it	mi
 8004808:	b2b6      	uxthmi	r6, r6
 800480a:	e7e6      	b.n	80047da <_printf_i+0x182>
 800480c:	4615      	mov	r5, r2
 800480e:	e7bb      	b.n	8004788 <_printf_i+0x130>
 8004810:	682b      	ldr	r3, [r5, #0]
 8004812:	6826      	ldr	r6, [r4, #0]
 8004814:	6961      	ldr	r1, [r4, #20]
 8004816:	1d18      	adds	r0, r3, #4
 8004818:	6028      	str	r0, [r5, #0]
 800481a:	0635      	lsls	r5, r6, #24
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	d501      	bpl.n	8004824 <_printf_i+0x1cc>
 8004820:	6019      	str	r1, [r3, #0]
 8004822:	e002      	b.n	800482a <_printf_i+0x1d2>
 8004824:	0670      	lsls	r0, r6, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0x1c8>
 8004828:	8019      	strh	r1, [r3, #0]
 800482a:	2300      	movs	r3, #0
 800482c:	6123      	str	r3, [r4, #16]
 800482e:	4615      	mov	r5, r2
 8004830:	e7ba      	b.n	80047a8 <_printf_i+0x150>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	1d1a      	adds	r2, r3, #4
 8004836:	602a      	str	r2, [r5, #0]
 8004838:	681d      	ldr	r5, [r3, #0]
 800483a:	6862      	ldr	r2, [r4, #4]
 800483c:	2100      	movs	r1, #0
 800483e:	4628      	mov	r0, r5
 8004840:	f7fb fcce 	bl	80001e0 <memchr>
 8004844:	b108      	cbz	r0, 800484a <_printf_i+0x1f2>
 8004846:	1b40      	subs	r0, r0, r5
 8004848:	6060      	str	r0, [r4, #4]
 800484a:	6863      	ldr	r3, [r4, #4]
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	2300      	movs	r3, #0
 8004850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004854:	e7a8      	b.n	80047a8 <_printf_i+0x150>
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	462a      	mov	r2, r5
 800485a:	4649      	mov	r1, r9
 800485c:	4640      	mov	r0, r8
 800485e:	47d0      	blx	sl
 8004860:	3001      	adds	r0, #1
 8004862:	d0ab      	beq.n	80047bc <_printf_i+0x164>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	079b      	lsls	r3, r3, #30
 8004868:	d413      	bmi.n	8004892 <_printf_i+0x23a>
 800486a:	68e0      	ldr	r0, [r4, #12]
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	4298      	cmp	r0, r3
 8004870:	bfb8      	it	lt
 8004872:	4618      	movlt	r0, r3
 8004874:	e7a4      	b.n	80047c0 <_printf_i+0x168>
 8004876:	2301      	movs	r3, #1
 8004878:	4632      	mov	r2, r6
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	47d0      	blx	sl
 8004880:	3001      	adds	r0, #1
 8004882:	d09b      	beq.n	80047bc <_printf_i+0x164>
 8004884:	3501      	adds	r5, #1
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	9903      	ldr	r1, [sp, #12]
 800488a:	1a5b      	subs	r3, r3, r1
 800488c:	42ab      	cmp	r3, r5
 800488e:	dcf2      	bgt.n	8004876 <_printf_i+0x21e>
 8004890:	e7eb      	b.n	800486a <_printf_i+0x212>
 8004892:	2500      	movs	r5, #0
 8004894:	f104 0619 	add.w	r6, r4, #25
 8004898:	e7f5      	b.n	8004886 <_printf_i+0x22e>
 800489a:	bf00      	nop
 800489c:	08004d3d 	.word	0x08004d3d
 80048a0:	08004d4e 	.word	0x08004d4e

080048a4 <memmove>:
 80048a4:	4288      	cmp	r0, r1
 80048a6:	b510      	push	{r4, lr}
 80048a8:	eb01 0402 	add.w	r4, r1, r2
 80048ac:	d902      	bls.n	80048b4 <memmove+0x10>
 80048ae:	4284      	cmp	r4, r0
 80048b0:	4623      	mov	r3, r4
 80048b2:	d807      	bhi.n	80048c4 <memmove+0x20>
 80048b4:	1e43      	subs	r3, r0, #1
 80048b6:	42a1      	cmp	r1, r4
 80048b8:	d008      	beq.n	80048cc <memmove+0x28>
 80048ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048c2:	e7f8      	b.n	80048b6 <memmove+0x12>
 80048c4:	4402      	add	r2, r0
 80048c6:	4601      	mov	r1, r0
 80048c8:	428a      	cmp	r2, r1
 80048ca:	d100      	bne.n	80048ce <memmove+0x2a>
 80048cc:	bd10      	pop	{r4, pc}
 80048ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048d6:	e7f7      	b.n	80048c8 <memmove+0x24>

080048d8 <_free_r>:
 80048d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048da:	2900      	cmp	r1, #0
 80048dc:	d044      	beq.n	8004968 <_free_r+0x90>
 80048de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e2:	9001      	str	r0, [sp, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f1a1 0404 	sub.w	r4, r1, #4
 80048ea:	bfb8      	it	lt
 80048ec:	18e4      	addlt	r4, r4, r3
 80048ee:	f000 f913 	bl	8004b18 <__malloc_lock>
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <_free_r+0x94>)
 80048f4:	9801      	ldr	r0, [sp, #4]
 80048f6:	6813      	ldr	r3, [r2, #0]
 80048f8:	b933      	cbnz	r3, 8004908 <_free_r+0x30>
 80048fa:	6063      	str	r3, [r4, #4]
 80048fc:	6014      	str	r4, [r2, #0]
 80048fe:	b003      	add	sp, #12
 8004900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004904:	f000 b90e 	b.w	8004b24 <__malloc_unlock>
 8004908:	42a3      	cmp	r3, r4
 800490a:	d908      	bls.n	800491e <_free_r+0x46>
 800490c:	6825      	ldr	r5, [r4, #0]
 800490e:	1961      	adds	r1, r4, r5
 8004910:	428b      	cmp	r3, r1
 8004912:	bf01      	itttt	eq
 8004914:	6819      	ldreq	r1, [r3, #0]
 8004916:	685b      	ldreq	r3, [r3, #4]
 8004918:	1949      	addeq	r1, r1, r5
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	e7ed      	b.n	80048fa <_free_r+0x22>
 800491e:	461a      	mov	r2, r3
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b10b      	cbz	r3, 8004928 <_free_r+0x50>
 8004924:	42a3      	cmp	r3, r4
 8004926:	d9fa      	bls.n	800491e <_free_r+0x46>
 8004928:	6811      	ldr	r1, [r2, #0]
 800492a:	1855      	adds	r5, r2, r1
 800492c:	42a5      	cmp	r5, r4
 800492e:	d10b      	bne.n	8004948 <_free_r+0x70>
 8004930:	6824      	ldr	r4, [r4, #0]
 8004932:	4421      	add	r1, r4
 8004934:	1854      	adds	r4, r2, r1
 8004936:	42a3      	cmp	r3, r4
 8004938:	6011      	str	r1, [r2, #0]
 800493a:	d1e0      	bne.n	80048fe <_free_r+0x26>
 800493c:	681c      	ldr	r4, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	6053      	str	r3, [r2, #4]
 8004942:	4421      	add	r1, r4
 8004944:	6011      	str	r1, [r2, #0]
 8004946:	e7da      	b.n	80048fe <_free_r+0x26>
 8004948:	d902      	bls.n	8004950 <_free_r+0x78>
 800494a:	230c      	movs	r3, #12
 800494c:	6003      	str	r3, [r0, #0]
 800494e:	e7d6      	b.n	80048fe <_free_r+0x26>
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	1961      	adds	r1, r4, r5
 8004954:	428b      	cmp	r3, r1
 8004956:	bf04      	itt	eq
 8004958:	6819      	ldreq	r1, [r3, #0]
 800495a:	685b      	ldreq	r3, [r3, #4]
 800495c:	6063      	str	r3, [r4, #4]
 800495e:	bf04      	itt	eq
 8004960:	1949      	addeq	r1, r1, r5
 8004962:	6021      	streq	r1, [r4, #0]
 8004964:	6054      	str	r4, [r2, #4]
 8004966:	e7ca      	b.n	80048fe <_free_r+0x26>
 8004968:	b003      	add	sp, #12
 800496a:	bd30      	pop	{r4, r5, pc}
 800496c:	20000184 	.word	0x20000184

08004970 <sbrk_aligned>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4e0e      	ldr	r6, [pc, #56]	; (80049ac <sbrk_aligned+0x3c>)
 8004974:	460c      	mov	r4, r1
 8004976:	6831      	ldr	r1, [r6, #0]
 8004978:	4605      	mov	r5, r0
 800497a:	b911      	cbnz	r1, 8004982 <sbrk_aligned+0x12>
 800497c:	f000 f8bc 	bl	8004af8 <_sbrk_r>
 8004980:	6030      	str	r0, [r6, #0]
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	f000 f8b7 	bl	8004af8 <_sbrk_r>
 800498a:	1c43      	adds	r3, r0, #1
 800498c:	d00a      	beq.n	80049a4 <sbrk_aligned+0x34>
 800498e:	1cc4      	adds	r4, r0, #3
 8004990:	f024 0403 	bic.w	r4, r4, #3
 8004994:	42a0      	cmp	r0, r4
 8004996:	d007      	beq.n	80049a8 <sbrk_aligned+0x38>
 8004998:	1a21      	subs	r1, r4, r0
 800499a:	4628      	mov	r0, r5
 800499c:	f000 f8ac 	bl	8004af8 <_sbrk_r>
 80049a0:	3001      	adds	r0, #1
 80049a2:	d101      	bne.n	80049a8 <sbrk_aligned+0x38>
 80049a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80049a8:	4620      	mov	r0, r4
 80049aa:	bd70      	pop	{r4, r5, r6, pc}
 80049ac:	20000188 	.word	0x20000188

080049b0 <_malloc_r>:
 80049b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	1ccd      	adds	r5, r1, #3
 80049b6:	f025 0503 	bic.w	r5, r5, #3
 80049ba:	3508      	adds	r5, #8
 80049bc:	2d0c      	cmp	r5, #12
 80049be:	bf38      	it	cc
 80049c0:	250c      	movcc	r5, #12
 80049c2:	2d00      	cmp	r5, #0
 80049c4:	4607      	mov	r7, r0
 80049c6:	db01      	blt.n	80049cc <_malloc_r+0x1c>
 80049c8:	42a9      	cmp	r1, r5
 80049ca:	d905      	bls.n	80049d8 <_malloc_r+0x28>
 80049cc:	230c      	movs	r3, #12
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	2600      	movs	r6, #0
 80049d2:	4630      	mov	r0, r6
 80049d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d8:	4e2e      	ldr	r6, [pc, #184]	; (8004a94 <_malloc_r+0xe4>)
 80049da:	f000 f89d 	bl	8004b18 <__malloc_lock>
 80049de:	6833      	ldr	r3, [r6, #0]
 80049e0:	461c      	mov	r4, r3
 80049e2:	bb34      	cbnz	r4, 8004a32 <_malloc_r+0x82>
 80049e4:	4629      	mov	r1, r5
 80049e6:	4638      	mov	r0, r7
 80049e8:	f7ff ffc2 	bl	8004970 <sbrk_aligned>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	4604      	mov	r4, r0
 80049f0:	d14d      	bne.n	8004a8e <_malloc_r+0xde>
 80049f2:	6834      	ldr	r4, [r6, #0]
 80049f4:	4626      	mov	r6, r4
 80049f6:	2e00      	cmp	r6, #0
 80049f8:	d140      	bne.n	8004a7c <_malloc_r+0xcc>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	4631      	mov	r1, r6
 80049fe:	4638      	mov	r0, r7
 8004a00:	eb04 0803 	add.w	r8, r4, r3
 8004a04:	f000 f878 	bl	8004af8 <_sbrk_r>
 8004a08:	4580      	cmp	r8, r0
 8004a0a:	d13a      	bne.n	8004a82 <_malloc_r+0xd2>
 8004a0c:	6821      	ldr	r1, [r4, #0]
 8004a0e:	3503      	adds	r5, #3
 8004a10:	1a6d      	subs	r5, r5, r1
 8004a12:	f025 0503 	bic.w	r5, r5, #3
 8004a16:	3508      	adds	r5, #8
 8004a18:	2d0c      	cmp	r5, #12
 8004a1a:	bf38      	it	cc
 8004a1c:	250c      	movcc	r5, #12
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4638      	mov	r0, r7
 8004a22:	f7ff ffa5 	bl	8004970 <sbrk_aligned>
 8004a26:	3001      	adds	r0, #1
 8004a28:	d02b      	beq.n	8004a82 <_malloc_r+0xd2>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	442b      	add	r3, r5
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	e00e      	b.n	8004a50 <_malloc_r+0xa0>
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	1b52      	subs	r2, r2, r5
 8004a36:	d41e      	bmi.n	8004a76 <_malloc_r+0xc6>
 8004a38:	2a0b      	cmp	r2, #11
 8004a3a:	d916      	bls.n	8004a6a <_malloc_r+0xba>
 8004a3c:	1961      	adds	r1, r4, r5
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	6025      	str	r5, [r4, #0]
 8004a42:	bf18      	it	ne
 8004a44:	6059      	strne	r1, [r3, #4]
 8004a46:	6863      	ldr	r3, [r4, #4]
 8004a48:	bf08      	it	eq
 8004a4a:	6031      	streq	r1, [r6, #0]
 8004a4c:	5162      	str	r2, [r4, r5]
 8004a4e:	604b      	str	r3, [r1, #4]
 8004a50:	4638      	mov	r0, r7
 8004a52:	f104 060b 	add.w	r6, r4, #11
 8004a56:	f000 f865 	bl	8004b24 <__malloc_unlock>
 8004a5a:	f026 0607 	bic.w	r6, r6, #7
 8004a5e:	1d23      	adds	r3, r4, #4
 8004a60:	1af2      	subs	r2, r6, r3
 8004a62:	d0b6      	beq.n	80049d2 <_malloc_r+0x22>
 8004a64:	1b9b      	subs	r3, r3, r6
 8004a66:	50a3      	str	r3, [r4, r2]
 8004a68:	e7b3      	b.n	80049d2 <_malloc_r+0x22>
 8004a6a:	6862      	ldr	r2, [r4, #4]
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	bf0c      	ite	eq
 8004a70:	6032      	streq	r2, [r6, #0]
 8004a72:	605a      	strne	r2, [r3, #4]
 8004a74:	e7ec      	b.n	8004a50 <_malloc_r+0xa0>
 8004a76:	4623      	mov	r3, r4
 8004a78:	6864      	ldr	r4, [r4, #4]
 8004a7a:	e7b2      	b.n	80049e2 <_malloc_r+0x32>
 8004a7c:	4634      	mov	r4, r6
 8004a7e:	6876      	ldr	r6, [r6, #4]
 8004a80:	e7b9      	b.n	80049f6 <_malloc_r+0x46>
 8004a82:	230c      	movs	r3, #12
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4638      	mov	r0, r7
 8004a88:	f000 f84c 	bl	8004b24 <__malloc_unlock>
 8004a8c:	e7a1      	b.n	80049d2 <_malloc_r+0x22>
 8004a8e:	6025      	str	r5, [r4, #0]
 8004a90:	e7de      	b.n	8004a50 <_malloc_r+0xa0>
 8004a92:	bf00      	nop
 8004a94:	20000184 	.word	0x20000184

08004a98 <_realloc_r>:
 8004a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9c:	4680      	mov	r8, r0
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	460e      	mov	r6, r1
 8004aa2:	b921      	cbnz	r1, 8004aae <_realloc_r+0x16>
 8004aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	f7ff bf81 	b.w	80049b0 <_malloc_r>
 8004aae:	b92a      	cbnz	r2, 8004abc <_realloc_r+0x24>
 8004ab0:	f7ff ff12 	bl	80048d8 <_free_r>
 8004ab4:	4625      	mov	r5, r4
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004abc:	f000 f838 	bl	8004b30 <_malloc_usable_size_r>
 8004ac0:	4284      	cmp	r4, r0
 8004ac2:	4607      	mov	r7, r0
 8004ac4:	d802      	bhi.n	8004acc <_realloc_r+0x34>
 8004ac6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004aca:	d812      	bhi.n	8004af2 <_realloc_r+0x5a>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff ff6e 	bl	80049b0 <_malloc_r>
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d0ed      	beq.n	8004ab6 <_realloc_r+0x1e>
 8004ada:	42bc      	cmp	r4, r7
 8004adc:	4622      	mov	r2, r4
 8004ade:	4631      	mov	r1, r6
 8004ae0:	bf28      	it	cs
 8004ae2:	463a      	movcs	r2, r7
 8004ae4:	f7ff fba4 	bl	8004230 <memcpy>
 8004ae8:	4631      	mov	r1, r6
 8004aea:	4640      	mov	r0, r8
 8004aec:	f7ff fef4 	bl	80048d8 <_free_r>
 8004af0:	e7e1      	b.n	8004ab6 <_realloc_r+0x1e>
 8004af2:	4635      	mov	r5, r6
 8004af4:	e7df      	b.n	8004ab6 <_realloc_r+0x1e>
	...

08004af8 <_sbrk_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d06      	ldr	r5, [pc, #24]	; (8004b14 <_sbrk_r+0x1c>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	f7fc fefe 	bl	8001904 <_sbrk>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_sbrk_r+0x1a>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_sbrk_r+0x1a>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	2000018c 	.word	0x2000018c

08004b18 <__malloc_lock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	; (8004b20 <__malloc_lock+0x8>)
 8004b1a:	f000 b811 	b.w	8004b40 <__retarget_lock_acquire_recursive>
 8004b1e:	bf00      	nop
 8004b20:	20000190 	.word	0x20000190

08004b24 <__malloc_unlock>:
 8004b24:	4801      	ldr	r0, [pc, #4]	; (8004b2c <__malloc_unlock+0x8>)
 8004b26:	f000 b80c 	b.w	8004b42 <__retarget_lock_release_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	20000190 	.word	0x20000190

08004b30 <_malloc_usable_size_r>:
 8004b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b34:	1f18      	subs	r0, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfbc      	itt	lt
 8004b3a:	580b      	ldrlt	r3, [r1, r0]
 8004b3c:	18c0      	addlt	r0, r0, r3
 8004b3e:	4770      	bx	lr

08004b40 <__retarget_lock_acquire_recursive>:
 8004b40:	4770      	bx	lr

08004b42 <__retarget_lock_release_recursive>:
 8004b42:	4770      	bx	lr

08004b44 <_init>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	bf00      	nop
 8004b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4a:	bc08      	pop	{r3}
 8004b4c:	469e      	mov	lr, r3
 8004b4e:	4770      	bx	lr

08004b50 <_fini>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr
