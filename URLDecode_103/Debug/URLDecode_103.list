
URLDecode_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000321c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08003328  08003328  00013328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae4  08003ae4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ae4  08003ae4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ae4  08003ae4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003b5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003b5c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9f7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e39  00000000  00000000  0002ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  0002f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018846  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d82e  00000000  00000000  0004890e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c301  00000000  00000000  0005613c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e243d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000e2490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003310 	.word	0x08003310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003310 	.word	0x08003310

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800016c:	f003 0301 	and.w	r3, r3, #1
 8000170:	2b00      	cmp	r3, #0
 8000172:	d013      	beq.n	800019c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800017c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000180:	2b00      	cmp	r3, #0
 8000182:	d00b      	beq.n	800019c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000184:	e000      	b.n	8000188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f9      	beq.n	8000186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	b2d2      	uxtb	r2, r2
 800019a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800019c:	687b      	ldr	r3, [r7, #4]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	60f8      	str	r0, [r7, #12]
 80001b0:	60b9      	str	r1, [r7, #8]
 80001b2:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 50);
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	b29a      	uxth	r2, r3
 80001b8:	2332      	movs	r3, #50	; 0x32
 80001ba:	68b9      	ldr	r1, [r7, #8]
 80001bc:	480c      	ldr	r0, [pc, #48]	; (80001f0 <_write+0x48>)
 80001be:	f001 fe33 	bl	8001e28 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 80001c2:	2300      	movs	r3, #0
 80001c4:	617b      	str	r3, [r7, #20]
 80001c6:	e009      	b.n	80001dc <_write+0x34>
		ITM_SendChar(*ptr++);
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	1c5a      	adds	r2, r3, #1
 80001cc:	60ba      	str	r2, [r7, #8]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f7ff ffc3 	bl	800015c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	3301      	adds	r3, #1
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	697a      	ldr	r2, [r7, #20]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	dbf1      	blt.n	80001c8 <_write+0x20>
	}
	return len;
 80001e4:	687b      	ldr	r3, [r7, #4]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3718      	adds	r7, #24
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000008c 	.word	0x2000008c

080001f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b08a      	sub	sp, #40	; 0x28
 80001f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fa:	f000 fc81 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fe:	f000 f963 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000202:	f000 f9d1 	bl	80005a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000206:	f000 f9a5 	bl	8000554 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("URL Decoder Test\n");
 800020a:	487a      	ldr	r0, [pc, #488]	; (80003f4 <main+0x200>)
 800020c:	f002 f94a 	bl	80024a4 <puts>
	  printf("================\n\n");
 8000210:	4879      	ldr	r0, [pc, #484]	; (80003f8 <main+0x204>)
 8000212:	f002 f947 	bl	80024a4 <puts>
	  /* My TEST */
	  printf("Test Zerg:  \n");
 8000216:	4879      	ldr	r0, [pc, #484]	; (80003fc <main+0x208>)
 8000218:	f002 f944 	bl	80024a4 <puts>
	  printf("-------------------------------\n");
 800021c:	4878      	ldr	r0, [pc, #480]	; (8000400 <main+0x20c>)
 800021e:	f002 f941 	bl	80024a4 <puts>
	  printf("Input:           myhome/groundfloor/24\n");
 8000222:	4878      	ldr	r0, [pc, #480]	; (8000404 <main+0x210>)
 8000224:	f002 f93e 	bl	80024a4 <puts>
	  printf("Expected Output: a myhome/groundfloor/24)\n");
 8000228:	4877      	ldr	r0, [pc, #476]	; (8000408 <main+0x214>)
 800022a:	f002 f93b 	bl	80024a4 <puts>
	  char *my_test = urlDecode("myhome/groundfloor/24");
 800022e:	4877      	ldr	r0, [pc, #476]	; (800040c <main+0x218>)
 8000230:	f000 fbac 	bl	800098c <urlDecode>
 8000234:	6278      	str	r0, [r7, #36]	; 0x24
	  printf("Actual Output:   %s\n\n\n", my_test);
 8000236:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000238:	4875      	ldr	r0, [pc, #468]	; (8000410 <main+0x21c>)
 800023a:	f002 f8ad 	bl	8002398 <iprintf>
	  free(my_test);
 800023e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000240:	f001 ffa4 	bl	800218c <free>


	  /* TEST 1 */
	  printf("Test 1: Just a space\n");
 8000244:	4873      	ldr	r0, [pc, #460]	; (8000414 <main+0x220>)
 8000246:	f002 f92d 	bl	80024a4 <puts>
	  printf("--------------------\n");
 800024a:	4873      	ldr	r0, [pc, #460]	; (8000418 <main+0x224>)
 800024c:	f002 f92a 	bl	80024a4 <puts>
	  printf("Input:           %%20\n");
 8000250:	4872      	ldr	r0, [pc, #456]	; (800041c <main+0x228>)
 8000252:	f002 f8a1 	bl	8002398 <iprintf>
	  printf("Expected Output:  \n");
 8000256:	4872      	ldr	r0, [pc, #456]	; (8000420 <main+0x22c>)
 8000258:	f002 f924 	bl	80024a4 <puts>
	  char *test1 = urlDecode("%20");
 800025c:	4871      	ldr	r0, [pc, #452]	; (8000424 <main+0x230>)
 800025e:	f000 fb95 	bl	800098c <urlDecode>
 8000262:	6238      	str	r0, [r7, #32]
	  printf("Actual Output:   %s\n\n\n", test1);
 8000264:	6a39      	ldr	r1, [r7, #32]
 8000266:	486a      	ldr	r0, [pc, #424]	; (8000410 <main+0x21c>)
 8000268:	f002 f896 	bl	8002398 <iprintf>
	  free(test1);
 800026c:	6a38      	ldr	r0, [r7, #32]
 800026e:	f001 ff8d 	bl	800218c <free>


	  /* TEST 2 */
	  printf("Test 2: A string with a space\n");
 8000272:	486d      	ldr	r0, [pc, #436]	; (8000428 <main+0x234>)
 8000274:	f002 f916 	bl	80024a4 <puts>
	  printf("-----------------------------\n");
 8000278:	486c      	ldr	r0, [pc, #432]	; (800042c <main+0x238>)
 800027a:	f002 f913 	bl	80024a4 <puts>
	  printf("Input:           ASDF%%20ASDF\n");
 800027e:	486c      	ldr	r0, [pc, #432]	; (8000430 <main+0x23c>)
 8000280:	f002 f88a 	bl	8002398 <iprintf>
	  printf("Expected Output: ASDF ASDF\n");
 8000284:	486b      	ldr	r0, [pc, #428]	; (8000434 <main+0x240>)
 8000286:	f002 f90d 	bl	80024a4 <puts>
	  char *test2 = urlDecode("ASDF%20ASDF");
 800028a:	486b      	ldr	r0, [pc, #428]	; (8000438 <main+0x244>)
 800028c:	f000 fb7e 	bl	800098c <urlDecode>
 8000290:	61f8      	str	r0, [r7, #28]
	  printf("Actual Output:   %s\n\n\n", test2);
 8000292:	69f9      	ldr	r1, [r7, #28]
 8000294:	485e      	ldr	r0, [pc, #376]	; (8000410 <main+0x21c>)
 8000296:	f002 f87f 	bl	8002398 <iprintf>
	  free(test2);
 800029a:	69f8      	ldr	r0, [r7, #28]
 800029c:	f001 ff76 	bl	800218c <free>


	  /* TEST 3 */
	  printf("Test 3: Just a %% symbol\n");
 80002a0:	4866      	ldr	r0, [pc, #408]	; (800043c <main+0x248>)
 80002a2:	f002 f879 	bl	8002398 <iprintf>
	  printf("------------------------\n");
 80002a6:	4866      	ldr	r0, [pc, #408]	; (8000440 <main+0x24c>)
 80002a8:	f002 f8fc 	bl	80024a4 <puts>
	  printf("Input:           %%\n");
 80002ac:	4865      	ldr	r0, [pc, #404]	; (8000444 <main+0x250>)
 80002ae:	f002 f873 	bl	8002398 <iprintf>
	  printf("Expected Output: %%\n");
 80002b2:	4865      	ldr	r0, [pc, #404]	; (8000448 <main+0x254>)
 80002b4:	f002 f870 	bl	8002398 <iprintf>
	  char *test3 = urlDecode("%");
 80002b8:	4864      	ldr	r0, [pc, #400]	; (800044c <main+0x258>)
 80002ba:	f000 fb67 	bl	800098c <urlDecode>
 80002be:	61b8      	str	r0, [r7, #24]
	  printf("Actual Output:   %s\n\n\n", test3);
 80002c0:	69b9      	ldr	r1, [r7, #24]
 80002c2:	4853      	ldr	r0, [pc, #332]	; (8000410 <main+0x21c>)
 80002c4:	f002 f868 	bl	8002398 <iprintf>
	  free(test3);
 80002c8:	69b8      	ldr	r0, [r7, #24]
 80002ca:	f001 ff5f 	bl	800218c <free>


	  /* TEST 4 */
	  printf("Test 4: A string with all escaped characters\n");
 80002ce:	4860      	ldr	r0, [pc, #384]	; (8000450 <main+0x25c>)
 80002d0:	f002 f8e8 	bl	80024a4 <puts>
	  printf("--------------------------------------------\n");
 80002d4:	485f      	ldr	r0, [pc, #380]	; (8000454 <main+0x260>)
 80002d6:	f002 f8e5 	bl	80024a4 <puts>
	  printf("Input:           %%20%%21%%22%%23%%24%%25%%26%%27%%28%%29\n");
 80002da:	485f      	ldr	r0, [pc, #380]	; (8000458 <main+0x264>)
 80002dc:	f002 f85c 	bl	8002398 <iprintf>
	  printf("Expected Output:  !\"#$&'()\n");
 80002e0:	485e      	ldr	r0, [pc, #376]	; (800045c <main+0x268>)
 80002e2:	f002 f8df 	bl	80024a4 <puts>
	  char *test4 = urlDecode("%20%21%22%23%24%26%27%28%29");
 80002e6:	485e      	ldr	r0, [pc, #376]	; (8000460 <main+0x26c>)
 80002e8:	f000 fb50 	bl	800098c <urlDecode>
 80002ec:	6178      	str	r0, [r7, #20]
	  printf("Actual Output:   %s\n\n\n", test4);
 80002ee:	6979      	ldr	r1, [r7, #20]
 80002f0:	4847      	ldr	r0, [pc, #284]	; (8000410 <main+0x21c>)
 80002f2:	f002 f851 	bl	8002398 <iprintf>
	  free(test4);
 80002f6:	6978      	ldr	r0, [r7, #20]
 80002f8:	f001 ff48 	bl	800218c <free>


	  /* TEST 5 */
	  printf("Test 5: A string with doubly escaped characters\n");
 80002fc:	4859      	ldr	r0, [pc, #356]	; (8000464 <main+0x270>)
 80002fe:	f002 f8d1 	bl	80024a4 <puts>
	  printf("-----------------------------------------------\n");
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <main+0x274>)
 8000304:	f002 f8ce 	bl	80024a4 <puts>
	  printf("Input:           %%2520%%2524%%2523\n");
 8000308:	4858      	ldr	r0, [pc, #352]	; (800046c <main+0x278>)
 800030a:	f002 f845 	bl	8002398 <iprintf>
	  printf("Expected Output:  $#\n");
 800030e:	4858      	ldr	r0, [pc, #352]	; (8000470 <main+0x27c>)
 8000310:	f002 f8c8 	bl	80024a4 <puts>
	  char *test5 = urlDecode("%2520%2524%2523");
 8000314:	4857      	ldr	r0, [pc, #348]	; (8000474 <main+0x280>)
 8000316:	f000 fb39 	bl	800098c <urlDecode>
 800031a:	6138      	str	r0, [r7, #16]
	  printf("Actual Output:   %s\n\n\n", test5);
 800031c:	6939      	ldr	r1, [r7, #16]
 800031e:	483c      	ldr	r0, [pc, #240]	; (8000410 <main+0x21c>)
 8000320:	f002 f83a 	bl	8002398 <iprintf>
	  free(test5);
 8000324:	6938      	ldr	r0, [r7, #16]
 8000326:	f001 ff31 	bl	800218c <free>


	  /* TEST 6 */
	  printf("Test 6: An empty string\n");
 800032a:	4853      	ldr	r0, [pc, #332]	; (8000478 <main+0x284>)
 800032c:	f002 f8ba 	bl	80024a4 <puts>
	  printf("-----------------------\n");
 8000330:	4852      	ldr	r0, [pc, #328]	; (800047c <main+0x288>)
 8000332:	f002 f8b7 	bl	80024a4 <puts>
	  printf("Input:           \n");
 8000336:	4852      	ldr	r0, [pc, #328]	; (8000480 <main+0x28c>)
 8000338:	f002 f8b4 	bl	80024a4 <puts>
	  printf("Expected Output: \n");
 800033c:	4851      	ldr	r0, [pc, #324]	; (8000484 <main+0x290>)
 800033e:	f002 f8b1 	bl	80024a4 <puts>
	  char *test6 = urlDecode("");
 8000342:	4851      	ldr	r0, [pc, #324]	; (8000488 <main+0x294>)
 8000344:	f000 fb22 	bl	800098c <urlDecode>
 8000348:	60f8      	str	r0, [r7, #12]
	  printf("Actual Output:   %s\n\n\n", test6);
 800034a:	68f9      	ldr	r1, [r7, #12]
 800034c:	4830      	ldr	r0, [pc, #192]	; (8000410 <main+0x21c>)
 800034e:	f002 f823 	bl	8002398 <iprintf>
	  free(test6);
 8000352:	68f8      	ldr	r0, [r7, #12]
 8000354:	f001 ff1a 	bl	800218c <free>


	  /* TEST 7 */
	  printf("Test 7: A number of percent signs\n");
 8000358:	484c      	ldr	r0, [pc, #304]	; (800048c <main+0x298>)
 800035a:	f002 f8a3 	bl	80024a4 <puts>
	  printf("---------------------------------\n");
 800035e:	484c      	ldr	r0, [pc, #304]	; (8000490 <main+0x29c>)
 8000360:	f002 f8a0 	bl	80024a4 <puts>
	  printf("Input:           %%%%%%%%\n");
 8000364:	484b      	ldr	r0, [pc, #300]	; (8000494 <main+0x2a0>)
 8000366:	f002 f817 	bl	8002398 <iprintf>
	  printf("Expected Output: %%%%%%%%\n");
 800036a:	484b      	ldr	r0, [pc, #300]	; (8000498 <main+0x2a4>)
 800036c:	f002 f814 	bl	8002398 <iprintf>
	  char *test7 = urlDecode("%%%%");
 8000370:	484a      	ldr	r0, [pc, #296]	; (800049c <main+0x2a8>)
 8000372:	f000 fb0b 	bl	800098c <urlDecode>
 8000376:	60b8      	str	r0, [r7, #8]
	  printf("Actual Output:   %s\n\n\n", test7);
 8000378:	68b9      	ldr	r1, [r7, #8]
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <main+0x21c>)
 800037c:	f002 f80c 	bl	8002398 <iprintf>
	  free(test7);
 8000380:	68b8      	ldr	r0, [r7, #8]
 8000382:	f001 ff03 	bl	800218c <free>


	  /* TEST 8 */
	  printf("Test 8: A number of percent signs followed by an encoded symbol\n");
 8000386:	4846      	ldr	r0, [pc, #280]	; (80004a0 <main+0x2ac>)
 8000388:	f002 f88c 	bl	80024a4 <puts>
	  printf("---------------------------------------------------------------\n");
 800038c:	4845      	ldr	r0, [pc, #276]	; (80004a4 <main+0x2b0>)
 800038e:	f002 f889 	bl	80024a4 <puts>
	  printf("Input:           %%%%%%%%%%29\n");
 8000392:	4845      	ldr	r0, [pc, #276]	; (80004a8 <main+0x2b4>)
 8000394:	f002 f800 	bl	8002398 <iprintf>
	  printf("Expected Output: %%%%%%%%)\n");
 8000398:	4844      	ldr	r0, [pc, #272]	; (80004ac <main+0x2b8>)
 800039a:	f001 fffd 	bl	8002398 <iprintf>
	  char *test8 = urlDecode("%%%%%29");
 800039e:	4844      	ldr	r0, [pc, #272]	; (80004b0 <main+0x2bc>)
 80003a0:	f000 faf4 	bl	800098c <urlDecode>
 80003a4:	6078      	str	r0, [r7, #4]
	  printf("Actual Output:   %s\n\n\n", test8);
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	4819      	ldr	r0, [pc, #100]	; (8000410 <main+0x21c>)
 80003aa:	f001 fff5 	bl	8002398 <iprintf>
	  free(test8);
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f001 feec 	bl	800218c <free>


	  /* TEST 9 */
	  printf("Test 9: A mix of +'s for spaces(which don't get decoded)\n");
 80003b4:	483f      	ldr	r0, [pc, #252]	; (80004b4 <main+0x2c0>)
 80003b6:	f002 f875 	bl	80024a4 <puts>
	  printf("-------------------------------\n");
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <main+0x20c>)
 80003bc:	f002 f872 	bl	80024a4 <puts>
	  printf("Input:           a%%20b+c+d");
 80003c0:	483d      	ldr	r0, [pc, #244]	; (80004b8 <main+0x2c4>)
 80003c2:	f001 ffe9 	bl	8002398 <iprintf>
	  printf("Expected Output: a b+c+d)\n");
 80003c6:	483d      	ldr	r0, [pc, #244]	; (80004bc <main+0x2c8>)
 80003c8:	f002 f86c 	bl	80024a4 <puts>
	  char *test9 = urlDecode("a%20b+c+d");
 80003cc:	483c      	ldr	r0, [pc, #240]	; (80004c0 <main+0x2cc>)
 80003ce:	f000 fadd 	bl	800098c <urlDecode>
 80003d2:	6038      	str	r0, [r7, #0]
	  printf("Actual Output:   %s\n\n\n", test9);
 80003d4:	6839      	ldr	r1, [r7, #0]
 80003d6:	480e      	ldr	r0, [pc, #56]	; (8000410 <main+0x21c>)
 80003d8:	f001 ffde 	bl	8002398 <iprintf>
	  free(test9);
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	f001 fed5 	bl	800218c <free>

	  printf("Testing is complete!\n\n\n");
 80003e2:	4838      	ldr	r0, [pc, #224]	; (80004c4 <main+0x2d0>)
 80003e4:	f002 f85e 	bl	80024a4 <puts>

	  HAL_Delay(5000);
 80003e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80003ec:	f000 fbba 	bl	8000b64 <HAL_Delay>
  {
 80003f0:	e70b      	b.n	800020a <main+0x16>
 80003f2:	bf00      	nop
 80003f4:	08003328 	.word	0x08003328
 80003f8:	0800333c 	.word	0x0800333c
 80003fc:	08003350 	.word	0x08003350
 8000400:	08003360 	.word	0x08003360
 8000404:	08003380 	.word	0x08003380
 8000408:	080033a8 	.word	0x080033a8
 800040c:	080033d4 	.word	0x080033d4
 8000410:	080033ec 	.word	0x080033ec
 8000414:	08003404 	.word	0x08003404
 8000418:	0800341c 	.word	0x0800341c
 800041c:	08003434 	.word	0x08003434
 8000420:	0800344c 	.word	0x0800344c
 8000424:	08003460 	.word	0x08003460
 8000428:	08003464 	.word	0x08003464
 800042c:	08003484 	.word	0x08003484
 8000430:	080034a4 	.word	0x080034a4
 8000434:	080034c4 	.word	0x080034c4
 8000438:	080034e0 	.word	0x080034e0
 800043c:	080034ec 	.word	0x080034ec
 8000440:	08003508 	.word	0x08003508
 8000444:	08003524 	.word	0x08003524
 8000448:	0800353c 	.word	0x0800353c
 800044c:	08003554 	.word	0x08003554
 8000450:	08003558 	.word	0x08003558
 8000454:	08003588 	.word	0x08003588
 8000458:	080035b8 	.word	0x080035b8
 800045c:	080035f4 	.word	0x080035f4
 8000460:	08003610 	.word	0x08003610
 8000464:	0800362c 	.word	0x0800362c
 8000468:	0800365c 	.word	0x0800365c
 800046c:	0800368c 	.word	0x0800368c
 8000470:	080036b4 	.word	0x080036b4
 8000474:	080036cc 	.word	0x080036cc
 8000478:	080036dc 	.word	0x080036dc
 800047c:	080036f4 	.word	0x080036f4
 8000480:	0800370c 	.word	0x0800370c
 8000484:	08003720 	.word	0x08003720
 8000488:	08003734 	.word	0x08003734
 800048c:	08003738 	.word	0x08003738
 8000490:	0800375c 	.word	0x0800375c
 8000494:	08003780 	.word	0x08003780
 8000498:	0800379c 	.word	0x0800379c
 800049c:	080037b8 	.word	0x080037b8
 80004a0:	080037c0 	.word	0x080037c0
 80004a4:	08003800 	.word	0x08003800
 80004a8:	08003840 	.word	0x08003840
 80004ac:	08003860 	.word	0x08003860
 80004b0:	0800387c 	.word	0x0800387c
 80004b4:	08003884 	.word	0x08003884
 80004b8:	080038c0 	.word	0x080038c0
 80004bc:	080038dc 	.word	0x080038dc
 80004c0:	080038f8 	.word	0x080038f8
 80004c4:	08003904 	.word	0x08003904

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	; 0x40
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	2228      	movs	r2, #40	; 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fe7a 	bl	80021d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	2302      	movs	r3, #2
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000500:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000506:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fdaf 	bl	8001074 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800051c:	f000 f878 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2302      	movs	r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800052c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2102      	movs	r1, #2
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f81c 	bl	8001578 <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f863 	bl	8000610 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3740      	adds	r7, #64	; 0x40
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800055a:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <MX_USART1_UART_Init+0x50>)
 800055c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800055e:	4b10      	ldr	r3, [pc, #64]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_USART1_UART_Init+0x4c>)
 800058c:	f001 fbfc 	bl	8001d88 <HAL_UART_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000596:	f000 f83b 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	40013800 	.word	0x40013800

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005b4:	f043 0320 	orr.w	r3, r3, #32
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0320 	and.w	r3, r3, #32
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d101      	bne.n	8000602 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005fe:	f000 fa95 	bl	8000b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40000800 	.word	0x40000800

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <HAL_MspInit+0x5c>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a14      	ldr	r2, [pc, #80]	; (8000678 <HAL_MspInit+0x5c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_MspInit+0x5c>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <HAL_MspInit+0x5c>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <HAL_MspInit+0x5c>)
 8000640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <HAL_MspInit+0x5c>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <HAL_MspInit+0x60>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <HAL_MspInit+0x60>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000
 800067c:	40010000 	.word	0x40010000

08000680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <HAL_UART_MspInit+0x8c>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d131      	bne.n	8000704 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_UART_MspInit+0x90>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <HAL_UART_MspInit+0x90>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_UART_MspInit+0x90>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_UART_MspInit+0x90>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_UART_MspInit+0x90>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_UART_MspInit+0x90>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0304 	and.w	r3, r3, #4
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0310 	add.w	r3, r7, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <HAL_UART_MspInit+0x94>)
 80006e6:	f000 fb41 	bl	8000d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_UART_MspInit+0x94>)
 8000700:	f000 fb34 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40013800 	.word	0x40013800
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800

08000718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000724:	2300      	movs	r3, #0
 8000726:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000728:	2300      	movs	r3, #0
 800072a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <HAL_InitTick+0xe8>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a33      	ldr	r2, [pc, #204]	; (8000800 <HAL_InitTick+0xe8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <HAL_InitTick+0xe8>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000746:	f107 0210 	add.w	r2, r7, #16
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f881 	bl	8001858 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800075c:	2b00      	cmp	r3, #0
 800075e:	d103      	bne.n	8000768 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000760:	f001 f852 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8000764:	6378      	str	r0, [r7, #52]	; 0x34
 8000766:	e004      	b.n	8000772 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000768:	f001 f84e 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 800076c:	4603      	mov	r3, r0
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	4a23      	ldr	r2, [pc, #140]	; (8000804 <HAL_InitTick+0xec>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9b      	lsrs	r3, r3, #18
 800077c:	3b01      	subs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000780:	4b21      	ldr	r3, [pc, #132]	; (8000808 <HAL_InitTick+0xf0>)
 8000782:	4a22      	ldr	r2, [pc, #136]	; (800080c <HAL_InitTick+0xf4>)
 8000784:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_InitTick+0xf0>)
 8000788:	f240 32e7 	movw	r2, #999	; 0x3e7
 800078c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <HAL_InitTick+0xf0>)
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_InitTick+0xf0>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_InitTick+0xf0>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_InitTick+0xf0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <HAL_InitTick+0xf0>)
 80007a8:	f001 f8a4 	bl	80018f4 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d11b      	bne.n	80007f2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80007ba:	4813      	ldr	r0, [pc, #76]	; (8000808 <HAL_InitTick+0xf0>)
 80007bc:	f001 f8f2 	bl	80019a4 <HAL_TIM_Base_Start_IT>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80007c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d111      	bne.n	80007f2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007ce:	201e      	movs	r0, #30
 80007d0:	f000 fabd 	bl	8000d4e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b0f      	cmp	r3, #15
 80007d8:	d808      	bhi.n	80007ec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80007da:	2200      	movs	r2, #0
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	201e      	movs	r0, #30
 80007e0:	f000 fa99 	bl	8000d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_InitTick+0xf8>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e002      	b.n	80007f2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80007f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	431bde83 	.word	0x431bde83
 8000808:	200000d4 	.word	0x200000d4
 800080c:	40000800 	.word	0x40000800
 8000810:	20000004 	.word	0x20000004

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
	...

08000864 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000868:	4802      	ldr	r0, [pc, #8]	; (8000874 <TIM4_IRQHandler+0x10>)
 800086a:	f001 f8ed 	bl	8001a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000d4 	.word	0x200000d4

08000878 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	e00a      	b.n	80008a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800088a:	f3af 8000 	nop.w
 800088e:	4601      	mov	r1, r0
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	60ba      	str	r2, [r7, #8]
 8000896:	b2ca      	uxtb	r2, r1
 8000898:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3301      	adds	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbf0      	blt.n	800088a <_read+0x12>
  }

  return len;
 80008a8:	687b      	ldr	r3, [r7, #4]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008be:	4618      	mov	r0, r3
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008d8:	605a      	str	r2, [r3, #4]
  return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <_isatty>:

int _isatty(int file)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr

080008fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
	...

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f001 fbf0 	bl	8002128 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20005000 	.word	0x20005000
 8000974:	00000400 	.word	0x00000400
 8000978:	2000011c 	.word	0x2000011c
 800097c:	20000138 	.word	0x20000138

08000980 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <urlDecode>:
#include <stdlib.h>
#include <string.h>
#include "urldecode.h"

/* Function: urlDecode */
char *urlDecode(const char *str) {
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  int d = 0; /* whether or not the string is decoded */
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]

  char *dStr = malloc(strlen(str) + 1);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fbd7 	bl	800014c <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	3301      	adds	r3, #1
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 fbea 	bl	800217c <malloc>
 80009a8:	4603      	mov	r3, r0
 80009aa:	617b      	str	r3, [r7, #20]
  char eStr[] = "00"; /* for a hex code */
 80009ac:	4a3f      	ldr	r2, [pc, #252]	; (8000aac <urlDecode+0x120>)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	4611      	mov	r1, r2
 80009b6:	8019      	strh	r1, [r3, #0]
 80009b8:	3302      	adds	r3, #2
 80009ba:	0c12      	lsrs	r2, r2, #16
 80009bc:	701a      	strb	r2, [r3, #0]

  strcpy(dStr, str);
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	6978      	ldr	r0, [r7, #20]
 80009c2:	f001 fd87 	bl	80024d4 <strcpy>

  while(!d) {
 80009c6:	e069      	b.n	8000a9c <urlDecode+0x110>
    d = 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
    int i; /* the counter for the string */

    for(i=0;i<strlen(dStr);++i) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	e05d      	b.n	8000a8e <urlDecode+0x102>

      if(dStr[i] == '%') {
 80009d2:	69bb      	ldr	r3, [r7, #24]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	4413      	add	r3, r2
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b25      	cmp	r3, #37	; 0x25
 80009dc:	d154      	bne.n	8000a88 <urlDecode+0xfc>
        if(dStr[i+1] == 0)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	3301      	adds	r3, #1
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <urlDecode+0x64>
          return dStr;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	e059      	b.n	8000aa4 <urlDecode+0x118>

        if(isxdigit(dStr[i+1]) && isxdigit(dStr[i+2])) {
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	3301      	adds	r3, #1
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <urlDecode+0x124>)
 80009fe:	4413      	add	r3, r2
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d03e      	beq.n	8000a88 <urlDecode+0xfc>
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <urlDecode+0x124>)
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d031      	beq.n	8000a88 <urlDecode+0xfc>

          d = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]

          /* combine the next to numbers into one */
          eStr[0] = dStr[i+1];
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	4413      	add	r3, r2
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	733b      	strb	r3, [r7, #12]
          eStr[1] = dStr[i+2];
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	3302      	adds	r3, #2
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	737b      	strb	r3, [r7, #13]

          /* convert it to decimal */
          long int x = strtol(eStr, NULL, 16);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2210      	movs	r2, #16
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fdc7 	bl	80025dc <strtol>
 8000a4e:	6138      	str	r0, [r7, #16]

          /* remove the hex */
          memmove(&dStr[i+1], &dStr[i+3], strlen(&dStr[i+3])+1);
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	3301      	adds	r3, #1
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	18d4      	adds	r4, r2, r3
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	3303      	adds	r3, #3
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	18d5      	adds	r5, r2, r3
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	3303      	adds	r3, #3
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	4413      	add	r3, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fb6f 	bl	800014c <strlen>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	3301      	adds	r3, #1
 8000a72:	461a      	mov	r2, r3
 8000a74:	4629      	mov	r1, r5
 8000a76:	4620      	mov	r0, r4
 8000a78:	f001 fb90 	bl	800219c <memmove>

          dStr[i] = x;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	701a      	strb	r2, [r3, #0]
    for(i=0;i<strlen(dStr);++i) {
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	f7ff fb5c 	bl	800014c <strlen>
 8000a94:	4602      	mov	r2, r0
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d89a      	bhi.n	80009d2 <urlDecode+0x46>
  while(!d) {
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d092      	beq.n	80009c8 <urlDecode+0x3c>
        }
      }
    }
  }

  return dStr;
 8000aa2:	697b      	ldr	r3, [r7, #20]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8000aac:	0800391c 	.word	0x0800391c
 8000ab0:	0800394a 	.word	0x0800394a

08000ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab4:	f7ff ff64 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aba:	490c      	ldr	r1, [pc, #48]	; (8000aec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ad0:	4c09      	ldr	r4, [pc, #36]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f001 fb29 	bl	8002134 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fb87 	bl	80001f4 <main>
  bx lr
 8000ae6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af0:	08003aec 	.word	0x08003aec
  ldr r2, =_sbss
 8000af4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af8:	20000134 	.word	0x20000134

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8f5 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff fdfe 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fd7e 	bl	800061c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000120 	.word	0x20000120

08000b50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000120 	.word	0x20000120

08000b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b6c:	f7ff fff0 	bl	8000b50 <HAL_GetTick>
 8000b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b7c:	d005      	beq.n	8000b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <HAL_Delay+0x44>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8a:	bf00      	nop
 8000b8c:	f7ff ffe0 	bl	8000b50 <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d8f7      	bhi.n	8000b8c <HAL_Delay+0x28>
  {
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000008 	.word	0x20000008

08000bac <__NVIC_SetPriorityGrouping>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4906      	ldr	r1, [pc, #24]	; (8000c44 <__NVIC_EnableIRQ+0x34>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100

08000c48 <__NVIC_SetPriority>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	db0a      	blt.n	8000c72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <__NVIC_SetPriority+0x4c>)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	0112      	lsls	r2, r2, #4
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c70:	e00a      	b.n	8000c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4908      	ldr	r1, [pc, #32]	; (8000c98 <__NVIC_SetPriority+0x50>)
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	3b04      	subs	r3, #4
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	440b      	add	r3, r1
 8000c86:	761a      	strb	r2, [r3, #24]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <NVIC_EncodePriority>:
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f1c3 0307 	rsb	r3, r3, #7
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	bf28      	it	cs
 8000cba:	2304      	movcs	r3, #4
 8000cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	2b06      	cmp	r3, #6
 8000cc4:	d902      	bls.n	8000ccc <NVIC_EncodePriority+0x30>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3b03      	subs	r3, #3
 8000cca:	e000      	b.n	8000cce <NVIC_EncodePriority+0x32>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	401a      	ands	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43d9      	mvns	r1, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	4313      	orrs	r3, r2
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	; 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff4f 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff64 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ffb2 	bl	8000c9c <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff81 	bl	8000c48 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff57 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08b      	sub	sp, #44	; 0x2c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	e169      	b.n	8001054 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d80:	2201      	movs	r2, #1
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8158 	bne.w	800104e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4a9a      	ldr	r2, [pc, #616]	; (800100c <HAL_GPIO_Init+0x2a0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d05e      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000da8:	4a98      	ldr	r2, [pc, #608]	; (800100c <HAL_GPIO_Init+0x2a0>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d875      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dae:	4a98      	ldr	r2, [pc, #608]	; (8001010 <HAL_GPIO_Init+0x2a4>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d058      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000db4:	4a96      	ldr	r2, [pc, #600]	; (8001010 <HAL_GPIO_Init+0x2a4>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d86f      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dba:	4a96      	ldr	r2, [pc, #600]	; (8001014 <HAL_GPIO_Init+0x2a8>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d052      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000dc0:	4a94      	ldr	r2, [pc, #592]	; (8001014 <HAL_GPIO_Init+0x2a8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d869      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dc6:	4a94      	ldr	r2, [pc, #592]	; (8001018 <HAL_GPIO_Init+0x2ac>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d04c      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000dcc:	4a92      	ldr	r2, [pc, #584]	; (8001018 <HAL_GPIO_Init+0x2ac>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d863      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dd2:	4a92      	ldr	r2, [pc, #584]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d046      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
 8000dd8:	4a90      	ldr	r2, [pc, #576]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d85d      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000dde:	2b12      	cmp	r3, #18
 8000de0:	d82a      	bhi.n	8000e38 <HAL_GPIO_Init+0xcc>
 8000de2:	2b12      	cmp	r3, #18
 8000de4:	d859      	bhi.n	8000e9a <HAL_GPIO_Init+0x12e>
 8000de6:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <HAL_GPIO_Init+0x80>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000e67 	.word	0x08000e67
 8000df0:	08000e41 	.word	0x08000e41
 8000df4:	08000e53 	.word	0x08000e53
 8000df8:	08000e95 	.word	0x08000e95
 8000dfc:	08000e9b 	.word	0x08000e9b
 8000e00:	08000e9b 	.word	0x08000e9b
 8000e04:	08000e9b 	.word	0x08000e9b
 8000e08:	08000e9b 	.word	0x08000e9b
 8000e0c:	08000e9b 	.word	0x08000e9b
 8000e10:	08000e9b 	.word	0x08000e9b
 8000e14:	08000e9b 	.word	0x08000e9b
 8000e18:	08000e9b 	.word	0x08000e9b
 8000e1c:	08000e9b 	.word	0x08000e9b
 8000e20:	08000e9b 	.word	0x08000e9b
 8000e24:	08000e9b 	.word	0x08000e9b
 8000e28:	08000e9b 	.word	0x08000e9b
 8000e2c:	08000e9b 	.word	0x08000e9b
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e5d 	.word	0x08000e5d
 8000e38:	4a79      	ldr	r2, [pc, #484]	; (8001020 <HAL_GPIO_Init+0x2b4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e3e:	e02c      	b.n	8000e9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	623b      	str	r3, [r7, #32]
          break;
 8000e46:	e029      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	623b      	str	r3, [r7, #32]
          break;
 8000e50:	e024      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	3308      	adds	r3, #8
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e01f      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	330c      	adds	r3, #12
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e01a      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e013      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d105      	bne.n	8000e88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	611a      	str	r2, [r3, #16]
          break;
 8000e86:	e009      	b.n	8000e9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e88:	2308      	movs	r3, #8
 8000e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	615a      	str	r2, [r3, #20]
          break;
 8000e92:	e003      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
          break;
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x130>
          break;
 8000e9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	2bff      	cmp	r3, #255	; 0xff
 8000ea0:	d801      	bhi.n	8000ea6 <HAL_GPIO_Init+0x13a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	e001      	b.n	8000eaa <HAL_GPIO_Init+0x13e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2bff      	cmp	r3, #255	; 0xff
 8000eb0:	d802      	bhi.n	8000eb8 <HAL_GPIO_Init+0x14c>
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	e002      	b.n	8000ebe <HAL_GPIO_Init+0x152>
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	3b08      	subs	r3, #8
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	6a39      	ldr	r1, [r7, #32]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f000 80b1 	beq.w	800104e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eec:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <HAL_GPIO_Init+0x2b8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a4c      	ldr	r2, [pc, #304]	; (8001024 <HAL_GPIO_Init+0x2b8>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_GPIO_Init+0x2b8>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f04:	4a48      	ldr	r2, [pc, #288]	; (8001028 <HAL_GPIO_Init+0x2bc>)
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	089b      	lsrs	r3, r3, #2
 8000f0a:	3302      	adds	r3, #2
 8000f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	220f      	movs	r2, #15
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a40      	ldr	r2, [pc, #256]	; (800102c <HAL_GPIO_Init+0x2c0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d013      	beq.n	8000f58 <HAL_GPIO_Init+0x1ec>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a3f      	ldr	r2, [pc, #252]	; (8001030 <HAL_GPIO_Init+0x2c4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d00d      	beq.n	8000f54 <HAL_GPIO_Init+0x1e8>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a3e      	ldr	r2, [pc, #248]	; (8001034 <HAL_GPIO_Init+0x2c8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d007      	beq.n	8000f50 <HAL_GPIO_Init+0x1e4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a3d      	ldr	r2, [pc, #244]	; (8001038 <HAL_GPIO_Init+0x2cc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d101      	bne.n	8000f4c <HAL_GPIO_Init+0x1e0>
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e004      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e002      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <HAL_GPIO_Init+0x1ee>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f5c:	f002 0203 	and.w	r2, r2, #3
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	4093      	lsls	r3, r2
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f6a:	492f      	ldr	r1, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x2bc>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f84:	4b2d      	ldr	r3, [pc, #180]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	492c      	ldr	r1, [pc, #176]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4928      	ldr	r1, [pc, #160]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	4922      	ldr	r1, [pc, #136]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60cb      	str	r3, [r1, #12]
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	491e      	ldr	r1, [pc, #120]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4918      	ldr	r1, [pc, #96]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4914      	ldr	r1, [pc, #80]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d021      	beq.n	8001040 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	490e      	ldr	r1, [pc, #56]	; (800103c <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e021      	b.n	800104e <HAL_GPIO_Init+0x2e2>
 800100a:	bf00      	nop
 800100c:	10320000 	.word	0x10320000
 8001010:	10310000 	.word	0x10310000
 8001014:	10220000 	.word	0x10220000
 8001018:	10210000 	.word	0x10210000
 800101c:	10120000 	.word	0x10120000
 8001020:	10110000 	.word	0x10110000
 8001024:	40021000 	.word	0x40021000
 8001028:	40010000 	.word	0x40010000
 800102c:	40010800 	.word	0x40010800
 8001030:	40010c00 	.word	0x40010c00
 8001034:	40011000 	.word	0x40011000
 8001038:	40011400 	.word	0x40011400
 800103c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_GPIO_Init+0x304>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	43db      	mvns	r3, r3
 8001048:	4909      	ldr	r1, [pc, #36]	; (8001070 <HAL_GPIO_Init+0x304>)
 800104a:	4013      	ands	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	3301      	adds	r3, #1
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	f47f ae8e 	bne.w	8000d80 <HAL_GPIO_Init+0x14>
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	372c      	adds	r7, #44	; 0x2c
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40010400 	.word	0x40010400

08001074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e272      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8087 	beq.w	80011a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001094:	4b92      	ldr	r3, [pc, #584]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b04      	cmp	r3, #4
 800109e:	d00c      	beq.n	80010ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a0:	4b8f      	ldr	r3, [pc, #572]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d112      	bne.n	80010d2 <HAL_RCC_OscConfig+0x5e>
 80010ac:	4b8c      	ldr	r3, [pc, #560]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b8:	d10b      	bne.n	80010d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ba:	4b89      	ldr	r3, [pc, #548]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d06c      	beq.n	80011a0 <HAL_RCC_OscConfig+0x12c>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d168      	bne.n	80011a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e24c      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d106      	bne.n	80010ea <HAL_RCC_OscConfig+0x76>
 80010dc:	4b80      	ldr	r3, [pc, #512]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a7f      	ldr	r2, [pc, #508]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e02e      	b.n	8001148 <HAL_RCC_OscConfig+0xd4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0x98>
 80010f2:	4b7b      	ldr	r3, [pc, #492]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a7a      	ldr	r2, [pc, #488]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b78      	ldr	r3, [pc, #480]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a77      	ldr	r2, [pc, #476]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001104:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xd4>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0xbc>
 8001116:	4b72      	ldr	r3, [pc, #456]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a71      	ldr	r2, [pc, #452]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6f      	ldr	r3, [pc, #444]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a6e      	ldr	r2, [pc, #440]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xd4>
 8001130:	4b6b      	ldr	r3, [pc, #428]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a6a      	ldr	r2, [pc, #424]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b68      	ldr	r3, [pc, #416]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a67      	ldr	r2, [pc, #412]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcfe 	bl	8000b50 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcfa 	bl	8000b50 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e200      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b5d      	ldr	r3, [pc, #372]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xe4>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcea 	bl	8000b50 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fce6 	bl	8000b50 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1ec      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x10c>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ae:	4b4c      	ldr	r3, [pc, #304]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ba:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x18c>
 80011c6:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x176>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c0      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4939      	ldr	r1, [pc, #228]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_RCC_OscConfig+0x270>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fc9f 	bl	8000b50 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fc9b 	bl	8000b50 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a1      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b2d      	ldr	r3, [pc, #180]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4927      	ldr	r1, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_RCC_OscConfig+0x270>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fc7e 	bl	8000b50 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fc7a 	bl	8000b50 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e180      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d03a      	beq.n	80012f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d019      	beq.n	80012be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_RCC_OscConfig+0x274>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001290:	f7ff fc5e 	bl	8000b50 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc5a 	bl	8000b50 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e160      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012b6:	2001      	movs	r0, #1
 80012b8:	f000 fafe 	bl	80018b8 <RCC_Delay>
 80012bc:	e01c      	b.n	80012f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_RCC_OscConfig+0x274>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc44 	bl	8000b50 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ca:	e00f      	b.n	80012ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc40 	bl	8000b50 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d908      	bls.n	80012ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e146      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000
 80012e4:	42420000 	.word	0x42420000
 80012e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	4b92      	ldr	r3, [pc, #584]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1e9      	bne.n	80012cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a6 	beq.w	8001452 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130a:	4b8b      	ldr	r3, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10d      	bne.n	8001332 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b88      	ldr	r3, [pc, #544]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	4a87      	ldr	r2, [pc, #540]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	61d3      	str	r3, [r2, #28]
 8001322:	4b85      	ldr	r3, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132e:	2301      	movs	r3, #1
 8001330:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d118      	bne.n	8001370 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133e:	4b7f      	ldr	r3, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7e      	ldr	r2, [pc, #504]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800134a:	f7ff fc01 	bl	8000b50 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001352:	f7ff fbfd 	bl	8000b50 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e103      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001364:	4b75      	ldr	r3, [pc, #468]	; (800153c <HAL_RCC_OscConfig+0x4c8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x312>
 8001378:	4b6f      	ldr	r3, [pc, #444]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4a6e      	ldr	r2, [pc, #440]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6213      	str	r3, [r2, #32]
 8001384:	e02d      	b.n	80013e2 <HAL_RCC_OscConfig+0x36e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x334>
 800138e:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4a69      	ldr	r2, [pc, #420]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6213      	str	r3, [r2, #32]
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a66      	ldr	r2, [pc, #408]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	e01c      	b.n	80013e2 <HAL_RCC_OscConfig+0x36e>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d10c      	bne.n	80013ca <HAL_RCC_OscConfig+0x356>
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4a60      	ldr	r2, [pc, #384]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6213      	str	r3, [r2, #32]
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a5d      	ldr	r2, [pc, #372]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	e00b      	b.n	80013e2 <HAL_RCC_OscConfig+0x36e>
 80013ca:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	6a1b      	ldr	r3, [r3, #32]
 80013ce:	4a5a      	ldr	r2, [pc, #360]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6213      	str	r3, [r2, #32]
 80013d6:	4b58      	ldr	r3, [pc, #352]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a57      	ldr	r2, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0304 	bic.w	r3, r3, #4
 80013e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d015      	beq.n	8001416 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fbb1 	bl	8000b50 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f0:	e00a      	b.n	8001408 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fbad 	bl	8000b50 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0b1      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001408:	4b4b      	ldr	r3, [pc, #300]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ee      	beq.n	80013f2 <HAL_RCC_OscConfig+0x37e>
 8001414:	e014      	b.n	8001440 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fb9b 	bl	8000b50 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141e:	f7ff fb97 	bl	8000b50 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f241 3288 	movw	r2, #5000	; 0x1388
 800142c:	4293      	cmp	r3, r2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e09b      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001434:	4b40      	ldr	r3, [pc, #256]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1ee      	bne.n	800141e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145c:	4b36      	ldr	r3, [pc, #216]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b08      	cmp	r3, #8
 8001466:	d061      	beq.n	800152c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d146      	bne.n	80014fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b33      	ldr	r3, [pc, #204]	; (8001540 <HAL_RCC_OscConfig+0x4cc>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb6b 	bl	8000b50 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb67 	bl	8000b50 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e06d      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001490:	4b29      	ldr	r3, [pc, #164]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d108      	bne.n	80014b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	4921      	ldr	r1, [pc, #132]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a19      	ldr	r1, [r3, #32]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	430b      	orrs	r3, r1
 80014ca:	491b      	ldr	r1, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_RCC_OscConfig+0x4cc>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7ff fb3b 	bl	8000b50 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fb37 	bl	8000b50 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e03d      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0f0      	beq.n	80014de <HAL_RCC_OscConfig+0x46a>
 80014fc:	e035      	b.n	800156a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_RCC_OscConfig+0x4cc>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb24 	bl	8000b50 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb20 	bl	8000b50 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e026      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x498>
 800152a:	e01e      	b.n	800156a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e019      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
 8001538:	40021000 	.word	0x40021000
 800153c:	40007000 	.word	0x40007000
 8001540:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x500>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	429a      	cmp	r2, r3
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0d0      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d910      	bls.n	80015bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 0207 	bic.w	r2, r3, #7
 80015a2:	4965      	ldr	r1, [pc, #404]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015aa:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d001      	beq.n	80015bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0b8      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a58      	ldr	r2, [pc, #352]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	494d      	ldr	r1, [pc, #308]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	4313      	orrs	r3, r2
 8001608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d040      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d115      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e07f      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e073      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3d      	ldr	r3, [pc, #244]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06b      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b39      	ldr	r3, [pc, #228]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4936      	ldr	r1, [pc, #216]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fa72 	bl	8000b50 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fa6e 	bl	8000b50 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e053      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2d      	ldr	r3, [pc, #180]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d210      	bcs.n	80016c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 0207 	bic.w	r2, r3, #7
 80016ae:	4922      	ldr	r1, [pc, #136]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e032      	b.n	800172e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d008      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4916      	ldr	r1, [pc, #88]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	490e      	ldr	r1, [pc, #56]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001706:	f000 f821 	bl	800174c <HAL_RCC_GetSysClockFreq>
 800170a:	4602      	mov	r2, r0
 800170c:	4b0b      	ldr	r3, [pc, #44]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	5ccb      	ldrb	r3, [r1, r3]
 800171a:	fa22 f303 	lsr.w	r3, r2, r3
 800171e:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x1cc>)
 8001720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1d0>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe fff6 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	08003920 	.word	0x08003920
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b04      	cmp	r3, #4
 8001774:	d002      	beq.n	800177c <HAL_RCC_GetSysClockFreq+0x30>
 8001776:	2b08      	cmp	r3, #8
 8001778:	d003      	beq.n	8001782 <HAL_RCC_GetSysClockFreq+0x36>
 800177a:	e027      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800177e:	613b      	str	r3, [r7, #16]
      break;
 8001780:	e027      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	0c9b      	lsrs	r3, r3, #18
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0c5b      	lsrs	r3, r3, #17
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ae:	fb03 f202 	mul.w	r2, r3, r2
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e004      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	613b      	str	r3, [r7, #16]
      break;
 80017ca:	e002      	b.n	80017d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ce:	613b      	str	r3, [r7, #16]
      break;
 80017d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d2:	693b      	ldr	r3, [r7, #16]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	007a1200 	.word	0x007a1200
 80017e8:	08003938 	.word	0x08003938
 80017ec:	08003948 	.word	0x08003948
 80017f0:	003d0900 	.word	0x003d0900

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_RCC_GetHCLKFreq+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000000 	.word	0x20000000

08001808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800180c:	f7ff fff2 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4903      	ldr	r1, [pc, #12]	; (800182c <HAL_RCC_GetPCLK1Freq+0x24>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	08003930 	.word	0x08003930

08001830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001834:	f7ff ffde 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4903      	ldr	r1, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	08003930 	.word	0x08003930

08001858 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	220f      	movs	r2, #15
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_RCC_GetClockConfig+0x58>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0207 	and.w	r2, r3, #7
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40022000 	.word	0x40022000

080018b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <RCC_Delay+0x34>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <RCC_Delay+0x38>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	0a5b      	lsrs	r3, r3, #9
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018d4:	bf00      	nop
  }
  while (Delay --);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e5a      	subs	r2, r3, #1
 80018da:	60fa      	str	r2, [r7, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f9      	bne.n	80018d4 <RCC_Delay+0x1c>
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	20000000 	.word	0x20000000
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e041      	b.n	800198a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d106      	bne.n	8001920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f839 	bl	8001992 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4610      	mov	r0, r2
 8001934:	f000 f9b4 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d001      	beq.n	80019bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e03a      	b.n	8001a32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <HAL_TIM_Base_Start_IT+0x98>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d00e      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e6:	d009      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d004      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0x58>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d111      	bne.n	8001a20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d010      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1e:	e007      	b.n	8001a30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800

08001a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d122      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d11b      	bne.n	8001aa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0202 	mvn.w	r2, #2
 8001a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f8ed 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f8e0 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8ef 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0204 	mvn.w	r2, #4
 8001ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8c3 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8b6 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8c5 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0208 	mvn.w	r2, #8
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f899 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f88c 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f89b 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0210 	mvn.w	r2, #16
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2208      	movs	r2, #8
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f86f 	bl	8001c6a <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f862 	bl	8001c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f871 	bl	8001c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10e      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d107      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0201 	mvn.w	r2, #1
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe fd10 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd6:	2b80      	cmp	r3, #128	; 0x80
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b80      	cmp	r3, #128	; 0x80
 8001be6:	d107      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8bf 	bl	8001d76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d10e      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d107      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f835 	bl	8001c8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d10e      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d107      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f06f 0220 	mvn.w	r2, #32
 8001c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f88a 	bl	8001d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a29      	ldr	r2, [pc, #164]	; (8001d58 <TIM_Base_SetConfig+0xb8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00b      	beq.n	8001cd0 <TIM_Base_SetConfig+0x30>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d007      	beq.n	8001cd0 <TIM_Base_SetConfig+0x30>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d003      	beq.n	8001cd0 <TIM_Base_SetConfig+0x30>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d108      	bne.n	8001ce2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <TIM_Base_SetConfig+0xb8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00b      	beq.n	8001d02 <TIM_Base_SetConfig+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf0:	d007      	beq.n	8001d02 <TIM_Base_SetConfig+0x62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <TIM_Base_SetConfig+0xbc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d003      	beq.n	8001d02 <TIM_Base_SetConfig+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <TIM_Base_SetConfig+0xc0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d108      	bne.n	8001d14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <TIM_Base_SetConfig+0xb8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d103      	bne.n	8001d48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800

08001d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e042      	b.n	8001e20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fc66 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2224      	movs	r2, #36	; 0x24
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f91d 	bl	800200c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d16d      	bne.n	8001f24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_UART_Transmit+0x2c>
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e066      	b.n	8001f26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2221      	movs	r2, #33	; 0x21
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e66:	f7fe fe73 	bl	8000b50 <HAL_GetTick>
 8001e6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e80:	d108      	bne.n	8001e94 <HAL_UART_Transmit+0x6c>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d104      	bne.n	8001e94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	e003      	b.n	8001e9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e9c:	e02a      	b.n	8001ef4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2180      	movs	r1, #128	; 0x80
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f840 	bl	8001f2e <UART_WaitOnFlagUntilTimeout>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e036      	b.n	8001f26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10b      	bne.n	8001ed6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e007      	b.n	8001ee6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1cf      	bne.n	8001e9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2200      	movs	r2, #0
 8001f06:	2140      	movs	r1, #64	; 0x40
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f810 	bl	8001f2e <UART_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e006      	b.n	8001f26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e000      	b.n	8001f26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
  }
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b090      	sub	sp, #64	; 0x40
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f3e:	e050      	b.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f46:	d04c      	beq.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x30>
 8001f4e:	f7fe fdff 	bl	8000b50 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d241      	bcs.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	330c      	adds	r3, #12
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	e853 3f00 	ldrex	r3, [r3]
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f7e:	637a      	str	r2, [r7, #52]	; 0x34
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f86:	e841 2300 	strex	r3, r2, [r1]
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1e5      	bne.n	8001f5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3314      	adds	r3, #20
 8001f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	e853 3f00 	ldrex	r3, [r3]
 8001fa0:	613b      	str	r3, [r7, #16]
   return(result);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb2:	623a      	str	r2, [r7, #32]
 8001fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fb6:	69f9      	ldr	r1, [r7, #28]
 8001fb8:	6a3a      	ldr	r2, [r7, #32]
 8001fba:	e841 2300 	strex	r3, r2, [r1]
 8001fbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1e5      	bne.n	8001f92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e00f      	b.n	8002002 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	bf0c      	ite	eq
 8001ff2:	2301      	moveq	r3, #1
 8001ff4:	2300      	movne	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d09f      	beq.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3740      	adds	r7, #64	; 0x40
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002046:	f023 030c 	bic.w	r3, r3, #12
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	430b      	orrs	r3, r1
 8002052:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2c      	ldr	r2, [pc, #176]	; (8002120 <UART_SetConfig+0x114>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002074:	f7ff fbdc 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	e002      	b.n	8002082 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800207c:	f7ff fbc4 	bl	8001808 <HAL_RCC_GetPCLK1Freq>
 8002080:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009a      	lsls	r2, r3, #2
 800208c:	441a      	add	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fbb2 f3f3 	udiv	r3, r2, r3
 8002098:	4a22      	ldr	r2, [pc, #136]	; (8002124 <UART_SetConfig+0x118>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	0119      	lsls	r1, r3, #4
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b8:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <UART_SetConfig+0x118>)
 80020ba:	fba3 0302 	umull	r0, r3, r3, r2
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2064      	movs	r0, #100	; 0x64
 80020c2:	fb00 f303 	mul.w	r3, r0, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	4a15      	ldr	r2, [pc, #84]	; (8002124 <UART_SetConfig+0x118>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d8:	4419      	add	r1, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009a      	lsls	r2, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <UART_SetConfig+0x118>)
 80020f2:	fba3 0302 	umull	r0, r3, r3, r2
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2064      	movs	r0, #100	; 0x64
 80020fa:	fb00 f303 	mul.w	r3, r0, r3
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	3332      	adds	r3, #50	; 0x32
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <UART_SetConfig+0x118>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	f003 020f 	and.w	r2, r3, #15
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	440a      	add	r2, r1
 8002116:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40013800 	.word	0x40013800
 8002124:	51eb851f 	.word	0x51eb851f

08002128 <__errno>:
 8002128:	4b01      	ldr	r3, [pc, #4]	; (8002130 <__errno+0x8>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	2000000c 	.word	0x2000000c

08002134 <__libc_init_array>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	2600      	movs	r6, #0
 8002138:	4d0c      	ldr	r5, [pc, #48]	; (800216c <__libc_init_array+0x38>)
 800213a:	4c0d      	ldr	r4, [pc, #52]	; (8002170 <__libc_init_array+0x3c>)
 800213c:	1b64      	subs	r4, r4, r5
 800213e:	10a4      	asrs	r4, r4, #2
 8002140:	42a6      	cmp	r6, r4
 8002142:	d109      	bne.n	8002158 <__libc_init_array+0x24>
 8002144:	f001 f8e4 	bl	8003310 <_init>
 8002148:	2600      	movs	r6, #0
 800214a:	4d0a      	ldr	r5, [pc, #40]	; (8002174 <__libc_init_array+0x40>)
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <__libc_init_array+0x44>)
 800214e:	1b64      	subs	r4, r4, r5
 8002150:	10a4      	asrs	r4, r4, #2
 8002152:	42a6      	cmp	r6, r4
 8002154:	d105      	bne.n	8002162 <__libc_init_array+0x2e>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	f855 3b04 	ldr.w	r3, [r5], #4
 800215c:	4798      	blx	r3
 800215e:	3601      	adds	r6, #1
 8002160:	e7ee      	b.n	8002140 <__libc_init_array+0xc>
 8002162:	f855 3b04 	ldr.w	r3, [r5], #4
 8002166:	4798      	blx	r3
 8002168:	3601      	adds	r6, #1
 800216a:	e7f2      	b.n	8002152 <__libc_init_array+0x1e>
 800216c:	08003ae4 	.word	0x08003ae4
 8002170:	08003ae4 	.word	0x08003ae4
 8002174:	08003ae4 	.word	0x08003ae4
 8002178:	08003ae8 	.word	0x08003ae8

0800217c <malloc>:
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <malloc+0xc>)
 800217e:	4601      	mov	r1, r0
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	f000 b895 	b.w	80022b0 <_malloc_r>
 8002186:	bf00      	nop
 8002188:	2000000c 	.word	0x2000000c

0800218c <free>:
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <free+0xc>)
 800218e:	4601      	mov	r1, r0
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	f000 b825 	b.w	80021e0 <_free_r>
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c

0800219c <memmove>:
 800219c:	4288      	cmp	r0, r1
 800219e:	b510      	push	{r4, lr}
 80021a0:	eb01 0402 	add.w	r4, r1, r2
 80021a4:	d902      	bls.n	80021ac <memmove+0x10>
 80021a6:	4284      	cmp	r4, r0
 80021a8:	4623      	mov	r3, r4
 80021aa:	d807      	bhi.n	80021bc <memmove+0x20>
 80021ac:	1e43      	subs	r3, r0, #1
 80021ae:	42a1      	cmp	r1, r4
 80021b0:	d008      	beq.n	80021c4 <memmove+0x28>
 80021b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021ba:	e7f8      	b.n	80021ae <memmove+0x12>
 80021bc:	4601      	mov	r1, r0
 80021be:	4402      	add	r2, r0
 80021c0:	428a      	cmp	r2, r1
 80021c2:	d100      	bne.n	80021c6 <memmove+0x2a>
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80021ce:	e7f7      	b.n	80021c0 <memmove+0x24>

080021d0 <memset>:
 80021d0:	4603      	mov	r3, r0
 80021d2:	4402      	add	r2, r0
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d100      	bne.n	80021da <memset+0xa>
 80021d8:	4770      	bx	lr
 80021da:	f803 1b01 	strb.w	r1, [r3], #1
 80021de:	e7f9      	b.n	80021d4 <memset+0x4>

080021e0 <_free_r>:
 80021e0:	b538      	push	{r3, r4, r5, lr}
 80021e2:	4605      	mov	r5, r0
 80021e4:	2900      	cmp	r1, #0
 80021e6:	d040      	beq.n	800226a <_free_r+0x8a>
 80021e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ec:	1f0c      	subs	r4, r1, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bfb8      	it	lt
 80021f2:	18e4      	addlt	r4, r4, r3
 80021f4:	f000 fcd8 	bl	8002ba8 <__malloc_lock>
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <_free_r+0x8c>)
 80021fa:	6813      	ldr	r3, [r2, #0]
 80021fc:	b933      	cbnz	r3, 800220c <_free_r+0x2c>
 80021fe:	6063      	str	r3, [r4, #4]
 8002200:	6014      	str	r4, [r2, #0]
 8002202:	4628      	mov	r0, r5
 8002204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002208:	f000 bcd4 	b.w	8002bb4 <__malloc_unlock>
 800220c:	42a3      	cmp	r3, r4
 800220e:	d908      	bls.n	8002222 <_free_r+0x42>
 8002210:	6820      	ldr	r0, [r4, #0]
 8002212:	1821      	adds	r1, r4, r0
 8002214:	428b      	cmp	r3, r1
 8002216:	bf01      	itttt	eq
 8002218:	6819      	ldreq	r1, [r3, #0]
 800221a:	685b      	ldreq	r3, [r3, #4]
 800221c:	1809      	addeq	r1, r1, r0
 800221e:	6021      	streq	r1, [r4, #0]
 8002220:	e7ed      	b.n	80021fe <_free_r+0x1e>
 8002222:	461a      	mov	r2, r3
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	b10b      	cbz	r3, 800222c <_free_r+0x4c>
 8002228:	42a3      	cmp	r3, r4
 800222a:	d9fa      	bls.n	8002222 <_free_r+0x42>
 800222c:	6811      	ldr	r1, [r2, #0]
 800222e:	1850      	adds	r0, r2, r1
 8002230:	42a0      	cmp	r0, r4
 8002232:	d10b      	bne.n	800224c <_free_r+0x6c>
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	4401      	add	r1, r0
 8002238:	1850      	adds	r0, r2, r1
 800223a:	4283      	cmp	r3, r0
 800223c:	6011      	str	r1, [r2, #0]
 800223e:	d1e0      	bne.n	8002202 <_free_r+0x22>
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	4401      	add	r1, r0
 8002246:	6011      	str	r1, [r2, #0]
 8002248:	6053      	str	r3, [r2, #4]
 800224a:	e7da      	b.n	8002202 <_free_r+0x22>
 800224c:	d902      	bls.n	8002254 <_free_r+0x74>
 800224e:	230c      	movs	r3, #12
 8002250:	602b      	str	r3, [r5, #0]
 8002252:	e7d6      	b.n	8002202 <_free_r+0x22>
 8002254:	6820      	ldr	r0, [r4, #0]
 8002256:	1821      	adds	r1, r4, r0
 8002258:	428b      	cmp	r3, r1
 800225a:	bf01      	itttt	eq
 800225c:	6819      	ldreq	r1, [r3, #0]
 800225e:	685b      	ldreq	r3, [r3, #4]
 8002260:	1809      	addeq	r1, r1, r0
 8002262:	6021      	streq	r1, [r4, #0]
 8002264:	6063      	str	r3, [r4, #4]
 8002266:	6054      	str	r4, [r2, #4]
 8002268:	e7cb      	b.n	8002202 <_free_r+0x22>
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	20000124 	.word	0x20000124

08002270 <sbrk_aligned>:
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	4e0e      	ldr	r6, [pc, #56]	; (80022ac <sbrk_aligned+0x3c>)
 8002274:	460c      	mov	r4, r1
 8002276:	6831      	ldr	r1, [r6, #0]
 8002278:	4605      	mov	r5, r0
 800227a:	b911      	cbnz	r1, 8002282 <sbrk_aligned+0x12>
 800227c:	f000 f91a 	bl	80024b4 <_sbrk_r>
 8002280:	6030      	str	r0, [r6, #0]
 8002282:	4621      	mov	r1, r4
 8002284:	4628      	mov	r0, r5
 8002286:	f000 f915 	bl	80024b4 <_sbrk_r>
 800228a:	1c43      	adds	r3, r0, #1
 800228c:	d00a      	beq.n	80022a4 <sbrk_aligned+0x34>
 800228e:	1cc4      	adds	r4, r0, #3
 8002290:	f024 0403 	bic.w	r4, r4, #3
 8002294:	42a0      	cmp	r0, r4
 8002296:	d007      	beq.n	80022a8 <sbrk_aligned+0x38>
 8002298:	1a21      	subs	r1, r4, r0
 800229a:	4628      	mov	r0, r5
 800229c:	f000 f90a 	bl	80024b4 <_sbrk_r>
 80022a0:	3001      	adds	r0, #1
 80022a2:	d101      	bne.n	80022a8 <sbrk_aligned+0x38>
 80022a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022a8:	4620      	mov	r0, r4
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
 80022ac:	20000128 	.word	0x20000128

080022b0 <_malloc_r>:
 80022b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b4:	1ccd      	adds	r5, r1, #3
 80022b6:	f025 0503 	bic.w	r5, r5, #3
 80022ba:	3508      	adds	r5, #8
 80022bc:	2d0c      	cmp	r5, #12
 80022be:	bf38      	it	cc
 80022c0:	250c      	movcc	r5, #12
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	4607      	mov	r7, r0
 80022c6:	db01      	blt.n	80022cc <_malloc_r+0x1c>
 80022c8:	42a9      	cmp	r1, r5
 80022ca:	d905      	bls.n	80022d8 <_malloc_r+0x28>
 80022cc:	230c      	movs	r3, #12
 80022ce:	2600      	movs	r6, #0
 80022d0:	603b      	str	r3, [r7, #0]
 80022d2:	4630      	mov	r0, r6
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022d8:	4e2e      	ldr	r6, [pc, #184]	; (8002394 <_malloc_r+0xe4>)
 80022da:	f000 fc65 	bl	8002ba8 <__malloc_lock>
 80022de:	6833      	ldr	r3, [r6, #0]
 80022e0:	461c      	mov	r4, r3
 80022e2:	bb34      	cbnz	r4, 8002332 <_malloc_r+0x82>
 80022e4:	4629      	mov	r1, r5
 80022e6:	4638      	mov	r0, r7
 80022e8:	f7ff ffc2 	bl	8002270 <sbrk_aligned>
 80022ec:	1c43      	adds	r3, r0, #1
 80022ee:	4604      	mov	r4, r0
 80022f0:	d14d      	bne.n	800238e <_malloc_r+0xde>
 80022f2:	6834      	ldr	r4, [r6, #0]
 80022f4:	4626      	mov	r6, r4
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	d140      	bne.n	800237c <_malloc_r+0xcc>
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	4631      	mov	r1, r6
 80022fe:	4638      	mov	r0, r7
 8002300:	eb04 0803 	add.w	r8, r4, r3
 8002304:	f000 f8d6 	bl	80024b4 <_sbrk_r>
 8002308:	4580      	cmp	r8, r0
 800230a:	d13a      	bne.n	8002382 <_malloc_r+0xd2>
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	3503      	adds	r5, #3
 8002310:	1a6d      	subs	r5, r5, r1
 8002312:	f025 0503 	bic.w	r5, r5, #3
 8002316:	3508      	adds	r5, #8
 8002318:	2d0c      	cmp	r5, #12
 800231a:	bf38      	it	cc
 800231c:	250c      	movcc	r5, #12
 800231e:	4638      	mov	r0, r7
 8002320:	4629      	mov	r1, r5
 8002322:	f7ff ffa5 	bl	8002270 <sbrk_aligned>
 8002326:	3001      	adds	r0, #1
 8002328:	d02b      	beq.n	8002382 <_malloc_r+0xd2>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	442b      	add	r3, r5
 800232e:	6023      	str	r3, [r4, #0]
 8002330:	e00e      	b.n	8002350 <_malloc_r+0xa0>
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	1b52      	subs	r2, r2, r5
 8002336:	d41e      	bmi.n	8002376 <_malloc_r+0xc6>
 8002338:	2a0b      	cmp	r2, #11
 800233a:	d916      	bls.n	800236a <_malloc_r+0xba>
 800233c:	1961      	adds	r1, r4, r5
 800233e:	42a3      	cmp	r3, r4
 8002340:	6025      	str	r5, [r4, #0]
 8002342:	bf18      	it	ne
 8002344:	6059      	strne	r1, [r3, #4]
 8002346:	6863      	ldr	r3, [r4, #4]
 8002348:	bf08      	it	eq
 800234a:	6031      	streq	r1, [r6, #0]
 800234c:	5162      	str	r2, [r4, r5]
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	4638      	mov	r0, r7
 8002352:	f104 060b 	add.w	r6, r4, #11
 8002356:	f000 fc2d 	bl	8002bb4 <__malloc_unlock>
 800235a:	f026 0607 	bic.w	r6, r6, #7
 800235e:	1d23      	adds	r3, r4, #4
 8002360:	1af2      	subs	r2, r6, r3
 8002362:	d0b6      	beq.n	80022d2 <_malloc_r+0x22>
 8002364:	1b9b      	subs	r3, r3, r6
 8002366:	50a3      	str	r3, [r4, r2]
 8002368:	e7b3      	b.n	80022d2 <_malloc_r+0x22>
 800236a:	6862      	ldr	r2, [r4, #4]
 800236c:	42a3      	cmp	r3, r4
 800236e:	bf0c      	ite	eq
 8002370:	6032      	streq	r2, [r6, #0]
 8002372:	605a      	strne	r2, [r3, #4]
 8002374:	e7ec      	b.n	8002350 <_malloc_r+0xa0>
 8002376:	4623      	mov	r3, r4
 8002378:	6864      	ldr	r4, [r4, #4]
 800237a:	e7b2      	b.n	80022e2 <_malloc_r+0x32>
 800237c:	4634      	mov	r4, r6
 800237e:	6876      	ldr	r6, [r6, #4]
 8002380:	e7b9      	b.n	80022f6 <_malloc_r+0x46>
 8002382:	230c      	movs	r3, #12
 8002384:	4638      	mov	r0, r7
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	f000 fc14 	bl	8002bb4 <__malloc_unlock>
 800238c:	e7a1      	b.n	80022d2 <_malloc_r+0x22>
 800238e:	6025      	str	r5, [r4, #0]
 8002390:	e7de      	b.n	8002350 <_malloc_r+0xa0>
 8002392:	bf00      	nop
 8002394:	20000124 	.word	0x20000124

08002398 <iprintf>:
 8002398:	b40f      	push	{r0, r1, r2, r3}
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <iprintf+0x2c>)
 800239c:	b513      	push	{r0, r1, r4, lr}
 800239e:	681c      	ldr	r4, [r3, #0]
 80023a0:	b124      	cbz	r4, 80023ac <iprintf+0x14>
 80023a2:	69a3      	ldr	r3, [r4, #24]
 80023a4:	b913      	cbnz	r3, 80023ac <iprintf+0x14>
 80023a6:	4620      	mov	r0, r4
 80023a8:	f000 faf8 	bl	800299c <__sinit>
 80023ac:	ab05      	add	r3, sp, #20
 80023ae:	4620      	mov	r0, r4
 80023b0:	9a04      	ldr	r2, [sp, #16]
 80023b2:	68a1      	ldr	r1, [r4, #8]
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	f000 fc2b 	bl	8002c10 <_vfiprintf_r>
 80023ba:	b002      	add	sp, #8
 80023bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023c0:	b004      	add	sp, #16
 80023c2:	4770      	bx	lr
 80023c4:	2000000c 	.word	0x2000000c

080023c8 <_puts_r>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	460e      	mov	r6, r1
 80023cc:	4605      	mov	r5, r0
 80023ce:	b118      	cbz	r0, 80023d8 <_puts_r+0x10>
 80023d0:	6983      	ldr	r3, [r0, #24]
 80023d2:	b90b      	cbnz	r3, 80023d8 <_puts_r+0x10>
 80023d4:	f000 fae2 	bl	800299c <__sinit>
 80023d8:	69ab      	ldr	r3, [r5, #24]
 80023da:	68ac      	ldr	r4, [r5, #8]
 80023dc:	b913      	cbnz	r3, 80023e4 <_puts_r+0x1c>
 80023de:	4628      	mov	r0, r5
 80023e0:	f000 fadc 	bl	800299c <__sinit>
 80023e4:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <_puts_r+0xd0>)
 80023e6:	429c      	cmp	r4, r3
 80023e8:	d120      	bne.n	800242c <_puts_r+0x64>
 80023ea:	686c      	ldr	r4, [r5, #4]
 80023ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023ee:	07db      	lsls	r3, r3, #31
 80023f0:	d405      	bmi.n	80023fe <_puts_r+0x36>
 80023f2:	89a3      	ldrh	r3, [r4, #12]
 80023f4:	0598      	lsls	r0, r3, #22
 80023f6:	d402      	bmi.n	80023fe <_puts_r+0x36>
 80023f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023fa:	f000 fb6d 	bl	8002ad8 <__retarget_lock_acquire_recursive>
 80023fe:	89a3      	ldrh	r3, [r4, #12]
 8002400:	0719      	lsls	r1, r3, #28
 8002402:	d51d      	bpl.n	8002440 <_puts_r+0x78>
 8002404:	6923      	ldr	r3, [r4, #16]
 8002406:	b1db      	cbz	r3, 8002440 <_puts_r+0x78>
 8002408:	3e01      	subs	r6, #1
 800240a:	68a3      	ldr	r3, [r4, #8]
 800240c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002410:	3b01      	subs	r3, #1
 8002412:	60a3      	str	r3, [r4, #8]
 8002414:	bb39      	cbnz	r1, 8002466 <_puts_r+0x9e>
 8002416:	2b00      	cmp	r3, #0
 8002418:	da38      	bge.n	800248c <_puts_r+0xc4>
 800241a:	4622      	mov	r2, r4
 800241c:	210a      	movs	r1, #10
 800241e:	4628      	mov	r0, r5
 8002420:	f000 f8e6 	bl	80025f0 <__swbuf_r>
 8002424:	3001      	adds	r0, #1
 8002426:	d011      	beq.n	800244c <_puts_r+0x84>
 8002428:	250a      	movs	r5, #10
 800242a:	e011      	b.n	8002450 <_puts_r+0x88>
 800242c:	4b1b      	ldr	r3, [pc, #108]	; (800249c <_puts_r+0xd4>)
 800242e:	429c      	cmp	r4, r3
 8002430:	d101      	bne.n	8002436 <_puts_r+0x6e>
 8002432:	68ac      	ldr	r4, [r5, #8]
 8002434:	e7da      	b.n	80023ec <_puts_r+0x24>
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <_puts_r+0xd8>)
 8002438:	429c      	cmp	r4, r3
 800243a:	bf08      	it	eq
 800243c:	68ec      	ldreq	r4, [r5, #12]
 800243e:	e7d5      	b.n	80023ec <_puts_r+0x24>
 8002440:	4621      	mov	r1, r4
 8002442:	4628      	mov	r0, r5
 8002444:	f000 f926 	bl	8002694 <__swsetup_r>
 8002448:	2800      	cmp	r0, #0
 800244a:	d0dd      	beq.n	8002408 <_puts_r+0x40>
 800244c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002452:	07da      	lsls	r2, r3, #31
 8002454:	d405      	bmi.n	8002462 <_puts_r+0x9a>
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	059b      	lsls	r3, r3, #22
 800245a:	d402      	bmi.n	8002462 <_puts_r+0x9a>
 800245c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800245e:	f000 fb3c 	bl	8002ada <__retarget_lock_release_recursive>
 8002462:	4628      	mov	r0, r5
 8002464:	bd70      	pop	{r4, r5, r6, pc}
 8002466:	2b00      	cmp	r3, #0
 8002468:	da04      	bge.n	8002474 <_puts_r+0xac>
 800246a:	69a2      	ldr	r2, [r4, #24]
 800246c:	429a      	cmp	r2, r3
 800246e:	dc06      	bgt.n	800247e <_puts_r+0xb6>
 8002470:	290a      	cmp	r1, #10
 8002472:	d004      	beq.n	800247e <_puts_r+0xb6>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	6022      	str	r2, [r4, #0]
 800247a:	7019      	strb	r1, [r3, #0]
 800247c:	e7c5      	b.n	800240a <_puts_r+0x42>
 800247e:	4622      	mov	r2, r4
 8002480:	4628      	mov	r0, r5
 8002482:	f000 f8b5 	bl	80025f0 <__swbuf_r>
 8002486:	3001      	adds	r0, #1
 8002488:	d1bf      	bne.n	800240a <_puts_r+0x42>
 800248a:	e7df      	b.n	800244c <_puts_r+0x84>
 800248c:	250a      	movs	r5, #10
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	6022      	str	r2, [r4, #0]
 8002494:	701d      	strb	r5, [r3, #0]
 8002496:	e7db      	b.n	8002450 <_puts_r+0x88>
 8002498:	08003a70 	.word	0x08003a70
 800249c:	08003a90 	.word	0x08003a90
 80024a0:	08003a50 	.word	0x08003a50

080024a4 <puts>:
 80024a4:	4b02      	ldr	r3, [pc, #8]	; (80024b0 <puts+0xc>)
 80024a6:	4601      	mov	r1, r0
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	f7ff bf8d 	b.w	80023c8 <_puts_r>
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <_sbrk_r>:
 80024b4:	b538      	push	{r3, r4, r5, lr}
 80024b6:	2300      	movs	r3, #0
 80024b8:	4d05      	ldr	r5, [pc, #20]	; (80024d0 <_sbrk_r+0x1c>)
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	602b      	str	r3, [r5, #0]
 80024c0:	f7fe fa28 	bl	8000914 <_sbrk>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_sbrk_r+0x1a>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_sbrk_r+0x1a>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	20000130 	.word	0x20000130

080024d4 <strcpy>:
 80024d4:	4603      	mov	r3, r0
 80024d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024da:	f803 2b01 	strb.w	r2, [r3], #1
 80024de:	2a00      	cmp	r2, #0
 80024e0:	d1f9      	bne.n	80024d6 <strcpy+0x2>
 80024e2:	4770      	bx	lr

080024e4 <_strtol_l.constprop.0>:
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ea:	4680      	mov	r8, r0
 80024ec:	d001      	beq.n	80024f2 <_strtol_l.constprop.0+0xe>
 80024ee:	2b24      	cmp	r3, #36	; 0x24
 80024f0:	d906      	bls.n	8002500 <_strtol_l.constprop.0+0x1c>
 80024f2:	f7ff fe19 	bl	8002128 <__errno>
 80024f6:	2316      	movs	r3, #22
 80024f8:	6003      	str	r3, [r0, #0]
 80024fa:	2000      	movs	r0, #0
 80024fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002500:	460d      	mov	r5, r1
 8002502:	4f35      	ldr	r7, [pc, #212]	; (80025d8 <_strtol_l.constprop.0+0xf4>)
 8002504:	4628      	mov	r0, r5
 8002506:	f815 4b01 	ldrb.w	r4, [r5], #1
 800250a:	5de6      	ldrb	r6, [r4, r7]
 800250c:	f016 0608 	ands.w	r6, r6, #8
 8002510:	d1f8      	bne.n	8002504 <_strtol_l.constprop.0+0x20>
 8002512:	2c2d      	cmp	r4, #45	; 0x2d
 8002514:	d12f      	bne.n	8002576 <_strtol_l.constprop.0+0x92>
 8002516:	2601      	movs	r6, #1
 8002518:	782c      	ldrb	r4, [r5, #0]
 800251a:	1c85      	adds	r5, r0, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d057      	beq.n	80025d0 <_strtol_l.constprop.0+0xec>
 8002520:	2b10      	cmp	r3, #16
 8002522:	d109      	bne.n	8002538 <_strtol_l.constprop.0+0x54>
 8002524:	2c30      	cmp	r4, #48	; 0x30
 8002526:	d107      	bne.n	8002538 <_strtol_l.constprop.0+0x54>
 8002528:	7828      	ldrb	r0, [r5, #0]
 800252a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800252e:	2858      	cmp	r0, #88	; 0x58
 8002530:	d149      	bne.n	80025c6 <_strtol_l.constprop.0+0xe2>
 8002532:	2310      	movs	r3, #16
 8002534:	786c      	ldrb	r4, [r5, #1]
 8002536:	3502      	adds	r5, #2
 8002538:	2700      	movs	r7, #0
 800253a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800253e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8002542:	fbbe f9f3 	udiv	r9, lr, r3
 8002546:	4638      	mov	r0, r7
 8002548:	fb03 ea19 	mls	sl, r3, r9, lr
 800254c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8002550:	f1bc 0f09 	cmp.w	ip, #9
 8002554:	d814      	bhi.n	8002580 <_strtol_l.constprop.0+0x9c>
 8002556:	4664      	mov	r4, ip
 8002558:	42a3      	cmp	r3, r4
 800255a:	dd22      	ble.n	80025a2 <_strtol_l.constprop.0+0xbe>
 800255c:	2f00      	cmp	r7, #0
 800255e:	db1d      	blt.n	800259c <_strtol_l.constprop.0+0xb8>
 8002560:	4581      	cmp	r9, r0
 8002562:	d31b      	bcc.n	800259c <_strtol_l.constprop.0+0xb8>
 8002564:	d101      	bne.n	800256a <_strtol_l.constprop.0+0x86>
 8002566:	45a2      	cmp	sl, r4
 8002568:	db18      	blt.n	800259c <_strtol_l.constprop.0+0xb8>
 800256a:	2701      	movs	r7, #1
 800256c:	fb00 4003 	mla	r0, r0, r3, r4
 8002570:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002574:	e7ea      	b.n	800254c <_strtol_l.constprop.0+0x68>
 8002576:	2c2b      	cmp	r4, #43	; 0x2b
 8002578:	bf04      	itt	eq
 800257a:	782c      	ldrbeq	r4, [r5, #0]
 800257c:	1c85      	addeq	r5, r0, #2
 800257e:	e7cd      	b.n	800251c <_strtol_l.constprop.0+0x38>
 8002580:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8002584:	f1bc 0f19 	cmp.w	ip, #25
 8002588:	d801      	bhi.n	800258e <_strtol_l.constprop.0+0xaa>
 800258a:	3c37      	subs	r4, #55	; 0x37
 800258c:	e7e4      	b.n	8002558 <_strtol_l.constprop.0+0x74>
 800258e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8002592:	f1bc 0f19 	cmp.w	ip, #25
 8002596:	d804      	bhi.n	80025a2 <_strtol_l.constprop.0+0xbe>
 8002598:	3c57      	subs	r4, #87	; 0x57
 800259a:	e7dd      	b.n	8002558 <_strtol_l.constprop.0+0x74>
 800259c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80025a0:	e7e6      	b.n	8002570 <_strtol_l.constprop.0+0x8c>
 80025a2:	2f00      	cmp	r7, #0
 80025a4:	da07      	bge.n	80025b6 <_strtol_l.constprop.0+0xd2>
 80025a6:	2322      	movs	r3, #34	; 0x22
 80025a8:	4670      	mov	r0, lr
 80025aa:	f8c8 3000 	str.w	r3, [r8]
 80025ae:	2a00      	cmp	r2, #0
 80025b0:	d0a4      	beq.n	80024fc <_strtol_l.constprop.0+0x18>
 80025b2:	1e69      	subs	r1, r5, #1
 80025b4:	e005      	b.n	80025c2 <_strtol_l.constprop.0+0xde>
 80025b6:	b106      	cbz	r6, 80025ba <_strtol_l.constprop.0+0xd6>
 80025b8:	4240      	negs	r0, r0
 80025ba:	2a00      	cmp	r2, #0
 80025bc:	d09e      	beq.n	80024fc <_strtol_l.constprop.0+0x18>
 80025be:	2f00      	cmp	r7, #0
 80025c0:	d1f7      	bne.n	80025b2 <_strtol_l.constprop.0+0xce>
 80025c2:	6011      	str	r1, [r2, #0]
 80025c4:	e79a      	b.n	80024fc <_strtol_l.constprop.0+0x18>
 80025c6:	2430      	movs	r4, #48	; 0x30
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1b5      	bne.n	8002538 <_strtol_l.constprop.0+0x54>
 80025cc:	2308      	movs	r3, #8
 80025ce:	e7b3      	b.n	8002538 <_strtol_l.constprop.0+0x54>
 80025d0:	2c30      	cmp	r4, #48	; 0x30
 80025d2:	d0a9      	beq.n	8002528 <_strtol_l.constprop.0+0x44>
 80025d4:	230a      	movs	r3, #10
 80025d6:	e7af      	b.n	8002538 <_strtol_l.constprop.0+0x54>
 80025d8:	0800394b 	.word	0x0800394b

080025dc <strtol>:
 80025dc:	4613      	mov	r3, r2
 80025de:	460a      	mov	r2, r1
 80025e0:	4601      	mov	r1, r0
 80025e2:	4802      	ldr	r0, [pc, #8]	; (80025ec <strtol+0x10>)
 80025e4:	6800      	ldr	r0, [r0, #0]
 80025e6:	f7ff bf7d 	b.w	80024e4 <_strtol_l.constprop.0>
 80025ea:	bf00      	nop
 80025ec:	2000000c 	.word	0x2000000c

080025f0 <__swbuf_r>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	460e      	mov	r6, r1
 80025f4:	4614      	mov	r4, r2
 80025f6:	4605      	mov	r5, r0
 80025f8:	b118      	cbz	r0, 8002602 <__swbuf_r+0x12>
 80025fa:	6983      	ldr	r3, [r0, #24]
 80025fc:	b90b      	cbnz	r3, 8002602 <__swbuf_r+0x12>
 80025fe:	f000 f9cd 	bl	800299c <__sinit>
 8002602:	4b21      	ldr	r3, [pc, #132]	; (8002688 <__swbuf_r+0x98>)
 8002604:	429c      	cmp	r4, r3
 8002606:	d12b      	bne.n	8002660 <__swbuf_r+0x70>
 8002608:	686c      	ldr	r4, [r5, #4]
 800260a:	69a3      	ldr	r3, [r4, #24]
 800260c:	60a3      	str	r3, [r4, #8]
 800260e:	89a3      	ldrh	r3, [r4, #12]
 8002610:	071a      	lsls	r2, r3, #28
 8002612:	d52f      	bpl.n	8002674 <__swbuf_r+0x84>
 8002614:	6923      	ldr	r3, [r4, #16]
 8002616:	b36b      	cbz	r3, 8002674 <__swbuf_r+0x84>
 8002618:	6923      	ldr	r3, [r4, #16]
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	b2f6      	uxtb	r6, r6
 800261e:	1ac0      	subs	r0, r0, r3
 8002620:	6963      	ldr	r3, [r4, #20]
 8002622:	4637      	mov	r7, r6
 8002624:	4283      	cmp	r3, r0
 8002626:	dc04      	bgt.n	8002632 <__swbuf_r+0x42>
 8002628:	4621      	mov	r1, r4
 800262a:	4628      	mov	r0, r5
 800262c:	f000 f922 	bl	8002874 <_fflush_r>
 8002630:	bb30      	cbnz	r0, 8002680 <__swbuf_r+0x90>
 8002632:	68a3      	ldr	r3, [r4, #8]
 8002634:	3001      	adds	r0, #1
 8002636:	3b01      	subs	r3, #1
 8002638:	60a3      	str	r3, [r4, #8]
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	6022      	str	r2, [r4, #0]
 8002640:	701e      	strb	r6, [r3, #0]
 8002642:	6963      	ldr	r3, [r4, #20]
 8002644:	4283      	cmp	r3, r0
 8002646:	d004      	beq.n	8002652 <__swbuf_r+0x62>
 8002648:	89a3      	ldrh	r3, [r4, #12]
 800264a:	07db      	lsls	r3, r3, #31
 800264c:	d506      	bpl.n	800265c <__swbuf_r+0x6c>
 800264e:	2e0a      	cmp	r6, #10
 8002650:	d104      	bne.n	800265c <__swbuf_r+0x6c>
 8002652:	4621      	mov	r1, r4
 8002654:	4628      	mov	r0, r5
 8002656:	f000 f90d 	bl	8002874 <_fflush_r>
 800265a:	b988      	cbnz	r0, 8002680 <__swbuf_r+0x90>
 800265c:	4638      	mov	r0, r7
 800265e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <__swbuf_r+0x9c>)
 8002662:	429c      	cmp	r4, r3
 8002664:	d101      	bne.n	800266a <__swbuf_r+0x7a>
 8002666:	68ac      	ldr	r4, [r5, #8]
 8002668:	e7cf      	b.n	800260a <__swbuf_r+0x1a>
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <__swbuf_r+0xa0>)
 800266c:	429c      	cmp	r4, r3
 800266e:	bf08      	it	eq
 8002670:	68ec      	ldreq	r4, [r5, #12]
 8002672:	e7ca      	b.n	800260a <__swbuf_r+0x1a>
 8002674:	4621      	mov	r1, r4
 8002676:	4628      	mov	r0, r5
 8002678:	f000 f80c 	bl	8002694 <__swsetup_r>
 800267c:	2800      	cmp	r0, #0
 800267e:	d0cb      	beq.n	8002618 <__swbuf_r+0x28>
 8002680:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002684:	e7ea      	b.n	800265c <__swbuf_r+0x6c>
 8002686:	bf00      	nop
 8002688:	08003a70 	.word	0x08003a70
 800268c:	08003a90 	.word	0x08003a90
 8002690:	08003a50 	.word	0x08003a50

08002694 <__swsetup_r>:
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <__swsetup_r+0xcc>)
 8002696:	b570      	push	{r4, r5, r6, lr}
 8002698:	681d      	ldr	r5, [r3, #0]
 800269a:	4606      	mov	r6, r0
 800269c:	460c      	mov	r4, r1
 800269e:	b125      	cbz	r5, 80026aa <__swsetup_r+0x16>
 80026a0:	69ab      	ldr	r3, [r5, #24]
 80026a2:	b913      	cbnz	r3, 80026aa <__swsetup_r+0x16>
 80026a4:	4628      	mov	r0, r5
 80026a6:	f000 f979 	bl	800299c <__sinit>
 80026aa:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <__swsetup_r+0xd0>)
 80026ac:	429c      	cmp	r4, r3
 80026ae:	d10f      	bne.n	80026d0 <__swsetup_r+0x3c>
 80026b0:	686c      	ldr	r4, [r5, #4]
 80026b2:	89a3      	ldrh	r3, [r4, #12]
 80026b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026b8:	0719      	lsls	r1, r3, #28
 80026ba:	d42c      	bmi.n	8002716 <__swsetup_r+0x82>
 80026bc:	06dd      	lsls	r5, r3, #27
 80026be:	d411      	bmi.n	80026e4 <__swsetup_r+0x50>
 80026c0:	2309      	movs	r3, #9
 80026c2:	6033      	str	r3, [r6, #0]
 80026c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026cc:	81a3      	strh	r3, [r4, #12]
 80026ce:	e03e      	b.n	800274e <__swsetup_r+0xba>
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <__swsetup_r+0xd4>)
 80026d2:	429c      	cmp	r4, r3
 80026d4:	d101      	bne.n	80026da <__swsetup_r+0x46>
 80026d6:	68ac      	ldr	r4, [r5, #8]
 80026d8:	e7eb      	b.n	80026b2 <__swsetup_r+0x1e>
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <__swsetup_r+0xd8>)
 80026dc:	429c      	cmp	r4, r3
 80026de:	bf08      	it	eq
 80026e0:	68ec      	ldreq	r4, [r5, #12]
 80026e2:	e7e6      	b.n	80026b2 <__swsetup_r+0x1e>
 80026e4:	0758      	lsls	r0, r3, #29
 80026e6:	d512      	bpl.n	800270e <__swsetup_r+0x7a>
 80026e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026ea:	b141      	cbz	r1, 80026fe <__swsetup_r+0x6a>
 80026ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026f0:	4299      	cmp	r1, r3
 80026f2:	d002      	beq.n	80026fa <__swsetup_r+0x66>
 80026f4:	4630      	mov	r0, r6
 80026f6:	f7ff fd73 	bl	80021e0 <_free_r>
 80026fa:	2300      	movs	r3, #0
 80026fc:	6363      	str	r3, [r4, #52]	; 0x34
 80026fe:	89a3      	ldrh	r3, [r4, #12]
 8002700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002704:	81a3      	strh	r3, [r4, #12]
 8002706:	2300      	movs	r3, #0
 8002708:	6063      	str	r3, [r4, #4]
 800270a:	6923      	ldr	r3, [r4, #16]
 800270c:	6023      	str	r3, [r4, #0]
 800270e:	89a3      	ldrh	r3, [r4, #12]
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	81a3      	strh	r3, [r4, #12]
 8002716:	6923      	ldr	r3, [r4, #16]
 8002718:	b94b      	cbnz	r3, 800272e <__swsetup_r+0x9a>
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002724:	d003      	beq.n	800272e <__swsetup_r+0x9a>
 8002726:	4621      	mov	r1, r4
 8002728:	4630      	mov	r0, r6
 800272a:	f000 f9fd 	bl	8002b28 <__smakebuf_r>
 800272e:	89a0      	ldrh	r0, [r4, #12]
 8002730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002734:	f010 0301 	ands.w	r3, r0, #1
 8002738:	d00a      	beq.n	8002750 <__swsetup_r+0xbc>
 800273a:	2300      	movs	r3, #0
 800273c:	60a3      	str	r3, [r4, #8]
 800273e:	6963      	ldr	r3, [r4, #20]
 8002740:	425b      	negs	r3, r3
 8002742:	61a3      	str	r3, [r4, #24]
 8002744:	6923      	ldr	r3, [r4, #16]
 8002746:	b943      	cbnz	r3, 800275a <__swsetup_r+0xc6>
 8002748:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800274c:	d1ba      	bne.n	80026c4 <__swsetup_r+0x30>
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	0781      	lsls	r1, r0, #30
 8002752:	bf58      	it	pl
 8002754:	6963      	ldrpl	r3, [r4, #20]
 8002756:	60a3      	str	r3, [r4, #8]
 8002758:	e7f4      	b.n	8002744 <__swsetup_r+0xb0>
 800275a:	2000      	movs	r0, #0
 800275c:	e7f7      	b.n	800274e <__swsetup_r+0xba>
 800275e:	bf00      	nop
 8002760:	2000000c 	.word	0x2000000c
 8002764:	08003a70 	.word	0x08003a70
 8002768:	08003a90 	.word	0x08003a90
 800276c:	08003a50 	.word	0x08003a50

08002770 <__sflush_r>:
 8002770:	898a      	ldrh	r2, [r1, #12]
 8002772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002774:	4605      	mov	r5, r0
 8002776:	0710      	lsls	r0, r2, #28
 8002778:	460c      	mov	r4, r1
 800277a:	d457      	bmi.n	800282c <__sflush_r+0xbc>
 800277c:	684b      	ldr	r3, [r1, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	dc04      	bgt.n	800278c <__sflush_r+0x1c>
 8002782:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	dc01      	bgt.n	800278c <__sflush_r+0x1c>
 8002788:	2000      	movs	r0, #0
 800278a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800278c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800278e:	2e00      	cmp	r6, #0
 8002790:	d0fa      	beq.n	8002788 <__sflush_r+0x18>
 8002792:	2300      	movs	r3, #0
 8002794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002798:	682f      	ldr	r7, [r5, #0]
 800279a:	602b      	str	r3, [r5, #0]
 800279c:	d032      	beq.n	8002804 <__sflush_r+0x94>
 800279e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	075a      	lsls	r2, r3, #29
 80027a4:	d505      	bpl.n	80027b2 <__sflush_r+0x42>
 80027a6:	6863      	ldr	r3, [r4, #4]
 80027a8:	1ac0      	subs	r0, r0, r3
 80027aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027ac:	b10b      	cbz	r3, 80027b2 <__sflush_r+0x42>
 80027ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027b0:	1ac0      	subs	r0, r0, r3
 80027b2:	2300      	movs	r3, #0
 80027b4:	4602      	mov	r2, r0
 80027b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027b8:	4628      	mov	r0, r5
 80027ba:	6a21      	ldr	r1, [r4, #32]
 80027bc:	47b0      	blx	r6
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	d106      	bne.n	80027d2 <__sflush_r+0x62>
 80027c4:	6829      	ldr	r1, [r5, #0]
 80027c6:	291d      	cmp	r1, #29
 80027c8:	d82c      	bhi.n	8002824 <__sflush_r+0xb4>
 80027ca:	4a29      	ldr	r2, [pc, #164]	; (8002870 <__sflush_r+0x100>)
 80027cc:	40ca      	lsrs	r2, r1
 80027ce:	07d6      	lsls	r6, r2, #31
 80027d0:	d528      	bpl.n	8002824 <__sflush_r+0xb4>
 80027d2:	2200      	movs	r2, #0
 80027d4:	6062      	str	r2, [r4, #4]
 80027d6:	6922      	ldr	r2, [r4, #16]
 80027d8:	04d9      	lsls	r1, r3, #19
 80027da:	6022      	str	r2, [r4, #0]
 80027dc:	d504      	bpl.n	80027e8 <__sflush_r+0x78>
 80027de:	1c42      	adds	r2, r0, #1
 80027e0:	d101      	bne.n	80027e6 <__sflush_r+0x76>
 80027e2:	682b      	ldr	r3, [r5, #0]
 80027e4:	b903      	cbnz	r3, 80027e8 <__sflush_r+0x78>
 80027e6:	6560      	str	r0, [r4, #84]	; 0x54
 80027e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027ea:	602f      	str	r7, [r5, #0]
 80027ec:	2900      	cmp	r1, #0
 80027ee:	d0cb      	beq.n	8002788 <__sflush_r+0x18>
 80027f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027f4:	4299      	cmp	r1, r3
 80027f6:	d002      	beq.n	80027fe <__sflush_r+0x8e>
 80027f8:	4628      	mov	r0, r5
 80027fa:	f7ff fcf1 	bl	80021e0 <_free_r>
 80027fe:	2000      	movs	r0, #0
 8002800:	6360      	str	r0, [r4, #52]	; 0x34
 8002802:	e7c2      	b.n	800278a <__sflush_r+0x1a>
 8002804:	6a21      	ldr	r1, [r4, #32]
 8002806:	2301      	movs	r3, #1
 8002808:	4628      	mov	r0, r5
 800280a:	47b0      	blx	r6
 800280c:	1c41      	adds	r1, r0, #1
 800280e:	d1c7      	bne.n	80027a0 <__sflush_r+0x30>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0c4      	beq.n	80027a0 <__sflush_r+0x30>
 8002816:	2b1d      	cmp	r3, #29
 8002818:	d001      	beq.n	800281e <__sflush_r+0xae>
 800281a:	2b16      	cmp	r3, #22
 800281c:	d101      	bne.n	8002822 <__sflush_r+0xb2>
 800281e:	602f      	str	r7, [r5, #0]
 8002820:	e7b2      	b.n	8002788 <__sflush_r+0x18>
 8002822:	89a3      	ldrh	r3, [r4, #12]
 8002824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	e7ae      	b.n	800278a <__sflush_r+0x1a>
 800282c:	690f      	ldr	r7, [r1, #16]
 800282e:	2f00      	cmp	r7, #0
 8002830:	d0aa      	beq.n	8002788 <__sflush_r+0x18>
 8002832:	0793      	lsls	r3, r2, #30
 8002834:	bf18      	it	ne
 8002836:	2300      	movne	r3, #0
 8002838:	680e      	ldr	r6, [r1, #0]
 800283a:	bf08      	it	eq
 800283c:	694b      	ldreq	r3, [r1, #20]
 800283e:	1bf6      	subs	r6, r6, r7
 8002840:	600f      	str	r7, [r1, #0]
 8002842:	608b      	str	r3, [r1, #8]
 8002844:	2e00      	cmp	r6, #0
 8002846:	dd9f      	ble.n	8002788 <__sflush_r+0x18>
 8002848:	4633      	mov	r3, r6
 800284a:	463a      	mov	r2, r7
 800284c:	4628      	mov	r0, r5
 800284e:	6a21      	ldr	r1, [r4, #32]
 8002850:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002854:	47e0      	blx	ip
 8002856:	2800      	cmp	r0, #0
 8002858:	dc06      	bgt.n	8002868 <__sflush_r+0xf8>
 800285a:	89a3      	ldrh	r3, [r4, #12]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002864:	81a3      	strh	r3, [r4, #12]
 8002866:	e790      	b.n	800278a <__sflush_r+0x1a>
 8002868:	4407      	add	r7, r0
 800286a:	1a36      	subs	r6, r6, r0
 800286c:	e7ea      	b.n	8002844 <__sflush_r+0xd4>
 800286e:	bf00      	nop
 8002870:	20400001 	.word	0x20400001

08002874 <_fflush_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	690b      	ldr	r3, [r1, #16]
 8002878:	4605      	mov	r5, r0
 800287a:	460c      	mov	r4, r1
 800287c:	b913      	cbnz	r3, 8002884 <_fflush_r+0x10>
 800287e:	2500      	movs	r5, #0
 8002880:	4628      	mov	r0, r5
 8002882:	bd38      	pop	{r3, r4, r5, pc}
 8002884:	b118      	cbz	r0, 800288e <_fflush_r+0x1a>
 8002886:	6983      	ldr	r3, [r0, #24]
 8002888:	b90b      	cbnz	r3, 800288e <_fflush_r+0x1a>
 800288a:	f000 f887 	bl	800299c <__sinit>
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <_fflush_r+0x6c>)
 8002890:	429c      	cmp	r4, r3
 8002892:	d11b      	bne.n	80028cc <_fflush_r+0x58>
 8002894:	686c      	ldr	r4, [r5, #4]
 8002896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0ef      	beq.n	800287e <_fflush_r+0xa>
 800289e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80028a0:	07d0      	lsls	r0, r2, #31
 80028a2:	d404      	bmi.n	80028ae <_fflush_r+0x3a>
 80028a4:	0599      	lsls	r1, r3, #22
 80028a6:	d402      	bmi.n	80028ae <_fflush_r+0x3a>
 80028a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028aa:	f000 f915 	bl	8002ad8 <__retarget_lock_acquire_recursive>
 80028ae:	4628      	mov	r0, r5
 80028b0:	4621      	mov	r1, r4
 80028b2:	f7ff ff5d 	bl	8002770 <__sflush_r>
 80028b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028b8:	4605      	mov	r5, r0
 80028ba:	07da      	lsls	r2, r3, #31
 80028bc:	d4e0      	bmi.n	8002880 <_fflush_r+0xc>
 80028be:	89a3      	ldrh	r3, [r4, #12]
 80028c0:	059b      	lsls	r3, r3, #22
 80028c2:	d4dd      	bmi.n	8002880 <_fflush_r+0xc>
 80028c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028c6:	f000 f908 	bl	8002ada <__retarget_lock_release_recursive>
 80028ca:	e7d9      	b.n	8002880 <_fflush_r+0xc>
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <_fflush_r+0x70>)
 80028ce:	429c      	cmp	r4, r3
 80028d0:	d101      	bne.n	80028d6 <_fflush_r+0x62>
 80028d2:	68ac      	ldr	r4, [r5, #8]
 80028d4:	e7df      	b.n	8002896 <_fflush_r+0x22>
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <_fflush_r+0x74>)
 80028d8:	429c      	cmp	r4, r3
 80028da:	bf08      	it	eq
 80028dc:	68ec      	ldreq	r4, [r5, #12]
 80028de:	e7da      	b.n	8002896 <_fflush_r+0x22>
 80028e0:	08003a70 	.word	0x08003a70
 80028e4:	08003a90 	.word	0x08003a90
 80028e8:	08003a50 	.word	0x08003a50

080028ec <std>:
 80028ec:	2300      	movs	r3, #0
 80028ee:	b510      	push	{r4, lr}
 80028f0:	4604      	mov	r4, r0
 80028f2:	e9c0 3300 	strd	r3, r3, [r0]
 80028f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028fa:	6083      	str	r3, [r0, #8]
 80028fc:	8181      	strh	r1, [r0, #12]
 80028fe:	6643      	str	r3, [r0, #100]	; 0x64
 8002900:	81c2      	strh	r2, [r0, #14]
 8002902:	6183      	str	r3, [r0, #24]
 8002904:	4619      	mov	r1, r3
 8002906:	2208      	movs	r2, #8
 8002908:	305c      	adds	r0, #92	; 0x5c
 800290a:	f7ff fc61 	bl	80021d0 <memset>
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <std+0x38>)
 8002910:	6224      	str	r4, [r4, #32]
 8002912:	6263      	str	r3, [r4, #36]	; 0x24
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <std+0x3c>)
 8002916:	62a3      	str	r3, [r4, #40]	; 0x28
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <std+0x40>)
 800291a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <std+0x44>)
 800291e:	6323      	str	r3, [r4, #48]	; 0x30
 8002920:	bd10      	pop	{r4, pc}
 8002922:	bf00      	nop
 8002924:	0800319d 	.word	0x0800319d
 8002928:	080031bf 	.word	0x080031bf
 800292c:	080031f7 	.word	0x080031f7
 8002930:	0800321b 	.word	0x0800321b

08002934 <_cleanup_r>:
 8002934:	4901      	ldr	r1, [pc, #4]	; (800293c <_cleanup_r+0x8>)
 8002936:	f000 b8af 	b.w	8002a98 <_fwalk_reent>
 800293a:	bf00      	nop
 800293c:	08002875 	.word	0x08002875

08002940 <__sfmoreglue>:
 8002940:	2268      	movs	r2, #104	; 0x68
 8002942:	b570      	push	{r4, r5, r6, lr}
 8002944:	1e4d      	subs	r5, r1, #1
 8002946:	4355      	muls	r5, r2
 8002948:	460e      	mov	r6, r1
 800294a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800294e:	f7ff fcaf 	bl	80022b0 <_malloc_r>
 8002952:	4604      	mov	r4, r0
 8002954:	b140      	cbz	r0, 8002968 <__sfmoreglue+0x28>
 8002956:	2100      	movs	r1, #0
 8002958:	e9c0 1600 	strd	r1, r6, [r0]
 800295c:	300c      	adds	r0, #12
 800295e:	60a0      	str	r0, [r4, #8]
 8002960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002964:	f7ff fc34 	bl	80021d0 <memset>
 8002968:	4620      	mov	r0, r4
 800296a:	bd70      	pop	{r4, r5, r6, pc}

0800296c <__sfp_lock_acquire>:
 800296c:	4801      	ldr	r0, [pc, #4]	; (8002974 <__sfp_lock_acquire+0x8>)
 800296e:	f000 b8b3 	b.w	8002ad8 <__retarget_lock_acquire_recursive>
 8002972:	bf00      	nop
 8002974:	2000012d 	.word	0x2000012d

08002978 <__sfp_lock_release>:
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <__sfp_lock_release+0x8>)
 800297a:	f000 b8ae 	b.w	8002ada <__retarget_lock_release_recursive>
 800297e:	bf00      	nop
 8002980:	2000012d 	.word	0x2000012d

08002984 <__sinit_lock_acquire>:
 8002984:	4801      	ldr	r0, [pc, #4]	; (800298c <__sinit_lock_acquire+0x8>)
 8002986:	f000 b8a7 	b.w	8002ad8 <__retarget_lock_acquire_recursive>
 800298a:	bf00      	nop
 800298c:	2000012e 	.word	0x2000012e

08002990 <__sinit_lock_release>:
 8002990:	4801      	ldr	r0, [pc, #4]	; (8002998 <__sinit_lock_release+0x8>)
 8002992:	f000 b8a2 	b.w	8002ada <__retarget_lock_release_recursive>
 8002996:	bf00      	nop
 8002998:	2000012e 	.word	0x2000012e

0800299c <__sinit>:
 800299c:	b510      	push	{r4, lr}
 800299e:	4604      	mov	r4, r0
 80029a0:	f7ff fff0 	bl	8002984 <__sinit_lock_acquire>
 80029a4:	69a3      	ldr	r3, [r4, #24]
 80029a6:	b11b      	cbz	r3, 80029b0 <__sinit+0x14>
 80029a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ac:	f7ff bff0 	b.w	8002990 <__sinit_lock_release>
 80029b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80029b4:	6523      	str	r3, [r4, #80]	; 0x50
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <__sinit+0x68>)
 80029b8:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <__sinit+0x6c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80029be:	42a3      	cmp	r3, r4
 80029c0:	bf08      	it	eq
 80029c2:	2301      	moveq	r3, #1
 80029c4:	4620      	mov	r0, r4
 80029c6:	bf08      	it	eq
 80029c8:	61a3      	streq	r3, [r4, #24]
 80029ca:	f000 f81f 	bl	8002a0c <__sfp>
 80029ce:	6060      	str	r0, [r4, #4]
 80029d0:	4620      	mov	r0, r4
 80029d2:	f000 f81b 	bl	8002a0c <__sfp>
 80029d6:	60a0      	str	r0, [r4, #8]
 80029d8:	4620      	mov	r0, r4
 80029da:	f000 f817 	bl	8002a0c <__sfp>
 80029de:	2200      	movs	r2, #0
 80029e0:	2104      	movs	r1, #4
 80029e2:	60e0      	str	r0, [r4, #12]
 80029e4:	6860      	ldr	r0, [r4, #4]
 80029e6:	f7ff ff81 	bl	80028ec <std>
 80029ea:	2201      	movs	r2, #1
 80029ec:	2109      	movs	r1, #9
 80029ee:	68a0      	ldr	r0, [r4, #8]
 80029f0:	f7ff ff7c 	bl	80028ec <std>
 80029f4:	2202      	movs	r2, #2
 80029f6:	2112      	movs	r1, #18
 80029f8:	68e0      	ldr	r0, [r4, #12]
 80029fa:	f7ff ff77 	bl	80028ec <std>
 80029fe:	2301      	movs	r3, #1
 8002a00:	61a3      	str	r3, [r4, #24]
 8002a02:	e7d1      	b.n	80029a8 <__sinit+0xc>
 8002a04:	08003a4c 	.word	0x08003a4c
 8002a08:	08002935 	.word	0x08002935

08002a0c <__sfp>:
 8002a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0e:	4607      	mov	r7, r0
 8002a10:	f7ff ffac 	bl	800296c <__sfp_lock_acquire>
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <__sfp+0x84>)
 8002a16:	681e      	ldr	r6, [r3, #0]
 8002a18:	69b3      	ldr	r3, [r6, #24]
 8002a1a:	b913      	cbnz	r3, 8002a22 <__sfp+0x16>
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	f7ff ffbd 	bl	800299c <__sinit>
 8002a22:	3648      	adds	r6, #72	; 0x48
 8002a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	d503      	bpl.n	8002a34 <__sfp+0x28>
 8002a2c:	6833      	ldr	r3, [r6, #0]
 8002a2e:	b30b      	cbz	r3, 8002a74 <__sfp+0x68>
 8002a30:	6836      	ldr	r6, [r6, #0]
 8002a32:	e7f7      	b.n	8002a24 <__sfp+0x18>
 8002a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a38:	b9d5      	cbnz	r5, 8002a70 <__sfp+0x64>
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <__sfp+0x88>)
 8002a3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a40:	60e3      	str	r3, [r4, #12]
 8002a42:	6665      	str	r5, [r4, #100]	; 0x64
 8002a44:	f000 f847 	bl	8002ad6 <__retarget_lock_init_recursive>
 8002a48:	f7ff ff96 	bl	8002978 <__sfp_lock_release>
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4629      	mov	r1, r5
 8002a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a58:	6025      	str	r5, [r4, #0]
 8002a5a:	61a5      	str	r5, [r4, #24]
 8002a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a60:	f7ff fbb6 	bl	80021d0 <memset>
 8002a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a70:	3468      	adds	r4, #104	; 0x68
 8002a72:	e7d9      	b.n	8002a28 <__sfp+0x1c>
 8002a74:	2104      	movs	r1, #4
 8002a76:	4638      	mov	r0, r7
 8002a78:	f7ff ff62 	bl	8002940 <__sfmoreglue>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	6030      	str	r0, [r6, #0]
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1d5      	bne.n	8002a30 <__sfp+0x24>
 8002a84:	f7ff ff78 	bl	8002978 <__sfp_lock_release>
 8002a88:	230c      	movs	r3, #12
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	e7ee      	b.n	8002a6c <__sfp+0x60>
 8002a8e:	bf00      	nop
 8002a90:	08003a4c 	.word	0x08003a4c
 8002a94:	ffff0001 	.word	0xffff0001

08002a98 <_fwalk_reent>:
 8002a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	4688      	mov	r8, r1
 8002aa0:	2700      	movs	r7, #0
 8002aa2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8002aae:	d505      	bpl.n	8002abc <_fwalk_reent+0x24>
 8002ab0:	6824      	ldr	r4, [r4, #0]
 8002ab2:	2c00      	cmp	r4, #0
 8002ab4:	d1f7      	bne.n	8002aa6 <_fwalk_reent+0xe>
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002abc:	89ab      	ldrh	r3, [r5, #12]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d907      	bls.n	8002ad2 <_fwalk_reent+0x3a>
 8002ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	d003      	beq.n	8002ad2 <_fwalk_reent+0x3a>
 8002aca:	4629      	mov	r1, r5
 8002acc:	4630      	mov	r0, r6
 8002ace:	47c0      	blx	r8
 8002ad0:	4307      	orrs	r7, r0
 8002ad2:	3568      	adds	r5, #104	; 0x68
 8002ad4:	e7e9      	b.n	8002aaa <_fwalk_reent+0x12>

08002ad6 <__retarget_lock_init_recursive>:
 8002ad6:	4770      	bx	lr

08002ad8 <__retarget_lock_acquire_recursive>:
 8002ad8:	4770      	bx	lr

08002ada <__retarget_lock_release_recursive>:
 8002ada:	4770      	bx	lr

08002adc <__swhatbuf_r>:
 8002adc:	b570      	push	{r4, r5, r6, lr}
 8002ade:	460e      	mov	r6, r1
 8002ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	2900      	cmp	r1, #0
 8002ae8:	461d      	mov	r5, r3
 8002aea:	b096      	sub	sp, #88	; 0x58
 8002aec:	da08      	bge.n	8002b00 <__swhatbuf_r+0x24>
 8002aee:	2200      	movs	r2, #0
 8002af0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002af4:	602a      	str	r2, [r5, #0]
 8002af6:	061a      	lsls	r2, r3, #24
 8002af8:	d410      	bmi.n	8002b1c <__swhatbuf_r+0x40>
 8002afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afe:	e00e      	b.n	8002b1e <__swhatbuf_r+0x42>
 8002b00:	466a      	mov	r2, sp
 8002b02:	f000 fbb1 	bl	8003268 <_fstat_r>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	dbf1      	blt.n	8002aee <__swhatbuf_r+0x12>
 8002b0a:	9a01      	ldr	r2, [sp, #4]
 8002b0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b14:	425a      	negs	r2, r3
 8002b16:	415a      	adcs	r2, r3
 8002b18:	602a      	str	r2, [r5, #0]
 8002b1a:	e7ee      	b.n	8002afa <__swhatbuf_r+0x1e>
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	2000      	movs	r0, #0
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	b016      	add	sp, #88	; 0x58
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b28 <__smakebuf_r>:
 8002b28:	898b      	ldrh	r3, [r1, #12]
 8002b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b2c:	079d      	lsls	r5, r3, #30
 8002b2e:	4606      	mov	r6, r0
 8002b30:	460c      	mov	r4, r1
 8002b32:	d507      	bpl.n	8002b44 <__smakebuf_r+0x1c>
 8002b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b38:	6023      	str	r3, [r4, #0]
 8002b3a:	6123      	str	r3, [r4, #16]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	6163      	str	r3, [r4, #20]
 8002b40:	b002      	add	sp, #8
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
 8002b44:	466a      	mov	r2, sp
 8002b46:	ab01      	add	r3, sp, #4
 8002b48:	f7ff ffc8 	bl	8002adc <__swhatbuf_r>
 8002b4c:	9900      	ldr	r1, [sp, #0]
 8002b4e:	4605      	mov	r5, r0
 8002b50:	4630      	mov	r0, r6
 8002b52:	f7ff fbad 	bl	80022b0 <_malloc_r>
 8002b56:	b948      	cbnz	r0, 8002b6c <__smakebuf_r+0x44>
 8002b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b5c:	059a      	lsls	r2, r3, #22
 8002b5e:	d4ef      	bmi.n	8002b40 <__smakebuf_r+0x18>
 8002b60:	f023 0303 	bic.w	r3, r3, #3
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	81a3      	strh	r3, [r4, #12]
 8002b6a:	e7e3      	b.n	8002b34 <__smakebuf_r+0xc>
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <__smakebuf_r+0x7c>)
 8002b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	6020      	str	r0, [r4, #0]
 8002b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b78:	81a3      	strh	r3, [r4, #12]
 8002b7a:	9b00      	ldr	r3, [sp, #0]
 8002b7c:	6120      	str	r0, [r4, #16]
 8002b7e:	6163      	str	r3, [r4, #20]
 8002b80:	9b01      	ldr	r3, [sp, #4]
 8002b82:	b15b      	cbz	r3, 8002b9c <__smakebuf_r+0x74>
 8002b84:	4630      	mov	r0, r6
 8002b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b8a:	f000 fb7f 	bl	800328c <_isatty_r>
 8002b8e:	b128      	cbz	r0, 8002b9c <__smakebuf_r+0x74>
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	81a3      	strh	r3, [r4, #12]
 8002b9c:	89a0      	ldrh	r0, [r4, #12]
 8002b9e:	4305      	orrs	r5, r0
 8002ba0:	81a5      	strh	r5, [r4, #12]
 8002ba2:	e7cd      	b.n	8002b40 <__smakebuf_r+0x18>
 8002ba4:	08002935 	.word	0x08002935

08002ba8 <__malloc_lock>:
 8002ba8:	4801      	ldr	r0, [pc, #4]	; (8002bb0 <__malloc_lock+0x8>)
 8002baa:	f7ff bf95 	b.w	8002ad8 <__retarget_lock_acquire_recursive>
 8002bae:	bf00      	nop
 8002bb0:	2000012c 	.word	0x2000012c

08002bb4 <__malloc_unlock>:
 8002bb4:	4801      	ldr	r0, [pc, #4]	; (8002bbc <__malloc_unlock+0x8>)
 8002bb6:	f7ff bf90 	b.w	8002ada <__retarget_lock_release_recursive>
 8002bba:	bf00      	nop
 8002bbc:	2000012c 	.word	0x2000012c

08002bc0 <__sfputc_r>:
 8002bc0:	6893      	ldr	r3, [r2, #8]
 8002bc2:	b410      	push	{r4}
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	6093      	str	r3, [r2, #8]
 8002bca:	da07      	bge.n	8002bdc <__sfputc_r+0x1c>
 8002bcc:	6994      	ldr	r4, [r2, #24]
 8002bce:	42a3      	cmp	r3, r4
 8002bd0:	db01      	blt.n	8002bd6 <__sfputc_r+0x16>
 8002bd2:	290a      	cmp	r1, #10
 8002bd4:	d102      	bne.n	8002bdc <__sfputc_r+0x1c>
 8002bd6:	bc10      	pop	{r4}
 8002bd8:	f7ff bd0a 	b.w	80025f0 <__swbuf_r>
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	1c58      	adds	r0, r3, #1
 8002be0:	6010      	str	r0, [r2, #0]
 8002be2:	7019      	strb	r1, [r3, #0]
 8002be4:	4608      	mov	r0, r1
 8002be6:	bc10      	pop	{r4}
 8002be8:	4770      	bx	lr

08002bea <__sfputs_r>:
 8002bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bec:	4606      	mov	r6, r0
 8002bee:	460f      	mov	r7, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	18d5      	adds	r5, r2, r3
 8002bf4:	42ac      	cmp	r4, r5
 8002bf6:	d101      	bne.n	8002bfc <__sfputs_r+0x12>
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	e007      	b.n	8002c0c <__sfputs_r+0x22>
 8002bfc:	463a      	mov	r2, r7
 8002bfe:	4630      	mov	r0, r6
 8002c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c04:	f7ff ffdc 	bl	8002bc0 <__sfputc_r>
 8002c08:	1c43      	adds	r3, r0, #1
 8002c0a:	d1f3      	bne.n	8002bf4 <__sfputs_r+0xa>
 8002c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c10 <_vfiprintf_r>:
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	460d      	mov	r5, r1
 8002c16:	4614      	mov	r4, r2
 8002c18:	4698      	mov	r8, r3
 8002c1a:	4606      	mov	r6, r0
 8002c1c:	b09d      	sub	sp, #116	; 0x74
 8002c1e:	b118      	cbz	r0, 8002c28 <_vfiprintf_r+0x18>
 8002c20:	6983      	ldr	r3, [r0, #24]
 8002c22:	b90b      	cbnz	r3, 8002c28 <_vfiprintf_r+0x18>
 8002c24:	f7ff feba 	bl	800299c <__sinit>
 8002c28:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <_vfiprintf_r+0x240>)
 8002c2a:	429d      	cmp	r5, r3
 8002c2c:	d11b      	bne.n	8002c66 <_vfiprintf_r+0x56>
 8002c2e:	6875      	ldr	r5, [r6, #4]
 8002c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c32:	07d9      	lsls	r1, r3, #31
 8002c34:	d405      	bmi.n	8002c42 <_vfiprintf_r+0x32>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	059a      	lsls	r2, r3, #22
 8002c3a:	d402      	bmi.n	8002c42 <_vfiprintf_r+0x32>
 8002c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c3e:	f7ff ff4b 	bl	8002ad8 <__retarget_lock_acquire_recursive>
 8002c42:	89ab      	ldrh	r3, [r5, #12]
 8002c44:	071b      	lsls	r3, r3, #28
 8002c46:	d501      	bpl.n	8002c4c <_vfiprintf_r+0x3c>
 8002c48:	692b      	ldr	r3, [r5, #16]
 8002c4a:	b9eb      	cbnz	r3, 8002c88 <_vfiprintf_r+0x78>
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	4630      	mov	r0, r6
 8002c50:	f7ff fd20 	bl	8002694 <__swsetup_r>
 8002c54:	b1c0      	cbz	r0, 8002c88 <_vfiprintf_r+0x78>
 8002c56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c58:	07dc      	lsls	r4, r3, #31
 8002c5a:	d50e      	bpl.n	8002c7a <_vfiprintf_r+0x6a>
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c60:	b01d      	add	sp, #116	; 0x74
 8002c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c66:	4b7b      	ldr	r3, [pc, #492]	; (8002e54 <_vfiprintf_r+0x244>)
 8002c68:	429d      	cmp	r5, r3
 8002c6a:	d101      	bne.n	8002c70 <_vfiprintf_r+0x60>
 8002c6c:	68b5      	ldr	r5, [r6, #8]
 8002c6e:	e7df      	b.n	8002c30 <_vfiprintf_r+0x20>
 8002c70:	4b79      	ldr	r3, [pc, #484]	; (8002e58 <_vfiprintf_r+0x248>)
 8002c72:	429d      	cmp	r5, r3
 8002c74:	bf08      	it	eq
 8002c76:	68f5      	ldreq	r5, [r6, #12]
 8002c78:	e7da      	b.n	8002c30 <_vfiprintf_r+0x20>
 8002c7a:	89ab      	ldrh	r3, [r5, #12]
 8002c7c:	0598      	lsls	r0, r3, #22
 8002c7e:	d4ed      	bmi.n	8002c5c <_vfiprintf_r+0x4c>
 8002c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c82:	f7ff ff2a 	bl	8002ada <__retarget_lock_release_recursive>
 8002c86:	e7e9      	b.n	8002c5c <_vfiprintf_r+0x4c>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c92:	2330      	movs	r3, #48	; 0x30
 8002c94:	f04f 0901 	mov.w	r9, #1
 8002c98:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e5c <_vfiprintf_r+0x24c>
 8002ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ca4:	4623      	mov	r3, r4
 8002ca6:	469a      	mov	sl, r3
 8002ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cac:	b10a      	cbz	r2, 8002cb2 <_vfiprintf_r+0xa2>
 8002cae:	2a25      	cmp	r2, #37	; 0x25
 8002cb0:	d1f9      	bne.n	8002ca6 <_vfiprintf_r+0x96>
 8002cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8002cb6:	d00b      	beq.n	8002cd0 <_vfiprintf_r+0xc0>
 8002cb8:	465b      	mov	r3, fp
 8002cba:	4622      	mov	r2, r4
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f7ff ff93 	bl	8002bea <__sfputs_r>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	f000 80aa 	beq.w	8002e1e <_vfiprintf_r+0x20e>
 8002cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ccc:	445a      	add	r2, fp
 8002cce:	9209      	str	r2, [sp, #36]	; 0x24
 8002cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a2 	beq.w	8002e1e <_vfiprintf_r+0x20e>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ce4:	f10a 0a01 	add.w	sl, sl, #1
 8002ce8:	9304      	str	r3, [sp, #16]
 8002cea:	9307      	str	r3, [sp, #28]
 8002cec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cf0:	931a      	str	r3, [sp, #104]	; 0x68
 8002cf2:	4654      	mov	r4, sl
 8002cf4:	2205      	movs	r2, #5
 8002cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cfa:	4858      	ldr	r0, [pc, #352]	; (8002e5c <_vfiprintf_r+0x24c>)
 8002cfc:	f000 fae8 	bl	80032d0 <memchr>
 8002d00:	9a04      	ldr	r2, [sp, #16]
 8002d02:	b9d8      	cbnz	r0, 8002d3c <_vfiprintf_r+0x12c>
 8002d04:	06d1      	lsls	r1, r2, #27
 8002d06:	bf44      	itt	mi
 8002d08:	2320      	movmi	r3, #32
 8002d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d0e:	0713      	lsls	r3, r2, #28
 8002d10:	bf44      	itt	mi
 8002d12:	232b      	movmi	r3, #43	; 0x2b
 8002d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d18:	f89a 3000 	ldrb.w	r3, [sl]
 8002d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d1e:	d015      	beq.n	8002d4c <_vfiprintf_r+0x13c>
 8002d20:	4654      	mov	r4, sl
 8002d22:	2000      	movs	r0, #0
 8002d24:	f04f 0c0a 	mov.w	ip, #10
 8002d28:	9a07      	ldr	r2, [sp, #28]
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d30:	3b30      	subs	r3, #48	; 0x30
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d94e      	bls.n	8002dd4 <_vfiprintf_r+0x1c4>
 8002d36:	b1b0      	cbz	r0, 8002d66 <_vfiprintf_r+0x156>
 8002d38:	9207      	str	r2, [sp, #28]
 8002d3a:	e014      	b.n	8002d66 <_vfiprintf_r+0x156>
 8002d3c:	eba0 0308 	sub.w	r3, r0, r8
 8002d40:	fa09 f303 	lsl.w	r3, r9, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	46a2      	mov	sl, r4
 8002d48:	9304      	str	r3, [sp, #16]
 8002d4a:	e7d2      	b.n	8002cf2 <_vfiprintf_r+0xe2>
 8002d4c:	9b03      	ldr	r3, [sp, #12]
 8002d4e:	1d19      	adds	r1, r3, #4
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	9103      	str	r1, [sp, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bfbb      	ittet	lt
 8002d58:	425b      	neglt	r3, r3
 8002d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d5e:	9307      	strge	r3, [sp, #28]
 8002d60:	9307      	strlt	r3, [sp, #28]
 8002d62:	bfb8      	it	lt
 8002d64:	9204      	strlt	r2, [sp, #16]
 8002d66:	7823      	ldrb	r3, [r4, #0]
 8002d68:	2b2e      	cmp	r3, #46	; 0x2e
 8002d6a:	d10c      	bne.n	8002d86 <_vfiprintf_r+0x176>
 8002d6c:	7863      	ldrb	r3, [r4, #1]
 8002d6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d70:	d135      	bne.n	8002dde <_vfiprintf_r+0x1ce>
 8002d72:	9b03      	ldr	r3, [sp, #12]
 8002d74:	3402      	adds	r4, #2
 8002d76:	1d1a      	adds	r2, r3, #4
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	9203      	str	r2, [sp, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bfb8      	it	lt
 8002d80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d84:	9305      	str	r3, [sp, #20]
 8002d86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002e60 <_vfiprintf_r+0x250>
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	4650      	mov	r0, sl
 8002d8e:	7821      	ldrb	r1, [r4, #0]
 8002d90:	f000 fa9e 	bl	80032d0 <memchr>
 8002d94:	b140      	cbz	r0, 8002da8 <_vfiprintf_r+0x198>
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	eba0 000a 	sub.w	r0, r0, sl
 8002d9c:	fa03 f000 	lsl.w	r0, r3, r0
 8002da0:	9b04      	ldr	r3, [sp, #16]
 8002da2:	3401      	adds	r4, #1
 8002da4:	4303      	orrs	r3, r0
 8002da6:	9304      	str	r3, [sp, #16]
 8002da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dac:	2206      	movs	r2, #6
 8002dae:	482d      	ldr	r0, [pc, #180]	; (8002e64 <_vfiprintf_r+0x254>)
 8002db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002db4:	f000 fa8c 	bl	80032d0 <memchr>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d03f      	beq.n	8002e3c <_vfiprintf_r+0x22c>
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <_vfiprintf_r+0x258>)
 8002dbe:	bb1b      	cbnz	r3, 8002e08 <_vfiprintf_r+0x1f8>
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	3307      	adds	r3, #7
 8002dc4:	f023 0307 	bic.w	r3, r3, #7
 8002dc8:	3308      	adds	r3, #8
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dce:	443b      	add	r3, r7
 8002dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd2:	e767      	b.n	8002ca4 <_vfiprintf_r+0x94>
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ddc:	e7a5      	b.n	8002d2a <_vfiprintf_r+0x11a>
 8002dde:	2300      	movs	r3, #0
 8002de0:	f04f 0c0a 	mov.w	ip, #10
 8002de4:	4619      	mov	r1, r3
 8002de6:	3401      	adds	r4, #1
 8002de8:	9305      	str	r3, [sp, #20]
 8002dea:	4620      	mov	r0, r4
 8002dec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df0:	3a30      	subs	r2, #48	; 0x30
 8002df2:	2a09      	cmp	r2, #9
 8002df4:	d903      	bls.n	8002dfe <_vfiprintf_r+0x1ee>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0c5      	beq.n	8002d86 <_vfiprintf_r+0x176>
 8002dfa:	9105      	str	r1, [sp, #20]
 8002dfc:	e7c3      	b.n	8002d86 <_vfiprintf_r+0x176>
 8002dfe:	4604      	mov	r4, r0
 8002e00:	2301      	movs	r3, #1
 8002e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e06:	e7f0      	b.n	8002dea <_vfiprintf_r+0x1da>
 8002e08:	ab03      	add	r3, sp, #12
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	462a      	mov	r2, r5
 8002e0e:	4630      	mov	r0, r6
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <_vfiprintf_r+0x25c>)
 8002e12:	a904      	add	r1, sp, #16
 8002e14:	f3af 8000 	nop.w
 8002e18:	4607      	mov	r7, r0
 8002e1a:	1c78      	adds	r0, r7, #1
 8002e1c:	d1d6      	bne.n	8002dcc <_vfiprintf_r+0x1bc>
 8002e1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e20:	07d9      	lsls	r1, r3, #31
 8002e22:	d405      	bmi.n	8002e30 <_vfiprintf_r+0x220>
 8002e24:	89ab      	ldrh	r3, [r5, #12]
 8002e26:	059a      	lsls	r2, r3, #22
 8002e28:	d402      	bmi.n	8002e30 <_vfiprintf_r+0x220>
 8002e2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e2c:	f7ff fe55 	bl	8002ada <__retarget_lock_release_recursive>
 8002e30:	89ab      	ldrh	r3, [r5, #12]
 8002e32:	065b      	lsls	r3, r3, #25
 8002e34:	f53f af12 	bmi.w	8002c5c <_vfiprintf_r+0x4c>
 8002e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e3a:	e711      	b.n	8002c60 <_vfiprintf_r+0x50>
 8002e3c:	ab03      	add	r3, sp, #12
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	462a      	mov	r2, r5
 8002e42:	4630      	mov	r0, r6
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <_vfiprintf_r+0x25c>)
 8002e46:	a904      	add	r1, sp, #16
 8002e48:	f000 f882 	bl	8002f50 <_printf_i>
 8002e4c:	e7e4      	b.n	8002e18 <_vfiprintf_r+0x208>
 8002e4e:	bf00      	nop
 8002e50:	08003a70 	.word	0x08003a70
 8002e54:	08003a90 	.word	0x08003a90
 8002e58:	08003a50 	.word	0x08003a50
 8002e5c:	08003ab0 	.word	0x08003ab0
 8002e60:	08003ab6 	.word	0x08003ab6
 8002e64:	08003aba 	.word	0x08003aba
 8002e68:	00000000 	.word	0x00000000
 8002e6c:	08002beb 	.word	0x08002beb

08002e70 <_printf_common>:
 8002e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	4616      	mov	r6, r2
 8002e76:	4699      	mov	r9, r3
 8002e78:	688a      	ldr	r2, [r1, #8]
 8002e7a:	690b      	ldr	r3, [r1, #16]
 8002e7c:	4607      	mov	r7, r0
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	bfb8      	it	lt
 8002e82:	4613      	movlt	r3, r2
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e90:	b10a      	cbz	r2, 8002e96 <_printf_common+0x26>
 8002e92:	3301      	adds	r3, #1
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	0699      	lsls	r1, r3, #26
 8002e9a:	bf42      	ittt	mi
 8002e9c:	6833      	ldrmi	r3, [r6, #0]
 8002e9e:	3302      	addmi	r3, #2
 8002ea0:	6033      	strmi	r3, [r6, #0]
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	f015 0506 	ands.w	r5, r5, #6
 8002ea8:	d106      	bne.n	8002eb8 <_printf_common+0x48>
 8002eaa:	f104 0a19 	add.w	sl, r4, #25
 8002eae:	68e3      	ldr	r3, [r4, #12]
 8002eb0:	6832      	ldr	r2, [r6, #0]
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	42ab      	cmp	r3, r5
 8002eb6:	dc28      	bgt.n	8002f0a <_printf_common+0x9a>
 8002eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ebc:	1e13      	subs	r3, r2, #0
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	bf18      	it	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	0692      	lsls	r2, r2, #26
 8002ec6:	d42d      	bmi.n	8002f24 <_printf_common+0xb4>
 8002ec8:	4649      	mov	r1, r9
 8002eca:	4638      	mov	r0, r7
 8002ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed0:	47c0      	blx	r8
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d020      	beq.n	8002f18 <_printf_common+0xa8>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	68e5      	ldr	r5, [r4, #12]
 8002eda:	f003 0306 	and.w	r3, r3, #6
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf18      	it	ne
 8002ee2:	2500      	movne	r5, #0
 8002ee4:	6832      	ldr	r2, [r6, #0]
 8002ee6:	f04f 0600 	mov.w	r6, #0
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	bf08      	it	eq
 8002eee:	1aad      	subeq	r5, r5, r2
 8002ef0:	6922      	ldr	r2, [r4, #16]
 8002ef2:	bf08      	it	eq
 8002ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bfc4      	itt	gt
 8002efc:	1a9b      	subgt	r3, r3, r2
 8002efe:	18ed      	addgt	r5, r5, r3
 8002f00:	341a      	adds	r4, #26
 8002f02:	42b5      	cmp	r5, r6
 8002f04:	d11a      	bne.n	8002f3c <_printf_common+0xcc>
 8002f06:	2000      	movs	r0, #0
 8002f08:	e008      	b.n	8002f1c <_printf_common+0xac>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4652      	mov	r2, sl
 8002f0e:	4649      	mov	r1, r9
 8002f10:	4638      	mov	r0, r7
 8002f12:	47c0      	blx	r8
 8002f14:	3001      	adds	r0, #1
 8002f16:	d103      	bne.n	8002f20 <_printf_common+0xb0>
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f20:	3501      	adds	r5, #1
 8002f22:	e7c4      	b.n	8002eae <_printf_common+0x3e>
 8002f24:	2030      	movs	r0, #48	; 0x30
 8002f26:	18e1      	adds	r1, r4, r3
 8002f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f32:	4422      	add	r2, r4
 8002f34:	3302      	adds	r3, #2
 8002f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f3a:	e7c5      	b.n	8002ec8 <_printf_common+0x58>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	4622      	mov	r2, r4
 8002f40:	4649      	mov	r1, r9
 8002f42:	4638      	mov	r0, r7
 8002f44:	47c0      	blx	r8
 8002f46:	3001      	adds	r0, #1
 8002f48:	d0e6      	beq.n	8002f18 <_printf_common+0xa8>
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7d9      	b.n	8002f02 <_printf_common+0x92>
	...

08002f50 <_printf_i>:
 8002f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	7e0f      	ldrb	r7, [r1, #24]
 8002f56:	4691      	mov	r9, r2
 8002f58:	2f78      	cmp	r7, #120	; 0x78
 8002f5a:	4680      	mov	r8, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	469a      	mov	sl, r3
 8002f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f66:	d807      	bhi.n	8002f78 <_printf_i+0x28>
 8002f68:	2f62      	cmp	r7, #98	; 0x62
 8002f6a:	d80a      	bhi.n	8002f82 <_printf_i+0x32>
 8002f6c:	2f00      	cmp	r7, #0
 8002f6e:	f000 80d9 	beq.w	8003124 <_printf_i+0x1d4>
 8002f72:	2f58      	cmp	r7, #88	; 0x58
 8002f74:	f000 80a4 	beq.w	80030c0 <_printf_i+0x170>
 8002f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f80:	e03a      	b.n	8002ff8 <_printf_i+0xa8>
 8002f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f86:	2b15      	cmp	r3, #21
 8002f88:	d8f6      	bhi.n	8002f78 <_printf_i+0x28>
 8002f8a:	a101      	add	r1, pc, #4	; (adr r1, 8002f90 <_printf_i+0x40>)
 8002f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	08002ffd 	.word	0x08002ffd
 8002f98:	08002f79 	.word	0x08002f79
 8002f9c:	08002f79 	.word	0x08002f79
 8002fa0:	08002f79 	.word	0x08002f79
 8002fa4:	08002f79 	.word	0x08002f79
 8002fa8:	08002ffd 	.word	0x08002ffd
 8002fac:	08002f79 	.word	0x08002f79
 8002fb0:	08002f79 	.word	0x08002f79
 8002fb4:	08002f79 	.word	0x08002f79
 8002fb8:	08002f79 	.word	0x08002f79
 8002fbc:	0800310b 	.word	0x0800310b
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	080030ed 	.word	0x080030ed
 8002fc8:	08002f79 	.word	0x08002f79
 8002fcc:	08002f79 	.word	0x08002f79
 8002fd0:	0800312d 	.word	0x0800312d
 8002fd4:	08002f79 	.word	0x08002f79
 8002fd8:	0800302d 	.word	0x0800302d
 8002fdc:	08002f79 	.word	0x08002f79
 8002fe0:	08002f79 	.word	0x08002f79
 8002fe4:	080030f5 	.word	0x080030f5
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	602a      	str	r2, [r5, #0]
 8002ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a4      	b.n	8003146 <_printf_i+0x1f6>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	6829      	ldr	r1, [r5, #0]
 8003000:	0606      	lsls	r6, r0, #24
 8003002:	f101 0304 	add.w	r3, r1, #4
 8003006:	d50a      	bpl.n	800301e <_printf_i+0xce>
 8003008:	680e      	ldr	r6, [r1, #0]
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	2e00      	cmp	r6, #0
 800300e:	da03      	bge.n	8003018 <_printf_i+0xc8>
 8003010:	232d      	movs	r3, #45	; 0x2d
 8003012:	4276      	negs	r6, r6
 8003014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003018:	230a      	movs	r3, #10
 800301a:	485e      	ldr	r0, [pc, #376]	; (8003194 <_printf_i+0x244>)
 800301c:	e019      	b.n	8003052 <_printf_i+0x102>
 800301e:	680e      	ldr	r6, [r1, #0]
 8003020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003024:	602b      	str	r3, [r5, #0]
 8003026:	bf18      	it	ne
 8003028:	b236      	sxthne	r6, r6
 800302a:	e7ef      	b.n	800300c <_printf_i+0xbc>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	1d19      	adds	r1, r3, #4
 8003032:	6029      	str	r1, [r5, #0]
 8003034:	0601      	lsls	r1, r0, #24
 8003036:	d501      	bpl.n	800303c <_printf_i+0xec>
 8003038:	681e      	ldr	r6, [r3, #0]
 800303a:	e002      	b.n	8003042 <_printf_i+0xf2>
 800303c:	0646      	lsls	r6, r0, #25
 800303e:	d5fb      	bpl.n	8003038 <_printf_i+0xe8>
 8003040:	881e      	ldrh	r6, [r3, #0]
 8003042:	2f6f      	cmp	r7, #111	; 0x6f
 8003044:	bf0c      	ite	eq
 8003046:	2308      	moveq	r3, #8
 8003048:	230a      	movne	r3, #10
 800304a:	4852      	ldr	r0, [pc, #328]	; (8003194 <_printf_i+0x244>)
 800304c:	2100      	movs	r1, #0
 800304e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003052:	6865      	ldr	r5, [r4, #4]
 8003054:	2d00      	cmp	r5, #0
 8003056:	bfa8      	it	ge
 8003058:	6821      	ldrge	r1, [r4, #0]
 800305a:	60a5      	str	r5, [r4, #8]
 800305c:	bfa4      	itt	ge
 800305e:	f021 0104 	bicge.w	r1, r1, #4
 8003062:	6021      	strge	r1, [r4, #0]
 8003064:	b90e      	cbnz	r6, 800306a <_printf_i+0x11a>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d04d      	beq.n	8003106 <_printf_i+0x1b6>
 800306a:	4615      	mov	r5, r2
 800306c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003070:	fb03 6711 	mls	r7, r3, r1, r6
 8003074:	5dc7      	ldrb	r7, [r0, r7]
 8003076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800307a:	4637      	mov	r7, r6
 800307c:	42bb      	cmp	r3, r7
 800307e:	460e      	mov	r6, r1
 8003080:	d9f4      	bls.n	800306c <_printf_i+0x11c>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d10b      	bne.n	800309e <_printf_i+0x14e>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	07de      	lsls	r6, r3, #31
 800308a:	d508      	bpl.n	800309e <_printf_i+0x14e>
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	6861      	ldr	r1, [r4, #4]
 8003090:	4299      	cmp	r1, r3
 8003092:	bfde      	ittt	le
 8003094:	2330      	movle	r3, #48	; 0x30
 8003096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800309a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800309e:	1b52      	subs	r2, r2, r5
 80030a0:	6122      	str	r2, [r4, #16]
 80030a2:	464b      	mov	r3, r9
 80030a4:	4621      	mov	r1, r4
 80030a6:	4640      	mov	r0, r8
 80030a8:	f8cd a000 	str.w	sl, [sp]
 80030ac:	aa03      	add	r2, sp, #12
 80030ae:	f7ff fedf 	bl	8002e70 <_printf_common>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d14c      	bne.n	8003150 <_printf_i+0x200>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ba:	b004      	add	sp, #16
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	4834      	ldr	r0, [pc, #208]	; (8003194 <_printf_i+0x244>)
 80030c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030c6:	6829      	ldr	r1, [r5, #0]
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80030ce:	6029      	str	r1, [r5, #0]
 80030d0:	061d      	lsls	r5, r3, #24
 80030d2:	d514      	bpl.n	80030fe <_printf_i+0x1ae>
 80030d4:	07df      	lsls	r7, r3, #31
 80030d6:	bf44      	itt	mi
 80030d8:	f043 0320 	orrmi.w	r3, r3, #32
 80030dc:	6023      	strmi	r3, [r4, #0]
 80030de:	b91e      	cbnz	r6, 80030e8 <_printf_i+0x198>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	2310      	movs	r3, #16
 80030ea:	e7af      	b.n	800304c <_printf_i+0xfc>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	2378      	movs	r3, #120	; 0x78
 80030f6:	4828      	ldr	r0, [pc, #160]	; (8003198 <_printf_i+0x248>)
 80030f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030fc:	e7e3      	b.n	80030c6 <_printf_i+0x176>
 80030fe:	0659      	lsls	r1, r3, #25
 8003100:	bf48      	it	mi
 8003102:	b2b6      	uxthmi	r6, r6
 8003104:	e7e6      	b.n	80030d4 <_printf_i+0x184>
 8003106:	4615      	mov	r5, r2
 8003108:	e7bb      	b.n	8003082 <_printf_i+0x132>
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	6826      	ldr	r6, [r4, #0]
 800310e:	1d18      	adds	r0, r3, #4
 8003110:	6961      	ldr	r1, [r4, #20]
 8003112:	6028      	str	r0, [r5, #0]
 8003114:	0635      	lsls	r5, r6, #24
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	d501      	bpl.n	800311e <_printf_i+0x1ce>
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	e002      	b.n	8003124 <_printf_i+0x1d4>
 800311e:	0670      	lsls	r0, r6, #25
 8003120:	d5fb      	bpl.n	800311a <_printf_i+0x1ca>
 8003122:	8019      	strh	r1, [r3, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	4615      	mov	r5, r2
 8003128:	6123      	str	r3, [r4, #16]
 800312a:	e7ba      	b.n	80030a2 <_printf_i+0x152>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	2100      	movs	r1, #0
 8003130:	1d1a      	adds	r2, r3, #4
 8003132:	602a      	str	r2, [r5, #0]
 8003134:	681d      	ldr	r5, [r3, #0]
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	4628      	mov	r0, r5
 800313a:	f000 f8c9 	bl	80032d0 <memchr>
 800313e:	b108      	cbz	r0, 8003144 <_printf_i+0x1f4>
 8003140:	1b40      	subs	r0, r0, r5
 8003142:	6060      	str	r0, [r4, #4]
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	6123      	str	r3, [r4, #16]
 8003148:	2300      	movs	r3, #0
 800314a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800314e:	e7a8      	b.n	80030a2 <_printf_i+0x152>
 8003150:	462a      	mov	r2, r5
 8003152:	4649      	mov	r1, r9
 8003154:	4640      	mov	r0, r8
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	47d0      	blx	sl
 800315a:	3001      	adds	r0, #1
 800315c:	d0ab      	beq.n	80030b6 <_printf_i+0x166>
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	079b      	lsls	r3, r3, #30
 8003162:	d413      	bmi.n	800318c <_printf_i+0x23c>
 8003164:	68e0      	ldr	r0, [r4, #12]
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	4298      	cmp	r0, r3
 800316a:	bfb8      	it	lt
 800316c:	4618      	movlt	r0, r3
 800316e:	e7a4      	b.n	80030ba <_printf_i+0x16a>
 8003170:	2301      	movs	r3, #1
 8003172:	4632      	mov	r2, r6
 8003174:	4649      	mov	r1, r9
 8003176:	4640      	mov	r0, r8
 8003178:	47d0      	blx	sl
 800317a:	3001      	adds	r0, #1
 800317c:	d09b      	beq.n	80030b6 <_printf_i+0x166>
 800317e:	3501      	adds	r5, #1
 8003180:	68e3      	ldr	r3, [r4, #12]
 8003182:	9903      	ldr	r1, [sp, #12]
 8003184:	1a5b      	subs	r3, r3, r1
 8003186:	42ab      	cmp	r3, r5
 8003188:	dcf2      	bgt.n	8003170 <_printf_i+0x220>
 800318a:	e7eb      	b.n	8003164 <_printf_i+0x214>
 800318c:	2500      	movs	r5, #0
 800318e:	f104 0619 	add.w	r6, r4, #25
 8003192:	e7f5      	b.n	8003180 <_printf_i+0x230>
 8003194:	08003ac1 	.word	0x08003ac1
 8003198:	08003ad2 	.word	0x08003ad2

0800319c <__sread>:
 800319c:	b510      	push	{r4, lr}
 800319e:	460c      	mov	r4, r1
 80031a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031a4:	f000 f8a2 	bl	80032ec <_read_r>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	bfab      	itete	ge
 80031ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031ae:	89a3      	ldrhlt	r3, [r4, #12]
 80031b0:	181b      	addge	r3, r3, r0
 80031b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031b6:	bfac      	ite	ge
 80031b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80031ba:	81a3      	strhlt	r3, [r4, #12]
 80031bc:	bd10      	pop	{r4, pc}

080031be <__swrite>:
 80031be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c2:	461f      	mov	r7, r3
 80031c4:	898b      	ldrh	r3, [r1, #12]
 80031c6:	4605      	mov	r5, r0
 80031c8:	05db      	lsls	r3, r3, #23
 80031ca:	460c      	mov	r4, r1
 80031cc:	4616      	mov	r6, r2
 80031ce:	d505      	bpl.n	80031dc <__swrite+0x1e>
 80031d0:	2302      	movs	r3, #2
 80031d2:	2200      	movs	r2, #0
 80031d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d8:	f000 f868 	bl	80032ac <_lseek_r>
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	4632      	mov	r2, r6
 80031e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e4:	81a3      	strh	r3, [r4, #12]
 80031e6:	4628      	mov	r0, r5
 80031e8:	463b      	mov	r3, r7
 80031ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031f2:	f000 b817 	b.w	8003224 <_write_r>

080031f6 <__sseek>:
 80031f6:	b510      	push	{r4, lr}
 80031f8:	460c      	mov	r4, r1
 80031fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031fe:	f000 f855 	bl	80032ac <_lseek_r>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	bf15      	itete	ne
 8003208:	6560      	strne	r0, [r4, #84]	; 0x54
 800320a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800320e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003212:	81a3      	strheq	r3, [r4, #12]
 8003214:	bf18      	it	ne
 8003216:	81a3      	strhne	r3, [r4, #12]
 8003218:	bd10      	pop	{r4, pc}

0800321a <__sclose>:
 800321a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800321e:	f000 b813 	b.w	8003248 <_close_r>
	...

08003224 <_write_r>:
 8003224:	b538      	push	{r3, r4, r5, lr}
 8003226:	4604      	mov	r4, r0
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	2200      	movs	r2, #0
 800322e:	4d05      	ldr	r5, [pc, #20]	; (8003244 <_write_r+0x20>)
 8003230:	602a      	str	r2, [r5, #0]
 8003232:	461a      	mov	r2, r3
 8003234:	f7fc ffb8 	bl	80001a8 <_write>
 8003238:	1c43      	adds	r3, r0, #1
 800323a:	d102      	bne.n	8003242 <_write_r+0x1e>
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	b103      	cbz	r3, 8003242 <_write_r+0x1e>
 8003240:	6023      	str	r3, [r4, #0]
 8003242:	bd38      	pop	{r3, r4, r5, pc}
 8003244:	20000130 	.word	0x20000130

08003248 <_close_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	2300      	movs	r3, #0
 800324c:	4d05      	ldr	r5, [pc, #20]	; (8003264 <_close_r+0x1c>)
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	f7fd fb2d 	bl	80008b2 <_close>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_close_r+0x1a>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b103      	cbz	r3, 8003262 <_close_r+0x1a>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000130 	.word	0x20000130

08003268 <_fstat_r>:
 8003268:	b538      	push	{r3, r4, r5, lr}
 800326a:	2300      	movs	r3, #0
 800326c:	4d06      	ldr	r5, [pc, #24]	; (8003288 <_fstat_r+0x20>)
 800326e:	4604      	mov	r4, r0
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	602b      	str	r3, [r5, #0]
 8003276:	f7fd fb27 	bl	80008c8 <_fstat>
 800327a:	1c43      	adds	r3, r0, #1
 800327c:	d102      	bne.n	8003284 <_fstat_r+0x1c>
 800327e:	682b      	ldr	r3, [r5, #0]
 8003280:	b103      	cbz	r3, 8003284 <_fstat_r+0x1c>
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	bd38      	pop	{r3, r4, r5, pc}
 8003286:	bf00      	nop
 8003288:	20000130 	.word	0x20000130

0800328c <_isatty_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	2300      	movs	r3, #0
 8003290:	4d05      	ldr	r5, [pc, #20]	; (80032a8 <_isatty_r+0x1c>)
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	602b      	str	r3, [r5, #0]
 8003298:	f7fd fb25 	bl	80008e6 <_isatty>
 800329c:	1c43      	adds	r3, r0, #1
 800329e:	d102      	bne.n	80032a6 <_isatty_r+0x1a>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	b103      	cbz	r3, 80032a6 <_isatty_r+0x1a>
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	bd38      	pop	{r3, r4, r5, pc}
 80032a8:	20000130 	.word	0x20000130

080032ac <_lseek_r>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4604      	mov	r4, r0
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	2200      	movs	r2, #0
 80032b6:	4d05      	ldr	r5, [pc, #20]	; (80032cc <_lseek_r+0x20>)
 80032b8:	602a      	str	r2, [r5, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f7fd fb1d 	bl	80008fa <_lseek>
 80032c0:	1c43      	adds	r3, r0, #1
 80032c2:	d102      	bne.n	80032ca <_lseek_r+0x1e>
 80032c4:	682b      	ldr	r3, [r5, #0]
 80032c6:	b103      	cbz	r3, 80032ca <_lseek_r+0x1e>
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	bd38      	pop	{r3, r4, r5, pc}
 80032cc:	20000130 	.word	0x20000130

080032d0 <memchr>:
 80032d0:	4603      	mov	r3, r0
 80032d2:	b510      	push	{r4, lr}
 80032d4:	b2c9      	uxtb	r1, r1
 80032d6:	4402      	add	r2, r0
 80032d8:	4293      	cmp	r3, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	d101      	bne.n	80032e2 <memchr+0x12>
 80032de:	2000      	movs	r0, #0
 80032e0:	e003      	b.n	80032ea <memchr+0x1a>
 80032e2:	7804      	ldrb	r4, [r0, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	428c      	cmp	r4, r1
 80032e8:	d1f6      	bne.n	80032d8 <memchr+0x8>
 80032ea:	bd10      	pop	{r4, pc}

080032ec <_read_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4604      	mov	r4, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	2200      	movs	r2, #0
 80032f6:	4d05      	ldr	r5, [pc, #20]	; (800330c <_read_r+0x20>)
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fd fabc 	bl	8000878 <_read>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_read_r+0x1e>
 8003304:	682b      	ldr	r3, [r5, #0]
 8003306:	b103      	cbz	r3, 800330a <_read_r+0x1e>
 8003308:	6023      	str	r3, [r4, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	20000130 	.word	0x20000130

08003310 <_init>:
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	bf00      	nop
 8003314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003316:	bc08      	pop	{r3}
 8003318:	469e      	mov	lr, r3
 800331a:	4770      	bx	lr

0800331c <_fini>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr
