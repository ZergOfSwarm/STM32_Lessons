
My_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a4c  08000a54  00010a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a4c  08000a4c  00010a54  2**0
                  CONTENTS
  4 .ARM          00000000  08000a4c  08000a4c  00010a54  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a4c  08000a54  00010a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a4c  08000a4c  00010a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a50  08000a50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a54  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a54  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012e4  00000000  00000000  00010a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000370  00000000  00000000  00011d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  000120d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a8  00000000  00000000  000121a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ede  00000000  00000000  00012250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fc2  00000000  00000000  0001412e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008cc2  00000000  00000000  000150f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001ddb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002b0  00000000  00000000  0001de08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a34 	.word	0x08000a34

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a34 	.word	0x08000a34

080001e8 <delay>:
#define LOW 0
#define BTN_PRESSED LOW //не работало с HIGH


void delay(void)
{	//This will introduce ~200ms delay when systemclock is 16Mhz
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 500000/9; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f64d 1202 	movw	r2, #55554	; 0xd902
 8000200:	4293      	cmp	r3, r2
 8000202:	d9f7      	bls.n	80001f4 <delay+0xc>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <main>:
{	//This will introduce ~200ms delay when systemclock is 16Mhz
	for(uint32_t i=0; i < 500000; i++);
}

int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handel_t GpioLed, GPIOBtn;
	memset(&GpioLed,0,sizeof(GpioLed)); // Установит каждый элимент этой труктуры в ноль!
 800021a:	f107 030c 	add.w	r3, r7, #12
 800021e:	220c      	movs	r2, #12
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fbfe 	bl	8000a24 <memset>
	memset(&GPIOBtn,0,sizeof(GpioLed)); // Установит каждый элимент этой труктуры в ноль!
 8000228:	463b      	mov	r3, r7
 800022a:	220c      	movs	r2, #12
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f000 fbf8 	bl	8000a24 <memset>

/*------------------------------Настройки для LED -------------------------------------*/
	GpioLed.pGPIOx = GPIOA;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <main+0x84>)
 8000236:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;      // LED на PA-1
 8000238:	2301      	movs	r3, #1
 800023a:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;        // Output режим
 800023c:	2301      	movs	r3, #1
 800023e:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000240:	2300      	movs	r3, #0
 8000242:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;  // push-pull. Для 001led_toggle.c
 8000244:	2300      	movs	r3, #0
 8000246:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000248:	2301      	movs	r3, #1
 800024a:	74fb      	strb	r3, [r7, #19]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; // No pull-up no pull-down
 800024c:	2300      	movs	r3, #0
 800024e:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA,ENABLE);
 8000250:	2101      	movs	r1, #1
 8000252:	4811      	ldr	r0, [pc, #68]	; (8000298 <main+0x84>)
 8000254:	f000 f85c 	bl	8000310 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f941 	bl	80004e4 <GPIO_Init>
/*------------------------------Настройки для Button -------------------------------------*/
	GPIOBtn.pGPIOx = GPIOA;
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <main+0x84>)
 8000264:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;       // Кнопка на PA-0
 8000266:	2300      	movs	r3, #0
 8000268:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;       // Режим Interrupt Falling Adge
 800026a:	2304      	movs	r3, #4
 800026c:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026e:	2302      	movs	r3, #2
 8000270:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;    // В видео установил GPIO_PIN_PU!
 8000272:	2302      	movs	r3, #2
 8000274:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOA,ENABLE);
 8000276:	2101      	movs	r1, #1
 8000278:	4807      	ldr	r0, [pc, #28]	; (8000298 <main+0x84>)
 800027a:	f000 f849 	bl	8000310 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 800027e:	463b      	mov	r3, r7
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f92f 	bl	80004e4 <GPIO_Init>

	// IRQ configuration
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, GPIO_PIN_NO_15);
 8000286:	210f      	movs	r1, #15
 8000288:	2006      	movs	r0, #6
 800028a:	f000 fb5d 	bl	8000948 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	2006      	movs	r0, #6
 8000292:	f000 fad9 	bl	8000848 <GPIO_IRQInterruptConfig>



	while(1)
 8000296:	e7fe      	b.n	8000296 <main+0x82>
 8000298:	40020000 	.word	0x40020000

0800029c <EXTI0_IRQHandler>:
	}
	return 0;
}
void EXTI0_IRQHandler(void)  // ISR. Название функции взято из файла startup_stm32f407vgtx.s

{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	delay(); // 200ms wait till button de-bouncing gets ower!
 80002a0:	f7ff ffa2 	bl	80001e8 <delay>
	GPIO_IRQCHandling(GPIO_PIN_NO_0);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fb79 	bl	800099c <GPIO_IRQCHandling>
	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_1);
 80002aa:	2101      	movs	r1, #1
 80002ac:	4802      	ldr	r0, [pc, #8]	; (80002b8 <EXTI0_IRQHandler+0x1c>)
 80002ae:	f000 fab5 	bl	800081c <GPIO_ToggleOutputPin>
	//GPIO_WriteToOutputPin(GPIOA,GPIO_PIN_NO_1,GPIO_PIN_SET); // Отключает LED
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40020000 	.word	0x40020000

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 fb77 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff91 	bl	8000214 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000a54 	.word	0x08000a54
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <GPIO_PeriClockControl>:
 * @Note                        none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) // При помощи этой функции мы вкл/откл перефирию
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	460b      	mov	r3, r1
 800031a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 800031c:	78fb      	ldrb	r3, [r7, #3]
 800031e:	2b01      	cmp	r3, #1
 8000320:	f040 80c5 	bne.w	80004ae <GPIO_PeriClockControl+0x19e>
		if (pGPIOx == GPIOA) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a65      	ldr	r2, [pc, #404]	; (80004bc <GPIO_PeriClockControl+0x1ac>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_PeriClockControl+0x2a>
			GPIOA_PCLK_EN();
 800032c:	4b64      	ldr	r3, [pc, #400]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a63      	ldr	r2, [pc, #396]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
			} else if (pGPIOx == GPIOI) {
				GPIOI_PCLK_DI();
			}
		}
	}
}
 8000338:	e0b9      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOB) {
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a61      	ldr	r2, [pc, #388]	; (80004c4 <GPIO_PeriClockControl+0x1b4>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClockControl+0x40>
			GPIOB_PCLK_EN();
 8000342:	4b5f      	ldr	r3, [pc, #380]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a5e      	ldr	r2, [pc, #376]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034e:	e0ae      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOC) {
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a5d      	ldr	r2, [pc, #372]	; (80004c8 <GPIO_PeriClockControl+0x1b8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClockControl+0x56>
			GPIOC_PCLK_EN();
 8000358:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a58      	ldr	r2, [pc, #352]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e0a3      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOD) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a58      	ldr	r2, [pc, #352]	; (80004cc <GPIO_PeriClockControl+0x1bc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x6c>
			GPIOD_PCLK_EN();
 800036e:	4b54      	ldr	r3, [pc, #336]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a53      	ldr	r2, [pc, #332]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000374:	f043 0308 	orr.w	r3, r3, #8
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e098      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOE) {
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a54      	ldr	r2, [pc, #336]	; (80004d0 <GPIO_PeriClockControl+0x1c0>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x82>
			GPIOE_PCLK_EN();
 8000384:	4b4e      	ldr	r3, [pc, #312]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a4d      	ldr	r2, [pc, #308]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800038a:	f043 0310 	orr.w	r3, r3, #16
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e08d      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOF) {
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a4f      	ldr	r2, [pc, #316]	; (80004d4 <GPIO_PeriClockControl+0x1c4>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x98>
			GPIOF_PCLK_EN();
 800039a:	4b49      	ldr	r3, [pc, #292]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a48      	ldr	r2, [pc, #288]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003a0:	f043 0320 	orr.w	r3, r3, #32
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e082      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOG) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a4b      	ldr	r2, [pc, #300]	; (80004d8 <GPIO_PeriClockControl+0x1c8>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0xae>
			GPIOG_PCLK_EN();
 80003b0:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e077      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOH) {
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a46      	ldr	r2, [pc, #280]	; (80004dc <GPIO_PeriClockControl+0x1cc>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0xc4>
			GPIOH_PCLK_EN();
 80003c6:	4b3e      	ldr	r3, [pc, #248]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a3d      	ldr	r2, [pc, #244]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e06c      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
		} else if (pGPIOx == GPIOI) {
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a42      	ldr	r2, [pc, #264]	; (80004e0 <GPIO_PeriClockControl+0x1d0>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0xda>
			GPIOI_PCLK_EN();
 80003dc:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e061      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			if (pGPIOx == GPIOA) {
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a33      	ldr	r2, [pc, #204]	; (80004bc <GPIO_PeriClockControl+0x1ac>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0xf0>
				GPIOA_PCLK_DI();
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a32      	ldr	r2, [pc, #200]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80003f8:	f023 0301 	bic.w	r3, r3, #1
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e056      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOB) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a30      	ldr	r2, [pc, #192]	; (80004c4 <GPIO_PeriClockControl+0x1b4>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x106>
				GPIOB_PCLK_DI();
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a2c      	ldr	r2, [pc, #176]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800040e:	f023 0302 	bic.w	r3, r3, #2
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e04b      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOC) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <GPIO_PeriClockControl+0x1b8>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x11c>
				GPIOC_PCLK_DI();
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a27      	ldr	r2, [pc, #156]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000424:	f023 0304 	bic.w	r3, r3, #4
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e040      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOD) {
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a27      	ldr	r2, [pc, #156]	; (80004cc <GPIO_PeriClockControl+0x1bc>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x132>
				GPIOD_PCLK_DI();
 8000434:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800043a:	f023 0308 	bic.w	r3, r3, #8
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e035      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOE) {
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <GPIO_PeriClockControl+0x1c0>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0x148>
				GPIOE_PCLK_DI();
 800044a:	4b1d      	ldr	r3, [pc, #116]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000450:	f023 0310 	bic.w	r3, r3, #16
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e02a      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOF) {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a1e      	ldr	r2, [pc, #120]	; (80004d4 <GPIO_PeriClockControl+0x1c4>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x15e>
				GPIOF_PCLK_DI();
 8000460:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000466:	f023 0320 	bic.w	r3, r3, #32
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e01f      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOG) {
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <GPIO_PeriClockControl+0x1c8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x174>
				GPIOG_PCLK_DI();
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800047c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e014      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOH) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a15      	ldr	r2, [pc, #84]	; (80004dc <GPIO_PeriClockControl+0x1cc>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x18a>
				GPIOH_PCLK_DI();
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 8000492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e009      	b.n	80004ae <GPIO_PeriClockControl+0x19e>
			} else if (pGPIOx == GPIOI) {
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <GPIO_PeriClockControl+0x1d0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d105      	bne.n	80004ae <GPIO_PeriClockControl+0x19e>
				GPIOI_PCLK_DI();
 80004a2:	4b07      	ldr	r3, [pc, #28]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <GPIO_PeriClockControl+0x1b0>)
 80004a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800
 80004dc:	40021c00 	.word	0x40021c00
 80004e0:	40022000 	.word	0x40022000

080004e4 <GPIO_Init>:
 * @return
 *
 * @Note
 */
void GPIO_Init(GPIO_Handel_t *pGPIOHandle) // This is API for initialisation GPIO
{
 80004e4:	b480      	push	{r7}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;  //Временная переменная
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d81f      	bhi.n	8000538 <GPIO_Init+0x54>
	{
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing пина/ов перед установкой значения
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	4619      	mov	r1, r3
 8000516:	2303      	movs	r3, #3
 8000518:	408b      	lsls	r3, r1
 800051a:	43db      	mvns	r3, r3
 800051c:	4619      	mov	r1, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	400a      	ands	r2, r1
 8000524:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Setting значение temp в регистр! Где pGPIOHandle->pGPIOx - это Base address
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	e0ca      	b.n	80006ce <GPIO_Init+0x1ea>
	}else
	{
		// Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) // Если у нас режим прерывания Falling adge
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	795b      	ldrb	r3, [r3, #5]
 800053c:	2b04      	cmp	r3, #4
 800053e:	d117      	bne.n	8000570 <GPIO_Init+0x8c>
		{
			//1. configure the FTSR / Настравиваем Falling Triger Set Register (FTSR-Это регистр EXTI!)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b4a      	ldr	r3, [pc, #296]	; (800066c <GPIO_Init+0x188>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	4611      	mov	r1, r2
 8000550:	4a46      	ldr	r2, [pc, #280]	; (800066c <GPIO_Init+0x188>)
 8000552:	430b      	orrs	r3, r1
 8000554:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit. Всегда лучше проверить, что RTSR сброшен!
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000556:	4b45      	ldr	r3, [pc, #276]	; (800066c <GPIO_Init+0x188>)
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	7912      	ldrb	r2, [r2, #4]
 800055e:	4611      	mov	r1, r2
 8000560:	2201      	movs	r2, #1
 8000562:	408a      	lsls	r2, r1
 8000564:	43d2      	mvns	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a40      	ldr	r2, [pc, #256]	; (800066c <GPIO_Init+0x188>)
 800056a:	400b      	ands	r3, r1
 800056c:	6093      	str	r3, [r2, #8]
 800056e:	e035      	b.n	80005dc <GPIO_Init+0xf8>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) // Если у нас режим прерывания Rising adge
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	795b      	ldrb	r3, [r3, #5]
 8000574:	2b05      	cmp	r3, #5
 8000576:	d117      	bne.n	80005a8 <GPIO_Init+0xc4>
		{
			//1. configure the RTSR / Настравиваем Rising Triger Set Register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b3c      	ldr	r3, [pc, #240]	; (800066c <GPIO_Init+0x188>)
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	4611      	mov	r1, r2
 8000588:	4a38      	ldr	r2, [pc, #224]	; (800066c <GPIO_Init+0x188>)
 800058a:	430b      	orrs	r3, r1
 800058c:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit. Всегда лучше проверить, что FTSR сброшен!
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058e:	4b37      	ldr	r3, [pc, #220]	; (800066c <GPIO_Init+0x188>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	7912      	ldrb	r2, [r2, #4]
 8000596:	4611      	mov	r1, r2
 8000598:	2201      	movs	r2, #1
 800059a:	408a      	lsls	r2, r1
 800059c:	43d2      	mvns	r2, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a32      	ldr	r2, [pc, #200]	; (800066c <GPIO_Init+0x188>)
 80005a2:	400b      	ands	r3, r1
 80005a4:	60d3      	str	r3, [r2, #12]
 80005a6:	e019      	b.n	80005dc <GPIO_Init+0xf8>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) // Если у нас режим прерывания Falling adge и Rising adge
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	795b      	ldrb	r3, [r3, #5]
 80005ac:	2b06      	cmp	r3, #6
 80005ae:	d115      	bne.n	80005dc <GPIO_Init+0xf8>
		{
			//1. configure the FTSR & RTSR / Настравиваем оба регистра Rising Triger Set Register и Falling Triger Set Register!
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b0:	4b2e      	ldr	r3, [pc, #184]	; (800066c <GPIO_Init+0x188>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	687a      	ldr	r2, [r7, #4]
 80005b6:	7912      	ldrb	r2, [r2, #4]
 80005b8:	4611      	mov	r1, r2
 80005ba:	2201      	movs	r2, #1
 80005bc:	408a      	lsls	r2, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	4a2a      	ldr	r2, [pc, #168]	; (800066c <GPIO_Init+0x188>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <GPIO_Init+0x188>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7912      	ldrb	r2, [r2, #4]
 80005ce:	4611      	mov	r1, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	408a      	lsls	r2, r1
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a25      	ldr	r2, [pc, #148]	; (800066c <GPIO_Init+0x188>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	60d3      	str	r3, [r2, #12]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /4; // см Lesson 11 c 46:00 Master Microcontroller and Embedded Driver Development(MCU1)(1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	089b      	lsrs	r3, r3, #2
 80005e2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %4; // см Lesson 11 c 46:00 Master Microcontroller and Embedded Driver Development(MCU1)(1)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	f003 0303 	and.w	r3, r3, #3
 80005ec:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <GPIO_Init+0x18c>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d04d      	beq.n	8000694 <GPIO_Init+0x1b0>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	; (8000674 <GPIO_Init+0x190>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d032      	beq.n	8000668 <GPIO_Init+0x184>
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <GPIO_Init+0x194>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d02b      	beq.n	8000664 <GPIO_Init+0x180>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1a      	ldr	r2, [pc, #104]	; (800067c <GPIO_Init+0x198>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d024      	beq.n	8000660 <GPIO_Init+0x17c>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <GPIO_Init+0x19c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d01d      	beq.n	800065c <GPIO_Init+0x178>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a17      	ldr	r2, [pc, #92]	; (8000684 <GPIO_Init+0x1a0>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d016      	beq.n	8000658 <GPIO_Init+0x174>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <GPIO_Init+0x1a4>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d00f      	beq.n	8000654 <GPIO_Init+0x170>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <GPIO_Init+0x1a8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d008      	beq.n	8000650 <GPIO_Init+0x16c>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <GPIO_Init+0x1ac>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d101      	bne.n	800064c <GPIO_Init+0x168>
 8000648:	2308      	movs	r3, #8
 800064a:	e024      	b.n	8000696 <GPIO_Init+0x1b2>
 800064c:	2300      	movs	r3, #0
 800064e:	e022      	b.n	8000696 <GPIO_Init+0x1b2>
 8000650:	2307      	movs	r3, #7
 8000652:	e020      	b.n	8000696 <GPIO_Init+0x1b2>
 8000654:	2306      	movs	r3, #6
 8000656:	e01e      	b.n	8000696 <GPIO_Init+0x1b2>
 8000658:	2305      	movs	r3, #5
 800065a:	e01c      	b.n	8000696 <GPIO_Init+0x1b2>
 800065c:	2304      	movs	r3, #4
 800065e:	e01a      	b.n	8000696 <GPIO_Init+0x1b2>
 8000660:	2303      	movs	r3, #3
 8000662:	e018      	b.n	8000696 <GPIO_Init+0x1b2>
 8000664:	2302      	movs	r3, #2
 8000666:	e016      	b.n	8000696 <GPIO_Init+0x1b2>
 8000668:	2301      	movs	r3, #1
 800066a:	e014      	b.n	8000696 <GPIO_Init+0x1b2>
 800066c:	40013c00 	.word	0x40013c00
 8000670:	40020000 	.word	0x40020000
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00
 8000680:	40021000 	.word	0x40021000
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40022000 	.word	0x40022000
 8000694:	2300      	movs	r3, #0
 8000696:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000698:	4b5d      	ldr	r3, [pc, #372]	; (8000810 <GPIO_Init+0x32c>)
 800069a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800069c:	4a5c      	ldr	r2, [pc, #368]	; (8000810 <GPIO_Init+0x32c>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6353      	str	r3, [r2, #52]	; 0x34
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 80006a4:	7c7a      	ldrb	r2, [r7, #17]
 80006a6:	7cbb      	ldrb	r3, [r7, #18]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	fa02 f103 	lsl.w	r1, r2, r3
 80006ae:	4a59      	ldr	r2, [pc, #356]	; (8000814 <GPIO_Init+0x330>)
 80006b0:	7cfb      	ldrb	r3, [r7, #19]
 80006b2:	3302      	adds	r3, #2
 80006b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. enable the exti enterrupt delivery using IMR(Interrupt mask register)
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006b8:	4b57      	ldr	r3, [pc, #348]	; (8000818 <GPIO_Init+0x334>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	7912      	ldrb	r2, [r2, #4]
 80006c0:	4611      	mov	r1, r2
 80006c2:	2201      	movs	r2, #1
 80006c4:	408a      	lsls	r2, r1
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a53      	ldr	r2, [pc, #332]	; (8000818 <GPIO_Init+0x334>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6013      	str	r3, [r2, #0]
	}
	temp = 0; // И снова инициализируем переменную.
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	799b      	ldrb	r3, [r3, #6]
 80006d6:	461a      	mov	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	fa02 f303 	lsl.w	r3, r2, r3
 80006e2:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing пина/ов перед установкой значения
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	4619      	mov	r1, r3
 80006f0:	2303      	movs	r3, #3
 80006f2:	408b      	lsls	r3, r1
 80006f4:	43db      	mvns	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	400a      	ands	r2, r1
 80006fe:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	6899      	ldr	r1, [r3, #8]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	697a      	ldr	r2, [r7, #20]
 800070c:	430a      	orrs	r2, r1
 800070e:	609a      	str	r2, [r3, #8]
		temp = 0; // И снова инициализируем переменную.
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing пина/ов перед установкой значения
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68da      	ldr	r2, [r3, #12]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	4619      	mov	r1, r3
 8000732:	2303      	movs	r3, #3
 8000734:	408b      	lsls	r3, r1
 8000736:	43db      	mvns	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	400a      	ands	r2, r1
 8000740:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68d9      	ldr	r1, [r3, #12]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	430a      	orrs	r2, r1
 8000750:	60da      	str	r2, [r3, #12]
		temp = 0; // И снова инициализируем переменную.
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]

	//4. configure the the optype
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	7a1b      	ldrb	r3, [r3, #8]
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	fa02 f303 	lsl.w	r3, r2, r3
 8000764:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clearing пина/ов перед установкой значения
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	4619      	mov	r1, r3
 8000772:	2301      	movs	r3, #1
 8000774:	408b      	lsls	r3, r1
 8000776:	43db      	mvns	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	400a      	ands	r2, r1
 8000780:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6859      	ldr	r1, [r3, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	697a      	ldr	r2, [r7, #20]
 800078e:	430a      	orrs	r2, r1
 8000790:	605a      	str	r2, [r3, #4]
		temp = 0; // И снова инициализируем переменную.
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
	//5. configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d131      	bne.n	8000802 <GPIO_Init+0x31e>
		{
			uint8_t temp1, temp2;

			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	08db      	lsrs	r3, r3, #3
 80007a4:	743b      	strb	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	73fb      	strb	r3, [r7, #15]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));  // Clearing пина/ов перед установкой значения
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	7c3a      	ldrb	r2, [r7, #16]
 80007b6:	3208      	adds	r2, #8
 80007b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	220f      	movs	r2, #15
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	7c3a      	ldrb	r2, [r7, #16]
 80007d0:	4001      	ands	r1, r0
 80007d2:	3208      	adds	r2, #8
 80007d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7c3a      	ldrb	r2, [r7, #16]
 80007de:	3208      	adds	r2, #8
 80007e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7a5b      	ldrb	r3, [r3, #9]
 80007e8:	461a      	mov	r2, r3
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	4618      	mov	r0, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	7c3a      	ldrb	r2, [r7, #16]
 80007fa:	4301      	orrs	r1, r0
 80007fc:	3208      	adds	r2, #8
 80007fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}
 8000802:	bf00      	nop
 8000804:	371c      	adds	r7, #28
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40013800 	.word	0x40013800
 8000818:	40013c00 	.word	0x40013c00

0800081c <GPIO_ToggleOutputPin>:
 *
 * @Note                     При каждом вызове этой функции будет переключать пин!
 *
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^(1 << PinNumber); // или pGPIOx->ODR ^= (1 << PinNumber);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	78fa      	ldrb	r2, [r7, #3]
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	405a      	eors	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	615a      	str	r2, [r3, #20]
	}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <GPIO_IRQInterruptConfig>:
 * @Note
 *
 */
//IRQ Configuration and ISR handling см. lesson 11 Master Microcontroller and Embedded Driver Development(MCU1)(1)
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d133      	bne.n	80008c6 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b1f      	cmp	r3, #31
 8000862:	d80a      	bhi.n	800087a <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register (Interrupt Set-enable Registers 0)
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a32      	ldr	r2, [pc, #200]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6013      	str	r3, [r2, #0]
	    {
			//program ICER3 register (Interrupt Clear-enable Registers 0)
			*NVIC_ISER3 |= (1 << IRQNumber % 64);
	    }
	}
}
 8000878:	e059      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64) //32 to 63
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b1f      	cmp	r3, #31
 800087e:	d90f      	bls.n	80008a0 <GPIO_IRQInterruptConfig+0x58>
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3f      	cmp	r3, #63	; 0x3f
 8000884:	d80c      	bhi.n	80008a0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32)); // см c01:10 Lesson 11 Master Microcontroller and Embedded Driver Development(MCU1)(1)
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	f002 021f 	and.w	r2, r2, #31
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4a29      	ldr	r2, [pc, #164]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 800089a:	430b      	orrs	r3, r1
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e046      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 64 && IRQNumber < 96)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b40      	cmp	r3, #64	; 0x40
 80008a4:	d943      	bls.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b5f      	cmp	r3, #95	; 0x5f
 80008aa:	d840      	bhi.n	800092e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= (1 << (IRQNumber % 64));
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	4611      	mov	r1, r2
 80008be:	4a21      	ldr	r2, [pc, #132]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	e033      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	d80a      	bhi.n	80008e2 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ISER0 |= (1 << IRQNumber);
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	e025      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b1f      	cmp	r3, #31
 80008e6:	d90f      	bls.n	8000908 <GPIO_IRQInterruptConfig+0xc0>
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b3f      	cmp	r3, #63	; 0x3f
 80008ec:	d80c      	bhi.n	8000908 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	f002 021f 	and.w	r2, r2, #31
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4611      	mov	r1, r2
 8000900:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e012      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
	    }else if(IRQNumber >= 6 && IRQNumber < 96)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b05      	cmp	r3, #5
 800090c:	d90f      	bls.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b5f      	cmp	r3, #95	; 0x5f
 8000912:	d80c      	bhi.n	800092e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= (1 << IRQNumber % 64);
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a07      	ldr	r2, [pc, #28]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	e7ff      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000e104 	.word	0xe000e104
 8000944:	e000e10c 	.word	0xe000e10c

08000948 <GPIO_IRQPriorityConfig>:
 *
 * @Note
 *
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
	//1. First lets find out the IPR register
	uint8_t iprx = IRQNumber /4;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber %4;
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	3304      	adds	r3, #4
 800096a:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 800096c:	7bfb      	ldrb	r3, [r7, #15]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000974:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000978:	6819      	ldr	r1, [r3, #0]
 800097a:	7b7b      	ldrb	r3, [r7, #13]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	409a      	lsls	r2, r3
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000988:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <GPIO_IRQCHandling>:
 *
 * @Note
 *
 */
void GPIO_IRQCHandling(uint8_t PinNumber)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	// Clear EXTI PR register corresponding to the pin number
	if(EXTI->PR & (1<< PinNumber))
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <GPIO_IRQCHandling+0x3c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	2101      	movs	r1, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4013      	ands	r3, r2
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d009      	beq.n	80009cc <GPIO_IRQCHandling+0x30>
	{	//Clear
		EXTI->PR |= (1<< PinNumber);
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <GPIO_IRQCHandling+0x3c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <GPIO_IRQCHandling+0x3c>)
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6153      	str	r3, [r2, #20]
	}
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40013c00 	.word	0x40013c00

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4d0d      	ldr	r5, [pc, #52]	; (8000a14 <__libc_init_array+0x38>)
 80009e0:	4c0d      	ldr	r4, [pc, #52]	; (8000a18 <__libc_init_array+0x3c>)
 80009e2:	1b64      	subs	r4, r4, r5
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	2600      	movs	r6, #0
 80009e8:	42a6      	cmp	r6, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	4d0b      	ldr	r5, [pc, #44]	; (8000a1c <__libc_init_array+0x40>)
 80009ee:	4c0c      	ldr	r4, [pc, #48]	; (8000a20 <__libc_init_array+0x44>)
 80009f0:	f000 f820 	bl	8000a34 <_init>
 80009f4:	1b64      	subs	r4, r4, r5
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	2600      	movs	r6, #0
 80009fa:	42a6      	cmp	r6, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a04:	4798      	blx	r3
 8000a06:	3601      	adds	r6, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0e:	4798      	blx	r3
 8000a10:	3601      	adds	r6, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	08000a4c 	.word	0x08000a4c
 8000a18:	08000a4c 	.word	0x08000a4c
 8000a1c:	08000a4c 	.word	0x08000a4c
 8000a20:	08000a50 	.word	0x08000a50

08000a24 <memset>:
 8000a24:	4402      	add	r2, r0
 8000a26:	4603      	mov	r3, r0
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d100      	bne.n	8000a2e <memset+0xa>
 8000a2c:	4770      	bx	lr
 8000a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a32:	e7f9      	b.n	8000a28 <memset+0x4>

08000a34 <_init>:
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a36:	bf00      	nop
 8000a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a3a:	bc08      	pop	{r3}
 8000a3c:	469e      	mov	lr, r3
 8000a3e:	4770      	bx	lr

08000a40 <_fini>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr
