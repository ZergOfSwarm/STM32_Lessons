
Modbus_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008408  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086c4  080086c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080086c4  080086c4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086c4  080086c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080086cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049ec  20000010  080086dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049fc  080086dc  000249fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfc1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dba  00000000  00000000  0003cffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001520  00000000  00000000  00040db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  000422d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4ac  00000000  00000000  00043680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e39  00000000  00000000  0005db2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009504f  00000000  00000000  00076965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b9b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  0010ba08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08008500 	.word	0x08008500

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08008500 	.word	0x08008500

08000150 <RingAdd>:


/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
 8000158:	460b      	mov	r3, r1
 800015a:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000162:	4619      	mov	r1, r3
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	78fa      	ldrb	r2, [r7, #3]
 8000168:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000170:	3301      	adds	r3, #1
 8000172:	425a      	negs	r2, r3
 8000174:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000178:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800017c:	bf58      	it	pl
 800017e:	4253      	negpl	r3, r2
 8000180:	b2da      	uxtb	r2, r3
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800018e:	2b80      	cmp	r3, #128	; 0x80
 8000190:	d113      	bne.n	80001ba <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	2201      	movs	r2, #1
 8000196:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80001a0:	3301      	adds	r3, #1
 80001a2:	425a      	negs	r2, r3
 80001a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80001ac:	bf58      	it	pl
 80001ae:	4253      	negpl	r3, r2
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 80001b8:	e00b      	b.n	80001d2 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2200      	movs	r2, #0
 80001be:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80001c8:	3301      	adds	r3, #1
 80001ca:	b2da      	uxtb	r2, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80001d2:	bf00      	nop
 80001d4:	370c      	adds	r7, #12
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr

080001dc <RingGetAllBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80001ec:	461a      	mov	r2, r3
 80001ee:	6839      	ldr	r1, [r7, #0]
 80001f0:	6878      	ldr	r0, [r7, #4]
 80001f2:	f000 f805 	bl	8000200 <RingGetNBytes>
 80001f6:	4603      	mov	r3, r0
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	4613      	mov	r3, r2
 800020c:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <RingGetNBytes+0x1e>
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <RingGetNBytes+0x22>
 800021e:	2300      	movs	r3, #0
 8000220:	e03e      	b.n	80002a0 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	2b80      	cmp	r3, #128	; 0x80
 8000226:	d901      	bls.n	800022c <RingGetNBytes+0x2c>
 8000228:	2300      	movs	r3, #0
 800022a:	e039      	b.n	80002a0 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800022c:	2300      	movs	r3, #0
 800022e:	75fb      	strb	r3, [r7, #23]
 8000230:	e01b      	b.n	800026a <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000238:	4619      	mov	r1, r3
 800023a:	7dfb      	ldrb	r3, [r7, #23]
 800023c:	68ba      	ldr	r2, [r7, #8]
 800023e:	4413      	add	r3, r2
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	5c52      	ldrb	r2, [r2, r1]
 8000244:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800024c:	3301      	adds	r3, #1
 800024e:	425a      	negs	r2, r3
 8000250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000254:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000258:	bf58      	it	pl
 800025a:	4253      	negpl	r3, r2
 800025c:	b2da      	uxtb	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8000264:	7dfb      	ldrb	r3, [r7, #23]
 8000266:	3301      	adds	r3, #1
 8000268:	75fb      	strb	r3, [r7, #23]
 800026a:	7dfa      	ldrb	r2, [r7, #23]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	429a      	cmp	r2, r3
 8000270:	d205      	bcs.n	800027e <RingGetNBytes+0x7e>
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000278:	7dfa      	ldrb	r2, [r7, #23]
 800027a:	429a      	cmp	r2, r3
 800027c:	d3d9      	bcc.n	8000232 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8000284:	7dfb      	ldrb	r3, [r7, #23]
 8000286:	1ad3      	subs	r3, r2, r3
 8000288:	b2da      	uxtb	r2, r3
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2200      	movs	r2, #0
 8000294:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f000 f805 	bl	80002a8 <RingClear>

	return uCounter;
 800029e:	7dfb      	ldrb	r3, [r7, #23]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3718      	adds	r7, #24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2200      	movs	r2, #0
 80002c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2200      	movs	r2, #0
 80002cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
	...

080002dc <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af02      	add	r7, sp, #8
 80002e2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80002e4:	4b42      	ldr	r3, [pc, #264]	; (80003f0 <ModbusInit+0x114>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d87d      	bhi.n	80003e8 <ModbusInit+0x10c>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	33bc      	adds	r3, #188	; 0xbc
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ffd9 	bl	80002a8 <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d109      	bne.n	8000312 <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80002fe:	4a3d      	ldr	r2, [pc, #244]	; (80003f4 <ModbusInit+0x118>)
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	483d      	ldr	r0, [pc, #244]	; (80003f8 <ModbusInit+0x11c>)
 8000304:	f004 fdba 	bl	8004e7c <osThreadNew>
 8000308:	4602      	mov	r2, r0
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000310:	e033      	b.n	800037a <ModbusInit+0x9e>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b04      	cmp	r3, #4
 8000318:	d12e      	bne.n	8000378 <ModbusInit+0x9c>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 800031a:	4a38      	ldr	r2, [pc, #224]	; (80003fc <ModbusInit+0x120>)
 800031c:	6879      	ldr	r1, [r7, #4]
 800031e:	4838      	ldr	r0, [pc, #224]	; (8000400 <ModbusInit+0x124>)
 8000320:	f004 fdac 	bl	8004e7c <osThreadNew>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000332:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800033a:	4a32      	ldr	r2, [pc, #200]	; (8000404 <ModbusInit+0x128>)
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	2200      	movs	r2, #0
 8000340:	4831      	ldr	r0, [pc, #196]	; (8000408 <ModbusInit+0x12c>)
 8000342:	f007 f9bb 	bl	80076bc <xTimerCreate>
 8000346:	4602      	mov	r2, r0
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000354:	2b00      	cmp	r3, #0
 8000356:	d100      	bne.n	800035a <ModbusInit+0x7e>
		  {
			  while(1); //error creating timer, check heap and stack size
 8000358:	e7fe      	b.n	8000358 <ModbusInit+0x7c>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 800035a:	4a2c      	ldr	r2, [pc, #176]	; (800040c <ModbusInit+0x130>)
 800035c:	2110      	movs	r1, #16
 800035e:	2002      	movs	r0, #2
 8000360:	f004 ff28 	bl	80051b4 <osMessageQueueNew>
 8000364:	4602      	mov	r2, r0
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

		  if(modH->QueueTelegramHandle == NULL)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000372:	2b00      	cmp	r3, #0
 8000374:	d101      	bne.n	800037a <ModbusInit+0x9e>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8000376:	e7fe      	b.n	8000376 <ModbusInit+0x9a>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000378:	e7fe      	b.n	8000378 <ModbusInit+0x9c>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000380:	2b00      	cmp	r3, #0
 8000382:	d100      	bne.n	8000386 <ModbusInit+0xaa>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8000384:	e7fe      	b.n	8000384 <ModbusInit+0xa8>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <ModbusInit+0x134>)
 800038e:	9200      	str	r2, [sp, #0]
 8000390:	2200      	movs	r2, #0
 8000392:	2105      	movs	r1, #5
 8000394:	481f      	ldr	r0, [pc, #124]	; (8000414 <ModbusInit+0x138>)
 8000396:	f007 f991 	bl	80076bc <xTimerCreate>
 800039a:	4602      	mov	r2, r0
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d100      	bne.n	80003ae <ModbusInit+0xd2>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80003ac:	e7fe      	b.n	80003ac <ModbusInit+0xd0>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 80003ae:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <ModbusInit+0x13c>)
 80003b0:	2101      	movs	r1, #1
 80003b2:	2001      	movs	r0, #1
 80003b4:	f004 fe62 	bl	800507c <osSemaphoreNew>
 80003b8:	4602      	mov	r2, r0
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	  if(modH->ModBusSphrHandle == NULL)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d100      	bne.n	80003cc <ModbusInit+0xf0>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 80003ca:	e7fe      	b.n	80003ca <ModbusInit+0xee>
	  }

	  mHandlers[numberHandlers] = modH;
 80003cc:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <ModbusInit+0x114>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <ModbusInit+0x140>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <ModbusInit+0x114>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b03      	ldr	r3, [pc, #12]	; (80003f0 <ModbusInit+0x114>)
 80003e4:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80003e6:	e000      	b.n	80003ea <ModbusInit+0x10e>
	  while(1); //error no more Modbus handlers supported
 80003e8:	e7fe      	b.n	80003e8 <ModbusInit+0x10c>
}
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	2000002c 	.word	0x2000002c
 80003f4:	080085e0 	.word	0x080085e0
 80003f8:	08000639 	.word	0x08000639
 80003fc:	08008604 	.word	0x08008604
 8000400:	08000af1 	.word	0x08000af1
 8000404:	080005dd 	.word	0x080005dd
 8000408:	0800855c 	.word	0x0800855c
 800040c:	080085c8 	.word	0x080085c8
 8000410:	08000559 	.word	0x08000559
 8000414:	0800856c 	.word	0x0800856c
 8000418:	08008628 	.word	0x08008628
 800041c:	2000431c 	.word	0x2000431c

08000420 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800042e:	2b01      	cmp	r3, #1
 8000430:	d00f      	beq.n	8000452 <ModbusStart+0x32>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000438:	2b03      	cmp	r3, #3
 800043a:	d00a      	beq.n	8000452 <ModbusStart+0x32>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000442:	2b02      	cmp	r3, #2
 8000444:	d005      	beq.n	8000452 <ModbusStart+0x32>
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800044c:	2b04      	cmp	r3, #4
 800044e:	d000      	beq.n	8000452 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8000450:	e7fe      	b.n	8000450 <ModbusStart+0x30>
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000458:	2b01      	cmp	r3, #1
 800045a:	d004      	beq.n	8000466 <ModbusStart+0x46>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000462:	2b04      	cmp	r3, #4
 8000464:	d15a      	bne.n	800051c <ModbusStart+0xfc>
	{

	      if (modH->EN_Port != NULL )
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	68db      	ldr	r3, [r3, #12]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d007      	beq.n	800047e <ModbusStart+0x5e>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68d8      	ldr	r0, [r3, #12]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	8a1b      	ldrh	r3, [r3, #16]
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	f002 fdd3 	bl	8003024 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d105      	bne.n	8000492 <ModbusStart+0x72>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800048c:	2b00      	cmp	r3, #0
 800048e:	d100      	bne.n	8000492 <ModbusStart+0x72>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8000490:	e7fe      	b.n	8000490 <ModbusStart+0x70>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000492:	bf00      	nop
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4618      	mov	r0, r3
 800049a:	f004 f8dc 	bl	8004656 <HAL_UART_GetState>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b20      	cmp	r3, #32
 80004a2:	d1f7      	bne.n	8000494 <ModbusStart+0x74>
          {

          }

#if ENABLE_USART_DMA ==1
          if( modH->xTypeHW == USART_HW_DMA )
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d118      	bne.n	80004e0 <ModbusStart+0xc0>
          {


        	  if(HAL_UARTEx_ReceiveToIdle_DMA(modH->port, modH->xBufferRX.uxBuffer, MAX_BUFFER ) != HAL_OK)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6858      	ldr	r0, [r3, #4]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	33bc      	adds	r3, #188	; 0xbc
 80004b6:	2280      	movs	r2, #128	; 0x80
 80004b8:	4619      	mov	r1, r3
 80004ba:	f003 fde8 	bl	800408e <HAL_UARTEx_ReceiveToIdle_DMA>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d000      	beq.n	80004c6 <ModbusStart+0xa6>
        	   {
        	         while(1)
 80004c4:	e7fe      	b.n	80004c4 <ModbusStart+0xa4>
        	         {
        	                    	  //error in your initialization code
        	         }
        	   }
        	  __HAL_DMA_DISABLE_IT(modH->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f022 0204 	bic.w	r2, r2, #4
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	e00b      	b.n	80004f8 <ModbusStart+0xd8>

          }
          else{

        	  // Receive data from serial port for Modbus using interrupt
        	  if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6858      	ldr	r0, [r3, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	33a6      	adds	r3, #166	; 0xa6
 80004e8:	2201      	movs	r2, #1
 80004ea:	4619      	mov	r1, r3
 80004ec:	f003 fcd7 	bl	8003e9e <HAL_UART_Receive_IT>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d000      	beq.n	80004f8 <ModbusStart+0xd8>
        	  {
        	           while(1)
 80004f6:	e7fe      	b.n	80004f6 <ModbusStart+0xd6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	7a1b      	ldrb	r3, [r3, #8]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d004      	beq.n	800050a <ModbusStart+0xea>
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b04      	cmp	r3, #4
 8000506:	d100      	bne.n	800050a <ModbusStart+0xea>
          {
        	  while(1)
 8000508:	e7fe      	b.n	8000508 <ModbusStart+0xe8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	7a1b      	ldrb	r3, [r3, #8]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d104      	bne.n	800051c <ModbusStart+0xfc>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b03      	cmp	r3, #3
 8000518:	d100      	bne.n	800051c <ModbusStart+0xfc>
          {
             	  while(1)
 800051a:	e7fe      	b.n	800051a <ModbusStart+0xfa>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2200      	movs	r2, #0
 8000520:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af02      	add	r7, sp, #8
 800055e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e02a      	b.n	80005bc <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8000566:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <vTimerCallbackT35+0x7c>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	429a      	cmp	r2, r3
 8000576:	d11e      	bne.n	80005b6 <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 8000578:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <vTimerCallbackT35+0x7c>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b04      	cmp	r3, #4
 8000584:	d10c      	bne.n	80005a0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <vTimerCallbackT35+0x7c>)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800058e:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000592:	2300      	movs	r3, #0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2200      	movs	r2, #0
 800059a:	2103      	movs	r1, #3
 800059c:	f007 f8e2 	bl	8007764 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80005a0:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <vTimerCallbackT35+0x7c>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 80005ac:	2300      	movs	r3, #0
 80005ae:	2203      	movs	r2, #3
 80005b0:	2100      	movs	r1, #0
 80005b2:	f006 fe79 	bl	80072a8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	3301      	adds	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <vTimerCallbackT35+0x80>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4293      	cmp	r3, r2
 80005c6:	dbce      	blt.n	8000566 <vTimerCallbackT35+0xe>
		}

	}
}
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000431c 	.word	0x2000431c
 80005d8:	2000002c 	.word	0x2000002c

080005dc <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	e017      	b.n	800061a <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <vTimerCallbackTimeout+0x54>)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d10b      	bne.n	8000614 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80005fc:	4a0c      	ldr	r2, [pc, #48]	; (8000630 <vTimerCallbackTimeout+0x54>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000604:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8000608:	2300      	movs	r3, #0
 800060a:	2203      	movs	r2, #3
 800060c:	f06f 0107 	mvn.w	r1, #7
 8000610:	f006 fe4a 	bl	80072a8 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <vTimerCallbackTimeout+0x58>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4293      	cmp	r3, r2
 8000624:	dbe1      	blt.n	80005ea <vTimerCallbackTimeout+0xe>
		}

	}

}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000431c 	.word	0x2000431c
 8000634:	2000002c 	.word	0x2000002c

08000638 <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000650:	2b01      	cmp	r3, #1
 8000652:	d004      	beq.n	800065e <StartTaskModbusSlave+0x26>
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800065a:	2b04      	cmp	r3, #4
 800065c:	d117      	bne.n	800068e <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 800065e:	f04f 31ff 	mov.w	r1, #4294967295
 8000662:	2001      	movs	r0, #1
 8000664:	f006 fdd8 	bl	8007218 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 8000668:	68f8      	ldr	r0, [r7, #12]
 800066a:	f000 fc0f 	bl	8000e8c <getRxBuffer>
 800066e:	4603      	mov	r3, r0
 8000670:	f113 0f03 	cmn.w	r3, #3
 8000674:	d10b      	bne.n	800068e <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	22fd      	movs	r2, #253	; 0xfd
 800067a:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000682:	3301      	adds	r3, #1
 8000684:	b29a      	uxth	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 800068c:	e0a1      	b.n	80007d2 <StartTaskModbusSlave+0x19a>
	  }

   }

   if (modH->u8BufferSize < 7)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000694:	2b06      	cmp	r3, #6
 8000696:	d80b      	bhi.n	80006b0 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	22fa      	movs	r2, #250	; 0xfa
 800069c:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80006a4:	3301      	adds	r3, #1
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 80006ae:	e090      	b.n	80007d2 <StartTaskModbusSlave+0x19a>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	7cda      	ldrb	r2, [r3, #19]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	7a1b      	ldrb	r3, [r3, #8]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	f040 8089 	bne.w	80007d0 <StartTaskModbusSlave+0x198>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f000 fc2e 	bl	8000f20 <validateRequest>
 80006c4:	4603      	mov	r3, r0
 80006c6:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00c      	beq.n	80006e8 <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	68f9      	ldr	r1, [r7, #12]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fdc6 	bl	8001264 <buildException>
			sendTxBuffer(modH);
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f000 fde1 	bl	80012a0 <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 80006de:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 80006e6:	e074      	b.n	80007d2 <StartTaskModbusSlave+0x19a>
	 }

	 modH->i8lastError = 0;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fae5 	bl	8005cc8 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	7d1b      	ldrb	r3, [r3, #20]
 8000702:	3b01      	subs	r3, #1
 8000704:	2b0f      	cmp	r3, #15
 8000706:	d859      	bhi.n	80007bc <StartTaskModbusSlave+0x184>
 8000708:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <StartTaskModbusSlave+0xd8>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000751 	.word	0x08000751
 8000714:	08000751 	.word	0x08000751
 8000718:	08000763 	.word	0x08000763
 800071c:	08000763 	.word	0x08000763
 8000720:	08000775 	.word	0x08000775
 8000724:	08000787 	.word	0x08000787
 8000728:	080007bd 	.word	0x080007bd
 800072c:	080007bd 	.word	0x080007bd
 8000730:	080007bd 	.word	0x080007bd
 8000734:	080007bd 	.word	0x080007bd
 8000738:	080007bd 	.word	0x080007bd
 800073c:	080007bd 	.word	0x080007bd
 8000740:	080007bd 	.word	0x080007bd
 8000744:	080007bd 	.word	0x080007bd
 8000748:	08000799 	.word	0x08000799
 800074c:	080007ab 	.word	0x080007ab
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 fe47 	bl	80013e4 <process_FC1>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000760:	e02d      	b.n	80007be <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f000 fef3 	bl	800154e <process_FC3>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000772:	e024      	b.n	80007be <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 ff55 	bl	8001624 <process_FC5>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000784:	e01b      	b.n	80007be <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 ffa5 	bl	80016d6 <process_FC6>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 8000796:	e012      	b.n	80007be <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f000 ffce 	bl	800173a <process_FC15>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80007a8:	e009      	b.n	80007be <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	f001 f853 	bl	8001856 <process_FC16>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				break;
 80007ba:	e000      	b.n	80007be <StartTaskModbusSlave+0x186>
			default:
				break;
 80007bc:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	f005 f807 	bl	80057dc <xQueueGenericSend>

	 continue;
 80007ce:	e000      	b.n	80007d2 <StartTaskModbusSlave+0x19a>
    	continue; // continue this is not for us
 80007d0:	bf00      	nop
  {
 80007d2:	e737      	b.n	8000644 <StartTaskModbusSlave+0xc>

080007d4 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 80007d4:	b084      	sub	sp, #16
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	f107 0014 	add.w	r0, r7, #20
 80007e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d10d      	bne.n	800080a <ModbusQuery+0x36>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 80007ee:	f004 fbf1 	bl	8004fd4 <osThreadGetId>
 80007f2:	4603      	mov	r3, r0
 80007f4:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80007fc:	f107 0114 	add.w	r1, r7, #20
 8000800:	2300      	movs	r3, #0
 8000802:	2200      	movs	r2, #0
 8000804:	f004 ffea 	bl	80057dc <xQueueGenericSend>
	}
	else{
		while(1);// error a slave cannot send queries as a master
	}
}
 8000808:	e000      	b.n	800080c <ModbusQuery+0x38>
		while(1);// error a slave cannot send queries as a master
 800080a:	e7fe      	b.n	800080a <ModbusQuery+0x36>
}
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000814:	b004      	add	sp, #16
 8000816:	4770      	bx	lr

08000818 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8000818:	b084      	sub	sp, #16
 800081a:	b580      	push	{r7, lr}
 800081c:	b084      	sub	sp, #16
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	f107 001c 	add.w	r0, r7, #28
 8000826:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fa45 	bl	8005cc8 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	7a1b      	ldrb	r3, [r3, #8]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SendQuery+0x32>
 8000846:	23ff      	movs	r3, #255	; 0xff
 8000848:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SendQuery+0x40>
 8000854:	23fe      	movs	r3, #254	; 0xfe
 8000856:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8000858:	7f3b      	ldrb	r3, [r7, #28]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <SendQuery+0x4c>
 800085e:	7f3b      	ldrb	r3, [r7, #28]
 8000860:	2bf7      	cmp	r3, #247	; 0xf7
 8000862:	d901      	bls.n	8000868 <SendQuery+0x50>
 8000864:	23f7      	movs	r3, #247	; 0xf7
 8000866:	73bb      	strb	r3, [r7, #14]


	if(error)
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00e      	beq.n	800088c <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800086e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800087c:	2300      	movs	r3, #0
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	f004 ffab 	bl	80057dc <xQueueGenericSend>
		 return error;
 8000886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800088a:	e129      	b.n	8000ae0 <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 800088c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8000894:	7f3a      	ldrb	r2, [r7, #28]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 800089a:	7f7a      	ldrb	r2, [r7, #29]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80008a0:	8bfb      	ldrh	r3, [r7, #30]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80008ac:	8bfb      	ldrh	r3, [r7, #30]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80008b4:	7f7b      	ldrb	r3, [r7, #29]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	f200 80fe 	bhi.w	8000aba <SendQuery+0x2a2>
 80008be:	a201      	add	r2, pc, #4	; (adr r2, 80008c4 <SendQuery+0xac>)
 80008c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c4:	08000905 	.word	0x08000905
 80008c8:	08000905 	.word	0x08000905
 80008cc:	08000905 	.word	0x08000905
 80008d0:	08000905 	.word	0x08000905
 80008d4:	08000923 	.word	0x08000923
 80008d8:	08000945 	.word	0x08000945
 80008dc:	08000abb 	.word	0x08000abb
 80008e0:	08000abb 	.word	0x08000abb
 80008e4:	08000abb 	.word	0x08000abb
 80008e8:	08000abb 	.word	0x08000abb
 80008ec:	08000abb 	.word	0x08000abb
 80008f0:	08000abb 	.word	0x08000abb
 80008f4:	08000abb 	.word	0x08000abb
 80008f8:	08000abb 	.word	0x08000abb
 80008fc:	08000967 	.word	0x08000967
 8000900:	08000a25 	.word	0x08000a25
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000904:	8c3b      	ldrh	r3, [r7, #32]
 8000906:	0a1b      	lsrs	r3, r3, #8
 8000908:	b29b      	uxth	r3, r3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000910:	8c3b      	ldrh	r3, [r7, #32]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2206      	movs	r2, #6
 800091c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000920:	e0cb      	b.n	8000aba <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 8000922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SendQuery+0x116>
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	e000      	b.n	8000930 <SendQuery+0x118>
 800092e:	2200      	movs	r2, #0
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2206      	movs	r2, #6
 800093e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000942:	e0ba      	b.n	8000aba <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2da      	uxtb	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 8000952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2206      	movs	r2, #6
 8000960:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8000964:	e0a9      	b.n	8000aba <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000966:	8c3b      	ldrh	r3, [r7, #32]
 8000968:	091b      	lsrs	r3, r3, #4
 800096a:	b29b      	uxth	r3, r3
 800096c:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800096e:	7a7b      	ldrb	r3, [r7, #9]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000974:	8c3b      	ldrh	r3, [r7, #32]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	b29b      	uxth	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <SendQuery+0x174>
	    {
	        u8bytesno++;
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3301      	adds	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8000986:	7a7b      	ldrb	r3, [r7, #9]
 8000988:	3301      	adds	r3, #1
 800098a:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800098c:	8c3b      	ldrh	r3, [r7, #32]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000998:	8c3b      	ldrh	r3, [r7, #32]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7bfa      	ldrb	r2, [r7, #15]
 80009a4:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2207      	movs	r2, #7
 80009aa:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	81bb      	strh	r3, [r7, #12]
 80009b2:	e031      	b.n	8000a18 <SendQuery+0x200>
	    {
	        if(i%2)
 80009b4:	89bb      	ldrh	r3, [r7, #12]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00f      	beq.n	80009e0 <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 80009c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c2:	89bb      	ldrh	r3, [r7, #12]
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	881a      	ldrh	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80009d4:	4619      	mov	r1, r3
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	440b      	add	r3, r1
 80009dc:	74da      	strb	r2, [r3, #19]
 80009de:	e010      	b.n	8000a02 <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80009e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e2:	89bb      	ldrh	r3, [r7, #12]
 80009e4:	085b      	lsrs	r3, r3, #1
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	4413      	add	r3, r2
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80009f8:	4619      	mov	r1, r3
 80009fa:	b2d2      	uxtb	r2, r2
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	440b      	add	r3, r1
 8000a00:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a08:	3301      	adds	r3, #1
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000a12:	89bb      	ldrh	r3, [r7, #12]
 8000a14:	3301      	adds	r3, #1
 8000a16:	81bb      	strh	r3, [r7, #12]
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	89ba      	ldrh	r2, [r7, #12]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d3c8      	bcc.n	80009b4 <SendQuery+0x19c>
	    }
	    break;
 8000a22:	e04a      	b.n	8000aba <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000a24:	8c3b      	ldrh	r3, [r7, #32]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000a30:	8c3b      	ldrh	r3, [r7, #32]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000a38:	8c3b      	ldrh	r3, [r7, #32]
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2207      	movs	r2, #7
 8000a48:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	817b      	strh	r3, [r7, #10]
 8000a50:	e02e      	b.n	8000ab0 <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 8000a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a54:	897b      	ldrh	r3, [r7, #10]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a66:	4619      	mov	r1, r3
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	440b      	add	r3, r1
 8000a6e:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a76:	3301      	adds	r3, #1
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 8000a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a82:	897b      	ldrh	r3, [r7, #10]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	4413      	add	r3, r2
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000a90:	4619      	mov	r1, r3
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	440b      	add	r3, r1
 8000a98:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000aaa:	897b      	ldrh	r3, [r7, #10]
 8000aac:	3301      	adds	r3, #1
 8000aae:	817b      	strh	r3, [r7, #10]
 8000ab0:	8c3b      	ldrh	r3, [r7, #32]
 8000ab2:	897a      	ldrh	r2, [r7, #10]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d3cc      	bcc.n	8000a52 <SendQuery+0x23a>
	    }
	    break;
 8000ab8:	bf00      	nop
	}


	sendTxBuffer(modH);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fbf0 	bl	80012a0 <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	f004 fe86 	bl	80057dc <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	749a      	strb	r2, [r3, #18]
	return 0;
 8000ade:	2300      	movs	r3, #0


}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <StartTaskModbusMaster>:
}

#endif

void StartTaskModbusMaster(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000b02:	f107 010c 	add.w	r1, r7, #12
 8000b06:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fffc 	bl	8005b08 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b1c:	f7ff fe7c 	bl	8000818 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	2001      	movs	r0, #1
 8000b26:	f006 fb77 	bl	8007218 <ulTaskNotifyTake>
 8000b2a:	6238      	str	r0, [r7, #32]

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	2200      	movs	r2, #0
 8000b30:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d018      	beq.n	8000b6a <StartTaskModbusMaster+0x7a>
      {
    	  modH->i8state = COM_IDLE;
 8000b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8000b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b42:	22f8      	movs	r2, #248	; 0xf8
 8000b44:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b48:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000b56:	69b8      	ldr	r0, [r7, #24]
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2300      	movs	r3, #0
 8000b62:	2203      	movs	r2, #3
 8000b64:	f006 fba0 	bl	80072a8 <xTaskGenericNotify>
    	  continue;
 8000b68:	e09a      	b.n	8000ca0 <StartTaskModbusMaster+0x1b0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8000b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b6c:	f000 f98e 	bl	8000e8c <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d818      	bhi.n	8000bac <StartTaskModbusMaster+0xbc>

		  modH->i8state = COM_IDLE;
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8000b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b84:	22fa      	movs	r2, #250	; 0xfa
 8000b86:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000b98:	69b8      	ldr	r0, [r7, #24]
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	f006 fb7f 	bl	80072a8 <xTaskGenericNotify>
		  continue;
 8000baa:	e079      	b.n	8000ca0 <StartTaskModbusMaster+0x1b0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2103      	movs	r1, #3
 8000bbc:	f006 fdd2 	bl	8007764 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8000bc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bc2:	f000 f8f5 	bl	8000db0 <validateAnswer>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	77fb      	strb	r3, [r7, #31]
	  if (u8exception != 0)
 8000bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d010      	beq.n	8000bf4 <StartTaskModbusMaster+0x104>
	  {
		 modH->i8state = COM_IDLE;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	7ffa      	ldrb	r2, [r7, #31]
 8000bde:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8000be0:	69b8      	ldr	r0, [r7, #24]
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000be8:	4619      	mov	r1, r3
 8000bea:	2300      	movs	r3, #0
 8000bec:	2203      	movs	r2, #3
 8000bee:	f006 fb5b 	bl	80072a8 <xTaskGenericNotify>
	     continue;
 8000bf2:	e055      	b.n	8000ca0 <StartTaskModbusMaster+0x1b0>
	  }

	  modH->i8lastError = u8exception;
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	7ffa      	ldrb	r2, [r7, #31]
 8000bf8:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 f85f 	bl	8005cc8 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	7d1b      	ldrb	r3, [r3, #20]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d82b      	bhi.n	8000c6c <StartTaskModbusMaster+0x17c>
 8000c14:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <StartTaskModbusMaster+0x12c>)
 8000c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1a:	bf00      	nop
 8000c1c:	08000c5d 	.word	0x08000c5d
 8000c20:	08000c5d 	.word	0x08000c5d
 8000c24:	08000c65 	.word	0x08000c65
 8000c28:	08000c65 	.word	0x08000c65
 8000c2c:	08000c6d 	.word	0x08000c6d
 8000c30:	08000c6d 	.word	0x08000c6d
 8000c34:	08000c6d 	.word	0x08000c6d
 8000c38:	08000c6d 	.word	0x08000c6d
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c6d 	.word	0x08000c6d
 8000c44:	08000c6d 	.word	0x08000c6d
 8000c48:	08000c6d 	.word	0x08000c6d
 8000c4c:	08000c6d 	.word	0x08000c6d
 8000c50:	08000c6d 	.word	0x08000c6d
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c6d 	.word	0x08000c6d
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8000c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c5e:	f000 f821 	bl	8000ca4 <get_FC1>
	      break;
 8000c62:	e004      	b.n	8000c6e <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8000c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c66:	f000 f874 	bl	8000d52 <get_FC3>
	      break;
 8000c6a:	e000      	b.n	8000c6e <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8000c6c:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8000c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c78:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d10e      	bne.n	8000c9e <StartTaskModbusMaster+0x1ae>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8000c86:	2300      	movs	r3, #0
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f004 fda6 	bl	80057dc <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8000c90:	69b8      	ldr	r0, [r7, #24]
 8000c92:	2300      	movs	r3, #0
 8000c94:	2203      	movs	r2, #3
 8000c96:	f06f 010a 	mvn.w	r1, #10
 8000c9a:	f006 fb05 	bl	80072a8 <xTaskGenericNotify>
	  }


	  continue;
 8000c9e:	bf00      	nop
  {
 8000ca0:	e72c      	b.n	8000afc <StartTaskModbusMaster+0xc>
 8000ca2:	bf00      	nop

08000ca4 <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000cac:	2303      	movs	r3, #3
 8000cae:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e043      	b.n	8000d3e <get_FC1+0x9a>

        if(i%2)
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d01c      	beq.n	8000cfc <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 8000cc2:	7bfa      	ldrb	r2, [r7, #15]
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	7cd8      	ldrb	r0, [r3, #19]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b2d9      	uxtb	r1, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	085b      	lsrs	r3, r3, #1
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	18d4      	adds	r4, r2, r3
 8000cf2:	f000 fa5f 	bl	80011b4 <word>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	8023      	strh	r3, [r4, #0]
 8000cfa:	e01d      	b.n	8000d38 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b2d8      	uxtb	r0, r3
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	4413      	add	r3, r2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	7cd9      	ldrb	r1, [r3, #19]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	18d4      	adds	r4, r2, r3
 8000d30:	f000 fa40 	bl	80011b4 <word>
 8000d34:	4603      	mov	r3, r0
 8000d36:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7d5b      	ldrb	r3, [r3, #21]
 8000d42:	7bfa      	ldrb	r2, [r7, #15]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3b6      	bcc.n	8000cb6 <get_FC1+0x12>
        }

     }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}

08000d52 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8000d52:	b590      	push	{r4, r7, lr}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73bb      	strb	r3, [r7, #14]
 8000d62:	e018      	b.n	8000d96 <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	7cd8      	ldrb	r0, [r3, #19]
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	7cd9      	ldrb	r1, [r3, #19]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	18d4      	adds	r4, r2, r3
 8000d82:	f000 fa17 	bl	80011b4 <word>
 8000d86:	4603      	mov	r3, r0
 8000d88:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	3301      	adds	r3, #1
 8000d94:	73bb      	strb	r3, [r7, #14]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7d5b      	ldrb	r3, [r3, #21]
 8000d9a:	085b      	lsrs	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	7bba      	ldrb	r2, [r7, #14]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d3df      	bcc.n	8000d64 <get_FC3+0x12>
    }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
	...

08000db0 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	7cdb      	ldrb	r3, [r3, #19]
 8000dc6:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000dc8:	b21a      	sxth	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	440b      	add	r3, r1
 8000dd6:	7cdb      	ldrb	r3, [r3, #19]
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8000dde:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f103 0213 	add.w	r2, r3, #19
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000dec:	3b02      	subs	r3, #2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	4610      	mov	r0, r2
 8000df4:	f000 f9f0 	bl	80011d8 <calcCRC>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	89bb      	ldrh	r3, [r7, #12]
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d009      	beq.n	8000e16 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8000e12:	23fc      	movs	r3, #252	; 0xfc
 8000e14:	e034      	b.n	8000e80 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7d1b      	ldrb	r3, [r3, #20]
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	da09      	bge.n	8000e34 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000e26:	3301      	adds	r3, #1
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8000e30:	23fb      	movs	r3, #251	; 0xfb
 8000e32:	e025      	b.n	8000e80 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73bb      	strb	r3, [r7, #14]
 8000e3c:	e00c      	b.n	8000e58 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <validateAnswer+0xd8>)
 8000e42:	5cd2      	ldrb	r2, [r2, r3]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7d1b      	ldrb	r3, [r3, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d102      	bne.n	8000e52 <validateAnswer+0xa2>
        {
            isSupported = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
            break;
 8000e50:	e005      	b.n	8000e5e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73bb      	strb	r3, [r7, #14]
 8000e58:	7bbb      	ldrb	r3, [r7, #14]
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	d9ef      	bls.n	8000e3e <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	f083 0301 	eor.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d009      	beq.n	8000e7e <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000e70:	3301      	adds	r3, #1
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	08008638 	.word	0x08008638

08000e8c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d104      	bne.n	8000ea8 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 f942 	bl	800412c <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d008      	beq.n	8000ec4 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	33bc      	adds	r3, #188	; 0xbc
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff f9f6 	bl	80002a8 <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8000ebc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8000ec0:	81fb      	strh	r3, [r7, #14]
 8000ec2:	e019      	b.n	8000ef8 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3313      	adds	r3, #19
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	f7ff f983 	bl	80001dc <RingGetAllBytes>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000ef6:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d107      	bne.n	8000f12 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6858      	ldr	r0, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	33a6      	adds	r3, #166	; 0xa6
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f002 ffc6 	bl	8003e9e <HAL_UART_Receive_IT>
	}

    return i16result;
 8000f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4413      	add	r3, r2
 8000f34:	7cdb      	ldrb	r3, [r3, #19]
 8000f36:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f40:	3b01      	subs	r3, #1
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	440b      	add	r3, r1
 8000f46:	7cdb      	ldrb	r3, [r3, #19]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8000f4e:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f103 0213 	add.w	r2, r3, #19
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f5c:	3b02      	subs	r3, #2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	4610      	mov	r0, r2
 8000f64:	f000 f938 	bl	80011d8 <calcCRC>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	893b      	ldrh	r3, [r7, #8]
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d009      	beq.n	8000f86 <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8000f82:	23fc      	movs	r3, #252	; 0xfc
 8000f84:	e10f      	b.n	80011a6 <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73bb      	strb	r3, [r7, #14]
 8000f8e:	e00c      	b.n	8000faa <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	4a87      	ldr	r2, [pc, #540]	; (80011b0 <validateRequest+0x290>)
 8000f94:	5cd2      	ldrb	r2, [r2, r3]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7d1b      	ldrb	r3, [r3, #20]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d102      	bne.n	8000fa4 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
	            break;
 8000fa2:	e005      	b.n	8000fb0 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73bb      	strb	r3, [r7, #14]
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b07      	cmp	r3, #7
 8000fae:	d9ef      	bls.n	8000f90 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d009      	beq.n	8000fd0 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0ea      	b.n	80011a6 <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7d1b      	ldrb	r3, [r3, #20]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	f200 80e0 	bhi.w	80011a4 <validateRequest+0x284>
 8000fe4:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <validateRequest+0xcc>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	0800102d 	.word	0x0800102d
 8000ff0:	0800102d 	.word	0x0800102d
 8000ff4:	08001145 	.word	0x08001145
 8000ff8:	08001145 	.word	0x08001145
 8000ffc:	080010d9 	.word	0x080010d9
 8001000:	08001121 	.word	0x08001121
 8001004:	080011a5 	.word	0x080011a5
 8001008:	080011a5 	.word	0x080011a5
 800100c:	080011a5 	.word	0x080011a5
 8001010:	080011a5 	.word	0x080011a5
 8001014:	080011a5 	.word	0x080011a5
 8001018:	080011a5 	.word	0x080011a5
 800101c:	080011a5 	.word	0x080011a5
 8001020:	080011a5 	.word	0x080011a5
 8001024:	0800102d 	.word	0x0800102d
 8001028:	08001145 	.word	0x08001145
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7d5a      	ldrb	r2, [r3, #21]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7d9b      	ldrb	r3, [r3, #22]
 8001034:	4619      	mov	r1, r3
 8001036:	4610      	mov	r0, r2
 8001038:	f000 f8bc 	bl	80011b4 <word>
 800103c:	4603      	mov	r3, r0
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7dda      	ldrb	r2, [r3, #23]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7e1b      	ldrb	r3, [r3, #24]
 800104a:	4619      	mov	r1, r3
 800104c:	4610      	mov	r0, r2
 800104e:	f000 f8b1 	bl	80011b4 <word>
 8001052:	4603      	mov	r3, r0
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7dda      	ldrb	r2, [r3, #23]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7e1b      	ldrb	r3, [r3, #24]
 8001060:	4619      	mov	r1, r3
 8001062:	4610      	mov	r0, r2
 8001064:	f000 f8a6 	bl	80011b4 <word>
 8001068:	4603      	mov	r3, r0
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	b29b      	uxth	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <validateRequest+0x15a>
 8001074:	897b      	ldrh	r3, [r7, #10]
 8001076:	3301      	adds	r3, #1
 8001078:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 800107a:	89ba      	ldrh	r2, [r7, #12]
 800107c:	897b      	ldrh	r3, [r7, #10]
 800107e:	4413      	add	r3, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001086:	4293      	cmp	r3, r2
 8001088:	dd01      	ble.n	800108e <validateRequest+0x16e>
 800108a:	2302      	movs	r3, #2
 800108c:	e08b      	b.n	80011a6 <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7dda      	ldrb	r2, [r3, #23]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e1b      	ldrb	r3, [r3, #24]
 8001096:	4619      	mov	r1, r3
 8001098:	4610      	mov	r0, r2
 800109a:	f000 f88b 	bl	80011b4 <word>
 800109e:	4603      	mov	r3, r0
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7dda      	ldrb	r2, [r3, #23]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e1b      	ldrb	r3, [r3, #24]
 80010ac:	4619      	mov	r1, r3
 80010ae:	4610      	mov	r0, r2
 80010b0:	f000 f880 	bl	80011b4 <word>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <validateRequest+0x1a6>
 80010c0:	897b      	ldrh	r3, [r7, #10]
 80010c2:	3301      	adds	r3, #1
 80010c4:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 80010c6:	897b      	ldrh	r3, [r7, #10]
 80010c8:	3305      	adds	r3, #5
 80010ca:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 80010cc:	897b      	ldrh	r3, [r7, #10]
 80010ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d2:	d960      	bls.n	8001196 <validateRequest+0x276>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e066      	b.n	80011a6 <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7d5a      	ldrb	r2, [r3, #21]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7d9b      	ldrb	r3, [r3, #22]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f000 f866 	bl	80011b4 <word>
 80010e8:	4603      	mov	r3, r0
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7d5a      	ldrb	r2, [r3, #21]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7d9b      	ldrb	r3, [r3, #22]
 80010f6:	4619      	mov	r1, r3
 80010f8:	4610      	mov	r0, r2
 80010fa:	f000 f85b 	bl	80011b4 <word>
 80010fe:	4603      	mov	r3, r0
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	b29b      	uxth	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <validateRequest+0x1f0>
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	3301      	adds	r3, #1
 800110e:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8001116:	89ba      	ldrh	r2, [r7, #12]
 8001118:	429a      	cmp	r2, r3
 800111a:	d93e      	bls.n	800119a <validateRequest+0x27a>
 800111c:	2302      	movs	r3, #2
 800111e:	e042      	b.n	80011a6 <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7d5a      	ldrb	r2, [r3, #21]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7d9b      	ldrb	r3, [r3, #22]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f000 f842 	bl	80011b4 <word>
 8001130:	4603      	mov	r3, r0
 8001132:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800113a:	89ba      	ldrh	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d92e      	bls.n	800119e <validateRequest+0x27e>
 8001140:	2302      	movs	r3, #2
 8001142:	e030      	b.n	80011a6 <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7d5a      	ldrb	r2, [r3, #21]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d9b      	ldrb	r3, [r3, #22]
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f000 f830 	bl	80011b4 <word>
 8001154:	4603      	mov	r3, r0
 8001156:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7dda      	ldrb	r2, [r3, #23]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e1b      	ldrb	r3, [r3, #24]
 8001160:	4619      	mov	r1, r3
 8001162:	4610      	mov	r0, r2
 8001164:	f000 f826 	bl	80011b4 <word>
 8001168:	4603      	mov	r3, r0
 800116a:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 800116c:	89ba      	ldrh	r2, [r7, #12]
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	4413      	add	r3, r2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8001178:	4293      	cmp	r3, r2
 800117a:	dd01      	ble.n	8001180 <validateRequest+0x260>
 800117c:	2302      	movs	r3, #2
 800117e:	e012      	b.n	80011a6 <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8001180:	897b      	ldrh	r3, [r7, #10]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	3305      	adds	r3, #5
 8001188:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 800118a:	897b      	ldrh	r3, [r7, #10]
 800118c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001190:	d907      	bls.n	80011a2 <validateRequest+0x282>
 8001192:	2303      	movs	r3, #3
 8001194:	e007      	b.n	80011a6 <validateRequest+0x286>
	        break;
 8001196:	bf00      	nop
 8001198:	e004      	b.n	80011a4 <validateRequest+0x284>
	        break;
 800119a:	bf00      	nop
 800119c:	e002      	b.n	80011a4 <validateRequest+0x284>
	        break;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <validateRequest+0x284>
	        break;
 80011a2:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80011a4:	2300      	movs	r3, #0

}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08008638 	.word	0x08008638

080011b4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	460a      	mov	r2, r1
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 80011cc:	89bb      	ldrh	r3, [r7, #12]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80011e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e8:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80011ea:	2300      	movs	r3, #0
 80011ec:	74fb      	strb	r3, [r7, #19]
 80011ee:	e023      	b.n	8001238 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 80011f0:	7cfb      	ldrb	r3, [r7, #19]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	4053      	eors	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001200:	2301      	movs	r3, #1
 8001202:	74bb      	strb	r3, [r7, #18]
 8001204:	e012      	b.n	800122c <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	085b      	lsrs	r3, r3, #1
 8001212:	617b      	str	r3, [r7, #20]
            if (flag)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <calcCRC+0x4e>
                temp ^= 0xA001;
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8001220:	f083 0301 	eor.w	r3, r3, #1
 8001224:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8001226:	7cbb      	ldrb	r3, [r7, #18]
 8001228:	3301      	adds	r3, #1
 800122a:	74bb      	strb	r3, [r7, #18]
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	2b08      	cmp	r3, #8
 8001230:	d9e9      	bls.n	8001206 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	3301      	adds	r3, #1
 8001236:	74fb      	strb	r3, [r7, #19]
 8001238:	7cfa      	ldrb	r2, [r7, #19]
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3d7      	bcc.n	80011f0 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	4313      	orrs	r3, r2
 800124e:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	b29b      	uxth	r3, r3
 8001254:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	b29b      	uxth	r3, r3

}
 800125a:	4618      	mov	r0, r3
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	7d1b      	ldrb	r3, [r3, #20]
 8001274:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	7a1a      	ldrb	r2, [r3, #8]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	3b80      	subs	r3, #128	; 0x80
 8001282:	b2da      	uxtb	r2, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f103 0213 	add.w	r2, r3, #19
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012b4:	4619      	mov	r1, r3
 80012b6:	4610      	mov	r0, r2
 80012b8:	f7ff ff8e 	bl	80011d8 <calcCRC>
 80012bc:	4603      	mov	r3, r0
 80012be:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80012c0:	89fb      	ldrh	r3, [r7, #14]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012cc:	4619      	mov	r1, r3
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	440b      	add	r3, r1
 80012d4:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012dc:	3301      	adds	r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012ec:	4619      	mov	r1, r3
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	440b      	add	r3, r1
 80012f6:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4618      	mov	r0, r3
 8001316:	f003 f938 	bl	800458a <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68d8      	ldr	r0, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8a1b      	ldrh	r3, [r3, #16]
 8001322:	2201      	movs	r2, #1
 8001324:	4619      	mov	r1, r3
 8001326:	f001 fe7d 	bl	8003024 <HAL_GPIO_WritePin>
        }

#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10c      	bne.n	800134e <sendTxBuffer+0xae>
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6858      	ldr	r0, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f103 0113 	add.w	r1, r3, #19
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	f002 fd65 	bl	8003e16 <HAL_UART_Transmit_IT>
 800134c:	e00b      	b.n	8001366 <sendTxBuffer+0xc6>
#if ENABLE_USART_DMA ==1
    	}
        else
        {
        	//transfer buffer to serial line DMA
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6858      	ldr	r0, [r3, #4]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f103 0113 	add.w	r1, r3, #19
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800135e:	b29b      	uxth	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	f002 fdcd 	bl	8003f00 <HAL_UART_Transmit_DMA>

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8001366:	21fa      	movs	r1, #250	; 0xfa
 8001368:	2001      	movs	r0, #1
 800136a:	f005 ff55 	bl	8007218 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 800136e:	bf00      	nop
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f7      	beq.n	8001370 <sendTxBuffer+0xd0>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00c      	beq.n	80013a2 <sendTxBuffer+0x102>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68d8      	ldr	r0, [r3, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	8a1b      	ldrh	r3, [r3, #16]
 8001390:	2200      	movs	r2, #0
 8001392:	4619      	mov	r1, r3
 8001394:	f001 fe46 	bl	8003024 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 f927 	bl	80045f0 <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d10c      	bne.n	80013c4 <sendTxBuffer+0x124>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80013b0:	f005 fa44 	bl	800683c <xTaskGetTickCount>
 80013b4:	4602      	mov	r2, r0
 80013b6:	2300      	movs	r3, #0
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2300      	movs	r3, #0
 80013bc:	2102      	movs	r1, #2
 80013be:	4620      	mov	r0, r4
 80013c0:	f006 f9d0 	bl	8007764 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 80013d2:	3301      	adds	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd90      	pop	{r4, r7, pc}

080013e4 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7d5a      	ldrb	r2, [r3, #21]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7d9b      	ldrb	r3, [r3, #22]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f7ff fedc 	bl	80011b4 <word>
 80013fc:	4603      	mov	r3, r0
 80013fe:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7dda      	ldrb	r2, [r3, #23]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7e1b      	ldrb	r3, [r3, #24]
 8001408:	4619      	mov	r1, r3
 800140a:	4610      	mov	r0, r2
 800140c:	f7ff fed2 	bl	80011b4 <word>
 8001410:	4603      	mov	r3, r0
 8001412:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8001414:	8a3b      	ldrh	r3, [r7, #16]
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	b29b      	uxth	r3, r3
 800141a:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 800141c:	8a3b      	ldrh	r3, [r7, #16]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	b29b      	uxth	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <process_FC1+0x4a>
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	3301      	adds	r3, #1
 800142c:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7dfa      	ldrb	r2, [r7, #23]
 8001432:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2203      	movs	r2, #3
 8001438:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001442:	461a      	mov	r2, r3
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	4413      	add	r3, r2
 8001448:	3b01      	subs	r3, #1
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	2200      	movs	r2, #0
 8001450:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001456:	2300      	movs	r3, #0
 8001458:	82bb      	strh	r3, [r7, #20]
 800145a:	e058      	b.n	800150e <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 800145c:	8a7a      	ldrh	r2, [r7, #18]
 800145e:	8abb      	ldrh	r3, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8001464:	89bb      	ldrh	r3, [r7, #12]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 800146a:	89bb      	ldrh	r3, [r7, #12]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800147a:	897b      	ldrh	r3, [r7, #10]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	7a7b      	ldrb	r3, [r7, #9]
 8001486:	fa42 f303 	asr.w	r3, r2, r3
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d014      	beq.n	80014bc <process_FC1+0xd8>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001498:	461a      	mov	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	7cda      	ldrb	r2, [r3, #19]
 80014a0:	7dbb      	ldrb	r3, [r7, #22]
 80014a2:	2101      	movs	r1, #1
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	440b      	add	r3, r1
 80014b8:	74da      	strb	r2, [r3, #19]
 80014ba:	e015      	b.n	80014e8 <process_FC1+0x104>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	7cda      	ldrb	r2, [r3, #19]
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	2101      	movs	r1, #1
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 80014de:	4013      	ands	r3, r2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	440b      	add	r3, r1
 80014e6:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->u16regs[ u16currentRegister ], u8currentBit ) );
        u8bitsno ++;
 80014e8:	7dbb      	ldrb	r3, [r7, #22]
 80014ea:	3301      	adds	r3, #1
 80014ec:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	d909      	bls.n	8001508 <process_FC1+0x124>
        {
            u8bitsno = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80014fe:	3301      	adds	r3, #1
 8001500:	b2da      	uxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001508:	8abb      	ldrh	r3, [r7, #20]
 800150a:	3301      	adds	r3, #1
 800150c:	82bb      	strh	r3, [r7, #20]
 800150e:	8aba      	ldrh	r2, [r7, #20]
 8001510:	8a3b      	ldrh	r3, [r7, #16]
 8001512:	429a      	cmp	r2, r3
 8001514:	d3a2      	bcc.n	800145c <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8001516:	8a3b      	ldrh	r3, [r7, #16]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <process_FC1+0x14e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001528:	3301      	adds	r3, #1
 800152a:	b2da      	uxtb	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001538:	3302      	adds	r3, #2
 800153a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff feaf 	bl	80012a0 <sendTxBuffer>
    return u8CopyBufferSize;
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7d5a      	ldrb	r2, [r3, #21]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7d9b      	ldrb	r3, [r3, #22]
 800155e:	4619      	mov	r1, r3
 8001560:	4610      	mov	r0, r2
 8001562:	f7ff fe27 	bl	80011b4 <word>
 8001566:	4603      	mov	r3, r0
 8001568:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7dda      	ldrb	r2, [r3, #23]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7e1b      	ldrb	r3, [r3, #24]
 8001572:	4619      	mov	r1, r3
 8001574:	4610      	mov	r0, r2
 8001576:	f7ff fe1d 	bl	80011b4 <word>
 800157a:	4603      	mov	r3, r0
 800157c:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2203      	movs	r2, #3
 800158c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8001590:	89bb      	ldrh	r3, [r7, #12]
 8001592:	81fb      	strh	r3, [r7, #14]
 8001594:	e032      	b.n	80015fc <process_FC3+0xae>
    {
    	modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->u16regs[i]);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800159c:	89fb      	ldrh	r3, [r7, #14]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015ae:	4619      	mov	r1, r3
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	440b      	add	r3, r1
 80015b6:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->u16regs[i]);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4413      	add	r3, r2
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015dc:	4619      	mov	r1, r3
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	440b      	add	r3, r1
 80015e4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	3301      	adds	r3, #1
 80015fa:	81fb      	strh	r3, [r7, #14]
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	89b9      	ldrh	r1, [r7, #12]
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	440b      	add	r3, r1
 8001604:	429a      	cmp	r2, r3
 8001606:	dbc6      	blt.n	8001596 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800160e:	3302      	adds	r3, #2
 8001610:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fe44 	bl	80012a0 <sendTxBuffer>

    return u8CopyBufferSize;
 8001618:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7d5a      	ldrb	r2, [r3, #21]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7d9b      	ldrb	r3, [r3, #22]
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f7ff fdbc 	bl	80011b4 <word>
 800163c:	4603      	mov	r3, r0
 800163e:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8001640:	89fb      	ldrh	r3, [r7, #14]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	72fb      	strb	r3, [r7, #11]

    // write to coil
    bitWrite(
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7ddb      	ldrb	r3, [r3, #23]
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	d115      	bne.n	8001684 <process_FC5+0x60>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800165e:	89bb      	ldrh	r3, [r7, #12]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	8819      	ldrh	r1, [r3, #0]
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	2201      	movs	r2, #1
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001676:	89bb      	ldrh	r3, [r7, #12]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4403      	add	r3, r0
 800167c:	430a      	orrs	r2, r1
 800167e:	b292      	uxth	r2, r2
 8001680:	801a      	strh	r2, [r3, #0]
 8001682:	e016      	b.n	80016b2 <process_FC5+0x8e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	8819      	ldrh	r1, [r3, #0]
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	2201      	movs	r2, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	b29b      	uxth	r3, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	b29a      	uxth	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80016a6:	89bb      	ldrh	r3, [r7, #12]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4403      	add	r3, r0
 80016ac:	400a      	ands	r2, r1
 80016ae:	b292      	uxth	r2, r2
 80016b0:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->u8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2206      	movs	r2, #6
 80016b6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80016c0:	3302      	adds	r3, #2
 80016c2:	72bb      	strb	r3, [r7, #10]
    sendTxBuffer(modH);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fdeb 	bl	80012a0 <sendTxBuffer>

    return u8CopyBufferSize;
 80016ca:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]

    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	7d5a      	ldrb	r2, [r3, #21]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7d9b      	ldrb	r3, [r3, #22]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fd63 	bl	80011b4 <word>
 80016ee:	4603      	mov	r3, r0
 80016f0:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7dda      	ldrb	r2, [r3, #23]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7e1b      	ldrb	r3, [r3, #24]
 80016fa:	4619      	mov	r1, r3
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fd59 	bl	80011b4 <word>
 8001702:	4603      	mov	r3, r0
 8001704:	81bb      	strh	r3, [r7, #12]

    modH->u16regs[ u16add ] = u16val;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	89ba      	ldrh	r2, [r7, #12]
 8001714:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2206      	movs	r2, #6
 800171a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001724:	3302      	adds	r3, #2
 8001726:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fdb9 	bl	80012a0 <sendTxBuffer>

    return u8CopyBufferSize;
 800172e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7d5a      	ldrb	r2, [r3, #21]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7d9b      	ldrb	r3, [r3, #22]
 800174a:	4619      	mov	r1, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f7ff fd31 	bl	80011b4 <word>
 8001752:	4603      	mov	r3, r0
 8001754:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7dda      	ldrb	r2, [r3, #23]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7e1b      	ldrb	r3, [r3, #24]
 800175e:	4619      	mov	r1, r3
 8001760:	4610      	mov	r0, r2
 8001762:	f7ff fd27 	bl	80011b4 <word>
 8001766:	4603      	mov	r3, r0
 8001768:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 800176e:	2307      	movs	r3, #7
 8001770:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001772:	2300      	movs	r3, #0
 8001774:	82bb      	strh	r3, [r7, #20]
 8001776:	e058      	b.n	800182a <process_FC15+0xf0>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8001778:	8a7a      	ldrh	r2, [r7, #18]
 800177a:	8abb      	ldrh	r3, [r7, #20]
 800177c:	4413      	add	r3, r2
 800177e:	81bb      	strh	r3, [r7, #12]
        u16currentRegister = (u16coil / 16);
 8001780:	89bb      	ldrh	r3, [r7, #12]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001786:	89bb      	ldrh	r3, [r7, #12]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	727b      	strb	r3, [r7, #9]

        bTemp = bitRead(
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	7cdb      	ldrb	r3, [r3, #19]
 8001798:	461a      	mov	r2, r3
 800179a:	7dbb      	ldrb	r3, [r7, #22]
 800179c:	fa42 f303 	asr.w	r3, r2, r3
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	723b      	strb	r3, [r7, #8]
        			modH->u8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80017ae:	7a3b      	ldrb	r3, [r7, #8]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d015      	beq.n	80017e0 <process_FC15+0xa6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	8819      	ldrh	r1, [r3, #0]
 80017c2:	7a7b      	ldrb	r3, [r7, #9]
 80017c4:	2201      	movs	r2, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 80017d2:	897b      	ldrh	r3, [r7, #10]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4403      	add	r3, r0
 80017d8:	430a      	orrs	r2, r1
 80017da:	b292      	uxth	r2, r2
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	e016      	b.n	800180e <process_FC15+0xd4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	7a7b      	ldrb	r3, [r7, #9]
 80017f0:	2201      	movs	r2, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
 8001802:	897b      	ldrh	r3, [r7, #10]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4403      	add	r3, r0
 8001808:	400a      	ands	r2, r1
 800180a:	b292      	uxth	r2, r2
 800180c:	801a      	strh	r2, [r3, #0]
            modH->u16regs[ u16currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	3301      	adds	r3, #1
 8001812:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001814:	7dbb      	ldrb	r3, [r7, #22]
 8001816:	2b07      	cmp	r3, #7
 8001818:	d904      	bls.n	8001824 <process_FC15+0xea>
        {
            u8bitsno = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	3301      	adds	r3, #1
 8001822:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8001824:	8abb      	ldrh	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	82bb      	strh	r3, [r7, #20]
 800182a:	8aba      	ldrh	r2, [r7, #20]
 800182c:	8a3b      	ldrh	r3, [r7, #16]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3a2      	bcc.n	8001778 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2206      	movs	r2, #6
 8001836:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001840:	3302      	adds	r3, #2
 8001842:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fd2b 	bl	80012a0 <sendTxBuffer>
    return u8CopyBufferSize;
 800184a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7d5b      	ldrb	r3, [r3, #21]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	b21a      	sxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7d9b      	ldrb	r3, [r3, #22]
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21b      	sxth	r3, r3
 8001870:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7ddb      	ldrb	r3, [r3, #23]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21a      	sxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7e1b      	ldrb	r3, [r3, #24]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21b      	sxth	r3, r3
 8001884:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 800188c:	8a7b      	ldrh	r3, [r7, #18]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2206      	movs	r2, #6
 8001898:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	82fb      	strh	r3, [r7, #22]
 80018a0:	e01d      	b.n	80018de <process_FC16+0x88>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80018a2:	8afb      	ldrh	r3, [r7, #22]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	3307      	adds	r3, #7
        temp = word(
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80018ae:	8afb      	ldrh	r3, [r7, #22]
 80018b0:	3304      	adds	r3, #4
 80018b2:	005b      	lsls	r3, r3, #1
        temp = word(
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	7cdb      	ldrb	r3, [r3, #19]
 80018ba:	4619      	mov	r1, r3
 80018bc:	f7ff fc7a 	bl	80011b4 <word>
 80018c0:	4603      	mov	r3, r0
 80018c2:	81fb      	strh	r3, [r7, #14]

        modH->u16regs[ u16StartAdd + i ] = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80018ca:	8ab9      	ldrh	r1, [r7, #20]
 80018cc:	8afb      	ldrh	r3, [r7, #22]
 80018ce:	440b      	add	r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	89fa      	ldrh	r2, [r7, #14]
 80018d6:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u16regsno; i++)
 80018d8:	8afb      	ldrh	r3, [r7, #22]
 80018da:	3301      	adds	r3, #1
 80018dc:	82fb      	strh	r3, [r7, #22]
 80018de:	8afa      	ldrh	r2, [r7, #22]
 80018e0:	8a7b      	ldrh	r3, [r7, #18]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d3dd      	bcc.n	80018a2 <process_FC16+0x4c>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018ec:	3302      	adds	r3, #2
 80018ee:	747b      	strb	r3, [r7, #17]
    sendTxBuffer(modH);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fcd5 	bl	80012a0 <sendTxBuffer>

    return u8CopyBufferSize;
 80018f6:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	e019      	b.n	800194a <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_UART_TxCpltCallback+0x70>)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	429a      	cmp	r2, r3
 8001924:	d10e      	bne.n	8001944 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001926:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_UART_TxCpltCallback+0x70>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	f005 fd57 	bl	80073f0 <xTaskGenericNotifyFromISR>
	   		break;
 8001942:	e008      	b.n	8001956 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_UART_TxCpltCallback+0x74>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4293      	cmp	r3, r2
 8001954:	dbdf      	blt.n	8001916 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_UART_TxCpltCallback+0x68>
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_UART_TxCpltCallback+0x78>)
 800195e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f3bf 8f4f 	dsb	sy
 8001968:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000431c 	.word	0x2000431c
 8001978:	2000002c 	.word	0x2000002c
 800197c:	e000ed04 	.word	0xe000ed04

08001980 <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b087      	sub	sp, #28
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e042      	b.n	8001a18 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8001992:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d137      	bne.n	8001a12 <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d139      	bne.n	8001a26 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 80019be:	4922      	ldr	r1, [pc, #136]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019c6:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7fe fbbf 	bl	8000150 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	6858      	ldr	r0, [r3, #4]
 80019dc:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	33a6      	adds	r3, #166	; 0xa6
 80019e6:	2201      	movs	r2, #1
 80019e8:	4619      	mov	r1, r3
 80019ea:	f002 fa58 	bl	8003e9e <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_UART_RxCpltCallback+0xc8>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 80019fa:	f004 ff2d 	bl	8006858 <xTaskGetTickCountFromISR>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	2100      	movs	r1, #0
 8001a06:	9100      	str	r1, [sp, #0]
 8001a08:	2107      	movs	r1, #7
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f005 feaa 	bl	8007764 <xTimerGenericCommand>
    		}
    		break;
 8001a10:	e009      	b.n	8001a26 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_UART_RxCpltCallback+0xcc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4293      	cmp	r3, r2
 8001a22:	dbb6      	blt.n	8001992 <HAL_UART_RxCpltCallback+0x12>
 8001a24:	e000      	b.n	8001a28 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 8001a26:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_UART_RxCpltCallback+0xbe>
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_UART_RxCpltCallback+0xd0>)
 8001a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f3bf 8f4f 	dsb	sy
 8001a3a:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000431c 	.word	0x2000431c
 8001a4c:	2000002c 	.word	0x2000002c
 8001a50:	e000ed04 	.word	0xe000ed04

08001a54 <HAL_UART_ErrorCallback>:
 * handled by the HAL
 * */


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

 int i;

 for (i = 0; i < numberHandlers; i++ )
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e03f      	b.n	8001ae2 <HAL_UART_ErrorCallback+0x8e>
 {
    	if (mHandlers[i]->port == huart  )
 8001a62:	4a26      	ldr	r2, [pc, #152]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d134      	bne.n	8001adc <HAL_UART_ErrorCallback+0x88>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d136      	bne.n	8001af0 <HAL_UART_ErrorCallback+0x9c>
    		{
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001a82:	e007      	b.n	8001a94 <HAL_UART_ErrorCallback+0x40>
    		    {
    					HAL_UART_DMAStop(mHandlers[i]->port);
 8001a84:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 faa2 	bl	8003fd8 <HAL_UART_DMAStop>
    			while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	6858      	ldr	r0, [r3, #4]
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa6:	33bc      	adds	r3, #188	; 0xbc
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f002 faef 	bl	800408e <HAL_UARTEx_ReceiveToIdle_DMA>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1e6      	bne.n	8001a84 <HAL_UART_ErrorCallback+0x30>
   				}
				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <HAL_UART_ErrorCallback+0xa8>)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0204 	bic.w	r2, r2, #4
 8001ad8:	601a      	str	r2, [r3, #0]

    		}

    		break;
 8001ada:	e009      	b.n	8001af0 <HAL_UART_ErrorCallback+0x9c>
 for (i = 0; i < numberHandlers; i++ )
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <HAL_UART_ErrorCallback+0xac>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4293      	cmp	r3, r2
 8001aec:	dbb9      	blt.n	8001a62 <HAL_UART_ErrorCallback+0xe>
    	}
   }
}
 8001aee:	e000      	b.n	8001af2 <HAL_UART_ErrorCallback+0x9e>
    		break;
 8001af0:	bf00      	nop
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000431c 	.word	0x2000431c
 8001b00:	2000002c 	.word	0x2000002c

08001b04 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
		/* Modbus RTU RX callback BEGIN */
	    int i;
	    for (i = 0; i < numberHandlers; i++ )
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e05f      	b.n	8001bda <HAL_UARTEx_RxEventCallback+0xd6>
	    {
	    	if (mHandlers[i]->port == huart  )
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d154      	bne.n	8001bd4 <HAL_UARTEx_RxEventCallback+0xd0>
	    	{


	    		if(mHandlers[i]->xTypeHW == USART_HW_DMA)
 8001b2a:	4a37      	ldr	r2, [pc, #220]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d156      	bne.n	8001be8 <HAL_UARTEx_RxEventCallback+0xe4>
	    		{
	    			if(Size) //check if we have received any byte
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d053      	beq.n	8001be8 <HAL_UARTEx_RxEventCallback+0xe4>
	    			{
		    				mHandlers[i]->xBufferRX.u8available = Size;
 8001b40:	4a31      	ldr	r2, [pc, #196]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	887a      	ldrh	r2, [r7, #2]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
		    				mHandlers[i]->xBufferRX.overflow = false;
 8001b50:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f

		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001b5e:	e007      	b.n	8001b70 <HAL_UARTEx_RxEventCallback+0x6c>
		    				{
		    					HAL_UART_DMAStop(mHandlers[i]->port);
 8001b60:	4a29      	ldr	r2, [pc, #164]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fa34 	bl	8003fd8 <HAL_UART_DMAStop>
		    				while(HAL_UARTEx_ReceiveToIdle_DMA(mHandlers[i]->port, mHandlers[i]->xBufferRX.uxBuffer, MAX_BUFFER) != HAL_OK)
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	6858      	ldr	r0, [r3, #4]
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b82:	33bc      	adds	r3, #188	; 0xbc
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	4619      	mov	r1, r3
 8001b88:	f002 fa81 	bl	800408e <HAL_UARTEx_ReceiveToIdle_DMA>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e6      	bne.n	8001b60 <HAL_UARTEx_RxEventCallback+0x5c>

		    				}
		    				__HAL_DMA_DISABLE_IT(mHandlers[i]->port->hdmarx, DMA_IT_HT); // we don't need half-transfer interrupt
 8001b92:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4919      	ldr	r1, [pc, #100]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0204 	bic.w	r2, r2, #4
 8001bb4:	601a      	str	r2, [r3, #0]

		    				xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0 , eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 8001bb6:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <HAL_UARTEx_RxEventCallback+0x104>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8001bc2:	f107 0308 	add.w	r3, r7, #8
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	2203      	movs	r2, #3
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f005 fc0f 	bl	80073f0 <xTaskGenericNotifyFromISR>
	    			}
	    		}

	    		break;
 8001bd2:	e009      	b.n	8001be8 <HAL_UARTEx_RxEventCallback+0xe4>
	    for (i = 0; i < numberHandlers; i++ )
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <HAL_UARTEx_RxEventCallback+0x108>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4293      	cmp	r3, r2
 8001be4:	db99      	blt.n	8001b1a <HAL_UARTEx_RxEventCallback+0x16>
 8001be6:	e000      	b.n	8001bea <HAL_UARTEx_RxEventCallback+0xe6>
	    		break;
 8001be8:	bf00      	nop
	    	}
	    }
	    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_UARTEx_RxEventCallback+0xfc>
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <HAL_UARTEx_RxEventCallback+0x10c>)
 8001bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f3bf 8f4f 	dsb	sy
 8001bfc:	f3bf 8f6f 	isb	sy
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000431c 	.word	0x2000431c
 8001c0c:	2000002c 	.word	0x2000002c
 8001c10:	e000ed04 	.word	0xe000ed04

08001c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_DMA_Init+0x68>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <MX_DMA_Init+0x68>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_DMA_Init+0x68>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2105      	movs	r1, #5
 8001c36:	200c      	movs	r0, #12
 8001c38:	f000 fda7 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c3c:	200c      	movs	r0, #12
 8001c3e:	f000 fdc0 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	200d      	movs	r0, #13
 8001c48:	f000 fd9f 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c4c:	200d      	movs	r0, #13
 8001c4e:	f000 fdb8 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2105      	movs	r1, #5
 8001c56:	2010      	movs	r0, #16
 8001c58:	f000 fd97 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c5c:	2010      	movs	r0, #16
 8001c5e:	f000 fdb0 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2105      	movs	r1, #5
 8001c66:	2011      	movs	r0, #17
 8001c68:	f000 fd8f 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001c6c:	2011      	movs	r0, #17
 8001c6e:	f000 fda8 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000

08001c80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <MX_FREERTOS_Init+0x38>)
 8001c86:	2100      	movs	r1, #0
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <MX_FREERTOS_Init+0x3c>)
 8001c8a:	f003 f8f7 	bl	8004e7c <osThreadNew>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <MX_FREERTOS_Init+0x40>)
 8001c92:	6013      	str	r3, [r2, #0]

  /* creation of myTaskMaster */
  myTaskMasterHandle = osThreadNew(StartTaskMaster, NULL, &myTaskMaster_attributes);
 8001c94:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <MX_FREERTOS_Init+0x44>)
 8001c96:	2100      	movs	r1, #0
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_FREERTOS_Init+0x48>)
 8001c9a:	f003 f8ef 	bl	8004e7c <osThreadNew>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <MX_FREERTOS_Init+0x4c>)
 8001ca2:	6013      	str	r3, [r2, #0]

  /* creation of myTasSlave */
  myTasSlaveHandle = osThreadNew(StartTasSlave, NULL, &myTasSlave_attributes);
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <MX_FREERTOS_Init+0x50>)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <MX_FREERTOS_Init+0x54>)
 8001caa:	f003 f8e7 	bl	8004e7c <osThreadNew>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <MX_FREERTOS_Init+0x58>)
 8001cb2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	08008640 	.word	0x08008640
 8001cbc:	08001cdd 	.word	0x08001cdd
 8001cc0:	20004324 	.word	0x20004324
 8001cc4:	08008664 	.word	0x08008664
 8001cc8:	08001ced 	.word	0x08001ced
 8001ccc:	20004328 	.word	0x20004328
 8001cd0:	08008688 	.word	0x08008688
 8001cd4:	08001d91 	.word	0x08001d91
 8001cd8:	2000434c 	.word	0x2000434c

08001cdc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f003 f99b 	bl	8005020 <osDelay>
 8001cea:	e7fb      	b.n	8001ce4 <StartDefaultTask+0x8>

08001cec <StartTaskMaster>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMaster */
void StartTaskMaster(void *argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMaster */
	uint32_t u32NotificationValue;

	telegram[0].u8id = 1; // slave address
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <StartTaskMaster+0x98>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
	telegram[0].u8fct = 3; // function code (this one is registers read)
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <StartTaskMaster+0x98>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	705a      	strb	r2, [r3, #1]
	//telegram[0].u16RegAdd = 0x160; // start address in slave
	telegram[0].u16RegAdd = 0x0; // start address in slave
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <StartTaskMaster+0x98>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	805a      	strh	r2, [r3, #2]
	telegram[0].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <StartTaskMaster+0x98>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	809a      	strh	r2, [r3, #4]
	telegram[0].u16reg = ModbusDATA2; // pointer to a memory array
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <StartTaskMaster+0x98>)
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <StartTaskMaster+0x9c>)
 8001d10:	609a      	str	r2, [r3, #8]


	// telegram 0: read registers
	telegram[1].u8id = 1; // slave address
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <StartTaskMaster+0x98>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	741a      	strb	r2, [r3, #16]
	telegram[1].u8fct = 6; // function code (this one is registers write)
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <StartTaskMaster+0x98>)
 8001d1a:	2206      	movs	r2, #6
 8001d1c:	745a      	strb	r2, [r3, #17]
	//telegram[1].u16RegAdd = 0x160; // start address in slave
	telegram[1].u16RegAdd = 0x0;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <StartTaskMaster+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	825a      	strh	r2, [r3, #18]
	telegram[1].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8001d24:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <StartTaskMaster+0x98>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	829a      	strh	r2, [r3, #20]
	telegram[1].u16reg = ModbusDATA2; // pointer to a memory array
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <StartTaskMaster+0x98>)
 8001d2c:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <StartTaskMaster+0x9c>)
 8001d2e:	619a      	str	r2, [r3, #24]

  /* Infinite loop */
  for(;;)
  {

       	  ModbusQuery(&ModbusH2, telegram[0]); // make a query
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <StartTaskMaster+0x98>)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d38:	4814      	ldr	r0, [pc, #80]	; (8001d8c <StartTaskMaster+0xa0>)
 8001d3a:	f7fe fd4b 	bl	80007d4 <ModbusQuery>
       	  u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500); // block until query finishes or timeout
 8001d3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d42:	2001      	movs	r0, #1
 8001d44:	f005 fa68 	bl	8007218 <ulTaskNotifyTake>
 8001d48:	60f8      	str	r0, [r7, #12]
       	  if(u32NotificationValue)
       	  {
       		//handle error
       		//  while(1);
       	  }
       	  osDelay(500);
 8001d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4e:	f003 f967 	bl	8005020 <osDelay>

       	  ModbusDATA2[0]++;
 8001d52:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <StartTaskMaster+0x9c>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <StartTaskMaster+0x9c>)
 8001d5c:	801a      	strh	r2, [r3, #0]
       	  ModbusQuery(&ModbusH2, telegram[1]); // make a query
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <StartTaskMaster+0x98>)
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	9200      	str	r2, [sp, #0]
 8001d64:	3310      	adds	r3, #16
 8001d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d68:	4808      	ldr	r0, [pc, #32]	; (8001d8c <StartTaskMaster+0xa0>)
 8001d6a:	f7fe fd33 	bl	80007d4 <ModbusQuery>
       	  u32NotificationValue = ulTaskNotifyTake(pdTRUE, 500); // block until query finishes or timeout
 8001d6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d72:	2001      	movs	r0, #1
 8001d74:	f005 fa50 	bl	8007218 <ulTaskNotifyTake>
 8001d78:	60f8      	str	r0, [r7, #12]
       	  {
       			//handle error
       			//  while(1);
       	  }

     osDelay(500);
 8001d7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7e:	f003 f94f 	bl	8005020 <osDelay>
       	  ModbusQuery(&ModbusH2, telegram[0]); // make a query
 8001d82:	e7d5      	b.n	8001d30 <StartTaskMaster+0x44>
 8001d84:	2000432c 	.word	0x2000432c
 8001d88:	200046d8 	.word	0x200046d8
 8001d8c:	20004594 	.word	0x20004594

08001d90 <StartTasSlave>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTasSlave */
void StartTasSlave(void *argument)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTasSlave */
  /* Infinite loop */
  for(;;)
  {
  		xSemaphoreTake(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <StartTasSlave+0x4c>)
 8001d9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001da2:	4618      	mov	r0, r3
 8001da4:	f003 ff90 	bl	8005cc8 <xQueueSemaphoreTake>
  		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, ModbusH.u16regs[0] & 0x1);
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <StartTasSlave+0x4c>)
 8001daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dbe:	4808      	ldr	r0, [pc, #32]	; (8001de0 <StartTasSlave+0x50>)
 8001dc0:	f001 f930 	bl	8003024 <HAL_GPIO_WritePin>
  		xSemaphoreGive(ModbusH.ModBusSphrHandle);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <StartTasSlave+0x4c>)
 8001dc6:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	f003 fd04 	bl	80057dc <xQueueGenericSend>

  		osDelay(200);
 8001dd4:	20c8      	movs	r0, #200	; 0xc8
 8001dd6:	f003 f923 	bl	8005020 <osDelay>
  		xSemaphoreTake(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8001dda:	e7dd      	b.n	8001d98 <StartTasSlave+0x8>
 8001ddc:	20004350 	.word	0x20004350
 8001de0:	40011000 	.word	0x40011000

08001de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6193      	str	r3, [r2, #24]
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e16:	f043 0320 	orr.w	r3, r3, #32
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a1a      	ldr	r2, [pc, #104]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_GPIO_Init+0xcc>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5e:	4815      	ldr	r0, [pc, #84]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001e60:	f001 f8e0 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_485_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2103      	movs	r1, #3
 8001e68:	4813      	ldr	r0, [pc, #76]	; (8001eb8 <MX_GPIO_Init+0xd4>)
 8001e6a:	f001 f8db 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4619      	mov	r1, r3
 8001e86:	480b      	ldr	r0, [pc, #44]	; (8001eb4 <MX_GPIO_Init+0xd0>)
 8001e88:	f000 ff48 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = EN_485_Pin|LD2_Pin;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_GPIO_Init+0xd4>)
 8001ea4:	f000 ff3a 	bl	8002d1c <HAL_GPIO_Init>

}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40010c00 	.word	0x40010c00

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec0:	f000 fb7c 	bl	80025bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec4:	f000 f870 	bl	8001fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec8:	f7ff ff8c 	bl	8001de4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ecc:	f7ff fea2 	bl	8001c14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ed0:	f000 f9ba 	bl	8002248 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001ed4:	f000 f9e2 	bl	800229c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Slave initialization */

      ModbusH.uModbusType = MB_SLAVE;
 8001ed8:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <main+0xd0>)
 8001eda:	2203      	movs	r2, #3
 8001edc:	701a      	strb	r2, [r3, #0]
      ModbusH.port =  &huart3;
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <main+0xd0>)
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <main+0xd4>)
 8001ee2:	605a      	str	r2, [r3, #4]
      ModbusH.u8id = 1; // For master it must be 0
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <main+0xd0>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	721a      	strb	r2, [r3, #8]
      ModbusH.u16timeOut = 1000;
 8001eea:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <main+0xd0>)
 8001eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ef0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
      ModbusH.EN_Port = NULL;
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <main+0xd0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
      ModbusH.EN_Port = EN_485_GPIO_Port;
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <main+0xd0>)
 8001efc:	4a25      	ldr	r2, [pc, #148]	; (8001f94 <main+0xd8>)
 8001efe:	60da      	str	r2, [r3, #12]
      ModbusH.EN_Pin = EN_485_Pin;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <main+0xd0>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	821a      	strh	r2, [r3, #16]
      ModbusH.u16regs = ModbusDATA;
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <main+0xd0>)
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <main+0xdc>)
 8001f0a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      ModbusH.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <main+0xd0>)
 8001f10:	2280      	movs	r2, #128	; 0x80
 8001f12:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      ModbusH.xTypeHW = USART_HW_DMA;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <main+0xd0>)
 8001f18:	2204      	movs	r2, #4
 8001f1a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
      //Initialize Modbus library
      ModbusInit(&ModbusH);
 8001f1e:	481b      	ldr	r0, [pc, #108]	; (8001f8c <main+0xd0>)
 8001f20:	f7fe f9dc 	bl	80002dc <ModbusInit>
      //Start capturing traffic on serial Port
      ModbusStart(&ModbusH);
 8001f24:	4819      	ldr	r0, [pc, #100]	; (8001f8c <main+0xd0>)
 8001f26:	f7fe fa7b 	bl	8000420 <ModbusStart>

  /***********/

  /* Master initialization */

      ModbusH2.uModbusType = MB_MASTER;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <main+0xe0>)
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	701a      	strb	r2, [r3, #0]
      ModbusH2.port =  &huart2;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <main+0xe0>)
 8001f32:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <main+0xe4>)
 8001f34:	605a      	str	r2, [r3, #4]
      ModbusH2.u8id = 0; // For master it must be 0
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <main+0xe0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	721a      	strb	r2, [r3, #8]
      ModbusH2.u16timeOut = 1000;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <main+0xe0>)
 8001f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f42:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
      ModbusH2.EN_Port =  NULL;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <main+0xe0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
      ModbusH2.EN_Port =  EN_485_GPIO_Port;
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <main+0xe0>)
 8001f4e:	4a11      	ldr	r2, [pc, #68]	; (8001f94 <main+0xd8>)
 8001f50:	60da      	str	r2, [r3, #12]
      ModbusH2.EN_Pin = EN_485_Pin;
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <main+0xe0>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	821a      	strh	r2, [r3, #16]
      ModbusH2.u16regs = ModbusDATA2;
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <main+0xe0>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <main+0xe8>)
 8001f5c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      ModbusH2.u16regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <main+0xe0>)
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
      ModbusH2.xTypeHW = USART_HW_DMA;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <main+0xe0>)
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
      //Initialize Modbus library
      ModbusInit(&ModbusH2);
 8001f70:	480a      	ldr	r0, [pc, #40]	; (8001f9c <main+0xe0>)
 8001f72:	f7fe f9b3 	bl	80002dc <ModbusInit>
      //Start capturing traffic on serial Port
      ModbusStart(&ModbusH2);
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <main+0xe0>)
 8001f78:	f7fe fa52 	bl	8000420 <ModbusStart>
  /***********/
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f7c:	f002 ff18 	bl	8004db0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f80:	f7ff fe7e 	bl	8001c80 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f84:	f002 ff46 	bl	8004e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <main+0xcc>
 8001f8a:	bf00      	nop
 8001f8c:	20004350 	.word	0x20004350
 8001f90:	200048a8 	.word	0x200048a8
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	20004494 	.word	0x20004494
 8001f9c:	20004594 	.word	0x20004594
 8001fa0:	20004974 	.word	0x20004974
 8001fa4:	200046d8 	.word	0x200046d8

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b090      	sub	sp, #64	; 0x40
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0318 	add.w	r3, r7, #24
 8001fb2:	2228      	movs	r2, #40	; 0x28
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f006 fa9a 	bl	80084f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fe6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fec:	f107 0318 	add.w	r3, r7, #24
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f001 f82f 	bl	8003054 <HAL_RCC_OscConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ffc:	f000 f82c 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002000:	230f      	movs	r3, #15
 8002002:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002004:	2302      	movs	r3, #2
 8002006:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800200c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	2102      	movs	r1, #2
 800201a:	4618      	mov	r0, r3
 800201c:	f001 fa9a 	bl	8003554 <HAL_RCC_ClockConfig>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002026:	f000 f817 	bl	8002058 <Error_Handler>
  }
}
 800202a:	bf00      	nop
 800202c:	3740      	adds	r7, #64	; 0x40
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002046:	f000 facf 	bl	80025e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40000800 	.word	0x40000800

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800205c:	b672      	cpsid	i
}
 800205e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002060:	e7fe      	b.n	8002060 <Error_Handler+0x8>
	...

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_MspInit+0x68>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_MspInit+0x68>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_MspInit+0x68>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_MspInit+0x68>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_MspInit+0x68>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_MspInit+0x68>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	210f      	movs	r1, #15
 800209e:	f06f 0001 	mvn.w	r0, #1
 80020a2:	f000 fb72 	bl	800278a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_MspInit+0x6c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_MspInit+0x6c>)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40010000 	.word	0x40010000

080020d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	201e      	movs	r0, #30
 80020ea:	f000 fb4e 	bl	800278a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020ee:	201e      	movs	r0, #30
 80020f0:	f000 fb67 	bl	80027c2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_InitTick+0xa0>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_InitTick+0xa0>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	61d3      	str	r3, [r2, #28]
 8002100:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_InitTick+0xa0>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800210c:	f107 0210 	add.w	r2, r7, #16
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f001 fb98 	bl	800384c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800211c:	f001 fb6e 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8002120:	4603      	mov	r3, r0
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_InitTick+0xa4>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	3b01      	subs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_InitTick+0xa8>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_InitTick+0xac>)
 8002138:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_InitTick+0xa8>)
 800213c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002140:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_InitTick+0xa8>)
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_InitTick+0xa8>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_InitTick+0xa8>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <HAL_InitTick+0xa8>)
 8002156:	f001 fbc7 	bl	80038e8 <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002160:	4806      	ldr	r0, [pc, #24]	; (800217c <HAL_InitTick+0xa8>)
 8002162:	f001 fc19 	bl	8003998 <HAL_TIM_Base_Start_IT>
 8002166:	4603      	mov	r3, r0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	431bde83 	.word	0x431bde83
 800217c:	200047d8 	.word	0x200047d8
 8002180:	40000800 	.word	0x40000800

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
	...

080021b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <DMA1_Channel2_IRQHandler+0x10>)
 80021b6:	f000 fc7d 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200048ec 	.word	0x200048ec

080021c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA1_Channel3_IRQHandler+0x10>)
 80021ca:	f000 fc73 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20004864 	.word	0x20004864

080021d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Channel6_IRQHandler+0x10>)
 80021de:	f000 fc69 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20004820 	.word	0x20004820

080021ec <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <DMA1_Channel7_IRQHandler+0x10>)
 80021f2:	f000 fc5f 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20004930 	.word	0x20004930

08002200 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM4_IRQHandler+0x10>)
 8002206:	f001 fc19 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200047d8 	.word	0x200047d8

08002214 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <USART2_IRQHandler+0x10>)
 800221a:	f001 fff1 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20004974 	.word	0x20004974

08002228 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <USART3_IRQHandler+0x10>)
 800222e:	f001 ffe7 	bl	8004200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200048a8 	.word	0x200048a8

0800223c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002280:	f001 fd7c 	bl	8003d7c <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f7ff fee5 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20004974 	.word	0x20004974
 8002298:	40004400 	.word	0x40004400

0800229c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <MX_USART3_UART_Init+0x50>)
 80022a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022c2:	220c      	movs	r2, #12
 80022c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c6:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_USART3_UART_Init+0x4c>)
 80022d4:	f001 fd52 	bl	8003d7c <HAL_UART_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022de:	f7ff febb 	bl	8002058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200048a8 	.word	0x200048a8
 80022ec:	40004800 	.word	0x40004800

080022f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0318 	add.w	r3, r7, #24
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a8c      	ldr	r2, [pc, #560]	; (800253c <HAL_UART_MspInit+0x24c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	f040 8085 	bne.w	800241c <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4a8a      	ldr	r2, [pc, #552]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231c:	61d3      	str	r3, [r2, #28]
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_UART_MspInit+0x250>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	4a84      	ldr	r2, [pc, #528]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6193      	str	r3, [r2, #24]
 8002336:	4b82      	ldr	r3, [pc, #520]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002342:	2304      	movs	r3, #4
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 0318 	add.w	r3, r7, #24
 8002352:	4619      	mov	r1, r3
 8002354:	487b      	ldr	r0, [pc, #492]	; (8002544 <HAL_UART_MspInit+0x254>)
 8002356:	f000 fce1 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800235a:	2308      	movs	r3, #8
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002366:	f107 0318 	add.w	r3, r7, #24
 800236a:	4619      	mov	r1, r3
 800236c:	4875      	ldr	r0, [pc, #468]	; (8002544 <HAL_UART_MspInit+0x254>)
 800236e:	f000 fcd5 	bl	8002d1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002372:	4b75      	ldr	r3, [pc, #468]	; (8002548 <HAL_UART_MspInit+0x258>)
 8002374:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_UART_MspInit+0x25c>)
 8002376:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002378:	4b73      	ldr	r3, [pc, #460]	; (8002548 <HAL_UART_MspInit+0x258>)
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800237e:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_UART_MspInit+0x258>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002384:	4b70      	ldr	r3, [pc, #448]	; (8002548 <HAL_UART_MspInit+0x258>)
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800238a:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <HAL_UART_MspInit+0x258>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002390:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <HAL_UART_MspInit+0x258>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002396:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <HAL_UART_MspInit+0x258>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_UART_MspInit+0x258>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023a2:	4869      	ldr	r0, [pc, #420]	; (8002548 <HAL_UART_MspInit+0x258>)
 80023a4:	f000 fa1c 	bl	80027e0 <HAL_DMA_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80023ae:	f7ff fe53 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a64      	ldr	r2, [pc, #400]	; (8002548 <HAL_UART_MspInit+0x258>)
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
 80023b8:	4a63      	ldr	r2, [pc, #396]	; (8002548 <HAL_UART_MspInit+0x258>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023c0:	4a64      	ldr	r2, [pc, #400]	; (8002554 <HAL_UART_MspInit+0x264>)
 80023c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023c6:	2210      	movs	r2, #16
 80023c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023d0:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023d2:	2280      	movs	r2, #128	; 0x80
 80023d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d6:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023dc:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023de:	2200      	movs	r2, #0
 80023e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023ee:	4858      	ldr	r0, [pc, #352]	; (8002550 <HAL_UART_MspInit+0x260>)
 80023f0:	f000 f9f6 	bl	80027e0 <HAL_DMA_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80023fa:	f7ff fe2d 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a53      	ldr	r2, [pc, #332]	; (8002550 <HAL_UART_MspInit+0x260>)
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
 8002404:	4a52      	ldr	r2, [pc, #328]	; (8002550 <HAL_UART_MspInit+0x260>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2105      	movs	r1, #5
 800240e:	2026      	movs	r0, #38	; 0x26
 8002410:	f000 f9bb 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002414:	2026      	movs	r0, #38	; 0x26
 8002416:	f000 f9d4 	bl	80027c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800241a:	e08b      	b.n	8002534 <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a4d      	ldr	r2, [pc, #308]	; (8002558 <HAL_UART_MspInit+0x268>)
 8002422:	4293      	cmp	r3, r2
 8002424:	f040 8086 	bne.w	8002534 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002428:	4b45      	ldr	r3, [pc, #276]	; (8002540 <HAL_UART_MspInit+0x250>)
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	4a44      	ldr	r2, [pc, #272]	; (8002540 <HAL_UART_MspInit+0x250>)
 800242e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002432:	61d3      	str	r3, [r2, #28]
 8002434:	4b42      	ldr	r3, [pc, #264]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002440:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	4a3e      	ldr	r2, [pc, #248]	; (8002540 <HAL_UART_MspInit+0x250>)
 8002446:	f043 0308 	orr.w	r3, r3, #8
 800244a:	6193      	str	r3, [r2, #24]
 800244c:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <HAL_UART_MspInit+0x250>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f107 0318 	add.w	r3, r7, #24
 800246a:	4619      	mov	r1, r3
 800246c:	483b      	ldr	r0, [pc, #236]	; (800255c <HAL_UART_MspInit+0x26c>)
 800246e:	f000 fc55 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	4619      	mov	r1, r3
 8002486:	4835      	ldr	r0, [pc, #212]	; (800255c <HAL_UART_MspInit+0x26c>)
 8002488:	f000 fc48 	bl	8002d1c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <HAL_UART_MspInit+0x270>)
 800248e:	4a35      	ldr	r2, [pc, #212]	; (8002564 <HAL_UART_MspInit+0x274>)
 8002490:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002492:	4b33      	ldr	r3, [pc, #204]	; (8002560 <HAL_UART_MspInit+0x270>)
 8002494:	2200      	movs	r2, #0
 8002496:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_UART_MspInit+0x270>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800249e:	4b30      	ldr	r3, [pc, #192]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024a0:	2280      	movs	r2, #128	; 0x80
 80024a2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80024bc:	4828      	ldr	r0, [pc, #160]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024be:	f000 f98f 	bl	80027e0 <HAL_DMA_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80024c8:	f7ff fdc6 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a24      	ldr	r2, [pc, #144]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
 80024d2:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_UART_MspInit+0x270>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024da:	4a24      	ldr	r2, [pc, #144]	; (800256c <HAL_UART_MspInit+0x27c>)
 80024dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024e0:	2210      	movs	r2, #16
 80024e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80024fc:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <HAL_UART_MspInit+0x278>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_UART_MspInit+0x278>)
 8002504:	2200      	movs	r2, #0
 8002506:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002508:	4817      	ldr	r0, [pc, #92]	; (8002568 <HAL_UART_MspInit+0x278>)
 800250a:	f000 f969 	bl	80027e0 <HAL_DMA_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_MspInit+0x228>
      Error_Handler();
 8002514:	f7ff fda0 	bl	8002058 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <HAL_UART_MspInit+0x278>)
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <HAL_UART_MspInit+0x278>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2105      	movs	r1, #5
 8002528:	2027      	movs	r0, #39	; 0x27
 800252a:	f000 f92e 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800252e:	2027      	movs	r0, #39	; 0x27
 8002530:	f000 f947 	bl	80027c2 <HAL_NVIC_EnableIRQ>
}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	; 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40004400 	.word	0x40004400
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800
 8002548:	20004820 	.word	0x20004820
 800254c:	4002006c 	.word	0x4002006c
 8002550:	20004930 	.word	0x20004930
 8002554:	40020080 	.word	0x40020080
 8002558:	40004800 	.word	0x40004800
 800255c:	40010c00 	.word	0x40010c00
 8002560:	20004864 	.word	0x20004864
 8002564:	40020030 	.word	0x40020030
 8002568:	200048ec 	.word	0x200048ec
 800256c:	4002001c 	.word	0x4002001c

08002570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002572:	490d      	ldr	r1, [pc, #52]	; (80025a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002574:	4a0d      	ldr	r2, [pc, #52]	; (80025ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002588:	4c0a      	ldr	r4, [pc, #40]	; (80025b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002596:	f7ff fe51 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259a:	f005 ff77 	bl	800848c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800259e:	f7ff fc8d 	bl	8001ebc <main>
  bx lr
 80025a2:	4770      	bx	lr
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80025ac:	080086cc 	.word	0x080086cc
  ldr r2, =_sbss
 80025b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80025b4:	200049fc 	.word	0x200049fc

080025b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <ADC1_2_IRQHandler>
	...

080025bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_Init+0x28>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_Init+0x28>)
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f000 f8d1 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d2:	200f      	movs	r0, #15
 80025d4:	f7ff fd7e 	bl	80020d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d8:	f7ff fd44 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000

080025e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_IncTick+0x1c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x20>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_IncTick+0x20>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000008 	.word	0x20000008
 8002608:	200049b8 	.word	0x200049b8

0800260c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetTick+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	200049b8 	.word	0x200049b8

08002620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800264c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <__NVIC_SetPriorityGrouping+0x44>)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60d3      	str	r3, [r2, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <__NVIC_GetPriorityGrouping+0x18>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 0307 	and.w	r3, r3, #7
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	2b00      	cmp	r3, #0
 8002694:	db0b      	blt.n	80026ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4906      	ldr	r1, [pc, #24]	; (80026b8 <__NVIC_EnableIRQ+0x34>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2001      	movs	r0, #1
 80026a6:	fa00 f202 	lsl.w	r2, r0, r2
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100

080026bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	; (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	; (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	; 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f1c3 0307 	rsb	r3, r3, #7
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf28      	it	cs
 800272e:	2304      	movcs	r3, #4
 8002730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3304      	adds	r3, #4
 8002736:	2b06      	cmp	r3, #6
 8002738:	d902      	bls.n	8002740 <NVIC_EncodePriority+0x30>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3b03      	subs	r3, #3
 800273e:	e000      	b.n	8002742 <NVIC_EncodePriority+0x32>
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002744:	f04f 32ff 	mov.w	r2, #4294967295
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	43da      	mvns	r2, r3
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	401a      	ands	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002758:	f04f 31ff 	mov.w	r1, #4294967295
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43d9      	mvns	r1, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002768:	4313      	orrs	r3, r2
         );
}
 800276a:	4618      	mov	r0, r3
 800276c:	3724      	adds	r7, #36	; 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff4f 	bl	8002620 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff64 	bl	8002668 <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ffb2 	bl	8002710 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff81 	bl	80026bc <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff57 	bl	8002684 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e043      	b.n	800287e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_DMA_Init+0xa8>)
 80027fe:	4413      	add	r3, r2
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_DMA_Init+0xac>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	009a      	lsls	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_DMA_Init+0xb0>)
 8002812:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800282a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800282e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	bffdfff8 	.word	0xbffdfff8
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Start_IT+0x20>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e04a      	b.n	800294a <HAL_DMA_Start_IT+0xb6>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d13a      	bne.n	800293c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f9e8 	bl	8002cc0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 020e 	orr.w	r2, r2, #14
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e00f      	b.n	800292a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0204 	bic.w	r2, r2, #4
 8002918:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 020a 	orr.w	r2, r2, #10
 8002928:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	e005      	b.n	8002948 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002964:	2b02      	cmp	r3, #2
 8002966:	d008      	beq.n	800297a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2204      	movs	r2, #4
 800296c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e020      	b.n	80029bc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 020e 	bic.w	r2, r2, #14
 8002988:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	2101      	movs	r1, #1
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
	...

080029c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d005      	beq.n	80029ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2204      	movs	r2, #4
 80029e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e051      	b.n	8002a8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 020e 	bic.w	r2, r2, #14
 80029f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0201 	bic.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_DMA_Abort_IT+0xd0>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d029      	beq.n	8002a68 <HAL_DMA_Abort_IT+0xa0>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <HAL_DMA_Abort_IT+0xd4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d022      	beq.n	8002a64 <HAL_DMA_Abort_IT+0x9c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_DMA_Abort_IT+0xd8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d01a      	beq.n	8002a5e <HAL_DMA_Abort_IT+0x96>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_DMA_Abort_IT+0xdc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d012      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x90>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_DMA_Abort_IT+0xe0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00a      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x8a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_DMA_Abort_IT+0xe4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d102      	bne.n	8002a4c <HAL_DMA_Abort_IT+0x84>
 8002a46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a4a:	e00e      	b.n	8002a6a <HAL_DMA_Abort_IT+0xa2>
 8002a4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a50:	e00b      	b.n	8002a6a <HAL_DMA_Abort_IT+0xa2>
 8002a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a56:	e008      	b.n	8002a6a <HAL_DMA_Abort_IT+0xa2>
 8002a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a5c:	e005      	b.n	8002a6a <HAL_DMA_Abort_IT+0xa2>
 8002a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a62:	e002      	b.n	8002a6a <HAL_DMA_Abort_IT+0xa2>
 8002a64:	2310      	movs	r3, #16
 8002a66:	e000      	b.n	8002a6a <HAL_DMA_Abort_IT+0xa2>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_DMA_Abort_IT+0xe8>)
 8002a6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
    } 
  }
  return status;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40020008 	.word	0x40020008
 8002a9c:	4002001c 	.word	0x4002001c
 8002aa0:	40020030 	.word	0x40020030
 8002aa4:	40020044 	.word	0x40020044
 8002aa8:	40020058 	.word	0x40020058
 8002aac:	4002006c 	.word	0x4002006c
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d04f      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xc8>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d107      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a66      	ldr	r2, [pc, #408]	; (8002ca4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d029      	beq.n	8002b62 <HAL_DMA_IRQHandler+0xae>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a65      	ldr	r2, [pc, #404]	; (8002ca8 <HAL_DMA_IRQHandler+0x1f4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_IRQHandler+0xaa>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a63      	ldr	r2, [pc, #396]	; (8002cac <HAL_DMA_IRQHandler+0x1f8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01a      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xa4>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a62      	ldr	r2, [pc, #392]	; (8002cb0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d012      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x9e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a60      	ldr	r2, [pc, #384]	; (8002cb4 <HAL_DMA_IRQHandler+0x200>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00a      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x98>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5f      	ldr	r2, [pc, #380]	; (8002cb8 <HAL_DMA_IRQHandler+0x204>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d102      	bne.n	8002b46 <HAL_DMA_IRQHandler+0x92>
 8002b40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b44:	e00e      	b.n	8002b64 <HAL_DMA_IRQHandler+0xb0>
 8002b46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b4a:	e00b      	b.n	8002b64 <HAL_DMA_IRQHandler+0xb0>
 8002b4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b50:	e008      	b.n	8002b64 <HAL_DMA_IRQHandler+0xb0>
 8002b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b56:	e005      	b.n	8002b64 <HAL_DMA_IRQHandler+0xb0>
 8002b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5c:	e002      	b.n	8002b64 <HAL_DMA_IRQHandler+0xb0>
 8002b5e:	2340      	movs	r3, #64	; 0x40
 8002b60:	e000      	b.n	8002b64 <HAL_DMA_IRQHandler+0xb0>
 8002b62:	2304      	movs	r3, #4
 8002b64:	4a55      	ldr	r2, [pc, #340]	; (8002cbc <HAL_DMA_IRQHandler+0x208>)
 8002b66:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8094 	beq.w	8002c9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b7a:	e08e      	b.n	8002c9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2202      	movs	r2, #2
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d056      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x186>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d051      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 020a 	bic.w	r2, r2, #10
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <HAL_DMA_IRQHandler+0x1f0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d029      	beq.n	8002c1a <HAL_DMA_IRQHandler+0x166>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <HAL_DMA_IRQHandler+0x1f4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d022      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x162>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a35      	ldr	r2, [pc, #212]	; (8002cac <HAL_DMA_IRQHandler+0x1f8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01a      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x15c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_DMA_IRQHandler+0x1fc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d012      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x156>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_DMA_IRQHandler+0x200>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x150>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_DMA_IRQHandler+0x204>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d102      	bne.n	8002bfe <HAL_DMA_IRQHandler+0x14a>
 8002bf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bfc:	e00e      	b.n	8002c1c <HAL_DMA_IRQHandler+0x168>
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	e00b      	b.n	8002c1c <HAL_DMA_IRQHandler+0x168>
 8002c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c08:	e008      	b.n	8002c1c <HAL_DMA_IRQHandler+0x168>
 8002c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0e:	e005      	b.n	8002c1c <HAL_DMA_IRQHandler+0x168>
 8002c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c14:	e002      	b.n	8002c1c <HAL_DMA_IRQHandler+0x168>
 8002c16:	2320      	movs	r3, #32
 8002c18:	e000      	b.n	8002c1c <HAL_DMA_IRQHandler+0x168>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <HAL_DMA_IRQHandler+0x208>)
 8002c1e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d034      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c38:	e02f      	b.n	8002c9a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2208      	movs	r2, #8
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d028      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x1e8>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 020e 	bic.w	r2, r2, #14
 8002c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	4798      	blx	r3
    }
  }
  return;
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
}
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40020008 	.word	0x40020008
 8002ca8:	4002001c 	.word	0x4002001c
 8002cac:	40020030 	.word	0x40020030
 8002cb0:	40020044 	.word	0x40020044
 8002cb4:	40020058 	.word	0x40020058
 8002cb8:	4002006c 	.word	0x4002006c
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b10      	cmp	r3, #16
 8002cec:	d108      	bne.n	8002d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002cfe:	e007      	b.n	8002d10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b08b      	sub	sp, #44	; 0x2c
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2e:	e169      	b.n	8003004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d30:	2201      	movs	r2, #1
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8158 	bne.w	8002ffe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4a9a      	ldr	r2, [pc, #616]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d05e      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d58:	4a98      	ldr	r2, [pc, #608]	; (8002fbc <HAL_GPIO_Init+0x2a0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d875      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d5e:	4a98      	ldr	r2, [pc, #608]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d058      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d64:	4a96      	ldr	r2, [pc, #600]	; (8002fc0 <HAL_GPIO_Init+0x2a4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d86f      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d6a:	4a96      	ldr	r2, [pc, #600]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d052      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d70:	4a94      	ldr	r2, [pc, #592]	; (8002fc4 <HAL_GPIO_Init+0x2a8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d869      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d76:	4a94      	ldr	r2, [pc, #592]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d04c      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d7c:	4a92      	ldr	r2, [pc, #584]	; (8002fc8 <HAL_GPIO_Init+0x2ac>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d863      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d82:	4a92      	ldr	r2, [pc, #584]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d046      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
 8002d88:	4a90      	ldr	r2, [pc, #576]	; (8002fcc <HAL_GPIO_Init+0x2b0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d85d      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d82a      	bhi.n	8002de8 <HAL_GPIO_Init+0xcc>
 8002d92:	2b12      	cmp	r3, #18
 8002d94:	d859      	bhi.n	8002e4a <HAL_GPIO_Init+0x12e>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <HAL_GPIO_Init+0x80>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002e17 	.word	0x08002e17
 8002da0:	08002df1 	.word	0x08002df1
 8002da4:	08002e03 	.word	0x08002e03
 8002da8:	08002e45 	.word	0x08002e45
 8002dac:	08002e4b 	.word	0x08002e4b
 8002db0:	08002e4b 	.word	0x08002e4b
 8002db4:	08002e4b 	.word	0x08002e4b
 8002db8:	08002e4b 	.word	0x08002e4b
 8002dbc:	08002e4b 	.word	0x08002e4b
 8002dc0:	08002e4b 	.word	0x08002e4b
 8002dc4:	08002e4b 	.word	0x08002e4b
 8002dc8:	08002e4b 	.word	0x08002e4b
 8002dcc:	08002e4b 	.word	0x08002e4b
 8002dd0:	08002e4b 	.word	0x08002e4b
 8002dd4:	08002e4b 	.word	0x08002e4b
 8002dd8:	08002e4b 	.word	0x08002e4b
 8002ddc:	08002e4b 	.word	0x08002e4b
 8002de0:	08002df9 	.word	0x08002df9
 8002de4:	08002e0d 	.word	0x08002e0d
 8002de8:	4a79      	ldr	r2, [pc, #484]	; (8002fd0 <HAL_GPIO_Init+0x2b4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dee:	e02c      	b.n	8002e4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	623b      	str	r3, [r7, #32]
          break;
 8002df6:	e029      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	623b      	str	r3, [r7, #32]
          break;
 8002e00:	e024      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	3308      	adds	r3, #8
 8002e08:	623b      	str	r3, [r7, #32]
          break;
 8002e0a:	e01f      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	330c      	adds	r3, #12
 8002e12:	623b      	str	r3, [r7, #32]
          break;
 8002e14:	e01a      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e1e:	2304      	movs	r3, #4
 8002e20:	623b      	str	r3, [r7, #32]
          break;
 8002e22:	e013      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e2c:	2308      	movs	r3, #8
 8002e2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	611a      	str	r2, [r3, #16]
          break;
 8002e36:	e009      	b.n	8002e4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e38:	2308      	movs	r3, #8
 8002e3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	615a      	str	r2, [r3, #20]
          break;
 8002e42:	e003      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e44:	2300      	movs	r3, #0
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x130>
          break;
 8002e4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	2bff      	cmp	r3, #255	; 0xff
 8002e50:	d801      	bhi.n	8002e56 <HAL_GPIO_Init+0x13a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	e001      	b.n	8002e5a <HAL_GPIO_Init+0x13e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2bff      	cmp	r3, #255	; 0xff
 8002e60:	d802      	bhi.n	8002e68 <HAL_GPIO_Init+0x14c>
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	e002      	b.n	8002e6e <HAL_GPIO_Init+0x152>
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	3b08      	subs	r3, #8
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	210f      	movs	r1, #15
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	6a39      	ldr	r1, [r7, #32]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80b1 	beq.w	8002ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e9c:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6193      	str	r3, [r2, #24]
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <HAL_GPIO_Init+0x2b8>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_GPIO_Init+0x2bc>)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	089b      	lsrs	r3, r3, #2
 8002eba:	3302      	adds	r3, #2
 8002ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a40      	ldr	r2, [pc, #256]	; (8002fdc <HAL_GPIO_Init+0x2c0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_GPIO_Init+0x1ec>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3f      	ldr	r2, [pc, #252]	; (8002fe0 <HAL_GPIO_Init+0x2c4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00d      	beq.n	8002f04 <HAL_GPIO_Init+0x1e8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3e      	ldr	r2, [pc, #248]	; (8002fe4 <HAL_GPIO_Init+0x2c8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_Init+0x1e4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <HAL_GPIO_Init+0x2cc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_GPIO_Init+0x1e0>
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e006      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002efc:	2304      	movs	r3, #4
 8002efe:	e004      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f00:	2302      	movs	r3, #2
 8002f02:	e002      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_GPIO_Init+0x1ee>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	f002 0203 	and.w	r2, r2, #3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4093      	lsls	r3, r2
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f1a:	492f      	ldr	r1, [pc, #188]	; (8002fd8 <HAL_GPIO_Init+0x2bc>)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f34:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	492c      	ldr	r1, [pc, #176]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f42:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	4928      	ldr	r1, [pc, #160]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f5c:	4b23      	ldr	r3, [pc, #140]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4922      	ldr	r1, [pc, #136]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	e006      	b.n	8002f78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	491e      	ldr	r1, [pc, #120]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	4918      	ldr	r1, [pc, #96]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]
 8002f90:	e006      	b.n	8002fa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	4914      	ldr	r1, [pc, #80]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	490e      	ldr	r1, [pc, #56]	; (8002fec <HAL_GPIO_Init+0x2d0>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
 8002fb8:	e021      	b.n	8002ffe <HAL_GPIO_Init+0x2e2>
 8002fba:	bf00      	nop
 8002fbc:	10320000 	.word	0x10320000
 8002fc0:	10310000 	.word	0x10310000
 8002fc4:	10220000 	.word	0x10220000
 8002fc8:	10210000 	.word	0x10210000
 8002fcc:	10120000 	.word	0x10120000
 8002fd0:	10110000 	.word	0x10110000
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	40010c00 	.word	0x40010c00
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40011400 	.word	0x40011400
 8002fec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	4909      	ldr	r1, [pc, #36]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	3301      	adds	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	fa22 f303 	lsr.w	r3, r2, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f47f ae8e 	bne.w	8002d30 <HAL_GPIO_Init+0x14>
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	372c      	adds	r7, #44	; 0x2c
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40010400 	.word	0x40010400

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003040:	e003      	b.n	800304a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e26c      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 8087 	beq.w	8003182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003074:	4b92      	ldr	r3, [pc, #584]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	2b04      	cmp	r3, #4
 800307e:	d00c      	beq.n	800309a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003080:	4b8f      	ldr	r3, [pc, #572]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0x5e>
 800308c:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d10b      	bne.n	80030b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309a:	4b89      	ldr	r3, [pc, #548]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d06c      	beq.n	8003180 <HAL_RCC_OscConfig+0x12c>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d168      	bne.n	8003180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e246      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x76>
 80030bc:	4b80      	ldr	r3, [pc, #512]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a7f      	ldr	r2, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e02e      	b.n	8003128 <HAL_RCC_OscConfig+0xd4>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x98>
 80030d2:	4b7b      	ldr	r3, [pc, #492]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a7a      	ldr	r2, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	4b78      	ldr	r3, [pc, #480]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a77      	ldr	r2, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e01d      	b.n	8003128 <HAL_RCC_OscConfig+0xd4>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0xbc>
 80030f6:	4b72      	ldr	r3, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a71      	ldr	r2, [pc, #452]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	4b6f      	ldr	r3, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6e      	ldr	r2, [pc, #440]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e00b      	b.n	8003128 <HAL_RCC_OscConfig+0xd4>
 8003110:	4b6b      	ldr	r3, [pc, #428]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a6a      	ldr	r2, [pc, #424]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff fa6c 	bl	800260c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff fa68 	bl	800260c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1fa      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b5d      	ldr	r3, [pc, #372]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0xe4>
 8003156:	e014      	b.n	8003182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7ff fa58 	bl	800260c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff fa54 	bl	800260c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1e6      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003172:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x10c>
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d063      	beq.n	8003256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318e:	4b4c      	ldr	r3, [pc, #304]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d11c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x18c>
 80031a6:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_RCC_OscConfig+0x176>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e1ba      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4939      	ldr	r1, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	e03a      	b.n	8003256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d020      	beq.n	800322a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7ff fa0d 	bl	800260c <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f6:	f7ff fa09 	bl	800260c <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e19b      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	4927      	ldr	r1, [pc, #156]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
 8003228:	e015      	b.n	8003256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <HAL_RCC_OscConfig+0x270>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7ff f9ec 	bl	800260c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003238:	f7ff f9e8 	bl	800260c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e17a      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03a      	beq.n	80032d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d019      	beq.n	800329e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003270:	f7ff f9cc 	bl	800260c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003278:	f7ff f9c8 	bl	800260c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e15a      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_OscConfig+0x26c>)
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003296:	2001      	movs	r0, #1
 8003298:	f000 fb08 	bl	80038ac <RCC_Delay>
 800329c:	e01c      	b.n	80032d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_RCC_OscConfig+0x274>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a4:	f7ff f9b2 	bl	800260c <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032aa:	e00f      	b.n	80032cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ac:	f7ff f9ae 	bl	800260c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d908      	bls.n	80032cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e140      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	42420000 	.word	0x42420000
 80032c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	4b9e      	ldr	r3, [pc, #632]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1e9      	bne.n	80032ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80a6 	beq.w	8003432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b97      	ldr	r3, [pc, #604]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b94      	ldr	r3, [pc, #592]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a93      	ldr	r2, [pc, #588]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	61d3      	str	r3, [r2, #28]
 8003302:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003312:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_RCC_OscConfig+0x4f8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_RCC_OscConfig+0x4f8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a8a      	ldr	r2, [pc, #552]	; (800354c <HAL_RCC_OscConfig+0x4f8>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7ff f96f 	bl	800260c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7ff f96b 	bl	800260c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	; 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e0fd      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_OscConfig+0x4f8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x312>
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4a7a      	ldr	r2, [pc, #488]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6213      	str	r3, [r2, #32]
 8003364:	e02d      	b.n	80033c2 <HAL_RCC_OscConfig+0x36e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x334>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6213      	str	r3, [r2, #32]
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a72      	ldr	r2, [pc, #456]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	6213      	str	r3, [r2, #32]
 8003386:	e01c      	b.n	80033c2 <HAL_RCC_OscConfig+0x36e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x356>
 8003390:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6213      	str	r3, [r2, #32]
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4a69      	ldr	r2, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6213      	str	r3, [r2, #32]
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x36e>
 80033aa:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4a66      	ldr	r2, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6213      	str	r3, [r2, #32]
 80033b6:	4b64      	ldr	r3, [pc, #400]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a63      	ldr	r2, [pc, #396]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ca:	f7ff f91f 	bl	800260c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7ff f91b 	bl	800260c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0ab      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	4b57      	ldr	r3, [pc, #348]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCC_OscConfig+0x37e>
 80033f4:	e014      	b.n	8003420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7ff f909 	bl	800260c <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7ff f905 	bl	800260c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e095      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b48      	ldr	r3, [pc, #288]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	4a47      	ldr	r2, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8081 	beq.w	800353e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343c:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d061      	beq.n	800350c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d146      	bne.n	80034de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_OscConfig+0x4fc>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003456:	f7ff f8d9 	bl	800260c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345e:	f7ff f8d5 	bl	800260c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e067      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003470:	4b35      	ldr	r3, [pc, #212]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f0      	bne.n	800345e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d108      	bne.n	8003498 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	492d      	ldr	r1, [pc, #180]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a19      	ldr	r1, [r3, #32]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	430b      	orrs	r3, r1
 80034aa:	4927      	ldr	r1, [pc, #156]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_RCC_OscConfig+0x4fc>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b6:	f7ff f8a9 	bl	800260c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034be:	f7ff f8a5 	bl	800260c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e037      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d0:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x46a>
 80034dc:	e02f      	b.n	800353e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <HAL_RCC_OscConfig+0x4fc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7ff f892 	bl	800260c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7ff f88e 	bl	800260c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e020      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fe:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x498>
 800350a:	e018      	b.n	800353e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e013      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	429a      	cmp	r2, r3
 800352a:	d106      	bne.n	800353a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40021000 	.word	0x40021000
 800354c:	40007000 	.word	0x40007000
 8003550:	42420060 	.word	0x42420060

08003554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e0d0      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003568:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d910      	bls.n	8003598 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b67      	ldr	r3, [pc, #412]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 0207 	bic.w	r2, r3, #7
 800357e:	4965      	ldr	r1, [pc, #404]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	4313      	orrs	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003586:	4b63      	ldr	r3, [pc, #396]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0b8      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d020      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a52      	ldr	r2, [pc, #328]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d4:	4b50      	ldr	r3, [pc, #320]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	494d      	ldr	r1, [pc, #308]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d040      	beq.n	8003674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d107      	bne.n	800360a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fa:	4b47      	ldr	r3, [pc, #284]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d115      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e07f      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d107      	bne.n	8003622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003612:	4b41      	ldr	r3, [pc, #260]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d109      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e073      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003622:	4b3d      	ldr	r3, [pc, #244]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06b      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b39      	ldr	r3, [pc, #228]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4936      	ldr	r1, [pc, #216]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003644:	f7fe ffe2 	bl	800260c <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7fe ffde 	bl	800260c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e053      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003674:	4b27      	ldr	r3, [pc, #156]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d210      	bcs.n	80036a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 0207 	bic.w	r2, r3, #7
 800368a:	4922      	ldr	r1, [pc, #136]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e032      	b.n	800370a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4916      	ldr	r1, [pc, #88]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	490e      	ldr	r1, [pc, #56]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036e2:	f000 f821 	bl	8003728 <HAL_RCC_GetSysClockFreq>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	490a      	ldr	r1, [pc, #40]	; (800371c <HAL_RCC_ClockConfig+0x1c8>)
 80036f4:	5ccb      	ldrb	r3, [r1, r3]
 80036f6:	fa22 f303 	lsr.w	r3, r2, r3
 80036fa:	4a09      	ldr	r2, [pc, #36]	; (8003720 <HAL_RCC_ClockConfig+0x1cc>)
 80036fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1d0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe fce6 	bl	80020d4 <HAL_InitTick>

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40022000 	.word	0x40022000
 8003718:	40021000 	.word	0x40021000
 800371c:	080086ac 	.word	0x080086ac
 8003720:	20000000 	.word	0x20000000
 8003724:	20000004 	.word	0x20000004

08003728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003728:	b490      	push	{r4, r7}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003730:	1d3c      	adds	r4, r7, #4
 8003732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003738:	f240 2301 	movw	r3, #513	; 0x201
 800373c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
 800374a:	2300      	movs	r3, #0
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b04      	cmp	r3, #4
 8003760:	d002      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x40>
 8003762:	2b08      	cmp	r3, #8
 8003764:	d003      	beq.n	800376e <HAL_RCC_GetSysClockFreq+0x46>
 8003766:	e02d      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376a:	623b      	str	r3, [r7, #32]
      break;
 800376c:	e02d      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	0c9b      	lsrs	r3, r3, #18
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800377a:	4413      	add	r3, r2
 800377c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003780:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d013      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800378c:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	0c5b      	lsrs	r3, r3, #17
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800379a:	4413      	add	r3, r2
 800379c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a6:	fb02 f203 	mul.w	r2, r2, r3
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	e004      	b.n	80037be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	4a0b      	ldr	r2, [pc, #44]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	623b      	str	r3, [r7, #32]
      break;
 80037c2:	e002      	b.n	80037ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c6:	623b      	str	r3, [r7, #32]
      break;
 80037c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	; 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc90      	pop	{r4, r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	080085a0 	.word	0x080085a0
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200
 80037e4:	003d0900 	.word	0x003d0900

080037e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037ec:	4b02      	ldr	r3, [pc, #8]	; (80037f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ee:	681b      	ldr	r3, [r3, #0]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	20000000 	.word	0x20000000

080037fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003800:	f7ff fff2 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4903      	ldr	r1, [pc, #12]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40021000 	.word	0x40021000
 8003820:	080086bc 	.word	0x080086bc

08003824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003828:	f7ff ffde 	bl	80037e8 <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0adb      	lsrs	r3, r3, #11
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	080086bc 	.word	0x080086bc

0800384c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	220f      	movs	r2, #15
 800385a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <HAL_RCC_GetClockConfig+0x58>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <HAL_RCC_GetClockConfig+0x58>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_GetClockConfig+0x58>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <HAL_RCC_GetClockConfig+0x58>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_RCC_GetClockConfig+0x5c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0207 	and.w	r2, r3, #7
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40022000 	.word	0x40022000

080038ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <RCC_Delay+0x34>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <RCC_Delay+0x38>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	0a5b      	lsrs	r3, r3, #9
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038c8:	bf00      	nop
  }
  while (Delay --);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	60fa      	str	r2, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f9      	bne.n	80038c8 <RCC_Delay+0x1c>
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	20000000 	.word	0x20000000
 80038e4:	10624dd3 	.word	0x10624dd3

080038e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e041      	b.n	800397e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f839 	bl	8003986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 f9b4 	bl	8003c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d001      	beq.n	80039b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e03a      	b.n	8003a26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <HAL_TIM_Base_Start_IT+0x98>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x58>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039da:	d009      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x58>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_TIM_Base_Start_IT+0x9c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x58>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <HAL_TIM_Base_Start_IT+0xa0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d111      	bne.n	8003a14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d010      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0201 	orr.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a12:	e007      	b.n	8003a24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800

08003a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0202 	mvn.w	r2, #2
 8003a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8ed 	bl	8003c5e <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8e0 	bl	8003c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8ef 	bl	8003c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0204 	mvn.w	r2, #4
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f8c3 	bl	8003c5e <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f8b6 	bl	8003c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8c5 	bl	8003c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0208 	mvn.w	r2, #8
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2204      	movs	r2, #4
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f899 	bl	8003c5e <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f88c 	bl	8003c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f89b 	bl	8003c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0210 	mvn.w	r2, #16
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f86f 	bl	8003c5e <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f862 	bl	8003c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f871 	bl	8003c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0201 	mvn.w	r2, #1
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe fa3a 	bl	8002034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8bf 	bl	8003d6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f835 	bl	8003c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f88a 	bl	8003d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bc80      	pop	{r7}
 8003c92:	4770      	bx	lr

08003c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb2:	d007      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <TIM_Base_SetConfig+0xbc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_Base_SetConfig+0x30>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a25      	ldr	r2, [pc, #148]	; (8003d54 <TIM_Base_SetConfig+0xc0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d108      	bne.n	8003cd6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <TIM_Base_SetConfig+0xbc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0x62>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a18      	ldr	r2, [pc, #96]	; (8003d54 <TIM_Base_SetConfig+0xc0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <TIM_Base_SetConfig+0xb8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40012c00 	.word	0x40012c00
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800

08003d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e03f      	b.n	8003e0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe faa4 	bl	80022f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 ff67 	bl	8004c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	4613      	mov	r3, r2
 8003e22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d130      	bne.n	8003e92 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_Transmit_IT+0x26>
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e029      	b.n	8003e94 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Transmit_IT+0x38>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e022      	b.n	8003e94 <HAL_UART_Transmit_IT+0x7e>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	88fa      	ldrh	r2, [r7, #6]
 8003e66:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2221      	movs	r2, #33	; 0x21
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d11d      	bne.n	8003ef4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_UART_Receive_IT+0x26>
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d101      	bne.n	8003ec8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e016      	b.n	8003ef6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_UART_Receive_IT+0x38>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e00f      	b.n	8003ef6 <HAL_UART_Receive_IT+0x58>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fcb7 	bl	800485e <UART_Start_Receive_IT>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d153      	bne.n	8003fc2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_UART_Transmit_DMA+0x26>
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e04c      	b.n	8003fc4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_UART_Transmit_DMA+0x38>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e045      	b.n	8003fc4 <HAL_UART_Transmit_DMA+0xc4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2221      	movs	r2, #33	; 0x21
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_UART_Transmit_DMA+0xcc>)
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_UART_Transmit_DMA+0xd0>)
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_UART_Transmit_DMA+0xd4>)
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3304      	adds	r3, #4
 8003f94:	461a      	mov	r2, r3
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	f7fe fc7c 	bl	8002894 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695a      	ldr	r2, [r3, #20]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fbc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e000      	b.n	8003fc4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
  }
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	08004691 	.word	0x08004691
 8003fd0:	080046e3 	.word	0x080046e3
 8003fd4:	080047cb 	.word	0x080047cb

08003fd8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b21      	cmp	r3, #33	; 0x21
 8004004:	d116      	bne.n	8004034 <HAL_UART_DMAStop+0x5c>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800401a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	2b00      	cmp	r3, #0
 8004022:	d004      	beq.n	800402e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe fc92 	bl	8002952 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fcb2 	bl	8004998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b22      	cmp	r3, #34	; 0x22
 8004054:	d116      	bne.n	8004084 <HAL_UART_DMAStop+0xac>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695a      	ldr	r2, [r3, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fc6a 	bl	8002952 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fc9f 	bl	80049c2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	4613      	mov	r3, r2
 800409a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d13c      	bne.n	8004122 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e035      	b.n	8004124 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e02e      	b.n	8004124 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fbf8 	bl	80048d0 <UART_Start_Receive_DMA>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d119      	bne.n	800411e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d113      	bne.n	800411a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040f2:	2300      	movs	r3, #0
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0210 	orr.w	r2, r2, #16
 8004116:	60da      	str	r2, [r3, #12]
 8004118:	e001      	b.n	800411e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	e000      	b.n	8004124 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004142:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	d107      	bne.n	800416c <HAL_UART_AbortReceive_IT+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0210 	bic.w	r2, r2, #16
 800416a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d02d      	beq.n	80041d6 <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004188:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d013      	beq.n	80041ba <HAL_UART_AbortReceive_IT+0x8e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_UART_AbortReceive_IT+0xd0>)
 8004198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc12 	bl	80029c8 <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d022      	beq.n	80041f0 <HAL_UART_AbortReceive_IT+0xc4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b4:	4610      	mov	r0, r2
 80041b6:	4798      	blx	r3
 80041b8:	e01a      	b.n	80041f0 <HAL_UART_AbortReceive_IT+0xc4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f9d2 	bl	8004578 <HAL_UART_AbortReceiveCpltCallback>
 80041d4:	e00c      	b.n	80041f0 <HAL_UART_AbortReceive_IT+0xc4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f9c4 	bl	8004578 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	08004a43 	.word	0x08004a43

08004200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004220:	2300      	movs	r3, #0
 8004222:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_UART_IRQHandler+0x52>
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fc78 	bl	8004b40 <UART_Receive_IT>
      return;
 8004250:	e17b      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80b1 	beq.w	80043bc <HAL_UART_IRQHandler+0x1bc>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_UART_IRQHandler+0x70>
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80a6 	beq.w	80043bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_UART_IRQHandler+0x90>
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	f043 0201 	orr.w	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_UART_IRQHandler+0xb0>
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0202 	orr.w	r2, r3, #2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_UART_IRQHandler+0xd0>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f043 0204 	orr.w	r2, r3, #4
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00f      	beq.n	80042fa <HAL_UART_IRQHandler+0xfa>
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <HAL_UART_IRQHandler+0xee>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 811e 	beq.w	8004540 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_UART_IRQHandler+0x11e>
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 fc11 	bl	8004b40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <HAL_UART_IRQHandler+0x146>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d031      	beq.n	80043aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fb3b 	bl	80049c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d023      	beq.n	80043a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004368:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	2b00      	cmp	r3, #0
 8004370:	d013      	beq.n	800439a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	4a76      	ldr	r2, [pc, #472]	; (8004550 <HAL_UART_IRQHandler+0x350>)
 8004378:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fb22 	bl	80029c8 <HAL_DMA_Abort_IT>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004394:	4610      	mov	r0, r2
 8004396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004398:	e00e      	b.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fb5a 	bl	8001a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e00a      	b.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fd fb56 	bl	8001a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e006      	b.n	80043b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fb52 	bl	8001a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80043b6:	e0c3      	b.n	8004540 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b8:	bf00      	nop
    return;
 80043ba:	e0c1      	b.n	8004540 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	f040 80a1 	bne.w	8004508 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 809b 	beq.w	8004508 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f003 0310 	and.w	r3, r3, #16
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8095 	beq.w	8004508 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04e      	beq.n	80044a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800440c:	8a3b      	ldrh	r3, [r7, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8098 	beq.w	8004544 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004418:	8a3a      	ldrh	r2, [r7, #16]
 800441a:	429a      	cmp	r2, r3
 800441c:	f080 8092 	bcs.w	8004544 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8a3a      	ldrh	r2, [r7, #16]
 8004424:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b20      	cmp	r3, #32
 800442e:	d02b      	beq.n	8004488 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0210 	bic.w	r2, r2, #16
 800447c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe fa65 	bl	8002952 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004490:	b29b      	uxth	r3, r3
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fd fb33 	bl	8001b04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800449e:	e051      	b.n	8004544 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d047      	beq.n	8004548 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d044      	beq.n	8004548 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80044cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0210 	bic.w	r2, r2, #16
 80044fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044fc:	8a7b      	ldrh	r3, [r7, #18]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7fd faff 	bl	8001b04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004506:	e01f      	b.n	8004548 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_UART_IRQHandler+0x324>
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 faa8 	bl	8004a72 <UART_Transmit_IT>
    return;
 8004522:	e012      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_UART_IRQHandler+0x34a>
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fae9 	bl	8004b10 <UART_EndTransmit_IT>
    return;
 800453e:	e004      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
    return;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
      return;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_UART_IRQHandler+0x34a>
      return;
 8004548:	bf00      	nop
  }
}
 800454a:	3728      	adds	r7, #40	; 0x28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08004a1b 	.word	0x08004a1b

08004554 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr

0800458a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e020      	b.n	80045e6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2224      	movs	r2, #36	; 0x24
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 030c 	bic.w	r3, r3, #12
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f043 0308 	orr.w	r3, r3, #8
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_HalfDuplex_EnableReceiver+0x1a>
 8004606:	2302      	movs	r3, #2
 8004608:	e020      	b.n	800464c <HAL_HalfDuplex_EnableReceiver+0x5c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2224      	movs	r2, #36	; 0x24
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f023 030c 	bic.w	r3, r3, #12
 8004628:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004676:	b2db      	uxtb	r3, r3
 8004678:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	4313      	orrs	r3, r2
 8004684:	b2db      	uxtb	r3, r3
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d113      	bne.n	80046d4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695a      	ldr	r2, [r3, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046c0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046d0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046d2:	e002      	b.n	80046da <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7fd f915 	bl	8001904 <HAL_UART_TxCpltCallback>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff ff2f 	bl	8004554 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d12a      	bne.n	8004770 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800472e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0210 	bic.w	r2, r2, #16
 800476e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	2b01      	cmp	r3, #1
 8004776:	d106      	bne.n	8004786 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800477c:	4619      	mov	r1, r3
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7fd f9c0 	bl	8001b04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004784:	e002      	b.n	800478c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7fd f8fa 	bl	8001980 <HAL_UART_RxCpltCallback>
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d108      	bne.n	80047bc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f7fd f9a5 	bl	8001b04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047ba:	e002      	b.n	80047c2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fed2 	bl	8004566 <HAL_UART_RxHalfCpltCallback>
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b21      	cmp	r3, #33	; 0x21
 80047fc:	d108      	bne.n	8004810 <UART_DMAError+0x46>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	f000 f8c4 	bl	8004998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b22      	cmp	r3, #34	; 0x22
 8004830:	d108      	bne.n	8004844 <UART_DMAError+0x7a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2200      	movs	r2, #0
 800483c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800483e:	68b8      	ldr	r0, [r7, #8]
 8004840:	f000 f8bf 	bl	80049c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f043 0210 	orr.w	r2, r3, #16
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004850:	68b8      	ldr	r0, [r7, #8]
 8004852:	f7fd f8ff 	bl	8001a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	4613      	mov	r3, r2
 800486a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2222      	movs	r2, #34	; 0x22
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0220 	orr.w	r2, r2, #32
 80048c2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2222      	movs	r2, #34	; 0x22
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <UART_Start_Receive_DMA+0xbc>)
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	4a22      	ldr	r2, [pc, #136]	; (8004990 <UART_Start_Receive_DMA+0xc0>)
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	4a21      	ldr	r2, [pc, #132]	; (8004994 <UART_Start_Receive_DMA+0xc4>)
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	2200      	movs	r2, #0
 8004916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004918:	f107 0308 	add.w	r3, r7, #8
 800491c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	f7fd ffb0 	bl	8002894 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004934:	2300      	movs	r3, #0
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004960:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	695a      	ldr	r2, [r3, #20]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004980:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	080046ff 	.word	0x080046ff
 8004990:	08004795 	.word	0x08004795
 8004994:	080047cb 	.word	0x080047cb

08004998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80049ae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr

080049c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80049d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0201 	bic.w	r2, r2, #1
 80049e8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0210 	bic.w	r2, r2, #16
 8004a00:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bc80      	pop	{r7}
 8004a18:	4770      	bx	lr

08004a1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7fd f80d 	bl	8001a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fd87 	bl	8004578 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6a:	bf00      	nop
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b21      	cmp	r3, #33	; 0x21
 8004a84:	d13e      	bne.n	8004b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8e:	d114      	bne.n	8004aba <UART_Transmit_IT+0x48>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d110      	bne.n	8004aba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	621a      	str	r2, [r3, #32]
 8004ab8:	e008      	b.n	8004acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6211      	str	r1, [r2, #32]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10f      	bne.n	8004b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e000      	b.n	8004b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
  }
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fc fee7 	bl	8001904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b22      	cmp	r3, #34	; 0x22
 8004b52:	f040 8099 	bne.w	8004c88 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5e:	d117      	bne.n	8004b90 <UART_Receive_IT+0x50>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d113      	bne.n	8004b90 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8004b8e:	e026      	b.n	8004bde <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d007      	beq.n	8004bb4 <UART_Receive_IT+0x74>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <UART_Receive_IT+0x82>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	e008      	b.n	8004bd4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4619      	mov	r1, r3
 8004bec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d148      	bne.n	8004c84 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0220 	bic.w	r2, r2, #32
 8004c00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d123      	bne.n	8004c7a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0210 	bic.w	r2, r2, #16
 8004c46:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d10a      	bne.n	8004c6c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc ff46 	bl	8001b04 <HAL_UARTEx_RxEventCallback>
 8004c78:	e002      	b.n	8004c80 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc fe80 	bl	8001980 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e002      	b.n	8004c8a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	e000      	b.n	8004c8a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
  }
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689a      	ldr	r2, [r3, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004cce:	f023 030c 	bic.w	r3, r3, #12
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <UART_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d103      	bne.n	8004d04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cfc:	f7fe fd92 	bl	8003824 <HAL_RCC_GetPCLK2Freq>
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	e002      	b.n	8004d0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7fe fd7a 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8004d08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <UART_SetConfig+0x118>)
 8004d22:	fba2 2303 	umull	r2, r3, r2, r3
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	0119      	lsls	r1, r3, #4
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <UART_SetConfig+0x118>)
 8004d42:	fba3 0302 	umull	r0, r3, r3, r2
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2064      	movs	r0, #100	; 0x64
 8004d4a:	fb00 f303 	mul.w	r3, r0, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	3332      	adds	r3, #50	; 0x32
 8004d54:	4a15      	ldr	r2, [pc, #84]	; (8004dac <UART_SetConfig+0x118>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d60:	4419      	add	r1, r3
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009a      	lsls	r2, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <UART_SetConfig+0x118>)
 8004d7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2064      	movs	r0, #100	; 0x64
 8004d82:	fb00 f303 	mul.w	r3, r0, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	3332      	adds	r3, #50	; 0x32
 8004d8c:	4a07      	ldr	r2, [pc, #28]	; (8004dac <UART_SetConfig+0x118>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40013800 	.word	0x40013800
 8004dac:	51eb851f 	.word	0x51eb851f

08004db0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db6:	f3ef 8305 	mrs	r3, IPSR
 8004dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <osKernelInitialize+0x32>
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <osKernelInitialize+0x60>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d109      	bne.n	8004dea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	603b      	str	r3, [r7, #0]
  return(result);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004de2:	f06f 0305 	mvn.w	r3, #5
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e00c      	b.n	8004e04 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <osKernelInitialize+0x60>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <osKernelInitialize+0x60>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e002      	b.n	8004e04 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004e02:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	20000030 	.word	0x20000030

08004e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1a:	f3ef 8305 	mrs	r3, IPSR
 8004e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e26:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2a:	607b      	str	r3, [r7, #4]
  return(result);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <osKernelStart+0x32>
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <osKernelStart+0x64>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d109      	bne.n	8004e4e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e46:	f06f 0305 	mvn.w	r3, #5
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e00e      	b.n	8004e6c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <osKernelStart+0x64>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <osKernelStart+0x64>)
 8004e58:	2202      	movs	r2, #2
 8004e5a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004e5c:	f001 fbdc 	bl	8006618 <vTaskStartScheduler>
      stat = osOK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e002      	b.n	8004e6c <osKernelStart+0x58>
    } else {
      stat = osError;
 8004e66:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	20000030 	.word	0x20000030

08004e7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b092      	sub	sp, #72	; 0x48
 8004e80:	af04      	add	r7, sp, #16
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8c:	f3ef 8305 	mrs	r3, IPSR
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f040 8095 	bne.w	8004fc4 <osThreadNew+0x148>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9e:	623b      	str	r3, [r7, #32]
  return(result);
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 808e 	bne.w	8004fc4 <osThreadNew+0x148>
 8004ea8:	4b49      	ldr	r3, [pc, #292]	; (8004fd0 <osThreadNew+0x154>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d106      	bne.n	8004ebe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8083 	bne.w	8004fc4 <osThreadNew+0x148>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d07f      	beq.n	8004fc4 <osThreadNew+0x148>
    stack = configMINIMAL_STACK_SIZE;
 8004ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ec8:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004eca:	2318      	movs	r3, #24
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004ece:	2300      	movs	r3, #0
 8004ed0:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004ed2:	f107 031b 	add.w	r3, r7, #27
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d045      	beq.n	8004f70 <osThreadNew+0xf4>
      if (attr->name != NULL) {
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <osThreadNew+0x76>
        name = attr->name;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <osThreadNew+0x84>
        prio = (UBaseType_t)attr->priority;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <osThreadNew+0x9c>
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2b38      	cmp	r3, #56	; 0x38
 8004f0a:	d805      	bhi.n	8004f18 <osThreadNew+0x9c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <osThreadNew+0xa0>
        return (NULL);
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e054      	b.n	8004fc6 <osThreadNew+0x14a>
      }

      if (attr->stack_size > 0U) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <osThreadNew+0xb0>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00e      	beq.n	8004f52 <osThreadNew+0xd6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	2b5b      	cmp	r3, #91	; 0x5b
 8004f3a:	d90a      	bls.n	8004f52 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d006      	beq.n	8004f52 <osThreadNew+0xd6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <osThreadNew+0xd6>
        mem = 1;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f50:	e010      	b.n	8004f74 <osThreadNew+0xf8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10c      	bne.n	8004f74 <osThreadNew+0xf8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d108      	bne.n	8004f74 <osThreadNew+0xf8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d104      	bne.n	8004f74 <osThreadNew+0xf8>
          mem = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f6e:	e001      	b.n	8004f74 <osThreadNew+0xf8>
        }
      }
    }
    else {
      mem = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d110      	bne.n	8004f9c <osThreadNew+0x120>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f82:	9202      	str	r2, [sp, #8]
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f001 f975 	bl	8006280 <xTaskCreateStatic>
 8004f96:	4603      	mov	r3, r0
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	e013      	b.n	8004fc4 <osThreadNew+0x148>
    }
    else {
      if (mem == 0) {
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d110      	bne.n	8004fc4 <osThreadNew+0x148>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f001 f9bf 	bl	8006338 <xTaskCreate>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d001      	beq.n	8004fc4 <osThreadNew+0x148>
          hTask = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fc4:	697b      	ldr	r3, [r7, #20]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3738      	adds	r7, #56	; 0x38
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000030 	.word	0x20000030

08004fd4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fda:	f3ef 8305 	mrs	r3, IPSR
 8004fde:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10f      	bne.n	8005006 <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	607b      	str	r3, [r7, #4]
  return(result);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <osThreadGetId+0x32>
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	; (800501c <osThreadGetId+0x48>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d108      	bne.n	800500c <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ffa:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <osThreadGetId+0x38>
    id = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	e002      	b.n	8005012 <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800500c:	f001 ff62 	bl	8006ed4 <xTaskGetCurrentTaskHandle>
 8005010:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8005012:	68fb      	ldr	r3, [r7, #12]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000030 	.word	0x20000030

08005020 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005028:	f3ef 8305 	mrs	r3, IPSR
 800502c:	613b      	str	r3, [r7, #16]
  return(result);
 800502e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10f      	bne.n	8005054 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005034:	f3ef 8310 	mrs	r3, PRIMASK
 8005038:	60fb      	str	r3, [r7, #12]
  return(result);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <osDelay+0x34>
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <osDelay+0x58>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d109      	bne.n	800505c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005048:	f3ef 8311 	mrs	r3, BASEPRI
 800504c:	60bb      	str	r3, [r7, #8]
  return(result);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <osDelay+0x3c>
    stat = osErrorISR;
 8005054:	f06f 0305 	mvn.w	r3, #5
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e007      	b.n	800506c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f001 faa2 	bl	80065b0 <vTaskDelay>
    }
  }

  return (stat);
 800506c:	697b      	ldr	r3, [r7, #20]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000030 	.word	0x20000030

0800507c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b08c      	sub	sp, #48	; 0x30
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800508c:	f3ef 8305 	mrs	r3, IPSR
 8005090:	61bb      	str	r3, [r7, #24]
  return(result);
 8005092:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005094:	2b00      	cmp	r3, #0
 8005096:	f040 8086 	bne.w	80051a6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	617b      	str	r3, [r7, #20]
  return(result);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d17f      	bne.n	80051a6 <osSemaphoreNew+0x12a>
 80050a6:	4b42      	ldr	r3, [pc, #264]	; (80051b0 <osSemaphoreNew+0x134>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d105      	bne.n	80050ba <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050ae:	f3ef 8311 	mrs	r3, BASEPRI
 80050b2:	613b      	str	r3, [r7, #16]
  return(result);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d175      	bne.n	80051a6 <osSemaphoreNew+0x12a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d072      	beq.n	80051a6 <osSemaphoreNew+0x12a>
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d86e      	bhi.n	80051a6 <osSemaphoreNew+0x12a>
    mem = -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d015      	beq.n	8005100 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d006      	beq.n	80050ea <osSemaphoreNew+0x6e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	2b4f      	cmp	r3, #79	; 0x4f
 80050e2:	d902      	bls.n	80050ea <osSemaphoreNew+0x6e>
        mem = 1;
 80050e4:	2301      	movs	r3, #1
 80050e6:	623b      	str	r3, [r7, #32]
 80050e8:	e00c      	b.n	8005104 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d108      	bne.n	8005104 <osSemaphoreNew+0x88>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <osSemaphoreNew+0x88>
          mem = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	e001      	b.n	8005104 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d04c      	beq.n	80051a6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d128      	bne.n	8005164 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10a      	bne.n	800512e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2203      	movs	r2, #3
 800511e:	9200      	str	r2, [sp, #0]
 8005120:	2200      	movs	r2, #0
 8005122:	2100      	movs	r1, #0
 8005124:	2001      	movs	r0, #1
 8005126:	f000 fa17 	bl	8005558 <xQueueGenericCreateStatic>
 800512a:	6278      	str	r0, [r7, #36]	; 0x24
 800512c:	e005      	b.n	800513a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800512e:	2203      	movs	r2, #3
 8005130:	2100      	movs	r1, #0
 8005132:	2001      	movs	r0, #1
 8005134:	f000 fa87 	bl	8005646 <xQueueGenericCreate>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d022      	beq.n	8005186 <osSemaphoreNew+0x10a>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01f      	beq.n	8005186 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005146:	2300      	movs	r3, #0
 8005148:	2200      	movs	r2, #0
 800514a:	2100      	movs	r1, #0
 800514c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800514e:	f000 fb45 	bl	80057dc <xQueueGenericSend>
 8005152:	4603      	mov	r3, r0
 8005154:	2b01      	cmp	r3, #1
 8005156:	d016      	beq.n	8005186 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800515a:	f000 fec1 	bl	8005ee0 <vQueueDelete>
            hSemaphore = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	627b      	str	r3, [r7, #36]	; 0x24
 8005162:	e010      	b.n	8005186 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d108      	bne.n	800517c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	461a      	mov	r2, r3
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fac8 	bl	8005708 <xQueueCreateCountingSemaphoreStatic>
 8005178:	6278      	str	r0, [r7, #36]	; 0x24
 800517a:	e004      	b.n	8005186 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 faf9 	bl	8005776 <xQueueCreateCountingSemaphore>
 8005184:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00c      	beq.n	80051a6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <osSemaphoreNew+0x11e>
          name = attr->name;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e001      	b.n	800519e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800519e:	69f9      	ldr	r1, [r7, #28]
 80051a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051a2:	f000 ffe7 	bl	8006174 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000030 	.word	0x20000030

080051b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08c      	sub	sp, #48	; 0x30
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80051c0:	2300      	movs	r3, #0
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c4:	f3ef 8305 	mrs	r3, IPSR
 80051c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80051ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d16f      	bne.n	80052b0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d0:	f3ef 8310 	mrs	r3, PRIMASK
 80051d4:	617b      	str	r3, [r7, #20]
  return(result);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d169      	bne.n	80052b0 <osMessageQueueNew+0xfc>
 80051dc:	4b37      	ldr	r3, [pc, #220]	; (80052bc <osMessageQueueNew+0x108>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d105      	bne.n	80051f0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051e4:	f3ef 8311 	mrs	r3, BASEPRI
 80051e8:	613b      	str	r3, [r7, #16]
  return(result);
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d15f      	bne.n	80052b0 <osMessageQueueNew+0xfc>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d05c      	beq.n	80052b0 <osMessageQueueNew+0xfc>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d059      	beq.n	80052b0 <osMessageQueueNew+0xfc>
    mem = -1;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d029      	beq.n	800525c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d012      	beq.n	8005236 <osMessageQueueNew+0x82>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	2b4f      	cmp	r3, #79	; 0x4f
 8005216:	d90e      	bls.n	8005236 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <osMessageQueueNew+0x82>
        mem = 1;
 8005230:	2301      	movs	r3, #1
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	e014      	b.n	8005260 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d110      	bne.n	8005260 <osMessageQueueNew+0xac>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10c      	bne.n	8005260 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800524a:	2b00      	cmp	r3, #0
 800524c:	d108      	bne.n	8005260 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <osMessageQueueNew+0xac>
          mem = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	623b      	str	r3, [r7, #32]
 800525a:	e001      	b.n	8005260 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d10b      	bne.n	800527e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2100      	movs	r1, #0
 8005270:	9100      	str	r1, [sp, #0]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f96f 	bl	8005558 <xQueueGenericCreateStatic>
 800527a:	6278      	str	r0, [r7, #36]	; 0x24
 800527c:	e008      	b.n	8005290 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d105      	bne.n	8005290 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005284:	2200      	movs	r2, #0
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f9dc 	bl	8005646 <xQueueGenericCreate>
 800528e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00c      	beq.n	80052b0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	61fb      	str	r3, [r7, #28]
 80052a2:	e001      	b.n	80052a8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80052a8:	69f9      	ldr	r1, [r7, #28]
 80052aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052ac:	f000 ff62 	bl	8006174 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3728      	adds	r7, #40	; 0x28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000030 	.word	0x20000030

080052c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a07      	ldr	r2, [pc, #28]	; (80052ec <vApplicationGetIdleTaskMemory+0x2c>)
 80052d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a06      	ldr	r2, [pc, #24]	; (80052f0 <vApplicationGetIdleTaskMemory+0x30>)
 80052d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000034 	.word	0x20000034
 80052f0:	20000090 	.word	0x20000090

080052f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a07      	ldr	r2, [pc, #28]	; (8005320 <vApplicationGetTimerTaskMemory+0x2c>)
 8005304:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4a06      	ldr	r2, [pc, #24]	; (8005324 <vApplicationGetTimerTaskMemory+0x30>)
 800530a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005312:	601a      	str	r2, [r3, #0]
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000490 	.word	0x20000490
 8005324:	200004ec 	.word	0x200004ec

08005328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f103 0208 	add.w	r2, r3, #8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f04f 32ff 	mov.w	r2, #4294967295
 8005340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f103 0208 	add.w	r2, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f103 0208 	add.w	r2, r3, #8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	683a      	ldr	r2, [r7, #0]
 80053a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d103      	bne.n	80053e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e00c      	b.n	80053fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3308      	adds	r3, #8
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e002      	b.n	80053f2 <vListInsert+0x2e>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d2f6      	bcs.n	80053ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	601a      	str	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6892      	ldr	r2, [r2, #8]
 800544a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6852      	ldr	r2, [r2, #4]
 8005454:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d103      	bne.n	8005468 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	1e5a      	subs	r2, r3, #1
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr
	...

08005488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80054b2:	f002 fd13 	bl	8007edc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	441a      	add	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	3b01      	subs	r3, #1
 80054e4:	68f9      	ldr	r1, [r7, #12]
 80054e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	441a      	add	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	22ff      	movs	r2, #255	; 0xff
 80054fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d114      	bne.n	8005532 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01a      	beq.n	8005546 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3310      	adds	r3, #16
 8005514:	4618      	mov	r0, r3
 8005516:	f001 fb1b 	bl	8006b50 <xTaskRemoveFromEventList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d012      	beq.n	8005546 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005520:	4b0c      	ldr	r3, [pc, #48]	; (8005554 <xQueueGenericReset+0xcc>)
 8005522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	e009      	b.n	8005546 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3310      	adds	r3, #16
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff fef6 	bl	8005328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3324      	adds	r3, #36	; 0x24
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fef1 	bl	8005328 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005546:	f002 fcf9 	bl	8007f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800554a:	2301      	movs	r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	e000ed04 	.word	0xe000ed04

08005558 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08e      	sub	sp, #56	; 0x38
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10a      	bne.n	800559e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
}
 800559a:	bf00      	nop
 800559c:	e7fe      	b.n	800559c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <xQueueGenericCreateStatic+0x52>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <xQueueGenericCreateStatic+0x56>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xQueueGenericCreateStatic+0x58>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	623b      	str	r3, [r7, #32]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <xQueueGenericCreateStatic+0x7e>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <xQueueGenericCreateStatic+0x82>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueGenericCreateStatic+0x84>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	61fb      	str	r3, [r7, #28]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055f6:	2350      	movs	r3, #80	; 0x50
 80055f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2b50      	cmp	r3, #80	; 0x50
 80055fe:	d00a      	beq.n	8005616 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	61bb      	str	r3, [r7, #24]
}
 8005612:	bf00      	nop
 8005614:	e7fe      	b.n	8005614 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005628:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f843 	bl	80056c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800563e:	4618      	mov	r0, r3
 8005640:	3730      	adds	r7, #48	; 0x30
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005646:	b580      	push	{r7, lr}
 8005648:	b08a      	sub	sp, #40	; 0x28
 800564a:	af02      	add	r7, sp, #8
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	4613      	mov	r3, r2
 8005652:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <xQueueGenericCreate+0x2a>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	613b      	str	r3, [r7, #16]
}
 800566c:	bf00      	nop
 800566e:	e7fe      	b.n	800566e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	e004      	b.n	8005686 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	fb02 f303 	mul.w	r3, r2, r3
 8005684:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3350      	adds	r3, #80	; 0x50
 800568a:	4618      	mov	r0, r3
 800568c:	f002 fd26 	bl	80080dc <pvPortMalloc>
 8005690:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00f      	beq.n	80056b8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	3350      	adds	r3, #80	; 0x50
 800569c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056a6:	79fa      	ldrb	r2, [r7, #7]
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f805 	bl	80056c2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056b8:	69bb      	ldr	r3, [r7, #24]
	}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e002      	b.n	80056e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	68ba      	ldr	r2, [r7, #8]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056f0:	2101      	movs	r1, #1
 80056f2:	69b8      	ldr	r0, [r7, #24]
 80056f4:	f7ff fec8 	bl	8005488 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	78fa      	ldrb	r2, [r7, #3]
 80056fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08a      	sub	sp, #40	; 0x28
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10a      	bne.n	8005730 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	61bb      	str	r3, [r7, #24]
}
 800572c:	bf00      	nop
 800572e:	e7fe      	b.n	800572e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	429a      	cmp	r2, r3
 8005736:	d90a      	bls.n	800574e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	617b      	str	r3, [r7, #20]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800574e:	2302      	movs	r3, #2
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	2100      	movs	r1, #0
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff fefd 	bl	8005558 <xQueueGenericCreateStatic>
 800575e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800576c:	69fb      	ldr	r3, [r7, #28]
	}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005776:	b580      	push	{r7, lr}
 8005778:	b086      	sub	sp, #24
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	613b      	str	r3, [r7, #16]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d90a      	bls.n	80057ba <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	60fb      	str	r3, [r7, #12]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057ba:	2202      	movs	r2, #2
 80057bc:	2100      	movs	r1, #0
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff ff41 	bl	8005646 <xQueueGenericCreate>
 80057c4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80057d2:	697b      	ldr	r3, [r7, #20]
	}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08e      	sub	sp, #56	; 0x38
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10a      	bne.n	800580e <xQueueGenericSend+0x32>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800580a:	bf00      	nop
 800580c:	e7fe      	b.n	800580c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <xQueueGenericSend+0x40>
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <xQueueGenericSend+0x44>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <xQueueGenericSend+0x46>
 8005820:	2300      	movs	r3, #0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10a      	bne.n	800583c <xQueueGenericSend+0x60>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d103      	bne.n	800584a <xQueueGenericSend+0x6e>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <xQueueGenericSend+0x72>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <xQueueGenericSend+0x74>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueGenericSend+0x8e>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	623b      	str	r3, [r7, #32]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800586a:	f001 fb41 	bl	8006ef0 <xTaskGetSchedulerState>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d102      	bne.n	800587a <xQueueGenericSend+0x9e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <xQueueGenericSend+0xa2>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericSend+0xa4>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSend+0xbe>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61fb      	str	r3, [r7, #28]
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800589a:	f002 fb1f 	bl	8007edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <xQueueGenericSend+0xd4>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d129      	bne.n	8005904 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058b6:	f000 fb4d 	bl	8005f54 <prvCopyDataToQueue>
 80058ba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	3324      	adds	r3, #36	; 0x24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f941 	bl	8006b50 <xTaskRemoveFromEventList>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d013      	beq.n	80058fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058d4:	4b3f      	ldr	r3, [pc, #252]	; (80059d4 <xQueueGenericSend+0x1f8>)
 80058d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	e00a      	b.n	80058fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80058e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80058ec:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <xQueueGenericSend+0x1f8>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80058fc:	f002 fb1e 	bl	8007f3c <vPortExitCritical>
				return pdPASS;
 8005900:	2301      	movs	r3, #1
 8005902:	e063      	b.n	80059cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d103      	bne.n	8005912 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800590a:	f002 fb17 	bl	8007f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800590e:	2300      	movs	r3, #0
 8005910:	e05c      	b.n	80059cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005914:	2b00      	cmp	r3, #0
 8005916:	d106      	bne.n	8005926 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005918:	f107 0314 	add.w	r3, r7, #20
 800591c:	4618      	mov	r0, r3
 800591e:	f001 f97b 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005922:	2301      	movs	r3, #1
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005926:	f002 fb09 	bl	8007f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800592a:	f000 fedb 	bl	80066e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800592e:	f002 fad5 	bl	8007edc <vPortEnterCritical>
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005938:	b25b      	sxtb	r3, r3
 800593a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593e:	d103      	bne.n	8005948 <xQueueGenericSend+0x16c>
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594e:	b25b      	sxtb	r3, r3
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005954:	d103      	bne.n	800595e <xQueueGenericSend+0x182>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800595e:	f002 faed 	bl	8007f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005962:	1d3a      	adds	r2, r7, #4
 8005964:	f107 0314 	add.w	r3, r7, #20
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f96a 	bl	8006c44 <xTaskCheckForTimeOut>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d124      	bne.n	80059c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005978:	f000 fbe4 	bl	8006144 <prvIsQueueFull>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	3310      	adds	r3, #16
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 f890 	bl	8006ab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005992:	f000 fb6f 	bl	8006074 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005996:	f000 feb3 	bl	8006700 <xTaskResumeAll>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f af7c 	bne.w	800589a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <xQueueGenericSend+0x1f8>)
 80059a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	e772      	b.n	800589a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b6:	f000 fb5d 	bl	8006074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059ba:	f000 fea1 	bl	8006700 <xTaskResumeAll>
 80059be:	e76c      	b.n	800589a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 fb57 	bl	8006074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059c6:	f000 fe9b 	bl	8006700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ca:	2300      	movs	r3, #0
		}
	}
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3738      	adds	r7, #56	; 0x38
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	e000ed04 	.word	0xe000ed04

080059d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08e      	sub	sp, #56	; 0x38
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <xQueueGenericSendFromISR+0x3c>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <xQueueGenericSendFromISR+0x40>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <xQueueGenericSendFromISR+0x42>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	623b      	str	r3, [r7, #32]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSendFromISR+0x6a>
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <xQueueGenericSendFromISR+0x6e>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <xQueueGenericSendFromISR+0x70>
 8005a46:	2300      	movs	r3, #0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10a      	bne.n	8005a62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	61fb      	str	r3, [r7, #28]
}
 8005a5e:	bf00      	nop
 8005a60:	e7fe      	b.n	8005a60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a62:	f002 fafd 	bl	8008060 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a66:	f3ef 8211 	mrs	r2, BASEPRI
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	61ba      	str	r2, [r7, #24]
 8005a7c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d302      	bcc.n	8005a94 <xQueueGenericSendFromISR+0xbc>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d12c      	bne.n	8005aee <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa4:	f000 fa56 	bl	8005f54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005aa8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab0:	d112      	bne.n	8005ad8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d016      	beq.n	8005ae8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	3324      	adds	r3, #36	; 0x24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 f846 	bl	8006b50 <xTaskRemoveFromEventList>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e007      	b.n	8005ae8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005adc:	3301      	adds	r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	b25a      	sxtb	r2, r3
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005aec:	e001      	b.n	8005af2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005afc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3738      	adds	r7, #56	; 0x38
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08c      	sub	sp, #48	; 0x30
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <xQueueReceive+0x30>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	623b      	str	r3, [r7, #32]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <xQueueReceive+0x3e>
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <xQueueReceive+0x42>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueReceive+0x44>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <xQueueReceive+0x5e>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61fb      	str	r3, [r7, #28]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b66:	f001 f9c3 	bl	8006ef0 <xTaskGetSchedulerState>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <xQueueReceive+0x6e>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <xQueueReceive+0x72>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <xQueueReceive+0x74>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xQueueReceive+0x8e>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	61bb      	str	r3, [r7, #24]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b96:	f002 f9a1 	bl	8007edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01f      	beq.n	8005be6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005baa:	f000 fa3d 	bl	8006028 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00f      	beq.n	8005bde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 ffc4 	bl	8006b50 <xTaskRemoveFromEventList>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bce:	4b3d      	ldr	r3, [pc, #244]	; (8005cc4 <xQueueReceive+0x1bc>)
 8005bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bde:	f002 f9ad 	bl	8007f3c <vPortExitCritical>
				return pdPASS;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e069      	b.n	8005cba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d103      	bne.n	8005bf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bec:	f002 f9a6 	bl	8007f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e062      	b.n	8005cba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bfa:	f107 0310 	add.w	r3, r7, #16
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f80a 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c08:	f002 f998 	bl	8007f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c0c:	f000 fd6a 	bl	80066e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c10:	f002 f964 	bl	8007edc <vPortEnterCritical>
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d103      	bne.n	8005c2a <xQueueReceive+0x122>
 8005c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c30:	b25b      	sxtb	r3, r3
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d103      	bne.n	8005c40 <xQueueReceive+0x138>
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c40:	f002 f97c 	bl	8007f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c44:	1d3a      	adds	r2, r7, #4
 8005c46:	f107 0310 	add.w	r3, r7, #16
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fff9 	bl	8006c44 <xTaskCheckForTimeOut>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d123      	bne.n	8005ca0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c5a:	f000 fa5d 	bl	8006118 <prvIsQueueEmpty>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d017      	beq.n	8005c94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	3324      	adds	r3, #36	; 0x24
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 ff1f 	bl	8006ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c74:	f000 f9fe 	bl	8006074 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c78:	f000 fd42 	bl	8006700 <xTaskResumeAll>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d189      	bne.n	8005b96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <xQueueReceive+0x1bc>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	e780      	b.n	8005b96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c96:	f000 f9ed 	bl	8006074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c9a:	f000 fd31 	bl	8006700 <xTaskResumeAll>
 8005c9e:	e77a      	b.n	8005b96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ca2:	f000 f9e7 	bl	8006074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ca6:	f000 fd2b 	bl	8006700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cac:	f000 fa34 	bl	8006118 <prvIsQueueEmpty>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f43f af6f 	beq.w	8005b96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3730      	adds	r7, #48	; 0x30
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	623b      	str	r3, [r7, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	61fb      	str	r3, [r7, #28]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d18:	f001 f8ea 	bl	8006ef0 <xTaskGetSchedulerState>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <xQueueSemaphoreTake+0x60>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <xQueueSemaphoreTake+0x64>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e000      	b.n	8005d2e <xQueueSemaphoreTake+0x66>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	61bb      	str	r3, [r7, #24]
}
 8005d44:	bf00      	nop
 8005d46:	e7fe      	b.n	8005d46 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d48:	f002 f8c8 	bl	8007edc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d024      	beq.n	8005da2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005d68:	f001 fa42 	bl	80071f0 <pvTaskIncrementMutexHeldCount>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	3310      	adds	r3, #16
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fee6 	bl	8006b50 <xTaskRemoveFromEventList>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d007      	beq.n	8005d9a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d8a:	4b54      	ldr	r3, [pc, #336]	; (8005edc <xQueueSemaphoreTake+0x214>)
 8005d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d9a:	f002 f8cf 	bl	8007f3c <vPortExitCritical>
				return pdPASS;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e097      	b.n	8005ed2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d111      	bne.n	8005dcc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	617b      	str	r3, [r7, #20]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005dc4:	f002 f8ba 	bl	8007f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e082      	b.n	8005ed2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 ff1e 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005de0:	f002 f8ac 	bl	8007f3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005de4:	f000 fc7e 	bl	80066e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005de8:	f002 f878 	bl	8007edc <vPortEnterCritical>
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005df2:	b25b      	sxtb	r3, r3
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d103      	bne.n	8005e02 <xQueueSemaphoreTake+0x13a>
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e08:	b25b      	sxtb	r3, r3
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d103      	bne.n	8005e18 <xQueueSemaphoreTake+0x150>
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e18:	f002 f890 	bl	8007f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e1c:	463a      	mov	r2, r7
 8005e1e:	f107 030c 	add.w	r3, r7, #12
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 ff0d 	bl	8006c44 <xTaskCheckForTimeOut>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d132      	bne.n	8005e96 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e32:	f000 f971 	bl	8006118 <prvIsQueueEmpty>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d026      	beq.n	8005e8a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005e44:	f002 f84a 	bl	8007edc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 f86d 	bl	8006f2c <xTaskPriorityInherit>
 8005e52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005e54:	f002 f872 	bl	8007f3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	3324      	adds	r3, #36	; 0x24
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 fe25 	bl	8006ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e68:	f000 f904 	bl	8006074 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e6c:	f000 fc48 	bl	8006700 <xTaskResumeAll>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f47f af68 	bne.w	8005d48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e78:	4b18      	ldr	r3, [pc, #96]	; (8005edc <xQueueSemaphoreTake+0x214>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	e75e      	b.n	8005d48 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e8c:	f000 f8f2 	bl	8006074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e90:	f000 fc36 	bl	8006700 <xTaskResumeAll>
 8005e94:	e758      	b.n	8005d48 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e98:	f000 f8ec 	bl	8006074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e9c:	f000 fc30 	bl	8006700 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ea2:	f000 f939 	bl	8006118 <prvIsQueueEmpty>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f43f af4d 	beq.w	8005d48 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00d      	beq.n	8005ed0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005eb4:	f002 f812 	bl	8007edc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005eba:	f000 f834 	bl	8005f26 <prvGetDisinheritPriorityAfterTimeout>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f90c 	bl	80070e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005ecc:	f002 f836 	bl	8007f3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ed0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3738      	adds	r7, #56	; 0x38
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <vQueueDelete+0x28>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60bb      	str	r3, [r7, #8]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 f95b 	bl	80061c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f002 f9a3 	bl	8008264 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f26:	b480      	push	{r7}
 8005f28:	b085      	sub	sp, #20
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e001      	b.n	8005f48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f48:	68fb      	ldr	r3, [r7, #12]
	}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d14d      	bne.n	8006016 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f842 	bl	8007008 <xTaskPriorityDisinherit>
 8005f84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	e043      	b.n	8006016 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d119      	bne.n	8005fc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6898      	ldr	r0, [r3, #8]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68b9      	ldr	r1, [r7, #8]
 8005fa0:	f002 fa98 	bl	80084d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	441a      	add	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d32b      	bcc.n	8006016 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	e026      	b.n	8006016 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68d8      	ldr	r0, [r3, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	f002 fa7e 	bl	80084d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	425b      	negs	r3, r3
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68da      	ldr	r2, [r3, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d207      	bcs.n	8006004 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d105      	bne.n	8006016 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3b01      	subs	r3, #1
 8006014:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800601e:	697b      	ldr	r3, [r7, #20]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d018      	beq.n	800606c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	441a      	add	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d303      	bcc.n	800605c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68d9      	ldr	r1, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	461a      	mov	r2, r3
 8006066:	6838      	ldr	r0, [r7, #0]
 8006068:	f002 fa34 	bl	80084d4 <memcpy>
	}
}
 800606c:	bf00      	nop
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800607c:	f001 ff2e 	bl	8007edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006086:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006088:	e011      	b.n	80060ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fd5a 	bl	8006b50 <xTaskRemoveFromEventList>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060a2:	f000 fe31 	bl	8006d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dce9      	bgt.n	800608a <prvUnlockQueue+0x16>
 80060b6:	e000      	b.n	80060ba <prvUnlockQueue+0x46>
					break;
 80060b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 ff3b 	bl	8007f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80060c6:	f001 ff09 	bl	8007edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060d2:	e011      	b.n	80060f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d012      	beq.n	8006102 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3310      	adds	r3, #16
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fd35 	bl	8006b50 <xTaskRemoveFromEventList>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060ec:	f000 fe0c 	bl	8006d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060f0:	7bbb      	ldrb	r3, [r7, #14]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	dce9      	bgt.n	80060d4 <prvUnlockQueue+0x60>
 8006100:	e000      	b.n	8006104 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006102:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	22ff      	movs	r2, #255	; 0xff
 8006108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800610c:	f001 ff16 	bl	8007f3c <vPortExitCritical>
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006120:	f001 fedc 	bl	8007edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800612c:	2301      	movs	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e001      	b.n	8006136 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f001 ff01 	bl	8007f3c <vPortExitCritical>

	return xReturn;
 800613a:	68fb      	ldr	r3, [r7, #12]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800614c:	f001 fec6 	bl	8007edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	429a      	cmp	r2, r3
 800615a:	d102      	bne.n	8006162 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	e001      	b.n	8006166 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006166:	f001 fee9 	bl	8007f3c <vPortExitCritical>

	return xReturn;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	e014      	b.n	80061ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006184:	4a0e      	ldr	r2, [pc, #56]	; (80061c0 <vQueueAddToRegistry+0x4c>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006190:	490b      	ldr	r1, [pc, #44]	; (80061c0 <vQueueAddToRegistry+0x4c>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vQueueAddToRegistry+0x4c>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4413      	add	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061a6:	e006      	b.n	80061b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3301      	adds	r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b07      	cmp	r3, #7
 80061b2:	d9e7      	bls.n	8006184 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	200049bc 	.word	0x200049bc

080061c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e016      	b.n	8006200 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80061d2:	4a10      	ldr	r2, [pc, #64]	; (8006214 <vQueueUnregisterQueue+0x50>)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	4413      	add	r3, r2
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d10b      	bne.n	80061fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80061e2:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <vQueueUnregisterQueue+0x50>)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2100      	movs	r1, #0
 80061e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80061ec:	4a09      	ldr	r2, [pc, #36]	; (8006214 <vQueueUnregisterQueue+0x50>)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]
				break;
 80061f8:	e006      	b.n	8006208 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b07      	cmp	r3, #7
 8006204:	d9e5      	bls.n	80061d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	200049bc 	.word	0x200049bc

08006218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006228:	f001 fe58 	bl	8007edc <vPortEnterCritical>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d103      	bne.n	8006242 <vQueueWaitForMessageRestricted+0x2a>
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006248:	b25b      	sxtb	r3, r3
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d103      	bne.n	8006258 <vQueueWaitForMessageRestricted+0x40>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006258:	f001 fe70 	bl	8007f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d106      	bne.n	8006272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	3324      	adds	r3, #36	; 0x24
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	68b9      	ldr	r1, [r7, #8]
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fc43 	bl	8006af8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006272:	6978      	ldr	r0, [r7, #20]
 8006274:	f7ff fefe 	bl	8006074 <prvUnlockQueue>
	}
 8006278:	bf00      	nop
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08e      	sub	sp, #56	; 0x38
 8006284:	af04      	add	r7, sp, #16
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	623b      	str	r3, [r7, #32]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	61fb      	str	r3, [r7, #28]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062c6:	235c      	movs	r3, #92	; 0x5c
 80062c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b5c      	cmp	r3, #92	; 0x5c
 80062ce:	d00a      	beq.n	80062e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	61bb      	str	r3, [r7, #24]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01e      	beq.n	800632a <xTaskCreateStatic+0xaa>
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01b      	beq.n	800632a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006304:	2300      	movs	r3, #0
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	9302      	str	r3, [sp, #8]
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f850 	bl	80063c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006324:	f000 f8d4 	bl	80064d0 <prvAddNewTaskToReadyList>
 8006328:	e001      	b.n	800632e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800632e:	697b      	ldr	r3, [r7, #20]
	}
 8006330:	4618      	mov	r0, r3
 8006332:	3728      	adds	r7, #40	; 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af04      	add	r7, sp, #16
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4618      	mov	r0, r3
 800634e:	f001 fec5 	bl	80080dc <pvPortMalloc>
 8006352:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00e      	beq.n	8006378 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800635a:	205c      	movs	r0, #92	; 0x5c
 800635c:	f001 febe 	bl	80080dc <pvPortMalloc>
 8006360:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
 800636e:	e005      	b.n	800637c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006370:	6978      	ldr	r0, [r7, #20]
 8006372:	f001 ff77 	bl	8008264 <vPortFree>
 8006376:	e001      	b.n	800637c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d017      	beq.n	80063b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800638a:	88fa      	ldrh	r2, [r7, #6]
 800638c:	2300      	movs	r3, #0
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	9302      	str	r3, [sp, #8]
 8006394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f80e 	bl	80063c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a6:	69f8      	ldr	r0, [r7, #28]
 80063a8:	f000 f892 	bl	80064d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063ac:	2301      	movs	r3, #1
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	e002      	b.n	80063b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063b8:	69bb      	ldr	r3, [r7, #24]
	}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b088      	sub	sp, #32
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	461a      	mov	r2, r3
 80063da:	21a5      	movs	r1, #165	; 0xa5
 80063dc:	f002 f888 	bl	80084f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063ea:	3b01      	subs	r3, #1
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	f023 0307 	bic.w	r3, r3, #7
 80063f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00a      	beq.n	800641a <prvInitialiseNewTask+0x58>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	617b      	str	r3, [r7, #20]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e012      	b.n	8006446 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	7819      	ldrb	r1, [r3, #0]
 8006428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	3334      	adds	r3, #52	; 0x34
 8006430:	460a      	mov	r2, r1
 8006432:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	3301      	adds	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d9e9      	bls.n	8006420 <prvInitialiseNewTask+0x5e>
 800644c:	e000      	b.n	8006450 <prvInitialiseNewTask+0x8e>
		{
			break;
 800644e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	2b37      	cmp	r3, #55	; 0x37
 800645c:	d901      	bls.n	8006462 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800645e:	2337      	movs	r3, #55	; 0x37
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800646c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	3304      	adds	r3, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f7fe ff74 	bl	8005366 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	3318      	adds	r3, #24
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe ff6f 	bl	8005366 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800648c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2200      	movs	r2, #0
 80064a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	68f9      	ldr	r1, [r7, #12]
 80064b0:	69b8      	ldr	r0, [r7, #24]
 80064b2:	f001 fc21 	bl	8007cf8 <pxPortInitialiseStack>
 80064b6:	4602      	mov	r2, r0
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064c8:	bf00      	nop
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064d8:	f001 fd00 	bl	8007edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064dc:	4b2d      	ldr	r3, [pc, #180]	; (8006594 <prvAddNewTaskToReadyList+0xc4>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3301      	adds	r3, #1
 80064e2:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <prvAddNewTaskToReadyList+0xc4>)
 80064e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064e6:	4b2c      	ldr	r3, [pc, #176]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064f4:	4b27      	ldr	r3, [pc, #156]	; (8006594 <prvAddNewTaskToReadyList+0xc4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d110      	bne.n	800651e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064fc:	f000 fc28 	bl	8006d50 <prvInitialiseTaskLists>
 8006500:	e00d      	b.n	800651e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006502:	4b26      	ldr	r3, [pc, #152]	; (800659c <prvAddNewTaskToReadyList+0xcc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d109      	bne.n	800651e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	429a      	cmp	r2, r3
 8006516:	d802      	bhi.n	800651e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006518:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800651e:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <prvAddNewTaskToReadyList+0xd0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	4a1e      	ldr	r2, [pc, #120]	; (80065a0 <prvAddNewTaskToReadyList+0xd0>)
 8006526:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006528:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <prvAddNewTaskToReadyList+0xd0>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <prvAddNewTaskToReadyList+0xd4>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d903      	bls.n	8006544 <prvAddNewTaskToReadyList+0x74>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <prvAddNewTaskToReadyList+0xd4>)
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <prvAddNewTaskToReadyList+0xd8>)
 8006552:	441a      	add	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3304      	adds	r3, #4
 8006558:	4619      	mov	r1, r3
 800655a:	4610      	mov	r0, r2
 800655c:	f7fe ff0f 	bl	800537e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006560:	f001 fcec 	bl	8007f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006564:	4b0d      	ldr	r3, [pc, #52]	; (800659c <prvAddNewTaskToReadyList+0xcc>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00e      	beq.n	800658a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <prvAddNewTaskToReadyList+0xc8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	429a      	cmp	r2, r3
 8006578:	d207      	bcs.n	800658a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <prvAddNewTaskToReadyList+0xdc>)
 800657c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	f3bf 8f4f 	dsb	sy
 8006586:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	200011c0 	.word	0x200011c0
 8006598:	20000cec 	.word	0x20000cec
 800659c:	200011cc 	.word	0x200011cc
 80065a0:	200011dc 	.word	0x200011dc
 80065a4:	200011c8 	.word	0x200011c8
 80065a8:	20000cf0 	.word	0x20000cf0
 80065ac:	e000ed04 	.word	0xe000ed04

080065b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d017      	beq.n	80065f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <vTaskDelay+0x60>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <vTaskDelay+0x30>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60bb      	str	r3, [r7, #8]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065e0:	f000 f880 	bl	80066e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 ffcc 	bl	8007584 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065ec:	f000 f888 	bl	8006700 <xTaskResumeAll>
 80065f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d107      	bne.n	8006608 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065f8:	4b06      	ldr	r3, [pc, #24]	; (8006614 <vTaskDelay+0x64>)
 80065fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200011e8 	.word	0x200011e8
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006626:	463a      	mov	r2, r7
 8006628:	1d39      	adds	r1, r7, #4
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fe46 	bl	80052c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	9202      	str	r2, [sp, #8]
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	2300      	movs	r3, #0
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	460a      	mov	r2, r1
 8006646:	4921      	ldr	r1, [pc, #132]	; (80066cc <vTaskStartScheduler+0xb4>)
 8006648:	4821      	ldr	r0, [pc, #132]	; (80066d0 <vTaskStartScheduler+0xb8>)
 800664a:	f7ff fe19 	bl	8006280 <xTaskCreateStatic>
 800664e:	4603      	mov	r3, r0
 8006650:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <vTaskStartScheduler+0xbc>)
 8006652:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006654:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <vTaskStartScheduler+0xbc>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800665c:	2301      	movs	r3, #1
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e001      	b.n	8006666 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d102      	bne.n	8006672 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800666c:	f000 ffde 	bl	800762c <xTimerCreateTimerTask>
 8006670:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d116      	bne.n	80066a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	613b      	str	r3, [r7, #16]
}
 800668a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <vTaskStartScheduler+0xc0>)
 800668e:	f04f 32ff 	mov.w	r2, #4294967295
 8006692:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006694:	4b11      	ldr	r3, [pc, #68]	; (80066dc <vTaskStartScheduler+0xc4>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800669a:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <vTaskStartScheduler+0xc8>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066a0:	f001 fbaa 	bl	8007df8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066a4:	e00e      	b.n	80066c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d10a      	bne.n	80066c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60fb      	str	r3, [r7, #12]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <vTaskStartScheduler+0xaa>
}
 80066c4:	bf00      	nop
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	080085b0 	.word	0x080085b0
 80066d0:	08006d21 	.word	0x08006d21
 80066d4:	200011e4 	.word	0x200011e4
 80066d8:	200011e0 	.word	0x200011e0
 80066dc:	200011cc 	.word	0x200011cc
 80066e0:	200011c4 	.word	0x200011c4

080066e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <vTaskSuspendAll+0x18>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	4a03      	ldr	r2, [pc, #12]	; (80066fc <vTaskSuspendAll+0x18>)
 80066f0:	6013      	str	r3, [r2, #0]
}
 80066f2:	bf00      	nop
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200011e8 	.word	0x200011e8

08006700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800670e:	4b42      	ldr	r3, [pc, #264]	; (8006818 <xTaskResumeAll+0x118>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10a      	bne.n	800672c <xTaskResumeAll+0x2c>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	603b      	str	r3, [r7, #0]
}
 8006728:	bf00      	nop
 800672a:	e7fe      	b.n	800672a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800672c:	f001 fbd6 	bl	8007edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006730:	4b39      	ldr	r3, [pc, #228]	; (8006818 <xTaskResumeAll+0x118>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3b01      	subs	r3, #1
 8006736:	4a38      	ldr	r2, [pc, #224]	; (8006818 <xTaskResumeAll+0x118>)
 8006738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800673a:	4b37      	ldr	r3, [pc, #220]	; (8006818 <xTaskResumeAll+0x118>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d162      	bne.n	8006808 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006742:	4b36      	ldr	r3, [pc, #216]	; (800681c <xTaskResumeAll+0x11c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d05e      	beq.n	8006808 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800674a:	e02f      	b.n	80067ac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800674c:	4b34      	ldr	r3, [pc, #208]	; (8006820 <xTaskResumeAll+0x120>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3318      	adds	r3, #24
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fe6b 	bl	8005434 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fe66 	bl	8005434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4b2d      	ldr	r3, [pc, #180]	; (8006824 <xTaskResumeAll+0x124>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d903      	bls.n	800677c <xTaskResumeAll+0x7c>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	4a2a      	ldr	r2, [pc, #168]	; (8006824 <xTaskResumeAll+0x124>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4a27      	ldr	r2, [pc, #156]	; (8006828 <xTaskResumeAll+0x128>)
 800678a:	441a      	add	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	3304      	adds	r3, #4
 8006790:	4619      	mov	r1, r3
 8006792:	4610      	mov	r0, r2
 8006794:	f7fe fdf3 	bl	800537e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679c:	4b23      	ldr	r3, [pc, #140]	; (800682c <xTaskResumeAll+0x12c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <xTaskResumeAll+0x130>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067ac:	4b1c      	ldr	r3, [pc, #112]	; (8006820 <xTaskResumeAll+0x120>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1cb      	bne.n	800674c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067ba:	f000 fb67 	bl	8006e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <xTaskResumeAll+0x134>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d010      	beq.n	80067ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067ca:	f000 f857 	bl	800687c <xTaskIncrementTick>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067d4:	4b16      	ldr	r3, [pc, #88]	; (8006830 <xTaskResumeAll+0x130>)
 80067d6:	2201      	movs	r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3b01      	subs	r3, #1
 80067de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f1      	bne.n	80067ca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80067e6:	4b13      	ldr	r3, [pc, #76]	; (8006834 <xTaskResumeAll+0x134>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067ec:	4b10      	ldr	r3, [pc, #64]	; (8006830 <xTaskResumeAll+0x130>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d009      	beq.n	8006808 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067f4:	2301      	movs	r3, #1
 80067f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <xTaskResumeAll+0x138>)
 80067fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006808:	f001 fb98 	bl	8007f3c <vPortExitCritical>

	return xAlreadyYielded;
 800680c:	68bb      	ldr	r3, [r7, #8]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200011e8 	.word	0x200011e8
 800681c:	200011c0 	.word	0x200011c0
 8006820:	20001180 	.word	0x20001180
 8006824:	200011c8 	.word	0x200011c8
 8006828:	20000cf0 	.word	0x20000cf0
 800682c:	20000cec 	.word	0x20000cec
 8006830:	200011d4 	.word	0x200011d4
 8006834:	200011d0 	.word	0x200011d0
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006842:	4b04      	ldr	r3, [pc, #16]	; (8006854 <xTaskGetTickCount+0x18>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006848:	687b      	ldr	r3, [r7, #4]
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr
 8006854:	200011c4 	.word	0x200011c4

08006858 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800685e:	f001 fbff 	bl	8008060 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006862:	2300      	movs	r3, #0
 8006864:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006866:	4b04      	ldr	r3, [pc, #16]	; (8006878 <xTaskGetTickCountFromISR+0x20>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800686c:	683b      	ldr	r3, [r7, #0]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	200011c4 	.word	0x200011c4

0800687c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006886:	4b51      	ldr	r3, [pc, #324]	; (80069cc <xTaskIncrementTick+0x150>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 808e 	bne.w	80069ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006890:	4b4f      	ldr	r3, [pc, #316]	; (80069d0 <xTaskIncrementTick+0x154>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3301      	adds	r3, #1
 8006896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006898:	4a4d      	ldr	r2, [pc, #308]	; (80069d0 <xTaskIncrementTick+0x154>)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d120      	bne.n	80068e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80068a4:	4b4b      	ldr	r3, [pc, #300]	; (80069d4 <xTaskIncrementTick+0x158>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	603b      	str	r3, [r7, #0]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <xTaskIncrementTick+0x46>
 80068c4:	4b43      	ldr	r3, [pc, #268]	; (80069d4 <xTaskIncrementTick+0x158>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	4b43      	ldr	r3, [pc, #268]	; (80069d8 <xTaskIncrementTick+0x15c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a41      	ldr	r2, [pc, #260]	; (80069d4 <xTaskIncrementTick+0x158>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4a41      	ldr	r2, [pc, #260]	; (80069d8 <xTaskIncrementTick+0x15c>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	4b40      	ldr	r3, [pc, #256]	; (80069dc <xTaskIncrementTick+0x160>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3301      	adds	r3, #1
 80068de:	4a3f      	ldr	r2, [pc, #252]	; (80069dc <xTaskIncrementTick+0x160>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	f000 fad3 	bl	8006e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068e6:	4b3e      	ldr	r3, [pc, #248]	; (80069e0 <xTaskIncrementTick+0x164>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d34e      	bcc.n	800698e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068f0:	4b38      	ldr	r3, [pc, #224]	; (80069d4 <xTaskIncrementTick+0x158>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <xTaskIncrementTick+0x82>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <xTaskIncrementTick+0x84>
 80068fe:	2300      	movs	r3, #0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006904:	4b36      	ldr	r3, [pc, #216]	; (80069e0 <xTaskIncrementTick+0x164>)
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	601a      	str	r2, [r3, #0]
					break;
 800690c:	e03f      	b.n	800698e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800690e:	4b31      	ldr	r3, [pc, #196]	; (80069d4 <xTaskIncrementTick+0x158>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	429a      	cmp	r2, r3
 8006924:	d203      	bcs.n	800692e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006926:	4a2e      	ldr	r2, [pc, #184]	; (80069e0 <xTaskIncrementTick+0x164>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6013      	str	r3, [r2, #0]
						break;
 800692c:	e02f      	b.n	800698e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3304      	adds	r3, #4
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fd7e 	bl	8005434 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3318      	adds	r3, #24
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fd75 	bl	8005434 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694e:	4b25      	ldr	r3, [pc, #148]	; (80069e4 <xTaskIncrementTick+0x168>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d903      	bls.n	800695e <xTaskIncrementTick+0xe2>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <xTaskIncrementTick+0x168>)
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4a1f      	ldr	r2, [pc, #124]	; (80069e8 <xTaskIncrementTick+0x16c>)
 800696c:	441a      	add	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fe fd02 	bl	800537e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <xTaskIncrementTick+0x170>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	429a      	cmp	r2, r3
 8006986:	d3b3      	bcc.n	80068f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800698c:	e7b0      	b.n	80068f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <xTaskIncrementTick+0x170>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4914      	ldr	r1, [pc, #80]	; (80069e8 <xTaskIncrementTick+0x16c>)
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d907      	bls.n	80069b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80069a6:	2301      	movs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e004      	b.n	80069b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80069ac:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <xTaskIncrementTick+0x174>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	4a0f      	ldr	r2, [pc, #60]	; (80069f0 <xTaskIncrementTick+0x174>)
 80069b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <xTaskIncrementTick+0x178>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80069be:	2301      	movs	r3, #1
 80069c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069c2:	697b      	ldr	r3, [r7, #20]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	200011e8 	.word	0x200011e8
 80069d0:	200011c4 	.word	0x200011c4
 80069d4:	20001178 	.word	0x20001178
 80069d8:	2000117c 	.word	0x2000117c
 80069dc:	200011d8 	.word	0x200011d8
 80069e0:	200011e0 	.word	0x200011e0
 80069e4:	200011c8 	.word	0x200011c8
 80069e8:	20000cf0 	.word	0x20000cf0
 80069ec:	20000cec 	.word	0x20000cec
 80069f0:	200011d0 	.word	0x200011d0
 80069f4:	200011d4 	.word	0x200011d4

080069f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069fe:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <vTaskSwitchContext+0xa4>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a06:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <vTaskSwitchContext+0xa8>)
 8006a08:	2201      	movs	r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a0c:	e041      	b.n	8006a92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006a0e:	4b24      	ldr	r3, [pc, #144]	; (8006aa0 <vTaskSwitchContext+0xa8>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a14:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <vTaskSwitchContext+0xac>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	e010      	b.n	8006a3e <vTaskSwitchContext+0x46>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	607b      	str	r3, [r7, #4]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vTaskSwitchContext+0x3e>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	491a      	ldr	r1, [pc, #104]	; (8006aa8 <vTaskSwitchContext+0xb0>)
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0e4      	beq.n	8006a1c <vTaskSwitchContext+0x24>
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4a12      	ldr	r2, [pc, #72]	; (8006aa8 <vTaskSwitchContext+0xb0>)
 8006a5e:	4413      	add	r3, r2
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	605a      	str	r2, [r3, #4]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3308      	adds	r3, #8
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d104      	bne.n	8006a82 <vTaskSwitchContext+0x8a>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <vTaskSwitchContext+0xb4>)
 8006a8a:	6013      	str	r3, [r2, #0]
 8006a8c:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <vTaskSwitchContext+0xac>)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6013      	str	r3, [r2, #0]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr
 8006a9c:	200011e8 	.word	0x200011e8
 8006aa0:	200011d4 	.word	0x200011d4
 8006aa4:	200011c8 	.word	0x200011c8
 8006aa8:	20000cf0 	.word	0x20000cf0
 8006aac:	20000cec 	.word	0x20000cec

08006ab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <vTaskPlaceOnEventList+0x44>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3318      	adds	r3, #24
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fe fc70 	bl	80053c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f000 fd4c 	bl	8007584 <prvAddCurrentTaskToDelayedList>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000cec 	.word	0x20000cec

08006af8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	617b      	str	r3, [r7, #20]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <vTaskPlaceOnEventListRestricted+0x54>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3318      	adds	r3, #24
 8006b26:	4619      	mov	r1, r3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7fe fc28 	bl	800537e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b34:	f04f 33ff 	mov.w	r3, #4294967295
 8006b38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	68b8      	ldr	r0, [r7, #8]
 8006b3e:	f000 fd21 	bl	8007584 <prvAddCurrentTaskToDelayedList>
	}
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000cec 	.word	0x20000cec

08006b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60fb      	str	r3, [r7, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fc57 	bl	8005434 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <xTaskRemoveFromEventList+0xb0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d11d      	bne.n	8006bca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fc4e 	bl	8005434 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <xTaskRemoveFromEventList+0xb4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <xTaskRemoveFromEventList+0x5c>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a16      	ldr	r2, [pc, #88]	; (8006c04 <xTaskRemoveFromEventList+0xb4>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a13      	ldr	r2, [pc, #76]	; (8006c08 <xTaskRemoveFromEventList+0xb8>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe fbdb 	bl	800537e <vListInsertEnd>
 8006bc8:	e005      	b.n	8006bd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3318      	adds	r3, #24
 8006bce:	4619      	mov	r1, r3
 8006bd0:	480e      	ldr	r0, [pc, #56]	; (8006c0c <xTaskRemoveFromEventList+0xbc>)
 8006bd2:	f7fe fbd4 	bl	800537e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <xTaskRemoveFromEventList+0xc0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d905      	bls.n	8006bf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <xTaskRemoveFromEventList+0xc4>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e001      	b.n	8006bf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006bf4:	697b      	ldr	r3, [r7, #20]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200011e8 	.word	0x200011e8
 8006c04:	200011c8 	.word	0x200011c8
 8006c08:	20000cf0 	.word	0x20000cf0
 8006c0c:	20001180 	.word	0x20001180
 8006c10:	20000cec 	.word	0x20000cec
 8006c14:	200011d4 	.word	0x200011d4

08006c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <vTaskInternalSetTimeOutState+0x24>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <vTaskInternalSetTimeOutState+0x28>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	200011d8 	.word	0x200011d8
 8006c40:	200011c4 	.word	0x200011c4

08006c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	613b      	str	r3, [r7, #16]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c86:	f001 f929 	bl	8007edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <xTaskCheckForTimeOut+0xbc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d102      	bne.n	8006caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	e023      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <xTaskCheckForTimeOut+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d007      	beq.n	8006cc6 <xTaskCheckForTimeOut+0x82>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	e015      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d20b      	bcs.n	8006ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff ff9b 	bl	8006c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	e004      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cf2:	f001 f923 	bl	8007f3c <vPortExitCritical>

	return xReturn;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200011c4 	.word	0x200011c4
 8006d04:	200011d8 	.word	0x200011d8

08006d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d0c:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <vTaskMissedYield+0x14>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	200011d4 	.word	0x200011d4

08006d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d28:	f000 f852 	bl	8006dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <prvIdleTask+0x28>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d9f9      	bls.n	8006d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <prvIdleTask+0x2c>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d44:	e7f0      	b.n	8006d28 <prvIdleTask+0x8>
 8006d46:	bf00      	nop
 8006d48:	20000cf0 	.word	0x20000cf0
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e00c      	b.n	8006d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4a12      	ldr	r2, [pc, #72]	; (8006db0 <prvInitialiseTaskLists+0x60>)
 8006d68:	4413      	add	r3, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe fadc 	bl	8005328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3301      	adds	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b37      	cmp	r3, #55	; 0x37
 8006d7a:	d9ef      	bls.n	8006d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d7c:	480d      	ldr	r0, [pc, #52]	; (8006db4 <prvInitialiseTaskLists+0x64>)
 8006d7e:	f7fe fad3 	bl	8005328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d82:	480d      	ldr	r0, [pc, #52]	; (8006db8 <prvInitialiseTaskLists+0x68>)
 8006d84:	f7fe fad0 	bl	8005328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d88:	480c      	ldr	r0, [pc, #48]	; (8006dbc <prvInitialiseTaskLists+0x6c>)
 8006d8a:	f7fe facd 	bl	8005328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d8e:	480c      	ldr	r0, [pc, #48]	; (8006dc0 <prvInitialiseTaskLists+0x70>)
 8006d90:	f7fe faca 	bl	8005328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d94:	480b      	ldr	r0, [pc, #44]	; (8006dc4 <prvInitialiseTaskLists+0x74>)
 8006d96:	f7fe fac7 	bl	8005328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <prvInitialiseTaskLists+0x78>)
 8006d9c:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <prvInitialiseTaskLists+0x64>)
 8006d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <prvInitialiseTaskLists+0x7c>)
 8006da2:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <prvInitialiseTaskLists+0x68>)
 8006da4:	601a      	str	r2, [r3, #0]
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000cf0 	.word	0x20000cf0
 8006db4:	20001150 	.word	0x20001150
 8006db8:	20001164 	.word	0x20001164
 8006dbc:	20001180 	.word	0x20001180
 8006dc0:	20001194 	.word	0x20001194
 8006dc4:	200011ac 	.word	0x200011ac
 8006dc8:	20001178 	.word	0x20001178
 8006dcc:	2000117c 	.word	0x2000117c

08006dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dd6:	e019      	b.n	8006e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dd8:	f001 f880 	bl	8007edc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006ddc:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <prvCheckTasksWaitingTermination+0x50>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fb23 	bl	8005434 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <prvCheckTasksWaitingTermination+0x54>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	4a0b      	ldr	r2, [pc, #44]	; (8006e24 <prvCheckTasksWaitingTermination+0x54>)
 8006df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <prvCheckTasksWaitingTermination+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4a0a      	ldr	r2, [pc, #40]	; (8006e28 <prvCheckTasksWaitingTermination+0x58>)
 8006e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e02:	f001 f89b 	bl	8007f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f810 	bl	8006e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <prvCheckTasksWaitingTermination+0x58>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e1      	bne.n	8006dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20001194 	.word	0x20001194
 8006e24:	200011c0 	.word	0x200011c0
 8006e28:	200011a8 	.word	0x200011a8

08006e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d108      	bne.n	8006e50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	4618      	mov	r0, r3
 8006e44:	f001 fa0e 	bl	8008264 <vPortFree>
				vPortFree( pxTCB );
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 fa0b 	bl	8008264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e4e:	e018      	b.n	8006e82 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d103      	bne.n	8006e62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 fa02 	bl	8008264 <vPortFree>
	}
 8006e60:	e00f      	b.n	8006e82 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d00a      	beq.n	8006e82 <prvDeleteTCB+0x56>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60fb      	str	r3, [r7, #12]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <prvDeleteTCB+0x54>
	}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <prvResetNextTaskUnblockTime+0x40>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <prvResetNextTaskUnblockTime+0x14>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <prvResetNextTaskUnblockTime+0x16>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <prvResetNextTaskUnblockTime+0x44>)
 8006ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eae:	e008      	b.n	8006ec2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006eb0:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <prvResetNextTaskUnblockTime+0x40>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <prvResetNextTaskUnblockTime+0x44>)
 8006ec0:	6013      	str	r3, [r2, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	20001178 	.word	0x20001178
 8006ed0:	200011e0 	.word	0x200011e0

08006ed4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006eda:	4b04      	ldr	r3, [pc, #16]	; (8006eec <xTaskGetCurrentTaskHandle+0x18>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ee0:	687b      	ldr	r3, [r7, #4]
	}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bc80      	pop	{r7}
 8006eea:	4770      	bx	lr
 8006eec:	20000cec 	.word	0x20000cec

08006ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <xTaskGetSchedulerState+0x34>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006efe:	2301      	movs	r3, #1
 8006f00:	607b      	str	r3, [r7, #4]
 8006f02:	e008      	b.n	8006f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f04:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <xTaskGetSchedulerState+0x38>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	607b      	str	r3, [r7, #4]
 8006f10:	e001      	b.n	8006f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f12:	2300      	movs	r3, #0
 8006f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f16:	687b      	ldr	r3, [r7, #4]
	}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200011cc 	.word	0x200011cc
 8006f28:	200011e8 	.word	0x200011e8

08006f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d056      	beq.n	8006ff0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <xTaskPriorityInherit+0xd0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d246      	bcs.n	8006fde <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	db06      	blt.n	8006f66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f58:	4b28      	ldr	r3, [pc, #160]	; (8006ffc <xTaskPriorityInherit+0xd0>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6959      	ldr	r1, [r3, #20]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a22      	ldr	r2, [pc, #136]	; (8007000 <xTaskPriorityInherit+0xd4>)
 8006f78:	4413      	add	r3, r2
 8006f7a:	4299      	cmp	r1, r3
 8006f7c:	d101      	bne.n	8006f82 <xTaskPriorityInherit+0x56>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e000      	b.n	8006f84 <xTaskPriorityInherit+0x58>
 8006f82:	2300      	movs	r3, #0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d022      	beq.n	8006fce <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe fa51 	bl	8005434 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f92:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <xTaskPriorityInherit+0xd0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4b18      	ldr	r3, [pc, #96]	; (8007004 <xTaskPriorityInherit+0xd8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d903      	bls.n	8006fb0 <xTaskPriorityInherit+0x84>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	4a15      	ldr	r2, [pc, #84]	; (8007004 <xTaskPriorityInherit+0xd8>)
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4a10      	ldr	r2, [pc, #64]	; (8007000 <xTaskPriorityInherit+0xd4>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	3304      	adds	r3, #4
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f7fe f9d9 	bl	800537e <vListInsertEnd>
 8006fcc:	e004      	b.n	8006fd8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <xTaskPriorityInherit+0xd0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	e008      	b.n	8006ff0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fe2:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <xTaskPriorityInherit+0xd0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d201      	bcs.n	8006ff0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000cec 	.word	0x20000cec
 8007000:	20000cf0 	.word	0x20000cf0
 8007004:	200011c8 	.word	0x200011c8

08007008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d056      	beq.n	80070cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800701e:	4b2e      	ldr	r3, [pc, #184]	; (80070d8 <xTaskPriorityDisinherit+0xd0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	429a      	cmp	r2, r3
 8007026:	d00a      	beq.n	800703e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	60fb      	str	r3, [r7, #12]
}
 800703a:	bf00      	nop
 800703c:	e7fe      	b.n	800703c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	60bb      	str	r3, [r7, #8]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007060:	1e5a      	subs	r2, r3, #1
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706e:	429a      	cmp	r2, r3
 8007070:	d02c      	beq.n	80070cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007076:	2b00      	cmp	r3, #0
 8007078:	d128      	bne.n	80070cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3304      	adds	r3, #4
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe f9d8 	bl	8005434 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709c:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <xTaskPriorityDisinherit+0xd4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d903      	bls.n	80070ac <xTaskPriorityDisinherit+0xa4>
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	4a0c      	ldr	r2, [pc, #48]	; (80070dc <xTaskPriorityDisinherit+0xd4>)
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4a09      	ldr	r2, [pc, #36]	; (80070e0 <xTaskPriorityDisinherit+0xd8>)
 80070ba:	441a      	add	r2, r3
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	3304      	adds	r3, #4
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f7fe f95b 	bl	800537e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070c8:	2301      	movs	r3, #1
 80070ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070cc:	697b      	ldr	r3, [r7, #20]
	}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000cec 	.word	0x20000cec
 80070dc:	200011c8 	.word	0x200011c8
 80070e0:	20000cf0 	.word	0x20000cf0

080070e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070f2:	2301      	movs	r3, #1
 80070f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d06f      	beq.n	80071dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	60fb      	str	r3, [r7, #12]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d902      	bls.n	800712a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e002      	b.n	8007130 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	429a      	cmp	r2, r3
 8007138:	d050      	beq.n	80071dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	429a      	cmp	r2, r3
 8007142:	d14b      	bne.n	80071dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	429a      	cmp	r2, r3
 800714c:	d10a      	bne.n	8007164 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	60bb      	str	r3, [r7, #8]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	db04      	blt.n	8007182 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	6959      	ldr	r1, [r3, #20]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007192:	4413      	add	r3, r2
 8007194:	4299      	cmp	r1, r3
 8007196:	d101      	bne.n	800719c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800719c:	2300      	movs	r3, #0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01c      	beq.n	80071dc <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe f944 	bl	8005434 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b0:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d903      	bls.n	80071c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	4a0b      	ldr	r2, [pc, #44]	; (80071ec <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4a06      	ldr	r2, [pc, #24]	; (80071e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80071ce:	441a      	add	r2, r3
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f7fe f8d1 	bl	800537e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071dc:	bf00      	nop
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000cec 	.word	0x20000cec
 80071e8:	20000cf0 	.word	0x20000cf0
 80071ec:	200011c8 	.word	0x200011c8

080071f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071f4:	4b07      	ldr	r3, [pc, #28]	; (8007214 <pvTaskIncrementMutexHeldCount+0x24>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071fc:	4b05      	ldr	r3, [pc, #20]	; (8007214 <pvTaskIncrementMutexHeldCount+0x24>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007202:	3201      	adds	r2, #1
 8007204:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <pvTaskIncrementMutexHeldCount+0x24>)
 8007208:	681b      	ldr	r3, [r3, #0]
	}
 800720a:	4618      	mov	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	bc80      	pop	{r7}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	20000cec 	.word	0x20000cec

08007218 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007222:	f000 fe5b 	bl	8007edc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007226:	4b1e      	ldr	r3, [pc, #120]	; (80072a0 <ulTaskNotifyTake+0x88>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d113      	bne.n	8007258 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007230:	4b1b      	ldr	r3, [pc, #108]	; (80072a0 <ulTaskNotifyTake+0x88>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007240:	2101      	movs	r1, #1
 8007242:	6838      	ldr	r0, [r7, #0]
 8007244:	f000 f99e 	bl	8007584 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007248:	4b16      	ldr	r3, [pc, #88]	; (80072a4 <ulTaskNotifyTake+0x8c>)
 800724a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007258:	f000 fe70 	bl	8007f3c <vPortExitCritical>

		taskENTER_CRITICAL();
 800725c:	f000 fe3e 	bl	8007edc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007260:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <ulTaskNotifyTake+0x88>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007266:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007274:	4b0a      	ldr	r3, [pc, #40]	; (80072a0 <ulTaskNotifyTake+0x88>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2200      	movs	r2, #0
 800727a:	655a      	str	r2, [r3, #84]	; 0x54
 800727c:	e004      	b.n	8007288 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800727e:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <ulTaskNotifyTake+0x88>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	3a01      	subs	r2, #1
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <ulTaskNotifyTake+0x88>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8007292:	f000 fe53 	bl	8007f3c <vPortExitCritical>

		return ulReturn;
 8007296:	68fb      	ldr	r3, [r7, #12]
	}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000cec 	.word	0x20000cec
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08a      	sub	sp, #40	; 0x28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80072b8:	2301      	movs	r3, #1
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <xTaskGenericNotify+0x30>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	61bb      	str	r3, [r7, #24]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80072dc:	f000 fdfe 	bl	8007edc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80072f4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	2202      	movs	r2, #2
 80072fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	2b04      	cmp	r3, #4
 8007302:	d828      	bhi.n	8007356 <xTaskGenericNotify+0xae>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <xTaskGenericNotify+0x64>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007357 	.word	0x08007357
 8007310:	08007321 	.word	0x08007321
 8007314:	0800732f 	.word	0x0800732f
 8007318:	0800733b 	.word	0x0800733b
 800731c:	08007343 	.word	0x08007343
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	431a      	orrs	r2, r3
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800732c:	e013      	b.n	8007356 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	6a3b      	ldr	r3, [r7, #32]
 8007336:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007338:	e00d      	b.n	8007356 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007340:	e009      	b.n	8007356 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007342:	7ffb      	ldrb	r3, [r7, #31]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d003      	beq.n	8007350 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800734e:	e001      	b.n	8007354 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8007350:	2300      	movs	r3, #0
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007354:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d13a      	bne.n	80073d2 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	3304      	adds	r3, #4
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe f867 	bl	8005434 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736a:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <xTaskGenericNotify+0x138>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d903      	bls.n	800737a <xTaskGenericNotify+0xd2>
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	4a1a      	ldr	r2, [pc, #104]	; (80073e0 <xTaskGenericNotify+0x138>)
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4a17      	ldr	r2, [pc, #92]	; (80073e4 <xTaskGenericNotify+0x13c>)
 8007388:	441a      	add	r2, r3
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	3304      	adds	r3, #4
 800738e:	4619      	mov	r1, r3
 8007390:	4610      	mov	r0, r2
 8007392:	f7fd fff4 	bl	800537e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <xTaskGenericNotify+0x10c>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	617b      	str	r3, [r7, #20]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	4b0b      	ldr	r3, [pc, #44]	; (80073e8 <xTaskGenericNotify+0x140>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	429a      	cmp	r2, r3
 80073c0:	d907      	bls.n	80073d2 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <xTaskGenericNotify+0x144>)
 80073c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80073d2:	f000 fdb3 	bl	8007f3c <vPortExitCritical>

		return xReturn;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80073d8:	4618      	mov	r0, r3
 80073da:	3728      	adds	r7, #40	; 0x28
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	200011c8 	.word	0x200011c8
 80073e4:	20000cf0 	.word	0x20000cf0
 80073e8:	20000cec 	.word	0x20000cec
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	; 0x38
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4613      	mov	r3, r2
 80073fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007400:	2301      	movs	r3, #1
 8007402:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800741c:	bf00      	nop
 800741e:	e7fe      	b.n	800741e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007420:	f000 fe1e 	bl	8008060 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007428:	f3ef 8211 	mrs	r2, BASEPRI
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	623a      	str	r2, [r7, #32]
 800743e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007440:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b04      	cmp	r3, #4
 8007468:	d828      	bhi.n	80074bc <xTaskGenericNotifyFromISR+0xcc>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <xTaskGenericNotifyFromISR+0x80>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074bd 	.word	0x080074bd
 8007474:	08007485 	.word	0x08007485
 8007478:	08007493 	.word	0x08007493
 800747c:	0800749f 	.word	0x0800749f
 8007480:	080074a7 	.word	0x080074a7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	431a      	orrs	r2, r3
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8007490:	e014      	b.n	80074bc <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800749c:	e00e      	b.n	80074bc <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80074a4:	e00a      	b.n	80074bc <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80074a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d003      	beq.n	80074b6 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074b4:	e001      	b.n	80074ba <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80074ba:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d147      	bne.n	8007554 <xTaskGenericNotifyFromISR+0x164>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <xTaskGenericNotifyFromISR+0xf2>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	61bb      	str	r3, [r7, #24]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <xTaskGenericNotifyFromISR+0xf0>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e2:	4b22      	ldr	r3, [pc, #136]	; (800756c <xTaskGenericNotifyFromISR+0x17c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d11d      	bne.n	8007526 <xTaskGenericNotifyFromISR+0x136>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	3304      	adds	r3, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fd ffa0 	bl	8005434 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f8:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <xTaskGenericNotifyFromISR+0x180>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d903      	bls.n	8007508 <xTaskGenericNotifyFromISR+0x118>
 8007500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	4a1a      	ldr	r2, [pc, #104]	; (8007570 <xTaskGenericNotifyFromISR+0x180>)
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4a17      	ldr	r2, [pc, #92]	; (8007574 <xTaskGenericNotifyFromISR+0x184>)
 8007516:	441a      	add	r2, r3
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	3304      	adds	r3, #4
 800751c:	4619      	mov	r1, r3
 800751e:	4610      	mov	r0, r2
 8007520:	f7fd ff2d 	bl	800537e <vListInsertEnd>
 8007524:	e005      	b.n	8007532 <xTaskGenericNotifyFromISR+0x142>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	3318      	adds	r3, #24
 800752a:	4619      	mov	r1, r3
 800752c:	4812      	ldr	r0, [pc, #72]	; (8007578 <xTaskGenericNotifyFromISR+0x188>)
 800752e:	f7fd ff26 	bl	800537e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007536:	4b11      	ldr	r3, [pc, #68]	; (800757c <xTaskGenericNotifyFromISR+0x18c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	429a      	cmp	r2, r3
 800753e:	d909      	bls.n	8007554 <xTaskGenericNotifyFromISR+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <xTaskGenericNotifyFromISR+0x15e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	2201      	movs	r2, #1
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	e002      	b.n	8007554 <xTaskGenericNotifyFromISR+0x164>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800754e:	4b0c      	ldr	r3, [pc, #48]	; (8007580 <xTaskGenericNotifyFromISR+0x190>)
 8007550:	2201      	movs	r2, #1
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007556:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f383 8811 	msr	BASEPRI, r3
}
 800755e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007562:	4618      	mov	r0, r3
 8007564:	3738      	adds	r7, #56	; 0x38
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200011e8 	.word	0x200011e8
 8007570:	200011c8 	.word	0x200011c8
 8007574:	20000cf0 	.word	0x20000cf0
 8007578:	20001180 	.word	0x20001180
 800757c:	20000cec 	.word	0x20000cec
 8007580:	200011d4 	.word	0x200011d4

08007584 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800758e:	4b21      	ldr	r3, [pc, #132]	; (8007614 <prvAddCurrentTaskToDelayedList+0x90>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007594:	4b20      	ldr	r3, [pc, #128]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3304      	adds	r3, #4
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd ff4a 	bl	8005434 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d10a      	bne.n	80075be <prvAddCurrentTaskToDelayedList+0x3a>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d007      	beq.n	80075be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ae:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3304      	adds	r3, #4
 80075b4:	4619      	mov	r1, r3
 80075b6:	4819      	ldr	r0, [pc, #100]	; (800761c <prvAddCurrentTaskToDelayedList+0x98>)
 80075b8:	f7fd fee1 	bl	800537e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075bc:	e026      	b.n	800760c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d209      	bcs.n	80075ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <prvAddCurrentTaskToDelayedList+0x9c>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fd feee 	bl	80053c4 <vListInsert>
}
 80075e8:	e010      	b.n	800760c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075ea:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <prvAddCurrentTaskToDelayedList+0xa0>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4619      	mov	r1, r3
 80075f6:	4610      	mov	r0, r2
 80075f8:	f7fd fee4 	bl	80053c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	429a      	cmp	r2, r3
 8007604:	d202      	bcs.n	800760c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007606:	4a08      	ldr	r2, [pc, #32]	; (8007628 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6013      	str	r3, [r2, #0]
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	200011c4 	.word	0x200011c4
 8007618:	20000cec 	.word	0x20000cec
 800761c:	200011ac 	.word	0x200011ac
 8007620:	2000117c 	.word	0x2000117c
 8007624:	20001178 	.word	0x20001178
 8007628:	200011e0 	.word	0x200011e0

0800762c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08a      	sub	sp, #40	; 0x28
 8007630:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007636:	f000 fb1f 	bl	8007c78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800763a:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <xTimerCreateTimerTask+0x80>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d021      	beq.n	8007686 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800764a:	1d3a      	adds	r2, r7, #4
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	f107 030c 	add.w	r3, r7, #12
 8007654:	4618      	mov	r0, r3
 8007656:	f7fd fe4d 	bl	80052f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	9202      	str	r2, [sp, #8]
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	2302      	movs	r3, #2
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	2300      	movs	r3, #0
 800766a:	460a      	mov	r2, r1
 800766c:	4910      	ldr	r1, [pc, #64]	; (80076b0 <xTimerCreateTimerTask+0x84>)
 800766e:	4811      	ldr	r0, [pc, #68]	; (80076b4 <xTimerCreateTimerTask+0x88>)
 8007670:	f7fe fe06 	bl	8006280 <xTaskCreateStatic>
 8007674:	4603      	mov	r3, r0
 8007676:	4a10      	ldr	r2, [pc, #64]	; (80076b8 <xTimerCreateTimerTask+0x8c>)
 8007678:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <xTimerCreateTimerTask+0x8c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	613b      	str	r3, [r7, #16]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	2000121c 	.word	0x2000121c
 80076b0:	080085b8 	.word	0x080085b8
 80076b4:	08007881 	.word	0x08007881
 80076b8:	20001220 	.word	0x20001220

080076bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b088      	sub	sp, #32
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80076ca:	2030      	movs	r0, #48	; 0x30
 80076cc:	f000 fd06 	bl	80080dc <pvPortMalloc>
 80076d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00d      	beq.n	80076f4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f809 	bl	80076fe <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80076f4:	697b      	ldr	r3, [r7, #20]
	}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b086      	sub	sp, #24
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	617b      	str	r3, [r7, #20]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d015      	beq.n	800775a <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800772e:	f000 faa3 	bl	8007c78 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	6a3a      	ldr	r2, [r7, #32]
 800774e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	3304      	adds	r3, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f7fd fe06 	bl	8005366 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007772:	2300      	movs	r3, #0
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <xTimerGenericCommand+0x2e>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	623b      	str	r3, [r7, #32]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007792:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <xTimerGenericCommand+0x98>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02a      	beq.n	80077f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	dc18      	bgt.n	80077de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077ac:	f7ff fba0 	bl	8006ef0 <xTaskGetSchedulerState>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d109      	bne.n	80077ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077b6:	4b11      	ldr	r3, [pc, #68]	; (80077fc <xTimerGenericCommand+0x98>)
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f107 0110 	add.w	r1, r7, #16
 80077be:	2300      	movs	r3, #0
 80077c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c2:	f7fe f80b 	bl	80057dc <xQueueGenericSend>
 80077c6:	6278      	str	r0, [r7, #36]	; 0x24
 80077c8:	e012      	b.n	80077f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077ca:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <xTimerGenericCommand+0x98>)
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	f107 0110 	add.w	r1, r7, #16
 80077d2:	2300      	movs	r3, #0
 80077d4:	2200      	movs	r2, #0
 80077d6:	f7fe f801 	bl	80057dc <xQueueGenericSend>
 80077da:	6278      	str	r0, [r7, #36]	; 0x24
 80077dc:	e008      	b.n	80077f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077de:	4b07      	ldr	r3, [pc, #28]	; (80077fc <xTimerGenericCommand+0x98>)
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	f107 0110 	add.w	r1, r7, #16
 80077e6:	2300      	movs	r3, #0
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	f7fe f8f5 	bl	80059d8 <xQueueGenericSendFromISR>
 80077ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3728      	adds	r7, #40	; 0x28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000121c 	.word	0x2000121c

08007800 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800780a:	4b1c      	ldr	r3, [pc, #112]	; (800787c <prvProcessExpiredTimer+0x7c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3304      	adds	r3, #4
 8007818:	4618      	mov	r0, r3
 800781a:	f7fd fe0b 	bl	8005434 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d122      	bne.n	800786c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	18d1      	adds	r1, r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f000 f8c8 	bl	80079c8 <prvInsertTimerInActiveList>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d016      	beq.n	800786c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800783e:	2300      	movs	r3, #0
 8007840:	9300      	str	r3, [sp, #0]
 8007842:	2300      	movs	r3, #0
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	2100      	movs	r1, #0
 8007848:	6978      	ldr	r0, [r7, #20]
 800784a:	f7ff ff8b 	bl	8007764 <xTimerGenericCommand>
 800784e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10a      	bne.n	800786c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	f383 8811 	msr	BASEPRI, r3
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f3bf 8f4f 	dsb	sy
 8007866:	60fb      	str	r3, [r7, #12]
}
 8007868:	bf00      	nop
 800786a:	e7fe      	b.n	800786a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	6978      	ldr	r0, [r7, #20]
 8007872:	4798      	blx	r3
}
 8007874:	bf00      	nop
 8007876:	3718      	adds	r7, #24
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20001214 	.word	0x20001214

08007880 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007888:	f107 0308 	add.w	r3, r7, #8
 800788c:	4618      	mov	r0, r3
 800788e:	f000 f857 	bl	8007940 <prvGetNextExpireTime>
 8007892:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 f803 	bl	80078a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800789e:	f000 f8d5 	bl	8007a4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078a2:	e7f1      	b.n	8007888 <prvTimerTask+0x8>

080078a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078ae:	f7fe ff19 	bl	80066e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 f866 	bl	8007988 <prvSampleTimeNow>
 80078bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d130      	bne.n	8007926 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <prvProcessTimerOrBlockTask+0x3c>
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d806      	bhi.n	80078e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078d2:	f7fe ff15 	bl	8006700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff ff91 	bl	8007800 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078de:	e024      	b.n	800792a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d008      	beq.n	80078f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <prvProcessTimerOrBlockTask+0x90>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078f8:	4b0f      	ldr	r3, [pc, #60]	; (8007938 <prvProcessTimerOrBlockTask+0x94>)
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4619      	mov	r1, r3
 8007906:	f7fe fc87 	bl	8006218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800790a:	f7fe fef9 	bl	8006700 <xTaskResumeAll>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <prvProcessTimerOrBlockTask+0x98>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
}
 8007924:	e001      	b.n	800792a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007926:	f7fe feeb 	bl	8006700 <xTaskResumeAll>
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20001218 	.word	0x20001218
 8007938:	2000121c 	.word	0x2000121c
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007948:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <prvGetNextExpireTime+0x44>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	bf0c      	ite	eq
 8007952:	2301      	moveq	r3, #1
 8007954:	2300      	movne	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d105      	bne.n	8007972 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007966:	4b07      	ldr	r3, [pc, #28]	; (8007984 <prvGetNextExpireTime+0x44>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	e001      	b.n	8007976 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007976:	68fb      	ldr	r3, [r7, #12]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20001214 	.word	0x20001214

08007988 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007990:	f7fe ff54 	bl	800683c <xTaskGetTickCount>
 8007994:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007996:	4b0b      	ldr	r3, [pc, #44]	; (80079c4 <prvSampleTimeNow+0x3c>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	429a      	cmp	r2, r3
 800799e:	d205      	bcs.n	80079ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079a0:	f000 f908 	bl	8007bb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e002      	b.n	80079b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079b2:	4a04      	ldr	r2, [pc, #16]	; (80079c4 <prvSampleTimeNow+0x3c>)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079b8:	68fb      	ldr	r3, [r7, #12]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20001224 	.word	0x20001224

080079c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d812      	bhi.n	8007a14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	1ad2      	subs	r2, r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d302      	bcc.n	8007a02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e01b      	b.n	8007a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <prvInsertTimerInActiveList+0x7c>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f7fd fcd9 	bl	80053c4 <vListInsert>
 8007a12:	e012      	b.n	8007a3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d206      	bcs.n	8007a2a <prvInsertTimerInActiveList+0x62>
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d302      	bcc.n	8007a2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	e007      	b.n	8007a3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a2a:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <prvInsertTimerInActiveList+0x80>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7fd fcc5 	bl	80053c4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a3a:	697b      	ldr	r3, [r7, #20]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20001218 	.word	0x20001218
 8007a48:	20001214 	.word	0x20001214

08007a4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08e      	sub	sp, #56	; 0x38
 8007a50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a52:	e09d      	b.n	8007b90 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	da18      	bge.n	8007a8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a5a:	1d3b      	adds	r3, r7, #4
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	61fb      	str	r3, [r7, #28]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a82:	6850      	ldr	r0, [r2, #4]
 8007a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a86:	6892      	ldr	r2, [r2, #8]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	db7d      	blt.n	8007b8e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd fcc6 	bl	8005434 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aa8:	463b      	mov	r3, r7
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff ff6c 	bl	8007988 <prvSampleTimeNow>
 8007ab0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d86b      	bhi.n	8007b90 <prvProcessReceivedCommands+0x144>
 8007ab8:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <prvProcessReceivedCommands+0x74>)
 8007aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abe:	bf00      	nop
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007b91 	.word	0x08007b91
 8007ad0:	08007b45 	.word	0x08007b45
 8007ad4:	08007b7d 	.word	0x08007b7d
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007ae9 	.word	0x08007ae9
 8007ae0:	08007b91 	.word	0x08007b91
 8007ae4:	08007b45 	.word	0x08007b45
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	18d1      	adds	r1, r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af6:	f7ff ff67 	bl	80079c8 <prvInsertTimerInActiveList>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d047      	beq.n	8007b90 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b06:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d13f      	bne.n	8007b90 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	441a      	add	r2, r3
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	2100      	movs	r1, #0
 8007b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b22:	f7ff fe1f 	bl	8007764 <xTimerGenericCommand>
 8007b26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d130      	bne.n	8007b90 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	61bb      	str	r3, [r7, #24]
}
 8007b40:	bf00      	nop
 8007b42:	e7fe      	b.n	8007b42 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10a      	bne.n	8007b68 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	617b      	str	r3, [r7, #20]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	699a      	ldr	r2, [r3, #24]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	18d1      	adds	r1, r2, r3
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b76:	f7ff ff27 	bl	80079c8 <prvInsertTimerInActiveList>
					break;
 8007b7a:	e009      	b.n	8007b90 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b88:	f000 fb6c 	bl	8008264 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b8c:	e000      	b.n	8007b90 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b8e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b90:	4b07      	ldr	r3, [pc, #28]	; (8007bb0 <prvProcessReceivedCommands+0x164>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	1d39      	adds	r1, r7, #4
 8007b96:	2200      	movs	r2, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fd ffb5 	bl	8005b08 <xQueueReceive>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f47f af57 	bne.w	8007a54 <prvProcessReceivedCommands+0x8>
	}
}
 8007ba6:	bf00      	nop
 8007ba8:	bf00      	nop
 8007baa:	3730      	adds	r7, #48	; 0x30
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	2000121c 	.word	0x2000121c

08007bb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bba:	e045      	b.n	8007c48 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bbc:	4b2c      	ldr	r3, [pc, #176]	; (8007c70 <prvSwitchTimerLists+0xbc>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <prvSwitchTimerLists+0xbc>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fd fc2d 	bl	8005434 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d12e      	bne.n	8007c48 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d90e      	bls.n	8007c1a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c08:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <prvSwitchTimerLists+0xbc>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7fd fbd6 	bl	80053c4 <vListInsert>
 8007c18:	e016      	b.n	8007c48 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	2100      	movs	r1, #0
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fd9d 	bl	8007764 <xTimerGenericCommand>
 8007c2a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	603b      	str	r3, [r7, #0]
}
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <prvSwitchTimerLists+0xbc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d1b4      	bne.n	8007bbc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <prvSwitchTimerLists+0xbc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c58:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <prvSwitchTimerLists+0xc0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a04      	ldr	r2, [pc, #16]	; (8007c70 <prvSwitchTimerLists+0xbc>)
 8007c5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c60:	4a04      	ldr	r2, [pc, #16]	; (8007c74 <prvSwitchTimerLists+0xc0>)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	6013      	str	r3, [r2, #0]
}
 8007c66:	bf00      	nop
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20001214 	.word	0x20001214
 8007c74:	20001218 	.word	0x20001218

08007c78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c7e:	f000 f92d 	bl	8007edc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d120      	bne.n	8007ccc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c8a:	4814      	ldr	r0, [pc, #80]	; (8007cdc <prvCheckForValidListAndQueue+0x64>)
 8007c8c:	f7fd fb4c 	bl	8005328 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c90:	4813      	ldr	r0, [pc, #76]	; (8007ce0 <prvCheckForValidListAndQueue+0x68>)
 8007c92:	f7fd fb49 	bl	8005328 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <prvCheckForValidListAndQueue+0x6c>)
 8007c98:	4a10      	ldr	r2, [pc, #64]	; (8007cdc <prvCheckForValidListAndQueue+0x64>)
 8007c9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c9c:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <prvCheckForValidListAndQueue+0x70>)
 8007c9e:	4a10      	ldr	r2, [pc, #64]	; (8007ce0 <prvCheckForValidListAndQueue+0x68>)
 8007ca0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	4b11      	ldr	r3, [pc, #68]	; (8007cec <prvCheckForValidListAndQueue+0x74>)
 8007ca8:	4a11      	ldr	r2, [pc, #68]	; (8007cf0 <prvCheckForValidListAndQueue+0x78>)
 8007caa:	2110      	movs	r1, #16
 8007cac:	200a      	movs	r0, #10
 8007cae:	f7fd fc53 	bl	8005558 <xQueueGenericCreateStatic>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4a08      	ldr	r2, [pc, #32]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007cb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cb8:	4b07      	ldr	r3, [pc, #28]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d005      	beq.n	8007ccc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cc0:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <prvCheckForValidListAndQueue+0x60>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	490b      	ldr	r1, [pc, #44]	; (8007cf4 <prvCheckForValidListAndQueue+0x7c>)
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fa54 	bl	8006174 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ccc:	f000 f936 	bl	8007f3c <vPortExitCritical>
}
 8007cd0:	bf00      	nop
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	2000121c 	.word	0x2000121c
 8007cdc:	200011ec 	.word	0x200011ec
 8007ce0:	20001200 	.word	0x20001200
 8007ce4:	20001214 	.word	0x20001214
 8007ce8:	20001218 	.word	0x20001218
 8007cec:	200012c8 	.word	0x200012c8
 8007cf0:	20001228 	.word	0x20001228
 8007cf4:	080085c0 	.word	0x080085c0

08007cf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3b04      	subs	r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	f023 0201 	bic.w	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3b04      	subs	r3, #4
 8007d26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d28:	4a08      	ldr	r2, [pc, #32]	; (8007d4c <pxPortInitialiseStack+0x54>)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	3b14      	subs	r3, #20
 8007d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3b20      	subs	r3, #32
 8007d3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d40:	68fb      	ldr	r3, [r7, #12]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr
 8007d4c:	08007d51 	.word	0x08007d51

08007d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d5a:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <prvTaskExitError+0x54>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d00a      	beq.n	8007d7a <prvTaskExitError+0x2a>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <prvTaskExitError+0x28>
	__asm volatile
 8007d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7e:	f383 8811 	msr	BASEPRI, r3
 8007d82:	f3bf 8f6f 	isb	sy
 8007d86:	f3bf 8f4f 	dsb	sy
 8007d8a:	60bb      	str	r3, [r7, #8]
}
 8007d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d8e:	bf00      	nop
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0fc      	beq.n	8007d90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	2000000c 	.word	0x2000000c
	...

08007db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <pxCurrentTCBConst2>)
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	6808      	ldr	r0, [r1, #0]
 8007db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007dba:	f380 8809 	msr	PSP, r0
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8811 	msr	BASEPRI, r0
 8007dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dce:	4770      	bx	lr

08007dd0 <pxCurrentTCBConst2>:
 8007dd0:	20000cec 	.word	0x20000cec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop

08007dd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007dd8:	4806      	ldr	r0, [pc, #24]	; (8007df4 <prvPortStartFirstTask+0x1c>)
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	6800      	ldr	r0, [r0, #0]
 8007dde:	f380 8808 	msr	MSP, r0
 8007de2:	b662      	cpsie	i
 8007de4:	b661      	cpsie	f
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	df00      	svc	0
 8007df0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007df2:	bf00      	nop
 8007df4:	e000ed08 	.word	0xe000ed08

08007df8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dfe:	4b32      	ldr	r3, [pc, #200]	; (8007ec8 <xPortStartScheduler+0xd0>)
 8007e00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	22ff      	movs	r2, #255	; 0xff
 8007e0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e20:	b2da      	uxtb	r2, r3
 8007e22:	4b2a      	ldr	r3, [pc, #168]	; (8007ecc <xPortStartScheduler+0xd4>)
 8007e24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e26:	4b2a      	ldr	r3, [pc, #168]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e28:	2207      	movs	r2, #7
 8007e2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e2c:	e009      	b.n	8007e42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e2e:	4b28      	ldr	r3, [pc, #160]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4a:	2b80      	cmp	r3, #128	; 0x80
 8007e4c:	d0ef      	beq.n	8007e2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e4e:	4b20      	ldr	r3, [pc, #128]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f1c3 0307 	rsb	r3, r3, #7
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d00a      	beq.n	8007e70 <xPortStartScheduler+0x78>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	60bb      	str	r3, [r7, #8]
}
 8007e6c:	bf00      	nop
 8007e6e:	e7fe      	b.n	8007e6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e70:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	4a16      	ldr	r2, [pc, #88]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e82:	4a13      	ldr	r2, [pc, #76]	; (8007ed0 <xPortStartScheduler+0xd8>)
 8007e84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <xPortStartScheduler+0xdc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <xPortStartScheduler+0xdc>)
 8007e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e9a:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <xPortStartScheduler+0xdc>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a0d      	ldr	r2, [pc, #52]	; (8007ed4 <xPortStartScheduler+0xdc>)
 8007ea0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007ea4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ea6:	f000 f8b9 	bl	800801c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <xPortStartScheduler+0xe0>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007eb0:	f7ff ff92 	bl	8007dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007eb4:	f7fe fda0 	bl	80069f8 <vTaskSwitchContext>
	prvTaskExitError();
 8007eb8:	f7ff ff4a 	bl	8007d50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	e000e400 	.word	0xe000e400
 8007ecc:	20001318 	.word	0x20001318
 8007ed0:	2000131c 	.word	0x2000131c
 8007ed4:	e000ed20 	.word	0xe000ed20
 8007ed8:	2000000c 	.word	0x2000000c

08007edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	607b      	str	r3, [r7, #4]
}
 8007ef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	; (8007f34 <vPortEnterCritical+0x58>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <vPortEnterCritical+0x58>)
 8007efe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f00:	4b0c      	ldr	r3, [pc, #48]	; (8007f34 <vPortEnterCritical+0x58>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d10f      	bne.n	8007f28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <vPortEnterCritical+0x5c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	603b      	str	r3, [r7, #0]
}
 8007f24:	bf00      	nop
 8007f26:	e7fe      	b.n	8007f26 <vPortEnterCritical+0x4a>
	}
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	2000000c 	.word	0x2000000c
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <vPortExitCritical+0x4c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10a      	bne.n	8007f60 <vPortExitCritical+0x24>
	__asm volatile
 8007f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4e:	f383 8811 	msr	BASEPRI, r3
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	607b      	str	r3, [r7, #4]
}
 8007f5c:	bf00      	nop
 8007f5e:	e7fe      	b.n	8007f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f60:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <vPortExitCritical+0x4c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	4a08      	ldr	r2, [pc, #32]	; (8007f88 <vPortExitCritical+0x4c>)
 8007f68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f6a:	4b07      	ldr	r3, [pc, #28]	; (8007f88 <vPortExitCritical+0x4c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <vPortExitCritical+0x42>
 8007f72:	2300      	movs	r3, #0
 8007f74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	f383 8811 	msr	BASEPRI, r3
}
 8007f7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr
 8007f88:	2000000c 	.word	0x2000000c
 8007f8c:	00000000 	.word	0x00000000

08007f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f90:	f3ef 8009 	mrs	r0, PSP
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	4b0d      	ldr	r3, [pc, #52]	; (8007fd0 <pxCurrentTCBConst>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fa0:	6010      	str	r0, [r2, #0]
 8007fa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007fa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007faa:	f380 8811 	msr	BASEPRI, r0
 8007fae:	f7fe fd23 	bl	80069f8 <vTaskSwitchContext>
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8811 	msr	BASEPRI, r0
 8007fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	6808      	ldr	r0, [r1, #0]
 8007fc2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007fc6:	f380 8809 	msr	PSP, r0
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	4770      	bx	lr

08007fd0 <pxCurrentTCBConst>:
 8007fd0:	20000cec 	.word	0x20000cec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop

08007fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	607b      	str	r3, [r7, #4]
}
 8007ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ff2:	f7fe fc43 	bl	800687c <xTaskIncrementTick>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <SysTick_Handler+0x40>)
 8007ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	2300      	movs	r3, #0
 8008006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f383 8811 	msr	BASEPRI, r3
}
 800800e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008010:	bf00      	nop
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	e000ed04 	.word	0xe000ed04

0800801c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <vPortSetupTimerInterrupt+0x30>)
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <vPortSetupTimerInterrupt+0x34>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800802c:	4b09      	ldr	r3, [pc, #36]	; (8008054 <vPortSetupTimerInterrupt+0x38>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a09      	ldr	r2, [pc, #36]	; (8008058 <vPortSetupTimerInterrupt+0x3c>)
 8008032:	fba2 2303 	umull	r2, r3, r2, r3
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	4a08      	ldr	r2, [pc, #32]	; (800805c <vPortSetupTimerInterrupt+0x40>)
 800803a:	3b01      	subs	r3, #1
 800803c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800803e:	4b03      	ldr	r3, [pc, #12]	; (800804c <vPortSetupTimerInterrupt+0x30>)
 8008040:	2207      	movs	r2, #7
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr
 800804c:	e000e010 	.word	0xe000e010
 8008050:	e000e018 	.word	0xe000e018
 8008054:	20000000 	.word	0x20000000
 8008058:	10624dd3 	.word	0x10624dd3
 800805c:	e000e014 	.word	0xe000e014

08008060 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008066:	f3ef 8305 	mrs	r3, IPSR
 800806a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b0f      	cmp	r3, #15
 8008070:	d914      	bls.n	800809c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008072:	4a16      	ldr	r2, [pc, #88]	; (80080cc <vPortValidateInterruptPriority+0x6c>)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800807c:	4b14      	ldr	r3, [pc, #80]	; (80080d0 <vPortValidateInterruptPriority+0x70>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	7afa      	ldrb	r2, [r7, #11]
 8008082:	429a      	cmp	r2, r3
 8008084:	d20a      	bcs.n	800809c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	607b      	str	r3, [r7, #4]
}
 8008098:	bf00      	nop
 800809a:	e7fe      	b.n	800809a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <vPortValidateInterruptPriority+0x74>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <vPortValidateInterruptPriority+0x78>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d90a      	bls.n	80080c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	603b      	str	r3, [r7, #0]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <vPortValidateInterruptPriority+0x60>
	}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bc80      	pop	{r7}
 80080ca:	4770      	bx	lr
 80080cc:	e000e3f0 	.word	0xe000e3f0
 80080d0:	20001318 	.word	0x20001318
 80080d4:	e000ed0c 	.word	0xe000ed0c
 80080d8:	2000131c 	.word	0x2000131c

080080dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08a      	sub	sp, #40	; 0x28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080e8:	f7fe fafc 	bl	80066e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080ec:	4b58      	ldr	r3, [pc, #352]	; (8008250 <pvPortMalloc+0x174>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080f4:	f000 f910 	bl	8008318 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080f8:	4b56      	ldr	r3, [pc, #344]	; (8008254 <pvPortMalloc+0x178>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4013      	ands	r3, r2
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 808e 	bne.w	8008222 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01d      	beq.n	8008148 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800810c:	2208      	movs	r2, #8
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4413      	add	r3, r2
 8008112:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	2b00      	cmp	r3, #0
 800811c:	d014      	beq.n	8008148 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f023 0307 	bic.w	r3, r3, #7
 8008124:	3308      	adds	r3, #8
 8008126:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <pvPortMalloc+0x6c>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	617b      	str	r3, [r7, #20]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d069      	beq.n	8008222 <pvPortMalloc+0x146>
 800814e:	4b42      	ldr	r3, [pc, #264]	; (8008258 <pvPortMalloc+0x17c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	429a      	cmp	r2, r3
 8008156:	d864      	bhi.n	8008222 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008158:	4b40      	ldr	r3, [pc, #256]	; (800825c <pvPortMalloc+0x180>)
 800815a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800815c:	4b3f      	ldr	r3, [pc, #252]	; (800825c <pvPortMalloc+0x180>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008162:	e004      	b.n	800816e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	d903      	bls.n	8008180 <pvPortMalloc+0xa4>
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f1      	bne.n	8008164 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008180:	4b33      	ldr	r3, [pc, #204]	; (8008250 <pvPortMalloc+0x174>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008186:	429a      	cmp	r2, r3
 8008188:	d04b      	beq.n	8008222 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2208      	movs	r2, #8
 8008190:	4413      	add	r3, r2
 8008192:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	2308      	movs	r3, #8
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d91f      	bls.n	80081ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <pvPortMalloc+0xf8>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	613b      	str	r3, [r7, #16]
}
 80081d0:	bf00      	nop
 80081d2:	e7fe      	b.n	80081d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	1ad2      	subs	r2, r2, r3
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081e6:	69b8      	ldr	r0, [r7, #24]
 80081e8:	f000 f8f8 	bl	80083dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081ec:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <pvPortMalloc+0x17c>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <pvPortMalloc+0x17c>)
 80081f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081fa:	4b17      	ldr	r3, [pc, #92]	; (8008258 <pvPortMalloc+0x17c>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b18      	ldr	r3, [pc, #96]	; (8008260 <pvPortMalloc+0x184>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d203      	bcs.n	800820e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <pvPortMalloc+0x17c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a15      	ldr	r2, [pc, #84]	; (8008260 <pvPortMalloc+0x184>)
 800820c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	4b10      	ldr	r3, [pc, #64]	; (8008254 <pvPortMalloc+0x178>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	431a      	orrs	r2, r3
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	2200      	movs	r2, #0
 8008220:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008222:	f7fe fa6d 	bl	8006700 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <pvPortMalloc+0x16a>
	__asm volatile
 8008230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	60fb      	str	r3, [r7, #12]
}
 8008242:	bf00      	nop
 8008244:	e7fe      	b.n	8008244 <pvPortMalloc+0x168>
	return pvReturn;
 8008246:	69fb      	ldr	r3, [r7, #28]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3728      	adds	r7, #40	; 0x28
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	2000430c 	.word	0x2000430c
 8008254:	20004318 	.word	0x20004318
 8008258:	20004310 	.word	0x20004310
 800825c:	20004304 	.word	0x20004304
 8008260:	20004314 	.word	0x20004314

08008264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d048      	beq.n	8008308 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008276:	2308      	movs	r3, #8
 8008278:	425b      	negs	r3, r3
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4413      	add	r3, r2
 800827e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	4b21      	ldr	r3, [pc, #132]	; (8008310 <vPortFree+0xac>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4013      	ands	r3, r2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10a      	bne.n	80082a8 <vPortFree+0x44>
	__asm volatile
 8008292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008296:	f383 8811 	msr	BASEPRI, r3
 800829a:	f3bf 8f6f 	isb	sy
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	60fb      	str	r3, [r7, #12]
}
 80082a4:	bf00      	nop
 80082a6:	e7fe      	b.n	80082a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <vPortFree+0x62>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	60bb      	str	r3, [r7, #8]
}
 80082c2:	bf00      	nop
 80082c4:	e7fe      	b.n	80082c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	4b11      	ldr	r3, [pc, #68]	; (8008310 <vPortFree+0xac>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d019      	beq.n	8008308 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d115      	bne.n	8008308 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <vPortFree+0xac>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	43db      	mvns	r3, r3
 80082e6:	401a      	ands	r2, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082ec:	f7fe f9fa 	bl	80066e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	4b07      	ldr	r3, [pc, #28]	; (8008314 <vPortFree+0xb0>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4413      	add	r3, r2
 80082fa:	4a06      	ldr	r2, [pc, #24]	; (8008314 <vPortFree+0xb0>)
 80082fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082fe:	6938      	ldr	r0, [r7, #16]
 8008300:	f000 f86c 	bl	80083dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008304:	f7fe f9fc 	bl	8006700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008308:	bf00      	nop
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20004318 	.word	0x20004318
 8008314:	20004310 	.word	0x20004310

08008318 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800831e:	f642 73e4 	movw	r3, #12260	; 0x2fe4
 8008322:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008324:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <prvHeapInit+0xac>)
 8008326:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00c      	beq.n	800834c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3307      	adds	r3, #7
 8008336:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0307 	bic.w	r3, r3, #7
 800833e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	4a1f      	ldr	r2, [pc, #124]	; (80083c4 <prvHeapInit+0xac>)
 8008348:	4413      	add	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008350:	4a1d      	ldr	r2, [pc, #116]	; (80083c8 <prvHeapInit+0xb0>)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008356:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <prvHeapInit+0xb0>)
 8008358:	2200      	movs	r2, #0
 800835a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	4413      	add	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008364:	2208      	movs	r2, #8
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f023 0307 	bic.w	r3, r3, #7
 8008372:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4a15      	ldr	r2, [pc, #84]	; (80083cc <prvHeapInit+0xb4>)
 8008378:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800837a:	4b14      	ldr	r3, [pc, #80]	; (80083cc <prvHeapInit+0xb4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2200      	movs	r2, #0
 8008380:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <prvHeapInit+0xb4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	1ad2      	subs	r2, r2, r3
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008398:	4b0c      	ldr	r3, [pc, #48]	; (80083cc <prvHeapInit+0xb4>)
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <prvHeapInit+0xb8>)
 80083a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <prvHeapInit+0xbc>)
 80083ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083b0:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <prvHeapInit+0xc0>)
 80083b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083b6:	601a      	str	r2, [r3, #0]
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	20001320 	.word	0x20001320
 80083c8:	20004304 	.word	0x20004304
 80083cc:	2000430c 	.word	0x2000430c
 80083d0:	20004314 	.word	0x20004314
 80083d4:	20004310 	.word	0x20004310
 80083d8:	20004318 	.word	0x20004318

080083dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083e4:	4b27      	ldr	r3, [pc, #156]	; (8008484 <prvInsertBlockIntoFreeList+0xa8>)
 80083e6:	60fb      	str	r3, [r7, #12]
 80083e8:	e002      	b.n	80083f0 <prvInsertBlockIntoFreeList+0x14>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d8f7      	bhi.n	80083ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	4413      	add	r3, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	d108      	bne.n	800841e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	441a      	add	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d118      	bne.n	8008464 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <prvInsertBlockIntoFreeList+0xac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	429a      	cmp	r2, r3
 800843c:	d00d      	beq.n	800845a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	441a      	add	r2, r3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	e008      	b.n	800846c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <prvInsertBlockIntoFreeList+0xac>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	e003      	b.n	800846c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	429a      	cmp	r2, r3
 8008472:	d002      	beq.n	800847a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800847a:	bf00      	nop
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	20004304 	.word	0x20004304
 8008488:	2000430c 	.word	0x2000430c

0800848c <__libc_init_array>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	2600      	movs	r6, #0
 8008490:	4d0c      	ldr	r5, [pc, #48]	; (80084c4 <__libc_init_array+0x38>)
 8008492:	4c0d      	ldr	r4, [pc, #52]	; (80084c8 <__libc_init_array+0x3c>)
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	42a6      	cmp	r6, r4
 800849a:	d109      	bne.n	80084b0 <__libc_init_array+0x24>
 800849c:	f000 f830 	bl	8008500 <_init>
 80084a0:	2600      	movs	r6, #0
 80084a2:	4d0a      	ldr	r5, [pc, #40]	; (80084cc <__libc_init_array+0x40>)
 80084a4:	4c0a      	ldr	r4, [pc, #40]	; (80084d0 <__libc_init_array+0x44>)
 80084a6:	1b64      	subs	r4, r4, r5
 80084a8:	10a4      	asrs	r4, r4, #2
 80084aa:	42a6      	cmp	r6, r4
 80084ac:	d105      	bne.n	80084ba <__libc_init_array+0x2e>
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b4:	4798      	blx	r3
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7ee      	b.n	8008498 <__libc_init_array+0xc>
 80084ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80084be:	4798      	blx	r3
 80084c0:	3601      	adds	r6, #1
 80084c2:	e7f2      	b.n	80084aa <__libc_init_array+0x1e>
 80084c4:	080086c4 	.word	0x080086c4
 80084c8:	080086c4 	.word	0x080086c4
 80084cc:	080086c4 	.word	0x080086c4
 80084d0:	080086c8 	.word	0x080086c8

080084d4 <memcpy>:
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	4770      	bx	lr
 80084e0:	b510      	push	{r4, lr}
 80084e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e6:	4291      	cmp	r1, r2
 80084e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ec:	d1f9      	bne.n	80084e2 <memcpy+0xe>
 80084ee:	bd10      	pop	{r4, pc}

080084f0 <memset>:
 80084f0:	4603      	mov	r3, r0
 80084f2:	4402      	add	r2, r0
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d100      	bne.n	80084fa <memset+0xa>
 80084f8:	4770      	bx	lr
 80084fa:	f803 1b01 	strb.w	r1, [r3], #1
 80084fe:	e7f9      	b.n	80084f4 <memset+0x4>

08008500 <_init>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr

0800850c <_fini>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr
