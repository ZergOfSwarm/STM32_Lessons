
Meteo_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad84  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800ae98  0800ae98  0001ae98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2f0  0800b2f0  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2f0  0800b2f0  0001b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2f8  0800b2f8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2f8  0800b2f8  0001b2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2fc  0800b2fc  0001b2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002414  200001ec  0800b4ec  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002600  0800b4ec  00022600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d439  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037be  00000000  00000000  0003d64e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001830  00000000  00000000  00040e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c0  00000000  00000000  00042640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005c63  00000000  00000000  00043d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012cde  00000000  00000000  00049963  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098600  00000000  00000000  0005c641  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4c41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007648  00000000  00000000  000f4cbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae7c 	.word	0x0800ae7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800ae7c 	.word	0x0800ae7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_ldivmod>:
 8000b28:	b97b      	cbnz	r3, 8000b4a <__aeabi_ldivmod+0x22>
 8000b2a:	b972      	cbnz	r2, 8000b4a <__aeabi_ldivmod+0x22>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bfbe      	ittt	lt
 8000b30:	2000      	movlt	r0, #0
 8000b32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b36:	e006      	blt.n	8000b46 <__aeabi_ldivmod+0x1e>
 8000b38:	bf08      	it	eq
 8000b3a:	2800      	cmpeq	r0, #0
 8000b3c:	bf1c      	itt	ne
 8000b3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000b42:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b46:	f000 b9a7 	b.w	8000e98 <__aeabi_idiv0>
 8000b4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b52:	2900      	cmp	r1, #0
 8000b54:	db09      	blt.n	8000b6a <__aeabi_ldivmod+0x42>
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db1a      	blt.n	8000b90 <__aeabi_ldivmod+0x68>
 8000b5a:	f000 f835 	bl	8000bc8 <__udivmoddi4>
 8000b5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b66:	b004      	add	sp, #16
 8000b68:	4770      	bx	lr
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db1b      	blt.n	8000bac <__aeabi_ldivmod+0x84>
 8000b74:	f000 f828 	bl	8000bc8 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	4252      	negs	r2, r2
 8000b8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8e:	4770      	bx	lr
 8000b90:	4252      	negs	r2, r2
 8000b92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b96:	f000 f817 	bl	8000bc8 <__udivmoddi4>
 8000b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4240      	negs	r0, r0
 8000ba6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000baa:	4770      	bx	lr
 8000bac:	4252      	negs	r2, r2
 8000bae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb2:	f000 f809 	bl	8000bc8 <__udivmoddi4>
 8000bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	468c      	mov	ip, r1
 8000bce:	4604      	mov	r4, r0
 8000bd0:	9e08      	ldr	r6, [sp, #32]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0c03 	orr.w	ip, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	fbbc f7fe 	udiv	r7, ip, lr
 8000bfe:	fa1f f885 	uxth.w	r8, r5
 8000c02:	fb0e c317 	mls	r3, lr, r7, ip
 8000c06:	fb07 f908 	mul.w	r9, r7, r8
 8000c0a:	0c21      	lsrs	r1, r4, #16
 8000c0c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c10:	4599      	cmp	r9, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000c1a:	f080 811c 	bcs.w	8000e56 <__udivmoddi4+0x28e>
 8000c1e:	4599      	cmp	r9, r3
 8000c20:	f240 8119 	bls.w	8000e56 <__udivmoddi4+0x28e>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	eba3 0309 	sub.w	r3, r3, r9
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	fb00 f108 	mul.w	r1, r0, r8
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3e:	42a1      	cmp	r1, r4
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0x8e>
 8000c42:	192c      	adds	r4, r5, r4
 8000c44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c48:	f080 8107 	bcs.w	8000e5a <__udivmoddi4+0x292>
 8000c4c:	42a1      	cmp	r1, r4
 8000c4e:	f240 8104 	bls.w	8000e5a <__udivmoddi4+0x292>
 8000c52:	3802      	subs	r0, #2
 8000c54:	442c      	add	r4, r5
 8000c56:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	1a64      	subs	r4, r4, r1
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	2300      	movs	r3, #0
 8000c62:	40d4      	lsrs	r4, r2
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ec 	beq.w	8000e50 <__udivmoddi4+0x288>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d148      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fb 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	469c      	mov	ip, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4c00 	strd	r4, ip, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	2701      	movs	r7, #1
 8000cbc:	1b49      	subs	r1, r1, r5
 8000cbe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000cc2:	fa1f f985 	uxth.w	r9, r5
 8000cc6:	fbb1 fef8 	udiv	lr, r1, r8
 8000cca:	fb08 111e 	mls	r1, r8, lr, r1
 8000cce:	fb09 f00e 	mul.w	r0, r9, lr
 8000cd2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000cd6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x126>
 8000cde:	18eb      	adds	r3, r5, r3
 8000ce0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x124>
 8000ce6:	4298      	cmp	r0, r3
 8000ce8:	f200 80cd 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000cec:	468e      	mov	lr, r1
 8000cee:	1a1b      	subs	r3, r3, r0
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	fb09 f900 	mul.w	r9, r9, r0
 8000cfc:	b2a4      	uxth	r4, r4
 8000cfe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d02:	45a1      	cmp	r9, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d06:	192c      	adds	r4, r5, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f200 80b6 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000d14:	4618      	mov	r0, r3
 8000d16:	eba4 0409 	sub.w	r4, r4, r9
 8000d1a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d1e:	e79e      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d20:	f1c7 0520 	rsb	r5, r7, #32
 8000d24:	40bb      	lsls	r3, r7
 8000d26:	fa22 fc05 	lsr.w	ip, r2, r5
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa21 f405 	lsr.w	r4, r1, r5
 8000d32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d36:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d3a:	fa1f f88c 	uxth.w	r8, ip
 8000d3e:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d42:	fa20 f305 	lsr.w	r3, r0, r5
 8000d46:	40b9      	lsls	r1, r7
 8000d48:	fb09 fa08 	mul.w	sl, r9, r8
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	0c0b      	lsrs	r3, r1, #16
 8000d50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d54:	45a2      	cmp	sl, r4
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f307 	lsl.w	r3, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	45a2      	cmp	sl, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	eba4 040a 	sub.w	r4, r4, sl
 8000d7c:	fbb4 f0fe 	udiv	r0, r4, lr
 8000d80:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d84:	fb00 fa08 	mul.w	sl, r0, r8
 8000d88:	b289      	uxth	r1, r1
 8000d8a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000d8e:	45a2      	cmp	sl, r4
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x1dc>
 8000d92:	eb1c 0404 	adds.w	r4, ip, r4
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d9a:	d26b      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d969      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4464      	add	r4, ip
 8000da4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da8:	fba0 8902 	umull	r8, r9, r0, r2
 8000dac:	eba4 040a 	sub.w	r4, r4, sl
 8000db0:	454c      	cmp	r4, r9
 8000db2:	4641      	mov	r1, r8
 8000db4:	46ce      	mov	lr, r9
 8000db6:	d354      	bcc.n	8000e62 <__udivmoddi4+0x29a>
 8000db8:	d051      	beq.n	8000e5e <__udivmoddi4+0x296>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d069      	beq.n	8000e92 <__udivmoddi4+0x2ca>
 8000dbe:	1a5a      	subs	r2, r3, r1
 8000dc0:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc4:	fa04 f505 	lsl.w	r5, r4, r5
 8000dc8:	fa22 f307 	lsr.w	r3, r2, r7
 8000dcc:	40fc      	lsrs	r4, r7
 8000dce:	431d      	orrs	r5, r3
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	fa21 f003 	lsr.w	r0, r1, r3
 8000de2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000de6:	fbb0 f7f8 	udiv	r7, r0, r8
 8000dea:	fa1f f985 	uxth.w	r9, r5
 8000dee:	fb08 0017 	mls	r0, r8, r7, r0
 8000df2:	fa24 f303 	lsr.w	r3, r4, r3
 8000df6:	4091      	lsls	r1, r2
 8000df8:	fb07 fc09 	mul.w	ip, r7, r9
 8000dfc:	430b      	orrs	r3, r1
 8000dfe:	0c19      	lsrs	r1, r3, #16
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	458c      	cmp	ip, r1
 8000e06:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x254>
 8000e0c:	1869      	adds	r1, r5, r1
 8000e0e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000e12:	d231      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e14:	458c      	cmp	ip, r1
 8000e16:	d92f      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	3f02      	subs	r7, #2
 8000e1a:	4429      	add	r1, r5
 8000e1c:	eba1 010c 	sub.w	r1, r1, ip
 8000e20:	fbb1 f0f8 	udiv	r0, r1, r8
 8000e24:	fb08 1c10 	mls	ip, r8, r0, r1
 8000e28:	fb00 fe09 	mul.w	lr, r0, r9
 8000e2c:	b299      	uxth	r1, r3
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e3c:	d218      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e3e:	458e      	cmp	lr, r1
 8000e40:	d916      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	eba1 010e 	sub.w	r1, r1, lr
 8000e4a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4e:	e73a      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e50:	4637      	mov	r7, r6
 8000e52:	4630      	mov	r0, r6
 8000e54:	e708      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e56:	460f      	mov	r7, r1
 8000e58:	e6e6      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	e6fb      	b.n	8000c56 <__udivmoddi4+0x8e>
 8000e5e:	4543      	cmp	r3, r8
 8000e60:	d2ab      	bcs.n	8000dba <__udivmoddi4+0x1f2>
 8000e62:	ebb8 0102 	subs.w	r1, r8, r2
 8000e66:	eb69 020c 	sbc.w	r2, r9, ip
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	4696      	mov	lr, r2
 8000e6e:	e7a4      	b.n	8000dba <__udivmoddi4+0x1f2>
 8000e70:	4618      	mov	r0, r3
 8000e72:	e7e8      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e795      	b.n	8000da4 <__udivmoddi4+0x1dc>
 8000e78:	4607      	mov	r7, r0
 8000e7a:	e7cf      	b.n	8000e1c <__udivmoddi4+0x254>
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3802      	subs	r0, #2
 8000e82:	442c      	add	r4, r5
 8000e84:	e747      	b.n	8000d16 <__udivmoddi4+0x14e>
 8000e86:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8a:	442b      	add	r3, r5
 8000e8c:	e72f      	b.n	8000cee <__udivmoddi4+0x126>
 8000e8e:	4638      	mov	r0, r7
 8000e90:	e707      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e92:	4637      	mov	r7, r6
 8000e94:	e6e8      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f001 f974 	bl	800219a <null_ptr_check>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d133      	bne.n	8000f26 <bme280_init+0x8a>
		while (try_count) {
 8000ebe:	e028      	b.n	8000f12 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000ec0:	f107 010d 	add.w	r1, r7, #13
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	20d0      	movs	r0, #208	; 0xd0
 8000eca:	f000 f832 	bl	8000f32 <bme280_get_regs>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d114      	bne.n	8000f04 <bme280_init+0x68>
 8000eda:	7b7b      	ldrb	r3, [r7, #13]
 8000edc:	2b60      	cmp	r3, #96	; 0x60
 8000ede:	d111      	bne.n	8000f04 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000ee0:	7b7a      	ldrb	r2, [r7, #13]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f978 	bl	80011dc <bme280_soft_reset>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d110      	bne.n	8000f1a <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 ffca 	bl	8001e92 <get_calib_data>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000f02:	e00a      	b.n	8000f1a <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2001      	movs	r0, #1
 8000f0a:	4798      	blx	r3
			--try_count;
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1d3      	bne.n	8000ec0 <bme280_init+0x24>
 8000f18:	e000      	b.n	8000f1c <bme280_init+0x80>
				break;
 8000f1a:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000f1c:	7bbb      	ldrb	r3, [r7, #14]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000f22:	23fe      	movs	r3, #254	; 0xfe
 8000f24:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000f32:	b590      	push	{r4, r7, lr}
 8000f34:	b087      	sub	sp, #28
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	4613      	mov	r3, r2
 8000f42:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f001 f928 	bl	800219a <null_ptr_check>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d117      	bne.n	8000f86 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d003      	beq.n	8000f66 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f64:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685c      	ldr	r4, [r3, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7858      	ldrb	r0, [r3, #1]
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	7bf9      	ldrb	r1, [r7, #15]
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	47a0      	blx	r4
 8000f76:	4603      	mov	r3, r0
 8000f78:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000f82:	23fc      	movs	r3, #252	; 0xfc
 8000f84:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}

08000f92 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000f92:	b590      	push	{r4, r7, lr}
 8000f94:	b08d      	sub	sp, #52	; 0x34
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2b0a      	cmp	r3, #10
 8000fa6:	d901      	bls.n	8000fac <bme280_set_regs+0x1a>
		len = 10;
 8000fa8:	230a      	movs	r3, #10
 8000faa:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fac:	6838      	ldr	r0, [r7, #0]
 8000fae:	f001 f8f4 	bl	800219a <null_ptr_check>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8000fb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d156      	bne.n	800106e <bme280_set_regs+0xdc>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d053      	beq.n	800106e <bme280_set_regs+0xdc>
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d050      	beq.n	800106e <bme280_set_regs+0xdc>
		if (len != 0) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d049      	beq.n	8001066 <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	789b      	ldrb	r3, [r3, #2]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d01a      	beq.n	8001016 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000fe6:	e011      	b.n	800100c <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ff6:	68f9      	ldr	r1, [r7, #12]
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001006:	3301      	adds	r3, #1
 8001008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800100c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3e8      	bcc.n	8000fe8 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d90d      	bls.n	8001038 <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f107 0114 	add.w	r1, r7, #20
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 ff78 	bl	8001f1a <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	b29b      	uxth	r3, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	3b01      	subs	r3, #1
 8001034:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001036:	e001      	b.n	800103c <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689c      	ldr	r4, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	7858      	ldrb	r0, [r3, #1]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	7819      	ldrb	r1, [r3, #0]
 8001048:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800104a:	f107 0214 	add.w	r2, r7, #20
 800104e:	47a0      	blx	r4
 8001050:	4603      	mov	r3, r0
 8001052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8001056:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 800105e:	23fc      	movs	r3, #252	; 0xfc
 8001060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001064:	e007      	b.n	8001076 <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001066:	23fd      	movs	r3, #253	; 0xfd
 8001068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800106c:	e003      	b.n	8001076 <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800106e:	23ff      	movs	r3, #255	; 0xff
 8001070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001074:	e000      	b.n	8001078 <bme280_set_regs+0xe6>
		if (len != 0) {
 8001076:	bf00      	nop
	}


	return rslt;
 8001078:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800107c:	4618      	mov	r0, r3
 800107e:	3734      	adds	r7, #52	; 0x34
 8001080:	46bd      	mov	sp, r7
 8001082:	bd90      	pop	{r4, r7, pc}

08001084 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f001 f882 	bl	800219a <null_ptr_check>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d13f      	bne.n	8001122 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80010a2:	f107 030e 	add.w	r3, r7, #14
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f874 	bl	8001196 <bme280_get_sensor_mode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d107      	bne.n	80010ca <bme280_set_sensor_settings+0x46>
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f000 fb31 	bl	8001728 <put_device_to_sleep>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d127      	bne.n	8001122 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4619      	mov	r1, r3
 80010d6:	2007      	movs	r0, #7
 80010d8:	f001 f844 	bl	8002164 <are_settings_changed>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d009      	beq.n	80010f6 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f972 	bl	80013d6 <set_osr_settings>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d111      	bne.n	8001122 <bme280_set_sensor_settings+0x9e>
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4619      	mov	r1, r3
 8001102:	2018      	movs	r0, #24
 8001104:	f001 f82e 	bl	8002164 <are_settings_changed>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d009      	beq.n	8001122 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f9f9 	bl	8001510 <set_filter_standby_settings>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	6039      	str	r1, [r7, #0]
 8001138:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f001 f82d 	bl	800219a <null_ptr_check>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d11e      	bne.n	800118a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800114c:	f107 030e 	add.w	r3, r7, #14
 8001150:	6839      	ldr	r1, [r7, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f81f 	bl	8001196 <bme280_get_sensor_mode>
 8001158:	4603      	mov	r3, r0
 800115a:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d107      	bne.n	8001174 <bme280_set_sensor_mode+0x46>
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f000 fadc 	bl	8001728 <put_device_to_sleep>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	6839      	ldr	r1, [r7, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fa9e 	bl	80016c2 <write_power_mode>
 8001186:	4603      	mov	r3, r0
 8001188:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800118a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f000 fffa 	bl	800219a <null_ptr_check>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	20f4      	movs	r0, #244	; 0xf4
 80011ba:	f7ff feba 	bl	8000f32 <bme280_get_regs>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80011e4:	23e0      	movs	r3, #224	; 0xe0
 80011e6:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80011e8:	23b6      	movs	r3, #182	; 0xb6
 80011ea:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 ffd4 	bl	800219a <null_ptr_check>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10d      	bne.n	800121a <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80011fe:	f107 010d 	add.w	r1, r7, #13
 8001202:	f107 000e 	add.w	r0, r7, #14
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f7ff fec2 	bl	8000f92 <bme280_set_regs>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2002      	movs	r0, #2
 8001218:	4798      	blx	r3
	}

	return rslt;
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b08a      	sub	sp, #40	; 0x28
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
	struct bme280_uncomp_data uncomp_data = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 ffa5 	bl	800219a <null_ptr_check>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001256:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800125a:	2b00      	cmp	r3, #0
 800125c:	d124      	bne.n	80012a8 <bme280_get_sensor_data+0x82>
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d021      	beq.n	80012a8 <bme280_get_sensor_data+0x82>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001264:	f107 011c 	add.w	r1, r7, #28
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2208      	movs	r2, #8
 800126c:	20f7      	movs	r0, #247	; 0xf7
 800126e:	f7ff fe60 	bl	8000f32 <bme280_get_regs>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800127c:	2b00      	cmp	r3, #0
 800127e:	d116      	bne.n	80012ae <bme280_get_sensor_data+0x88>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8001280:	f107 0210 	add.w	r2, r7, #16
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f815 	bl	80012ba <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3310      	adds	r3, #16
 8001294:	f107 0110 	add.w	r1, r7, #16
 8001298:	7bf8      	ldrb	r0, [r7, #15]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f000 f852 	bl	8001344 <bme280_compensate_data>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80012a6:	e002      	b.n	80012ae <bme280_get_sensor_data+0x88>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80012a8:	23ff      	movs	r3, #255	; 0xff
 80012aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 80012ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	031b      	lsls	r3, r3, #12
 80012ca:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3302      	adds	r3, #2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3303      	adds	r3, #3
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	031b      	lsls	r3, r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3305      	adds	r3, #5
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	b2db      	uxtb	r3, r3
 800130e:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	431a      	orrs	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3306      	adds	r3, #6
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3307      	adds	r3, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	431a      	orrs	r2, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	609a      	str	r2, [r3, #8]
}
 800133a:	bf00      	nop
 800133c:	371c      	adds	r7, #28
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d033      	beq.n	80013c6 <bme280_compensate_data+0x82>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d030      	beq.n	80013c6 <bme280_compensate_data+0x82>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	68b8      	ldr	r0, [r7, #8]
 800138a:	f000 fa1b 	bl	80017c4 <compensate_temperature>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	68b8      	ldr	r0, [r7, #8]
 80013a2:	f000 fa71 	bl	8001888 <compensate_pressure>
 80013a6:	4602      	mov	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d009      	beq.n	80013ca <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	68b8      	ldr	r0, [r7, #8]
 80013ba:	f000 fcbf 	bl	8001d3c <compensate_humidity>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 80013c4:	e001      	b.n	80013ca <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80013c6:	23ff      	movs	r3, #255	; 0xff
 80013c8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80013ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80013e4:	2301      	movs	r3, #1
 80013e6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f000 f815 	bl	8001424 <set_osr_humidity_settings>
 80013fa:	4603      	mov	r3, r0
 80013fc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f842 	bl	8001498 <set_osr_press_temp_settings>
 8001414:	4603      	mov	r3, r0
 8001416:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800142e:	23f2      	movs	r3, #242	; 0xf2
 8001430:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	b2db      	uxtb	r3, r3
 800143c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800143e:	f107 010e 	add.w	r1, r7, #14
 8001442:	f107 000c 	add.w	r0, r7, #12
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	f7ff fda2 	bl	8000f92 <bme280_set_regs>
 800144e:	4603      	mov	r3, r0
 8001450:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800145a:	23f4      	movs	r3, #244	; 0xf4
 800145c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800145e:	7b38      	ldrb	r0, [r7, #12]
 8001460:	f107 010d 	add.w	r1, r7, #13
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	f7ff fd63 	bl	8000f32 <bme280_get_regs>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d109      	bne.n	800148c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001478:	f107 010d 	add.w	r1, r7, #13
 800147c:	f107 000c 	add.w	r0, r7, #12
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	f7ff fd85 	bl	8000f92 <bme280_set_regs>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80014a6:	23f4      	movs	r3, #244	; 0xf4
 80014a8:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80014aa:	7db8      	ldrb	r0, [r7, #22]
 80014ac:	f107 0115 	add.w	r1, r7, #21
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f7ff fd3d 	bl	8000f32 <bme280_get_regs>
 80014b8:	4603      	mov	r3, r0
 80014ba:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80014bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d11f      	bne.n	8001504 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80014ce:	f107 0315 	add.w	r3, r7, #21
 80014d2:	68b9      	ldr	r1, [r7, #8]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f88c 	bl	80015f2 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80014e4:	f107 0315 	add.w	r3, r7, #21
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f89d 	bl	800162a <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80014f0:	f107 0115 	add.w	r1, r7, #21
 80014f4:	f107 0016 	add.w	r0, r7, #22
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f7ff fd49 	bl	8000f92 <bme280_set_regs>
 8001500:	4603      	mov	r3, r0
 8001502:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001504:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800151e:	23f5      	movs	r3, #245	; 0xf5
 8001520:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001522:	7db8      	ldrb	r0, [r7, #22]
 8001524:	f107 0115 	add.w	r1, r7, #21
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f7ff fd01 	bl	8000f32 <bme280_get_regs>
 8001530:	4603      	mov	r3, r0
 8001532:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001534:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d11f      	bne.n	800157c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001546:	f107 0315 	add.w	r3, r7, #21
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f81b 	bl	8001588 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800155c:	f107 0315 	add.w	r3, r7, #21
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f82c 	bl	80015c0 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001568:	f107 0115 	add.w	r1, r7, #21
 800156c:	f107 0016 	add.w	r0, r7, #22
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f7ff fd0d 	bl	8000f92 <bme280_set_regs>
 8001578:	4603      	mov	r3, r0
 800157a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800157c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	b25b      	sxtb	r3, r3
 8001598:	f023 031c 	bic.w	r3, r3, #28
 800159c:	b25a      	sxtb	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	f003 031c 	and.w	r3, r3, #28
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	701a      	strb	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	b25a      	sxtb	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	701a      	strb	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b25b      	sxtb	r3, r3
 8001602:	f023 031c 	bic.w	r3, r3, #28
 8001606:	b25a      	sxtb	r2, r3
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	b25b      	sxtb	r3, r3
 8001610:	f003 031c 	and.w	r3, r3, #28
 8001614:	b25b      	sxtb	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b25b      	sxtb	r3, r3
 800161a:	b2da      	uxtb	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	701a      	strb	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b25b      	sxtb	r3, r3
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	b25a      	sxtb	r2, r3
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	015b      	lsls	r3, r3, #5
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	701a      	strb	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2da      	uxtb	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3302      	adds	r3, #2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	109b      	asrs	r3, r3, #2
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	b2da      	uxtb	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3302      	adds	r3, #2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	b2da      	uxtb	r2, r3
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3303      	adds	r3, #3
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	109b      	asrs	r3, r3, #2
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	711a      	strb	r2, [r3, #4]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	6039      	str	r1, [r7, #0]
 80016cc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80016ce:	23f4      	movs	r3, #244	; 0xf4
 80016d0:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80016d2:	7bb8      	ldrb	r0, [r7, #14]
 80016d4:	f107 010d 	add.w	r1, r7, #13
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	f7ff fc29 	bl	8000f32 <bme280_get_regs>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80016e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d117      	bne.n	800171c <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f023 0303 	bic.w	r3, r3, #3
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2db      	uxtb	r3, r3
 8001706:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001708:	f107 010d 	add.w	r1, r7, #13
 800170c:	f107 000e 	add.w	r0, r7, #14
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	f7ff fc3d 	bl	8000f92 <bme280_set_regs>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001730:	f107 0110 	add.w	r1, r7, #16
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2204      	movs	r2, #4
 8001738:	20f2      	movs	r0, #242	; 0xf2
 800173a:	f7ff fbfa 	bl	8000f32 <bme280_get_regs>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8001742:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d118      	bne.n	800177c <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 800174a:	f107 0208 	add.w	r2, r7, #8
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff81 	bl	800165c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff fd3e 	bl	80011dc <bme280_soft_reset>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8001764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d107      	bne.n	800177c <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800176c:	f107 0308 	add.w	r3, r7, #8
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f808 	bl	8001788 <reload_device_settings>
 8001778:	4603      	mov	r3, r0
 800177a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800177c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	201f      	movs	r0, #31
 8001798:	f7ff fe1d 	bl	80013d6 <set_osr_settings>
 800179c:	4603      	mov	r3, r0
 800179e:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80017a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	201f      	movs	r0, #31
 80017ae:	f7ff feaf 	bl	8001510 <set_filter_standby_settings>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <compensate_temperature+0xc0>)
 80017d0:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 80017d2:	f242 1334 	movw	r3, #8500	; 0x2134
 80017d6:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	0052      	lsls	r2, r2, #1
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ee:	461a      	mov	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	fb03 f302 	mul.w	r3, r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	da01      	bge.n	80017fe <compensate_temperature+0x3a>
 80017fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80017fe:	12db      	asrs	r3, r3, #11
 8001800:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	8812      	ldrh	r2, [r2, #0]
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	fb02 f303 	mul.w	r3, r2, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	da01      	bge.n	8001820 <compensate_temperature+0x5c>
 800181c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001820:	131b      	asrs	r3, r3, #12
 8001822:	461a      	mov	r2, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800182a:	fb03 f302 	mul.w	r3, r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	da02      	bge.n	8001838 <compensate_temperature+0x74>
 8001832:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001836:	333f      	adds	r3, #63	; 0x3f
 8001838:	139b      	asrs	r3, r3, #14
 800183a:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	441a      	add	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3380      	adds	r3, #128	; 0x80
 8001852:	2b00      	cmp	r3, #0
 8001854:	da00      	bge.n	8001858 <compensate_temperature+0x94>
 8001856:	33ff      	adds	r3, #255	; 0xff
 8001858:	121b      	asrs	r3, r3, #8
 800185a:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 800185c:	69fa      	ldr	r2, [r7, #28]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	429a      	cmp	r2, r3
 8001862:	da02      	bge.n	800186a <compensate_temperature+0xa6>
		temperature = temperature_min;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	e005      	b.n	8001876 <compensate_temperature+0xb2>
	else if (temperature > temperature_max)
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	429a      	cmp	r2, r3
 8001870:	dd01      	ble.n	8001876 <compensate_temperature+0xb2>
		temperature = temperature_max;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	61fb      	str	r3, [r7, #28]

	return temperature;
 8001876:	69fb      	ldr	r3, [r7, #28]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3724      	adds	r7, #36	; 0x24
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	fffff060 	.word	0xfffff060

08001888 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001888:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800188c:	b08e      	sub	sp, #56	; 0x38
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001894:	4bc9      	ldr	r3, [pc, #804]	; (8001bbc <compensate_pressure+0x334>)
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t pressure_max = 11000000;
 8001898:	4bc9      	ldr	r3, [pc, #804]	; (8001bc0 <compensate_pressure+0x338>)
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018a6:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 80018aa:	f142 34ff 	adc.w	r4, r2, #4294967295	; 0xffffffff
 80018ae:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	6a3a      	ldr	r2, [r7, #32]
 80018b6:	fb02 f203 	mul.w	r2, r2, r3
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	6a39      	ldr	r1, [r7, #32]
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	441a      	add	r2, r3
 80018c4:	6a39      	ldr	r1, [r7, #32]
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	fba1 3403 	umull	r3, r4, r1, r3
 80018cc:	4422      	add	r2, r4
 80018ce:	4614      	mov	r4, r2
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80018d6:	b211      	sxth	r1, r2
 80018d8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80018dc:	fb01 f504 	mul.w	r5, r1, r4
 80018e0:	fb03 f002 	mul.w	r0, r3, r2
 80018e4:	4428      	add	r0, r5
 80018e6:	fba3 3401 	umull	r3, r4, r3, r1
 80018ea:	1902      	adds	r2, r0, r4
 80018ec:	4614      	mov	r4, r2
 80018ee:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80018f2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001902:	6a3a      	ldr	r2, [r7, #32]
 8001904:	fb04 f102 	mul.w	r1, r4, r2
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	fb03 f202 	mul.w	r2, r3, r2
 800190e:	1888      	adds	r0, r1, r2
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	fba2 1203 	umull	r1, r2, r2, r3
 8001916:	1883      	adds	r3, r0, r2
 8001918:	461a      	mov	r2, r3
 800191a:	f04f 0500 	mov.w	r5, #0
 800191e:	f04f 0600 	mov.w	r6, #0
 8001922:	0456      	lsls	r6, r2, #17
 8001924:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001928:	044d      	lsls	r5, r1, #17
 800192a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800192e:	186b      	adds	r3, r5, r1
 8001930:	eb46 0402 	adc.w	r4, r6, r2
 8001934:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800193e:	b219      	sxth	r1, r3
 8001940:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001944:	f04f 0500 	mov.w	r5, #0
 8001948:	f04f 0600 	mov.w	r6, #0
 800194c:	00ce      	lsls	r6, r1, #3
 800194e:	2500      	movs	r5, #0
 8001950:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001954:	186b      	adds	r3, r5, r1
 8001956:	eb46 0402 	adc.w	r4, r6, r2
 800195a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	fb02 f203 	mul.w	r2, r2, r3
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	441a      	add	r2, r3
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	fba1 3403 	umull	r3, r4, r1, r3
 8001978:	4422      	add	r2, r4
 800197a:	4614      	mov	r4, r2
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001982:	b211      	sxth	r1, r2
 8001984:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001988:	fb01 f504 	mul.w	r5, r1, r4
 800198c:	fb03 f002 	mul.w	r0, r3, r2
 8001990:	4428      	add	r0, r5
 8001992:	fba3 3401 	umull	r3, r4, r3, r1
 8001996:	1902      	adds	r2, r0, r4
 8001998:	4614      	mov	r4, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	f174 0200 	sbcs.w	r2, r4, #0
 80019a0:	da02      	bge.n	80019a8 <compensate_pressure+0x120>
 80019a2:	33ff      	adds	r3, #255	; 0xff
 80019a4:	f144 0400 	adc.w	r4, r4, #0
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	0a19      	lsrs	r1, r3, #8
 80019b2:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 80019b6:	1222      	asrs	r2, r4, #8
 80019b8:	460d      	mov	r5, r1
 80019ba:	4616      	mov	r6, r2
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80019c8:	6a3a      	ldr	r2, [r7, #32]
 80019ca:	fb04 f102 	mul.w	r1, r4, r2
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	fb03 f202 	mul.w	r2, r3, r2
 80019d4:	1888      	adds	r0, r1, r2
 80019d6:	6a3a      	ldr	r2, [r7, #32]
 80019d8:	fba2 1203 	umull	r1, r2, r2, r3
 80019dc:	1883      	adds	r3, r0, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0b00 	mov.w	fp, #0
 80019e4:	f04f 0c00 	mov.w	ip, #0
 80019e8:	ea4f 3c02 	mov.w	ip, r2, lsl #12
 80019ec:	ea4c 5c11 	orr.w	ip, ip, r1, lsr #20
 80019f0:	ea4f 3b01 	mov.w	fp, r1, lsl #12
 80019f4:	eb1b 0305 	adds.w	r3, fp, r5
 80019f8:	eb4c 0406 	adc.w	r4, ip, r6
 80019fc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var3 = ((int64_t)1) * 140737488355328;
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8001a08:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001a0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a14:	eb11 0b03 	adds.w	fp, r1, r3
 8001a18:	eb42 0c04 	adc.w	ip, r2, r4
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	88db      	ldrh	r3, [r3, #6]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	fb03 f50c 	mul.w	r5, r3, ip
 8001a2a:	fb0b f004 	mul.w	r0, fp, r4
 8001a2e:	4428      	add	r0, r5
 8001a30:	fbab 3403 	umull	r3, r4, fp, r3
 8001a34:	1902      	adds	r2, r0, r4
 8001a36:	4614      	mov	r4, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f174 0200 	sbcs.w	r2, r4, #0
 8001a3e:	da03      	bge.n	8001a48 <compensate_pressure+0x1c0>
 8001a40:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001a44:	f144 0401 	adc.w	r4, r4, #1
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	1061      	asrs	r1, r4, #1
 8001a52:	17e2      	asrs	r2, r4, #31
 8001a54:	e9c7 1208 	strd	r1, r2, [r7, #32]

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001a58:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a5c:	4323      	orrs	r3, r4
 8001a5e:	f000 8162 	beq.w	8001d26 <compensate_pressure+0x49e>
		var4 = 1048576 - uncomp_data->pressure;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001a72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	f04f 0400 	mov.w	r4, #0
 8001a7e:	07d4      	lsls	r4, r2, #31
 8001a80:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 8001a84:	07cb      	lsls	r3, r1, #31
 8001a86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001a8a:	1a5b      	subs	r3, r3, r1
 8001a8c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a90:	461d      	mov	r5, r3
 8001a92:	4626      	mov	r6, r4
 8001a94:	46ab      	mov	fp, r5
 8001a96:	46b4      	mov	ip, r6
 8001a98:	eb1b 030b 	adds.w	r3, fp, fp
 8001a9c:	eb4c 040c 	adc.w	r4, ip, ip
 8001aa0:	469b      	mov	fp, r3
 8001aa2:	46a4      	mov	ip, r4
 8001aa4:	eb1b 0b05 	adds.w	fp, fp, r5
 8001aa8:	eb4c 0c06 	adc.w	ip, ip, r6
 8001aac:	f04f 0100 	mov.w	r1, #0
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001ab8:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001abc:	ea4f 118b 	mov.w	r1, fp, lsl #6
 8001ac0:	eb1b 0b01 	adds.w	fp, fp, r1
 8001ac4:	eb4c 0c02 	adc.w	ip, ip, r2
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001ad4:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8001ad8:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8001adc:	468b      	mov	fp, r1
 8001ade:	4694      	mov	ip, r2
 8001ae0:	eb1b 0b05 	adds.w	fp, fp, r5
 8001ae4:	eb4c 0c06 	adc.w	ip, ip, r6
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001af4:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8001af8:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8001afc:	468b      	mov	fp, r1
 8001afe:	4694      	mov	ip, r2
 8001b00:	eb1b 0005 	adds.w	r0, fp, r5
 8001b04:	eb4c 0106 	adc.w	r1, ip, r6
 8001b08:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b0c:	f7ff f80c 	bl	8000b28 <__aeabi_ldivmod>
 8001b10:	4603      	mov	r3, r0
 8001b12:	460c      	mov	r4, r1
 8001b14:	e9c7 3402 	strd	r3, r4, [r7, #8]
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001b1e:	b21d      	sxth	r5, r3
 8001b20:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001b24:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f174 0200 	sbcs.w	r2, r4, #0
 8001b2e:	da06      	bge.n	8001b3e <compensate_pressure+0x2b6>
 8001b30:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	185b      	adds	r3, r3, r1
 8001b3a:	eb44 0402 	adc.w	r4, r4, r2
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	0b59      	lsrs	r1, r3, #13
 8001b48:	ea41 41c4 	orr.w	r1, r1, r4, lsl #19
 8001b4c:	1362      	asrs	r2, r4, #13
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	fb03 f106 	mul.w	r1, r3, r6
 8001b56:	fb05 f204 	mul.w	r2, r5, r4
 8001b5a:	1888      	adds	r0, r1, r2
 8001b5c:	fba5 1203 	umull	r1, r2, r5, r3
 8001b60:	1883      	adds	r3, r0, r2
 8001b62:	461a      	mov	r2, r3
 8001b64:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f174 0000 	sbcs.w	r0, r4, #0
 8001b6e:	da06      	bge.n	8001b7e <compensate_pressure+0x2f6>
 8001b70:	f641 75ff 	movw	r5, #8191	; 0x1fff
 8001b74:	f04f 0600 	mov.w	r6, #0
 8001b78:	195b      	adds	r3, r3, r5
 8001b7a:	eb44 0406 	adc.w	r4, r4, r6
 8001b7e:	f04f 0500 	mov.w	r5, #0
 8001b82:	f04f 0600 	mov.w	r6, #0
 8001b86:	0b5d      	lsrs	r5, r3, #13
 8001b88:	ea45 45c4 	orr.w	r5, r5, r4, lsl #19
 8001b8c:	1366      	asrs	r6, r4, #13
 8001b8e:	462b      	mov	r3, r5
 8001b90:	4634      	mov	r4, r6
 8001b92:	fb03 f502 	mul.w	r5, r3, r2
 8001b96:	fb01 f004 	mul.w	r0, r1, r4
 8001b9a:	4428      	add	r0, r5
 8001b9c:	fba1 3403 	umull	r3, r4, r1, r3
 8001ba0:	1902      	adds	r2, r0, r4
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f174 0200 	sbcs.w	r2, r4, #0
 8001baa:	da0b      	bge.n	8001bc4 <compensate_pressure+0x33c>
 8001bac:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	185b      	adds	r3, r3, r1
 8001bb6:	eb44 0402 	adc.w	r4, r4, r2
 8001bba:	e003      	b.n	8001bc4 <compensate_pressure+0x33c>
 8001bbc:	002dc6c0 	.word	0x002dc6c0
 8001bc0:	00a7d8c0 	.word	0x00a7d8c0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	0e59      	lsrs	r1, r3, #25
 8001bce:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8001bd2:	1662      	asrs	r2, r4, #25
 8001bd4:	e9c7 1208 	strd	r1, r2, [r7, #32]
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	fb04 f102 	mul.w	r1, r4, r2
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	fb03 f202 	mul.w	r2, r3, r2
 8001bf0:	440a      	add	r2, r1
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	fba1 3403 	umull	r3, r4, r1, r3
 8001bf8:	4422      	add	r2, r4
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f174 0200 	sbcs.w	r2, r4, #0
 8001c02:	da05      	bge.n	8001c10 <compensate_pressure+0x388>
 8001c04:	494c      	ldr	r1, [pc, #304]	; (8001d38 <compensate_pressure+0x4b0>)
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	185b      	adds	r3, r3, r1
 8001c0c:	eb44 0402 	adc.w	r4, r4, r2
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	0cd9      	lsrs	r1, r3, #19
 8001c1a:	ea41 3144 	orr.w	r1, r1, r4, lsl #13
 8001c1e:	14e2      	asrs	r2, r4, #19
 8001c20:	e9c7 1206 	strd	r1, r2, [r7, #24]
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001c24:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c28:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c2c:	18cd      	adds	r5, r1, r3
 8001c2e:	eb42 0604 	adc.w	r6, r2, r4
 8001c32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001c36:	1959      	adds	r1, r3, r5
 8001c38:	eb44 0206 	adc.w	r2, r4, r6
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4614      	mov	r4, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f174 0200 	sbcs.w	r2, r4, #0
 8001c46:	da02      	bge.n	8001c4e <compensate_pressure+0x3c6>
 8001c48:	33ff      	adds	r3, #255	; 0xff
 8001c4a:	f144 0400 	adc.w	r4, r4, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	0a19      	lsrs	r1, r3, #8
 8001c58:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001c5c:	1222      	asrs	r2, r4, #8
 8001c5e:	460d      	mov	r5, r1
 8001c60:	4616      	mov	r6, r2
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001c68:	b219      	sxth	r1, r3
 8001c6a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c6e:	f04f 0b00 	mov.w	fp, #0
 8001c72:	f04f 0c00 	mov.w	ip, #0
 8001c76:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 8001c7a:	ea4c 7c11 	orr.w	ip, ip, r1, lsr #28
 8001c7e:	ea4f 1b01 	mov.w	fp, r1, lsl #4
 8001c82:	eb1b 0305 	adds.w	r3, fp, r5
 8001c86:	eb4c 0406 	adc.w	r4, ip, r6
 8001c8a:	e9c7 3402 	strd	r3, r4, [r7, #8]
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001c8e:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8001c92:	0ff2      	lsrs	r2, r6, #31
 8001c94:	4611      	mov	r1, r2
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	186b      	adds	r3, r5, r1
 8001c9c:	eb46 0402 	adc.w	r4, r6, r2
 8001ca0:	1064      	asrs	r4, r4, #1
 8001ca2:	ea4f 0333 	mov.w	r3, r3, rrx
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	4626      	mov	r6, r4
 8001caa:	46ab      	mov	fp, r5
 8001cac:	46b4      	mov	ip, r6
 8001cae:	eb1b 030b 	adds.w	r3, fp, fp
 8001cb2:	eb4c 040c 	adc.w	r4, ip, ip
 8001cb6:	469b      	mov	fp, r3
 8001cb8:	46a4      	mov	ip, r4
 8001cba:	eb1b 0b05 	adds.w	fp, fp, r5
 8001cbe:	eb4c 0c06 	adc.w	ip, ip, r6
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8001cce:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8001cd2:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8001cd6:	eb1b 0b01 	adds.w	fp, fp, r1
 8001cda:	eb4c 0c02 	adc.w	ip, ip, r2
 8001cde:	eb1b 0305 	adds.w	r3, fp, r5
 8001ce2:	eb4c 0406 	adc.w	r4, ip, r6
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f174 0200 	sbcs.w	r2, r4, #0
 8001cec:	da02      	bge.n	8001cf4 <compensate_pressure+0x46c>
 8001cee:	337f      	adds	r3, #127	; 0x7f
 8001cf0:	f144 0400 	adc.w	r4, r4, #0
 8001cf4:	f04f 0100 	mov.w	r1, #0
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	09d9      	lsrs	r1, r3, #7
 8001cfe:	ea41 6144 	orr.w	r1, r1, r4, lsl #25
 8001d02:	11e2      	asrs	r2, r4, #7
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34

		if (pressure < pressure_min)
 8001d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d202      	bcs.n	8001d18 <compensate_pressure+0x490>
			pressure = pressure_min;
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
 8001d16:	e008      	b.n	8001d2a <compensate_pressure+0x4a2>
		else if (pressure > pressure_max)
 8001d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d904      	bls.n	8001d2a <compensate_pressure+0x4a2>
			pressure = pressure_max;
 8001d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
 8001d24:	e001      	b.n	8001d2a <compensate_pressure+0x4a2>
	} else {
		pressure = pressure_min;
 8001d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return pressure;
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3738      	adds	r7, #56	; 0x38
 8001d30:	46bd      	mov	sp, r7
 8001d32:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001d36:	bf00      	nop
 8001d38:	0007ffff 	.word	0x0007ffff

08001d3c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8001d46:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 8001d4a:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001d54:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	039b      	lsls	r3, r3, #14
 8001d5c:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d64:	051b      	lsls	r3, r3, #20
 8001d66:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	1ad2      	subs	r2, r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da02      	bge.n	8001d90 <compensate_humidity+0x54>
 8001d8a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001d8e:	337f      	adds	r3, #127	; 0x7f
 8001d90:	13db      	asrs	r3, r3, #15
 8001d92:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	fb03 f302 	mul.w	r3, r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da01      	bge.n	8001daa <compensate_humidity+0x6e>
 8001da6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001daa:	129b      	asrs	r3, r3, #10
 8001dac:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7f1b      	ldrb	r3, [r3, #28]
 8001db2:	461a      	mov	r2, r3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	fb03 f302 	mul.w	r3, r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da01      	bge.n	8001dc2 <compensate_humidity+0x86>
 8001dbe:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001dc2:	12db      	asrs	r3, r3, #11
 8001dc4:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	da01      	bge.n	8001dda <compensate_humidity+0x9e>
 8001dd6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8001dda:	129b      	asrs	r3, r3, #10
 8001ddc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8001de0:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001de8:	461a      	mov	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	fb03 f302 	mul.w	r3, r3, r2
 8001df0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da02      	bge.n	8001dfe <compensate_humidity+0xc2>
 8001df8:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001dfc:	333f      	adds	r3, #63	; 0x3f
 8001dfe:	139b      	asrs	r3, r3, #14
 8001e00:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da02      	bge.n	8001e18 <compensate_humidity+0xdc>
 8001e12:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001e16:	337f      	adds	r3, #127	; 0x7f
 8001e18:	13db      	asrs	r3, r3, #15
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da02      	bge.n	8001e28 <compensate_humidity+0xec>
 8001e22:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001e26:	337f      	adds	r3, #127	; 0x7f
 8001e28:	13db      	asrs	r3, r3, #15
 8001e2a:	fb03 f302 	mul.w	r3, r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da00      	bge.n	8001e34 <compensate_humidity+0xf8>
 8001e32:	337f      	adds	r3, #127	; 0x7f
 8001e34:	11db      	asrs	r3, r3, #7
 8001e36:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	7e1b      	ldrb	r3, [r3, #24]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	fb03 f302 	mul.w	r3, r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	da00      	bge.n	8001e4a <compensate_humidity+0x10e>
 8001e48:	330f      	adds	r3, #15
 8001e4a:	111b      	asrs	r3, r3, #4
 8001e4c:	425b      	negs	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	4413      	add	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e5c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001e64:	bfa8      	it	ge
 8001e66:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001e6a:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da01      	bge.n	8001e76 <compensate_humidity+0x13a>
 8001e72:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001e76:	131b      	asrs	r3, r3, #12
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24

	if (humidity > humidity_max)
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d901      	bls.n	8001e86 <compensate_humidity+0x14a>
		humidity = humidity_max;
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24

	return humidity;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	372c      	adds	r7, #44	; 0x2c
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b08a      	sub	sp, #40	; 0x28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8001e9a:	2388      	movs	r3, #136	; 0x88
 8001e9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	831a      	strh	r2, [r3, #24]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001eb4:	f107 010c 	add.w	r1, r7, #12
 8001eb8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	221a      	movs	r2, #26
 8001ec0:	f7ff f837 	bl	8000f32 <bme280_get_regs>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8001eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d11d      	bne.n	8001f0e <get_calib_data+0x7c>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f848 	bl	8001f6e <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001ede:	23e1      	movs	r3, #225	; 0xe1
 8001ee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001ee4:	f107 010c 	add.w	r1, r7, #12
 8001ee8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2207      	movs	r2, #7
 8001ef0:	f7ff f81f 	bl	8000f32 <bme280_get_regs>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001efa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <get_calib_data+0x7c>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f8de 	bl	80020ca <parse_humidity_calib_data>
		}
	}

	return rslt;
 8001f0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3728      	adds	r7, #40	; 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b087      	sub	sp, #28
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8001f28:	2301      	movs	r3, #1
 8001f2a:	75fb      	strb	r3, [r7, #23]
 8001f2c:	e016      	b.n	8001f5c <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	441a      	add	r2, r3
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	440b      	add	r3, r1
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	441a      	add	r2, r3
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	440b      	add	r3, r1
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	75fb      	strb	r3, [r7, #23]
 8001f5c:	7dfa      	ldrb	r2, [r7, #23]
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d3e4      	bcc.n	8001f2e <interleave_reg_addr+0x14>
	}
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b085      	sub	sp, #20
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3301      	adds	r3, #1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3305      	adds	r3, #5
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3307      	adds	r3, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3306      	adds	r3, #6
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3309      	adds	r3, #9
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	330b      	adds	r3, #11
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	330a      	adds	r3, #10
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b21b      	sxth	r3, r3
 8002014:	4313      	orrs	r3, r2
 8002016:	b21a      	sxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	330d      	adds	r3, #13
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b21a      	sxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	330c      	adds	r3, #12
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21a      	sxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	330f      	adds	r3, #15
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b21a      	sxth	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	330e      	adds	r3, #14
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21a      	sxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3311      	adds	r3, #17
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	b21a      	sxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3310      	adds	r3, #16
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21a      	sxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3313      	adds	r3, #19
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	b21a      	sxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3312      	adds	r3, #18
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21a      	sxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3315      	adds	r3, #21
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	b21a      	sxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3314      	adds	r3, #20
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21a      	sxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3317      	adds	r3, #23
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3316      	adds	r3, #22
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7e5a      	ldrb	r2, [r3, #25]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	761a      	strb	r2, [r3, #24]

}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3310      	adds	r3, #16
 80020d8:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3301      	adds	r3, #1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	789a      	ldrb	r2, [r3, #2]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3303      	adds	r3, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	b29b      	uxth	r3, r3
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	b29b      	uxth	r3, r3
 8002108:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b21b      	sxth	r3, r3
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002118:	8a7a      	ldrh	r2, [r7, #18]
 800211a:	8a3b      	ldrh	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	b21a      	sxth	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3305      	adds	r3, #5
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	b25b      	sxtb	r3, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	b29b      	uxth	r3, r3
 8002132:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3304      	adds	r3, #4
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	b2db      	uxtb	r3, r3
 800213e:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002140:	89fa      	ldrh	r2, [r7, #14]
 8002142:	89bb      	ldrh	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3306      	adds	r3, #6
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b25a      	sxtb	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	460a      	mov	r2, r1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4613      	mov	r3, r2
 8002172:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002178:	79fa      	ldrb	r2, [r7, #7]
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	4013      	ands	r3, r2
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e001      	b.n	800218e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <null_ptr_check+0x26>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <null_ptr_check+0x26>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <null_ptr_check+0x26>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80021c0:	23ff      	movs	r3, #255	; 0xff
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e001      	b.n	80021ca <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af02      	add	r7, sp, #8
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f023 030f 	bic.w	r3, r3, #15
 80021e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	f043 030c 	orr.w	r3, r3, #12
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	b2db      	uxtb	r3, r3
 8002202:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002204:	7bbb      	ldrb	r3, [r7, #14]
 8002206:	f043 030c 	orr.w	r3, r3, #12
 800220a:	b2db      	uxtb	r3, r3
 800220c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	b2db      	uxtb	r3, r3
 8002216:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002218:	f107 0208 	add.w	r2, r7, #8
 800221c:	2364      	movs	r3, #100	; 0x64
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	2304      	movs	r3, #4
 8002222:	214e      	movs	r1, #78	; 0x4e
 8002224:	4803      	ldr	r0, [pc, #12]	; (8002234 <lcd_send_cmd+0x5c>)
 8002226:	f001 fa8d 	bl	8003744 <HAL_I2C_Master_Transmit>
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20001ec4 	.word	0x20001ec4

08002238 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af02      	add	r7, sp, #8
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f023 030f 	bic.w	r3, r3, #15
 8002248:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	f043 030d 	orr.w	r3, r3, #13
 8002256:	b2db      	uxtb	r3, r3
 8002258:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	f043 0309 	orr.w	r3, r3, #9
 8002260:	b2db      	uxtb	r3, r3
 8002262:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8002264:	7bbb      	ldrb	r3, [r7, #14]
 8002266:	f043 030d 	orr.w	r3, r3, #13
 800226a:	b2db      	uxtb	r3, r3
 800226c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	f043 0309 	orr.w	r3, r3, #9
 8002274:	b2db      	uxtb	r3, r3
 8002276:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002278:	f107 0208 	add.w	r2, r7, #8
 800227c:	2364      	movs	r3, #100	; 0x64
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2304      	movs	r3, #4
 8002282:	214e      	movs	r1, #78	; 0x4e
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <lcd_send_data+0x5c>)
 8002286:	f001 fa5d 	bl	8003744 <HAL_I2C_Master_Transmit>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20001ec4 	.word	0x20001ec4

08002298 <lcd_clear>:

void lcd_clear (void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800229e:	2080      	movs	r0, #128	; 0x80
 80022a0:	f7ff ff9a 	bl	80021d8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	e005      	b.n	80022b6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80022aa:	2020      	movs	r0, #32
 80022ac:	f7ff ffc4 	bl	8002238 <lcd_send_data>
	for (int i=0; i<70; i++)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b45      	cmp	r3, #69	; 0x45
 80022ba:	ddf6      	ble.n	80022aa <lcd_clear+0x12>
	}
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
    switch (row)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <lcd_put_cur+0x16>
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <lcd_put_cur+0x20>
 80022d8:	e009      	b.n	80022ee <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e0:	603b      	str	r3, [r7, #0]
            break;
 80022e2:	e004      	b.n	80022ee <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022ea:	603b      	str	r3, [r7, #0]
            break;
 80022ec:	bf00      	nop
    }

    lcd_send_cmd (col);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff70 	bl	80021d8 <lcd_send_cmd>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <lcd_init>:


void lcd_init (void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002304:	2032      	movs	r0, #50	; 0x32
 8002306:	f000 fe13 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x30);
 800230a:	2030      	movs	r0, #48	; 0x30
 800230c:	f7ff ff64 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8002310:	2005      	movs	r0, #5
 8002312:	f000 fe0d 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002316:	2030      	movs	r0, #48	; 0x30
 8002318:	f7ff ff5e 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800231c:	2001      	movs	r0, #1
 800231e:	f000 fe07 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x30);
 8002322:	2030      	movs	r0, #48	; 0x30
 8002324:	f7ff ff58 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(10);
 8002328:	200a      	movs	r0, #10
 800232a:	f000 fe01 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800232e:	2020      	movs	r0, #32
 8002330:	f7ff ff52 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(10);
 8002334:	200a      	movs	r0, #10
 8002336:	f000 fdfb 	bl	8002f30 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800233a:	2028      	movs	r0, #40	; 0x28
 800233c:	f7ff ff4c 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(1);
 8002340:	2001      	movs	r0, #1
 8002342:	f000 fdf5 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8002346:	2008      	movs	r0, #8
 8002348:	f7ff ff46 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(1);
 800234c:	2001      	movs	r0, #1
 800234e:	f000 fdef 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8002352:	2001      	movs	r0, #1
 8002354:	f7ff ff40 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f000 fde9 	bl	8002f30 <HAL_Delay>
	HAL_Delay(1);
 800235e:	2001      	movs	r0, #1
 8002360:	f000 fde6 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8002364:	2006      	movs	r0, #6
 8002366:	f7ff ff37 	bl	80021d8 <lcd_send_cmd>
	HAL_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f000 fde0 	bl	8002f30 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002370:	200c      	movs	r0, #12
 8002372:	f7ff ff31 	bl	80021d8 <lcd_send_cmd>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002382:	e006      	b.n	8002392 <lcd_send_string+0x18>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff53 	bl	8002238 <lcd_send_data>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f4      	bne.n	8002384 <lcd_send_string+0xa>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023ae:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d013      	beq.n	80023e2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80023ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023be:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80023c2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80023ca:	e000      	b.n	80023ce <ITM_SendChar+0x2c>
    {
      __NOP();
 80023cc:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80023ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f9      	beq.n	80023cc <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80023d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e009      	b.n	8002414 <_write+0x26>
		ITM_SendChar(*ptr++);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	60ba      	str	r2, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ffca 	bl	80023a2 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbf1      	blt.n	8002400 <_write+0x12>
	}
	return len;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <user_i2c_read>:
int8_t rslt;

char line1[16];
char line2[16];

int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af02      	add	r7, sp, #8
 800242e:	603a      	str	r2, [r7, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	460b      	mov	r3, r1
 8002438:	71bb      	strb	r3, [r7, #6]
 800243a:	4613      	mov	r3, r2
 800243c:	80bb      	strh	r3, [r7, #4]
	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK)
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	b29b      	uxth	r3, r3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	b299      	uxth	r1, r3
 8002446:	1dba      	adds	r2, r7, #6
 8002448:	230a      	movs	r3, #10
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <user_i2c_read+0x6c>)
 8002450:	f001 f978 	bl	8003744 <HAL_I2C_Master_Transmit>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <user_i2c_read+0x38>
		return -1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245e:	e015      	b.n	800248c <user_i2c_read+0x64>
	if (HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	b21b      	sxth	r3, r3
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	b21b      	sxth	r3, r3
 800246c:	b299      	uxth	r1, r3
 800246e:	88ba      	ldrh	r2, [r7, #4]
 8002470:	230a      	movs	r3, #10
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4613      	mov	r3, r2
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4806      	ldr	r0, [pc, #24]	; (8002494 <user_i2c_read+0x6c>)
 800247a:	f001 fa61 	bl	8003940 <HAL_I2C_Master_Receive>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <user_i2c_read+0x62>
			!= HAL_OK)
		return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002488:	e000      	b.n	800248c <user_i2c_read+0x64>

	return 0;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20001ec4 	.word	0x20001ec4

08002498 <user_delay_ms>:

void user_delay_ms(uint32_t period) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fd45 	bl	8002f30 <HAL_Delay>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <user_i2c_write>:

int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	603a      	str	r2, [r7, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
 80024be:	460b      	mov	r3, r1
 80024c0:	71bb      	strb	r3, [r7, #6]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len + 1);
 80024c6:	88bb      	ldrh	r3, [r7, #4]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 ffe8 	bl	80084a0 <malloc>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 80024d4:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	701a      	strb	r2, [r3, #0]
	memcpy(buf + 1, data, len);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	3301      	adds	r3, #1
 80024e0:	88ba      	ldrh	r2, [r7, #4]
 80024e2:	6839      	ldr	r1, [r7, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f005 ffeb 	bl	80084c0 <memcpy>

	if (HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*) buf, len + 1,
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	b299      	uxth	r1, r3
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	3301      	adds	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4613      	mov	r3, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4808      	ldr	r0, [pc, #32]	; (8002524 <user_i2c_write+0x74>)
 8002504:	f001 f91e 	bl	8003744 <HAL_I2C_Master_Transmit>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <user_i2c_write+0x64>
	HAL_MAX_DELAY) != HAL_OK)
		return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002512:	e003      	b.n	800251c <user_i2c_write+0x6c>

	free(buf);
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f005 ffcb 	bl	80084b0 <free>
	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20001ec4 	.word	0x20001ec4

08002528 <HAL_UART_RxCpltCallback>:
	}
}
/*------------------------IDLE_Callback---------------------------------------*/

/*------------------------RxCpltCallback---------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d128      	bne.n	800258a <HAL_UART_RxCpltCallback+0x62>
		printf("RxCpltCallback = OK\n\r");
 8002538:	4817      	ldr	r0, [pc, #92]	; (8002598 <HAL_UART_RxCpltCallback+0x70>)
 800253a:	f006 fccb 	bl	8008ed4 <iprintf>
		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0210 	bic.w	r2, r2, #16
 800254c:	60da      	str	r2, [r3, #12]

		printf("rx_buffer is overflow\n\r");
 800254e:	4813      	ldr	r0, [pc, #76]	; (800259c <HAL_UART_RxCpltCallback+0x74>)
 8002550:	f006 fcc0 	bl	8008ed4 <iprintf>

		HAL_UART_AbortReceive_IT(&huart1);
 8002554:	480f      	ldr	r0, [pc, #60]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002556:	f002 fef5 	bl	8005344 <HAL_UART_AbortReceive_IT>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b07      	ldr	r3, [pc, #28]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0210 	orr.w	r2, r2, #16
 800257e:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size);
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	4907      	ldr	r1, [pc, #28]	; (80025a0 <HAL_UART_RxCpltCallback+0x78>)
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <HAL_UART_RxCpltCallback+0x6c>)
 8002586:	f002 fe88 	bl	800529a <HAL_UART_Receive_IT>

	}
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200023e4 	.word	0x200023e4
 8002598:	0800aef8 	.word	0x0800aef8
 800259c:	0800af10 	.word	0x0800af10
 80025a0:	20000208 	.word	0x20000208

080025a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025a8:	f000 fc90 	bl	8002ecc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025ac:	f000 f8ae 	bl	800270c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025b0:	f000 f94a 	bl	8002848 <MX_GPIO_Init>
	MX_I2C1_Init();
 80025b4:	f000 f8f0 	bl	8002798 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80025b8:	f000 f91c 	bl	80027f4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	/* BME280 */
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80025bc:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <main+0x114>)
 80025be:	2276      	movs	r2, #118	; 0x76
 80025c0:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80025c2:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <main+0x114>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <main+0x114>)
 80025ca:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <main+0x118>)
 80025cc:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <main+0x114>)
 80025d0:	4a3b      	ldr	r2, [pc, #236]	; (80026c0 <main+0x11c>)
 80025d2:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 80025d4:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <main+0x114>)
 80025d6:	4a3b      	ldr	r2, [pc, #236]	; (80026c4 <main+0x120>)
 80025d8:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80025da:	4837      	ldr	r0, [pc, #220]	; (80026b8 <main+0x114>)
 80025dc:	f7fe fc5e 	bl	8000e9c <bme280_init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <main+0x124>)
 80025e6:	701a      	strb	r2, [r3, #0]

	/* BME280 */
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <main+0x114>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80025f0:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <main+0x114>)
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <main+0x114>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8002600:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <main+0x114>)
 8002602:	2204      	movs	r2, #4
 8002604:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(
 8002608:	492b      	ldr	r1, [pc, #172]	; (80026b8 <main+0x114>)
 800260a:	200f      	movs	r0, #15
 800260c:	f7fe fd3a 	bl	8001084 <bme280_set_sensor_settings>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <main+0x124>)
 8002616:	701a      	strb	r2, [r3, #0]
			BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL
					| BME280_FILTER_SEL, &dev);

	/*-----------------------------For LCD-------------------------------------*/
	lcd_init();
 8002618:	f7ff fe72 	bl	8002300 <lcd_init>
	lcd_clear(); // Очищаем LCD
 800261c:	f7ff fe3c 	bl	8002298 <lcd_clear>
	lcd_put_cur(0, 0); // Устанавливаем курсор в нужное место
 8002620:	2100      	movs	r1, #0
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fe4e 	bl	80022c4 <lcd_put_cur>
	lcd_send_string("Hello World!");
 8002628:	4828      	ldr	r0, [pc, #160]	; (80026cc <main+0x128>)
 800262a:	f7ff fea6 	bl	800237a <lcd_send_string>
	HAL_Delay(5000);
 800262e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002632:	f000 fc7d 	bl	8002f30 <HAL_Delay>
	lcd_clear(); // Очищаем LCD
 8002636:	f7ff fe2f 	bl	8002298 <lcd_clear>

	lcd_put_cur(1, 0); // Устанавливаем курсор в нужное место
 800263a:	2100      	movs	r1, #0
 800263c:	2001      	movs	r0, #1
 800263e:	f7ff fe41 	bl	80022c4 <lcd_put_cur>
	lcd_send_string("Cool, It works!");
 8002642:	4823      	ldr	r0, [pc, #140]	; (80026d0 <main+0x12c>)
 8002644:	f7ff fe99 	bl	800237a <lcd_send_string>
	/*------------------------For MH-Z19Bf---------------------------------------*/
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <main+0x130>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <main+0x130>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0210 	orr.w	r2, r2, #16
 8002656:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(&huart1, rx_buffer, rx_buffer_size); // Прием данных
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	491f      	ldr	r1, [pc, #124]	; (80026d8 <main+0x134>)
 800265c:	481d      	ldr	r0, [pc, #116]	; (80026d4 <main+0x130>)
 800265e:	f002 fe1c 	bl	800529a <HAL_UART_Receive_IT>
	T = HAL_GetTick();
 8002662:	f000 fc5b 	bl	8002f1c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <main+0x138>)
 800266a:	601a      	str	r2, [r3, #0]
	/*------------------------End for MH-Z19Bf---------------------------------------*/
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800266c:	f003 f998 	bl	80059a0 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of myQueue */
	myQueueHandle = osMessageQueueNew(5, sizeof(uint16_t), &myQueue_attributes);
 8002670:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <main+0x13c>)
 8002672:	2102      	movs	r1, #2
 8002674:	2005      	movs	r0, #5
 8002676:	f003 fad1 	bl	8005c1c <osMessageQueueNew>
 800267a:	4602      	mov	r2, r0
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <main+0x140>)
 800267e:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8002680:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <main+0x144>)
 8002682:	2100      	movs	r1, #0
 8002684:	4819      	ldr	r0, [pc, #100]	; (80026ec <main+0x148>)
 8002686:	f003 f9f1 	bl	8005a6c <osThreadNew>
 800268a:	4602      	mov	r2, r0
 800268c:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <main+0x14c>)
 800268e:	601a      	str	r2, [r3, #0]
			&defaultTask_attributes);

	/* creation of my_BME280_Task */
	my_BME280_TaskHandle = osThreadNew(Start_BME280_Task, NULL,
 8002690:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <main+0x150>)
 8002692:	2100      	movs	r1, #0
 8002694:	4818      	ldr	r0, [pc, #96]	; (80026f8 <main+0x154>)
 8002696:	f003 f9e9 	bl	8005a6c <osThreadNew>
 800269a:	4602      	mov	r2, r0
 800269c:	4b17      	ldr	r3, [pc, #92]	; (80026fc <main+0x158>)
 800269e:	601a      	str	r2, [r3, #0]
			&my_BME280_Task_attributes);

	/* creation of my_MHZ19B_Task */
	my_MHZ19B_TaskHandle = osThreadNew(Start_MHZ19B_Task, NULL,
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <main+0x15c>)
 80026a2:	2100      	movs	r1, #0
 80026a4:	4817      	ldr	r0, [pc, #92]	; (8002704 <main+0x160>)
 80026a6:	f003 f9e1 	bl	8005a6c <osThreadNew>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <main+0x164>)
 80026ae:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80026b0:	f003 f9a8 	bl	8005a04 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80026b4:	e7fe      	b.n	80026b4 <main+0x110>
 80026b6:	bf00      	nop
 80026b8:	20001b60 	.word	0x20001b60
 80026bc:	08002429 	.word	0x08002429
 80026c0:	080024b1 	.word	0x080024b1
 80026c4:	08002499 	.word	0x08002499
 80026c8:	20001ec0 	.word	0x20001ec0
 80026cc:	0800af28 	.word	0x0800af28
 80026d0:	0800af38 	.word	0x0800af38
 80026d4:	200023e4 	.word	0x200023e4
 80026d8:	20000208 	.word	0x20000208
 80026dc:	200023d8 	.word	0x200023d8
 80026e0:	0800b000 	.word	0x0800b000
 80026e4:	20002438 	.word	0x20002438
 80026e8:	0800af94 	.word	0x0800af94
 80026ec:	080028a5 	.word	0x080028a5
 80026f0:	20001b5c 	.word	0x20001b5c
 80026f4:	0800afb8 	.word	0x0800afb8
 80026f8:	080028b9 	.word	0x080028b9
 80026fc:	2000243c 	.word	0x2000243c
 8002700:	0800afdc 	.word	0x0800afdc
 8002704:	08002a6d 	.word	0x08002a6d
 8002708:	20002440 	.word	0x20002440

0800270c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b090      	sub	sp, #64	; 0x40
 8002710:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	2228      	movs	r2, #40	; 0x28
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fedb 	bl	80084d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800272e:	2301      	movs	r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002736:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273c:	2301      	movs	r3, #1
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002740:	2302      	movs	r3, #2
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002748:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800274a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	4618      	mov	r0, r3
 8002756:	f001 fe79 	bl	800444c <HAL_RCC_OscConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0x58>
		Error_Handler();
 8002760:	f000 f9b4 	bl	8002acc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002764:	230f      	movs	r3, #15
 8002766:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002768:	2302      	movs	r3, #2
 800276a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2102      	movs	r1, #2
 800277e:	4618      	mov	r0, r3
 8002780:	f002 f8e4 	bl	800494c <HAL_RCC_ClockConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <SystemClock_Config+0x82>
		Error_Handler();
 800278a:	f000 f99f 	bl	8002acc <Error_Handler>
	}
}
 800278e:	bf00      	nop
 8002790:	3740      	adds	r7, #64	; 0x40
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <MX_I2C1_Init+0x50>)
 800279e:	4a13      	ldr	r2, [pc, #76]	; (80027ec <MX_I2C1_Init+0x54>)
 80027a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <MX_I2C1_Init+0x58>)
 80027a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c8:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80027d4:	4804      	ldr	r0, [pc, #16]	; (80027e8 <MX_I2C1_Init+0x50>)
 80027d6:	f000 fe7d 	bl	80034d4 <HAL_I2C_Init>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80027e0:	f000 f974 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20001ec4 	.word	0x20001ec4
 80027ec:	40005400 	.word	0x40005400
 80027f0:	000186a0 	.word	0x000186a0

080027f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <MX_USART1_UART_Init+0x50>)
 80027fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 8002800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002804:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <MX_USART1_UART_Init+0x4c>)
 800282c:	f002 fca4 	bl	8005178 <HAL_UART_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002836:	f000 f949 	bl	8002acc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200023e4 	.word	0x200023e4
 8002844:	40013800 	.word	0x40013800

08002848 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <MX_GPIO_Init+0x58>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <MX_GPIO_Init+0x58>)
 8002854:	f043 0320 	orr.w	r3, r3, #32
 8002858:	6193      	str	r3, [r2, #24]
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_GPIO_Init+0x58>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_GPIO_Init+0x58>)
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <MX_GPIO_Init+0x58>)
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	6193      	str	r3, [r2, #24]
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_GPIO_Init+0x58>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_GPIO_Init+0x58>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a07      	ldr	r2, [pc, #28]	; (80028a0 <MX_GPIO_Init+0x58>)
 8002884:	f043 0308 	orr.w	r3, r3, #8
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <MX_GPIO_Init+0x58>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000

080028a4 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80028ac:	2001      	movs	r0, #1
 80028ae:	f003 f987 	bl	8005bc0 <osDelay>
 80028b2:	e7fb      	b.n	80028ac <StartDefaultTask+0x8>
 80028b4:	0000      	movs	r0, r0
	...

080028b8 <Start_BME280_Task>:
 * @brief Function implementing the my_BME280_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_BME280_Task */
void Start_BME280_Task(void *argument) {
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b093      	sub	sp, #76	; 0x4c
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_BME280_Task */
	/* Infinite loop */
	char str_t[20] = { 0 };
 80028c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
	char str_h[20] = { 0 };
 80028d0:	f107 0320 	add.w	r3, r7, #32
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
	char str_p[20] = { 0 };
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
	for (;;) {
		rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 80028f0:	4951      	ldr	r1, [pc, #324]	; (8002a38 <Start_BME280_Task+0x180>)
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7fe fc1b 	bl	800112e <bme280_set_sensor_mode>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <Start_BME280_Task+0x184>)
 80028fe:	701a      	strb	r2, [r3, #0]
		dev.delay_ms(40);
 8002900:	4b4d      	ldr	r3, [pc, #308]	; (8002a38 <Start_BME280_Task+0x180>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2028      	movs	r0, #40	; 0x28
 8002906:	4798      	blx	r3
		/* BME280 getrslt */
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <Start_BME280_Task+0x180>)
 800290a:	494d      	ldr	r1, [pc, #308]	; (8002a40 <Start_BME280_Task+0x188>)
 800290c:	2007      	movs	r0, #7
 800290e:	f7fe fc8a 	bl	8001226 <bme280_get_sensor_data>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <Start_BME280_Task+0x184>)
 8002918:	701a      	strb	r2, [r3, #0]
		if (rslt == BME280_OK) {
 800291a:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <Start_BME280_Task+0x184>)
 800291c:	f993 3000 	ldrsb.w	r3, [r3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <Start_BME280_Task+0x38>
			temperature = comp_data.temperature / 100.0; /* °C  */
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <Start_BME280_Task+0x188>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fd6b 	bl	8000404 <__aeabi_i2d>
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <Start_BME280_Task+0x18c>)
 8002934:	f7fd fefa 	bl	800072c <__aeabi_ddiv>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4618      	mov	r0, r3
 800293e:	4621      	mov	r1, r4
 8002940:	f7fe f8a2 	bl	8000a88 <__aeabi_d2f>
 8002944:	4602      	mov	r2, r0
 8002946:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <Start_BME280_Task+0x190>)
 8002948:	601a      	str	r2, [r3, #0]
			humidity = comp_data.humidity / 1024.0; /* %   */
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <Start_BME280_Task+0x188>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd48 	bl	80003e4 <__aeabi_ui2d>
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <Start_BME280_Task+0x194>)
 800295a:	f7fd fee7 	bl	800072c <__aeabi_ddiv>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	4618      	mov	r0, r3
 8002964:	4621      	mov	r1, r4
 8002966:	f7fe f88f 	bl	8000a88 <__aeabi_d2f>
 800296a:	4602      	mov	r2, r0
 800296c:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <Start_BME280_Task+0x198>)
 800296e:	601a      	str	r2, [r3, #0]
			pressure = comp_data.pressure / 10000.0; /* hPa */
 8002970:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <Start_BME280_Task+0x188>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fd35 	bl	80003e4 <__aeabi_ui2d>
 800297a:	a32d      	add	r3, pc, #180	; (adr r3, 8002a30 <Start_BME280_Task+0x178>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fed4 	bl	800072c <__aeabi_ddiv>
 8002984:	4603      	mov	r3, r0
 8002986:	460c      	mov	r4, r1
 8002988:	4618      	mov	r0, r3
 800298a:	4621      	mov	r1, r4
 800298c:	f7fe f87c 	bl	8000a88 <__aeabi_d2f>
 8002990:	4602      	mov	r2, r0
 8002992:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <Start_BME280_Task+0x19c>)
 8002994:	601a      	str	r2, [r3, #0]

			//printf("TEMP: %03.1f \n", temperature);
			//printf("HUMID: %03.1f \n", humidity);
			//printf("PRESSURE: %03.1f \n", pressure);

			sprintf(str_t, "T-%.1f", temperature);
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <Start_BME280_Task+0x190>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fd44 	bl	8000428 <__aeabi_f2d>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80029a8:	461a      	mov	r2, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	492a      	ldr	r1, [pc, #168]	; (8002a58 <Start_BME280_Task+0x1a0>)
 80029ae:	f006 fab9 	bl	8008f24 <siprintf>
			lcd_put_cur(0, 0);
 80029b2:	2100      	movs	r1, #0
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7ff fc85 	bl	80022c4 <lcd_put_cur>
			lcd_send_string(str_t);
 80029ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fcdb 	bl	800237a <lcd_send_string>
			lcd_send_string("C");
 80029c4:	4825      	ldr	r0, [pc, #148]	; (8002a5c <Start_BME280_Task+0x1a4>)
 80029c6:	f7ff fcd8 	bl	800237a <lcd_send_string>

			sprintf(str_h, "H-%.1f", humidity);
 80029ca:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <Start_BME280_Task+0x198>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fd2a 	bl	8000428 <__aeabi_f2d>
 80029d4:	4603      	mov	r3, r0
 80029d6:	460c      	mov	r4, r1
 80029d8:	f107 0020 	add.w	r0, r7, #32
 80029dc:	461a      	mov	r2, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <Start_BME280_Task+0x1a8>)
 80029e2:	f006 fa9f 	bl	8008f24 <siprintf>
			lcd_put_cur(1, 9);
 80029e6:	2109      	movs	r1, #9
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7ff fc6b 	bl	80022c4 <lcd_put_cur>
			lcd_send_string(str_h);
 80029ee:	f107 0320 	add.w	r3, r7, #32
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fcc1 	bl	800237a <lcd_send_string>
			lcd_send_string("%");
 80029f8:	481a      	ldr	r0, [pc, #104]	; (8002a64 <Start_BME280_Task+0x1ac>)
 80029fa:	f7ff fcbe 	bl	800237a <lcd_send_string>

			sprintf(str_p, "P:%.1f", pressure);
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <Start_BME280_Task+0x19c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fd10 	bl	8000428 <__aeabi_f2d>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	f107 000c 	add.w	r0, r7, #12
 8002a10:	461a      	mov	r2, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	4914      	ldr	r1, [pc, #80]	; (8002a68 <Start_BME280_Task+0x1b0>)
 8002a16:	f006 fa85 	bl	8008f24 <siprintf>
			lcd_put_cur(1, 0);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	f7ff fc51 	bl	80022c4 <lcd_put_cur>
			lcd_send_string(str_p);
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fca7 	bl	800237a <lcd_send_string>
		rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002a2c:	e760      	b.n	80028f0 <Start_BME280_Task+0x38>
 8002a2e:	bf00      	nop
 8002a30:	00000000 	.word	0x00000000
 8002a34:	40c38800 	.word	0x40c38800
 8002a38:	20001b60 	.word	0x20001b60
 8002a3c:	20001ec0 	.word	0x20001ec0
 8002a40:	20001f18 	.word	0x20001f18
 8002a44:	40590000 	.word	0x40590000
 8002a48:	20001f24 	.word	0x20001f24
 8002a4c:	40900000 	.word	0x40900000
 8002a50:	200023e0 	.word	0x200023e0
 8002a54:	200023dc 	.word	0x200023dc
 8002a58:	0800af48 	.word	0x0800af48
 8002a5c:	0800af50 	.word	0x0800af50
 8002a60:	0800af54 	.word	0x0800af54
 8002a64:	0800af5c 	.word	0x0800af5c
 8002a68:	0800af60 	.word	0x0800af60

08002a6c <Start_MHZ19B_Task>:
 * @brief Function implementing the my_MHZ19B_Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_MHZ19B_Task */
void Start_MHZ19B_Task(void *argument) {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_MHZ19B_Task */
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - T >= 1000) {
 8002a74:	f000 fa52 	bl	8002f1c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <Start_MHZ19B_Task+0x30>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a84:	d3f6      	bcc.n	8002a74 <Start_MHZ19B_Task+0x8>
			T = HAL_GetTick();
 8002a86:	f000 fa49 	bl	8002f1c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <Start_MHZ19B_Task+0x30>)
 8002a8e:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart1, tx_buffer, 9);
 8002a90:	2209      	movs	r2, #9
 8002a92:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <Start_MHZ19B_Task+0x34>)
 8002a94:	4803      	ldr	r0, [pc, #12]	; (8002aa4 <Start_MHZ19B_Task+0x38>)
 8002a96:	f002 fbbc 	bl	8005212 <HAL_UART_Transmit_IT>
		if (HAL_GetTick() - T >= 1000) {
 8002a9a:	e7eb      	b.n	8002a74 <Start_MHZ19B_Task+0x8>
 8002a9c:	200023d8 	.word	0x200023d8
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	200023e4 	.word	0x200023e4

08002aa8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002aba:	f000 fa1d 	bl	8002ef8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40000800 	.word	0x40000800

08002acc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ad2:	e7fe      	b.n	8002ad2 <Error_Handler+0x6>

08002ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_MspInit+0x68>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <HAL_MspInit+0x68>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6193      	str	r3, [r2, #24]
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_MspInit+0x68>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_MspInit+0x68>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_MspInit+0x68>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	61d3      	str	r3, [r2, #28]
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_MspInit+0x68>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	210f      	movs	r1, #15
 8002b0e:	f06f 0001 	mvn.w	r0, #1
 8002b12:	f000 fae4 	bl	80030de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_MspInit+0x6c>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_MspInit+0x6c>)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000

08002b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <HAL_I2C_MspInit+0x70>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d123      	bne.n	8002bac <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <HAL_I2C_MspInit+0x74>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <HAL_I2C_MspInit+0x74>)
 8002b6a:	f043 0308 	orr.w	r3, r3, #8
 8002b6e:	6193      	str	r3, [r2, #24]
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_I2C_MspInit+0x74>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b7c:	23c0      	movs	r3, #192	; 0xc0
 8002b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b80:	2312      	movs	r3, #18
 8002b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b88:	f107 0310 	add.w	r3, r7, #16
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	480b      	ldr	r0, [pc, #44]	; (8002bbc <HAL_I2C_MspInit+0x78>)
 8002b90:	f000 fb46 	bl	8003220 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b94:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_I2C_MspInit+0x74>)
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <HAL_I2C_MspInit+0x74>)
 8002b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b9e:	61d3      	str	r3, [r2, #28]
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_I2C_MspInit+0x74>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40005400 	.word	0x40005400
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40010c00 	.word	0x40010c00

08002bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0310 	add.w	r3, r7, #16
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <HAL_UART_MspInit+0x9c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d139      	bne.n	8002c54 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be0:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_UART_MspInit+0xa0>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_UART_MspInit+0xa0>)
 8002be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_UART_MspInit+0xa0>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf8:	4b19      	ldr	r3, [pc, #100]	; (8002c60 <HAL_UART_MspInit+0xa0>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_UART_MspInit+0xa0>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_UART_MspInit+0xa0>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 0310 	add.w	r3, r7, #16
 8002c22:	4619      	mov	r1, r3
 8002c24:	480f      	ldr	r0, [pc, #60]	; (8002c64 <HAL_UART_MspInit+0xa4>)
 8002c26:	f000 fafb 	bl	8003220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <HAL_UART_MspInit+0xa4>)
 8002c40:	f000 faee 	bl	8003220 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2105      	movs	r1, #5
 8002c48:	2025      	movs	r0, #37	; 0x25
 8002c4a:	f000 fa48 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c4e:	2025      	movs	r0, #37	; 0x25
 8002c50:	f000 fa61 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c54:	bf00      	nop
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010800 	.word	0x40010800

08002c68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	; 0x30
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	201e      	movs	r0, #30
 8002c7e:	f000 fa2e 	bl	80030de <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c82:	201e      	movs	r0, #30
 8002c84:	f000 fa47 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <HAL_InitTick+0xa0>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_InitTick+0xa0>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	61d3      	str	r3, [r2, #28]
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_InitTick+0xa0>)
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca0:	f107 0210 	add.w	r2, r7, #16
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 ffcc 	bl	8004c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002cb0:	f001 ffa2 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_InitTick+0xa4>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	0c9b      	lsrs	r3, r3, #18
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_InitTick+0xa8>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_InitTick+0xac>)
 8002ccc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_InitTick+0xa8>)
 8002cd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cd4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_InitTick+0xa8>)
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_InitTick+0xa8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_InitTick+0xa8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002ce8:	4809      	ldr	r0, [pc, #36]	; (8002d10 <HAL_InitTick+0xa8>)
 8002cea:	f001 fffb 	bl	8004ce4 <HAL_TIM_Base_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002cf4:	4806      	ldr	r0, [pc, #24]	; (8002d10 <HAL_InitTick+0xa8>)
 8002cf6:	f002 f84d 	bl	8004d94 <HAL_TIM_Base_Start_IT>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	e000      	b.n	8002d00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3730      	adds	r7, #48	; 0x30
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	431bde83 	.word	0x431bde83
 8002d10:	20002570 	.word	0x20002570
 8002d14:	40000800 	.word	0x40000800

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d1c:	e7fe      	b.n	8002d1c <NMI_Handler+0x4>

08002d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d22:	e7fe      	b.n	8002d22 <HardFault_Handler+0x4>

08002d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <MemManage_Handler+0x4>

08002d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <BusFault_Handler+0x4>

08002d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <UsageFault_Handler+0x4>

08002d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
	...

08002d44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <TIM4_IRQHandler+0x10>)
 8002d4a:	f002 f875 	bl	8004e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20002570 	.word	0x20002570

08002d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <USART1_IRQHandler+0x10>)
 8002d5e:	f002 fb49 	bl	80053f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	200023e4 	.word	0x200023e4

08002d6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e00a      	b.n	8002d94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d7e:	f3af 8000 	nop.w
 8002d82:	4601      	mov	r1, r0
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	60ba      	str	r2, [r7, #8]
 8002d8a:	b2ca      	uxtb	r2, r1
 8002d8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dbf0      	blt.n	8002d7e <_read+0x12>
	}

return len;
 8002d9c:	687b      	ldr	r3, [r7, #4]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
	return -1;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dcc:	605a      	str	r2, [r3, #4]
	return 0;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <_isatty>:

int _isatty(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
	return 1;
 8002de2:	2301      	movs	r3, #1
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
	return 0;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f005 fb08 	bl	800844c <__errno>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	230c      	movs	r3, #12
 8002e40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	; (8002e6c <_sbrk+0x64>)
 8002e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20005000 	.word	0x20005000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	20000248 	.word	0x20000248
 8002e70:	20002600 	.word	0x20002600

08002e74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e82:	e003      	b.n	8002e8c <LoopCopyDataInit>

08002e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e8a:	3104      	adds	r1, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e94:	d3f6      	bcc.n	8002e84 <CopyDataInit>
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e98:	e002      	b.n	8002ea0 <LoopFillZerobss>

08002e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e9c:	f842 3b04 	str.w	r3, [r2], #4

08002ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ea4:	d3f9      	bcc.n	8002e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea6:	f7ff ffe5 	bl	8002e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f005 fad5 	bl	8008458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eae:	f7ff fb79 	bl	80025a4 <main>
  bx lr
 8002eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8002eb4:	0800b300 	.word	0x0800b300
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ebc:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8002ec0:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8002ec4:	20002600 	.word	0x20002600

08002ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_2_IRQHandler>
	...

08002ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x28>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x28>)
 8002ed6:	f043 0310 	orr.w	r3, r3, #16
 8002eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f8f3 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff fec0 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff fdf4 	bl	8002ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_IncTick+0x1c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x20>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_IncTick+0x20>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000014 	.word	0x20000014
 8002f18:	200025b8 	.word	0x200025b8

08002f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_GetTick+0x10>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	200025b8 	.word	0x200025b8

08002f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_GetTick>
 8002f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f48:	d005      	beq.n	8002f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_Delay+0x40>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f56:	bf00      	nop
 8002f58:	f7ff ffe0 	bl	8002f1c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d8f7      	bhi.n	8002f58 <HAL_Delay+0x28>
  {
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000014 	.word	0x20000014

08002f74 <__NVIC_SetPriorityGrouping>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4906      	ldr	r1, [pc, #24]	; (800300c <__NVIC_EnableIRQ+0x34>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff4f 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff64 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ffb2 	bl	8003064 <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff81 	bl	8003010 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff57 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003146:	2b02      	cmp	r3, #2
 8003148:	d005      	beq.n	8003156 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2204      	movs	r2, #4
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e051      	b.n	80031fa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 020e 	bic.w	r2, r2, #14
 8003164:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a22      	ldr	r2, [pc, #136]	; (8003204 <HAL_DMA_Abort_IT+0xd0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d029      	beq.n	80031d4 <HAL_DMA_Abort_IT+0xa0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a20      	ldr	r2, [pc, #128]	; (8003208 <HAL_DMA_Abort_IT+0xd4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d022      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x9c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <HAL_DMA_Abort_IT+0xd8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d01a      	beq.n	80031ca <HAL_DMA_Abort_IT+0x96>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1d      	ldr	r2, [pc, #116]	; (8003210 <HAL_DMA_Abort_IT+0xdc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d012      	beq.n	80031c4 <HAL_DMA_Abort_IT+0x90>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1c      	ldr	r2, [pc, #112]	; (8003214 <HAL_DMA_Abort_IT+0xe0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00a      	beq.n	80031be <HAL_DMA_Abort_IT+0x8a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1a      	ldr	r2, [pc, #104]	; (8003218 <HAL_DMA_Abort_IT+0xe4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d102      	bne.n	80031b8 <HAL_DMA_Abort_IT+0x84>
 80031b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031b6:	e00e      	b.n	80031d6 <HAL_DMA_Abort_IT+0xa2>
 80031b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031bc:	e00b      	b.n	80031d6 <HAL_DMA_Abort_IT+0xa2>
 80031be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031c2:	e008      	b.n	80031d6 <HAL_DMA_Abort_IT+0xa2>
 80031c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c8:	e005      	b.n	80031d6 <HAL_DMA_Abort_IT+0xa2>
 80031ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ce:	e002      	b.n	80031d6 <HAL_DMA_Abort_IT+0xa2>
 80031d0:	2310      	movs	r3, #16
 80031d2:	e000      	b.n	80031d6 <HAL_DMA_Abort_IT+0xa2>
 80031d4:	2301      	movs	r3, #1
 80031d6:	4a11      	ldr	r2, [pc, #68]	; (800321c <HAL_DMA_Abort_IT+0xe8>)
 80031d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
    } 
  }
  return status;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40020008 	.word	0x40020008
 8003208:	4002001c 	.word	0x4002001c
 800320c:	40020030 	.word	0x40020030
 8003210:	40020044 	.word	0x40020044
 8003214:	40020058 	.word	0x40020058
 8003218:	4002006c 	.word	0x4002006c
 800321c:	40020000 	.word	0x40020000

08003220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003220:	b480      	push	{r7}
 8003222:	b08b      	sub	sp, #44	; 0x2c
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800322e:	2300      	movs	r3, #0
 8003230:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003232:	e127      	b.n	8003484 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003234:	2201      	movs	r2, #1
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	429a      	cmp	r2, r3
 800324e:	f040 8116 	bne.w	800347e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b12      	cmp	r3, #18
 8003258:	d034      	beq.n	80032c4 <HAL_GPIO_Init+0xa4>
 800325a:	2b12      	cmp	r3, #18
 800325c:	d80d      	bhi.n	800327a <HAL_GPIO_Init+0x5a>
 800325e:	2b02      	cmp	r3, #2
 8003260:	d02b      	beq.n	80032ba <HAL_GPIO_Init+0x9a>
 8003262:	2b02      	cmp	r3, #2
 8003264:	d804      	bhi.n	8003270 <HAL_GPIO_Init+0x50>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d031      	beq.n	80032ce <HAL_GPIO_Init+0xae>
 800326a:	2b01      	cmp	r3, #1
 800326c:	d01c      	beq.n	80032a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800326e:	e048      	b.n	8003302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003270:	2b03      	cmp	r3, #3
 8003272:	d043      	beq.n	80032fc <HAL_GPIO_Init+0xdc>
 8003274:	2b11      	cmp	r3, #17
 8003276:	d01b      	beq.n	80032b0 <HAL_GPIO_Init+0x90>
          break;
 8003278:	e043      	b.n	8003302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800327a:	4a89      	ldr	r2, [pc, #548]	; (80034a0 <HAL_GPIO_Init+0x280>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d026      	beq.n	80032ce <HAL_GPIO_Init+0xae>
 8003280:	4a87      	ldr	r2, [pc, #540]	; (80034a0 <HAL_GPIO_Init+0x280>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d806      	bhi.n	8003294 <HAL_GPIO_Init+0x74>
 8003286:	4a87      	ldr	r2, [pc, #540]	; (80034a4 <HAL_GPIO_Init+0x284>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d020      	beq.n	80032ce <HAL_GPIO_Init+0xae>
 800328c:	4a86      	ldr	r2, [pc, #536]	; (80034a8 <HAL_GPIO_Init+0x288>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01d      	beq.n	80032ce <HAL_GPIO_Init+0xae>
          break;
 8003292:	e036      	b.n	8003302 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003294:	4a85      	ldr	r2, [pc, #532]	; (80034ac <HAL_GPIO_Init+0x28c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0xae>
 800329a:	4a85      	ldr	r2, [pc, #532]	; (80034b0 <HAL_GPIO_Init+0x290>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d016      	beq.n	80032ce <HAL_GPIO_Init+0xae>
 80032a0:	4a84      	ldr	r2, [pc, #528]	; (80034b4 <HAL_GPIO_Init+0x294>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <HAL_GPIO_Init+0xae>
          break;
 80032a6:	e02c      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	623b      	str	r3, [r7, #32]
          break;
 80032ae:	e028      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	3304      	adds	r3, #4
 80032b6:	623b      	str	r3, [r7, #32]
          break;
 80032b8:	e023      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	3308      	adds	r3, #8
 80032c0:	623b      	str	r3, [r7, #32]
          break;
 80032c2:	e01e      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	330c      	adds	r3, #12
 80032ca:	623b      	str	r3, [r7, #32]
          break;
 80032cc:	e019      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032d6:	2304      	movs	r3, #4
 80032d8:	623b      	str	r3, [r7, #32]
          break;
 80032da:	e012      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e4:	2308      	movs	r3, #8
 80032e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	611a      	str	r2, [r3, #16]
          break;
 80032ee:	e008      	b.n	8003302 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f0:	2308      	movs	r3, #8
 80032f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	615a      	str	r2, [r3, #20]
          break;
 80032fa:	e002      	b.n	8003302 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032fc:	2300      	movs	r3, #0
 80032fe:	623b      	str	r3, [r7, #32]
          break;
 8003300:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2bff      	cmp	r3, #255	; 0xff
 8003306:	d801      	bhi.n	800330c <HAL_GPIO_Init+0xec>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	e001      	b.n	8003310 <HAL_GPIO_Init+0xf0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3304      	adds	r3, #4
 8003310:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2bff      	cmp	r3, #255	; 0xff
 8003316:	d802      	bhi.n	800331e <HAL_GPIO_Init+0xfe>
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	e002      	b.n	8003324 <HAL_GPIO_Init+0x104>
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	3b08      	subs	r3, #8
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	210f      	movs	r1, #15
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	401a      	ands	r2, r3
 8003336:	6a39      	ldr	r1, [r7, #32]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	431a      	orrs	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8096 	beq.w	800347e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_GPIO_Init+0x298>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <HAL_GPIO_Init+0x298>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6193      	str	r3, [r2, #24]
 800335e:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <HAL_GPIO_Init+0x298>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800336a:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_GPIO_Init+0x29c>)
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	220f      	movs	r2, #15
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4b      	ldr	r2, [pc, #300]	; (80034c0 <HAL_GPIO_Init+0x2a0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x19e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4a      	ldr	r2, [pc, #296]	; (80034c4 <HAL_GPIO_Init+0x2a4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x19a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a49      	ldr	r2, [pc, #292]	; (80034c8 <HAL_GPIO_Init+0x2a8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x196>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_GPIO_Init+0x2ac>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x192>
 80033ae:	2303      	movs	r3, #3
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x1a0>
 80033b2:	2304      	movs	r3, #4
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x1a0>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x1a0>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x1a0>
 80033be:	2300      	movs	r3, #0
 80033c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033d0:	493a      	ldr	r1, [pc, #232]	; (80034bc <HAL_GPIO_Init+0x29c>)
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033ea:	4b39      	ldr	r3, [pc, #228]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	4938      	ldr	r1, [pc, #224]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
 80033f6:	e006      	b.n	8003406 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033f8:	4b35      	ldr	r3, [pc, #212]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	43db      	mvns	r3, r3
 8003400:	4933      	ldr	r1, [pc, #204]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003402:	4013      	ands	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d006      	beq.n	8003420 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	492e      	ldr	r1, [pc, #184]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
 800341e:	e006      	b.n	800342e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	43db      	mvns	r3, r3
 8003428:	4929      	ldr	r1, [pc, #164]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 800342a:	4013      	ands	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800343a:	4b25      	ldr	r3, [pc, #148]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	4924      	ldr	r1, [pc, #144]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
 8003446:	e006      	b.n	8003456 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003448:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	43db      	mvns	r3, r3
 8003450:	491f      	ldr	r1, [pc, #124]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003452:	4013      	ands	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	491a      	ldr	r1, [pc, #104]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	60cb      	str	r3, [r1, #12]
 800346e:	e006      	b.n	800347e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	43db      	mvns	r3, r3
 8003478:	4915      	ldr	r1, [pc, #84]	; (80034d0 <HAL_GPIO_Init+0x2b0>)
 800347a:	4013      	ands	r3, r2
 800347c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	3301      	adds	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f aed0 	bne.w	8003234 <HAL_GPIO_Init+0x14>
  }
}
 8003494:	bf00      	nop
 8003496:	372c      	adds	r7, #44	; 0x2c
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	10210000 	.word	0x10210000
 80034a4:	10110000 	.word	0x10110000
 80034a8:	10120000 	.word	0x10120000
 80034ac:	10310000 	.word	0x10310000
 80034b0:	10320000 	.word	0x10320000
 80034b4:	10220000 	.word	0x10220000
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40010800 	.word	0x40010800
 80034c4:	40010c00 	.word	0x40010c00
 80034c8:	40011000 	.word	0x40011000
 80034cc:	40011400 	.word	0x40011400
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e11f      	b.n	8003726 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d106      	bne.n	8003500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff fb22 	bl	8002b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003538:	f001 fb5e 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 800353c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a7b      	ldr	r2, [pc, #492]	; (8003730 <HAL_I2C_Init+0x25c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d807      	bhi.n	8003558 <HAL_I2C_Init+0x84>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4a7a      	ldr	r2, [pc, #488]	; (8003734 <HAL_I2C_Init+0x260>)
 800354c:	4293      	cmp	r3, r2
 800354e:	bf94      	ite	ls
 8003550:	2301      	movls	r3, #1
 8003552:	2300      	movhi	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	e006      	b.n	8003566 <HAL_I2C_Init+0x92>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a77      	ldr	r2, [pc, #476]	; (8003738 <HAL_I2C_Init+0x264>)
 800355c:	4293      	cmp	r3, r2
 800355e:	bf94      	ite	ls
 8003560:	2301      	movls	r3, #1
 8003562:	2300      	movhi	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e0db      	b.n	8003726 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a72      	ldr	r2, [pc, #456]	; (800373c <HAL_I2C_Init+0x268>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0c9b      	lsrs	r3, r3, #18
 8003578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4a64      	ldr	r2, [pc, #400]	; (8003730 <HAL_I2C_Init+0x25c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d802      	bhi.n	80035a8 <HAL_I2C_Init+0xd4>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	3301      	adds	r3, #1
 80035a6:	e009      	b.n	80035bc <HAL_I2C_Init+0xe8>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a63      	ldr	r2, [pc, #396]	; (8003740 <HAL_I2C_Init+0x26c>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	099b      	lsrs	r3, r3, #6
 80035ba:	3301      	adds	r3, #1
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4956      	ldr	r1, [pc, #344]	; (8003730 <HAL_I2C_Init+0x25c>)
 80035d8:	428b      	cmp	r3, r1
 80035da:	d80d      	bhi.n	80035f8 <HAL_I2C_Init+0x124>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1e59      	subs	r1, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	bf38      	it	cc
 80035f4:	2304      	movcc	r3, #4
 80035f6:	e04f      	b.n	8003698 <HAL_I2C_Init+0x1c4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d111      	bne.n	8003624 <HAL_I2C_Init+0x150>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1e58      	subs	r0, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	440b      	add	r3, r1
 800360e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003612:	3301      	adds	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e012      	b.n	800364a <HAL_I2C_Init+0x176>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	0099      	lsls	r1, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	fbb0 f3f3 	udiv	r3, r0, r3
 800363a:	3301      	adds	r3, #1
 800363c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Init+0x17e>
 800364e:	2301      	movs	r3, #1
 8003650:	e022      	b.n	8003698 <HAL_I2C_Init+0x1c4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10e      	bne.n	8003678 <HAL_I2C_Init+0x1a4>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1e58      	subs	r0, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	460b      	mov	r3, r1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	440b      	add	r3, r1
 8003668:	fbb0 f3f3 	udiv	r3, r0, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	e00f      	b.n	8003698 <HAL_I2C_Init+0x1c4>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e58      	subs	r0, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	0099      	lsls	r1, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	fbb0 f3f3 	udiv	r3, r0, r3
 800368e:	3301      	adds	r3, #1
 8003690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	6809      	ldr	r1, [r1, #0]
 800369c:	4313      	orrs	r3, r2
 800369e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6911      	ldr	r1, [r2, #16]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	68d2      	ldr	r2, [r2, #12]
 80036d2:	4311      	orrs	r1, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	430b      	orrs	r3, r1
 80036da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0201 	orr.w	r2, r2, #1
 8003706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	000186a0 	.word	0x000186a0
 8003734:	001e847f 	.word	0x001e847f
 8003738:	003d08ff 	.word	0x003d08ff
 800373c:	431bde83 	.word	0x431bde83
 8003740:	10624dd3 	.word	0x10624dd3

08003744 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	461a      	mov	r2, r3
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
 8003754:	4613      	mov	r3, r2
 8003756:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003758:	f7ff fbe0 	bl	8002f1c <HAL_GetTick>
 800375c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	f040 80e0 	bne.w	800392c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2319      	movs	r3, #25
 8003772:	2201      	movs	r2, #1
 8003774:	4970      	ldr	r1, [pc, #448]	; (8003938 <HAL_I2C_Master_Transmit+0x1f4>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fc8c 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	e0d3      	b.n	800392e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_I2C_Master_Transmit+0x50>
 8003790:	2302      	movs	r3, #2
 8003792:	e0cc      	b.n	800392e <HAL_I2C_Master_Transmit+0x1ea>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d007      	beq.n	80037ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2221      	movs	r2, #33	; 0x21
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2210      	movs	r2, #16
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	893a      	ldrh	r2, [r7, #8]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a50      	ldr	r2, [pc, #320]	; (800393c <HAL_I2C_Master_Transmit+0x1f8>)
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037fc:	8979      	ldrh	r1, [r7, #10]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6a3a      	ldr	r2, [r7, #32]
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 faf6 	bl	8003df4 <I2C_MasterRequestWrite>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e08d      	b.n	800392e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003828:	e066      	b.n	80038f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	6a39      	ldr	r1, [r7, #32]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fd06 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00d      	beq.n	8003856 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b04      	cmp	r3, #4
 8003840:	d107      	bne.n	8003852 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e06b      	b.n	800392e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d11b      	bne.n	80038cc <HAL_I2C_Master_Transmit+0x188>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d017      	beq.n	80038cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	6a39      	ldr	r1, [r7, #32]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fcf6 	bl	80042c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00d      	beq.n	80038f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d107      	bne.n	80038f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e01a      	b.n	800392e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d194      	bne.n	800382a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800390e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000

08003940 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	461a      	mov	r2, r3
 800394c:	460b      	mov	r3, r1
 800394e:	817b      	strh	r3, [r7, #10]
 8003950:	4613      	mov	r3, r2
 8003952:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003958:	f7ff fae0 	bl	8002f1c <HAL_GetTick>
 800395c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b20      	cmp	r3, #32
 8003968:	f040 8238 	bne.w	8003ddc <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	2319      	movs	r3, #25
 8003972:	2201      	movs	r2, #1
 8003974:	497e      	ldr	r1, [pc, #504]	; (8003b70 <HAL_I2C_Master_Receive+0x230>)
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 fb8c 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003982:	2302      	movs	r3, #2
 8003984:	e22b      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_I2C_Master_Receive+0x54>
 8003990:	2302      	movs	r3, #2
 8003992:	e224      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d007      	beq.n	80039ba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2222      	movs	r2, #34	; 0x22
 80039ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2210      	movs	r2, #16
 80039d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	893a      	ldrh	r2, [r7, #8]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <HAL_I2C_Master_Receive+0x234>)
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039fc:	8979      	ldrh	r1, [r7, #10]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fa78 	bl	8003ef8 <I2C_MasterRequestRead>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1e5      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d113      	bne.n	8003a42 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e1b9      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d11d      	bne.n	8003a86 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a82:	b662      	cpsie	i
 8003a84:	e197      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d11d      	bne.n	8003aca <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a9e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac6:	b662      	cpsie	i
 8003ac8:	e175      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003af0:	e161      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	f200 811a 	bhi.w	8003d30 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d123      	bne.n	8003b4c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fc1b 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e162      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b4a:	e134      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d150      	bne.n	8003bf6 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4906      	ldr	r1, [pc, #24]	; (8003b78 <HAL_I2C_Master_Receive+0x238>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fa98 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d008      	beq.n	8003b7c <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e137      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
 8003b6e:	bf00      	nop
 8003b70:	00100002 	.word	0x00100002
 8003b74:	ffff0000 	.word	0xffff0000
 8003b78:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b7c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bc0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf4:	e0df      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	497a      	ldr	r1, [pc, #488]	; (8003de8 <HAL_I2C_Master_Receive+0x4a8>)
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fa47 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0e6      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c20:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	691a      	ldr	r2, [r3, #16]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c54:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_I2C_Master_Receive+0x4ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <HAL_I2C_Master_Receive+0x4b0>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	0a1a      	lsrs	r2, r3, #8
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	00da      	lsls	r2, r3, #3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d117      	bne.n	8003caa <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f043 0220 	orr.w	r2, r3, #32
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c9c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e099      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d1da      	bne.n	8003c6e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfa:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691a      	ldr	r2, [r3, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d2e:	e042      	b.n	8003db6 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb05 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e04c      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d118      	bne.n	8003db6 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f47f ae99 	bne.w	8003af2 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	e000      	b.n	8003dde <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003ddc:	2302      	movs	r3, #2
  }
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3728      	adds	r7, #40	; 0x28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	00010004 	.word	0x00010004
 8003dec:	2000000c 	.word	0x2000000c
 8003df0:	14f8b589 	.word	0x14f8b589

08003df4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d006      	beq.n	8003e1e <I2C_MasterRequestWrite+0x2a>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d003      	beq.n	8003e1e <I2C_MasterRequestWrite+0x2a>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e1c:	d108      	bne.n	8003e30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e00b      	b.n	8003e48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	2b12      	cmp	r3, #18
 8003e36:	d107      	bne.n	8003e48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f91d 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6e:	d103      	bne.n	8003e78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e035      	b.n	8003ee8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e84:	d108      	bne.n	8003e98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e94:	611a      	str	r2, [r3, #16]
 8003e96:	e01b      	b.n	8003ed0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	11db      	asrs	r3, r3, #7
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0306 	and.w	r3, r3, #6
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f063 030f 	orn	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <I2C_MasterRequestWrite+0xfc>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f943 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e010      	b.n	8003ee8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4907      	ldr	r1, [pc, #28]	; (8003ef4 <I2C_MasterRequestWrite+0x100>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f933 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010008 	.word	0x00010008
 8003ef4:	00010002 	.word	0x00010002

08003ef8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d006      	beq.n	8003f32 <I2C_MasterRequestRead+0x3a>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d003      	beq.n	8003f32 <I2C_MasterRequestRead+0x3a>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f30:	d108      	bne.n	8003f44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e00b      	b.n	8003f5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	2b11      	cmp	r3, #17
 8003f4a:	d107      	bne.n	8003f5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f893 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d103      	bne.n	8003f8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e079      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f98:	d108      	bne.n	8003fac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	e05f      	b.n	800406c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fac:	897b      	ldrh	r3, [r7, #10]
 8003fae:	11db      	asrs	r3, r3, #7
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0306 	and.w	r3, r3, #6
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f063 030f 	orn	r3, r3, #15
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4930      	ldr	r1, [pc, #192]	; (800408c <I2C_MasterRequestRead+0x194>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8b9 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e054      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fda:	897b      	ldrh	r3, [r7, #10]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4929      	ldr	r1, [pc, #164]	; (8004090 <I2C_MasterRequestRead+0x198>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f8a9 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e044      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f831 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d103      	bne.n	8004050 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e017      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004054:	897b      	ldrh	r3, [r7, #10]
 8004056:	11db      	asrs	r3, r3, #7
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f063 030e 	orn	r3, r3, #14
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4907      	ldr	r1, [pc, #28]	; (8004090 <I2C_MasterRequestRead+0x198>)
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f865 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	00010008 	.word	0x00010008
 8004090:	00010002 	.word	0x00010002

08004094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a4:	e025      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ac:	d021      	beq.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fe ff35 	bl	8002f1c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d116      	bne.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e023      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	43da      	mvns	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	e00c      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	43da      	mvns	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d0b6      	beq.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004150:	e051      	b.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d123      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800417a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0204 	orr.w	r2, r3, #4
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e046      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041b0:	d021      	beq.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe feb3 	bl	8002f1c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e020      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10c      	bne.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e00b      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	43da      	mvns	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d18d      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424c:	e02d      	b.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8ce 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e02d      	b.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004264:	d021      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe fe59 	bl	8002f1c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e007      	b.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d1ca      	bne.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ce:	e02d      	b.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f88d 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e02d      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e6:	d021      	beq.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e8:	f7fe fe18 	bl	8002f1c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d302      	bcc.n	80042fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e007      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d1ca      	bne.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004350:	e042      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b10      	cmp	r3, #16
 800435e:	d119      	bne.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e029      	b.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe fdc2 	bl	8002f1c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d1b5      	bne.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d11b      	bne.n	8004440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e26c      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8087 	beq.w	800457a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800446c:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b04      	cmp	r3, #4
 8004476:	d00c      	beq.n	8004492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004478:	4b8f      	ldr	r3, [pc, #572]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	d112      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
 8004484:	4b8c      	ldr	r3, [pc, #560]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d10b      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004492:	4b89      	ldr	r3, [pc, #548]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d06c      	beq.n	8004578 <HAL_RCC_OscConfig+0x12c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d168      	bne.n	8004578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e246      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x76>
 80044b4:	4b80      	ldr	r3, [pc, #512]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7f      	ldr	r2, [pc, #508]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e02e      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7a      	ldr	r2, [pc, #488]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e01d      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0xbc>
 80044ee:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a71      	ldr	r2, [pc, #452]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b6f      	ldr	r3, [pc, #444]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e00b      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 8004508:	4b6b      	ldr	r3, [pc, #428]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6a      	ldr	r2, [pc, #424]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a67      	ldr	r2, [pc, #412]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800451a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d013      	beq.n	8004550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fe fcf8 	bl	8002f1c <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fe fcf4 	bl	8002f1c <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e1fa      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0xe4>
 800454e:	e014      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fe fce4 	bl	8002f1c <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fe fce0 	bl	8002f1c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1e6      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456a:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x10c>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d063      	beq.n	800464e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004586:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004592:	4b49      	ldr	r3, [pc, #292]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b08      	cmp	r3, #8
 800459c:	d11c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x18c>
 800459e:	4b46      	ldr	r3, [pc, #280]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045aa:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_RCC_OscConfig+0x176>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e1ba      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4939      	ldr	r1, [pc, #228]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	e03a      	b.n	800464e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d020      	beq.n	8004622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e0:	4b36      	ldr	r3, [pc, #216]	; (80046bc <HAL_RCC_OscConfig+0x270>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fe fc99 	bl	8002f1c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fe fc95 	bl	8002f1c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e19b      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4927      	ldr	r1, [pc, #156]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
 8004620:	e015      	b.n	800464e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004622:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_RCC_OscConfig+0x270>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fc78 	bl	8002f1c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7fe fc74 	bl	8002f1c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e17a      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03a      	beq.n	80046d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d019      	beq.n	8004696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_RCC_OscConfig+0x274>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004668:	f7fe fc58 	bl	8002f1c <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fe fc54 	bl	8002f1c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e15a      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800468e:	2001      	movs	r0, #1
 8004690:	f000 fb0a 	bl	8004ca8 <RCC_Delay>
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_OscConfig+0x274>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469c:	f7fe fc3e 	bl	8002f1c <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	e00f      	b.n	80046c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fe fc3a 	bl	8002f1c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d908      	bls.n	80046c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e140      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	42420000 	.word	0x42420000
 80046c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	4b9e      	ldr	r3, [pc, #632]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e9      	bne.n	80046a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a6 	beq.w	800482a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e2:	4b97      	ldr	r3, [pc, #604]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4b94      	ldr	r3, [pc, #592]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4a93      	ldr	r2, [pc, #588]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	61d3      	str	r3, [r2, #28]
 80046fa:	4b91      	ldr	r3, [pc, #580]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b8e      	ldr	r3, [pc, #568]	; (8004944 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b8b      	ldr	r3, [pc, #556]	; (8004944 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a8a      	ldr	r2, [pc, #552]	; (8004944 <HAL_RCC_OscConfig+0x4f8>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fe fbfb 	bl	8002f1c <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fe fbf7 	bl	8002f1c <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b64      	cmp	r3, #100	; 0x64
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0fd      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x4f8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x312>
 8004750:	4b7b      	ldr	r3, [pc, #492]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a7a      	ldr	r2, [pc, #488]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e02d      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x334>
 8004766:	4b76      	ldr	r3, [pc, #472]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a72      	ldr	r2, [pc, #456]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6213      	str	r3, [r2, #32]
 800477e:	e01c      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b05      	cmp	r3, #5
 8004786:	d10c      	bne.n	80047a2 <HAL_RCC_OscConfig+0x356>
 8004788:	4b6d      	ldr	r3, [pc, #436]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4a6c      	ldr	r2, [pc, #432]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6213      	str	r3, [r2, #32]
 8004794:	4b6a      	ldr	r3, [pc, #424]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4a69      	ldr	r2, [pc, #420]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6213      	str	r3, [r2, #32]
 80047a0:	e00b      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 80047a2:	4b67      	ldr	r3, [pc, #412]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a66      	ldr	r2, [pc, #408]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6213      	str	r3, [r2, #32]
 80047ae:	4b64      	ldr	r3, [pc, #400]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a63      	ldr	r2, [pc, #396]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d015      	beq.n	80047ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c2:	f7fe fbab 	bl	8002f1c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fe fba7 	bl	8002f1c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e0ab      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ee      	beq.n	80047ca <HAL_RCC_OscConfig+0x37e>
 80047ec:	e014      	b.n	8004818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fe fb95 	bl	8002f1c <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fe fb91 	bl	8002f1c <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e095      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	4b4c      	ldr	r3, [pc, #304]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ee      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481e:	4b48      	ldr	r3, [pc, #288]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8081 	beq.w	8004936 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004834:	4b42      	ldr	r3, [pc, #264]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d061      	beq.n	8004904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d146      	bne.n	80048d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004848:	4b3f      	ldr	r3, [pc, #252]	; (8004948 <HAL_RCC_OscConfig+0x4fc>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fe fb65 	bl	8002f1c <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004856:	f7fe fb61 	bl	8002f1c <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e067      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004868:	4b35      	ldr	r3, [pc, #212]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d108      	bne.n	8004890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800487e:	4b30      	ldr	r3, [pc, #192]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	492d      	ldr	r1, [pc, #180]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a19      	ldr	r1, [r3, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	430b      	orrs	r3, r1
 80048a2:	4927      	ldr	r1, [pc, #156]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_RCC_OscConfig+0x4fc>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fe fb35 	bl	8002f1c <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fe fb31 	bl	8002f1c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e037      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c8:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x46a>
 80048d4:	e02f      	b.n	8004936 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b1c      	ldr	r3, [pc, #112]	; (8004948 <HAL_RCC_OscConfig+0x4fc>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fe fb1e 	bl	8002f1c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fe fb1a 	bl	8002f1c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e020      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x498>
 8004902:	e018      	b.n	8004936 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e013      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_OscConfig+0x4f4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	429a      	cmp	r2, r3
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	40007000 	.word	0x40007000
 8004948:	42420060 	.word	0x42420060

0800494c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0d0      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b6a      	ldr	r3, [pc, #424]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d910      	bls.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b67      	ldr	r3, [pc, #412]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 0207 	bic.w	r2, r3, #7
 8004976:	4965      	ldr	r1, [pc, #404]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b63      	ldr	r3, [pc, #396]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0b8      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d020      	beq.n	80049de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a8:	4b59      	ldr	r3, [pc, #356]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a58      	ldr	r2, [pc, #352]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c0:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	494d      	ldr	r1, [pc, #308]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d040      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e07f      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d107      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	4b41      	ldr	r3, [pc, #260]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e073      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06b      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f023 0203 	bic.w	r2, r3, #3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4936      	ldr	r1, [pc, #216]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a3c:	f7fe fa6e 	bl	8002f1c <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	e00a      	b.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fe fa6a 	bl	8002f1c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e053      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 020c 	and.w	r2, r3, #12
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d1eb      	bne.n	8004a44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d210      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 0207 	bic.w	r2, r3, #7
 8004a82:	4922      	ldr	r1, [pc, #136]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_RCC_ClockConfig+0x1c0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e032      	b.n	8004b02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aa8:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	4916      	ldr	r1, [pc, #88]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	490e      	ldr	r1, [pc, #56]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ada:	f000 f821 	bl	8004b20 <HAL_RCC_GetSysClockFreq>
 8004ade:	4601      	mov	r1, r0
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_RCC_ClockConfig+0x1c8>)
 8004aec:	5cd3      	ldrb	r3, [r2, r3]
 8004aee:	fa21 f303 	lsr.w	r3, r1, r3
 8004af2:	4a09      	ldr	r2, [pc, #36]	; (8004b18 <HAL_RCC_ClockConfig+0x1cc>)
 8004af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004af6:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe f8b4 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40021000 	.word	0x40021000
 8004b14:	0800b018 	.word	0x0800b018
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	20000010 	.word	0x20000010

08004b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b20:	b490      	push	{r4, r7}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b26:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b28:	1d3c      	adds	r4, r7, #4
 8004b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b4a:	4b23      	ldr	r3, [pc, #140]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d002      	beq.n	8004b60 <HAL_RCC_GetSysClockFreq+0x40>
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCC_GetSysClockFreq+0x46>
 8004b5e:	e02d      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b60:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b62:	623b      	str	r3, [r7, #32]
      break;
 8004b64:	e02d      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	0c9b      	lsrs	r3, r3, #18
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b72:	4413      	add	r3, r2
 8004b74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b84:	4b14      	ldr	r3, [pc, #80]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	0c5b      	lsrs	r3, r3, #17
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b92:	4413      	add	r3, r2
 8004b94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4a0f      	ldr	r2, [pc, #60]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b9e:	fb02 f203 	mul.w	r2, r2, r3
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	e004      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	623b      	str	r3, [r7, #32]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bbe:	623b      	str	r3, [r7, #32]
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	; 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc90      	pop	{r4, r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	0800af68 	.word	0x0800af68
 8004bd4:	0800af78 	.word	0x0800af78
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	007a1200 	.word	0x007a1200
 8004be0:	003d0900 	.word	0x003d0900

08004be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be8:	4b02      	ldr	r3, [pc, #8]	; (8004bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bea:	681b      	ldr	r3, [r3, #0]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	2000000c 	.word	0x2000000c

08004bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bfc:	f7ff fff2 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c00:	4601      	mov	r1, r0
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	4a03      	ldr	r2, [pc, #12]	; (8004c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	0800b028 	.word	0x0800b028

08004c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c24:	f7ff ffde 	bl	8004be4 <HAL_RCC_GetHCLKFreq>
 8004c28:	4601      	mov	r1, r0
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	0adb      	lsrs	r3, r3, #11
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4a03      	ldr	r2, [pc, #12]	; (8004c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800b028 	.word	0x0800b028

08004c48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	220f      	movs	r2, #15
 8004c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <HAL_RCC_GetClockConfig+0x58>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0203 	and.w	r2, r3, #3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <HAL_RCC_GetClockConfig+0x58>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_GetClockConfig+0x58>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c7c:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <HAL_RCC_GetClockConfig+0x58>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	08db      	lsrs	r3, r3, #3
 8004c82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0207 	and.w	r2, r3, #7
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40022000 	.word	0x40022000

08004ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <RCC_Delay+0x34>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <RCC_Delay+0x38>)
 8004cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cba:	0a5b      	lsrs	r3, r3, #9
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	fb02 f303 	mul.w	r3, r2, r3
 8004cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cc4:	bf00      	nop
  }
  while (Delay --);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1e5a      	subs	r2, r3, #1
 8004cca:	60fa      	str	r2, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f9      	bne.n	8004cc4 <RCC_Delay+0x1c>
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bc80      	pop	{r7}
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	10624dd3 	.word	0x10624dd3

08004ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e041      	b.n	8004d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d106      	bne.n	8004d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f839 	bl	8004d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3304      	adds	r3, #4
 8004d20:	4619      	mov	r1, r3
 8004d22:	4610      	mov	r0, r2
 8004d24:	f000 f9b4 	bl	8005090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d001      	beq.n	8004dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e03a      	b.n	8004e22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_TIM_Base_Start_IT+0x98>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00e      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x58>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d009      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x58>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a14      	ldr	r2, [pc, #80]	; (8004e30 <HAL_TIM_Base_Start_IT+0x9c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_Base_Start_IT+0x58>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <HAL_TIM_Base_Start_IT+0xa0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d010      	beq.n	8004e20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0e:	e007      	b.n	8004e20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	40012c00 	.word	0x40012c00
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800

08004e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d122      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d11b      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0202 	mvn.w	r2, #2
 8004e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8ed 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f8e0 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f8ef 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d122      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b04      	cmp	r3, #4
 8004eae:	d11b      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0204 	mvn.w	r2, #4
 8004eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8c3 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004ed4:	e005      	b.n	8004ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8b6 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f8c5 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d122      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0208 	mvn.w	r2, #8
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2204      	movs	r2, #4
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f899 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f88c 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f89b 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0310 	and.w	r3, r3, #16
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d122      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d11b      	bne.n	8004f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0210 	mvn.w	r2, #16
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2208      	movs	r2, #8
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f86f 	bl	800505a <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f862 	bl	8005048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f871 	bl	800506c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10e      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d107      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0201 	mvn.w	r2, #1
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fd fd76 	bl	8002aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc6:	2b80      	cmp	r3, #128	; 0x80
 8004fc8:	d10e      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d107      	bne.n	8004fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8bf 	bl	8005166 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d10e      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d107      	bne.n	8005014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800500c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f835 	bl	800507e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b20      	cmp	r3, #32
 8005020:	d10e      	bne.n	8005040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0320 	and.w	r3, r3, #32
 800502c:	2b20      	cmp	r3, #32
 800502e:	d107      	bne.n	8005040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0220 	mvn.w	r2, #32
 8005038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f88a 	bl	8005154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a29      	ldr	r2, [pc, #164]	; (8005148 <TIM_Base_SetConfig+0xb8>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0x30>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0x30>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a26      	ldr	r2, [pc, #152]	; (800514c <TIM_Base_SetConfig+0xbc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x30>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a25      	ldr	r2, [pc, #148]	; (8005150 <TIM_Base_SetConfig+0xc0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1c      	ldr	r2, [pc, #112]	; (8005148 <TIM_Base_SetConfig+0xb8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0x62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x62>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <TIM_Base_SetConfig+0xbc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x62>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a18      	ldr	r2, [pc, #96]	; (8005150 <TIM_Base_SetConfig+0xc0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a07      	ldr	r2, [pc, #28]	; (8005148 <TIM_Base_SetConfig+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d103      	bne.n	8005138 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	615a      	str	r2, [r3, #20]
}
 800513e:	bf00      	nop
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800

08005154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e03f      	b.n	800520a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd fd0e 	bl	8002bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2224      	movs	r2, #36	; 0x24
 80051a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fb61 	bl	8005884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b20      	cmp	r3, #32
 800522a:	d130      	bne.n	800528e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Transmit_IT+0x26>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e029      	b.n	8005290 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Transmit_IT+0x38>
 8005246:	2302      	movs	r3, #2
 8005248:	e022      	b.n	8005290 <HAL_UART_Transmit_IT+0x7e>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	88fa      	ldrh	r2, [r7, #6]
 8005262:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2221      	movs	r2, #33	; 0x21
 800526e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005288:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	e000      	b.n	8005290 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
  }
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	bc80      	pop	{r7}
 8005298:	4770      	bx	lr

0800529a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d140      	bne.n	8005336 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_UART_Receive_IT+0x26>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e039      	b.n	8005338 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Receive_IT+0x38>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e032      	b.n	8005338 <HAL_UART_Receive_IT+0x9e>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	88fa      	ldrh	r2, [r7, #6]
 80052e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2222      	movs	r2, #34	; 0x22
 80052f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005310:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695a      	ldr	r2, [r3, #20]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0201 	orr.w	r2, r2, #1
 8005320:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0220 	orr.w	r2, r2, #32
 8005330:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e000      	b.n	8005338 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005336:	2302      	movs	r3, #2
  }
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
	...

08005344 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800535a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d02a      	beq.n	80053d0 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005388:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538e:	2b00      	cmp	r3, #0
 8005390:	d013      	beq.n	80053ba <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005396:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <HAL_UART_AbortReceive_IT+0xac>)
 8005398:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fd fec8 	bl	8003134 <HAL_DMA_Abort_IT>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01c      	beq.n	80053e4 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053b4:	4610      	mov	r0, r2
 80053b6:	4798      	blx	r3
 80053b8:	e014      	b.n	80053e4 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f925 	bl	8005618 <HAL_UART_AbortReceiveCpltCallback>
 80053ce:	e009      	b.n	80053e4 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f91a 	bl	8005618 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	0800568d 	.word	0x0800568d

080053f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d008      	beq.n	8005446 <HAL_UART_IRQHandler+0x52>
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9a0 	bl	8005784 <UART_Receive_IT>
      return;
 8005444:	e0d1      	b.n	80055ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80b0 	beq.w	80055ae <HAL_UART_IRQHandler+0x1ba>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_UART_IRQHandler+0x70>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80a5 	beq.w	80055ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_UART_IRQHandler+0x90>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	f043 0201 	orr.w	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <HAL_UART_IRQHandler+0xb0>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	f043 0202 	orr.w	r2, r3, #2
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_UART_IRQHandler+0xd0>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d005      	beq.n	80054c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054bc:	f043 0204 	orr.w	r2, r3, #4
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00f      	beq.n	80054ee <HAL_UART_IRQHandler+0xfa>
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <HAL_UART_IRQHandler+0xee>
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	f043 0208 	orr.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d078      	beq.n	80055e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_UART_IRQHandler+0x11c>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	f003 0320 	and.w	r3, r3, #32
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f93a 	bl	8005784 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d102      	bne.n	8005538 <HAL_UART_IRQHandler+0x144>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d031      	beq.n	800559c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f876 	bl	800562a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d023      	beq.n	8005594 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005568:	4a21      	ldr	r2, [pc, #132]	; (80055f0 <HAL_UART_IRQHandler+0x1fc>)
 800556a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005570:	4618      	mov	r0, r3
 8005572:	f7fd fddf 	bl	8003134 <HAL_DMA_Abort_IT>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d016      	beq.n	80055aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005586:	4610      	mov	r0, r2
 8005588:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558a:	e00e      	b.n	80055aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f83a 	bl	8005606 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005592:	e00a      	b.n	80055aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f836 	bl	8005606 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559a:	e006      	b.n	80055aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f832 	bl	8005606 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80055a8:	e01e      	b.n	80055e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055aa:	bf00      	nop
    return;
 80055ac:	e01c      	b.n	80055e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_UART_IRQHandler+0x1d6>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f877 	bl	80056b6 <UART_Transmit_IT>
    return;
 80055c8:	e00f      	b.n	80055ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_UART_IRQHandler+0x1f6>
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8b8 	bl	8005754 <UART_EndTransmit_IT>
    return;
 80055e4:	bf00      	nop
 80055e6:	e000      	b.n	80055ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80055e8:	bf00      	nop
  }
}
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08005665 	.word	0x08005665

080055f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005640:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	695a      	ldr	r2, [r3, #20]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff ffc1 	bl	8005606 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005698:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff ffb5 	bl	8005618 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b21      	cmp	r3, #33	; 0x21
 80056c8:	d13e      	bne.n	8005748 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d114      	bne.n	80056fe <UART_Transmit_IT+0x48>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d110      	bne.n	80056fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	621a      	str	r2, [r3, #32]
 80056fc:	e008      	b.n	8005710 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	1c59      	adds	r1, r3, #1
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6211      	str	r1, [r2, #32]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29b      	uxth	r3, r3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4619      	mov	r1, r3
 800571e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10f      	bne.n	8005744 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005732:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005742:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff3d 	bl	80055f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b22      	cmp	r3, #34	; 0x22
 8005796:	d170      	bne.n	800587a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a0:	d117      	bne.n	80057d2 <UART_Receive_IT+0x4e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d113      	bne.n	80057d2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
 80057d0:	e026      	b.n	8005820 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e4:	d007      	beq.n	80057f6 <UART_Receive_IT+0x72>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <UART_Receive_IT+0x80>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e008      	b.n	8005816 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	4619      	mov	r1, r3
 800582e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005830:	2b00      	cmp	r3, #0
 8005832:	d120      	bne.n	8005876 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0220 	bic.w	r2, r2, #32
 8005842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fc fe5b 	bl	8002528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e002      	b.n	800587c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800587a:	2302      	movs	r3, #2
  }
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058be:	f023 030c 	bic.w	r3, r3, #12
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6812      	ldr	r2, [r2, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	430b      	orrs	r3, r1
 80058ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2c      	ldr	r2, [pc, #176]	; (8005998 <UART_SetConfig+0x114>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d103      	bne.n	80058f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7ff f998 	bl	8004c20 <HAL_RCC_GetPCLK2Freq>
 80058f0:	60f8      	str	r0, [r7, #12]
 80058f2:	e002      	b.n	80058fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7ff f980 	bl	8004bf8 <HAL_RCC_GetPCLK1Freq>
 80058f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	441a      	add	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <UART_SetConfig+0x118>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	0119      	lsls	r1, r3, #4
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009a      	lsls	r2, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <UART_SetConfig+0x118>)
 8005932:	fba3 0302 	umull	r0, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2064      	movs	r0, #100	; 0x64
 800593a:	fb00 f303 	mul.w	r3, r0, r3
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	3332      	adds	r3, #50	; 0x32
 8005944:	4a15      	ldr	r2, [pc, #84]	; (800599c <UART_SetConfig+0x118>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005950:	4419      	add	r1, r3
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009a      	lsls	r2, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	fbb2 f2f3 	udiv	r2, r2, r3
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <UART_SetConfig+0x118>)
 800596a:	fba3 0302 	umull	r0, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2064      	movs	r0, #100	; 0x64
 8005972:	fb00 f303 	mul.w	r3, r0, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a07      	ldr	r2, [pc, #28]	; (800599c <UART_SetConfig+0x118>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	440a      	add	r2, r1
 800598e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005990:	bf00      	nop
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40013800 	.word	0x40013800
 800599c:	51eb851f 	.word	0x51eb851f

080059a0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a6:	f3ef 8305 	mrs	r3, IPSR
 80059aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b2:	f3ef 8310 	mrs	r3, PRIMASK
 80059b6:	607b      	str	r3, [r7, #4]
  return(result);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d109      	bne.n	80059d2 <osKernelInitialize+0x32>
 80059be:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <osKernelInitialize+0x60>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d109      	bne.n	80059da <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059c6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ca:	603b      	str	r3, [r7, #0]
  return(result);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80059d2:	f06f 0305 	mvn.w	r3, #5
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e00c      	b.n	80059f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80059da:	4b09      	ldr	r3, [pc, #36]	; (8005a00 <osKernelInitialize+0x60>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <osKernelInitialize+0x60>)
 80059e4:	2201      	movs	r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e002      	b.n	80059f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr
 8005a00:	2000024c 	.word	0x2000024c

08005a04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0a:	f3ef 8305 	mrs	r3, IPSR
 8005a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a16:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1a:	607b      	str	r3, [r7, #4]
  return(result);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <osKernelStart+0x32>
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <osKernelStart+0x64>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d109      	bne.n	8005a3e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005a36:	f06f 0305 	mvn.w	r3, #5
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e00e      	b.n	8005a5c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <osKernelStart+0x64>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005a46:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <osKernelStart+0x64>)
 8005a48:	2202      	movs	r2, #2
 8005a4a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005a4c:	f001 f926 	bl	8006c9c <vTaskStartScheduler>
      stat = osOK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]
 8005a54:	e002      	b.n	8005a5c <osKernelStart+0x58>
    } else {
      stat = osError;
 8005a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000024c 	.word	0x2000024c

08005a6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b092      	sub	sp, #72	; 0x48
 8005a70:	af04      	add	r7, sp, #16
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7c:	f3ef 8305 	mrs	r3, IPSR
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 8094 	bne.w	8005bb2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8e:	623b      	str	r3, [r7, #32]
  return(result);
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 808d 	bne.w	8005bb2 <osThreadNew+0x146>
 8005a98:	4b48      	ldr	r3, [pc, #288]	; (8005bbc <osThreadNew+0x150>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d106      	bne.n	8005aae <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f040 8082 	bne.w	8005bb2 <osThreadNew+0x146>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d07e      	beq.n	8005bb2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005ab8:	2318      	movs	r3, #24
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005abc:	2300      	movs	r3, #0
 8005abe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005ac0:	f107 031b 	add.w	r3, r7, #27
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aca:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d045      	beq.n	8005b5e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <osThreadNew+0x74>
        name = attr->name;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <osThreadNew+0x9a>
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	2b38      	cmp	r3, #56	; 0x38
 8005af8:	d805      	bhi.n	8005b06 <osThreadNew+0x9a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <osThreadNew+0x9e>
        return (NULL);
 8005b06:	2300      	movs	r3, #0
 8005b08:	e054      	b.n	8005bb4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	089b      	lsrs	r3, r3, #2
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <osThreadNew+0xd4>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b5b      	cmp	r3, #91	; 0x5b
 8005b28:	d90a      	bls.n	8005b40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <osThreadNew+0xd4>
        mem = 1;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3e:	e010      	b.n	8005b62 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10c      	bne.n	8005b62 <osThreadNew+0xf6>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d108      	bne.n	8005b62 <osThreadNew+0xf6>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <osThreadNew+0xf6>
          mem = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5c:	e001      	b.n	8005b62 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d110      	bne.n	8005b8a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b70:	9202      	str	r2, [sp, #8]
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fec4 	bl	800690c <xTaskCreateStatic>
 8005b84:	4603      	mov	r3, r0
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	e013      	b.n	8005bb2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d110      	bne.n	8005bb2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	f107 0314 	add.w	r3, r7, #20
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 ff0b 	bl	80069be <xTaskCreate>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d001      	beq.n	8005bb2 <osThreadNew+0x146>
          hTask = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005bb2:	697b      	ldr	r3, [r7, #20]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3738      	adds	r7, #56	; 0x38
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2000024c 	.word	0x2000024c

08005bc0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc8:	f3ef 8305 	mrs	r3, IPSR
 8005bcc:	613b      	str	r3, [r7, #16]
  return(result);
 8005bce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10f      	bne.n	8005bf4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <osDelay+0x34>
 8005be0:	4b0d      	ldr	r3, [pc, #52]	; (8005c18 <osDelay+0x58>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d109      	bne.n	8005bfc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005be8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <osDelay+0x3c>
    stat = osErrorISR;
 8005bf4:	f06f 0305 	mvn.w	r3, #5
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e007      	b.n	8005c0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 f814 	bl	8006c34 <vTaskDelay>
    }
  }

  return (stat);
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	2000024c 	.word	0x2000024c

08005c1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c2c:	f3ef 8305 	mrs	r3, IPSR
 8005c30:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d170      	bne.n	8005d1a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c38:	f3ef 8310 	mrs	r3, PRIMASK
 8005c3c:	617b      	str	r3, [r7, #20]
  return(result);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d16a      	bne.n	8005d1a <osMessageQueueNew+0xfe>
 8005c44:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <osMessageQueueNew+0x108>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d105      	bne.n	8005c58 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c50:	613b      	str	r3, [r7, #16]
  return(result);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d160      	bne.n	8005d1a <osMessageQueueNew+0xfe>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d05d      	beq.n	8005d1a <osMessageQueueNew+0xfe>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d05a      	beq.n	8005d1a <osMessageQueueNew+0xfe>
    mem = -1;
 8005c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d029      	beq.n	8005cc4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d012      	beq.n	8005c9e <osMessageQueueNew+0x82>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	2b4f      	cmp	r3, #79	; 0x4f
 8005c7e:	d90e      	bls.n	8005c9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695a      	ldr	r2, [r3, #20]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	fb01 f303 	mul.w	r3, r1, r3
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d302      	bcc.n	8005c9e <osMessageQueueNew+0x82>
        mem = 1;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	623b      	str	r3, [r7, #32]
 8005c9c:	e014      	b.n	8005cc8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d110      	bne.n	8005cc8 <osMessageQueueNew+0xac>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10c      	bne.n	8005cc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <osMessageQueueNew+0xac>
          mem = 0;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	e001      	b.n	8005cc8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d10c      	bne.n	8005ce8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6899      	ldr	r1, [r3, #8]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f96c 	bl	8005fbc <xQueueGenericCreateStatic>
 8005ce4:	6278      	str	r0, [r7, #36]	; 0x24
 8005ce6:	e008      	b.n	8005cfa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d105      	bne.n	8005cfa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005cee:	2200      	movs	r2, #0
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f9d4 	bl	80060a0 <xQueueGenericCreate>
 8005cf8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <osMessageQueueNew+0xf2>
        name = attr->name;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e001      	b.n	8005d12 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d12:	69f9      	ldr	r1, [r7, #28]
 8005d14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d16:	f000 fd9d 	bl	8006854 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3728      	adds	r7, #40	; 0x28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	2000024c 	.word	0x2000024c

08005d28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <vApplicationGetIdleTaskMemory+0x28>)
 8005d38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2280      	movs	r2, #128	; 0x80
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr
 8005d50:	20000250 	.word	0x20000250
 8005d54:	200002ac 	.word	0x200002ac

08005d58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4a06      	ldr	r2, [pc, #24]	; (8005d88 <vApplicationGetTimerTaskMemory+0x30>)
 8005d6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d76:	601a      	str	r2, [r3, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	200004ac 	.word	0x200004ac
 8005d88:	20000508 	.word	0x20000508

08005d8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f103 0208 	add.w	r2, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005da4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f103 0208 	add.w	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0208 	add.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr

08005dca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bc80      	pop	{r7}
 8005de0:	4770      	bx	lr

08005de2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e3e:	d103      	bne.n	8005e48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e00c      	b.n	8005e62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e002      	b.n	8005e56 <vListInsert+0x2e>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d2f6      	bcs.n	8005e50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6852      	ldr	r2, [r2, #4]
 8005eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d103      	bne.n	8005ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
	...

08005eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	e7fe      	b.n	8005f12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f14:	f001 ffd0 	bl	8007eb8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	3b01      	subs	r3, #1
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
 8005f4e:	441a      	add	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	22ff      	movs	r2, #255	; 0xff
 8005f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	22ff      	movs	r2, #255	; 0xff
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d114      	bne.n	8005f94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01a      	beq.n	8005fa8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3310      	adds	r3, #16
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 f914 	bl	80071a4 <xTaskRemoveFromEventList>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d012      	beq.n	8005fa8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <xQueueGenericReset+0xcc>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	e009      	b.n	8005fa8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3310      	adds	r3, #16
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fef7 	bl	8005d8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3324      	adds	r3, #36	; 0x24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fef2 	bl	8005d8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fa8:	f001 ffb4 	bl	8007f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fac:	2301      	movs	r3, #1
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08e      	sub	sp, #56	; 0x38
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <xQueueGenericCreateStatic+0x28>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <xQueueGenericCreateStatic+0x42>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <xQueueGenericCreateStatic+0x4e>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <xQueueGenericCreateStatic+0x52>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericCreateStatic+0x54>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <xQueueGenericCreateStatic+0x6c>
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	e7fe      	b.n	8006026 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <xQueueGenericCreateStatic+0x78>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <xQueueGenericCreateStatic+0x7c>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <xQueueGenericCreateStatic+0x7e>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <xQueueGenericCreateStatic+0x96>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e7fe      	b.n	8006050 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006052:	2350      	movs	r3, #80	; 0x50
 8006054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b50      	cmp	r3, #80	; 0x50
 800605a:	d009      	beq.n	8006070 <xQueueGenericCreateStatic+0xb4>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e7fe      	b.n	800606e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006082:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f842 	bl	800611a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006098:	4618      	mov	r0, r3
 800609a:	3730      	adds	r7, #48	; 0x30
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d109      	bne.n	80060c8 <xQueueGenericCreate+0x28>
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	e7fe      	b.n	80060c6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d102      	bne.n	80060d4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	61fb      	str	r3, [r7, #28]
 80060d2:	e004      	b.n	80060de <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	fb02 f303 	mul.w	r3, r2, r3
 80060dc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3350      	adds	r3, #80	; 0x50
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 ffde 	bl	80080a4 <pvPortMalloc>
 80060e8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00f      	beq.n	8006110 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	3350      	adds	r3, #80	; 0x50
 80060f4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060fe:	79fa      	ldrb	r2, [r7, #7]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f805 	bl	800611a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006110:	69bb      	ldr	r3, [r7, #24]
	}
 8006112:	4618      	mov	r0, r3
 8006114:	3720      	adds	r7, #32
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e002      	b.n	800613c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006148:	2101      	movs	r1, #1
 800614a:	69b8      	ldr	r0, [r7, #24]
 800614c:	f7ff fece 	bl	8005eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	78fa      	ldrb	r2, [r7, #3]
 8006154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	; 0x38
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <xQueueGenericSend+0x30>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
 800618e:	e7fe      	b.n	800618e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <xQueueGenericSend+0x3e>
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <xQueueGenericSend+0x42>
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <xQueueGenericSend+0x44>
 80061a2:	2300      	movs	r3, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <xQueueGenericSend+0x5c>
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ba:	e7fe      	b.n	80061ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d103      	bne.n	80061ca <xQueueGenericSend+0x6a>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <xQueueGenericSend+0x6e>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <xQueueGenericSend+0x70>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <xQueueGenericSend+0x88>
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	e7fe      	b.n	80061e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061e8:	f001 f996 	bl	8007518 <xTaskGetSchedulerState>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <xQueueGenericSend+0x98>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <xQueueGenericSend+0x9c>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <xQueueGenericSend+0x9e>
 80061fc:	2300      	movs	r3, #0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <xQueueGenericSend+0xb6>
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e7fe      	b.n	8006214 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006216:	f001 fe4f 	bl	8007eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	429a      	cmp	r2, r3
 8006224:	d302      	bcc.n	800622c <xQueueGenericSend+0xcc>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d129      	bne.n	8006280 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006232:	f000 f9ff 	bl	8006634 <prvCopyDataToQueue>
 8006236:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	d010      	beq.n	8006262 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	3324      	adds	r3, #36	; 0x24
 8006244:	4618      	mov	r0, r3
 8006246:	f000 ffad 	bl	80071a4 <xTaskRemoveFromEventList>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006250:	4b3f      	ldr	r3, [pc, #252]	; (8006350 <xQueueGenericSend+0x1f0>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	e00a      	b.n	8006278 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006268:	4b39      	ldr	r3, [pc, #228]	; (8006350 <xQueueGenericSend+0x1f0>)
 800626a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006278:	f001 fe4c 	bl	8007f14 <vPortExitCritical>
				return pdPASS;
 800627c:	2301      	movs	r3, #1
 800627e:	e063      	b.n	8006348 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d103      	bne.n	800628e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006286:	f001 fe45 	bl	8007f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800628a:	2300      	movs	r3, #0
 800628c:	e05c      	b.n	8006348 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006294:	f107 0314 	add.w	r3, r7, #20
 8006298:	4618      	mov	r0, r3
 800629a:	f000 ffe5 	bl	8007268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800629e:	2301      	movs	r3, #1
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062a2:	f001 fe37 	bl	8007f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062a6:	f000 fd5d 	bl	8006d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062aa:	f001 fe05 	bl	8007eb8 <vPortEnterCritical>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ba:	d103      	bne.n	80062c4 <xQueueGenericSend+0x164>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062ca:	b25b      	sxtb	r3, r3
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d0:	d103      	bne.n	80062da <xQueueGenericSend+0x17a>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062da:	f001 fe1b 	bl	8007f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062de:	1d3a      	adds	r2, r7, #4
 80062e0:	f107 0314 	add.w	r3, r7, #20
 80062e4:	4611      	mov	r1, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 ffd4 	bl	8007294 <xTaskCheckForTimeOut>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d124      	bne.n	800633c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062f4:	f000 fa96 	bl	8006824 <prvIsQueueFull>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d018      	beq.n	8006330 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	3310      	adds	r3, #16
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fefe 	bl	8007108 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800630c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800630e:	f000 fa21 	bl	8006754 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006312:	f000 fd35 	bl	8006d80 <xTaskResumeAll>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f af7c 	bne.w	8006216 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800631e:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <xQueueGenericSend+0x1f0>)
 8006320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	e772      	b.n	8006216 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006332:	f000 fa0f 	bl	8006754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006336:	f000 fd23 	bl	8006d80 <xTaskResumeAll>
 800633a:	e76c      	b.n	8006216 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800633c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633e:	f000 fa09 	bl	8006754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006342:	f000 fd1d 	bl	8006d80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006346:	2300      	movs	r3, #0
		}
	}
}
 8006348:	4618      	mov	r0, r3
 800634a:	3738      	adds	r7, #56	; 0x38
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	e000ed04 	.word	0xe000ed04

08006354 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	; 0x38
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <xQueueGenericSendFromISR+0x2c>
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
 800637e:	e7fe      	b.n	800637e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <xQueueGenericSendFromISR+0x3a>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <xQueueGenericSendFromISR+0x3e>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <xQueueGenericSendFromISR+0x40>
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <xQueueGenericSendFromISR+0x58>
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	623b      	str	r3, [r7, #32]
 80063aa:	e7fe      	b.n	80063aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d103      	bne.n	80063ba <xQueueGenericSendFromISR+0x66>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <xQueueGenericSendFromISR+0x6a>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e000      	b.n	80063c0 <xQueueGenericSendFromISR+0x6c>
 80063be:	2300      	movs	r3, #0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d109      	bne.n	80063d8 <xQueueGenericSendFromISR+0x84>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e7fe      	b.n	80063d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063d8:	f001 fe28 	bl	800802c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063dc:	f3ef 8211 	mrs	r2, BASEPRI
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	61ba      	str	r2, [r7, #24]
 80063f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <xQueueGenericSendFromISR+0xb6>
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d12c      	bne.n	8006464 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800641a:	f000 f90b 	bl	8006634 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800641e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006426:	d112      	bne.n	800644e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	d016      	beq.n	800645e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	3324      	adds	r3, #36	; 0x24
 8006434:	4618      	mov	r0, r3
 8006436:	f000 feb5 	bl	80071a4 <xTaskRemoveFromEventList>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00b      	beq.n	800645e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e007      	b.n	800645e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800644e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006452:	3301      	adds	r3, #1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	b25a      	sxtb	r2, r3
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800645e:	2301      	movs	r3, #1
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006462:	e001      	b.n	8006468 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006464:	2300      	movs	r3, #0
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006474:	4618      	mov	r0, r3
 8006476:	3738      	adds	r7, #56	; 0x38
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08c      	sub	sp, #48	; 0x30
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <xQueueReceive+0x2e>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	e7fe      	b.n	80064a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d103      	bne.n	80064b8 <xQueueReceive+0x3c>
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <xQueueReceive+0x40>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <xQueueReceive+0x42>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <xQueueReceive+0x5a>
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	e7fe      	b.n	80064d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064d6:	f001 f81f 	bl	8007518 <xTaskGetSchedulerState>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <xQueueReceive+0x6a>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <xQueueReceive+0x6e>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <xQueueReceive+0x70>
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d109      	bne.n	8006504 <xQueueReceive+0x88>
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	e7fe      	b.n	8006502 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006504:	f001 fcd8 	bl	8007eb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01f      	beq.n	8006554 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006514:	68b9      	ldr	r1, [r7, #8]
 8006516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006518:	f000 f8f6 	bl	8006708 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	1e5a      	subs	r2, r3, #1
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	3310      	adds	r3, #16
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fe37 	bl	80071a4 <xTaskRemoveFromEventList>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800653c:	4b3c      	ldr	r3, [pc, #240]	; (8006630 <xQueueReceive+0x1b4>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800654c:	f001 fce2 	bl	8007f14 <vPortExitCritical>
				return pdPASS;
 8006550:	2301      	movs	r3, #1
 8006552:	e069      	b.n	8006628 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d103      	bne.n	8006562 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800655a:	f001 fcdb 	bl	8007f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800655e:	2300      	movs	r3, #0
 8006560:	e062      	b.n	8006628 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006568:	f107 0310 	add.w	r3, r7, #16
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fe7b 	bl	8007268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006576:	f001 fccd 	bl	8007f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800657a:	f000 fbf3 	bl	8006d64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800657e:	f001 fc9b 	bl	8007eb8 <vPortEnterCritical>
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006588:	b25b      	sxtb	r3, r3
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800658e:	d103      	bne.n	8006598 <xQueueReceive+0x11c>
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a4:	d103      	bne.n	80065ae <xQueueReceive+0x132>
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ae:	f001 fcb1 	bl	8007f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065b2:	1d3a      	adds	r2, r7, #4
 80065b4:	f107 0310 	add.w	r3, r7, #16
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fe6a 	bl	8007294 <xTaskCheckForTimeOut>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d123      	bne.n	800660e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c8:	f000 f916 	bl	80067f8 <prvIsQueueEmpty>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d017      	beq.n	8006602 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	3324      	adds	r3, #36	; 0x24
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fd94 	bl	8007108 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e2:	f000 f8b7 	bl	8006754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065e6:	f000 fbcb 	bl	8006d80 <xTaskResumeAll>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d189      	bne.n	8006504 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <xQueueReceive+0x1b4>)
 80065f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	e780      	b.n	8006504 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006604:	f000 f8a6 	bl	8006754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006608:	f000 fbba 	bl	8006d80 <xTaskResumeAll>
 800660c:	e77a      	b.n	8006504 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 f8a0 	bl	8006754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006614:	f000 fbb4 	bl	8006d80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	f000 f8ed 	bl	80067f8 <prvIsQueueEmpty>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f43f af6f 	beq.w	8006504 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006626:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006628:	4618      	mov	r0, r3
 800662a:	3730      	adds	r7, #48	; 0x30
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b086      	sub	sp, #24
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10d      	bne.n	800666e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d14d      	bne.n	80066f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ff78 	bl	8007554 <xTaskPriorityDisinherit>
 8006664:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	e043      	b.n	80066f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d119      	bne.n	80066a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6898      	ldr	r0, [r3, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	461a      	mov	r2, r3
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	f001 ff1e 	bl	80084c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	441a      	add	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	429a      	cmp	r2, r3
 800669c:	d32b      	bcc.n	80066f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	609a      	str	r2, [r3, #8]
 80066a6:	e026      	b.n	80066f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	68d8      	ldr	r0, [r3, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	461a      	mov	r2, r3
 80066b2:	68b9      	ldr	r1, [r7, #8]
 80066b4:	f001 ff04 	bl	80084c0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	425b      	negs	r3, r3
 80066c2:	441a      	add	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d207      	bcs.n	80066e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066dc:	425b      	negs	r3, r3
 80066de:	441a      	add	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d105      	bne.n	80066f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066fe:	697b      	ldr	r3, [r7, #20]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3718      	adds	r7, #24
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	2b00      	cmp	r3, #0
 8006718:	d018      	beq.n	800674c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	429a      	cmp	r2, r3
 8006732:	d303      	bcc.n	800673c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68d9      	ldr	r1, [r3, #12]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006744:	461a      	mov	r2, r3
 8006746:	6838      	ldr	r0, [r7, #0]
 8006748:	f001 feba 	bl	80084c0 <memcpy>
	}
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800675c:	f001 fbac 	bl	8007eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006766:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006768:	e011      	b.n	800678e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d012      	beq.n	8006798 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3324      	adds	r3, #36	; 0x24
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fd14 	bl	80071a4 <xTaskRemoveFromEventList>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006782:	f000 fde7 	bl	8007354 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	3b01      	subs	r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800678e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006792:	2b00      	cmp	r3, #0
 8006794:	dce9      	bgt.n	800676a <prvUnlockQueue+0x16>
 8006796:	e000      	b.n	800679a <prvUnlockQueue+0x46>
					break;
 8006798:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067a2:	f001 fbb7 	bl	8007f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067a6:	f001 fb87 	bl	8007eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067b2:	e011      	b.n	80067d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d012      	beq.n	80067e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3310      	adds	r3, #16
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fcef 	bl	80071a4 <xTaskRemoveFromEventList>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067cc:	f000 fdc2 	bl	8007354 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dce9      	bgt.n	80067b4 <prvUnlockQueue+0x60>
 80067e0:	e000      	b.n	80067e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067ec:	f001 fb92 	bl	8007f14 <vPortExitCritical>
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006800:	f001 fb5a 	bl	8007eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e001      	b.n	8006816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006816:	f001 fb7d 	bl	8007f14 <vPortExitCritical>

	return xReturn;
 800681a:	68fb      	ldr	r3, [r7, #12]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800682c:	f001 fb44 	bl	8007eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006838:	429a      	cmp	r2, r3
 800683a:	d102      	bne.n	8006842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e001      	b.n	8006846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006846:	f001 fb65 	bl	8007f14 <vPortExitCritical>

	return xReturn;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685e:	2300      	movs	r3, #0
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	e014      	b.n	800688e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006864:	4a0e      	ldr	r2, [pc, #56]	; (80068a0 <vQueueAddToRegistry+0x4c>)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10b      	bne.n	8006888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006870:	490b      	ldr	r1, [pc, #44]	; (80068a0 <vQueueAddToRegistry+0x4c>)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800687a:	4a09      	ldr	r2, [pc, #36]	; (80068a0 <vQueueAddToRegistry+0x4c>)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4413      	add	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006886:	e005      	b.n	8006894 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b07      	cmp	r3, #7
 8006892:	d9e7      	bls.n	8006864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	200025bc 	.word	0x200025bc

080068a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068b4:	f001 fb00 	bl	8007eb8 <vPortEnterCritical>
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068be:	b25b      	sxtb	r3, r3
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c4:	d103      	bne.n	80068ce <vQueueWaitForMessageRestricted+0x2a>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d4:	b25b      	sxtb	r3, r3
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068da:	d103      	bne.n	80068e4 <vQueueWaitForMessageRestricted+0x40>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e4:	f001 fb16 	bl	8007f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	3324      	adds	r3, #36	; 0x24
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fc29 	bl	8007150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068fe:	6978      	ldr	r0, [r7, #20]
 8006900:	f7ff ff28 	bl	8006754 <prvUnlockQueue>
	}
 8006904:	bf00      	nop
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af04      	add	r7, sp, #16
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <xTaskCreateStatic+0x28>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	e7fe      	b.n	8006932 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <xTaskCreateStatic+0x42>
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e7fe      	b.n	800694c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800694e:	235c      	movs	r3, #92	; 0x5c
 8006950:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b5c      	cmp	r3, #92	; 0x5c
 8006956:	d009      	beq.n	800696c <xTaskCreateStatic+0x60>
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e7fe      	b.n	800696a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01e      	beq.n	80069b0 <xTaskCreateStatic+0xa4>
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01b      	beq.n	80069b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006980:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	2202      	movs	r2, #2
 8006986:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800698a:	2300      	movs	r3, #0
 800698c:	9303      	str	r3, [sp, #12]
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	9302      	str	r3, [sp, #8]
 8006992:	f107 0314 	add.w	r3, r7, #20
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f850 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069aa:	f000 f8d3 	bl	8006b54 <prvAddNewTaskToReadyList>
 80069ae:	e001      	b.n	80069b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069b4:	697b      	ldr	r3, [r7, #20]
	}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b08c      	sub	sp, #48	; 0x30
 80069c2:	af04      	add	r7, sp, #16
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	603b      	str	r3, [r7, #0]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fb66 	bl	80080a4 <pvPortMalloc>
 80069d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80069e0:	205c      	movs	r0, #92	; 0x5c
 80069e2:	f001 fb5f 	bl	80080a4 <pvPortMalloc>
 80069e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
 80069f4:	e005      	b.n	8006a02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f001 fc16 	bl	8008228 <vPortFree>
 80069fc:	e001      	b.n	8006a02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d017      	beq.n	8006a38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a10:	88fa      	ldrh	r2, [r7, #6]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	9302      	str	r3, [sp, #8]
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	9300      	str	r3, [sp, #0]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f80e 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a2c:	69f8      	ldr	r0, [r7, #28]
 8006a2e:	f000 f891 	bl	8006b54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a32:	2301      	movs	r3, #1
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e002      	b.n	8006a3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	21a5      	movs	r1, #165	; 0xa5
 8006a62:	f001 fd38 	bl	80084d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	3b01      	subs	r3, #1
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <prvInitialiseNewTask+0x56>
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e7fe      	b.n	8006a9c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	61fb      	str	r3, [r7, #28]
 8006aa2:	e012      	b.n	8006aca <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	7819      	ldrb	r1, [r3, #0]
 8006aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3334      	adds	r3, #52	; 0x34
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d006      	beq.n	8006ad2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d9e9      	bls.n	8006aa4 <prvInitialiseNewTask+0x5c>
 8006ad0:	e000      	b.n	8006ad4 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006ad2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ade:	2b37      	cmp	r3, #55	; 0x37
 8006ae0:	d901      	bls.n	8006ae6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ae2:	2337      	movs	r3, #55	; 0x37
 8006ae4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2200      	movs	r2, #0
 8006af6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	3304      	adds	r3, #4
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff f964 	bl	8005dca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	3318      	adds	r3, #24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff f95f 	bl	8005dca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b14:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	68f9      	ldr	r1, [r7, #12]
 8006b34:	69b8      	ldr	r0, [r7, #24]
 8006b36:	f001 f8d7 	bl	8007ce8 <pxPortInitialiseStack>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b4c:	bf00      	nop
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b5c:	f001 f9ac 	bl	8007eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b60:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <prvAddNewTaskToReadyList+0xc4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	4a2c      	ldr	r2, [pc, #176]	; (8006c18 <prvAddNewTaskToReadyList+0xc4>)
 8006b68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <prvAddNewTaskToReadyList+0xc8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b72:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <prvAddNewTaskToReadyList+0xc8>)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <prvAddNewTaskToReadyList+0xc4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d110      	bne.n	8006ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b80:	f000 fc0c 	bl	800739c <prvInitialiseTaskLists>
 8006b84:	e00d      	b.n	8006ba2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b86:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <prvAddNewTaskToReadyList+0xcc>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b8e:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <prvAddNewTaskToReadyList+0xc8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d802      	bhi.n	8006ba2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b9c:	4a1f      	ldr	r2, [pc, #124]	; (8006c1c <prvAddNewTaskToReadyList+0xc8>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <prvAddNewTaskToReadyList+0xd0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <prvAddNewTaskToReadyList+0xd0>)
 8006baa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bac:	4b1d      	ldr	r3, [pc, #116]	; (8006c24 <prvAddNewTaskToReadyList+0xd0>)
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <prvAddNewTaskToReadyList+0xd4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d903      	bls.n	8006bc8 <prvAddNewTaskToReadyList+0x74>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <prvAddNewTaskToReadyList+0xd4>)
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4a15      	ldr	r2, [pc, #84]	; (8006c2c <prvAddNewTaskToReadyList+0xd8>)
 8006bd6:	441a      	add	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f7ff f8ff 	bl	8005de2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006be4:	f001 f996 	bl	8007f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006be8:	4b0d      	ldr	r3, [pc, #52]	; (8006c20 <prvAddNewTaskToReadyList+0xcc>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00e      	beq.n	8006c0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <prvAddNewTaskToReadyList+0xc8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d207      	bcs.n	8006c0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bfe:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <prvAddNewTaskToReadyList+0xdc>)
 8006c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000ddc 	.word	0x20000ddc
 8006c1c:	20000908 	.word	0x20000908
 8006c20:	20000de8 	.word	0x20000de8
 8006c24:	20000df8 	.word	0x20000df8
 8006c28:	20000de4 	.word	0x20000de4
 8006c2c:	2000090c 	.word	0x2000090c
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <vTaskDelay+0x60>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <vTaskDelay+0x2e>
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60bb      	str	r3, [r7, #8]
 8006c60:	e7fe      	b.n	8006c60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006c62:	f000 f87f 	bl	8006d64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c66:	2100      	movs	r1, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fcdf 	bl	800762c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c6e:	f000 f887 	bl	8006d80 <xTaskResumeAll>
 8006c72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d107      	bne.n	8006c8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006c7a:	4b07      	ldr	r3, [pc, #28]	; (8006c98 <vTaskDelay+0x64>)
 8006c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000e04 	.word	0x20000e04
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006caa:	463a      	mov	r2, r7
 8006cac:	1d39      	adds	r1, r7, #4
 8006cae:	f107 0308 	add.w	r3, r7, #8
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff f838 	bl	8005d28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	9202      	str	r2, [sp, #8]
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	460a      	mov	r2, r1
 8006cca:	4920      	ldr	r1, [pc, #128]	; (8006d4c <vTaskStartScheduler+0xb0>)
 8006ccc:	4820      	ldr	r0, [pc, #128]	; (8006d50 <vTaskStartScheduler+0xb4>)
 8006cce:	f7ff fe1d 	bl	800690c <xTaskCreateStatic>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	4b1f      	ldr	r3, [pc, #124]	; (8006d54 <vTaskStartScheduler+0xb8>)
 8006cd6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cd8:	4b1e      	ldr	r3, [pc, #120]	; (8006d54 <vTaskStartScheduler+0xb8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	e001      	b.n	8006cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d102      	bne.n	8006cf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cf0:	f000 fcf0 	bl	80076d4 <xTimerCreateTimerTask>
 8006cf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d115      	bne.n	8006d28 <vTaskStartScheduler+0x8c>
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d0e:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <vTaskStartScheduler+0xbc>)
 8006d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d16:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <vTaskStartScheduler+0xc0>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <vTaskStartScheduler+0xc4>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d22:	f001 f859 	bl	8007dd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d26:	e00d      	b.n	8006d44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2e:	d109      	bne.n	8006d44 <vTaskStartScheduler+0xa8>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e7fe      	b.n	8006d42 <vTaskStartScheduler+0xa6>
}
 8006d44:	bf00      	nop
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	0800af7c 	.word	0x0800af7c
 8006d50:	0800736d 	.word	0x0800736d
 8006d54:	20000e00 	.word	0x20000e00
 8006d58:	20000dfc 	.word	0x20000dfc
 8006d5c:	20000de8 	.word	0x20000de8
 8006d60:	20000de0 	.word	0x20000de0

08006d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <vTaskSuspendAll+0x18>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	4a03      	ldr	r2, [pc, #12]	; (8006d7c <vTaskSuspendAll+0x18>)
 8006d70:	6013      	str	r3, [r2, #0]
}
 8006d72:	bf00      	nop
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000e04 	.word	0x20000e04

08006d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d8e:	4b41      	ldr	r3, [pc, #260]	; (8006e94 <xTaskResumeAll+0x114>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <xTaskResumeAll+0x2a>
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	e7fe      	b.n	8006da8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006daa:	f001 f885 	bl	8007eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dae:	4b39      	ldr	r3, [pc, #228]	; (8006e94 <xTaskResumeAll+0x114>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	4a37      	ldr	r2, [pc, #220]	; (8006e94 <xTaskResumeAll+0x114>)
 8006db6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db8:	4b36      	ldr	r3, [pc, #216]	; (8006e94 <xTaskResumeAll+0x114>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d162      	bne.n	8006e86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dc0:	4b35      	ldr	r3, [pc, #212]	; (8006e98 <xTaskResumeAll+0x118>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d05e      	beq.n	8006e86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dc8:	e02f      	b.n	8006e2a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006dca:	4b34      	ldr	r3, [pc, #208]	; (8006e9c <xTaskResumeAll+0x11c>)
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3318      	adds	r3, #24
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff f85e 	bl	8005e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff f859 	bl	8005e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	4b2d      	ldr	r3, [pc, #180]	; (8006ea0 <xTaskResumeAll+0x120>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d903      	bls.n	8006dfa <xTaskResumeAll+0x7a>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	4a2a      	ldr	r2, [pc, #168]	; (8006ea0 <xTaskResumeAll+0x120>)
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <xTaskResumeAll+0x124>)
 8006e08:	441a      	add	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4610      	mov	r0, r2
 8006e12:	f7fe ffe6 	bl	8005de2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1a:	4b23      	ldr	r3, [pc, #140]	; (8006ea8 <xTaskResumeAll+0x128>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d302      	bcc.n	8006e2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006e24:	4b21      	ldr	r3, [pc, #132]	; (8006eac <xTaskResumeAll+0x12c>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e2a:	4b1c      	ldr	r3, [pc, #112]	; (8006e9c <xTaskResumeAll+0x11c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1cb      	bne.n	8006dca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e38:	f000 fb4a 	bl	80074d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e3c:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <xTaskResumeAll+0x130>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d010      	beq.n	8006e6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e48:	f000 f844 	bl	8006ed4 <xTaskIncrementTick>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e52:	4b16      	ldr	r3, [pc, #88]	; (8006eac <xTaskResumeAll+0x12c>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f1      	bne.n	8006e48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <xTaskResumeAll+0x130>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e6a:	4b10      	ldr	r3, [pc, #64]	; (8006eac <xTaskResumeAll+0x12c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e72:	2301      	movs	r3, #1
 8006e74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <xTaskResumeAll+0x134>)
 8006e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e86:	f001 f845 	bl	8007f14 <vPortExitCritical>

	return xAlreadyYielded;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000e04 	.word	0x20000e04
 8006e98:	20000ddc 	.word	0x20000ddc
 8006e9c:	20000d9c 	.word	0x20000d9c
 8006ea0:	20000de4 	.word	0x20000de4
 8006ea4:	2000090c 	.word	0x2000090c
 8006ea8:	20000908 	.word	0x20000908
 8006eac:	20000df0 	.word	0x20000df0
 8006eb0:	20000dec 	.word	0x20000dec
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ebe:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <xTaskGetTickCount+0x18>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ec4:	687b      	ldr	r3, [r7, #4]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr
 8006ed0:	20000de0 	.word	0x20000de0

08006ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ede:	4b51      	ldr	r3, [pc, #324]	; (8007024 <xTaskIncrementTick+0x150>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 808d 	bne.w	8007002 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ee8:	4b4f      	ldr	r3, [pc, #316]	; (8007028 <xTaskIncrementTick+0x154>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3301      	adds	r3, #1
 8006eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ef0:	4a4d      	ldr	r2, [pc, #308]	; (8007028 <xTaskIncrementTick+0x154>)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11f      	bne.n	8006f3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006efc:	4b4b      	ldr	r3, [pc, #300]	; (800702c <xTaskIncrementTick+0x158>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d009      	beq.n	8006f1a <xTaskIncrementTick+0x46>
 8006f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	603b      	str	r3, [r7, #0]
 8006f18:	e7fe      	b.n	8006f18 <xTaskIncrementTick+0x44>
 8006f1a:	4b44      	ldr	r3, [pc, #272]	; (800702c <xTaskIncrementTick+0x158>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	4b43      	ldr	r3, [pc, #268]	; (8007030 <xTaskIncrementTick+0x15c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a41      	ldr	r2, [pc, #260]	; (800702c <xTaskIncrementTick+0x158>)
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	4a41      	ldr	r2, [pc, #260]	; (8007030 <xTaskIncrementTick+0x15c>)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b41      	ldr	r3, [pc, #260]	; (8007034 <xTaskIncrementTick+0x160>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	4a3f      	ldr	r2, [pc, #252]	; (8007034 <xTaskIncrementTick+0x160>)
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	f000 faca 	bl	80074d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f3c:	4b3e      	ldr	r3, [pc, #248]	; (8007038 <xTaskIncrementTick+0x164>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d34e      	bcc.n	8006fe4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f46:	4b39      	ldr	r3, [pc, #228]	; (800702c <xTaskIncrementTick+0x158>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <xTaskIncrementTick+0x80>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <xTaskIncrementTick+0x82>
 8006f54:	2300      	movs	r3, #0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d004      	beq.n	8006f64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5a:	4b37      	ldr	r3, [pc, #220]	; (8007038 <xTaskIncrementTick+0x164>)
 8006f5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f60:	601a      	str	r2, [r3, #0]
					break;
 8006f62:	e03f      	b.n	8006fe4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f64:	4b31      	ldr	r3, [pc, #196]	; (800702c <xTaskIncrementTick+0x158>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d203      	bcs.n	8006f84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f7c:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <xTaskIncrementTick+0x164>)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6013      	str	r3, [r2, #0]
						break;
 8006f82:	e02f      	b.n	8006fe4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe ff85 	bl	8005e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	3318      	adds	r3, #24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe ff7c 	bl	8005e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa4:	4b25      	ldr	r3, [pc, #148]	; (800703c <xTaskIncrementTick+0x168>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d903      	bls.n	8006fb4 <xTaskIncrementTick+0xe0>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	4a22      	ldr	r2, [pc, #136]	; (800703c <xTaskIncrementTick+0x168>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a1f      	ldr	r2, [pc, #124]	; (8007040 <xTaskIncrementTick+0x16c>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7fe ff09 	bl	8005de2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <xTaskIncrementTick+0x170>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3b3      	bcc.n	8006f46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fe2:	e7b0      	b.n	8006f46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fe4:	4b17      	ldr	r3, [pc, #92]	; (8007044 <xTaskIncrementTick+0x170>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fea:	4915      	ldr	r1, [pc, #84]	; (8007040 <xTaskIncrementTick+0x16c>)
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	440b      	add	r3, r1
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d907      	bls.n	800700c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	617b      	str	r3, [r7, #20]
 8007000:	e004      	b.n	800700c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007002:	4b11      	ldr	r3, [pc, #68]	; (8007048 <xTaskIncrementTick+0x174>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	4a0f      	ldr	r2, [pc, #60]	; (8007048 <xTaskIncrementTick+0x174>)
 800700a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <xTaskIncrementTick+0x178>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007014:	2301      	movs	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007018:	697b      	ldr	r3, [r7, #20]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000e04 	.word	0x20000e04
 8007028:	20000de0 	.word	0x20000de0
 800702c:	20000d94 	.word	0x20000d94
 8007030:	20000d98 	.word	0x20000d98
 8007034:	20000df4 	.word	0x20000df4
 8007038:	20000dfc 	.word	0x20000dfc
 800703c:	20000de4 	.word	0x20000de4
 8007040:	2000090c 	.word	0x2000090c
 8007044:	20000908 	.word	0x20000908
 8007048:	20000dec 	.word	0x20000dec
 800704c:	20000df0 	.word	0x20000df0

08007050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <vTaskSwitchContext+0xa4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800705e:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <vTaskSwitchContext+0xa8>)
 8007060:	2201      	movs	r2, #1
 8007062:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007064:	e040      	b.n	80070e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007066:	4b24      	ldr	r3, [pc, #144]	; (80070f8 <vTaskSwitchContext+0xa8>)
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800706c:	4b23      	ldr	r3, [pc, #140]	; (80070fc <vTaskSwitchContext+0xac>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	e00f      	b.n	8007094 <vTaskSwitchContext+0x44>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <vTaskSwitchContext+0x3e>
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	607b      	str	r3, [r7, #4]
 800708c:	e7fe      	b.n	800708c <vTaskSwitchContext+0x3c>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3b01      	subs	r3, #1
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	491a      	ldr	r1, [pc, #104]	; (8007100 <vTaskSwitchContext+0xb0>)
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	4613      	mov	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0e5      	beq.n	8007074 <vTaskSwitchContext+0x24>
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4a13      	ldr	r2, [pc, #76]	; (8007100 <vTaskSwitchContext+0xb0>)
 80070b4:	4413      	add	r3, r2
 80070b6:	60bb      	str	r3, [r7, #8]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	3308      	adds	r3, #8
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d104      	bne.n	80070d8 <vTaskSwitchContext+0x88>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	605a      	str	r2, [r3, #4]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	4a09      	ldr	r2, [pc, #36]	; (8007104 <vTaskSwitchContext+0xb4>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	4a06      	ldr	r2, [pc, #24]	; (80070fc <vTaskSwitchContext+0xac>)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6013      	str	r3, [r2, #0]
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000e04 	.word	0x20000e04
 80070f8:	20000df0 	.word	0x20000df0
 80070fc:	20000de4 	.word	0x20000de4
 8007100:	2000090c 	.word	0x2000090c
 8007104:	20000908 	.word	0x20000908

08007108 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d109      	bne.n	800712c <vTaskPlaceOnEventList+0x24>
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e7fe      	b.n	800712a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <vTaskPlaceOnEventList+0x44>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3318      	adds	r3, #24
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe fe77 	bl	8005e28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800713a:	2101      	movs	r1, #1
 800713c:	6838      	ldr	r0, [r7, #0]
 800713e:	f000 fa75 	bl	800762c <prvAddCurrentTaskToDelayedList>
}
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000908 	.word	0x20000908

08007150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <vTaskPlaceOnEventListRestricted+0x26>
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	e7fe      	b.n	8007174 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3318      	adds	r3, #24
 800717c:	4619      	mov	r1, r3
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7fe fe2f 	bl	8005de2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800718e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	68b8      	ldr	r0, [r7, #8]
 8007194:	f000 fa4a 	bl	800762c <prvAddCurrentTaskToDelayedList>
	}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000908 	.word	0x20000908

080071a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <xTaskRemoveFromEventList+0x2a>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e7fe      	b.n	80071cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3318      	adds	r3, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fe60 	bl	8005e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d8:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <xTaskRemoveFromEventList+0xac>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11d      	bne.n	800721c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fe57 	bl	8005e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	4b19      	ldr	r3, [pc, #100]	; (8007254 <xTaskRemoveFromEventList+0xb0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d903      	bls.n	80071fe <xTaskRemoveFromEventList+0x5a>
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a16      	ldr	r2, [pc, #88]	; (8007254 <xTaskRemoveFromEventList+0xb0>)
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <xTaskRemoveFromEventList+0xb4>)
 800720c:	441a      	add	r2, r3
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe fde4 	bl	8005de2 <vListInsertEnd>
 800721a:	e005      	b.n	8007228 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3318      	adds	r3, #24
 8007220:	4619      	mov	r1, r3
 8007222:	480e      	ldr	r0, [pc, #56]	; (800725c <xTaskRemoveFromEventList+0xb8>)
 8007224:	f7fe fddd 	bl	8005de2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <xTaskRemoveFromEventList+0xbc>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	429a      	cmp	r2, r3
 8007234:	d905      	bls.n	8007242 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <xTaskRemoveFromEventList+0xc0>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e001      	b.n	8007246 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000e04 	.word	0x20000e04
 8007254:	20000de4 	.word	0x20000de4
 8007258:	2000090c 	.word	0x2000090c
 800725c:	20000d9c 	.word	0x20000d9c
 8007260:	20000908 	.word	0x20000908
 8007264:	20000df0 	.word	0x20000df0

08007268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007270:	4b06      	ldr	r3, [pc, #24]	; (800728c <vTaskInternalSetTimeOutState+0x24>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <vTaskInternalSetTimeOutState+0x28>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	605a      	str	r2, [r3, #4]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20000df4 	.word	0x20000df4
 8007290:	20000de0 	.word	0x20000de0

08007294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <xTaskCheckForTimeOut+0x24>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	613b      	str	r3, [r7, #16]
 80072b6:	e7fe      	b.n	80072b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <xTaskCheckForTimeOut+0x3e>
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e7fe      	b.n	80072d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80072d2:	f000 fdf1 	bl	8007eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072d6:	4b1d      	ldr	r3, [pc, #116]	; (800734c <xTaskCheckForTimeOut+0xb8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ee:	d102      	bne.n	80072f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61fb      	str	r3, [r7, #28]
 80072f4:	e023      	b.n	800733e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <xTaskCheckForTimeOut+0xbc>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d007      	beq.n	8007312 <xTaskCheckForTimeOut+0x7e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	429a      	cmp	r2, r3
 800730a:	d302      	bcc.n	8007312 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800730c:	2301      	movs	r3, #1
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	e015      	b.n	800733e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	429a      	cmp	r2, r3
 800731a:	d20b      	bcs.n	8007334 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	1ad2      	subs	r2, r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff ff9d 	bl	8007268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	e004      	b.n	800733e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800733a:	2301      	movs	r3, #1
 800733c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800733e:	f000 fde9 	bl	8007f14 <vPortExitCritical>

	return xReturn;
 8007342:	69fb      	ldr	r3, [r7, #28]
}
 8007344:	4618      	mov	r0, r3
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	20000de0 	.word	0x20000de0
 8007350:	20000df4 	.word	0x20000df4

08007354 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007358:	4b03      	ldr	r3, [pc, #12]	; (8007368 <vTaskMissedYield+0x14>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
}
 800735e:	bf00      	nop
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	20000df0 	.word	0x20000df0

0800736c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007374:	f000 f852 	bl	800741c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <prvIdleTask+0x28>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d9f9      	bls.n	8007374 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <prvIdleTask+0x2c>)
 8007382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007390:	e7f0      	b.n	8007374 <prvIdleTask+0x8>
 8007392:	bf00      	nop
 8007394:	2000090c 	.word	0x2000090c
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073a2:	2300      	movs	r3, #0
 80073a4:	607b      	str	r3, [r7, #4]
 80073a6:	e00c      	b.n	80073c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4613      	mov	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4a12      	ldr	r2, [pc, #72]	; (80073fc <prvInitialiseTaskLists+0x60>)
 80073b4:	4413      	add	r3, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fce8 	bl	8005d8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3301      	adds	r3, #1
 80073c0:	607b      	str	r3, [r7, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b37      	cmp	r3, #55	; 0x37
 80073c6:	d9ef      	bls.n	80073a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073c8:	480d      	ldr	r0, [pc, #52]	; (8007400 <prvInitialiseTaskLists+0x64>)
 80073ca:	f7fe fcdf 	bl	8005d8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073ce:	480d      	ldr	r0, [pc, #52]	; (8007404 <prvInitialiseTaskLists+0x68>)
 80073d0:	f7fe fcdc 	bl	8005d8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073d4:	480c      	ldr	r0, [pc, #48]	; (8007408 <prvInitialiseTaskLists+0x6c>)
 80073d6:	f7fe fcd9 	bl	8005d8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073da:	480c      	ldr	r0, [pc, #48]	; (800740c <prvInitialiseTaskLists+0x70>)
 80073dc:	f7fe fcd6 	bl	8005d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073e0:	480b      	ldr	r0, [pc, #44]	; (8007410 <prvInitialiseTaskLists+0x74>)
 80073e2:	f7fe fcd3 	bl	8005d8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <prvInitialiseTaskLists+0x78>)
 80073e8:	4a05      	ldr	r2, [pc, #20]	; (8007400 <prvInitialiseTaskLists+0x64>)
 80073ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <prvInitialiseTaskLists+0x7c>)
 80073ee:	4a05      	ldr	r2, [pc, #20]	; (8007404 <prvInitialiseTaskLists+0x68>)
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	2000090c 	.word	0x2000090c
 8007400:	20000d6c 	.word	0x20000d6c
 8007404:	20000d80 	.word	0x20000d80
 8007408:	20000d9c 	.word	0x20000d9c
 800740c:	20000db0 	.word	0x20000db0
 8007410:	20000dc8 	.word	0x20000dc8
 8007414:	20000d94 	.word	0x20000d94
 8007418:	20000d98 	.word	0x20000d98

0800741c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007422:	e019      	b.n	8007458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007424:	f000 fd48 	bl	8007eb8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007428:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <prvCheckTasksWaitingTermination+0x4c>)
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fd2f 	bl	8005e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <prvCheckTasksWaitingTermination+0x50>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3b01      	subs	r3, #1
 8007440:	4a0a      	ldr	r2, [pc, #40]	; (800746c <prvCheckTasksWaitingTermination+0x50>)
 8007442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007444:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <prvCheckTasksWaitingTermination+0x54>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3b01      	subs	r3, #1
 800744a:	4a09      	ldr	r2, [pc, #36]	; (8007470 <prvCheckTasksWaitingTermination+0x54>)
 800744c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800744e:	f000 fd61 	bl	8007f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f80e 	bl	8007474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <prvCheckTasksWaitingTermination+0x54>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e1      	bne.n	8007424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000db0 	.word	0x20000db0
 800746c:	20000ddc 	.word	0x20000ddc
 8007470:	20000dc4 	.word	0x20000dc4

08007474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007482:	2b00      	cmp	r3, #0
 8007484:	d108      	bne.n	8007498 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fecc 	bl	8008228 <vPortFree>
				vPortFree( pxTCB );
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fec9 	bl	8008228 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007496:	e017      	b.n	80074c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d103      	bne.n	80074aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fec0 	bl	8008228 <vPortFree>
	}
 80074a8:	e00e      	b.n	80074c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d009      	beq.n	80074c8 <prvDeleteTCB+0x54>
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	e7fe      	b.n	80074c6 <prvDeleteTCB+0x52>
	}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074d6:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <prvResetNextTaskUnblockTime+0x40>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <prvResetNextTaskUnblockTime+0x14>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <prvResetNextTaskUnblockTime+0x16>
 80074e4:	2300      	movs	r3, #0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d004      	beq.n	80074f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <prvResetNextTaskUnblockTime+0x44>)
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074f2:	e008      	b.n	8007506 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80074f4:	4b06      	ldr	r3, [pc, #24]	; (8007510 <prvResetNextTaskUnblockTime+0x40>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	4a04      	ldr	r2, [pc, #16]	; (8007514 <prvResetNextTaskUnblockTime+0x44>)
 8007504:	6013      	str	r3, [r2, #0]
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr
 8007510:	20000d94 	.word	0x20000d94
 8007514:	20000dfc 	.word	0x20000dfc

08007518 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <xTaskGetSchedulerState+0x34>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007526:	2301      	movs	r3, #1
 8007528:	607b      	str	r3, [r7, #4]
 800752a:	e008      	b.n	800753e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <xTaskGetSchedulerState+0x38>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007534:	2302      	movs	r3, #2
 8007536:	607b      	str	r3, [r7, #4]
 8007538:	e001      	b.n	800753e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800753a:	2300      	movs	r3, #0
 800753c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800753e:	687b      	ldr	r3, [r7, #4]
	}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000de8 	.word	0x20000de8
 8007550:	20000e04 	.word	0x20000e04

08007554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d054      	beq.n	8007614 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <xTaskPriorityDisinherit+0xcc>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	429a      	cmp	r2, r3
 8007572:	d009      	beq.n	8007588 <xTaskPriorityDisinherit+0x34>
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e7fe      	b.n	8007586 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758c:	2b00      	cmp	r3, #0
 800758e:	d109      	bne.n	80075a4 <xTaskPriorityDisinherit+0x50>
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60bb      	str	r3, [r7, #8]
 80075a2:	e7fe      	b.n	80075a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	1e5a      	subs	r2, r3, #1
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d02c      	beq.n	8007614 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d128      	bne.n	8007614 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	3304      	adds	r3, #4
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fc66 	bl	8005e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e4:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <xTaskPriorityDisinherit+0xd0>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d903      	bls.n	80075f4 <xTaskPriorityDisinherit+0xa0>
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4a0c      	ldr	r2, [pc, #48]	; (8007624 <xTaskPriorityDisinherit+0xd0>)
 80075f2:	6013      	str	r3, [r2, #0]
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4a09      	ldr	r2, [pc, #36]	; (8007628 <xTaskPriorityDisinherit+0xd4>)
 8007602:	441a      	add	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	3304      	adds	r3, #4
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7fe fbe9 	bl	8005de2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007610:	2301      	movs	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007614:	697b      	ldr	r3, [r7, #20]
	}
 8007616:	4618      	mov	r0, r3
 8007618:	3718      	adds	r7, #24
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000908 	.word	0x20000908
 8007624:	20000de4 	.word	0x20000de4
 8007628:	2000090c 	.word	0x2000090c

0800762c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007636:	4b21      	ldr	r3, [pc, #132]	; (80076bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800763c:	4b20      	ldr	r3, [pc, #128]	; (80076c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3304      	adds	r3, #4
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe fc28 	bl	8005e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764e:	d10a      	bne.n	8007666 <prvAddCurrentTaskToDelayedList+0x3a>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007656:	4b1a      	ldr	r3, [pc, #104]	; (80076c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3304      	adds	r3, #4
 800765c:	4619      	mov	r1, r3
 800765e:	4819      	ldr	r0, [pc, #100]	; (80076c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007660:	f7fe fbbf 	bl	8005de2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007664:	e026      	b.n	80076b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4413      	add	r3, r2
 800766c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	429a      	cmp	r2, r3
 800767c:	d209      	bcs.n	8007692 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	4b0f      	ldr	r3, [pc, #60]	; (80076c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fe fbcc 	bl	8005e28 <vListInsert>
}
 8007690:	e010      	b.n	80076b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007692:	4b0e      	ldr	r3, [pc, #56]	; (80076cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3304      	adds	r3, #4
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f7fe fbc2 	bl	8005e28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076a4:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d202      	bcs.n	80076b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076ae:	4a08      	ldr	r2, [pc, #32]	; (80076d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6013      	str	r3, [r2, #0]
}
 80076b4:	bf00      	nop
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20000de0 	.word	0x20000de0
 80076c0:	20000908 	.word	0x20000908
 80076c4:	20000dc8 	.word	0x20000dc8
 80076c8:	20000d98 	.word	0x20000d98
 80076cc:	20000d94 	.word	0x20000d94
 80076d0:	20000dfc 	.word	0x20000dfc

080076d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08a      	sub	sp, #40	; 0x28
 80076d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076de:	f000 fac3 	bl	8007c68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076e2:	4b1c      	ldr	r3, [pc, #112]	; (8007754 <xTimerCreateTimerTask+0x80>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d021      	beq.n	800772e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076f2:	1d3a      	adds	r2, r7, #4
 80076f4:	f107 0108 	add.w	r1, r7, #8
 80076f8:	f107 030c 	add.w	r3, r7, #12
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe fb2b 	bl	8005d58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	9202      	str	r2, [sp, #8]
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	2302      	movs	r3, #2
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	2300      	movs	r3, #0
 8007712:	460a      	mov	r2, r1
 8007714:	4910      	ldr	r1, [pc, #64]	; (8007758 <xTimerCreateTimerTask+0x84>)
 8007716:	4811      	ldr	r0, [pc, #68]	; (800775c <xTimerCreateTimerTask+0x88>)
 8007718:	f7ff f8f8 	bl	800690c <xTaskCreateStatic>
 800771c:	4602      	mov	r2, r0
 800771e:	4b10      	ldr	r3, [pc, #64]	; (8007760 <xTimerCreateTimerTask+0x8c>)
 8007720:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007722:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <xTimerCreateTimerTask+0x8c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800772a:	2301      	movs	r3, #1
 800772c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <xTimerCreateTimerTask+0x74>
 8007734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	e7fe      	b.n	8007746 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007748:	697b      	ldr	r3, [r7, #20]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000e38 	.word	0x20000e38
 8007758:	0800af84 	.word	0x0800af84
 800775c:	0800787d 	.word	0x0800787d
 8007760:	20000e3c 	.word	0x20000e3c

08007764 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007772:	2300      	movs	r3, #0
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <xTimerGenericCommand+0x2c>
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	623b      	str	r3, [r7, #32]
 800778e:	e7fe      	b.n	800778e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <xTimerGenericCommand+0x94>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d02a      	beq.n	80077ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b05      	cmp	r3, #5
 80077a8:	dc18      	bgt.n	80077dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077aa:	f7ff feb5 	bl	8007518 <xTaskGetSchedulerState>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d109      	bne.n	80077c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077b4:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <xTimerGenericCommand+0x94>)
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	f107 0110 	add.w	r1, r7, #16
 80077bc:	2300      	movs	r3, #0
 80077be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c0:	f7fe fcce 	bl	8006160 <xQueueGenericSend>
 80077c4:	6278      	str	r0, [r7, #36]	; 0x24
 80077c6:	e012      	b.n	80077ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077c8:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <xTimerGenericCommand+0x94>)
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	f107 0110 	add.w	r1, r7, #16
 80077d0:	2300      	movs	r3, #0
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7fe fcc4 	bl	8006160 <xQueueGenericSend>
 80077d8:	6278      	str	r0, [r7, #36]	; 0x24
 80077da:	e008      	b.n	80077ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077dc:	4b06      	ldr	r3, [pc, #24]	; (80077f8 <xTimerGenericCommand+0x94>)
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	f107 0110 	add.w	r1, r7, #16
 80077e4:	2300      	movs	r3, #0
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	f7fe fdb4 	bl	8006354 <xQueueGenericSendFromISR>
 80077ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3728      	adds	r7, #40	; 0x28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000e38 	.word	0x20000e38

080077fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af02      	add	r7, sp, #8
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007806:	4b1c      	ldr	r3, [pc, #112]	; (8007878 <prvProcessExpiredTimer+0x7c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	3304      	adds	r3, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe fb3f 	bl	8005e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d121      	bne.n	8007866 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	18d1      	adds	r1, r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	6978      	ldr	r0, [r7, #20]
 8007830:	f000 f8c8 	bl	80079c4 <prvInsertTimerInActiveList>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d015      	beq.n	8007866 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800783a:	2300      	movs	r3, #0
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	2100      	movs	r1, #0
 8007844:	6978      	ldr	r0, [r7, #20]
 8007846:	f7ff ff8d 	bl	8007764 <xTimerGenericCommand>
 800784a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <prvProcessExpiredTimer+0x6a>
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	e7fe      	b.n	8007864 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	6978      	ldr	r0, [r7, #20]
 800786c:	4798      	blx	r3
}
 800786e:	bf00      	nop
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000e30 	.word	0x20000e30

0800787c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007884:	f107 0308 	add.w	r3, r7, #8
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f857 	bl	800793c <prvGetNextExpireTime>
 800788e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4619      	mov	r1, r3
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f803 	bl	80078a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800789a:	f000 f8d5 	bl	8007a48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800789e:	e7f1      	b.n	8007884 <prvTimerTask+0x8>

080078a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078aa:	f7ff fa5b 	bl	8006d64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078ae:	f107 0308 	add.w	r3, r7, #8
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f866 	bl	8007984 <prvSampleTimeNow>
 80078b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d130      	bne.n	8007922 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <prvProcessTimerOrBlockTask+0x3c>
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d806      	bhi.n	80078dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078ce:	f7ff fa57 	bl	8006d80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff ff91 	bl	80077fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078da:	e024      	b.n	8007926 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d008      	beq.n	80078f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078e2:	4b13      	ldr	r3, [pc, #76]	; (8007930 <prvProcessTimerOrBlockTask+0x90>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <prvProcessTimerOrBlockTask+0x94>)
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	f7fe ffcf 	bl	80068a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007906:	f7ff fa3b 	bl	8006d80 <xTaskResumeAll>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007910:	4b09      	ldr	r3, [pc, #36]	; (8007938 <prvProcessTimerOrBlockTask+0x98>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
}
 8007920:	e001      	b.n	8007926 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007922:	f7ff fa2d 	bl	8006d80 <xTaskResumeAll>
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20000e34 	.word	0x20000e34
 8007934:	20000e38 	.word	0x20000e38
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007944:	4b0e      	ldr	r3, [pc, #56]	; (8007980 <prvGetNextExpireTime+0x44>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf0c      	ite	eq
 800794e:	2301      	moveq	r3, #1
 8007950:	2300      	movne	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	461a      	mov	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <prvGetNextExpireTime+0x44>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e001      	b.n	8007972 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	20000e30 	.word	0x20000e30

08007984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800798c:	f7ff fa94 	bl	8006eb8 <xTaskGetTickCount>
 8007990:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007992:	4b0b      	ldr	r3, [pc, #44]	; (80079c0 <prvSampleTimeNow+0x3c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	429a      	cmp	r2, r3
 800799a:	d205      	bcs.n	80079a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800799c:	f000 f904 	bl	8007ba8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e002      	b.n	80079ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079ae:	4a04      	ldr	r2, [pc, #16]	; (80079c0 <prvSampleTimeNow+0x3c>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000e40 	.word	0x20000e40

080079c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d812      	bhi.n	8007a10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	e01b      	b.n	8007a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80079fe:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <prvInsertTimerInActiveList+0x7c>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3304      	adds	r3, #4
 8007a06:	4619      	mov	r1, r3
 8007a08:	4610      	mov	r0, r2
 8007a0a:	f7fe fa0d 	bl	8005e28 <vListInsert>
 8007a0e:	e012      	b.n	8007a36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d206      	bcs.n	8007a26 <prvInsertTimerInActiveList+0x62>
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e007      	b.n	8007a36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a26:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <prvInsertTimerInActiveList+0x80>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4610      	mov	r0, r2
 8007a32:	f7fe f9f9 	bl	8005e28 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000e34 	.word	0x20000e34
 8007a44:	20000e30 	.word	0x20000e30

08007a48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b08e      	sub	sp, #56	; 0x38
 8007a4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a4e:	e099      	b.n	8007b84 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da17      	bge.n	8007a86 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	3304      	adds	r3, #4
 8007a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <prvProcessReceivedCommands+0x2e>
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e7fe      	b.n	8007a74 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7c:	6850      	ldr	r0, [r2, #4]
 8007a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a80:	6892      	ldr	r2, [r2, #8]
 8007a82:	4611      	mov	r1, r2
 8007a84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	db7a      	blt.n	8007b82 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe f9fb 	bl	8005e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aa2:	463b      	mov	r3, r7
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff ff6d 	bl	8007984 <prvSampleTimeNow>
 8007aaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	d868      	bhi.n	8007b84 <prvProcessReceivedCommands+0x13c>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <prvProcessReceivedCommands+0x70>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007ae1 	.word	0x08007ae1
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae1 	.word	0x08007ae1
 8007ac4:	08007b85 	.word	0x08007b85
 8007ac8:	08007b3b 	.word	0x08007b3b
 8007acc:	08007b71 	.word	0x08007b71
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007ae1 	.word	0x08007ae1
 8007ad8:	08007b85 	.word	0x08007b85
 8007adc:	08007b3b 	.word	0x08007b3b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	18d1      	adds	r1, r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aee:	f7ff ff69 	bl	80079c4 <prvInsertTimerInActiveList>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d045      	beq.n	8007b84 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b02:	69db      	ldr	r3, [r3, #28]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d13d      	bne.n	8007b84 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	441a      	add	r2, r3
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1a:	f7ff fe23 	bl	8007764 <xTimerGenericCommand>
 8007b1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d12e      	bne.n	8007b84 <prvProcessReceivedCommands+0x13c>
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	e7fe      	b.n	8007b38 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <prvProcessReceivedCommands+0x114>
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e7fe      	b.n	8007b5a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	18d1      	adds	r1, r2, r3
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6a:	f7ff ff2b 	bl	80079c4 <prvInsertTimerInActiveList>
					break;
 8007b6e:	e009      	b.n	8007b84 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b7c:	f000 fb54 	bl	8008228 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b80:	e000      	b.n	8007b84 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <prvProcessReceivedCommands+0x15c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	1d39      	adds	r1, r7, #4
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fc75 	bl	800647c <xQueueReceive>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f47f af5b 	bne.w	8007a50 <prvProcessReceivedCommands+0x8>
	}
}
 8007b9a:	bf00      	nop
 8007b9c:	3730      	adds	r7, #48	; 0x30
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000e38 	.word	0x20000e38

08007ba8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bae:	e044      	b.n	8007c3a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bb0:	4b2b      	ldr	r3, [pc, #172]	; (8007c60 <prvSwitchTimerLists+0xb8>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bba:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <prvSwitchTimerLists+0xb8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fe f965 	bl	8005e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d12d      	bne.n	8007c3a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4413      	add	r3, r2
 8007be6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d90e      	bls.n	8007c0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bfc:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <prvSwitchTimerLists+0xb8>)
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3304      	adds	r3, #4
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7fe f90e 	bl	8005e28 <vListInsert>
 8007c0c:	e015      	b.n	8007c3a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c0e:	2300      	movs	r3, #0
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	2100      	movs	r1, #0
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff fda3 	bl	8007764 <xTimerGenericCommand>
 8007c1e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <prvSwitchTimerLists+0x92>
 8007c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2a:	f383 8811 	msr	BASEPRI, r3
 8007c2e:	f3bf 8f6f 	isb	sy
 8007c32:	f3bf 8f4f 	dsb	sy
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	e7fe      	b.n	8007c38 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <prvSwitchTimerLists+0xb8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1b5      	bne.n	8007bb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <prvSwitchTimerLists+0xb8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c4a:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <prvSwitchTimerLists+0xbc>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a04      	ldr	r2, [pc, #16]	; (8007c60 <prvSwitchTimerLists+0xb8>)
 8007c50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c52:	4a04      	ldr	r2, [pc, #16]	; (8007c64 <prvSwitchTimerLists+0xbc>)
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	6013      	str	r3, [r2, #0]
}
 8007c58:	bf00      	nop
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000e30 	.word	0x20000e30
 8007c64:	20000e34 	.word	0x20000e34

08007c68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c6e:	f000 f923 	bl	8007eb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <prvCheckForValidListAndQueue+0x60>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d120      	bne.n	8007cbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c7a:	4814      	ldr	r0, [pc, #80]	; (8007ccc <prvCheckForValidListAndQueue+0x64>)
 8007c7c:	f7fe f886 	bl	8005d8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c80:	4813      	ldr	r0, [pc, #76]	; (8007cd0 <prvCheckForValidListAndQueue+0x68>)
 8007c82:	f7fe f883 	bl	8005d8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <prvCheckForValidListAndQueue+0x6c>)
 8007c88:	4a10      	ldr	r2, [pc, #64]	; (8007ccc <prvCheckForValidListAndQueue+0x64>)
 8007c8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c8c:	4b12      	ldr	r3, [pc, #72]	; (8007cd8 <prvCheckForValidListAndQueue+0x70>)
 8007c8e:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <prvCheckForValidListAndQueue+0x68>)
 8007c90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c92:	2300      	movs	r3, #0
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <prvCheckForValidListAndQueue+0x74>)
 8007c98:	4a11      	ldr	r2, [pc, #68]	; (8007ce0 <prvCheckForValidListAndQueue+0x78>)
 8007c9a:	2110      	movs	r1, #16
 8007c9c:	200a      	movs	r0, #10
 8007c9e:	f7fe f98d 	bl	8005fbc <xQueueGenericCreateStatic>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <prvCheckForValidListAndQueue+0x60>)
 8007ca6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ca8:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <prvCheckForValidListAndQueue+0x60>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007cb0:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <prvCheckForValidListAndQueue+0x60>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	490b      	ldr	r1, [pc, #44]	; (8007ce4 <prvCheckForValidListAndQueue+0x7c>)
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fdcc 	bl	8006854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cbc:	f000 f92a 	bl	8007f14 <vPortExitCritical>
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000e38 	.word	0x20000e38
 8007ccc:	20000e08 	.word	0x20000e08
 8007cd0:	20000e1c 	.word	0x20000e1c
 8007cd4:	20000e30 	.word	0x20000e30
 8007cd8:	20000e34 	.word	0x20000e34
 8007cdc:	20000ee4 	.word	0x20000ee4
 8007ce0:	20000e44 	.word	0x20000e44
 8007ce4:	0800af8c 	.word	0x0800af8c

08007ce8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3b04      	subs	r3, #4
 8007cf8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3b04      	subs	r3, #4
 8007d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 0201 	bic.w	r2, r3, #1
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d18:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <pxPortInitialiseStack+0x54>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3b14      	subs	r3, #20
 8007d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3b20      	subs	r3, #32
 8007d2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d30:	68fb      	ldr	r3, [r7, #12]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr
 8007d3c:	08007d41 	.word	0x08007d41

08007d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d4a:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <prvTaskExitError+0x4c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d52:	d009      	beq.n	8007d68 <prvTaskExitError+0x28>
 8007d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f3bf 8f6f 	isb	sy
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e7fe      	b.n	8007d66 <prvTaskExitError+0x26>
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d7a:	bf00      	nop
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0fc      	beq.n	8007d7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d82:	bf00      	nop
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr
 8007d8c:	20000018 	.word	0x20000018

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	f04e 0e0d 	orr.w	lr, lr, #13
 8007dae:	4770      	bx	lr

08007db0 <pxCurrentTCBConst2>:
 8007db0:	20000908 	.word	0x20000908
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007db8:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <prvPortStartFirstTask+0x1c>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	b662      	cpsie	i
 8007dc4:	b661      	cpsie	f
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	df00      	svc	0
 8007dd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dd2:	bf00      	nop
 8007dd4:	e000ed08 	.word	0xe000ed08

08007dd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <xPortStartScheduler+0xcc>)
 8007de0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	22ff      	movs	r2, #255	; 0xff
 8007dee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <xPortStartScheduler+0xd0>)
 8007e04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e06:	4b29      	ldr	r3, [pc, #164]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e08:	2207      	movs	r2, #7
 8007e0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e0c:	e009      	b.n	8007e22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e0e:	4b27      	ldr	r3, [pc, #156]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	005b      	lsls	r3, r3, #1
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	d0ef      	beq.n	8007e0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e2e:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f1c3 0307 	rsb	r3, r3, #7
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d009      	beq.n	8007e4e <xPortStartScheduler+0x76>
 8007e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60bb      	str	r3, [r7, #8]
 8007e4c:	e7fe      	b.n	8007e4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e4e:	4b17      	ldr	r3, [pc, #92]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	021b      	lsls	r3, r3, #8
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e58:	4b14      	ldr	r3, [pc, #80]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e60:	4a12      	ldr	r2, [pc, #72]	; (8007eac <xPortStartScheduler+0xd4>)
 8007e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e6c:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a0f      	ldr	r2, [pc, #60]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a0c      	ldr	r2, [pc, #48]	; (8007eb0 <xPortStartScheduler+0xd8>)
 8007e7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e84:	f000 f8b0 	bl	8007fe8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e88:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <xPortStartScheduler+0xdc>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e8e:	f7ff ff93 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e92:	f7ff f8dd 	bl	8007050 <vTaskSwitchContext>
	prvTaskExitError();
 8007e96:	f7ff ff53 	bl	8007d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	e000e400 	.word	0xe000e400
 8007ea8:	20000f34 	.word	0x20000f34
 8007eac:	20000f38 	.word	0x20000f38
 8007eb0:	e000ed20 	.word	0xe000ed20
 8007eb4:	20000018 	.word	0x20000018

08007eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ed0:	4b0e      	ldr	r3, [pc, #56]	; (8007f0c <vPortEnterCritical+0x54>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	4a0d      	ldr	r2, [pc, #52]	; (8007f0c <vPortEnterCritical+0x54>)
 8007ed8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007eda:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <vPortEnterCritical+0x54>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d10e      	bne.n	8007f00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <vPortEnterCritical+0x58>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <vPortEnterCritical+0x48>
 8007eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	603b      	str	r3, [r7, #0]
 8007efe:	e7fe      	b.n	8007efe <vPortEnterCritical+0x46>
	}
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000018 	.word	0x20000018
 8007f10:	e000ed04 	.word	0xe000ed04

08007f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f1a:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <vPortExitCritical+0x48>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <vPortExitCritical+0x22>
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	607b      	str	r3, [r7, #4]
 8007f34:	e7fe      	b.n	8007f34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <vPortExitCritical+0x48>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	4a07      	ldr	r2, [pc, #28]	; (8007f5c <vPortExitCritical+0x48>)
 8007f3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <vPortExitCritical+0x48>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <vPortExitCritical+0x3e>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr
 8007f5c:	20000018 	.word	0x20000018

08007f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f60:	f3ef 8009 	mrs	r0, PSP
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <pxCurrentTCBConst>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f70:	6010      	str	r0, [r2, #0]
 8007f72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f7a:	f380 8811 	msr	BASEPRI, r0
 8007f7e:	f7ff f867 	bl	8007050 <vTaskSwitchContext>
 8007f82:	f04f 0000 	mov.w	r0, #0
 8007f86:	f380 8811 	msr	BASEPRI, r0
 8007f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	6808      	ldr	r0, [r1, #0]
 8007f92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f96:	f380 8809 	msr	PSP, r0
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	4770      	bx	lr

08007fa0 <pxCurrentTCBConst>:
 8007fa0:	20000908 	.word	0x20000908
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fc0:	f7fe ff88 	bl	8006ed4 <xTaskIncrementTick>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fca:	4b06      	ldr	r3, [pc, #24]	; (8007fe4 <SysTick_Handler+0x3c>)
 8007fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	e000ed04 	.word	0xe000ed04

08007fe8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <vPortSetupTimerInterrupt+0x30>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <vPortSetupTimerInterrupt+0x34>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <vPortSetupTimerInterrupt+0x38>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a09      	ldr	r2, [pc, #36]	; (8008024 <vPortSetupTimerInterrupt+0x3c>)
 8007ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8008002:	099b      	lsrs	r3, r3, #6
 8008004:	4a08      	ldr	r2, [pc, #32]	; (8008028 <vPortSetupTimerInterrupt+0x40>)
 8008006:	3b01      	subs	r3, #1
 8008008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800800a:	4b03      	ldr	r3, [pc, #12]	; (8008018 <vPortSetupTimerInterrupt+0x30>)
 800800c:	2207      	movs	r2, #7
 800800e:	601a      	str	r2, [r3, #0]
}
 8008010:	bf00      	nop
 8008012:	46bd      	mov	sp, r7
 8008014:	bc80      	pop	{r7}
 8008016:	4770      	bx	lr
 8008018:	e000e010 	.word	0xe000e010
 800801c:	e000e018 	.word	0xe000e018
 8008020:	2000000c 	.word	0x2000000c
 8008024:	10624dd3 	.word	0x10624dd3
 8008028:	e000e014 	.word	0xe000e014

0800802c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008032:	f3ef 8305 	mrs	r3, IPSR
 8008036:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d913      	bls.n	8008066 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800803e:	4a15      	ldr	r2, [pc, #84]	; (8008094 <vPortValidateInterruptPriority+0x68>)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008048:	4b13      	ldr	r3, [pc, #76]	; (8008098 <vPortValidateInterruptPriority+0x6c>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	7afa      	ldrb	r2, [r7, #11]
 800804e:	429a      	cmp	r2, r3
 8008050:	d209      	bcs.n	8008066 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
 8008064:	e7fe      	b.n	8008064 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008066:	4b0d      	ldr	r3, [pc, #52]	; (800809c <vPortValidateInterruptPriority+0x70>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <vPortValidateInterruptPriority+0x74>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d909      	bls.n	800808a <vPortValidateInterruptPriority+0x5e>
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	e7fe      	b.n	8008088 <vPortValidateInterruptPriority+0x5c>
	}
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	e000e3f0 	.word	0xe000e3f0
 8008098:	20000f34 	.word	0x20000f34
 800809c:	e000ed0c 	.word	0xe000ed0c
 80080a0:	20000f38 	.word	0x20000f38

080080a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08a      	sub	sp, #40	; 0x28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080b0:	f7fe fe58 	bl	8006d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080b4:	4b57      	ldr	r3, [pc, #348]	; (8008214 <pvPortMalloc+0x170>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080bc:	f000 f90c 	bl	80082d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080c0:	4b55      	ldr	r3, [pc, #340]	; (8008218 <pvPortMalloc+0x174>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4013      	ands	r3, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 808c 	bne.w	80081e6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01c      	beq.n	800810e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80080d4:	2208      	movs	r2, #8
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4413      	add	r3, r2
 80080da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f023 0307 	bic.w	r3, r3, #7
 80080ec:	3308      	adds	r3, #8
 80080ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d009      	beq.n	800810e <pvPortMalloc+0x6a>
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	e7fe      	b.n	800810c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d068      	beq.n	80081e6 <pvPortMalloc+0x142>
 8008114:	4b41      	ldr	r3, [pc, #260]	; (800821c <pvPortMalloc+0x178>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	429a      	cmp	r2, r3
 800811c:	d863      	bhi.n	80081e6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800811e:	4b40      	ldr	r3, [pc, #256]	; (8008220 <pvPortMalloc+0x17c>)
 8008120:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008122:	4b3f      	ldr	r3, [pc, #252]	; (8008220 <pvPortMalloc+0x17c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008128:	e004      	b.n	8008134 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	429a      	cmp	r2, r3
 800813c:	d903      	bls.n	8008146 <pvPortMalloc+0xa2>
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f1      	bne.n	800812a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008146:	4b33      	ldr	r3, [pc, #204]	; (8008214 <pvPortMalloc+0x170>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814c:	429a      	cmp	r2, r3
 800814e:	d04a      	beq.n	80081e6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2208      	movs	r2, #8
 8008156:	4413      	add	r3, r2
 8008158:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	2308      	movs	r3, #8
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	429a      	cmp	r2, r3
 8008170:	d91e      	bls.n	80081b0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4413      	add	r3, r2
 8008178:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	2b00      	cmp	r3, #0
 8008182:	d009      	beq.n	8008198 <pvPortMalloc+0xf4>
 8008184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008188:	f383 8811 	msr	BASEPRI, r3
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	613b      	str	r3, [r7, #16]
 8008196:	e7fe      	b.n	8008196 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	1ad2      	subs	r2, r2, r3
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081aa:	69b8      	ldr	r0, [r7, #24]
 80081ac:	f000 f8f6 	bl	800839c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081b0:	4b1a      	ldr	r3, [pc, #104]	; (800821c <pvPortMalloc+0x178>)
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	4a18      	ldr	r2, [pc, #96]	; (800821c <pvPortMalloc+0x178>)
 80081bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081be:	4b17      	ldr	r3, [pc, #92]	; (800821c <pvPortMalloc+0x178>)
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	4b18      	ldr	r3, [pc, #96]	; (8008224 <pvPortMalloc+0x180>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d203      	bcs.n	80081d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <pvPortMalloc+0x178>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a15      	ldr	r2, [pc, #84]	; (8008224 <pvPortMalloc+0x180>)
 80081d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	685a      	ldr	r2, [r3, #4]
 80081d6:	4b10      	ldr	r3, [pc, #64]	; (8008218 <pvPortMalloc+0x174>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	431a      	orrs	r2, r3
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	2200      	movs	r2, #0
 80081e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081e6:	f7fe fdcb 	bl	8006d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <pvPortMalloc+0x164>
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	60fb      	str	r3, [r7, #12]
 8008206:	e7fe      	b.n	8008206 <pvPortMalloc+0x162>
	return pvReturn;
 8008208:	69fb      	ldr	r3, [r7, #28]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3728      	adds	r7, #40	; 0x28
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20001b44 	.word	0x20001b44
 8008218:	20001b50 	.word	0x20001b50
 800821c:	20001b48 	.word	0x20001b48
 8008220:	20001b3c 	.word	0x20001b3c
 8008224:	20001b4c 	.word	0x20001b4c

08008228 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d046      	beq.n	80082c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800823a:	2308      	movs	r3, #8
 800823c:	425b      	negs	r3, r3
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4413      	add	r3, r2
 8008242:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	4b20      	ldr	r3, [pc, #128]	; (80082d0 <vPortFree+0xa8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4013      	ands	r3, r2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <vPortFree+0x42>
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	e7fe      	b.n	8008268 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <vPortFree+0x5e>
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	e7fe      	b.n	8008284 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	4b11      	ldr	r3, [pc, #68]	; (80082d0 <vPortFree+0xa8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4013      	ands	r3, r2
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d115      	bne.n	80082c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	685a      	ldr	r2, [r3, #4]
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <vPortFree+0xa8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	401a      	ands	r2, r3
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082ac:	f7fe fd5a 	bl	8006d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <vPortFree+0xac>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4413      	add	r3, r2
 80082ba:	4a06      	ldr	r2, [pc, #24]	; (80082d4 <vPortFree+0xac>)
 80082bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f000 f86c 	bl	800839c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082c4:	f7fe fd5c 	bl	8006d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082c8:	bf00      	nop
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20001b50 	.word	0x20001b50
 80082d4:	20001b48 	.word	0x20001b48

080082d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80082e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082e4:	4b27      	ldr	r3, [pc, #156]	; (8008384 <prvHeapInit+0xac>)
 80082e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00c      	beq.n	800830c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3307      	adds	r3, #7
 80082f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f023 0307 	bic.w	r3, r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <prvHeapInit+0xac>)
 8008308:	4413      	add	r3, r2
 800830a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008310:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <prvHeapInit+0xb0>)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <prvHeapInit+0xb0>)
 8008318:	2200      	movs	r2, #0
 800831a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008324:	2208      	movs	r2, #8
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0307 	bic.w	r3, r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4a15      	ldr	r2, [pc, #84]	; (800838c <prvHeapInit+0xb4>)
 8008338:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800833a:	4b14      	ldr	r3, [pc, #80]	; (800838c <prvHeapInit+0xb4>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2200      	movs	r2, #0
 8008340:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008342:	4b12      	ldr	r3, [pc, #72]	; (800838c <prvHeapInit+0xb4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	1ad2      	subs	r2, r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008358:	4b0c      	ldr	r3, [pc, #48]	; (800838c <prvHeapInit+0xb4>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4a0a      	ldr	r2, [pc, #40]	; (8008390 <prvHeapInit+0xb8>)
 8008366:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	4a09      	ldr	r2, [pc, #36]	; (8008394 <prvHeapInit+0xbc>)
 800836e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008370:	4b09      	ldr	r3, [pc, #36]	; (8008398 <prvHeapInit+0xc0>)
 8008372:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008376:	601a      	str	r2, [r3, #0]
}
 8008378:	bf00      	nop
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	20000f3c 	.word	0x20000f3c
 8008388:	20001b3c 	.word	0x20001b3c
 800838c:	20001b44 	.word	0x20001b44
 8008390:	20001b4c 	.word	0x20001b4c
 8008394:	20001b48 	.word	0x20001b48
 8008398:	20001b50 	.word	0x20001b50

0800839c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083a4:	4b27      	ldr	r3, [pc, #156]	; (8008444 <prvInsertBlockIntoFreeList+0xa8>)
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	e002      	b.n	80083b0 <prvInsertBlockIntoFreeList+0x14>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d8f7      	bhi.n	80083aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	4413      	add	r3, r2
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d108      	bne.n	80083de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	441a      	add	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	441a      	add	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d118      	bne.n	8008424 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <prvInsertBlockIntoFreeList+0xac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d00d      	beq.n	800841a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	441a      	add	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	e008      	b.n	800842c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <prvInsertBlockIntoFreeList+0xac>)
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e003      	b.n	800842c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d002      	beq.n	800843a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800843a:	bf00      	nop
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	20001b3c 	.word	0x20001b3c
 8008448:	20001b44 	.word	0x20001b44

0800844c <__errno>:
 800844c:	4b01      	ldr	r3, [pc, #4]	; (8008454 <__errno+0x8>)
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000001c 	.word	0x2000001c

08008458 <__libc_init_array>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	2500      	movs	r5, #0
 800845c:	4e0c      	ldr	r6, [pc, #48]	; (8008490 <__libc_init_array+0x38>)
 800845e:	4c0d      	ldr	r4, [pc, #52]	; (8008494 <__libc_init_array+0x3c>)
 8008460:	1ba4      	subs	r4, r4, r6
 8008462:	10a4      	asrs	r4, r4, #2
 8008464:	42a5      	cmp	r5, r4
 8008466:	d109      	bne.n	800847c <__libc_init_array+0x24>
 8008468:	f002 fd08 	bl	800ae7c <_init>
 800846c:	2500      	movs	r5, #0
 800846e:	4e0a      	ldr	r6, [pc, #40]	; (8008498 <__libc_init_array+0x40>)
 8008470:	4c0a      	ldr	r4, [pc, #40]	; (800849c <__libc_init_array+0x44>)
 8008472:	1ba4      	subs	r4, r4, r6
 8008474:	10a4      	asrs	r4, r4, #2
 8008476:	42a5      	cmp	r5, r4
 8008478:	d105      	bne.n	8008486 <__libc_init_array+0x2e>
 800847a:	bd70      	pop	{r4, r5, r6, pc}
 800847c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008480:	4798      	blx	r3
 8008482:	3501      	adds	r5, #1
 8008484:	e7ee      	b.n	8008464 <__libc_init_array+0xc>
 8008486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800848a:	4798      	blx	r3
 800848c:	3501      	adds	r5, #1
 800848e:	e7f2      	b.n	8008476 <__libc_init_array+0x1e>
 8008490:	0800b2f8 	.word	0x0800b2f8
 8008494:	0800b2f8 	.word	0x0800b2f8
 8008498:	0800b2f8 	.word	0x0800b2f8
 800849c:	0800b2fc 	.word	0x0800b2fc

080084a0 <malloc>:
 80084a0:	4b02      	ldr	r3, [pc, #8]	; (80084ac <malloc+0xc>)
 80084a2:	4601      	mov	r1, r0
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f000 b86b 	b.w	8008580 <_malloc_r>
 80084aa:	bf00      	nop
 80084ac:	2000001c 	.word	0x2000001c

080084b0 <free>:
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <free+0xc>)
 80084b2:	4601      	mov	r1, r0
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	f000 b817 	b.w	80084e8 <_free_r>
 80084ba:	bf00      	nop
 80084bc:	2000001c 	.word	0x2000001c

080084c0 <memcpy>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	1e43      	subs	r3, r0, #1
 80084c4:	440a      	add	r2, r1
 80084c6:	4291      	cmp	r1, r2
 80084c8:	d100      	bne.n	80084cc <memcpy+0xc>
 80084ca:	bd10      	pop	{r4, pc}
 80084cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084d4:	e7f7      	b.n	80084c6 <memcpy+0x6>

080084d6 <memset>:
 80084d6:	4603      	mov	r3, r0
 80084d8:	4402      	add	r2, r0
 80084da:	4293      	cmp	r3, r2
 80084dc:	d100      	bne.n	80084e0 <memset+0xa>
 80084de:	4770      	bx	lr
 80084e0:	f803 1b01 	strb.w	r1, [r3], #1
 80084e4:	e7f9      	b.n	80084da <memset+0x4>
	...

080084e8 <_free_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	2900      	cmp	r1, #0
 80084ee:	d043      	beq.n	8008578 <_free_r+0x90>
 80084f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084f4:	1f0c      	subs	r4, r1, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bfb8      	it	lt
 80084fa:	18e4      	addlt	r4, r4, r3
 80084fc:	f001 fe2e 	bl	800a15c <__malloc_lock>
 8008500:	4a1e      	ldr	r2, [pc, #120]	; (800857c <_free_r+0x94>)
 8008502:	6813      	ldr	r3, [r2, #0]
 8008504:	4610      	mov	r0, r2
 8008506:	b933      	cbnz	r3, 8008516 <_free_r+0x2e>
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	6014      	str	r4, [r2, #0]
 800850c:	4628      	mov	r0, r5
 800850e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008512:	f001 be24 	b.w	800a15e <__malloc_unlock>
 8008516:	42a3      	cmp	r3, r4
 8008518:	d90b      	bls.n	8008532 <_free_r+0x4a>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	1862      	adds	r2, r4, r1
 800851e:	4293      	cmp	r3, r2
 8008520:	bf01      	itttt	eq
 8008522:	681a      	ldreq	r2, [r3, #0]
 8008524:	685b      	ldreq	r3, [r3, #4]
 8008526:	1852      	addeq	r2, r2, r1
 8008528:	6022      	streq	r2, [r4, #0]
 800852a:	6063      	str	r3, [r4, #4]
 800852c:	6004      	str	r4, [r0, #0]
 800852e:	e7ed      	b.n	800850c <_free_r+0x24>
 8008530:	4613      	mov	r3, r2
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	b10a      	cbz	r2, 800853a <_free_r+0x52>
 8008536:	42a2      	cmp	r2, r4
 8008538:	d9fa      	bls.n	8008530 <_free_r+0x48>
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	1858      	adds	r0, r3, r1
 800853e:	42a0      	cmp	r0, r4
 8008540:	d10b      	bne.n	800855a <_free_r+0x72>
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	4401      	add	r1, r0
 8008546:	1858      	adds	r0, r3, r1
 8008548:	4282      	cmp	r2, r0
 800854a:	6019      	str	r1, [r3, #0]
 800854c:	d1de      	bne.n	800850c <_free_r+0x24>
 800854e:	6810      	ldr	r0, [r2, #0]
 8008550:	6852      	ldr	r2, [r2, #4]
 8008552:	4401      	add	r1, r0
 8008554:	6019      	str	r1, [r3, #0]
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	e7d8      	b.n	800850c <_free_r+0x24>
 800855a:	d902      	bls.n	8008562 <_free_r+0x7a>
 800855c:	230c      	movs	r3, #12
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	e7d4      	b.n	800850c <_free_r+0x24>
 8008562:	6820      	ldr	r0, [r4, #0]
 8008564:	1821      	adds	r1, r4, r0
 8008566:	428a      	cmp	r2, r1
 8008568:	bf01      	itttt	eq
 800856a:	6811      	ldreq	r1, [r2, #0]
 800856c:	6852      	ldreq	r2, [r2, #4]
 800856e:	1809      	addeq	r1, r1, r0
 8008570:	6021      	streq	r1, [r4, #0]
 8008572:	6062      	str	r2, [r4, #4]
 8008574:	605c      	str	r4, [r3, #4]
 8008576:	e7c9      	b.n	800850c <_free_r+0x24>
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	20001b54 	.word	0x20001b54

08008580 <_malloc_r>:
 8008580:	b570      	push	{r4, r5, r6, lr}
 8008582:	1ccd      	adds	r5, r1, #3
 8008584:	f025 0503 	bic.w	r5, r5, #3
 8008588:	3508      	adds	r5, #8
 800858a:	2d0c      	cmp	r5, #12
 800858c:	bf38      	it	cc
 800858e:	250c      	movcc	r5, #12
 8008590:	2d00      	cmp	r5, #0
 8008592:	4606      	mov	r6, r0
 8008594:	db01      	blt.n	800859a <_malloc_r+0x1a>
 8008596:	42a9      	cmp	r1, r5
 8008598:	d903      	bls.n	80085a2 <_malloc_r+0x22>
 800859a:	230c      	movs	r3, #12
 800859c:	6033      	str	r3, [r6, #0]
 800859e:	2000      	movs	r0, #0
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
 80085a2:	f001 fddb 	bl	800a15c <__malloc_lock>
 80085a6:	4a21      	ldr	r2, [pc, #132]	; (800862c <_malloc_r+0xac>)
 80085a8:	6814      	ldr	r4, [r2, #0]
 80085aa:	4621      	mov	r1, r4
 80085ac:	b991      	cbnz	r1, 80085d4 <_malloc_r+0x54>
 80085ae:	4c20      	ldr	r4, [pc, #128]	; (8008630 <_malloc_r+0xb0>)
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	b91b      	cbnz	r3, 80085bc <_malloc_r+0x3c>
 80085b4:	4630      	mov	r0, r6
 80085b6:	f000 fca5 	bl	8008f04 <_sbrk_r>
 80085ba:	6020      	str	r0, [r4, #0]
 80085bc:	4629      	mov	r1, r5
 80085be:	4630      	mov	r0, r6
 80085c0:	f000 fca0 	bl	8008f04 <_sbrk_r>
 80085c4:	1c43      	adds	r3, r0, #1
 80085c6:	d124      	bne.n	8008612 <_malloc_r+0x92>
 80085c8:	230c      	movs	r3, #12
 80085ca:	4630      	mov	r0, r6
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	f001 fdc6 	bl	800a15e <__malloc_unlock>
 80085d2:	e7e4      	b.n	800859e <_malloc_r+0x1e>
 80085d4:	680b      	ldr	r3, [r1, #0]
 80085d6:	1b5b      	subs	r3, r3, r5
 80085d8:	d418      	bmi.n	800860c <_malloc_r+0x8c>
 80085da:	2b0b      	cmp	r3, #11
 80085dc:	d90f      	bls.n	80085fe <_malloc_r+0x7e>
 80085de:	600b      	str	r3, [r1, #0]
 80085e0:	18cc      	adds	r4, r1, r3
 80085e2:	50cd      	str	r5, [r1, r3]
 80085e4:	4630      	mov	r0, r6
 80085e6:	f001 fdba 	bl	800a15e <__malloc_unlock>
 80085ea:	f104 000b 	add.w	r0, r4, #11
 80085ee:	1d23      	adds	r3, r4, #4
 80085f0:	f020 0007 	bic.w	r0, r0, #7
 80085f4:	1ac3      	subs	r3, r0, r3
 80085f6:	d0d3      	beq.n	80085a0 <_malloc_r+0x20>
 80085f8:	425a      	negs	r2, r3
 80085fa:	50e2      	str	r2, [r4, r3]
 80085fc:	e7d0      	b.n	80085a0 <_malloc_r+0x20>
 80085fe:	684b      	ldr	r3, [r1, #4]
 8008600:	428c      	cmp	r4, r1
 8008602:	bf16      	itet	ne
 8008604:	6063      	strne	r3, [r4, #4]
 8008606:	6013      	streq	r3, [r2, #0]
 8008608:	460c      	movne	r4, r1
 800860a:	e7eb      	b.n	80085e4 <_malloc_r+0x64>
 800860c:	460c      	mov	r4, r1
 800860e:	6849      	ldr	r1, [r1, #4]
 8008610:	e7cc      	b.n	80085ac <_malloc_r+0x2c>
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d005      	beq.n	8008628 <_malloc_r+0xa8>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4630      	mov	r0, r6
 8008620:	f000 fc70 	bl	8008f04 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d0cf      	beq.n	80085c8 <_malloc_r+0x48>
 8008628:	6025      	str	r5, [r4, #0]
 800862a:	e7db      	b.n	80085e4 <_malloc_r+0x64>
 800862c:	20001b54 	.word	0x20001b54
 8008630:	20001b58 	.word	0x20001b58

08008634 <__cvt>:
 8008634:	2b00      	cmp	r3, #0
 8008636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863a:	461e      	mov	r6, r3
 800863c:	bfbb      	ittet	lt
 800863e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008642:	461e      	movlt	r6, r3
 8008644:	2300      	movge	r3, #0
 8008646:	232d      	movlt	r3, #45	; 0x2d
 8008648:	b088      	sub	sp, #32
 800864a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800864c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008650:	f027 0720 	bic.w	r7, r7, #32
 8008654:	2f46      	cmp	r7, #70	; 0x46
 8008656:	4614      	mov	r4, r2
 8008658:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800865a:	700b      	strb	r3, [r1, #0]
 800865c:	d004      	beq.n	8008668 <__cvt+0x34>
 800865e:	2f45      	cmp	r7, #69	; 0x45
 8008660:	d100      	bne.n	8008664 <__cvt+0x30>
 8008662:	3501      	adds	r5, #1
 8008664:	2302      	movs	r3, #2
 8008666:	e000      	b.n	800866a <__cvt+0x36>
 8008668:	2303      	movs	r3, #3
 800866a:	aa07      	add	r2, sp, #28
 800866c:	9204      	str	r2, [sp, #16]
 800866e:	aa06      	add	r2, sp, #24
 8008670:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008674:	e9cd 3500 	strd	r3, r5, [sp]
 8008678:	4622      	mov	r2, r4
 800867a:	4633      	mov	r3, r6
 800867c:	f000 fdc0 	bl	8009200 <_dtoa_r>
 8008680:	2f47      	cmp	r7, #71	; 0x47
 8008682:	4680      	mov	r8, r0
 8008684:	d102      	bne.n	800868c <__cvt+0x58>
 8008686:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008688:	07db      	lsls	r3, r3, #31
 800868a:	d526      	bpl.n	80086da <__cvt+0xa6>
 800868c:	2f46      	cmp	r7, #70	; 0x46
 800868e:	eb08 0905 	add.w	r9, r8, r5
 8008692:	d111      	bne.n	80086b8 <__cvt+0x84>
 8008694:	f898 3000 	ldrb.w	r3, [r8]
 8008698:	2b30      	cmp	r3, #48	; 0x30
 800869a:	d10a      	bne.n	80086b2 <__cvt+0x7e>
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	4620      	mov	r0, r4
 80086a2:	4631      	mov	r1, r6
 80086a4:	f7f8 f980 	bl	80009a8 <__aeabi_dcmpeq>
 80086a8:	b918      	cbnz	r0, 80086b2 <__cvt+0x7e>
 80086aa:	f1c5 0501 	rsb	r5, r5, #1
 80086ae:	f8ca 5000 	str.w	r5, [sl]
 80086b2:	f8da 3000 	ldr.w	r3, [sl]
 80086b6:	4499      	add	r9, r3
 80086b8:	2200      	movs	r2, #0
 80086ba:	2300      	movs	r3, #0
 80086bc:	4620      	mov	r0, r4
 80086be:	4631      	mov	r1, r6
 80086c0:	f7f8 f972 	bl	80009a8 <__aeabi_dcmpeq>
 80086c4:	b938      	cbnz	r0, 80086d6 <__cvt+0xa2>
 80086c6:	2230      	movs	r2, #48	; 0x30
 80086c8:	9b07      	ldr	r3, [sp, #28]
 80086ca:	454b      	cmp	r3, r9
 80086cc:	d205      	bcs.n	80086da <__cvt+0xa6>
 80086ce:	1c59      	adds	r1, r3, #1
 80086d0:	9107      	str	r1, [sp, #28]
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e7f8      	b.n	80086c8 <__cvt+0x94>
 80086d6:	f8cd 901c 	str.w	r9, [sp, #28]
 80086da:	4640      	mov	r0, r8
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086e0:	eba3 0308 	sub.w	r3, r3, r8
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	b008      	add	sp, #32
 80086e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080086ec <__exponent>:
 80086ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086ee:	2900      	cmp	r1, #0
 80086f0:	bfb4      	ite	lt
 80086f2:	232d      	movlt	r3, #45	; 0x2d
 80086f4:	232b      	movge	r3, #43	; 0x2b
 80086f6:	4604      	mov	r4, r0
 80086f8:	bfb8      	it	lt
 80086fa:	4249      	neglt	r1, r1
 80086fc:	2909      	cmp	r1, #9
 80086fe:	f804 2b02 	strb.w	r2, [r4], #2
 8008702:	7043      	strb	r3, [r0, #1]
 8008704:	dd21      	ble.n	800874a <__exponent+0x5e>
 8008706:	f10d 0307 	add.w	r3, sp, #7
 800870a:	461f      	mov	r7, r3
 800870c:	260a      	movs	r6, #10
 800870e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008712:	fb06 1115 	mls	r1, r6, r5, r1
 8008716:	2d09      	cmp	r5, #9
 8008718:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800871c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008720:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008724:	4629      	mov	r1, r5
 8008726:	dc09      	bgt.n	800873c <__exponent+0x50>
 8008728:	3130      	adds	r1, #48	; 0x30
 800872a:	3b02      	subs	r3, #2
 800872c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008730:	42bb      	cmp	r3, r7
 8008732:	4622      	mov	r2, r4
 8008734:	d304      	bcc.n	8008740 <__exponent+0x54>
 8008736:	1a10      	subs	r0, r2, r0
 8008738:	b003      	add	sp, #12
 800873a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800873c:	4613      	mov	r3, r2
 800873e:	e7e6      	b.n	800870e <__exponent+0x22>
 8008740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008744:	f804 2b01 	strb.w	r2, [r4], #1
 8008748:	e7f2      	b.n	8008730 <__exponent+0x44>
 800874a:	2330      	movs	r3, #48	; 0x30
 800874c:	4419      	add	r1, r3
 800874e:	7083      	strb	r3, [r0, #2]
 8008750:	1d02      	adds	r2, r0, #4
 8008752:	70c1      	strb	r1, [r0, #3]
 8008754:	e7ef      	b.n	8008736 <__exponent+0x4a>
	...

08008758 <_printf_float>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	b091      	sub	sp, #68	; 0x44
 800875e:	460c      	mov	r4, r1
 8008760:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8008762:	4693      	mov	fp, r2
 8008764:	461e      	mov	r6, r3
 8008766:	4605      	mov	r5, r0
 8008768:	f001 fc78 	bl	800a05c <_localeconv_r>
 800876c:	6803      	ldr	r3, [r0, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	9309      	str	r3, [sp, #36]	; 0x24
 8008772:	f7f7 fced 	bl	8000150 <strlen>
 8008776:	2300      	movs	r3, #0
 8008778:	930e      	str	r3, [sp, #56]	; 0x38
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	900a      	str	r0, [sp, #40]	; 0x28
 800877e:	3307      	adds	r3, #7
 8008780:	f023 0307 	bic.w	r3, r3, #7
 8008784:	f103 0208 	add.w	r2, r3, #8
 8008788:	f894 8018 	ldrb.w	r8, [r4, #24]
 800878c:	f8d4 a000 	ldr.w	sl, [r4]
 8008790:	603a      	str	r2, [r7, #0]
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800879a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800879e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80087a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a8:	4ba6      	ldr	r3, [pc, #664]	; (8008a44 <_printf_float+0x2ec>)
 80087aa:	4638      	mov	r0, r7
 80087ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ae:	f7f8 f92d 	bl	8000a0c <__aeabi_dcmpun>
 80087b2:	bb68      	cbnz	r0, 8008810 <_printf_float+0xb8>
 80087b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087b8:	4ba2      	ldr	r3, [pc, #648]	; (8008a44 <_printf_float+0x2ec>)
 80087ba:	4638      	mov	r0, r7
 80087bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087be:	f7f8 f907 	bl	80009d0 <__aeabi_dcmple>
 80087c2:	bb28      	cbnz	r0, 8008810 <_printf_float+0xb8>
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	4638      	mov	r0, r7
 80087ca:	4649      	mov	r1, r9
 80087cc:	f7f8 f8f6 	bl	80009bc <__aeabi_dcmplt>
 80087d0:	b110      	cbz	r0, 80087d8 <_printf_float+0x80>
 80087d2:	232d      	movs	r3, #45	; 0x2d
 80087d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d8:	4f9b      	ldr	r7, [pc, #620]	; (8008a48 <_printf_float+0x2f0>)
 80087da:	4b9c      	ldr	r3, [pc, #624]	; (8008a4c <_printf_float+0x2f4>)
 80087dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087e0:	bf98      	it	ls
 80087e2:	461f      	movls	r7, r3
 80087e4:	2303      	movs	r3, #3
 80087e6:	f04f 0900 	mov.w	r9, #0
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	f02a 0304 	bic.w	r3, sl, #4
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	9600      	str	r6, [sp, #0]
 80087f4:	465b      	mov	r3, fp
 80087f6:	aa0f      	add	r2, sp, #60	; 0x3c
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f9e2 	bl	8008bc4 <_printf_common>
 8008800:	3001      	adds	r0, #1
 8008802:	f040 8090 	bne.w	8008926 <_printf_float+0x1ce>
 8008806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800880a:	b011      	add	sp, #68	; 0x44
 800880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008810:	463a      	mov	r2, r7
 8008812:	464b      	mov	r3, r9
 8008814:	4638      	mov	r0, r7
 8008816:	4649      	mov	r1, r9
 8008818:	f7f8 f8f8 	bl	8000a0c <__aeabi_dcmpun>
 800881c:	b110      	cbz	r0, 8008824 <_printf_float+0xcc>
 800881e:	4f8c      	ldr	r7, [pc, #560]	; (8008a50 <_printf_float+0x2f8>)
 8008820:	4b8c      	ldr	r3, [pc, #560]	; (8008a54 <_printf_float+0x2fc>)
 8008822:	e7db      	b.n	80087dc <_printf_float+0x84>
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	a80d      	add	r0, sp, #52	; 0x34
 800882e:	a90e      	add	r1, sp, #56	; 0x38
 8008830:	d140      	bne.n	80088b4 <_printf_float+0x15c>
 8008832:	2306      	movs	r3, #6
 8008834:	6063      	str	r3, [r4, #4]
 8008836:	f04f 0c00 	mov.w	ip, #0
 800883a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800883e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008842:	6863      	ldr	r3, [r4, #4]
 8008844:	6022      	str	r2, [r4, #0]
 8008846:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	463a      	mov	r2, r7
 800884e:	464b      	mov	r3, r9
 8008850:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008854:	4628      	mov	r0, r5
 8008856:	f7ff feed 	bl	8008634 <__cvt>
 800885a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800885e:	2b47      	cmp	r3, #71	; 0x47
 8008860:	4607      	mov	r7, r0
 8008862:	d109      	bne.n	8008878 <_printf_float+0x120>
 8008864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008866:	1cd8      	adds	r0, r3, #3
 8008868:	db02      	blt.n	8008870 <_printf_float+0x118>
 800886a:	6862      	ldr	r2, [r4, #4]
 800886c:	4293      	cmp	r3, r2
 800886e:	dd47      	ble.n	8008900 <_printf_float+0x1a8>
 8008870:	f1a8 0802 	sub.w	r8, r8, #2
 8008874:	fa5f f888 	uxtb.w	r8, r8
 8008878:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800887c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800887e:	d824      	bhi.n	80088ca <_printf_float+0x172>
 8008880:	3901      	subs	r1, #1
 8008882:	4642      	mov	r2, r8
 8008884:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008888:	910d      	str	r1, [sp, #52]	; 0x34
 800888a:	f7ff ff2f 	bl	80086ec <__exponent>
 800888e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008890:	4681      	mov	r9, r0
 8008892:	1813      	adds	r3, r2, r0
 8008894:	2a01      	cmp	r2, #1
 8008896:	6123      	str	r3, [r4, #16]
 8008898:	dc02      	bgt.n	80088a0 <_printf_float+0x148>
 800889a:	6822      	ldr	r2, [r4, #0]
 800889c:	07d1      	lsls	r1, r2, #31
 800889e:	d501      	bpl.n	80088a4 <_printf_float+0x14c>
 80088a0:	3301      	adds	r3, #1
 80088a2:	6123      	str	r3, [r4, #16]
 80088a4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d0a2      	beq.n	80087f2 <_printf_float+0x9a>
 80088ac:	232d      	movs	r3, #45	; 0x2d
 80088ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b2:	e79e      	b.n	80087f2 <_printf_float+0x9a>
 80088b4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80088b8:	f000 816e 	beq.w	8008b98 <_printf_float+0x440>
 80088bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088c0:	d1b9      	bne.n	8008836 <_printf_float+0xde>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1b7      	bne.n	8008836 <_printf_float+0xde>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e7b4      	b.n	8008834 <_printf_float+0xdc>
 80088ca:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80088ce:	d119      	bne.n	8008904 <_printf_float+0x1ac>
 80088d0:	2900      	cmp	r1, #0
 80088d2:	6863      	ldr	r3, [r4, #4]
 80088d4:	dd0c      	ble.n	80088f0 <_printf_float+0x198>
 80088d6:	6121      	str	r1, [r4, #16]
 80088d8:	b913      	cbnz	r3, 80088e0 <_printf_float+0x188>
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	07d2      	lsls	r2, r2, #31
 80088de:	d502      	bpl.n	80088e6 <_printf_float+0x18e>
 80088e0:	3301      	adds	r3, #1
 80088e2:	440b      	add	r3, r1
 80088e4:	6123      	str	r3, [r4, #16]
 80088e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e8:	f04f 0900 	mov.w	r9, #0
 80088ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80088ee:	e7d9      	b.n	80088a4 <_printf_float+0x14c>
 80088f0:	b913      	cbnz	r3, 80088f8 <_printf_float+0x1a0>
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	07d0      	lsls	r0, r2, #31
 80088f6:	d501      	bpl.n	80088fc <_printf_float+0x1a4>
 80088f8:	3302      	adds	r3, #2
 80088fa:	e7f3      	b.n	80088e4 <_printf_float+0x18c>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e7f1      	b.n	80088e4 <_printf_float+0x18c>
 8008900:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008904:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008908:	4293      	cmp	r3, r2
 800890a:	db05      	blt.n	8008918 <_printf_float+0x1c0>
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	6123      	str	r3, [r4, #16]
 8008910:	07d1      	lsls	r1, r2, #31
 8008912:	d5e8      	bpl.n	80088e6 <_printf_float+0x18e>
 8008914:	3301      	adds	r3, #1
 8008916:	e7e5      	b.n	80088e4 <_printf_float+0x18c>
 8008918:	2b00      	cmp	r3, #0
 800891a:	bfcc      	ite	gt
 800891c:	2301      	movgt	r3, #1
 800891e:	f1c3 0302 	rsble	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	e7de      	b.n	80088e4 <_printf_float+0x18c>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	055a      	lsls	r2, r3, #21
 800892a:	d407      	bmi.n	800893c <_printf_float+0x1e4>
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	463a      	mov	r2, r7
 8008930:	4659      	mov	r1, fp
 8008932:	4628      	mov	r0, r5
 8008934:	47b0      	blx	r6
 8008936:	3001      	adds	r0, #1
 8008938:	d129      	bne.n	800898e <_printf_float+0x236>
 800893a:	e764      	b.n	8008806 <_printf_float+0xae>
 800893c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008940:	f240 80d7 	bls.w	8008af2 <_printf_float+0x39a>
 8008944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008948:	2200      	movs	r2, #0
 800894a:	2300      	movs	r3, #0
 800894c:	f7f8 f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8008950:	b388      	cbz	r0, 80089b6 <_printf_float+0x25e>
 8008952:	2301      	movs	r3, #1
 8008954:	4a40      	ldr	r2, [pc, #256]	; (8008a58 <_printf_float+0x300>)
 8008956:	4659      	mov	r1, fp
 8008958:	4628      	mov	r0, r5
 800895a:	47b0      	blx	r6
 800895c:	3001      	adds	r0, #1
 800895e:	f43f af52 	beq.w	8008806 <_printf_float+0xae>
 8008962:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008966:	429a      	cmp	r2, r3
 8008968:	db02      	blt.n	8008970 <_printf_float+0x218>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	07d8      	lsls	r0, r3, #31
 800896e:	d50e      	bpl.n	800898e <_printf_float+0x236>
 8008970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008974:	4659      	mov	r1, fp
 8008976:	4628      	mov	r0, r5
 8008978:	47b0      	blx	r6
 800897a:	3001      	adds	r0, #1
 800897c:	f43f af43 	beq.w	8008806 <_printf_float+0xae>
 8008980:	2700      	movs	r7, #0
 8008982:	f104 081a 	add.w	r8, r4, #26
 8008986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008988:	3b01      	subs	r3, #1
 800898a:	42bb      	cmp	r3, r7
 800898c:	dc09      	bgt.n	80089a2 <_printf_float+0x24a>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	079f      	lsls	r7, r3, #30
 8008992:	f100 80fd 	bmi.w	8008b90 <_printf_float+0x438>
 8008996:	68e0      	ldr	r0, [r4, #12]
 8008998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899a:	4298      	cmp	r0, r3
 800899c:	bfb8      	it	lt
 800899e:	4618      	movlt	r0, r3
 80089a0:	e733      	b.n	800880a <_printf_float+0xb2>
 80089a2:	2301      	movs	r3, #1
 80089a4:	4642      	mov	r2, r8
 80089a6:	4659      	mov	r1, fp
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b0      	blx	r6
 80089ac:	3001      	adds	r0, #1
 80089ae:	f43f af2a 	beq.w	8008806 <_printf_float+0xae>
 80089b2:	3701      	adds	r7, #1
 80089b4:	e7e7      	b.n	8008986 <_printf_float+0x22e>
 80089b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dc2b      	bgt.n	8008a14 <_printf_float+0x2bc>
 80089bc:	2301      	movs	r3, #1
 80089be:	4a26      	ldr	r2, [pc, #152]	; (8008a58 <_printf_float+0x300>)
 80089c0:	4659      	mov	r1, fp
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b0      	blx	r6
 80089c6:	3001      	adds	r0, #1
 80089c8:	f43f af1d 	beq.w	8008806 <_printf_float+0xae>
 80089cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ce:	b923      	cbnz	r3, 80089da <_printf_float+0x282>
 80089d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089d2:	b913      	cbnz	r3, 80089da <_printf_float+0x282>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	07d9      	lsls	r1, r3, #31
 80089d8:	d5d9      	bpl.n	800898e <_printf_float+0x236>
 80089da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089de:	4659      	mov	r1, fp
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b0      	blx	r6
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f af0e 	beq.w	8008806 <_printf_float+0xae>
 80089ea:	f04f 0800 	mov.w	r8, #0
 80089ee:	f104 091a 	add.w	r9, r4, #26
 80089f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089f4:	425b      	negs	r3, r3
 80089f6:	4543      	cmp	r3, r8
 80089f8:	dc01      	bgt.n	80089fe <_printf_float+0x2a6>
 80089fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089fc:	e797      	b.n	800892e <_printf_float+0x1d6>
 80089fe:	2301      	movs	r3, #1
 8008a00:	464a      	mov	r2, r9
 8008a02:	4659      	mov	r1, fp
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b0      	blx	r6
 8008a08:	3001      	adds	r0, #1
 8008a0a:	f43f aefc 	beq.w	8008806 <_printf_float+0xae>
 8008a0e:	f108 0801 	add.w	r8, r8, #1
 8008a12:	e7ee      	b.n	80089f2 <_printf_float+0x29a>
 8008a14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	bfa8      	it	ge
 8008a1c:	461a      	movge	r2, r3
 8008a1e:	2a00      	cmp	r2, #0
 8008a20:	4690      	mov	r8, r2
 8008a22:	dd07      	ble.n	8008a34 <_printf_float+0x2dc>
 8008a24:	4613      	mov	r3, r2
 8008a26:	4659      	mov	r1, fp
 8008a28:	463a      	mov	r2, r7
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b0      	blx	r6
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f43f aee9 	beq.w	8008806 <_printf_float+0xae>
 8008a34:	f104 031a 	add.w	r3, r4, #26
 8008a38:	f04f 0a00 	mov.w	sl, #0
 8008a3c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a42:	e015      	b.n	8008a70 <_printf_float+0x318>
 8008a44:	7fefffff 	.word	0x7fefffff
 8008a48:	0800b038 	.word	0x0800b038
 8008a4c:	0800b034 	.word	0x0800b034
 8008a50:	0800b040 	.word	0x0800b040
 8008a54:	0800b03c 	.word	0x0800b03c
 8008a58:	0800b044 	.word	0x0800b044
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a60:	4659      	mov	r1, fp
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b0      	blx	r6
 8008a66:	3001      	adds	r0, #1
 8008a68:	f43f aecd 	beq.w	8008806 <_printf_float+0xae>
 8008a6c:	f10a 0a01 	add.w	sl, sl, #1
 8008a70:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8008a74:	eba9 0308 	sub.w	r3, r9, r8
 8008a78:	4553      	cmp	r3, sl
 8008a7a:	dcef      	bgt.n	8008a5c <_printf_float+0x304>
 8008a7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008a80:	429a      	cmp	r2, r3
 8008a82:	444f      	add	r7, r9
 8008a84:	db14      	blt.n	8008ab0 <_printf_float+0x358>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	07da      	lsls	r2, r3, #31
 8008a8a:	d411      	bmi.n	8008ab0 <_printf_float+0x358>
 8008a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a90:	eba3 0209 	sub.w	r2, r3, r9
 8008a94:	eba3 0901 	sub.w	r9, r3, r1
 8008a98:	4591      	cmp	r9, r2
 8008a9a:	bfa8      	it	ge
 8008a9c:	4691      	movge	r9, r2
 8008a9e:	f1b9 0f00 	cmp.w	r9, #0
 8008aa2:	dc0d      	bgt.n	8008ac0 <_printf_float+0x368>
 8008aa4:	2700      	movs	r7, #0
 8008aa6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008aaa:	f104 081a 	add.w	r8, r4, #26
 8008aae:	e018      	b.n	8008ae2 <_printf_float+0x38a>
 8008ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ab4:	4659      	mov	r1, fp
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b0      	blx	r6
 8008aba:	3001      	adds	r0, #1
 8008abc:	d1e6      	bne.n	8008a8c <_printf_float+0x334>
 8008abe:	e6a2      	b.n	8008806 <_printf_float+0xae>
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	4659      	mov	r1, fp
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b0      	blx	r6
 8008aca:	3001      	adds	r0, #1
 8008acc:	d1ea      	bne.n	8008aa4 <_printf_float+0x34c>
 8008ace:	e69a      	b.n	8008806 <_printf_float+0xae>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4642      	mov	r2, r8
 8008ad4:	4659      	mov	r1, fp
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b0      	blx	r6
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f ae93 	beq.w	8008806 <_printf_float+0xae>
 8008ae0:	3701      	adds	r7, #1
 8008ae2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	eba3 0309 	sub.w	r3, r3, r9
 8008aec:	42bb      	cmp	r3, r7
 8008aee:	dcef      	bgt.n	8008ad0 <_printf_float+0x378>
 8008af0:	e74d      	b.n	800898e <_printf_float+0x236>
 8008af2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008af4:	2a01      	cmp	r2, #1
 8008af6:	dc01      	bgt.n	8008afc <_printf_float+0x3a4>
 8008af8:	07db      	lsls	r3, r3, #31
 8008afa:	d538      	bpl.n	8008b6e <_printf_float+0x416>
 8008afc:	2301      	movs	r3, #1
 8008afe:	463a      	mov	r2, r7
 8008b00:	4659      	mov	r1, fp
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b0      	blx	r6
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f ae7d 	beq.w	8008806 <_printf_float+0xae>
 8008b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b10:	4659      	mov	r1, fp
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b0      	blx	r6
 8008b16:	3001      	adds	r0, #1
 8008b18:	f107 0701 	add.w	r7, r7, #1
 8008b1c:	f43f ae73 	beq.w	8008806 <_printf_float+0xae>
 8008b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b26:	2200      	movs	r2, #0
 8008b28:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f7f7 ff3b 	bl	80009a8 <__aeabi_dcmpeq>
 8008b32:	b9c0      	cbnz	r0, 8008b66 <_printf_float+0x40e>
 8008b34:	4643      	mov	r3, r8
 8008b36:	463a      	mov	r2, r7
 8008b38:	4659      	mov	r1, fp
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b0      	blx	r6
 8008b3e:	3001      	adds	r0, #1
 8008b40:	d10d      	bne.n	8008b5e <_printf_float+0x406>
 8008b42:	e660      	b.n	8008806 <_printf_float+0xae>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4642      	mov	r2, r8
 8008b48:	4659      	mov	r1, fp
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b0      	blx	r6
 8008b4e:	3001      	adds	r0, #1
 8008b50:	f43f ae59 	beq.w	8008806 <_printf_float+0xae>
 8008b54:	3701      	adds	r7, #1
 8008b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	dcf2      	bgt.n	8008b44 <_printf_float+0x3ec>
 8008b5e:	464b      	mov	r3, r9
 8008b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b64:	e6e4      	b.n	8008930 <_printf_float+0x1d8>
 8008b66:	2700      	movs	r7, #0
 8008b68:	f104 081a 	add.w	r8, r4, #26
 8008b6c:	e7f3      	b.n	8008b56 <_printf_float+0x3fe>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e7e1      	b.n	8008b36 <_printf_float+0x3de>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4642      	mov	r2, r8
 8008b76:	4659      	mov	r1, fp
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b0      	blx	r6
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f ae42 	beq.w	8008806 <_printf_float+0xae>
 8008b82:	3701      	adds	r7, #1
 8008b84:	68e3      	ldr	r3, [r4, #12]
 8008b86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b88:	1a9b      	subs	r3, r3, r2
 8008b8a:	42bb      	cmp	r3, r7
 8008b8c:	dcf1      	bgt.n	8008b72 <_printf_float+0x41a>
 8008b8e:	e702      	b.n	8008996 <_printf_float+0x23e>
 8008b90:	2700      	movs	r7, #0
 8008b92:	f104 0819 	add.w	r8, r4, #25
 8008b96:	e7f5      	b.n	8008b84 <_printf_float+0x42c>
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f43f ae94 	beq.w	80088c6 <_printf_float+0x16e>
 8008b9e:	f04f 0c00 	mov.w	ip, #0
 8008ba2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008ba6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008baa:	6022      	str	r2, [r4, #0]
 8008bac:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008bb0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	464b      	mov	r3, r9
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f7ff fd3a 	bl	8008634 <__cvt>
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	e64f      	b.n	8008864 <_printf_float+0x10c>

08008bc4 <_printf_common>:
 8008bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc8:	4691      	mov	r9, r2
 8008bca:	461f      	mov	r7, r3
 8008bcc:	688a      	ldr	r2, [r1, #8]
 8008bce:	690b      	ldr	r3, [r1, #16]
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	bfb8      	it	lt
 8008bd6:	4613      	movlt	r3, r2
 8008bd8:	f8c9 3000 	str.w	r3, [r9]
 8008bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008be0:	460c      	mov	r4, r1
 8008be2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008be6:	b112      	cbz	r2, 8008bee <_printf_common+0x2a>
 8008be8:	3301      	adds	r3, #1
 8008bea:	f8c9 3000 	str.w	r3, [r9]
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	0699      	lsls	r1, r3, #26
 8008bf2:	bf42      	ittt	mi
 8008bf4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008bf8:	3302      	addmi	r3, #2
 8008bfa:	f8c9 3000 	strmi.w	r3, [r9]
 8008bfe:	6825      	ldr	r5, [r4, #0]
 8008c00:	f015 0506 	ands.w	r5, r5, #6
 8008c04:	d107      	bne.n	8008c16 <_printf_common+0x52>
 8008c06:	f104 0a19 	add.w	sl, r4, #25
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	42ab      	cmp	r3, r5
 8008c14:	dc29      	bgt.n	8008c6a <_printf_common+0xa6>
 8008c16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	3300      	adds	r3, #0
 8008c1e:	bf18      	it	ne
 8008c20:	2301      	movne	r3, #1
 8008c22:	0692      	lsls	r2, r2, #26
 8008c24:	d42e      	bmi.n	8008c84 <_printf_common+0xc0>
 8008c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c2a:	4639      	mov	r1, r7
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	47c0      	blx	r8
 8008c30:	3001      	adds	r0, #1
 8008c32:	d021      	beq.n	8008c78 <_printf_common+0xb4>
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	68e5      	ldr	r5, [r4, #12]
 8008c38:	f003 0306 	and.w	r3, r3, #6
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	bf18      	it	ne
 8008c40:	2500      	movne	r5, #0
 8008c42:	f8d9 2000 	ldr.w	r2, [r9]
 8008c46:	f04f 0900 	mov.w	r9, #0
 8008c4a:	bf08      	it	eq
 8008c4c:	1aad      	subeq	r5, r5, r2
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	bf08      	it	eq
 8008c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfc4      	itt	gt
 8008c5c:	1a9b      	subgt	r3, r3, r2
 8008c5e:	18ed      	addgt	r5, r5, r3
 8008c60:	341a      	adds	r4, #26
 8008c62:	454d      	cmp	r5, r9
 8008c64:	d11a      	bne.n	8008c9c <_printf_common+0xd8>
 8008c66:	2000      	movs	r0, #0
 8008c68:	e008      	b.n	8008c7c <_printf_common+0xb8>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4630      	mov	r0, r6
 8008c72:	47c0      	blx	r8
 8008c74:	3001      	adds	r0, #1
 8008c76:	d103      	bne.n	8008c80 <_printf_common+0xbc>
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c80:	3501      	adds	r5, #1
 8008c82:	e7c2      	b.n	8008c0a <_printf_common+0x46>
 8008c84:	2030      	movs	r0, #48	; 0x30
 8008c86:	18e1      	adds	r1, r4, r3
 8008c88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c92:	4422      	add	r2, r4
 8008c94:	3302      	adds	r3, #2
 8008c96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c9a:	e7c4      	b.n	8008c26 <_printf_common+0x62>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	47c0      	blx	r8
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d0e6      	beq.n	8008c78 <_printf_common+0xb4>
 8008caa:	f109 0901 	add.w	r9, r9, #1
 8008cae:	e7d8      	b.n	8008c62 <_printf_common+0x9e>

08008cb0 <_printf_i>:
 8008cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008cb8:	460c      	mov	r4, r1
 8008cba:	7e09      	ldrb	r1, [r1, #24]
 8008cbc:	b085      	sub	sp, #20
 8008cbe:	296e      	cmp	r1, #110	; 0x6e
 8008cc0:	4617      	mov	r7, r2
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	4698      	mov	r8, r3
 8008cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cc8:	f000 80b3 	beq.w	8008e32 <_printf_i+0x182>
 8008ccc:	d822      	bhi.n	8008d14 <_printf_i+0x64>
 8008cce:	2963      	cmp	r1, #99	; 0x63
 8008cd0:	d036      	beq.n	8008d40 <_printf_i+0x90>
 8008cd2:	d80a      	bhi.n	8008cea <_printf_i+0x3a>
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	f000 80b9 	beq.w	8008e4c <_printf_i+0x19c>
 8008cda:	2958      	cmp	r1, #88	; 0x58
 8008cdc:	f000 8083 	beq.w	8008de6 <_printf_i+0x136>
 8008ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ce8:	e032      	b.n	8008d50 <_printf_i+0xa0>
 8008cea:	2964      	cmp	r1, #100	; 0x64
 8008cec:	d001      	beq.n	8008cf2 <_printf_i+0x42>
 8008cee:	2969      	cmp	r1, #105	; 0x69
 8008cf0:	d1f6      	bne.n	8008ce0 <_printf_i+0x30>
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	6813      	ldr	r3, [r2, #0]
 8008cf6:	0605      	lsls	r5, r0, #24
 8008cf8:	f103 0104 	add.w	r1, r3, #4
 8008cfc:	d52a      	bpl.n	8008d54 <_printf_i+0xa4>
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6011      	str	r1, [r2, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da03      	bge.n	8008d0e <_printf_i+0x5e>
 8008d06:	222d      	movs	r2, #45	; 0x2d
 8008d08:	425b      	negs	r3, r3
 8008d0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d0e:	486f      	ldr	r0, [pc, #444]	; (8008ecc <_printf_i+0x21c>)
 8008d10:	220a      	movs	r2, #10
 8008d12:	e039      	b.n	8008d88 <_printf_i+0xd8>
 8008d14:	2973      	cmp	r1, #115	; 0x73
 8008d16:	f000 809d 	beq.w	8008e54 <_printf_i+0x1a4>
 8008d1a:	d808      	bhi.n	8008d2e <_printf_i+0x7e>
 8008d1c:	296f      	cmp	r1, #111	; 0x6f
 8008d1e:	d020      	beq.n	8008d62 <_printf_i+0xb2>
 8008d20:	2970      	cmp	r1, #112	; 0x70
 8008d22:	d1dd      	bne.n	8008ce0 <_printf_i+0x30>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	f043 0320 	orr.w	r3, r3, #32
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	e003      	b.n	8008d36 <_printf_i+0x86>
 8008d2e:	2975      	cmp	r1, #117	; 0x75
 8008d30:	d017      	beq.n	8008d62 <_printf_i+0xb2>
 8008d32:	2978      	cmp	r1, #120	; 0x78
 8008d34:	d1d4      	bne.n	8008ce0 <_printf_i+0x30>
 8008d36:	2378      	movs	r3, #120	; 0x78
 8008d38:	4865      	ldr	r0, [pc, #404]	; (8008ed0 <_printf_i+0x220>)
 8008d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d3e:	e055      	b.n	8008dec <_printf_i+0x13c>
 8008d40:	6813      	ldr	r3, [r2, #0]
 8008d42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d46:	1d19      	adds	r1, r3, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6011      	str	r1, [r2, #0]
 8008d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d50:	2301      	movs	r3, #1
 8008d52:	e08c      	b.n	8008e6e <_printf_i+0x1be>
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d5a:	6011      	str	r1, [r2, #0]
 8008d5c:	bf18      	it	ne
 8008d5e:	b21b      	sxthne	r3, r3
 8008d60:	e7cf      	b.n	8008d02 <_printf_i+0x52>
 8008d62:	6813      	ldr	r3, [r2, #0]
 8008d64:	6825      	ldr	r5, [r4, #0]
 8008d66:	1d18      	adds	r0, r3, #4
 8008d68:	6010      	str	r0, [r2, #0]
 8008d6a:	0628      	lsls	r0, r5, #24
 8008d6c:	d501      	bpl.n	8008d72 <_printf_i+0xc2>
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	e002      	b.n	8008d78 <_printf_i+0xc8>
 8008d72:	0668      	lsls	r0, r5, #25
 8008d74:	d5fb      	bpl.n	8008d6e <_printf_i+0xbe>
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	296f      	cmp	r1, #111	; 0x6f
 8008d7a:	bf14      	ite	ne
 8008d7c:	220a      	movne	r2, #10
 8008d7e:	2208      	moveq	r2, #8
 8008d80:	4852      	ldr	r0, [pc, #328]	; (8008ecc <_printf_i+0x21c>)
 8008d82:	2100      	movs	r1, #0
 8008d84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d88:	6865      	ldr	r5, [r4, #4]
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	60a5      	str	r5, [r4, #8]
 8008d8e:	f2c0 8095 	blt.w	8008ebc <_printf_i+0x20c>
 8008d92:	6821      	ldr	r1, [r4, #0]
 8008d94:	f021 0104 	bic.w	r1, r1, #4
 8008d98:	6021      	str	r1, [r4, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d13d      	bne.n	8008e1a <_printf_i+0x16a>
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	f040 808e 	bne.w	8008ec0 <_printf_i+0x210>
 8008da4:	4665      	mov	r5, ip
 8008da6:	2a08      	cmp	r2, #8
 8008da8:	d10b      	bne.n	8008dc2 <_printf_i+0x112>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	07db      	lsls	r3, r3, #31
 8008dae:	d508      	bpl.n	8008dc2 <_printf_i+0x112>
 8008db0:	6923      	ldr	r3, [r4, #16]
 8008db2:	6862      	ldr	r2, [r4, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	bfde      	ittt	le
 8008db8:	2330      	movle	r3, #48	; 0x30
 8008dba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008dc2:	ebac 0305 	sub.w	r3, ip, r5
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	f8cd 8000 	str.w	r8, [sp]
 8008dcc:	463b      	mov	r3, r7
 8008dce:	aa03      	add	r2, sp, #12
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f7ff fef6 	bl	8008bc4 <_printf_common>
 8008dd8:	3001      	adds	r0, #1
 8008dda:	d14d      	bne.n	8008e78 <_printf_i+0x1c8>
 8008ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008de0:	b005      	add	sp, #20
 8008de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008de6:	4839      	ldr	r0, [pc, #228]	; (8008ecc <_printf_i+0x21c>)
 8008de8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008dec:	6813      	ldr	r3, [r2, #0]
 8008dee:	6821      	ldr	r1, [r4, #0]
 8008df0:	1d1d      	adds	r5, r3, #4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6015      	str	r5, [r2, #0]
 8008df6:	060a      	lsls	r2, r1, #24
 8008df8:	d50b      	bpl.n	8008e12 <_printf_i+0x162>
 8008dfa:	07ca      	lsls	r2, r1, #31
 8008dfc:	bf44      	itt	mi
 8008dfe:	f041 0120 	orrmi.w	r1, r1, #32
 8008e02:	6021      	strmi	r1, [r4, #0]
 8008e04:	b91b      	cbnz	r3, 8008e0e <_printf_i+0x15e>
 8008e06:	6822      	ldr	r2, [r4, #0]
 8008e08:	f022 0220 	bic.w	r2, r2, #32
 8008e0c:	6022      	str	r2, [r4, #0]
 8008e0e:	2210      	movs	r2, #16
 8008e10:	e7b7      	b.n	8008d82 <_printf_i+0xd2>
 8008e12:	064d      	lsls	r5, r1, #25
 8008e14:	bf48      	it	mi
 8008e16:	b29b      	uxthmi	r3, r3
 8008e18:	e7ef      	b.n	8008dfa <_printf_i+0x14a>
 8008e1a:	4665      	mov	r5, ip
 8008e1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e20:	fb02 3311 	mls	r3, r2, r1, r3
 8008e24:	5cc3      	ldrb	r3, [r0, r3]
 8008e26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d1f5      	bne.n	8008e1c <_printf_i+0x16c>
 8008e30:	e7b9      	b.n	8008da6 <_printf_i+0xf6>
 8008e32:	6813      	ldr	r3, [r2, #0]
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1d18      	adds	r0, r3, #4
 8008e38:	6961      	ldr	r1, [r4, #20]
 8008e3a:	6010      	str	r0, [r2, #0]
 8008e3c:	0628      	lsls	r0, r5, #24
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	d501      	bpl.n	8008e46 <_printf_i+0x196>
 8008e42:	6019      	str	r1, [r3, #0]
 8008e44:	e002      	b.n	8008e4c <_printf_i+0x19c>
 8008e46:	066a      	lsls	r2, r5, #25
 8008e48:	d5fb      	bpl.n	8008e42 <_printf_i+0x192>
 8008e4a:	8019      	strh	r1, [r3, #0]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4665      	mov	r5, ip
 8008e50:	6123      	str	r3, [r4, #16]
 8008e52:	e7b9      	b.n	8008dc8 <_printf_i+0x118>
 8008e54:	6813      	ldr	r3, [r2, #0]
 8008e56:	1d19      	adds	r1, r3, #4
 8008e58:	6011      	str	r1, [r2, #0]
 8008e5a:	681d      	ldr	r5, [r3, #0]
 8008e5c:	6862      	ldr	r2, [r4, #4]
 8008e5e:	2100      	movs	r1, #0
 8008e60:	4628      	mov	r0, r5
 8008e62:	f001 f96d 	bl	800a140 <memchr>
 8008e66:	b108      	cbz	r0, 8008e6c <_printf_i+0x1bc>
 8008e68:	1b40      	subs	r0, r0, r5
 8008e6a:	6060      	str	r0, [r4, #4]
 8008e6c:	6863      	ldr	r3, [r4, #4]
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	2300      	movs	r3, #0
 8008e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e76:	e7a7      	b.n	8008dc8 <_printf_i+0x118>
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	462a      	mov	r2, r5
 8008e7c:	4639      	mov	r1, r7
 8008e7e:	4630      	mov	r0, r6
 8008e80:	47c0      	blx	r8
 8008e82:	3001      	adds	r0, #1
 8008e84:	d0aa      	beq.n	8008ddc <_printf_i+0x12c>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	079b      	lsls	r3, r3, #30
 8008e8a:	d413      	bmi.n	8008eb4 <_printf_i+0x204>
 8008e8c:	68e0      	ldr	r0, [r4, #12]
 8008e8e:	9b03      	ldr	r3, [sp, #12]
 8008e90:	4298      	cmp	r0, r3
 8008e92:	bfb8      	it	lt
 8008e94:	4618      	movlt	r0, r3
 8008e96:	e7a3      	b.n	8008de0 <_printf_i+0x130>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	464a      	mov	r2, r9
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	47c0      	blx	r8
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d09a      	beq.n	8008ddc <_printf_i+0x12c>
 8008ea6:	3501      	adds	r5, #1
 8008ea8:	68e3      	ldr	r3, [r4, #12]
 8008eaa:	9a03      	ldr	r2, [sp, #12]
 8008eac:	1a9b      	subs	r3, r3, r2
 8008eae:	42ab      	cmp	r3, r5
 8008eb0:	dcf2      	bgt.n	8008e98 <_printf_i+0x1e8>
 8008eb2:	e7eb      	b.n	8008e8c <_printf_i+0x1dc>
 8008eb4:	2500      	movs	r5, #0
 8008eb6:	f104 0919 	add.w	r9, r4, #25
 8008eba:	e7f5      	b.n	8008ea8 <_printf_i+0x1f8>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1ac      	bne.n	8008e1a <_printf_i+0x16a>
 8008ec0:	7803      	ldrb	r3, [r0, #0]
 8008ec2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008eca:	e76c      	b.n	8008da6 <_printf_i+0xf6>
 8008ecc:	0800b046 	.word	0x0800b046
 8008ed0:	0800b057 	.word	0x0800b057

08008ed4 <iprintf>:
 8008ed4:	b40f      	push	{r0, r1, r2, r3}
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <iprintf+0x2c>)
 8008ed8:	b513      	push	{r0, r1, r4, lr}
 8008eda:	681c      	ldr	r4, [r3, #0]
 8008edc:	b124      	cbz	r4, 8008ee8 <iprintf+0x14>
 8008ede:	69a3      	ldr	r3, [r4, #24]
 8008ee0:	b913      	cbnz	r3, 8008ee8 <iprintf+0x14>
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f001 f830 	bl	8009f48 <__sinit>
 8008ee8:	ab05      	add	r3, sp, #20
 8008eea:	9a04      	ldr	r2, [sp, #16]
 8008eec:	68a1      	ldr	r1, [r4, #8]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	f001 fd99 	bl	800aa28 <_vfiprintf_r>
 8008ef6:	b002      	add	sp, #8
 8008ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008efc:	b004      	add	sp, #16
 8008efe:	4770      	bx	lr
 8008f00:	2000001c 	.word	0x2000001c

08008f04 <_sbrk_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	2300      	movs	r3, #0
 8008f08:	4c05      	ldr	r4, [pc, #20]	; (8008f20 <_sbrk_r+0x1c>)
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	f7f9 ff7a 	bl	8002e08 <_sbrk>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_sbrk_r+0x1a>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_sbrk_r+0x1a>
 8008f1c:	602b      	str	r3, [r5, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	200025fc 	.word	0x200025fc

08008f24 <siprintf>:
 8008f24:	b40e      	push	{r1, r2, r3}
 8008f26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f2a:	b500      	push	{lr}
 8008f2c:	b09c      	sub	sp, #112	; 0x70
 8008f2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008f30:	9002      	str	r0, [sp, #8]
 8008f32:	9006      	str	r0, [sp, #24]
 8008f34:	9107      	str	r1, [sp, #28]
 8008f36:	9104      	str	r1, [sp, #16]
 8008f38:	4808      	ldr	r0, [pc, #32]	; (8008f5c <siprintf+0x38>)
 8008f3a:	4909      	ldr	r1, [pc, #36]	; (8008f60 <siprintf+0x3c>)
 8008f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f40:	9105      	str	r1, [sp, #20]
 8008f42:	6800      	ldr	r0, [r0, #0]
 8008f44:	a902      	add	r1, sp, #8
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	f001 fc4e 	bl	800a7e8 <_svfiprintf_r>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	701a      	strb	r2, [r3, #0]
 8008f52:	b01c      	add	sp, #112	; 0x70
 8008f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f58:	b003      	add	sp, #12
 8008f5a:	4770      	bx	lr
 8008f5c:	2000001c 	.word	0x2000001c
 8008f60:	ffff0208 	.word	0xffff0208

08008f64 <__swbuf_r>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	460e      	mov	r6, r1
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	b118      	cbz	r0, 8008f76 <__swbuf_r+0x12>
 8008f6e:	6983      	ldr	r3, [r0, #24]
 8008f70:	b90b      	cbnz	r3, 8008f76 <__swbuf_r+0x12>
 8008f72:	f000 ffe9 	bl	8009f48 <__sinit>
 8008f76:	4b21      	ldr	r3, [pc, #132]	; (8008ffc <__swbuf_r+0x98>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d12a      	bne.n	8008fd2 <__swbuf_r+0x6e>
 8008f7c:	686c      	ldr	r4, [r5, #4]
 8008f7e:	69a3      	ldr	r3, [r4, #24]
 8008f80:	60a3      	str	r3, [r4, #8]
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	071a      	lsls	r2, r3, #28
 8008f86:	d52e      	bpl.n	8008fe6 <__swbuf_r+0x82>
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	b363      	cbz	r3, 8008fe6 <__swbuf_r+0x82>
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	6820      	ldr	r0, [r4, #0]
 8008f90:	b2f6      	uxtb	r6, r6
 8008f92:	1ac0      	subs	r0, r0, r3
 8008f94:	6963      	ldr	r3, [r4, #20]
 8008f96:	4637      	mov	r7, r6
 8008f98:	4283      	cmp	r3, r0
 8008f9a:	dc04      	bgt.n	8008fa6 <__swbuf_r+0x42>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	f000 ff68 	bl	8009e74 <_fflush_r>
 8008fa4:	bb28      	cbnz	r0, 8008ff2 <__swbuf_r+0x8e>
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	3001      	adds	r0, #1
 8008faa:	3b01      	subs	r3, #1
 8008fac:	60a3      	str	r3, [r4, #8]
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	701e      	strb	r6, [r3, #0]
 8008fb6:	6963      	ldr	r3, [r4, #20]
 8008fb8:	4283      	cmp	r3, r0
 8008fba:	d004      	beq.n	8008fc6 <__swbuf_r+0x62>
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	07db      	lsls	r3, r3, #31
 8008fc0:	d519      	bpl.n	8008ff6 <__swbuf_r+0x92>
 8008fc2:	2e0a      	cmp	r6, #10
 8008fc4:	d117      	bne.n	8008ff6 <__swbuf_r+0x92>
 8008fc6:	4621      	mov	r1, r4
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f000 ff53 	bl	8009e74 <_fflush_r>
 8008fce:	b190      	cbz	r0, 8008ff6 <__swbuf_r+0x92>
 8008fd0:	e00f      	b.n	8008ff2 <__swbuf_r+0x8e>
 8008fd2:	4b0b      	ldr	r3, [pc, #44]	; (8009000 <__swbuf_r+0x9c>)
 8008fd4:	429c      	cmp	r4, r3
 8008fd6:	d101      	bne.n	8008fdc <__swbuf_r+0x78>
 8008fd8:	68ac      	ldr	r4, [r5, #8]
 8008fda:	e7d0      	b.n	8008f7e <__swbuf_r+0x1a>
 8008fdc:	4b09      	ldr	r3, [pc, #36]	; (8009004 <__swbuf_r+0xa0>)
 8008fde:	429c      	cmp	r4, r3
 8008fe0:	bf08      	it	eq
 8008fe2:	68ec      	ldreq	r4, [r5, #12]
 8008fe4:	e7cb      	b.n	8008f7e <__swbuf_r+0x1a>
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 f80d 	bl	8009008 <__swsetup_r>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d0cc      	beq.n	8008f8c <__swbuf_r+0x28>
 8008ff2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ff6:	4638      	mov	r0, r7
 8008ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	0800b098 	.word	0x0800b098
 8009000:	0800b0b8 	.word	0x0800b0b8
 8009004:	0800b078 	.word	0x0800b078

08009008 <__swsetup_r>:
 8009008:	4b32      	ldr	r3, [pc, #200]	; (80090d4 <__swsetup_r+0xcc>)
 800900a:	b570      	push	{r4, r5, r6, lr}
 800900c:	681d      	ldr	r5, [r3, #0]
 800900e:	4606      	mov	r6, r0
 8009010:	460c      	mov	r4, r1
 8009012:	b125      	cbz	r5, 800901e <__swsetup_r+0x16>
 8009014:	69ab      	ldr	r3, [r5, #24]
 8009016:	b913      	cbnz	r3, 800901e <__swsetup_r+0x16>
 8009018:	4628      	mov	r0, r5
 800901a:	f000 ff95 	bl	8009f48 <__sinit>
 800901e:	4b2e      	ldr	r3, [pc, #184]	; (80090d8 <__swsetup_r+0xd0>)
 8009020:	429c      	cmp	r4, r3
 8009022:	d10f      	bne.n	8009044 <__swsetup_r+0x3c>
 8009024:	686c      	ldr	r4, [r5, #4]
 8009026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902a:	b29a      	uxth	r2, r3
 800902c:	0715      	lsls	r5, r2, #28
 800902e:	d42c      	bmi.n	800908a <__swsetup_r+0x82>
 8009030:	06d0      	lsls	r0, r2, #27
 8009032:	d411      	bmi.n	8009058 <__swsetup_r+0x50>
 8009034:	2209      	movs	r2, #9
 8009036:	6032      	str	r2, [r6, #0]
 8009038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800903c:	81a3      	strh	r3, [r4, #12]
 800903e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009042:	e03e      	b.n	80090c2 <__swsetup_r+0xba>
 8009044:	4b25      	ldr	r3, [pc, #148]	; (80090dc <__swsetup_r+0xd4>)
 8009046:	429c      	cmp	r4, r3
 8009048:	d101      	bne.n	800904e <__swsetup_r+0x46>
 800904a:	68ac      	ldr	r4, [r5, #8]
 800904c:	e7eb      	b.n	8009026 <__swsetup_r+0x1e>
 800904e:	4b24      	ldr	r3, [pc, #144]	; (80090e0 <__swsetup_r+0xd8>)
 8009050:	429c      	cmp	r4, r3
 8009052:	bf08      	it	eq
 8009054:	68ec      	ldreq	r4, [r5, #12]
 8009056:	e7e6      	b.n	8009026 <__swsetup_r+0x1e>
 8009058:	0751      	lsls	r1, r2, #29
 800905a:	d512      	bpl.n	8009082 <__swsetup_r+0x7a>
 800905c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800905e:	b141      	cbz	r1, 8009072 <__swsetup_r+0x6a>
 8009060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009064:	4299      	cmp	r1, r3
 8009066:	d002      	beq.n	800906e <__swsetup_r+0x66>
 8009068:	4630      	mov	r0, r6
 800906a:	f7ff fa3d 	bl	80084e8 <_free_r>
 800906e:	2300      	movs	r3, #0
 8009070:	6363      	str	r3, [r4, #52]	; 0x34
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	2300      	movs	r3, #0
 800907c:	6063      	str	r3, [r4, #4]
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f043 0308 	orr.w	r3, r3, #8
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	6923      	ldr	r3, [r4, #16]
 800908c:	b94b      	cbnz	r3, 80090a2 <__swsetup_r+0x9a>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009098:	d003      	beq.n	80090a2 <__swsetup_r+0x9a>
 800909a:	4621      	mov	r1, r4
 800909c:	4630      	mov	r0, r6
 800909e:	f001 f80f 	bl	800a0c0 <__smakebuf_r>
 80090a2:	89a2      	ldrh	r2, [r4, #12]
 80090a4:	f012 0301 	ands.w	r3, r2, #1
 80090a8:	d00c      	beq.n	80090c4 <__swsetup_r+0xbc>
 80090aa:	2300      	movs	r3, #0
 80090ac:	60a3      	str	r3, [r4, #8]
 80090ae:	6963      	ldr	r3, [r4, #20]
 80090b0:	425b      	negs	r3, r3
 80090b2:	61a3      	str	r3, [r4, #24]
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	b953      	cbnz	r3, 80090ce <__swsetup_r+0xc6>
 80090b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80090c0:	d1ba      	bne.n	8009038 <__swsetup_r+0x30>
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	0792      	lsls	r2, r2, #30
 80090c6:	bf58      	it	pl
 80090c8:	6963      	ldrpl	r3, [r4, #20]
 80090ca:	60a3      	str	r3, [r4, #8]
 80090cc:	e7f2      	b.n	80090b4 <__swsetup_r+0xac>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e7f7      	b.n	80090c2 <__swsetup_r+0xba>
 80090d2:	bf00      	nop
 80090d4:	2000001c 	.word	0x2000001c
 80090d8:	0800b098 	.word	0x0800b098
 80090dc:	0800b0b8 	.word	0x0800b0b8
 80090e0:	0800b078 	.word	0x0800b078

080090e4 <quorem>:
 80090e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	6903      	ldr	r3, [r0, #16]
 80090ea:	690c      	ldr	r4, [r1, #16]
 80090ec:	4680      	mov	r8, r0
 80090ee:	42a3      	cmp	r3, r4
 80090f0:	f2c0 8084 	blt.w	80091fc <quorem+0x118>
 80090f4:	3c01      	subs	r4, #1
 80090f6:	f101 0714 	add.w	r7, r1, #20
 80090fa:	f100 0614 	add.w	r6, r0, #20
 80090fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009102:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009106:	3501      	adds	r5, #1
 8009108:	fbb0 f5f5 	udiv	r5, r0, r5
 800910c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009110:	eb06 030c 	add.w	r3, r6, ip
 8009114:	eb07 090c 	add.w	r9, r7, ip
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	b39d      	cbz	r5, 8009184 <quorem+0xa0>
 800911c:	f04f 0a00 	mov.w	sl, #0
 8009120:	4638      	mov	r0, r7
 8009122:	46b6      	mov	lr, r6
 8009124:	46d3      	mov	fp, sl
 8009126:	f850 2b04 	ldr.w	r2, [r0], #4
 800912a:	b293      	uxth	r3, r2
 800912c:	fb05 a303 	mla	r3, r5, r3, sl
 8009130:	0c12      	lsrs	r2, r2, #16
 8009132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009136:	fb05 a202 	mla	r2, r5, r2, sl
 800913a:	b29b      	uxth	r3, r3
 800913c:	ebab 0303 	sub.w	r3, fp, r3
 8009140:	f8de b000 	ldr.w	fp, [lr]
 8009144:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009148:	fa1f fb8b 	uxth.w	fp, fp
 800914c:	445b      	add	r3, fp
 800914e:	fa1f fb82 	uxth.w	fp, r2
 8009152:	f8de 2000 	ldr.w	r2, [lr]
 8009156:	4581      	cmp	r9, r0
 8009158:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800915c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009160:	b29b      	uxth	r3, r3
 8009162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009166:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800916a:	f84e 3b04 	str.w	r3, [lr], #4
 800916e:	d2da      	bcs.n	8009126 <quorem+0x42>
 8009170:	f856 300c 	ldr.w	r3, [r6, ip]
 8009174:	b933      	cbnz	r3, 8009184 <quorem+0xa0>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	3b04      	subs	r3, #4
 800917a:	429e      	cmp	r6, r3
 800917c:	461a      	mov	r2, r3
 800917e:	d331      	bcc.n	80091e4 <quorem+0x100>
 8009180:	f8c8 4010 	str.w	r4, [r8, #16]
 8009184:	4640      	mov	r0, r8
 8009186:	f001 f9ff 	bl	800a588 <__mcmp>
 800918a:	2800      	cmp	r0, #0
 800918c:	db26      	blt.n	80091dc <quorem+0xf8>
 800918e:	4630      	mov	r0, r6
 8009190:	f04f 0c00 	mov.w	ip, #0
 8009194:	3501      	adds	r5, #1
 8009196:	f857 1b04 	ldr.w	r1, [r7], #4
 800919a:	f8d0 e000 	ldr.w	lr, [r0]
 800919e:	b28b      	uxth	r3, r1
 80091a0:	ebac 0303 	sub.w	r3, ip, r3
 80091a4:	fa1f f28e 	uxth.w	r2, lr
 80091a8:	4413      	add	r3, r2
 80091aa:	0c0a      	lsrs	r2, r1, #16
 80091ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ba:	45b9      	cmp	r9, r7
 80091bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091c0:	f840 3b04 	str.w	r3, [r0], #4
 80091c4:	d2e7      	bcs.n	8009196 <quorem+0xb2>
 80091c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80091ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80091ce:	b92a      	cbnz	r2, 80091dc <quorem+0xf8>
 80091d0:	3b04      	subs	r3, #4
 80091d2:	429e      	cmp	r6, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	d30b      	bcc.n	80091f0 <quorem+0x10c>
 80091d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80091dc:	4628      	mov	r0, r5
 80091de:	b003      	add	sp, #12
 80091e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e4:	6812      	ldr	r2, [r2, #0]
 80091e6:	3b04      	subs	r3, #4
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	d1c9      	bne.n	8009180 <quorem+0x9c>
 80091ec:	3c01      	subs	r4, #1
 80091ee:	e7c4      	b.n	800917a <quorem+0x96>
 80091f0:	6812      	ldr	r2, [r2, #0]
 80091f2:	3b04      	subs	r3, #4
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	d1ef      	bne.n	80091d8 <quorem+0xf4>
 80091f8:	3c01      	subs	r4, #1
 80091fa:	e7ea      	b.n	80091d2 <quorem+0xee>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e7ee      	b.n	80091de <quorem+0xfa>

08009200 <_dtoa_r>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	4616      	mov	r6, r2
 8009206:	461f      	mov	r7, r3
 8009208:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800920a:	b095      	sub	sp, #84	; 0x54
 800920c:	4604      	mov	r4, r0
 800920e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009212:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009216:	b93d      	cbnz	r5, 8009228 <_dtoa_r+0x28>
 8009218:	2010      	movs	r0, #16
 800921a:	f7ff f941 	bl	80084a0 <malloc>
 800921e:	6260      	str	r0, [r4, #36]	; 0x24
 8009220:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009224:	6005      	str	r5, [r0, #0]
 8009226:	60c5      	str	r5, [r0, #12]
 8009228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922a:	6819      	ldr	r1, [r3, #0]
 800922c:	b151      	cbz	r1, 8009244 <_dtoa_r+0x44>
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	2301      	movs	r3, #1
 8009232:	4093      	lsls	r3, r2
 8009234:	604a      	str	r2, [r1, #4]
 8009236:	608b      	str	r3, [r1, #8]
 8009238:	4620      	mov	r0, r4
 800923a:	f000 ffc5 	bl	800a1c8 <_Bfree>
 800923e:	2200      	movs	r2, #0
 8009240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	1e3b      	subs	r3, r7, #0
 8009246:	bfaf      	iteee	ge
 8009248:	2300      	movge	r3, #0
 800924a:	2201      	movlt	r2, #1
 800924c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009250:	9303      	strlt	r3, [sp, #12]
 8009252:	bfac      	ite	ge
 8009254:	f8c8 3000 	strge.w	r3, [r8]
 8009258:	f8c8 2000 	strlt.w	r2, [r8]
 800925c:	4bae      	ldr	r3, [pc, #696]	; (8009518 <_dtoa_r+0x318>)
 800925e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009262:	ea33 0308 	bics.w	r3, r3, r8
 8009266:	d11b      	bne.n	80092a0 <_dtoa_r+0xa0>
 8009268:	f242 730f 	movw	r3, #9999	; 0x270f
 800926c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	b923      	cbnz	r3, 800927e <_dtoa_r+0x7e>
 8009274:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009278:	2800      	cmp	r0, #0
 800927a:	f000 8545 	beq.w	8009d08 <_dtoa_r+0xb08>
 800927e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009280:	b953      	cbnz	r3, 8009298 <_dtoa_r+0x98>
 8009282:	4ba6      	ldr	r3, [pc, #664]	; (800951c <_dtoa_r+0x31c>)
 8009284:	e021      	b.n	80092ca <_dtoa_r+0xca>
 8009286:	4ba6      	ldr	r3, [pc, #664]	; (8009520 <_dtoa_r+0x320>)
 8009288:	9306      	str	r3, [sp, #24]
 800928a:	3308      	adds	r3, #8
 800928c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	9806      	ldr	r0, [sp, #24]
 8009292:	b015      	add	sp, #84	; 0x54
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009298:	4ba0      	ldr	r3, [pc, #640]	; (800951c <_dtoa_r+0x31c>)
 800929a:	9306      	str	r3, [sp, #24]
 800929c:	3303      	adds	r3, #3
 800929e:	e7f5      	b.n	800928c <_dtoa_r+0x8c>
 80092a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	f7f7 fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80092b0:	4682      	mov	sl, r0
 80092b2:	b160      	cbz	r0, 80092ce <_dtoa_r+0xce>
 80092b4:	2301      	movs	r3, #1
 80092b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8520 	beq.w	8009d02 <_dtoa_r+0xb02>
 80092c2:	4b98      	ldr	r3, [pc, #608]	; (8009524 <_dtoa_r+0x324>)
 80092c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	e7e0      	b.n	8009290 <_dtoa_r+0x90>
 80092ce:	ab12      	add	r3, sp, #72	; 0x48
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	ab13      	add	r3, sp, #76	; 0x4c
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	4632      	mov	r2, r6
 80092d8:	463b      	mov	r3, r7
 80092da:	4620      	mov	r0, r4
 80092dc:	f001 f9cc 	bl	800a678 <__d2b>
 80092e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80092e4:	4683      	mov	fp, r0
 80092e6:	2d00      	cmp	r5, #0
 80092e8:	d07d      	beq.n	80093e6 <_dtoa_r+0x1e6>
 80092ea:	46b0      	mov	r8, r6
 80092ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80092f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80092f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009300:	2200      	movs	r2, #0
 8009302:	4b89      	ldr	r3, [pc, #548]	; (8009528 <_dtoa_r+0x328>)
 8009304:	4640      	mov	r0, r8
 8009306:	4649      	mov	r1, r9
 8009308:	f7f6 ff2e 	bl	8000168 <__aeabi_dsub>
 800930c:	a37c      	add	r3, pc, #496	; (adr r3, 8009500 <_dtoa_r+0x300>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f7f7 f8e1 	bl	80004d8 <__aeabi_dmul>
 8009316:	a37c      	add	r3, pc, #496	; (adr r3, 8009508 <_dtoa_r+0x308>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	f7f6 ff26 	bl	800016c <__adddf3>
 8009320:	4606      	mov	r6, r0
 8009322:	4628      	mov	r0, r5
 8009324:	460f      	mov	r7, r1
 8009326:	f7f7 f86d 	bl	8000404 <__aeabi_i2d>
 800932a:	a379      	add	r3, pc, #484	; (adr r3, 8009510 <_dtoa_r+0x310>)
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	f7f7 f8d2 	bl	80004d8 <__aeabi_dmul>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	f7f6 ff16 	bl	800016c <__adddf3>
 8009340:	4606      	mov	r6, r0
 8009342:	460f      	mov	r7, r1
 8009344:	f7f7 fb78 	bl	8000a38 <__aeabi_d2iz>
 8009348:	2200      	movs	r2, #0
 800934a:	4682      	mov	sl, r0
 800934c:	2300      	movs	r3, #0
 800934e:	4630      	mov	r0, r6
 8009350:	4639      	mov	r1, r7
 8009352:	f7f7 fb33 	bl	80009bc <__aeabi_dcmplt>
 8009356:	b148      	cbz	r0, 800936c <_dtoa_r+0x16c>
 8009358:	4650      	mov	r0, sl
 800935a:	f7f7 f853 	bl	8000404 <__aeabi_i2d>
 800935e:	4632      	mov	r2, r6
 8009360:	463b      	mov	r3, r7
 8009362:	f7f7 fb21 	bl	80009a8 <__aeabi_dcmpeq>
 8009366:	b908      	cbnz	r0, 800936c <_dtoa_r+0x16c>
 8009368:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800936c:	f1ba 0f16 	cmp.w	sl, #22
 8009370:	d85a      	bhi.n	8009428 <_dtoa_r+0x228>
 8009372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009376:	496d      	ldr	r1, [pc, #436]	; (800952c <_dtoa_r+0x32c>)
 8009378:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800937c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009380:	f7f7 fb3a 	bl	80009f8 <__aeabi_dcmpgt>
 8009384:	2800      	cmp	r0, #0
 8009386:	d051      	beq.n	800942c <_dtoa_r+0x22c>
 8009388:	2300      	movs	r3, #0
 800938a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800938e:	930d      	str	r3, [sp, #52]	; 0x34
 8009390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009392:	1b5d      	subs	r5, r3, r5
 8009394:	1e6b      	subs	r3, r5, #1
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	bf43      	ittte	mi
 800939a:	2300      	movmi	r3, #0
 800939c:	f1c5 0901 	rsbmi	r9, r5, #1
 80093a0:	9307      	strmi	r3, [sp, #28]
 80093a2:	f04f 0900 	movpl.w	r9, #0
 80093a6:	f1ba 0f00 	cmp.w	sl, #0
 80093aa:	db41      	blt.n	8009430 <_dtoa_r+0x230>
 80093ac:	9b07      	ldr	r3, [sp, #28]
 80093ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80093b2:	4453      	add	r3, sl
 80093b4:	9307      	str	r3, [sp, #28]
 80093b6:	2300      	movs	r3, #0
 80093b8:	9308      	str	r3, [sp, #32]
 80093ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093bc:	2b09      	cmp	r3, #9
 80093be:	f200 808f 	bhi.w	80094e0 <_dtoa_r+0x2e0>
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	bfc4      	itt	gt
 80093c6:	3b04      	subgt	r3, #4
 80093c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80093ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093cc:	bfc8      	it	gt
 80093ce:	2500      	movgt	r5, #0
 80093d0:	f1a3 0302 	sub.w	r3, r3, #2
 80093d4:	bfd8      	it	le
 80093d6:	2501      	movle	r5, #1
 80093d8:	2b03      	cmp	r3, #3
 80093da:	f200 808d 	bhi.w	80094f8 <_dtoa_r+0x2f8>
 80093de:	e8df f003 	tbb	[pc, r3]
 80093e2:	7d7b      	.short	0x7d7b
 80093e4:	6f2f      	.short	0x6f2f
 80093e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80093ea:	441d      	add	r5, r3
 80093ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80093f0:	2820      	cmp	r0, #32
 80093f2:	dd13      	ble.n	800941c <_dtoa_r+0x21c>
 80093f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80093f8:	9b02      	ldr	r3, [sp, #8]
 80093fa:	fa08 f800 	lsl.w	r8, r8, r0
 80093fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009402:	fa23 f000 	lsr.w	r0, r3, r0
 8009406:	ea48 0000 	orr.w	r0, r8, r0
 800940a:	f7f6 ffeb 	bl	80003e4 <__aeabi_ui2d>
 800940e:	2301      	movs	r3, #1
 8009410:	4680      	mov	r8, r0
 8009412:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009416:	3d01      	subs	r5, #1
 8009418:	9310      	str	r3, [sp, #64]	; 0x40
 800941a:	e771      	b.n	8009300 <_dtoa_r+0x100>
 800941c:	9b02      	ldr	r3, [sp, #8]
 800941e:	f1c0 0020 	rsb	r0, r0, #32
 8009422:	fa03 f000 	lsl.w	r0, r3, r0
 8009426:	e7f0      	b.n	800940a <_dtoa_r+0x20a>
 8009428:	2301      	movs	r3, #1
 800942a:	e7b0      	b.n	800938e <_dtoa_r+0x18e>
 800942c:	900d      	str	r0, [sp, #52]	; 0x34
 800942e:	e7af      	b.n	8009390 <_dtoa_r+0x190>
 8009430:	f1ca 0300 	rsb	r3, sl, #0
 8009434:	9308      	str	r3, [sp, #32]
 8009436:	2300      	movs	r3, #0
 8009438:	eba9 090a 	sub.w	r9, r9, sl
 800943c:	930c      	str	r3, [sp, #48]	; 0x30
 800943e:	e7bc      	b.n	80093ba <_dtoa_r+0x1ba>
 8009440:	2301      	movs	r3, #1
 8009442:	9309      	str	r3, [sp, #36]	; 0x24
 8009444:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009446:	2b00      	cmp	r3, #0
 8009448:	dd74      	ble.n	8009534 <_dtoa_r+0x334>
 800944a:	4698      	mov	r8, r3
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	2200      	movs	r2, #0
 8009450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009452:	6072      	str	r2, [r6, #4]
 8009454:	2204      	movs	r2, #4
 8009456:	f102 0014 	add.w	r0, r2, #20
 800945a:	4298      	cmp	r0, r3
 800945c:	6871      	ldr	r1, [r6, #4]
 800945e:	d96e      	bls.n	800953e <_dtoa_r+0x33e>
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fe7d 	bl	800a160 <_Balloc>
 8009466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009468:	6030      	str	r0, [r6, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f1b8 0f0e 	cmp.w	r8, #14
 8009470:	9306      	str	r3, [sp, #24]
 8009472:	f200 80ed 	bhi.w	8009650 <_dtoa_r+0x450>
 8009476:	2d00      	cmp	r5, #0
 8009478:	f000 80ea 	beq.w	8009650 <_dtoa_r+0x450>
 800947c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009488:	dd77      	ble.n	800957a <_dtoa_r+0x37a>
 800948a:	4a28      	ldr	r2, [pc, #160]	; (800952c <_dtoa_r+0x32c>)
 800948c:	f00a 030f 	and.w	r3, sl, #15
 8009490:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009494:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009498:	06f0      	lsls	r0, r6, #27
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094a2:	d568      	bpl.n	8009576 <_dtoa_r+0x376>
 80094a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80094a8:	4b21      	ldr	r3, [pc, #132]	; (8009530 <_dtoa_r+0x330>)
 80094aa:	2503      	movs	r5, #3
 80094ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094b0:	f7f7 f93c 	bl	800072c <__aeabi_ddiv>
 80094b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094b8:	f006 060f 	and.w	r6, r6, #15
 80094bc:	4f1c      	ldr	r7, [pc, #112]	; (8009530 <_dtoa_r+0x330>)
 80094be:	e04f      	b.n	8009560 <_dtoa_r+0x360>
 80094c0:	2301      	movs	r3, #1
 80094c2:	9309      	str	r3, [sp, #36]	; 0x24
 80094c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094c6:	4453      	add	r3, sl
 80094c8:	f103 0801 	add.w	r8, r3, #1
 80094cc:	9304      	str	r3, [sp, #16]
 80094ce:	4643      	mov	r3, r8
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	bfb8      	it	lt
 80094d4:	2301      	movlt	r3, #1
 80094d6:	e7ba      	b.n	800944e <_dtoa_r+0x24e>
 80094d8:	2300      	movs	r3, #0
 80094da:	e7b2      	b.n	8009442 <_dtoa_r+0x242>
 80094dc:	2300      	movs	r3, #0
 80094de:	e7f0      	b.n	80094c2 <_dtoa_r+0x2c2>
 80094e0:	2501      	movs	r5, #1
 80094e2:	2300      	movs	r3, #0
 80094e4:	9509      	str	r5, [sp, #36]	; 0x24
 80094e6:	931e      	str	r3, [sp, #120]	; 0x78
 80094e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ec:	2200      	movs	r2, #0
 80094ee:	9304      	str	r3, [sp, #16]
 80094f0:	4698      	mov	r8, r3
 80094f2:	2312      	movs	r3, #18
 80094f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80094f6:	e7aa      	b.n	800944e <_dtoa_r+0x24e>
 80094f8:	2301      	movs	r3, #1
 80094fa:	9309      	str	r3, [sp, #36]	; 0x24
 80094fc:	e7f4      	b.n	80094e8 <_dtoa_r+0x2e8>
 80094fe:	bf00      	nop
 8009500:	636f4361 	.word	0x636f4361
 8009504:	3fd287a7 	.word	0x3fd287a7
 8009508:	8b60c8b3 	.word	0x8b60c8b3
 800950c:	3fc68a28 	.word	0x3fc68a28
 8009510:	509f79fb 	.word	0x509f79fb
 8009514:	3fd34413 	.word	0x3fd34413
 8009518:	7ff00000 	.word	0x7ff00000
 800951c:	0800b071 	.word	0x0800b071
 8009520:	0800b068 	.word	0x0800b068
 8009524:	0800b045 	.word	0x0800b045
 8009528:	3ff80000 	.word	0x3ff80000
 800952c:	0800b100 	.word	0x0800b100
 8009530:	0800b0d8 	.word	0x0800b0d8
 8009534:	2301      	movs	r3, #1
 8009536:	9304      	str	r3, [sp, #16]
 8009538:	4698      	mov	r8, r3
 800953a:	461a      	mov	r2, r3
 800953c:	e7da      	b.n	80094f4 <_dtoa_r+0x2f4>
 800953e:	3101      	adds	r1, #1
 8009540:	6071      	str	r1, [r6, #4]
 8009542:	0052      	lsls	r2, r2, #1
 8009544:	e787      	b.n	8009456 <_dtoa_r+0x256>
 8009546:	07f1      	lsls	r1, r6, #31
 8009548:	d508      	bpl.n	800955c <_dtoa_r+0x35c>
 800954a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800954e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009552:	f7f6 ffc1 	bl	80004d8 <__aeabi_dmul>
 8009556:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800955a:	3501      	adds	r5, #1
 800955c:	1076      	asrs	r6, r6, #1
 800955e:	3708      	adds	r7, #8
 8009560:	2e00      	cmp	r6, #0
 8009562:	d1f0      	bne.n	8009546 <_dtoa_r+0x346>
 8009564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800956c:	f7f7 f8de 	bl	800072c <__aeabi_ddiv>
 8009570:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009574:	e01b      	b.n	80095ae <_dtoa_r+0x3ae>
 8009576:	2502      	movs	r5, #2
 8009578:	e7a0      	b.n	80094bc <_dtoa_r+0x2bc>
 800957a:	f000 80a4 	beq.w	80096c6 <_dtoa_r+0x4c6>
 800957e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009582:	f1ca 0600 	rsb	r6, sl, #0
 8009586:	4ba0      	ldr	r3, [pc, #640]	; (8009808 <_dtoa_r+0x608>)
 8009588:	f006 020f 	and.w	r2, r6, #15
 800958c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f6 ffa0 	bl	80004d8 <__aeabi_dmul>
 8009598:	2502      	movs	r5, #2
 800959a:	2300      	movs	r3, #0
 800959c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a0:	4f9a      	ldr	r7, [pc, #616]	; (800980c <_dtoa_r+0x60c>)
 80095a2:	1136      	asrs	r6, r6, #4
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	f040 8083 	bne.w	80096b0 <_dtoa_r+0x4b0>
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e0      	bne.n	8009570 <_dtoa_r+0x370>
 80095ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 808a 	beq.w	80096ca <_dtoa_r+0x4ca>
 80095b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095c2:	2200      	movs	r2, #0
 80095c4:	4b92      	ldr	r3, [pc, #584]	; (8009810 <_dtoa_r+0x610>)
 80095c6:	f7f7 f9f9 	bl	80009bc <__aeabi_dcmplt>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d07d      	beq.n	80096ca <_dtoa_r+0x4ca>
 80095ce:	f1b8 0f00 	cmp.w	r8, #0
 80095d2:	d07a      	beq.n	80096ca <_dtoa_r+0x4ca>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	dd36      	ble.n	8009648 <_dtoa_r+0x448>
 80095da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095de:	2200      	movs	r2, #0
 80095e0:	4b8c      	ldr	r3, [pc, #560]	; (8009814 <_dtoa_r+0x614>)
 80095e2:	f7f6 ff79 	bl	80004d8 <__aeabi_dmul>
 80095e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ea:	9e04      	ldr	r6, [sp, #16]
 80095ec:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80095f0:	3501      	adds	r5, #1
 80095f2:	4628      	mov	r0, r5
 80095f4:	f7f6 ff06 	bl	8000404 <__aeabi_i2d>
 80095f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095fc:	f7f6 ff6c 	bl	80004d8 <__aeabi_dmul>
 8009600:	2200      	movs	r2, #0
 8009602:	4b85      	ldr	r3, [pc, #532]	; (8009818 <_dtoa_r+0x618>)
 8009604:	f7f6 fdb2 	bl	800016c <__adddf3>
 8009608:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800960c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009610:	950b      	str	r5, [sp, #44]	; 0x2c
 8009612:	2e00      	cmp	r6, #0
 8009614:	d15c      	bne.n	80096d0 <_dtoa_r+0x4d0>
 8009616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800961a:	2200      	movs	r2, #0
 800961c:	4b7f      	ldr	r3, [pc, #508]	; (800981c <_dtoa_r+0x61c>)
 800961e:	f7f6 fda3 	bl	8000168 <__aeabi_dsub>
 8009622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009624:	462b      	mov	r3, r5
 8009626:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800962a:	f7f7 f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800962e:	2800      	cmp	r0, #0
 8009630:	f040 8281 	bne.w	8009b36 <_dtoa_r+0x936>
 8009634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800963e:	f7f7 f9bd 	bl	80009bc <__aeabi_dcmplt>
 8009642:	2800      	cmp	r0, #0
 8009644:	f040 8275 	bne.w	8009b32 <_dtoa_r+0x932>
 8009648:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800964c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009650:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009652:	2b00      	cmp	r3, #0
 8009654:	f2c0 814b 	blt.w	80098ee <_dtoa_r+0x6ee>
 8009658:	f1ba 0f0e 	cmp.w	sl, #14
 800965c:	f300 8147 	bgt.w	80098ee <_dtoa_r+0x6ee>
 8009660:	4b69      	ldr	r3, [pc, #420]	; (8009808 <_dtoa_r+0x608>)
 8009662:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800966e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009670:	2b00      	cmp	r3, #0
 8009672:	f280 80d7 	bge.w	8009824 <_dtoa_r+0x624>
 8009676:	f1b8 0f00 	cmp.w	r8, #0
 800967a:	f300 80d3 	bgt.w	8009824 <_dtoa_r+0x624>
 800967e:	f040 8257 	bne.w	8009b30 <_dtoa_r+0x930>
 8009682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009686:	2200      	movs	r2, #0
 8009688:	4b64      	ldr	r3, [pc, #400]	; (800981c <_dtoa_r+0x61c>)
 800968a:	f7f6 ff25 	bl	80004d8 <__aeabi_dmul>
 800968e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009692:	f7f7 f9a7 	bl	80009e4 <__aeabi_dcmpge>
 8009696:	4646      	mov	r6, r8
 8009698:	4647      	mov	r7, r8
 800969a:	2800      	cmp	r0, #0
 800969c:	f040 822d 	bne.w	8009afa <_dtoa_r+0x8fa>
 80096a0:	9b06      	ldr	r3, [sp, #24]
 80096a2:	9a06      	ldr	r2, [sp, #24]
 80096a4:	1c5d      	adds	r5, r3, #1
 80096a6:	2331      	movs	r3, #49	; 0x31
 80096a8:	f10a 0a01 	add.w	sl, sl, #1
 80096ac:	7013      	strb	r3, [r2, #0]
 80096ae:	e228      	b.n	8009b02 <_dtoa_r+0x902>
 80096b0:	07f2      	lsls	r2, r6, #31
 80096b2:	d505      	bpl.n	80096c0 <_dtoa_r+0x4c0>
 80096b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b8:	f7f6 ff0e 	bl	80004d8 <__aeabi_dmul>
 80096bc:	2301      	movs	r3, #1
 80096be:	3501      	adds	r5, #1
 80096c0:	1076      	asrs	r6, r6, #1
 80096c2:	3708      	adds	r7, #8
 80096c4:	e76e      	b.n	80095a4 <_dtoa_r+0x3a4>
 80096c6:	2502      	movs	r5, #2
 80096c8:	e771      	b.n	80095ae <_dtoa_r+0x3ae>
 80096ca:	4657      	mov	r7, sl
 80096cc:	4646      	mov	r6, r8
 80096ce:	e790      	b.n	80095f2 <_dtoa_r+0x3f2>
 80096d0:	4b4d      	ldr	r3, [pc, #308]	; (8009808 <_dtoa_r+0x608>)
 80096d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d048      	beq.n	8009772 <_dtoa_r+0x572>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	2000      	movs	r0, #0
 80096e6:	494e      	ldr	r1, [pc, #312]	; (8009820 <_dtoa_r+0x620>)
 80096e8:	f7f7 f820 	bl	800072c <__aeabi_ddiv>
 80096ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096f0:	f7f6 fd3a 	bl	8000168 <__aeabi_dsub>
 80096f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096f8:	9d06      	ldr	r5, [sp, #24]
 80096fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096fe:	f7f7 f99b 	bl	8000a38 <__aeabi_d2iz>
 8009702:	9011      	str	r0, [sp, #68]	; 0x44
 8009704:	f7f6 fe7e 	bl	8000404 <__aeabi_i2d>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009710:	f7f6 fd2a 	bl	8000168 <__aeabi_dsub>
 8009714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800971a:	3330      	adds	r3, #48	; 0x30
 800971c:	f805 3b01 	strb.w	r3, [r5], #1
 8009720:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009724:	f7f7 f94a 	bl	80009bc <__aeabi_dcmplt>
 8009728:	2800      	cmp	r0, #0
 800972a:	d163      	bne.n	80097f4 <_dtoa_r+0x5f4>
 800972c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009730:	2000      	movs	r0, #0
 8009732:	4937      	ldr	r1, [pc, #220]	; (8009810 <_dtoa_r+0x610>)
 8009734:	f7f6 fd18 	bl	8000168 <__aeabi_dsub>
 8009738:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800973c:	f7f7 f93e 	bl	80009bc <__aeabi_dcmplt>
 8009740:	2800      	cmp	r0, #0
 8009742:	f040 80b5 	bne.w	80098b0 <_dtoa_r+0x6b0>
 8009746:	9b06      	ldr	r3, [sp, #24]
 8009748:	1aeb      	subs	r3, r5, r3
 800974a:	429e      	cmp	r6, r3
 800974c:	f77f af7c 	ble.w	8009648 <_dtoa_r+0x448>
 8009750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009754:	2200      	movs	r2, #0
 8009756:	4b2f      	ldr	r3, [pc, #188]	; (8009814 <_dtoa_r+0x614>)
 8009758:	f7f6 febe 	bl	80004d8 <__aeabi_dmul>
 800975c:	2200      	movs	r2, #0
 800975e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009766:	4b2b      	ldr	r3, [pc, #172]	; (8009814 <_dtoa_r+0x614>)
 8009768:	f7f6 feb6 	bl	80004d8 <__aeabi_dmul>
 800976c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009770:	e7c3      	b.n	80096fa <_dtoa_r+0x4fa>
 8009772:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009776:	f7f6 feaf 	bl	80004d8 <__aeabi_dmul>
 800977a:	9b06      	ldr	r3, [sp, #24]
 800977c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009780:	199d      	adds	r5, r3, r6
 8009782:	461e      	mov	r6, r3
 8009784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009788:	f7f7 f956 	bl	8000a38 <__aeabi_d2iz>
 800978c:	9011      	str	r0, [sp, #68]	; 0x44
 800978e:	f7f6 fe39 	bl	8000404 <__aeabi_i2d>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f6 fce5 	bl	8000168 <__aeabi_dsub>
 800979e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a4:	3330      	adds	r3, #48	; 0x30
 80097a6:	f806 3b01 	strb.w	r3, [r6], #1
 80097aa:	42ae      	cmp	r6, r5
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	d124      	bne.n	80097fc <_dtoa_r+0x5fc>
 80097b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80097b6:	4b1a      	ldr	r3, [pc, #104]	; (8009820 <_dtoa_r+0x620>)
 80097b8:	f7f6 fcd8 	bl	800016c <__adddf3>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c4:	f7f7 f918 	bl	80009f8 <__aeabi_dcmpgt>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d171      	bne.n	80098b0 <_dtoa_r+0x6b0>
 80097cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097d0:	2000      	movs	r0, #0
 80097d2:	4913      	ldr	r1, [pc, #76]	; (8009820 <_dtoa_r+0x620>)
 80097d4:	f7f6 fcc8 	bl	8000168 <__aeabi_dsub>
 80097d8:	4602      	mov	r2, r0
 80097da:	460b      	mov	r3, r1
 80097dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e0:	f7f7 f8ec 	bl	80009bc <__aeabi_dcmplt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	f43f af2f 	beq.w	8009648 <_dtoa_r+0x448>
 80097ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097ee:	1e6a      	subs	r2, r5, #1
 80097f0:	2b30      	cmp	r3, #48	; 0x30
 80097f2:	d001      	beq.n	80097f8 <_dtoa_r+0x5f8>
 80097f4:	46ba      	mov	sl, r7
 80097f6:	e04a      	b.n	800988e <_dtoa_r+0x68e>
 80097f8:	4615      	mov	r5, r2
 80097fa:	e7f6      	b.n	80097ea <_dtoa_r+0x5ea>
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_dtoa_r+0x614>)
 80097fe:	f7f6 fe6b 	bl	80004d8 <__aeabi_dmul>
 8009802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009806:	e7bd      	b.n	8009784 <_dtoa_r+0x584>
 8009808:	0800b100 	.word	0x0800b100
 800980c:	0800b0d8 	.word	0x0800b0d8
 8009810:	3ff00000 	.word	0x3ff00000
 8009814:	40240000 	.word	0x40240000
 8009818:	401c0000 	.word	0x401c0000
 800981c:	40140000 	.word	0x40140000
 8009820:	3fe00000 	.word	0x3fe00000
 8009824:	9d06      	ldr	r5, [sp, #24]
 8009826:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800982a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800982e:	4630      	mov	r0, r6
 8009830:	4639      	mov	r1, r7
 8009832:	f7f6 ff7b 	bl	800072c <__aeabi_ddiv>
 8009836:	f7f7 f8ff 	bl	8000a38 <__aeabi_d2iz>
 800983a:	4681      	mov	r9, r0
 800983c:	f7f6 fde2 	bl	8000404 <__aeabi_i2d>
 8009840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009844:	f7f6 fe48 	bl	80004d8 <__aeabi_dmul>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4630      	mov	r0, r6
 800984e:	4639      	mov	r1, r7
 8009850:	f7f6 fc8a 	bl	8000168 <__aeabi_dsub>
 8009854:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009858:	f805 6b01 	strb.w	r6, [r5], #1
 800985c:	9e06      	ldr	r6, [sp, #24]
 800985e:	4602      	mov	r2, r0
 8009860:	1bae      	subs	r6, r5, r6
 8009862:	45b0      	cmp	r8, r6
 8009864:	460b      	mov	r3, r1
 8009866:	d135      	bne.n	80098d4 <_dtoa_r+0x6d4>
 8009868:	f7f6 fc80 	bl	800016c <__adddf3>
 800986c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009870:	4606      	mov	r6, r0
 8009872:	460f      	mov	r7, r1
 8009874:	f7f7 f8c0 	bl	80009f8 <__aeabi_dcmpgt>
 8009878:	b9c8      	cbnz	r0, 80098ae <_dtoa_r+0x6ae>
 800987a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f7 f891 	bl	80009a8 <__aeabi_dcmpeq>
 8009886:	b110      	cbz	r0, 800988e <_dtoa_r+0x68e>
 8009888:	f019 0f01 	tst.w	r9, #1
 800988c:	d10f      	bne.n	80098ae <_dtoa_r+0x6ae>
 800988e:	4659      	mov	r1, fp
 8009890:	4620      	mov	r0, r4
 8009892:	f000 fc99 	bl	800a1c8 <_Bfree>
 8009896:	2300      	movs	r3, #0
 8009898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800989a:	702b      	strb	r3, [r5, #0]
 800989c:	f10a 0301 	add.w	r3, sl, #1
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f43f acf3 	beq.w	8009290 <_dtoa_r+0x90>
 80098aa:	601d      	str	r5, [r3, #0]
 80098ac:	e4f0      	b.n	8009290 <_dtoa_r+0x90>
 80098ae:	4657      	mov	r7, sl
 80098b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098b4:	1e6b      	subs	r3, r5, #1
 80098b6:	2a39      	cmp	r2, #57	; 0x39
 80098b8:	d106      	bne.n	80098c8 <_dtoa_r+0x6c8>
 80098ba:	9a06      	ldr	r2, [sp, #24]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d107      	bne.n	80098d0 <_dtoa_r+0x6d0>
 80098c0:	2330      	movs	r3, #48	; 0x30
 80098c2:	7013      	strb	r3, [r2, #0]
 80098c4:	4613      	mov	r3, r2
 80098c6:	3701      	adds	r7, #1
 80098c8:	781a      	ldrb	r2, [r3, #0]
 80098ca:	3201      	adds	r2, #1
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e791      	b.n	80097f4 <_dtoa_r+0x5f4>
 80098d0:	461d      	mov	r5, r3
 80098d2:	e7ed      	b.n	80098b0 <_dtoa_r+0x6b0>
 80098d4:	2200      	movs	r2, #0
 80098d6:	4b99      	ldr	r3, [pc, #612]	; (8009b3c <_dtoa_r+0x93c>)
 80098d8:	f7f6 fdfe 	bl	80004d8 <__aeabi_dmul>
 80098dc:	2200      	movs	r2, #0
 80098de:	2300      	movs	r3, #0
 80098e0:	4606      	mov	r6, r0
 80098e2:	460f      	mov	r7, r1
 80098e4:	f7f7 f860 	bl	80009a8 <__aeabi_dcmpeq>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d09e      	beq.n	800982a <_dtoa_r+0x62a>
 80098ec:	e7cf      	b.n	800988e <_dtoa_r+0x68e>
 80098ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098f0:	2a00      	cmp	r2, #0
 80098f2:	f000 8088 	beq.w	8009a06 <_dtoa_r+0x806>
 80098f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098f8:	2a01      	cmp	r2, #1
 80098fa:	dc6d      	bgt.n	80099d8 <_dtoa_r+0x7d8>
 80098fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098fe:	2a00      	cmp	r2, #0
 8009900:	d066      	beq.n	80099d0 <_dtoa_r+0x7d0>
 8009902:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009906:	464d      	mov	r5, r9
 8009908:	9e08      	ldr	r6, [sp, #32]
 800990a:	9a07      	ldr	r2, [sp, #28]
 800990c:	2101      	movs	r1, #1
 800990e:	441a      	add	r2, r3
 8009910:	4620      	mov	r0, r4
 8009912:	4499      	add	r9, r3
 8009914:	9207      	str	r2, [sp, #28]
 8009916:	f000 fcf7 	bl	800a308 <__i2b>
 800991a:	4607      	mov	r7, r0
 800991c:	2d00      	cmp	r5, #0
 800991e:	dd0b      	ble.n	8009938 <_dtoa_r+0x738>
 8009920:	9b07      	ldr	r3, [sp, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	dd08      	ble.n	8009938 <_dtoa_r+0x738>
 8009926:	42ab      	cmp	r3, r5
 8009928:	bfa8      	it	ge
 800992a:	462b      	movge	r3, r5
 800992c:	9a07      	ldr	r2, [sp, #28]
 800992e:	eba9 0903 	sub.w	r9, r9, r3
 8009932:	1aed      	subs	r5, r5, r3
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	9307      	str	r3, [sp, #28]
 8009938:	9b08      	ldr	r3, [sp, #32]
 800993a:	b1eb      	cbz	r3, 8009978 <_dtoa_r+0x778>
 800993c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993e:	2b00      	cmp	r3, #0
 8009940:	d065      	beq.n	8009a0e <_dtoa_r+0x80e>
 8009942:	b18e      	cbz	r6, 8009968 <_dtoa_r+0x768>
 8009944:	4639      	mov	r1, r7
 8009946:	4632      	mov	r2, r6
 8009948:	4620      	mov	r0, r4
 800994a:	f000 fd7b 	bl	800a444 <__pow5mult>
 800994e:	465a      	mov	r2, fp
 8009950:	4601      	mov	r1, r0
 8009952:	4607      	mov	r7, r0
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fce0 	bl	800a31a <__multiply>
 800995a:	4659      	mov	r1, fp
 800995c:	900a      	str	r0, [sp, #40]	; 0x28
 800995e:	4620      	mov	r0, r4
 8009960:	f000 fc32 	bl	800a1c8 <_Bfree>
 8009964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009966:	469b      	mov	fp, r3
 8009968:	9b08      	ldr	r3, [sp, #32]
 800996a:	1b9a      	subs	r2, r3, r6
 800996c:	d004      	beq.n	8009978 <_dtoa_r+0x778>
 800996e:	4659      	mov	r1, fp
 8009970:	4620      	mov	r0, r4
 8009972:	f000 fd67 	bl	800a444 <__pow5mult>
 8009976:	4683      	mov	fp, r0
 8009978:	2101      	movs	r1, #1
 800997a:	4620      	mov	r0, r4
 800997c:	f000 fcc4 	bl	800a308 <__i2b>
 8009980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009982:	4606      	mov	r6, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 81c6 	beq.w	8009d16 <_dtoa_r+0xb16>
 800998a:	461a      	mov	r2, r3
 800998c:	4601      	mov	r1, r0
 800998e:	4620      	mov	r0, r4
 8009990:	f000 fd58 	bl	800a444 <__pow5mult>
 8009994:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009996:	4606      	mov	r6, r0
 8009998:	2b01      	cmp	r3, #1
 800999a:	dc3e      	bgt.n	8009a1a <_dtoa_r+0x81a>
 800999c:	9b02      	ldr	r3, [sp, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d137      	bne.n	8009a12 <_dtoa_r+0x812>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d134      	bne.n	8009a16 <_dtoa_r+0x816>
 80099ac:	9b03      	ldr	r3, [sp, #12]
 80099ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	0d1b      	lsrs	r3, r3, #20
 80099b4:	051b      	lsls	r3, r3, #20
 80099b6:	b12b      	cbz	r3, 80099c4 <_dtoa_r+0x7c4>
 80099b8:	9b07      	ldr	r3, [sp, #28]
 80099ba:	f109 0901 	add.w	r9, r9, #1
 80099be:	3301      	adds	r3, #1
 80099c0:	9307      	str	r3, [sp, #28]
 80099c2:	2301      	movs	r3, #1
 80099c4:	9308      	str	r3, [sp, #32]
 80099c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d128      	bne.n	8009a1e <_dtoa_r+0x81e>
 80099cc:	2001      	movs	r0, #1
 80099ce:	e02e      	b.n	8009a2e <_dtoa_r+0x82e>
 80099d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099d6:	e796      	b.n	8009906 <_dtoa_r+0x706>
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80099de:	42b3      	cmp	r3, r6
 80099e0:	bfb7      	itett	lt
 80099e2:	9b08      	ldrlt	r3, [sp, #32]
 80099e4:	1b9e      	subge	r6, r3, r6
 80099e6:	1af2      	sublt	r2, r6, r3
 80099e8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80099ea:	bfbf      	itttt	lt
 80099ec:	9608      	strlt	r6, [sp, #32]
 80099ee:	189b      	addlt	r3, r3, r2
 80099f0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80099f2:	2600      	movlt	r6, #0
 80099f4:	f1b8 0f00 	cmp.w	r8, #0
 80099f8:	bfb9      	ittee	lt
 80099fa:	eba9 0508 	sublt.w	r5, r9, r8
 80099fe:	2300      	movlt	r3, #0
 8009a00:	464d      	movge	r5, r9
 8009a02:	4643      	movge	r3, r8
 8009a04:	e781      	b.n	800990a <_dtoa_r+0x70a>
 8009a06:	9e08      	ldr	r6, [sp, #32]
 8009a08:	464d      	mov	r5, r9
 8009a0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a0c:	e786      	b.n	800991c <_dtoa_r+0x71c>
 8009a0e:	9a08      	ldr	r2, [sp, #32]
 8009a10:	e7ad      	b.n	800996e <_dtoa_r+0x76e>
 8009a12:	2300      	movs	r3, #0
 8009a14:	e7d6      	b.n	80099c4 <_dtoa_r+0x7c4>
 8009a16:	9b02      	ldr	r3, [sp, #8]
 8009a18:	e7d4      	b.n	80099c4 <_dtoa_r+0x7c4>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9308      	str	r3, [sp, #32]
 8009a1e:	6933      	ldr	r3, [r6, #16]
 8009a20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a24:	6918      	ldr	r0, [r3, #16]
 8009a26:	f000 fc21 	bl	800a26c <__hi0bits>
 8009a2a:	f1c0 0020 	rsb	r0, r0, #32
 8009a2e:	9b07      	ldr	r3, [sp, #28]
 8009a30:	4418      	add	r0, r3
 8009a32:	f010 001f 	ands.w	r0, r0, #31
 8009a36:	d047      	beq.n	8009ac8 <_dtoa_r+0x8c8>
 8009a38:	f1c0 0320 	rsb	r3, r0, #32
 8009a3c:	2b04      	cmp	r3, #4
 8009a3e:	dd3b      	ble.n	8009ab8 <_dtoa_r+0x8b8>
 8009a40:	9b07      	ldr	r3, [sp, #28]
 8009a42:	f1c0 001c 	rsb	r0, r0, #28
 8009a46:	4481      	add	r9, r0
 8009a48:	4405      	add	r5, r0
 8009a4a:	4403      	add	r3, r0
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	f1b9 0f00 	cmp.w	r9, #0
 8009a52:	dd05      	ble.n	8009a60 <_dtoa_r+0x860>
 8009a54:	4659      	mov	r1, fp
 8009a56:	464a      	mov	r2, r9
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fd41 	bl	800a4e0 <__lshift>
 8009a5e:	4683      	mov	fp, r0
 8009a60:	9b07      	ldr	r3, [sp, #28]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dd05      	ble.n	8009a72 <_dtoa_r+0x872>
 8009a66:	4631      	mov	r1, r6
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fd38 	bl	800a4e0 <__lshift>
 8009a70:	4606      	mov	r6, r0
 8009a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a74:	b353      	cbz	r3, 8009acc <_dtoa_r+0x8cc>
 8009a76:	4631      	mov	r1, r6
 8009a78:	4658      	mov	r0, fp
 8009a7a:	f000 fd85 	bl	800a588 <__mcmp>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	da24      	bge.n	8009acc <_dtoa_r+0x8cc>
 8009a82:	2300      	movs	r3, #0
 8009a84:	4659      	mov	r1, fp
 8009a86:	220a      	movs	r2, #10
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f000 fbb4 	bl	800a1f6 <__multadd>
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a94:	4683      	mov	fp, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 8144 	beq.w	8009d24 <_dtoa_r+0xb24>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4639      	mov	r1, r7
 8009aa0:	220a      	movs	r2, #10
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 fba7 	bl	800a1f6 <__multadd>
 8009aa8:	9b04      	ldr	r3, [sp, #16]
 8009aaa:	4607      	mov	r7, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dc4d      	bgt.n	8009b4c <_dtoa_r+0x94c>
 8009ab0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	dd4a      	ble.n	8009b4c <_dtoa_r+0x94c>
 8009ab6:	e011      	b.n	8009adc <_dtoa_r+0x8dc>
 8009ab8:	d0c9      	beq.n	8009a4e <_dtoa_r+0x84e>
 8009aba:	9a07      	ldr	r2, [sp, #28]
 8009abc:	331c      	adds	r3, #28
 8009abe:	441a      	add	r2, r3
 8009ac0:	4499      	add	r9, r3
 8009ac2:	441d      	add	r5, r3
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	e7c1      	b.n	8009a4c <_dtoa_r+0x84c>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	e7f6      	b.n	8009aba <_dtoa_r+0x8ba>
 8009acc:	f1b8 0f00 	cmp.w	r8, #0
 8009ad0:	dc36      	bgt.n	8009b40 <_dtoa_r+0x940>
 8009ad2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	dd33      	ble.n	8009b40 <_dtoa_r+0x940>
 8009ad8:	f8cd 8010 	str.w	r8, [sp, #16]
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	b963      	cbnz	r3, 8009afa <_dtoa_r+0x8fa>
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	2205      	movs	r2, #5
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	f000 fb86 	bl	800a1f6 <__multadd>
 8009aea:	4601      	mov	r1, r0
 8009aec:	4606      	mov	r6, r0
 8009aee:	4658      	mov	r0, fp
 8009af0:	f000 fd4a 	bl	800a588 <__mcmp>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f73f add3 	bgt.w	80096a0 <_dtoa_r+0x4a0>
 8009afa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009afc:	9d06      	ldr	r5, [sp, #24]
 8009afe:	ea6f 0a03 	mvn.w	sl, r3
 8009b02:	f04f 0900 	mov.w	r9, #0
 8009b06:	4631      	mov	r1, r6
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fb5d 	bl	800a1c8 <_Bfree>
 8009b0e:	2f00      	cmp	r7, #0
 8009b10:	f43f aebd 	beq.w	800988e <_dtoa_r+0x68e>
 8009b14:	f1b9 0f00 	cmp.w	r9, #0
 8009b18:	d005      	beq.n	8009b26 <_dtoa_r+0x926>
 8009b1a:	45b9      	cmp	r9, r7
 8009b1c:	d003      	beq.n	8009b26 <_dtoa_r+0x926>
 8009b1e:	4649      	mov	r1, r9
 8009b20:	4620      	mov	r0, r4
 8009b22:	f000 fb51 	bl	800a1c8 <_Bfree>
 8009b26:	4639      	mov	r1, r7
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fb4d 	bl	800a1c8 <_Bfree>
 8009b2e:	e6ae      	b.n	800988e <_dtoa_r+0x68e>
 8009b30:	2600      	movs	r6, #0
 8009b32:	4637      	mov	r7, r6
 8009b34:	e7e1      	b.n	8009afa <_dtoa_r+0x8fa>
 8009b36:	46ba      	mov	sl, r7
 8009b38:	4637      	mov	r7, r6
 8009b3a:	e5b1      	b.n	80096a0 <_dtoa_r+0x4a0>
 8009b3c:	40240000 	.word	0x40240000
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 80f3 	beq.w	8009d32 <_dtoa_r+0xb32>
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	dd05      	ble.n	8009b5c <_dtoa_r+0x95c>
 8009b50:	4639      	mov	r1, r7
 8009b52:	462a      	mov	r2, r5
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 fcc3 	bl	800a4e0 <__lshift>
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d04c      	beq.n	8009bfc <_dtoa_r+0x9fc>
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fafb 	bl	800a160 <_Balloc>
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	f107 010c 	add.w	r1, r7, #12
 8009b72:	3202      	adds	r2, #2
 8009b74:	0092      	lsls	r2, r2, #2
 8009b76:	300c      	adds	r0, #12
 8009b78:	f7fe fca2 	bl	80084c0 <memcpy>
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	4629      	mov	r1, r5
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 fcad 	bl	800a4e0 <__lshift>
 8009b86:	46b9      	mov	r9, r7
 8009b88:	4607      	mov	r7, r0
 8009b8a:	9b06      	ldr	r3, [sp, #24]
 8009b8c:	9307      	str	r3, [sp, #28]
 8009b8e:	9b02      	ldr	r3, [sp, #8]
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	9308      	str	r3, [sp, #32]
 8009b96:	4631      	mov	r1, r6
 8009b98:	4658      	mov	r0, fp
 8009b9a:	f7ff faa3 	bl	80090e4 <quorem>
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ba6:	4658      	mov	r0, fp
 8009ba8:	f000 fcee 	bl	800a588 <__mcmp>
 8009bac:	463a      	mov	r2, r7
 8009bae:	9002      	str	r0, [sp, #8]
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 fd02 	bl	800a5bc <__mdiff>
 8009bb8:	68c3      	ldr	r3, [r0, #12]
 8009bba:	4602      	mov	r2, r0
 8009bbc:	bb03      	cbnz	r3, 8009c00 <_dtoa_r+0xa00>
 8009bbe:	4601      	mov	r1, r0
 8009bc0:	9009      	str	r0, [sp, #36]	; 0x24
 8009bc2:	4658      	mov	r0, fp
 8009bc4:	f000 fce0 	bl	800a588 <__mcmp>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4620      	mov	r0, r4
 8009bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd2:	f000 faf9 	bl	800a1c8 <_Bfree>
 8009bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd8:	b9a3      	cbnz	r3, 8009c04 <_dtoa_r+0xa04>
 8009bda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009bdc:	b992      	cbnz	r2, 8009c04 <_dtoa_r+0xa04>
 8009bde:	9a08      	ldr	r2, [sp, #32]
 8009be0:	b982      	cbnz	r2, 8009c04 <_dtoa_r+0xa04>
 8009be2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009be6:	d029      	beq.n	8009c3c <_dtoa_r+0xa3c>
 8009be8:	9b02      	ldr	r3, [sp, #8]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	dd01      	ble.n	8009bf2 <_dtoa_r+0x9f2>
 8009bee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	1c5d      	adds	r5, r3, #1
 8009bf6:	f883 8000 	strb.w	r8, [r3]
 8009bfa:	e784      	b.n	8009b06 <_dtoa_r+0x906>
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	e7c2      	b.n	8009b86 <_dtoa_r+0x986>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7e3      	b.n	8009bcc <_dtoa_r+0x9cc>
 8009c04:	9a02      	ldr	r2, [sp, #8]
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	db04      	blt.n	8009c14 <_dtoa_r+0xa14>
 8009c0a:	d123      	bne.n	8009c54 <_dtoa_r+0xa54>
 8009c0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009c0e:	bb0a      	cbnz	r2, 8009c54 <_dtoa_r+0xa54>
 8009c10:	9a08      	ldr	r2, [sp, #32]
 8009c12:	b9fa      	cbnz	r2, 8009c54 <_dtoa_r+0xa54>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	ddec      	ble.n	8009bf2 <_dtoa_r+0x9f2>
 8009c18:	4659      	mov	r1, fp
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fc5f 	bl	800a4e0 <__lshift>
 8009c22:	4631      	mov	r1, r6
 8009c24:	4683      	mov	fp, r0
 8009c26:	f000 fcaf 	bl	800a588 <__mcmp>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	dc03      	bgt.n	8009c36 <_dtoa_r+0xa36>
 8009c2e:	d1e0      	bne.n	8009bf2 <_dtoa_r+0x9f2>
 8009c30:	f018 0f01 	tst.w	r8, #1
 8009c34:	d0dd      	beq.n	8009bf2 <_dtoa_r+0x9f2>
 8009c36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c3a:	d1d8      	bne.n	8009bee <_dtoa_r+0x9ee>
 8009c3c:	9b07      	ldr	r3, [sp, #28]
 8009c3e:	9a07      	ldr	r2, [sp, #28]
 8009c40:	1c5d      	adds	r5, r3, #1
 8009c42:	2339      	movs	r3, #57	; 0x39
 8009c44:	7013      	strb	r3, [r2, #0]
 8009c46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c4a:	1e6a      	subs	r2, r5, #1
 8009c4c:	2b39      	cmp	r3, #57	; 0x39
 8009c4e:	d04d      	beq.n	8009cec <_dtoa_r+0xaec>
 8009c50:	3301      	adds	r3, #1
 8009c52:	e052      	b.n	8009cfa <_dtoa_r+0xafa>
 8009c54:	9a07      	ldr	r2, [sp, #28]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f102 0501 	add.w	r5, r2, #1
 8009c5c:	dd06      	ble.n	8009c6c <_dtoa_r+0xa6c>
 8009c5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c62:	d0eb      	beq.n	8009c3c <_dtoa_r+0xa3c>
 8009c64:	f108 0801 	add.w	r8, r8, #1
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	e7c4      	b.n	8009bf6 <_dtoa_r+0x9f6>
 8009c6c:	9b06      	ldr	r3, [sp, #24]
 8009c6e:	9a04      	ldr	r2, [sp, #16]
 8009c70:	1aeb      	subs	r3, r5, r3
 8009c72:	4293      	cmp	r3, r2
 8009c74:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009c78:	d021      	beq.n	8009cbe <_dtoa_r+0xabe>
 8009c7a:	4659      	mov	r1, fp
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	220a      	movs	r2, #10
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fab8 	bl	800a1f6 <__multadd>
 8009c86:	45b9      	cmp	r9, r7
 8009c88:	4683      	mov	fp, r0
 8009c8a:	f04f 0300 	mov.w	r3, #0
 8009c8e:	f04f 020a 	mov.w	r2, #10
 8009c92:	4649      	mov	r1, r9
 8009c94:	4620      	mov	r0, r4
 8009c96:	d105      	bne.n	8009ca4 <_dtoa_r+0xaa4>
 8009c98:	f000 faad 	bl	800a1f6 <__multadd>
 8009c9c:	4681      	mov	r9, r0
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	9507      	str	r5, [sp, #28]
 8009ca2:	e778      	b.n	8009b96 <_dtoa_r+0x996>
 8009ca4:	f000 faa7 	bl	800a1f6 <__multadd>
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4681      	mov	r9, r0
 8009cac:	2300      	movs	r3, #0
 8009cae:	220a      	movs	r2, #10
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 faa0 	bl	800a1f6 <__multadd>
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	e7f2      	b.n	8009ca0 <_dtoa_r+0xaa0>
 8009cba:	f04f 0900 	mov.w	r9, #0
 8009cbe:	4659      	mov	r1, fp
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 fc0c 	bl	800a4e0 <__lshift>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4683      	mov	fp, r0
 8009ccc:	f000 fc5c 	bl	800a588 <__mcmp>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	dcb8      	bgt.n	8009c46 <_dtoa_r+0xa46>
 8009cd4:	d102      	bne.n	8009cdc <_dtoa_r+0xadc>
 8009cd6:	f018 0f01 	tst.w	r8, #1
 8009cda:	d1b4      	bne.n	8009c46 <_dtoa_r+0xa46>
 8009cdc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ce0:	1e6a      	subs	r2, r5, #1
 8009ce2:	2b30      	cmp	r3, #48	; 0x30
 8009ce4:	f47f af0f 	bne.w	8009b06 <_dtoa_r+0x906>
 8009ce8:	4615      	mov	r5, r2
 8009cea:	e7f7      	b.n	8009cdc <_dtoa_r+0xadc>
 8009cec:	9b06      	ldr	r3, [sp, #24]
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d105      	bne.n	8009cfe <_dtoa_r+0xafe>
 8009cf2:	2331      	movs	r3, #49	; 0x31
 8009cf4:	9a06      	ldr	r2, [sp, #24]
 8009cf6:	f10a 0a01 	add.w	sl, sl, #1
 8009cfa:	7013      	strb	r3, [r2, #0]
 8009cfc:	e703      	b.n	8009b06 <_dtoa_r+0x906>
 8009cfe:	4615      	mov	r5, r2
 8009d00:	e7a1      	b.n	8009c46 <_dtoa_r+0xa46>
 8009d02:	4b17      	ldr	r3, [pc, #92]	; (8009d60 <_dtoa_r+0xb60>)
 8009d04:	f7ff bae1 	b.w	80092ca <_dtoa_r+0xca>
 8009d08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f47f aabb 	bne.w	8009286 <_dtoa_r+0x86>
 8009d10:	4b14      	ldr	r3, [pc, #80]	; (8009d64 <_dtoa_r+0xb64>)
 8009d12:	f7ff bada 	b.w	80092ca <_dtoa_r+0xca>
 8009d16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	f77f ae3f 	ble.w	800999c <_dtoa_r+0x79c>
 8009d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d20:	9308      	str	r3, [sp, #32]
 8009d22:	e653      	b.n	80099cc <_dtoa_r+0x7cc>
 8009d24:	9b04      	ldr	r3, [sp, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	dc03      	bgt.n	8009d32 <_dtoa_r+0xb32>
 8009d2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	f73f aed5 	bgt.w	8009adc <_dtoa_r+0x8dc>
 8009d32:	9d06      	ldr	r5, [sp, #24]
 8009d34:	4631      	mov	r1, r6
 8009d36:	4658      	mov	r0, fp
 8009d38:	f7ff f9d4 	bl	80090e4 <quorem>
 8009d3c:	9b06      	ldr	r3, [sp, #24]
 8009d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d42:	f805 8b01 	strb.w	r8, [r5], #1
 8009d46:	9a04      	ldr	r2, [sp, #16]
 8009d48:	1aeb      	subs	r3, r5, r3
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	ddb5      	ble.n	8009cba <_dtoa_r+0xaba>
 8009d4e:	4659      	mov	r1, fp
 8009d50:	2300      	movs	r3, #0
 8009d52:	220a      	movs	r2, #10
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fa4e 	bl	800a1f6 <__multadd>
 8009d5a:	4683      	mov	fp, r0
 8009d5c:	e7ea      	b.n	8009d34 <_dtoa_r+0xb34>
 8009d5e:	bf00      	nop
 8009d60:	0800b044 	.word	0x0800b044
 8009d64:	0800b068 	.word	0x0800b068

08009d68 <__sflush_r>:
 8009d68:	898a      	ldrh	r2, [r1, #12]
 8009d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	4605      	mov	r5, r0
 8009d70:	0710      	lsls	r0, r2, #28
 8009d72:	460c      	mov	r4, r1
 8009d74:	d458      	bmi.n	8009e28 <__sflush_r+0xc0>
 8009d76:	684b      	ldr	r3, [r1, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dc05      	bgt.n	8009d88 <__sflush_r+0x20>
 8009d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dc02      	bgt.n	8009d88 <__sflush_r+0x20>
 8009d82:	2000      	movs	r0, #0
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	d0f9      	beq.n	8009d82 <__sflush_r+0x1a>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d94:	682f      	ldr	r7, [r5, #0]
 8009d96:	6a21      	ldr	r1, [r4, #32]
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	d032      	beq.n	8009e02 <__sflush_r+0x9a>
 8009d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	075a      	lsls	r2, r3, #29
 8009da2:	d505      	bpl.n	8009db0 <__sflush_r+0x48>
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	1ac0      	subs	r0, r0, r3
 8009da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009daa:	b10b      	cbz	r3, 8009db0 <__sflush_r+0x48>
 8009dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dae:	1ac0      	subs	r0, r0, r3
 8009db0:	2300      	movs	r3, #0
 8009db2:	4602      	mov	r2, r0
 8009db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009db6:	6a21      	ldr	r1, [r4, #32]
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b0      	blx	r6
 8009dbc:	1c43      	adds	r3, r0, #1
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	d106      	bne.n	8009dd0 <__sflush_r+0x68>
 8009dc2:	6829      	ldr	r1, [r5, #0]
 8009dc4:	291d      	cmp	r1, #29
 8009dc6:	d848      	bhi.n	8009e5a <__sflush_r+0xf2>
 8009dc8:	4a29      	ldr	r2, [pc, #164]	; (8009e70 <__sflush_r+0x108>)
 8009dca:	40ca      	lsrs	r2, r1
 8009dcc:	07d6      	lsls	r6, r2, #31
 8009dce:	d544      	bpl.n	8009e5a <__sflush_r+0xf2>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	6062      	str	r2, [r4, #4]
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	04d9      	lsls	r1, r3, #19
 8009dd8:	6022      	str	r2, [r4, #0]
 8009dda:	d504      	bpl.n	8009de6 <__sflush_r+0x7e>
 8009ddc:	1c42      	adds	r2, r0, #1
 8009dde:	d101      	bne.n	8009de4 <__sflush_r+0x7c>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b903      	cbnz	r3, 8009de6 <__sflush_r+0x7e>
 8009de4:	6560      	str	r0, [r4, #84]	; 0x54
 8009de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de8:	602f      	str	r7, [r5, #0]
 8009dea:	2900      	cmp	r1, #0
 8009dec:	d0c9      	beq.n	8009d82 <__sflush_r+0x1a>
 8009dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df2:	4299      	cmp	r1, r3
 8009df4:	d002      	beq.n	8009dfc <__sflush_r+0x94>
 8009df6:	4628      	mov	r0, r5
 8009df8:	f7fe fb76 	bl	80084e8 <_free_r>
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8009e00:	e7c0      	b.n	8009d84 <__sflush_r+0x1c>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b0      	blx	r6
 8009e08:	1c41      	adds	r1, r0, #1
 8009e0a:	d1c8      	bne.n	8009d9e <__sflush_r+0x36>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d0c5      	beq.n	8009d9e <__sflush_r+0x36>
 8009e12:	2b1d      	cmp	r3, #29
 8009e14:	d001      	beq.n	8009e1a <__sflush_r+0xb2>
 8009e16:	2b16      	cmp	r3, #22
 8009e18:	d101      	bne.n	8009e1e <__sflush_r+0xb6>
 8009e1a:	602f      	str	r7, [r5, #0]
 8009e1c:	e7b1      	b.n	8009d82 <__sflush_r+0x1a>
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	e7ad      	b.n	8009d84 <__sflush_r+0x1c>
 8009e28:	690f      	ldr	r7, [r1, #16]
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	d0a9      	beq.n	8009d82 <__sflush_r+0x1a>
 8009e2e:	0793      	lsls	r3, r2, #30
 8009e30:	bf18      	it	ne
 8009e32:	2300      	movne	r3, #0
 8009e34:	680e      	ldr	r6, [r1, #0]
 8009e36:	bf08      	it	eq
 8009e38:	694b      	ldreq	r3, [r1, #20]
 8009e3a:	eba6 0807 	sub.w	r8, r6, r7
 8009e3e:	600f      	str	r7, [r1, #0]
 8009e40:	608b      	str	r3, [r1, #8]
 8009e42:	f1b8 0f00 	cmp.w	r8, #0
 8009e46:	dd9c      	ble.n	8009d82 <__sflush_r+0x1a>
 8009e48:	4643      	mov	r3, r8
 8009e4a:	463a      	mov	r2, r7
 8009e4c:	6a21      	ldr	r1, [r4, #32]
 8009e4e:	4628      	mov	r0, r5
 8009e50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e52:	47b0      	blx	r6
 8009e54:	2800      	cmp	r0, #0
 8009e56:	dc06      	bgt.n	8009e66 <__sflush_r+0xfe>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e64:	e78e      	b.n	8009d84 <__sflush_r+0x1c>
 8009e66:	4407      	add	r7, r0
 8009e68:	eba8 0800 	sub.w	r8, r8, r0
 8009e6c:	e7e9      	b.n	8009e42 <__sflush_r+0xda>
 8009e6e:	bf00      	nop
 8009e70:	20400001 	.word	0x20400001

08009e74 <_fflush_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	690b      	ldr	r3, [r1, #16]
 8009e78:	4605      	mov	r5, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	b1db      	cbz	r3, 8009eb6 <_fflush_r+0x42>
 8009e7e:	b118      	cbz	r0, 8009e88 <_fflush_r+0x14>
 8009e80:	6983      	ldr	r3, [r0, #24]
 8009e82:	b90b      	cbnz	r3, 8009e88 <_fflush_r+0x14>
 8009e84:	f000 f860 	bl	8009f48 <__sinit>
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <_fflush_r+0x48>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	d109      	bne.n	8009ea2 <_fflush_r+0x2e>
 8009e8e:	686c      	ldr	r4, [r5, #4]
 8009e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e94:	b17b      	cbz	r3, 8009eb6 <_fflush_r+0x42>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e9e:	f7ff bf63 	b.w	8009d68 <__sflush_r>
 8009ea2:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <_fflush_r+0x4c>)
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	d101      	bne.n	8009eac <_fflush_r+0x38>
 8009ea8:	68ac      	ldr	r4, [r5, #8]
 8009eaa:	e7f1      	b.n	8009e90 <_fflush_r+0x1c>
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <_fflush_r+0x50>)
 8009eae:	429c      	cmp	r4, r3
 8009eb0:	bf08      	it	eq
 8009eb2:	68ec      	ldreq	r4, [r5, #12]
 8009eb4:	e7ec      	b.n	8009e90 <_fflush_r+0x1c>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	0800b098 	.word	0x0800b098
 8009ec0:	0800b0b8 	.word	0x0800b0b8
 8009ec4:	0800b078 	.word	0x0800b078

08009ec8 <std>:
 8009ec8:	2300      	movs	r3, #0
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	e9c0 3300 	strd	r3, r3, [r0]
 8009ed2:	6083      	str	r3, [r0, #8]
 8009ed4:	8181      	strh	r1, [r0, #12]
 8009ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8009ed8:	81c2      	strh	r2, [r0, #14]
 8009eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ede:	6183      	str	r3, [r0, #24]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	2208      	movs	r2, #8
 8009ee4:	305c      	adds	r0, #92	; 0x5c
 8009ee6:	f7fe faf6 	bl	80084d6 <memset>
 8009eea:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <std+0x38>)
 8009eec:	6224      	str	r4, [r4, #32]
 8009eee:	6263      	str	r3, [r4, #36]	; 0x24
 8009ef0:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <std+0x3c>)
 8009ef2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ef4:	4b04      	ldr	r3, [pc, #16]	; (8009f08 <std+0x40>)
 8009ef6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <std+0x44>)
 8009efa:	6323      	str	r3, [r4, #48]	; 0x30
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop
 8009f00:	0800ac55 	.word	0x0800ac55
 8009f04:	0800ac77 	.word	0x0800ac77
 8009f08:	0800acaf 	.word	0x0800acaf
 8009f0c:	0800acd3 	.word	0x0800acd3

08009f10 <_cleanup_r>:
 8009f10:	4901      	ldr	r1, [pc, #4]	; (8009f18 <_cleanup_r+0x8>)
 8009f12:	f000 b885 	b.w	800a020 <_fwalk_reent>
 8009f16:	bf00      	nop
 8009f18:	08009e75 	.word	0x08009e75

08009f1c <__sfmoreglue>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	2568      	movs	r5, #104	; 0x68
 8009f20:	1e4a      	subs	r2, r1, #1
 8009f22:	4355      	muls	r5, r2
 8009f24:	460e      	mov	r6, r1
 8009f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f2a:	f7fe fb29 	bl	8008580 <_malloc_r>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b140      	cbz	r0, 8009f44 <__sfmoreglue+0x28>
 8009f32:	2100      	movs	r1, #0
 8009f34:	e9c0 1600 	strd	r1, r6, [r0]
 8009f38:	300c      	adds	r0, #12
 8009f3a:	60a0      	str	r0, [r4, #8]
 8009f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f40:	f7fe fac9 	bl	80084d6 <memset>
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}

08009f48 <__sinit>:
 8009f48:	6983      	ldr	r3, [r0, #24]
 8009f4a:	b510      	push	{r4, lr}
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	bb33      	cbnz	r3, 8009f9e <__sinit+0x56>
 8009f50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009f54:	6503      	str	r3, [r0, #80]	; 0x50
 8009f56:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <__sinit+0x58>)
 8009f58:	4a12      	ldr	r2, [pc, #72]	; (8009fa4 <__sinit+0x5c>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6282      	str	r2, [r0, #40]	; 0x28
 8009f5e:	4298      	cmp	r0, r3
 8009f60:	bf04      	itt	eq
 8009f62:	2301      	moveq	r3, #1
 8009f64:	6183      	streq	r3, [r0, #24]
 8009f66:	f000 f81f 	bl	8009fa8 <__sfp>
 8009f6a:	6060      	str	r0, [r4, #4]
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f000 f81b 	bl	8009fa8 <__sfp>
 8009f72:	60a0      	str	r0, [r4, #8]
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 f817 	bl	8009fa8 <__sfp>
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	60e0      	str	r0, [r4, #12]
 8009f7e:	2104      	movs	r1, #4
 8009f80:	6860      	ldr	r0, [r4, #4]
 8009f82:	f7ff ffa1 	bl	8009ec8 <std>
 8009f86:	2201      	movs	r2, #1
 8009f88:	2109      	movs	r1, #9
 8009f8a:	68a0      	ldr	r0, [r4, #8]
 8009f8c:	f7ff ff9c 	bl	8009ec8 <std>
 8009f90:	2202      	movs	r2, #2
 8009f92:	2112      	movs	r1, #18
 8009f94:	68e0      	ldr	r0, [r4, #12]
 8009f96:	f7ff ff97 	bl	8009ec8 <std>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	61a3      	str	r3, [r4, #24]
 8009f9e:	bd10      	pop	{r4, pc}
 8009fa0:	0800b030 	.word	0x0800b030
 8009fa4:	08009f11 	.word	0x08009f11

08009fa8 <__sfp>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	4b1b      	ldr	r3, [pc, #108]	; (800a018 <__sfp+0x70>)
 8009fac:	4607      	mov	r7, r0
 8009fae:	681e      	ldr	r6, [r3, #0]
 8009fb0:	69b3      	ldr	r3, [r6, #24]
 8009fb2:	b913      	cbnz	r3, 8009fba <__sfp+0x12>
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ffc7 	bl	8009f48 <__sinit>
 8009fba:	3648      	adds	r6, #72	; 0x48
 8009fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	d503      	bpl.n	8009fcc <__sfp+0x24>
 8009fc4:	6833      	ldr	r3, [r6, #0]
 8009fc6:	b133      	cbz	r3, 8009fd6 <__sfp+0x2e>
 8009fc8:	6836      	ldr	r6, [r6, #0]
 8009fca:	e7f7      	b.n	8009fbc <__sfp+0x14>
 8009fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fd0:	b16d      	cbz	r5, 8009fee <__sfp+0x46>
 8009fd2:	3468      	adds	r4, #104	; 0x68
 8009fd4:	e7f4      	b.n	8009fc0 <__sfp+0x18>
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4638      	mov	r0, r7
 8009fda:	f7ff ff9f 	bl	8009f1c <__sfmoreglue>
 8009fde:	6030      	str	r0, [r6, #0]
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1f1      	bne.n	8009fc8 <__sfp+0x20>
 8009fe4:	230c      	movs	r3, #12
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	603b      	str	r3, [r7, #0]
 8009fea:	4620      	mov	r0, r4
 8009fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fee:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <__sfp+0x74>)
 8009ff0:	6665      	str	r5, [r4, #100]	; 0x64
 8009ff2:	e9c4 5500 	strd	r5, r5, [r4]
 8009ff6:	60a5      	str	r5, [r4, #8]
 8009ff8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009ffc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a000:	2208      	movs	r2, #8
 800a002:	4629      	mov	r1, r5
 800a004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a008:	f7fe fa65 	bl	80084d6 <memset>
 800a00c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a014:	e7e9      	b.n	8009fea <__sfp+0x42>
 800a016:	bf00      	nop
 800a018:	0800b030 	.word	0x0800b030
 800a01c:	ffff0001 	.word	0xffff0001

0800a020 <_fwalk_reent>:
 800a020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a024:	4680      	mov	r8, r0
 800a026:	4689      	mov	r9, r1
 800a028:	2600      	movs	r6, #0
 800a02a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a02e:	b914      	cbnz	r4, 800a036 <_fwalk_reent+0x16>
 800a030:	4630      	mov	r0, r6
 800a032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a036:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a03a:	3f01      	subs	r7, #1
 800a03c:	d501      	bpl.n	800a042 <_fwalk_reent+0x22>
 800a03e:	6824      	ldr	r4, [r4, #0]
 800a040:	e7f5      	b.n	800a02e <_fwalk_reent+0xe>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d907      	bls.n	800a058 <_fwalk_reent+0x38>
 800a048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a04c:	3301      	adds	r3, #1
 800a04e:	d003      	beq.n	800a058 <_fwalk_reent+0x38>
 800a050:	4629      	mov	r1, r5
 800a052:	4640      	mov	r0, r8
 800a054:	47c8      	blx	r9
 800a056:	4306      	orrs	r6, r0
 800a058:	3568      	adds	r5, #104	; 0x68
 800a05a:	e7ee      	b.n	800a03a <_fwalk_reent+0x1a>

0800a05c <_localeconv_r>:
 800a05c:	4b04      	ldr	r3, [pc, #16]	; (800a070 <_localeconv_r+0x14>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	6a18      	ldr	r0, [r3, #32]
 800a062:	4b04      	ldr	r3, [pc, #16]	; (800a074 <_localeconv_r+0x18>)
 800a064:	2800      	cmp	r0, #0
 800a066:	bf08      	it	eq
 800a068:	4618      	moveq	r0, r3
 800a06a:	30f0      	adds	r0, #240	; 0xf0
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	2000001c 	.word	0x2000001c
 800a074:	20000080 	.word	0x20000080

0800a078 <__swhatbuf_r>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	460e      	mov	r6, r1
 800a07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a080:	b096      	sub	sp, #88	; 0x58
 800a082:	2900      	cmp	r1, #0
 800a084:	4614      	mov	r4, r2
 800a086:	461d      	mov	r5, r3
 800a088:	da07      	bge.n	800a09a <__swhatbuf_r+0x22>
 800a08a:	2300      	movs	r3, #0
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	89b3      	ldrh	r3, [r6, #12]
 800a090:	061a      	lsls	r2, r3, #24
 800a092:	d410      	bmi.n	800a0b6 <__swhatbuf_r+0x3e>
 800a094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a098:	e00e      	b.n	800a0b8 <__swhatbuf_r+0x40>
 800a09a:	466a      	mov	r2, sp
 800a09c:	f000 fe40 	bl	800ad20 <_fstat_r>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	dbf2      	blt.n	800a08a <__swhatbuf_r+0x12>
 800a0a4:	9a01      	ldr	r2, [sp, #4]
 800a0a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a0aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a0ae:	425a      	negs	r2, r3
 800a0b0:	415a      	adcs	r2, r3
 800a0b2:	602a      	str	r2, [r5, #0]
 800a0b4:	e7ee      	b.n	800a094 <__swhatbuf_r+0x1c>
 800a0b6:	2340      	movs	r3, #64	; 0x40
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	6023      	str	r3, [r4, #0]
 800a0bc:	b016      	add	sp, #88	; 0x58
 800a0be:	bd70      	pop	{r4, r5, r6, pc}

0800a0c0 <__smakebuf_r>:
 800a0c0:	898b      	ldrh	r3, [r1, #12]
 800a0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0c4:	079d      	lsls	r5, r3, #30
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	d507      	bpl.n	800a0dc <__smakebuf_r+0x1c>
 800a0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	6123      	str	r3, [r4, #16]
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	6163      	str	r3, [r4, #20]
 800a0d8:	b002      	add	sp, #8
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	ab01      	add	r3, sp, #4
 800a0de:	466a      	mov	r2, sp
 800a0e0:	f7ff ffca 	bl	800a078 <__swhatbuf_r>
 800a0e4:	9900      	ldr	r1, [sp, #0]
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f7fe fa49 	bl	8008580 <_malloc_r>
 800a0ee:	b948      	cbnz	r0, 800a104 <__smakebuf_r+0x44>
 800a0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f4:	059a      	lsls	r2, r3, #22
 800a0f6:	d4ef      	bmi.n	800a0d8 <__smakebuf_r+0x18>
 800a0f8:	f023 0303 	bic.w	r3, r3, #3
 800a0fc:	f043 0302 	orr.w	r3, r3, #2
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	e7e3      	b.n	800a0cc <__smakebuf_r+0xc>
 800a104:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <__smakebuf_r+0x7c>)
 800a106:	62b3      	str	r3, [r6, #40]	; 0x28
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	6020      	str	r0, [r4, #0]
 800a10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	9b00      	ldr	r3, [sp, #0]
 800a114:	6120      	str	r0, [r4, #16]
 800a116:	6163      	str	r3, [r4, #20]
 800a118:	9b01      	ldr	r3, [sp, #4]
 800a11a:	b15b      	cbz	r3, 800a134 <__smakebuf_r+0x74>
 800a11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a120:	4630      	mov	r0, r6
 800a122:	f000 fe0f 	bl	800ad44 <_isatty_r>
 800a126:	b128      	cbz	r0, 800a134 <__smakebuf_r+0x74>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f023 0303 	bic.w	r3, r3, #3
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	431d      	orrs	r5, r3
 800a138:	81a5      	strh	r5, [r4, #12]
 800a13a:	e7cd      	b.n	800a0d8 <__smakebuf_r+0x18>
 800a13c:	08009f11 	.word	0x08009f11

0800a140 <memchr>:
 800a140:	b510      	push	{r4, lr}
 800a142:	b2c9      	uxtb	r1, r1
 800a144:	4402      	add	r2, r0
 800a146:	4290      	cmp	r0, r2
 800a148:	4603      	mov	r3, r0
 800a14a:	d101      	bne.n	800a150 <memchr+0x10>
 800a14c:	2300      	movs	r3, #0
 800a14e:	e003      	b.n	800a158 <memchr+0x18>
 800a150:	781c      	ldrb	r4, [r3, #0]
 800a152:	3001      	adds	r0, #1
 800a154:	428c      	cmp	r4, r1
 800a156:	d1f6      	bne.n	800a146 <memchr+0x6>
 800a158:	4618      	mov	r0, r3
 800a15a:	bd10      	pop	{r4, pc}

0800a15c <__malloc_lock>:
 800a15c:	4770      	bx	lr

0800a15e <__malloc_unlock>:
 800a15e:	4770      	bx	lr

0800a160 <_Balloc>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a164:	4604      	mov	r4, r0
 800a166:	460e      	mov	r6, r1
 800a168:	b93d      	cbnz	r5, 800a17a <_Balloc+0x1a>
 800a16a:	2010      	movs	r0, #16
 800a16c:	f7fe f998 	bl	80084a0 <malloc>
 800a170:	6260      	str	r0, [r4, #36]	; 0x24
 800a172:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a176:	6005      	str	r5, [r0, #0]
 800a178:	60c5      	str	r5, [r0, #12]
 800a17a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a17c:	68eb      	ldr	r3, [r5, #12]
 800a17e:	b183      	cbz	r3, 800a1a2 <_Balloc+0x42>
 800a180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a188:	b9b8      	cbnz	r0, 800a1ba <_Balloc+0x5a>
 800a18a:	2101      	movs	r1, #1
 800a18c:	fa01 f506 	lsl.w	r5, r1, r6
 800a190:	1d6a      	adds	r2, r5, #5
 800a192:	0092      	lsls	r2, r2, #2
 800a194:	4620      	mov	r0, r4
 800a196:	f000 fabe 	bl	800a716 <_calloc_r>
 800a19a:	b160      	cbz	r0, 800a1b6 <_Balloc+0x56>
 800a19c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a1a0:	e00e      	b.n	800a1c0 <_Balloc+0x60>
 800a1a2:	2221      	movs	r2, #33	; 0x21
 800a1a4:	2104      	movs	r1, #4
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fab5 	bl	800a716 <_calloc_r>
 800a1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ae:	60e8      	str	r0, [r5, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e4      	bne.n	800a180 <_Balloc+0x20>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	6802      	ldr	r2, [r0, #0]
 800a1bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1c6:	e7f7      	b.n	800a1b8 <_Balloc+0x58>

0800a1c8 <_Bfree>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	b93c      	cbnz	r4, 800a1e2 <_Bfree+0x1a>
 800a1d2:	2010      	movs	r0, #16
 800a1d4:	f7fe f964 	bl	80084a0 <malloc>
 800a1d8:	6270      	str	r0, [r6, #36]	; 0x24
 800a1da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1de:	6004      	str	r4, [r0, #0]
 800a1e0:	60c4      	str	r4, [r0, #12]
 800a1e2:	b13d      	cbz	r5, 800a1f4 <_Bfree+0x2c>
 800a1e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a1e6:	686a      	ldr	r2, [r5, #4]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1ee:	6029      	str	r1, [r5, #0]
 800a1f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}

0800a1f6 <__multadd>:
 800a1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fa:	461f      	mov	r7, r3
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	2300      	movs	r3, #0
 800a202:	690d      	ldr	r5, [r1, #16]
 800a204:	f101 0c14 	add.w	ip, r1, #20
 800a208:	f8dc 0000 	ldr.w	r0, [ip]
 800a20c:	3301      	adds	r3, #1
 800a20e:	b281      	uxth	r1, r0
 800a210:	fb02 7101 	mla	r1, r2, r1, r7
 800a214:	0c00      	lsrs	r0, r0, #16
 800a216:	0c0f      	lsrs	r7, r1, #16
 800a218:	fb02 7000 	mla	r0, r2, r0, r7
 800a21c:	b289      	uxth	r1, r1
 800a21e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a222:	429d      	cmp	r5, r3
 800a224:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a228:	f84c 1b04 	str.w	r1, [ip], #4
 800a22c:	dcec      	bgt.n	800a208 <__multadd+0x12>
 800a22e:	b1d7      	cbz	r7, 800a266 <__multadd+0x70>
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	42ab      	cmp	r3, r5
 800a234:	dc12      	bgt.n	800a25c <__multadd+0x66>
 800a236:	6861      	ldr	r1, [r4, #4]
 800a238:	4630      	mov	r0, r6
 800a23a:	3101      	adds	r1, #1
 800a23c:	f7ff ff90 	bl	800a160 <_Balloc>
 800a240:	4680      	mov	r8, r0
 800a242:	6922      	ldr	r2, [r4, #16]
 800a244:	f104 010c 	add.w	r1, r4, #12
 800a248:	3202      	adds	r2, #2
 800a24a:	0092      	lsls	r2, r2, #2
 800a24c:	300c      	adds	r0, #12
 800a24e:	f7fe f937 	bl	80084c0 <memcpy>
 800a252:	4621      	mov	r1, r4
 800a254:	4630      	mov	r0, r6
 800a256:	f7ff ffb7 	bl	800a1c8 <_Bfree>
 800a25a:	4644      	mov	r4, r8
 800a25c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a260:	3501      	adds	r5, #1
 800a262:	615f      	str	r7, [r3, #20]
 800a264:	6125      	str	r5, [r4, #16]
 800a266:	4620      	mov	r0, r4
 800a268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a26c <__hi0bits>:
 800a26c:	0c02      	lsrs	r2, r0, #16
 800a26e:	0412      	lsls	r2, r2, #16
 800a270:	4603      	mov	r3, r0
 800a272:	b9b2      	cbnz	r2, 800a2a2 <__hi0bits+0x36>
 800a274:	0403      	lsls	r3, r0, #16
 800a276:	2010      	movs	r0, #16
 800a278:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a27c:	bf04      	itt	eq
 800a27e:	021b      	lsleq	r3, r3, #8
 800a280:	3008      	addeq	r0, #8
 800a282:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a286:	bf04      	itt	eq
 800a288:	011b      	lsleq	r3, r3, #4
 800a28a:	3004      	addeq	r0, #4
 800a28c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a290:	bf04      	itt	eq
 800a292:	009b      	lsleq	r3, r3, #2
 800a294:	3002      	addeq	r0, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	db06      	blt.n	800a2a8 <__hi0bits+0x3c>
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	d503      	bpl.n	800a2a6 <__hi0bits+0x3a>
 800a29e:	3001      	adds	r0, #1
 800a2a0:	4770      	bx	lr
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	e7e8      	b.n	800a278 <__hi0bits+0xc>
 800a2a6:	2020      	movs	r0, #32
 800a2a8:	4770      	bx	lr

0800a2aa <__lo0bits>:
 800a2aa:	6803      	ldr	r3, [r0, #0]
 800a2ac:	4601      	mov	r1, r0
 800a2ae:	f013 0207 	ands.w	r2, r3, #7
 800a2b2:	d00b      	beq.n	800a2cc <__lo0bits+0x22>
 800a2b4:	07da      	lsls	r2, r3, #31
 800a2b6:	d423      	bmi.n	800a300 <__lo0bits+0x56>
 800a2b8:	0798      	lsls	r0, r3, #30
 800a2ba:	bf49      	itett	mi
 800a2bc:	085b      	lsrmi	r3, r3, #1
 800a2be:	089b      	lsrpl	r3, r3, #2
 800a2c0:	2001      	movmi	r0, #1
 800a2c2:	600b      	strmi	r3, [r1, #0]
 800a2c4:	bf5c      	itt	pl
 800a2c6:	600b      	strpl	r3, [r1, #0]
 800a2c8:	2002      	movpl	r0, #2
 800a2ca:	4770      	bx	lr
 800a2cc:	b298      	uxth	r0, r3
 800a2ce:	b9a8      	cbnz	r0, 800a2fc <__lo0bits+0x52>
 800a2d0:	2010      	movs	r0, #16
 800a2d2:	0c1b      	lsrs	r3, r3, #16
 800a2d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a2d8:	bf04      	itt	eq
 800a2da:	0a1b      	lsreq	r3, r3, #8
 800a2dc:	3008      	addeq	r0, #8
 800a2de:	071a      	lsls	r2, r3, #28
 800a2e0:	bf04      	itt	eq
 800a2e2:	091b      	lsreq	r3, r3, #4
 800a2e4:	3004      	addeq	r0, #4
 800a2e6:	079a      	lsls	r2, r3, #30
 800a2e8:	bf04      	itt	eq
 800a2ea:	089b      	lsreq	r3, r3, #2
 800a2ec:	3002      	addeq	r0, #2
 800a2ee:	07da      	lsls	r2, r3, #31
 800a2f0:	d402      	bmi.n	800a2f8 <__lo0bits+0x4e>
 800a2f2:	085b      	lsrs	r3, r3, #1
 800a2f4:	d006      	beq.n	800a304 <__lo0bits+0x5a>
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	600b      	str	r3, [r1, #0]
 800a2fa:	4770      	bx	lr
 800a2fc:	4610      	mov	r0, r2
 800a2fe:	e7e9      	b.n	800a2d4 <__lo0bits+0x2a>
 800a300:	2000      	movs	r0, #0
 800a302:	4770      	bx	lr
 800a304:	2020      	movs	r0, #32
 800a306:	4770      	bx	lr

0800a308 <__i2b>:
 800a308:	b510      	push	{r4, lr}
 800a30a:	460c      	mov	r4, r1
 800a30c:	2101      	movs	r1, #1
 800a30e:	f7ff ff27 	bl	800a160 <_Balloc>
 800a312:	2201      	movs	r2, #1
 800a314:	6144      	str	r4, [r0, #20]
 800a316:	6102      	str	r2, [r0, #16]
 800a318:	bd10      	pop	{r4, pc}

0800a31a <__multiply>:
 800a31a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31e:	4614      	mov	r4, r2
 800a320:	690a      	ldr	r2, [r1, #16]
 800a322:	6923      	ldr	r3, [r4, #16]
 800a324:	4688      	mov	r8, r1
 800a326:	429a      	cmp	r2, r3
 800a328:	bfbe      	ittt	lt
 800a32a:	460b      	movlt	r3, r1
 800a32c:	46a0      	movlt	r8, r4
 800a32e:	461c      	movlt	r4, r3
 800a330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a334:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a338:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a33c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a340:	eb07 0609 	add.w	r6, r7, r9
 800a344:	42b3      	cmp	r3, r6
 800a346:	bfb8      	it	lt
 800a348:	3101      	addlt	r1, #1
 800a34a:	f7ff ff09 	bl	800a160 <_Balloc>
 800a34e:	f100 0514 	add.w	r5, r0, #20
 800a352:	462b      	mov	r3, r5
 800a354:	2200      	movs	r2, #0
 800a356:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a35a:	4573      	cmp	r3, lr
 800a35c:	d316      	bcc.n	800a38c <__multiply+0x72>
 800a35e:	f104 0214 	add.w	r2, r4, #20
 800a362:	f108 0114 	add.w	r1, r8, #20
 800a366:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a36a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	9b00      	ldr	r3, [sp, #0]
 800a372:	9201      	str	r2, [sp, #4]
 800a374:	4293      	cmp	r3, r2
 800a376:	d80c      	bhi.n	800a392 <__multiply+0x78>
 800a378:	2e00      	cmp	r6, #0
 800a37a:	dd03      	ble.n	800a384 <__multiply+0x6a>
 800a37c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a380:	2b00      	cmp	r3, #0
 800a382:	d05d      	beq.n	800a440 <__multiply+0x126>
 800a384:	6106      	str	r6, [r0, #16]
 800a386:	b003      	add	sp, #12
 800a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38c:	f843 2b04 	str.w	r2, [r3], #4
 800a390:	e7e3      	b.n	800a35a <__multiply+0x40>
 800a392:	f8b2 b000 	ldrh.w	fp, [r2]
 800a396:	f1bb 0f00 	cmp.w	fp, #0
 800a39a:	d023      	beq.n	800a3e4 <__multiply+0xca>
 800a39c:	4689      	mov	r9, r1
 800a39e:	46ac      	mov	ip, r5
 800a3a0:	f04f 0800 	mov.w	r8, #0
 800a3a4:	f859 4b04 	ldr.w	r4, [r9], #4
 800a3a8:	f8dc a000 	ldr.w	sl, [ip]
 800a3ac:	b2a3      	uxth	r3, r4
 800a3ae:	fa1f fa8a 	uxth.w	sl, sl
 800a3b2:	fb0b a303 	mla	r3, fp, r3, sl
 800a3b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a3ba:	f8dc 4000 	ldr.w	r4, [ip]
 800a3be:	4443      	add	r3, r8
 800a3c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3c4:	fb0b 840a 	mla	r4, fp, sl, r8
 800a3c8:	46e2      	mov	sl, ip
 800a3ca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a3d4:	454f      	cmp	r7, r9
 800a3d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a3da:	f84a 3b04 	str.w	r3, [sl], #4
 800a3de:	d82b      	bhi.n	800a438 <__multiply+0x11e>
 800a3e0:	f8cc 8004 	str.w	r8, [ip, #4]
 800a3e4:	9b01      	ldr	r3, [sp, #4]
 800a3e6:	3204      	adds	r2, #4
 800a3e8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a3ec:	f1ba 0f00 	cmp.w	sl, #0
 800a3f0:	d020      	beq.n	800a434 <__multiply+0x11a>
 800a3f2:	4689      	mov	r9, r1
 800a3f4:	46a8      	mov	r8, r5
 800a3f6:	f04f 0b00 	mov.w	fp, #0
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	f8b9 c000 	ldrh.w	ip, [r9]
 800a400:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a404:	b29b      	uxth	r3, r3
 800a406:	fb0a 440c 	mla	r4, sl, ip, r4
 800a40a:	46c4      	mov	ip, r8
 800a40c:	445c      	add	r4, fp
 800a40e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a412:	f84c 3b04 	str.w	r3, [ip], #4
 800a416:	f859 3b04 	ldr.w	r3, [r9], #4
 800a41a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a41e:	0c1b      	lsrs	r3, r3, #16
 800a420:	fb0a b303 	mla	r3, sl, r3, fp
 800a424:	454f      	cmp	r7, r9
 800a426:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a42a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a42e:	d805      	bhi.n	800a43c <__multiply+0x122>
 800a430:	f8c8 3004 	str.w	r3, [r8, #4]
 800a434:	3504      	adds	r5, #4
 800a436:	e79b      	b.n	800a370 <__multiply+0x56>
 800a438:	46d4      	mov	ip, sl
 800a43a:	e7b3      	b.n	800a3a4 <__multiply+0x8a>
 800a43c:	46e0      	mov	r8, ip
 800a43e:	e7dd      	b.n	800a3fc <__multiply+0xe2>
 800a440:	3e01      	subs	r6, #1
 800a442:	e799      	b.n	800a378 <__multiply+0x5e>

0800a444 <__pow5mult>:
 800a444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a448:	4615      	mov	r5, r2
 800a44a:	f012 0203 	ands.w	r2, r2, #3
 800a44e:	4606      	mov	r6, r0
 800a450:	460f      	mov	r7, r1
 800a452:	d007      	beq.n	800a464 <__pow5mult+0x20>
 800a454:	4c21      	ldr	r4, [pc, #132]	; (800a4dc <__pow5mult+0x98>)
 800a456:	3a01      	subs	r2, #1
 800a458:	2300      	movs	r3, #0
 800a45a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a45e:	f7ff feca 	bl	800a1f6 <__multadd>
 800a462:	4607      	mov	r7, r0
 800a464:	10ad      	asrs	r5, r5, #2
 800a466:	d035      	beq.n	800a4d4 <__pow5mult+0x90>
 800a468:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a46a:	b93c      	cbnz	r4, 800a47c <__pow5mult+0x38>
 800a46c:	2010      	movs	r0, #16
 800a46e:	f7fe f817 	bl	80084a0 <malloc>
 800a472:	6270      	str	r0, [r6, #36]	; 0x24
 800a474:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a478:	6004      	str	r4, [r0, #0]
 800a47a:	60c4      	str	r4, [r0, #12]
 800a47c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a480:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a484:	b94c      	cbnz	r4, 800a49a <__pow5mult+0x56>
 800a486:	f240 2171 	movw	r1, #625	; 0x271
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ff3c 	bl	800a308 <__i2b>
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	f8c8 0008 	str.w	r0, [r8, #8]
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	f04f 0800 	mov.w	r8, #0
 800a49e:	07eb      	lsls	r3, r5, #31
 800a4a0:	d50a      	bpl.n	800a4b8 <__pow5mult+0x74>
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7ff ff37 	bl	800a31a <__multiply>
 800a4ac:	4681      	mov	r9, r0
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7ff fe89 	bl	800a1c8 <_Bfree>
 800a4b6:	464f      	mov	r7, r9
 800a4b8:	106d      	asrs	r5, r5, #1
 800a4ba:	d00b      	beq.n	800a4d4 <__pow5mult+0x90>
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	b938      	cbnz	r0, 800a4d0 <__pow5mult+0x8c>
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4621      	mov	r1, r4
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff ff28 	bl	800a31a <__multiply>
 800a4ca:	6020      	str	r0, [r4, #0]
 800a4cc:	f8c0 8000 	str.w	r8, [r0]
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	e7e4      	b.n	800a49e <__pow5mult+0x5a>
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4da:	bf00      	nop
 800a4dc:	0800b1c8 	.word	0x0800b1c8

0800a4e0 <__lshift>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	460c      	mov	r4, r1
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	4616      	mov	r6, r2
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4f0:	eb0a 0903 	add.w	r9, sl, r3
 800a4f4:	6849      	ldr	r1, [r1, #4]
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	f109 0501 	add.w	r5, r9, #1
 800a4fc:	42ab      	cmp	r3, r5
 800a4fe:	db32      	blt.n	800a566 <__lshift+0x86>
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff fe2d 	bl	800a160 <_Balloc>
 800a506:	2300      	movs	r3, #0
 800a508:	4680      	mov	r8, r0
 800a50a:	461a      	mov	r2, r3
 800a50c:	f100 0114 	add.w	r1, r0, #20
 800a510:	4553      	cmp	r3, sl
 800a512:	db2b      	blt.n	800a56c <__lshift+0x8c>
 800a514:	6920      	ldr	r0, [r4, #16]
 800a516:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a51a:	f104 0314 	add.w	r3, r4, #20
 800a51e:	f016 021f 	ands.w	r2, r6, #31
 800a522:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a526:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a52a:	d025      	beq.n	800a578 <__lshift+0x98>
 800a52c:	2000      	movs	r0, #0
 800a52e:	f1c2 0e20 	rsb	lr, r2, #32
 800a532:	468a      	mov	sl, r1
 800a534:	681e      	ldr	r6, [r3, #0]
 800a536:	4096      	lsls	r6, r2
 800a538:	4330      	orrs	r0, r6
 800a53a:	f84a 0b04 	str.w	r0, [sl], #4
 800a53e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a542:	459c      	cmp	ip, r3
 800a544:	fa20 f00e 	lsr.w	r0, r0, lr
 800a548:	d814      	bhi.n	800a574 <__lshift+0x94>
 800a54a:	6048      	str	r0, [r1, #4]
 800a54c:	b108      	cbz	r0, 800a552 <__lshift+0x72>
 800a54e:	f109 0502 	add.w	r5, r9, #2
 800a552:	3d01      	subs	r5, #1
 800a554:	4638      	mov	r0, r7
 800a556:	f8c8 5010 	str.w	r5, [r8, #16]
 800a55a:	4621      	mov	r1, r4
 800a55c:	f7ff fe34 	bl	800a1c8 <_Bfree>
 800a560:	4640      	mov	r0, r8
 800a562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a566:	3101      	adds	r1, #1
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	e7c7      	b.n	800a4fc <__lshift+0x1c>
 800a56c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a570:	3301      	adds	r3, #1
 800a572:	e7cd      	b.n	800a510 <__lshift+0x30>
 800a574:	4651      	mov	r1, sl
 800a576:	e7dc      	b.n	800a532 <__lshift+0x52>
 800a578:	3904      	subs	r1, #4
 800a57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a57e:	459c      	cmp	ip, r3
 800a580:	f841 2f04 	str.w	r2, [r1, #4]!
 800a584:	d8f9      	bhi.n	800a57a <__lshift+0x9a>
 800a586:	e7e4      	b.n	800a552 <__lshift+0x72>

0800a588 <__mcmp>:
 800a588:	6903      	ldr	r3, [r0, #16]
 800a58a:	690a      	ldr	r2, [r1, #16]
 800a58c:	b530      	push	{r4, r5, lr}
 800a58e:	1a9b      	subs	r3, r3, r2
 800a590:	d10c      	bne.n	800a5ac <__mcmp+0x24>
 800a592:	0092      	lsls	r2, r2, #2
 800a594:	3014      	adds	r0, #20
 800a596:	3114      	adds	r1, #20
 800a598:	1884      	adds	r4, r0, r2
 800a59a:	4411      	add	r1, r2
 800a59c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5a4:	4295      	cmp	r5, r2
 800a5a6:	d003      	beq.n	800a5b0 <__mcmp+0x28>
 800a5a8:	d305      	bcc.n	800a5b6 <__mcmp+0x2e>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	bd30      	pop	{r4, r5, pc}
 800a5b0:	42a0      	cmp	r0, r4
 800a5b2:	d3f3      	bcc.n	800a59c <__mcmp+0x14>
 800a5b4:	e7fa      	b.n	800a5ac <__mcmp+0x24>
 800a5b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5ba:	e7f7      	b.n	800a5ac <__mcmp+0x24>

0800a5bc <__mdiff>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	460d      	mov	r5, r1
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	4614      	mov	r4, r2
 800a5ca:	f7ff ffdd 	bl	800a588 <__mcmp>
 800a5ce:	1e06      	subs	r6, r0, #0
 800a5d0:	d108      	bne.n	800a5e4 <__mdiff+0x28>
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff fdc3 	bl	800a160 <_Balloc>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e4:	bfa4      	itt	ge
 800a5e6:	4623      	movge	r3, r4
 800a5e8:	462c      	movge	r4, r5
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	6861      	ldr	r1, [r4, #4]
 800a5ee:	bfa6      	itte	ge
 800a5f0:	461d      	movge	r5, r3
 800a5f2:	2600      	movge	r6, #0
 800a5f4:	2601      	movlt	r6, #1
 800a5f6:	f7ff fdb3 	bl	800a160 <_Balloc>
 800a5fa:	f04f 0e00 	mov.w	lr, #0
 800a5fe:	60c6      	str	r6, [r0, #12]
 800a600:	692b      	ldr	r3, [r5, #16]
 800a602:	6926      	ldr	r6, [r4, #16]
 800a604:	f104 0214 	add.w	r2, r4, #20
 800a608:	f105 0914 	add.w	r9, r5, #20
 800a60c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a610:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a614:	f100 0114 	add.w	r1, r0, #20
 800a618:	f852 ab04 	ldr.w	sl, [r2], #4
 800a61c:	f859 5b04 	ldr.w	r5, [r9], #4
 800a620:	fa1f f38a 	uxth.w	r3, sl
 800a624:	4473      	add	r3, lr
 800a626:	b2ac      	uxth	r4, r5
 800a628:	1b1b      	subs	r3, r3, r4
 800a62a:	0c2c      	lsrs	r4, r5, #16
 800a62c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a630:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a634:	b29b      	uxth	r3, r3
 800a636:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a63a:	45c8      	cmp	r8, r9
 800a63c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a640:	4694      	mov	ip, r2
 800a642:	f841 4b04 	str.w	r4, [r1], #4
 800a646:	d8e7      	bhi.n	800a618 <__mdiff+0x5c>
 800a648:	45bc      	cmp	ip, r7
 800a64a:	d304      	bcc.n	800a656 <__mdiff+0x9a>
 800a64c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a650:	b183      	cbz	r3, 800a674 <__mdiff+0xb8>
 800a652:	6106      	str	r6, [r0, #16]
 800a654:	e7c4      	b.n	800a5e0 <__mdiff+0x24>
 800a656:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a65a:	b2a2      	uxth	r2, r4
 800a65c:	4472      	add	r2, lr
 800a65e:	1413      	asrs	r3, r2, #16
 800a660:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a664:	b292      	uxth	r2, r2
 800a666:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a66a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a66e:	f841 2b04 	str.w	r2, [r1], #4
 800a672:	e7e9      	b.n	800a648 <__mdiff+0x8c>
 800a674:	3e01      	subs	r6, #1
 800a676:	e7e9      	b.n	800a64c <__mdiff+0x90>

0800a678 <__d2b>:
 800a678:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a67c:	461c      	mov	r4, r3
 800a67e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a682:	2101      	movs	r1, #1
 800a684:	4690      	mov	r8, r2
 800a686:	f7ff fd6b 	bl	800a160 <_Balloc>
 800a68a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a68e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a692:	4607      	mov	r7, r0
 800a694:	bb34      	cbnz	r4, 800a6e4 <__d2b+0x6c>
 800a696:	9201      	str	r2, [sp, #4]
 800a698:	f1b8 0200 	subs.w	r2, r8, #0
 800a69c:	d027      	beq.n	800a6ee <__d2b+0x76>
 800a69e:	a802      	add	r0, sp, #8
 800a6a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a6a4:	f7ff fe01 	bl	800a2aa <__lo0bits>
 800a6a8:	9900      	ldr	r1, [sp, #0]
 800a6aa:	b1f0      	cbz	r0, 800a6ea <__d2b+0x72>
 800a6ac:	9a01      	ldr	r2, [sp, #4]
 800a6ae:	f1c0 0320 	rsb	r3, r0, #32
 800a6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	40c2      	lsrs	r2, r0
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	9201      	str	r2, [sp, #4]
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf14      	ite	ne
 800a6c4:	2102      	movne	r1, #2
 800a6c6:	2101      	moveq	r1, #1
 800a6c8:	61bb      	str	r3, [r7, #24]
 800a6ca:	6139      	str	r1, [r7, #16]
 800a6cc:	b1c4      	cbz	r4, 800a700 <__d2b+0x88>
 800a6ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a6d2:	4404      	add	r4, r0
 800a6d4:	6034      	str	r4, [r6, #0]
 800a6d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6da:	6028      	str	r0, [r5, #0]
 800a6dc:	4638      	mov	r0, r7
 800a6de:	b002      	add	sp, #8
 800a6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a6e8:	e7d5      	b.n	800a696 <__d2b+0x1e>
 800a6ea:	6179      	str	r1, [r7, #20]
 800a6ec:	e7e7      	b.n	800a6be <__d2b+0x46>
 800a6ee:	a801      	add	r0, sp, #4
 800a6f0:	f7ff fddb 	bl	800a2aa <__lo0bits>
 800a6f4:	2101      	movs	r1, #1
 800a6f6:	9b01      	ldr	r3, [sp, #4]
 800a6f8:	6139      	str	r1, [r7, #16]
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	3020      	adds	r0, #32
 800a6fe:	e7e5      	b.n	800a6cc <__d2b+0x54>
 800a700:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a704:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a708:	6030      	str	r0, [r6, #0]
 800a70a:	6918      	ldr	r0, [r3, #16]
 800a70c:	f7ff fdae 	bl	800a26c <__hi0bits>
 800a710:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a714:	e7e1      	b.n	800a6da <__d2b+0x62>

0800a716 <_calloc_r>:
 800a716:	b538      	push	{r3, r4, r5, lr}
 800a718:	fb02 f401 	mul.w	r4, r2, r1
 800a71c:	4621      	mov	r1, r4
 800a71e:	f7fd ff2f 	bl	8008580 <_malloc_r>
 800a722:	4605      	mov	r5, r0
 800a724:	b118      	cbz	r0, 800a72e <_calloc_r+0x18>
 800a726:	4622      	mov	r2, r4
 800a728:	2100      	movs	r1, #0
 800a72a:	f7fd fed4 	bl	80084d6 <memset>
 800a72e:	4628      	mov	r0, r5
 800a730:	bd38      	pop	{r3, r4, r5, pc}

0800a732 <__ssputs_r>:
 800a732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a736:	688e      	ldr	r6, [r1, #8]
 800a738:	4682      	mov	sl, r0
 800a73a:	429e      	cmp	r6, r3
 800a73c:	460c      	mov	r4, r1
 800a73e:	4690      	mov	r8, r2
 800a740:	4699      	mov	r9, r3
 800a742:	d837      	bhi.n	800a7b4 <__ssputs_r+0x82>
 800a744:	898a      	ldrh	r2, [r1, #12]
 800a746:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a74a:	d031      	beq.n	800a7b0 <__ssputs_r+0x7e>
 800a74c:	2302      	movs	r3, #2
 800a74e:	6825      	ldr	r5, [r4, #0]
 800a750:	6909      	ldr	r1, [r1, #16]
 800a752:	1a6f      	subs	r7, r5, r1
 800a754:	6965      	ldr	r5, [r4, #20]
 800a756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a75a:	fb95 f5f3 	sdiv	r5, r5, r3
 800a75e:	f109 0301 	add.w	r3, r9, #1
 800a762:	443b      	add	r3, r7
 800a764:	429d      	cmp	r5, r3
 800a766:	bf38      	it	cc
 800a768:	461d      	movcc	r5, r3
 800a76a:	0553      	lsls	r3, r2, #21
 800a76c:	d530      	bpl.n	800a7d0 <__ssputs_r+0x9e>
 800a76e:	4629      	mov	r1, r5
 800a770:	f7fd ff06 	bl	8008580 <_malloc_r>
 800a774:	4606      	mov	r6, r0
 800a776:	b950      	cbnz	r0, 800a78e <__ssputs_r+0x5c>
 800a778:	230c      	movs	r3, #12
 800a77a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a77e:	f8ca 3000 	str.w	r3, [sl]
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78e:	463a      	mov	r2, r7
 800a790:	6921      	ldr	r1, [r4, #16]
 800a792:	f7fd fe95 	bl	80084c0 <memcpy>
 800a796:	89a3      	ldrh	r3, [r4, #12]
 800a798:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	81a3      	strh	r3, [r4, #12]
 800a7a2:	6126      	str	r6, [r4, #16]
 800a7a4:	443e      	add	r6, r7
 800a7a6:	6026      	str	r6, [r4, #0]
 800a7a8:	464e      	mov	r6, r9
 800a7aa:	6165      	str	r5, [r4, #20]
 800a7ac:	1bed      	subs	r5, r5, r7
 800a7ae:	60a5      	str	r5, [r4, #8]
 800a7b0:	454e      	cmp	r6, r9
 800a7b2:	d900      	bls.n	800a7b6 <__ssputs_r+0x84>
 800a7b4:	464e      	mov	r6, r9
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	4641      	mov	r1, r8
 800a7ba:	6820      	ldr	r0, [r4, #0]
 800a7bc:	f000 faf6 	bl	800adac <memmove>
 800a7c0:	68a3      	ldr	r3, [r4, #8]
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	1b9b      	subs	r3, r3, r6
 800a7c6:	60a3      	str	r3, [r4, #8]
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	441e      	add	r6, r3
 800a7cc:	6026      	str	r6, [r4, #0]
 800a7ce:	e7dc      	b.n	800a78a <__ssputs_r+0x58>
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	f000 fb04 	bl	800adde <_realloc_r>
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d1e2      	bne.n	800a7a2 <__ssputs_r+0x70>
 800a7dc:	6921      	ldr	r1, [r4, #16]
 800a7de:	4650      	mov	r0, sl
 800a7e0:	f7fd fe82 	bl	80084e8 <_free_r>
 800a7e4:	e7c8      	b.n	800a778 <__ssputs_r+0x46>
	...

0800a7e8 <_svfiprintf_r>:
 800a7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	461d      	mov	r5, r3
 800a7ee:	898b      	ldrh	r3, [r1, #12]
 800a7f0:	b09d      	sub	sp, #116	; 0x74
 800a7f2:	061f      	lsls	r7, r3, #24
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	d50f      	bpl.n	800a81c <_svfiprintf_r+0x34>
 800a7fc:	690b      	ldr	r3, [r1, #16]
 800a7fe:	b96b      	cbnz	r3, 800a81c <_svfiprintf_r+0x34>
 800a800:	2140      	movs	r1, #64	; 0x40
 800a802:	f7fd febd 	bl	8008580 <_malloc_r>
 800a806:	6020      	str	r0, [r4, #0]
 800a808:	6120      	str	r0, [r4, #16]
 800a80a:	b928      	cbnz	r0, 800a818 <_svfiprintf_r+0x30>
 800a80c:	230c      	movs	r3, #12
 800a80e:	f8c8 3000 	str.w	r3, [r8]
 800a812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a816:	e0c8      	b.n	800a9aa <_svfiprintf_r+0x1c2>
 800a818:	2340      	movs	r3, #64	; 0x40
 800a81a:	6163      	str	r3, [r4, #20]
 800a81c:	2300      	movs	r3, #0
 800a81e:	9309      	str	r3, [sp, #36]	; 0x24
 800a820:	2320      	movs	r3, #32
 800a822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a826:	2330      	movs	r3, #48	; 0x30
 800a828:	f04f 0b01 	mov.w	fp, #1
 800a82c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a830:	9503      	str	r5, [sp, #12]
 800a832:	4637      	mov	r7, r6
 800a834:	463d      	mov	r5, r7
 800a836:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a83a:	b10b      	cbz	r3, 800a840 <_svfiprintf_r+0x58>
 800a83c:	2b25      	cmp	r3, #37	; 0x25
 800a83e:	d13e      	bne.n	800a8be <_svfiprintf_r+0xd6>
 800a840:	ebb7 0a06 	subs.w	sl, r7, r6
 800a844:	d00b      	beq.n	800a85e <_svfiprintf_r+0x76>
 800a846:	4653      	mov	r3, sl
 800a848:	4632      	mov	r2, r6
 800a84a:	4621      	mov	r1, r4
 800a84c:	4640      	mov	r0, r8
 800a84e:	f7ff ff70 	bl	800a732 <__ssputs_r>
 800a852:	3001      	adds	r0, #1
 800a854:	f000 80a4 	beq.w	800a9a0 <_svfiprintf_r+0x1b8>
 800a858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85a:	4453      	add	r3, sl
 800a85c:	9309      	str	r3, [sp, #36]	; 0x24
 800a85e:	783b      	ldrb	r3, [r7, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 809d 	beq.w	800a9a0 <_svfiprintf_r+0x1b8>
 800a866:	2300      	movs	r3, #0
 800a868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a86c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a870:	9304      	str	r3, [sp, #16]
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a878:	931a      	str	r3, [sp, #104]	; 0x68
 800a87a:	462f      	mov	r7, r5
 800a87c:	2205      	movs	r2, #5
 800a87e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a882:	4850      	ldr	r0, [pc, #320]	; (800a9c4 <_svfiprintf_r+0x1dc>)
 800a884:	f7ff fc5c 	bl	800a140 <memchr>
 800a888:	9b04      	ldr	r3, [sp, #16]
 800a88a:	b9d0      	cbnz	r0, 800a8c2 <_svfiprintf_r+0xda>
 800a88c:	06d9      	lsls	r1, r3, #27
 800a88e:	bf44      	itt	mi
 800a890:	2220      	movmi	r2, #32
 800a892:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a896:	071a      	lsls	r2, r3, #28
 800a898:	bf44      	itt	mi
 800a89a:	222b      	movmi	r2, #43	; 0x2b
 800a89c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8a0:	782a      	ldrb	r2, [r5, #0]
 800a8a2:	2a2a      	cmp	r2, #42	; 0x2a
 800a8a4:	d015      	beq.n	800a8d2 <_svfiprintf_r+0xea>
 800a8a6:	462f      	mov	r7, r5
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	250a      	movs	r5, #10
 800a8ac:	9a07      	ldr	r2, [sp, #28]
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8b4:	3b30      	subs	r3, #48	; 0x30
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	d94d      	bls.n	800a956 <_svfiprintf_r+0x16e>
 800a8ba:	b1b8      	cbz	r0, 800a8ec <_svfiprintf_r+0x104>
 800a8bc:	e00f      	b.n	800a8de <_svfiprintf_r+0xf6>
 800a8be:	462f      	mov	r7, r5
 800a8c0:	e7b8      	b.n	800a834 <_svfiprintf_r+0x4c>
 800a8c2:	4a40      	ldr	r2, [pc, #256]	; (800a9c4 <_svfiprintf_r+0x1dc>)
 800a8c4:	463d      	mov	r5, r7
 800a8c6:	1a80      	subs	r0, r0, r2
 800a8c8:	fa0b f000 	lsl.w	r0, fp, r0
 800a8cc:	4318      	orrs	r0, r3
 800a8ce:	9004      	str	r0, [sp, #16]
 800a8d0:	e7d3      	b.n	800a87a <_svfiprintf_r+0x92>
 800a8d2:	9a03      	ldr	r2, [sp, #12]
 800a8d4:	1d11      	adds	r1, r2, #4
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	9103      	str	r1, [sp, #12]
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	db01      	blt.n	800a8e2 <_svfiprintf_r+0xfa>
 800a8de:	9207      	str	r2, [sp, #28]
 800a8e0:	e004      	b.n	800a8ec <_svfiprintf_r+0x104>
 800a8e2:	4252      	negs	r2, r2
 800a8e4:	f043 0302 	orr.w	r3, r3, #2
 800a8e8:	9207      	str	r2, [sp, #28]
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	783b      	ldrb	r3, [r7, #0]
 800a8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a8f0:	d10c      	bne.n	800a90c <_svfiprintf_r+0x124>
 800a8f2:	787b      	ldrb	r3, [r7, #1]
 800a8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f6:	d133      	bne.n	800a960 <_svfiprintf_r+0x178>
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	3702      	adds	r7, #2
 800a8fc:	1d1a      	adds	r2, r3, #4
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	9203      	str	r2, [sp, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	bfb8      	it	lt
 800a906:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a90a:	9305      	str	r3, [sp, #20]
 800a90c:	4d2e      	ldr	r5, [pc, #184]	; (800a9c8 <_svfiprintf_r+0x1e0>)
 800a90e:	2203      	movs	r2, #3
 800a910:	7839      	ldrb	r1, [r7, #0]
 800a912:	4628      	mov	r0, r5
 800a914:	f7ff fc14 	bl	800a140 <memchr>
 800a918:	b138      	cbz	r0, 800a92a <_svfiprintf_r+0x142>
 800a91a:	2340      	movs	r3, #64	; 0x40
 800a91c:	1b40      	subs	r0, r0, r5
 800a91e:	fa03 f000 	lsl.w	r0, r3, r0
 800a922:	9b04      	ldr	r3, [sp, #16]
 800a924:	3701      	adds	r7, #1
 800a926:	4303      	orrs	r3, r0
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	7839      	ldrb	r1, [r7, #0]
 800a92c:	2206      	movs	r2, #6
 800a92e:	4827      	ldr	r0, [pc, #156]	; (800a9cc <_svfiprintf_r+0x1e4>)
 800a930:	1c7e      	adds	r6, r7, #1
 800a932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a936:	f7ff fc03 	bl	800a140 <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d038      	beq.n	800a9b0 <_svfiprintf_r+0x1c8>
 800a93e:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <_svfiprintf_r+0x1e8>)
 800a940:	bb13      	cbnz	r3, 800a988 <_svfiprintf_r+0x1a0>
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	3307      	adds	r3, #7
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	3308      	adds	r3, #8
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a950:	444b      	add	r3, r9
 800a952:	9309      	str	r3, [sp, #36]	; 0x24
 800a954:	e76d      	b.n	800a832 <_svfiprintf_r+0x4a>
 800a956:	fb05 3202 	mla	r2, r5, r2, r3
 800a95a:	2001      	movs	r0, #1
 800a95c:	460f      	mov	r7, r1
 800a95e:	e7a6      	b.n	800a8ae <_svfiprintf_r+0xc6>
 800a960:	2300      	movs	r3, #0
 800a962:	250a      	movs	r5, #10
 800a964:	4619      	mov	r1, r3
 800a966:	3701      	adds	r7, #1
 800a968:	9305      	str	r3, [sp, #20]
 800a96a:	4638      	mov	r0, r7
 800a96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a970:	3a30      	subs	r2, #48	; 0x30
 800a972:	2a09      	cmp	r2, #9
 800a974:	d903      	bls.n	800a97e <_svfiprintf_r+0x196>
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0c8      	beq.n	800a90c <_svfiprintf_r+0x124>
 800a97a:	9105      	str	r1, [sp, #20]
 800a97c:	e7c6      	b.n	800a90c <_svfiprintf_r+0x124>
 800a97e:	fb05 2101 	mla	r1, r5, r1, r2
 800a982:	2301      	movs	r3, #1
 800a984:	4607      	mov	r7, r0
 800a986:	e7f0      	b.n	800a96a <_svfiprintf_r+0x182>
 800a988:	ab03      	add	r3, sp, #12
 800a98a:	9300      	str	r3, [sp, #0]
 800a98c:	4622      	mov	r2, r4
 800a98e:	4b11      	ldr	r3, [pc, #68]	; (800a9d4 <_svfiprintf_r+0x1ec>)
 800a990:	a904      	add	r1, sp, #16
 800a992:	4640      	mov	r0, r8
 800a994:	f7fd fee0 	bl	8008758 <_printf_float>
 800a998:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a99c:	4681      	mov	r9, r0
 800a99e:	d1d6      	bne.n	800a94e <_svfiprintf_r+0x166>
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	065b      	lsls	r3, r3, #25
 800a9a4:	f53f af35 	bmi.w	800a812 <_svfiprintf_r+0x2a>
 800a9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9aa:	b01d      	add	sp, #116	; 0x74
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b0:	ab03      	add	r3, sp, #12
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	4b07      	ldr	r3, [pc, #28]	; (800a9d4 <_svfiprintf_r+0x1ec>)
 800a9b8:	a904      	add	r1, sp, #16
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7fe f978 	bl	8008cb0 <_printf_i>
 800a9c0:	e7ea      	b.n	800a998 <_svfiprintf_r+0x1b0>
 800a9c2:	bf00      	nop
 800a9c4:	0800b1d4 	.word	0x0800b1d4
 800a9c8:	0800b1da 	.word	0x0800b1da
 800a9cc:	0800b1de 	.word	0x0800b1de
 800a9d0:	08008759 	.word	0x08008759
 800a9d4:	0800a733 	.word	0x0800a733

0800a9d8 <__sfputc_r>:
 800a9d8:	6893      	ldr	r3, [r2, #8]
 800a9da:	b410      	push	{r4}
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	6093      	str	r3, [r2, #8]
 800a9e2:	da07      	bge.n	800a9f4 <__sfputc_r+0x1c>
 800a9e4:	6994      	ldr	r4, [r2, #24]
 800a9e6:	42a3      	cmp	r3, r4
 800a9e8:	db01      	blt.n	800a9ee <__sfputc_r+0x16>
 800a9ea:	290a      	cmp	r1, #10
 800a9ec:	d102      	bne.n	800a9f4 <__sfputc_r+0x1c>
 800a9ee:	bc10      	pop	{r4}
 800a9f0:	f7fe bab8 	b.w	8008f64 <__swbuf_r>
 800a9f4:	6813      	ldr	r3, [r2, #0]
 800a9f6:	1c58      	adds	r0, r3, #1
 800a9f8:	6010      	str	r0, [r2, #0]
 800a9fa:	7019      	strb	r1, [r3, #0]
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	bc10      	pop	{r4}
 800aa00:	4770      	bx	lr

0800aa02 <__sfputs_r>:
 800aa02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	4614      	mov	r4, r2
 800aa0a:	18d5      	adds	r5, r2, r3
 800aa0c:	42ac      	cmp	r4, r5
 800aa0e:	d101      	bne.n	800aa14 <__sfputs_r+0x12>
 800aa10:	2000      	movs	r0, #0
 800aa12:	e007      	b.n	800aa24 <__sfputs_r+0x22>
 800aa14:	463a      	mov	r2, r7
 800aa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	f7ff ffdc 	bl	800a9d8 <__sfputc_r>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d1f3      	bne.n	800aa0c <__sfputs_r+0xa>
 800aa24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa28 <_vfiprintf_r>:
 800aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	b09d      	sub	sp, #116	; 0x74
 800aa30:	4617      	mov	r7, r2
 800aa32:	461d      	mov	r5, r3
 800aa34:	4606      	mov	r6, r0
 800aa36:	b118      	cbz	r0, 800aa40 <_vfiprintf_r+0x18>
 800aa38:	6983      	ldr	r3, [r0, #24]
 800aa3a:	b90b      	cbnz	r3, 800aa40 <_vfiprintf_r+0x18>
 800aa3c:	f7ff fa84 	bl	8009f48 <__sinit>
 800aa40:	4b7c      	ldr	r3, [pc, #496]	; (800ac34 <_vfiprintf_r+0x20c>)
 800aa42:	429c      	cmp	r4, r3
 800aa44:	d158      	bne.n	800aaf8 <_vfiprintf_r+0xd0>
 800aa46:	6874      	ldr	r4, [r6, #4]
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	0718      	lsls	r0, r3, #28
 800aa4c:	d55e      	bpl.n	800ab0c <_vfiprintf_r+0xe4>
 800aa4e:	6923      	ldr	r3, [r4, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d05b      	beq.n	800ab0c <_vfiprintf_r+0xe4>
 800aa54:	2300      	movs	r3, #0
 800aa56:	9309      	str	r3, [sp, #36]	; 0x24
 800aa58:	2320      	movs	r3, #32
 800aa5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa5e:	2330      	movs	r3, #48	; 0x30
 800aa60:	f04f 0b01 	mov.w	fp, #1
 800aa64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa68:	9503      	str	r5, [sp, #12]
 800aa6a:	46b8      	mov	r8, r7
 800aa6c:	4645      	mov	r5, r8
 800aa6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa72:	b10b      	cbz	r3, 800aa78 <_vfiprintf_r+0x50>
 800aa74:	2b25      	cmp	r3, #37	; 0x25
 800aa76:	d154      	bne.n	800ab22 <_vfiprintf_r+0xfa>
 800aa78:	ebb8 0a07 	subs.w	sl, r8, r7
 800aa7c:	d00b      	beq.n	800aa96 <_vfiprintf_r+0x6e>
 800aa7e:	4653      	mov	r3, sl
 800aa80:	463a      	mov	r2, r7
 800aa82:	4621      	mov	r1, r4
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7ff ffbc 	bl	800aa02 <__sfputs_r>
 800aa8a:	3001      	adds	r0, #1
 800aa8c:	f000 80c2 	beq.w	800ac14 <_vfiprintf_r+0x1ec>
 800aa90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa92:	4453      	add	r3, sl
 800aa94:	9309      	str	r3, [sp, #36]	; 0x24
 800aa96:	f898 3000 	ldrb.w	r3, [r8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 80ba 	beq.w	800ac14 <_vfiprintf_r+0x1ec>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aaa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	9307      	str	r3, [sp, #28]
 800aaae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab2:	931a      	str	r3, [sp, #104]	; 0x68
 800aab4:	46a8      	mov	r8, r5
 800aab6:	2205      	movs	r2, #5
 800aab8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800aabc:	485e      	ldr	r0, [pc, #376]	; (800ac38 <_vfiprintf_r+0x210>)
 800aabe:	f7ff fb3f 	bl	800a140 <memchr>
 800aac2:	9b04      	ldr	r3, [sp, #16]
 800aac4:	bb78      	cbnz	r0, 800ab26 <_vfiprintf_r+0xfe>
 800aac6:	06d9      	lsls	r1, r3, #27
 800aac8:	bf44      	itt	mi
 800aaca:	2220      	movmi	r2, #32
 800aacc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aad0:	071a      	lsls	r2, r3, #28
 800aad2:	bf44      	itt	mi
 800aad4:	222b      	movmi	r2, #43	; 0x2b
 800aad6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aada:	782a      	ldrb	r2, [r5, #0]
 800aadc:	2a2a      	cmp	r2, #42	; 0x2a
 800aade:	d02a      	beq.n	800ab36 <_vfiprintf_r+0x10e>
 800aae0:	46a8      	mov	r8, r5
 800aae2:	2000      	movs	r0, #0
 800aae4:	250a      	movs	r5, #10
 800aae6:	9a07      	ldr	r2, [sp, #28]
 800aae8:	4641      	mov	r1, r8
 800aaea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaee:	3b30      	subs	r3, #48	; 0x30
 800aaf0:	2b09      	cmp	r3, #9
 800aaf2:	d969      	bls.n	800abc8 <_vfiprintf_r+0x1a0>
 800aaf4:	b360      	cbz	r0, 800ab50 <_vfiprintf_r+0x128>
 800aaf6:	e024      	b.n	800ab42 <_vfiprintf_r+0x11a>
 800aaf8:	4b50      	ldr	r3, [pc, #320]	; (800ac3c <_vfiprintf_r+0x214>)
 800aafa:	429c      	cmp	r4, r3
 800aafc:	d101      	bne.n	800ab02 <_vfiprintf_r+0xda>
 800aafe:	68b4      	ldr	r4, [r6, #8]
 800ab00:	e7a2      	b.n	800aa48 <_vfiprintf_r+0x20>
 800ab02:	4b4f      	ldr	r3, [pc, #316]	; (800ac40 <_vfiprintf_r+0x218>)
 800ab04:	429c      	cmp	r4, r3
 800ab06:	bf08      	it	eq
 800ab08:	68f4      	ldreq	r4, [r6, #12]
 800ab0a:	e79d      	b.n	800aa48 <_vfiprintf_r+0x20>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7fe fa7a 	bl	8009008 <__swsetup_r>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d09d      	beq.n	800aa54 <_vfiprintf_r+0x2c>
 800ab18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab1c:	b01d      	add	sp, #116	; 0x74
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab22:	46a8      	mov	r8, r5
 800ab24:	e7a2      	b.n	800aa6c <_vfiprintf_r+0x44>
 800ab26:	4a44      	ldr	r2, [pc, #272]	; (800ac38 <_vfiprintf_r+0x210>)
 800ab28:	4645      	mov	r5, r8
 800ab2a:	1a80      	subs	r0, r0, r2
 800ab2c:	fa0b f000 	lsl.w	r0, fp, r0
 800ab30:	4318      	orrs	r0, r3
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	e7be      	b.n	800aab4 <_vfiprintf_r+0x8c>
 800ab36:	9a03      	ldr	r2, [sp, #12]
 800ab38:	1d11      	adds	r1, r2, #4
 800ab3a:	6812      	ldr	r2, [r2, #0]
 800ab3c:	9103      	str	r1, [sp, #12]
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	db01      	blt.n	800ab46 <_vfiprintf_r+0x11e>
 800ab42:	9207      	str	r2, [sp, #28]
 800ab44:	e004      	b.n	800ab50 <_vfiprintf_r+0x128>
 800ab46:	4252      	negs	r2, r2
 800ab48:	f043 0302 	orr.w	r3, r3, #2
 800ab4c:	9207      	str	r2, [sp, #28]
 800ab4e:	9304      	str	r3, [sp, #16]
 800ab50:	f898 3000 	ldrb.w	r3, [r8]
 800ab54:	2b2e      	cmp	r3, #46	; 0x2e
 800ab56:	d10e      	bne.n	800ab76 <_vfiprintf_r+0x14e>
 800ab58:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ab5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5e:	d138      	bne.n	800abd2 <_vfiprintf_r+0x1aa>
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	f108 0802 	add.w	r8, r8, #2
 800ab66:	1d1a      	adds	r2, r3, #4
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	9203      	str	r2, [sp, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	bfb8      	it	lt
 800ab70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab74:	9305      	str	r3, [sp, #20]
 800ab76:	4d33      	ldr	r5, [pc, #204]	; (800ac44 <_vfiprintf_r+0x21c>)
 800ab78:	2203      	movs	r2, #3
 800ab7a:	f898 1000 	ldrb.w	r1, [r8]
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f7ff fade 	bl	800a140 <memchr>
 800ab84:	b140      	cbz	r0, 800ab98 <_vfiprintf_r+0x170>
 800ab86:	2340      	movs	r3, #64	; 0x40
 800ab88:	1b40      	subs	r0, r0, r5
 800ab8a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	f108 0801 	add.w	r8, r8, #1
 800ab94:	4303      	orrs	r3, r0
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	f898 1000 	ldrb.w	r1, [r8]
 800ab9c:	2206      	movs	r2, #6
 800ab9e:	482a      	ldr	r0, [pc, #168]	; (800ac48 <_vfiprintf_r+0x220>)
 800aba0:	f108 0701 	add.w	r7, r8, #1
 800aba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba8:	f7ff faca 	bl	800a140 <memchr>
 800abac:	2800      	cmp	r0, #0
 800abae:	d037      	beq.n	800ac20 <_vfiprintf_r+0x1f8>
 800abb0:	4b26      	ldr	r3, [pc, #152]	; (800ac4c <_vfiprintf_r+0x224>)
 800abb2:	bb1b      	cbnz	r3, 800abfc <_vfiprintf_r+0x1d4>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	3307      	adds	r3, #7
 800abb8:	f023 0307 	bic.w	r3, r3, #7
 800abbc:	3308      	adds	r3, #8
 800abbe:	9303      	str	r3, [sp, #12]
 800abc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc2:	444b      	add	r3, r9
 800abc4:	9309      	str	r3, [sp, #36]	; 0x24
 800abc6:	e750      	b.n	800aa6a <_vfiprintf_r+0x42>
 800abc8:	fb05 3202 	mla	r2, r5, r2, r3
 800abcc:	2001      	movs	r0, #1
 800abce:	4688      	mov	r8, r1
 800abd0:	e78a      	b.n	800aae8 <_vfiprintf_r+0xc0>
 800abd2:	2300      	movs	r3, #0
 800abd4:	250a      	movs	r5, #10
 800abd6:	4619      	mov	r1, r3
 800abd8:	f108 0801 	add.w	r8, r8, #1
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	4640      	mov	r0, r8
 800abe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe4:	3a30      	subs	r2, #48	; 0x30
 800abe6:	2a09      	cmp	r2, #9
 800abe8:	d903      	bls.n	800abf2 <_vfiprintf_r+0x1ca>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0c3      	beq.n	800ab76 <_vfiprintf_r+0x14e>
 800abee:	9105      	str	r1, [sp, #20]
 800abf0:	e7c1      	b.n	800ab76 <_vfiprintf_r+0x14e>
 800abf2:	fb05 2101 	mla	r1, r5, r1, r2
 800abf6:	2301      	movs	r3, #1
 800abf8:	4680      	mov	r8, r0
 800abfa:	e7f0      	b.n	800abde <_vfiprintf_r+0x1b6>
 800abfc:	ab03      	add	r3, sp, #12
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	4622      	mov	r2, r4
 800ac02:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <_vfiprintf_r+0x228>)
 800ac04:	a904      	add	r1, sp, #16
 800ac06:	4630      	mov	r0, r6
 800ac08:	f7fd fda6 	bl	8008758 <_printf_float>
 800ac0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ac10:	4681      	mov	r9, r0
 800ac12:	d1d5      	bne.n	800abc0 <_vfiprintf_r+0x198>
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	065b      	lsls	r3, r3, #25
 800ac18:	f53f af7e 	bmi.w	800ab18 <_vfiprintf_r+0xf0>
 800ac1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac1e:	e77d      	b.n	800ab1c <_vfiprintf_r+0xf4>
 800ac20:	ab03      	add	r3, sp, #12
 800ac22:	9300      	str	r3, [sp, #0]
 800ac24:	4622      	mov	r2, r4
 800ac26:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <_vfiprintf_r+0x228>)
 800ac28:	a904      	add	r1, sp, #16
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f7fe f840 	bl	8008cb0 <_printf_i>
 800ac30:	e7ec      	b.n	800ac0c <_vfiprintf_r+0x1e4>
 800ac32:	bf00      	nop
 800ac34:	0800b098 	.word	0x0800b098
 800ac38:	0800b1d4 	.word	0x0800b1d4
 800ac3c:	0800b0b8 	.word	0x0800b0b8
 800ac40:	0800b078 	.word	0x0800b078
 800ac44:	0800b1da 	.word	0x0800b1da
 800ac48:	0800b1de 	.word	0x0800b1de
 800ac4c:	08008759 	.word	0x08008759
 800ac50:	0800aa03 	.word	0x0800aa03

0800ac54 <__sread>:
 800ac54:	b510      	push	{r4, lr}
 800ac56:	460c      	mov	r4, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	f000 f8e6 	bl	800ae2c <_read_r>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	bfab      	itete	ge
 800ac64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac66:	89a3      	ldrhlt	r3, [r4, #12]
 800ac68:	181b      	addge	r3, r3, r0
 800ac6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac6e:	bfac      	ite	ge
 800ac70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac72:	81a3      	strhlt	r3, [r4, #12]
 800ac74:	bd10      	pop	{r4, pc}

0800ac76 <__swrite>:
 800ac76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7a:	461f      	mov	r7, r3
 800ac7c:	898b      	ldrh	r3, [r1, #12]
 800ac7e:	4605      	mov	r5, r0
 800ac80:	05db      	lsls	r3, r3, #23
 800ac82:	460c      	mov	r4, r1
 800ac84:	4616      	mov	r6, r2
 800ac86:	d505      	bpl.n	800ac94 <__swrite+0x1e>
 800ac88:	2302      	movs	r3, #2
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	f000 f868 	bl	800ad64 <_lseek_r>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	4632      	mov	r2, r6
 800ac98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac9c:	81a3      	strh	r3, [r4, #12]
 800ac9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aca2:	463b      	mov	r3, r7
 800aca4:	4628      	mov	r0, r5
 800aca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acaa:	f000 b817 	b.w	800acdc <_write_r>

0800acae <__sseek>:
 800acae:	b510      	push	{r4, lr}
 800acb0:	460c      	mov	r4, r1
 800acb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb6:	f000 f855 	bl	800ad64 <_lseek_r>
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	bf15      	itete	ne
 800acc0:	6560      	strne	r0, [r4, #84]	; 0x54
 800acc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acca:	81a3      	strheq	r3, [r4, #12]
 800accc:	bf18      	it	ne
 800acce:	81a3      	strhne	r3, [r4, #12]
 800acd0:	bd10      	pop	{r4, pc}

0800acd2 <__sclose>:
 800acd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd6:	f000 b813 	b.w	800ad00 <_close_r>
	...

0800acdc <_write_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4605      	mov	r5, r0
 800ace0:	4608      	mov	r0, r1
 800ace2:	4611      	mov	r1, r2
 800ace4:	2200      	movs	r2, #0
 800ace6:	4c05      	ldr	r4, [pc, #20]	; (800acfc <_write_r+0x20>)
 800ace8:	6022      	str	r2, [r4, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	f7f7 fb7f 	bl	80023ee <_write>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_write_r+0x1e>
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_write_r+0x1e>
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	200025fc 	.word	0x200025fc

0800ad00 <_close_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	2300      	movs	r3, #0
 800ad04:	4c05      	ldr	r4, [pc, #20]	; (800ad1c <_close_r+0x1c>)
 800ad06:	4605      	mov	r5, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	6023      	str	r3, [r4, #0]
 800ad0c:	f7f8 f84b 	bl	8002da6 <_close>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_close_r+0x1a>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_close_r+0x1a>
 800ad18:	602b      	str	r3, [r5, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	200025fc 	.word	0x200025fc

0800ad20 <_fstat_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	2300      	movs	r3, #0
 800ad24:	4c06      	ldr	r4, [pc, #24]	; (800ad40 <_fstat_r+0x20>)
 800ad26:	4605      	mov	r5, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	f7f8 f845 	bl	8002dbc <_fstat>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	d102      	bne.n	800ad3c <_fstat_r+0x1c>
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	b103      	cbz	r3, 800ad3c <_fstat_r+0x1c>
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	bd38      	pop	{r3, r4, r5, pc}
 800ad3e:	bf00      	nop
 800ad40:	200025fc 	.word	0x200025fc

0800ad44 <_isatty_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	2300      	movs	r3, #0
 800ad48:	4c05      	ldr	r4, [pc, #20]	; (800ad60 <_isatty_r+0x1c>)
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	6023      	str	r3, [r4, #0]
 800ad50:	f7f8 f843 	bl	8002dda <_isatty>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_isatty_r+0x1a>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_isatty_r+0x1a>
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	200025fc 	.word	0x200025fc

0800ad64 <_lseek_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4605      	mov	r5, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4c05      	ldr	r4, [pc, #20]	; (800ad84 <_lseek_r+0x20>)
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f7f8 f83b 	bl	8002dee <_lseek>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_lseek_r+0x1e>
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_lseek_r+0x1e>
 800ad80:	602b      	str	r3, [r5, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	200025fc 	.word	0x200025fc

0800ad88 <__ascii_mbtowc>:
 800ad88:	b082      	sub	sp, #8
 800ad8a:	b901      	cbnz	r1, 800ad8e <__ascii_mbtowc+0x6>
 800ad8c:	a901      	add	r1, sp, #4
 800ad8e:	b142      	cbz	r2, 800ada2 <__ascii_mbtowc+0x1a>
 800ad90:	b14b      	cbz	r3, 800ada6 <__ascii_mbtowc+0x1e>
 800ad92:	7813      	ldrb	r3, [r2, #0]
 800ad94:	600b      	str	r3, [r1, #0]
 800ad96:	7812      	ldrb	r2, [r2, #0]
 800ad98:	1c10      	adds	r0, r2, #0
 800ad9a:	bf18      	it	ne
 800ad9c:	2001      	movne	r0, #1
 800ad9e:	b002      	add	sp, #8
 800ada0:	4770      	bx	lr
 800ada2:	4610      	mov	r0, r2
 800ada4:	e7fb      	b.n	800ad9e <__ascii_mbtowc+0x16>
 800ada6:	f06f 0001 	mvn.w	r0, #1
 800adaa:	e7f8      	b.n	800ad9e <__ascii_mbtowc+0x16>

0800adac <memmove>:
 800adac:	4288      	cmp	r0, r1
 800adae:	b510      	push	{r4, lr}
 800adb0:	eb01 0302 	add.w	r3, r1, r2
 800adb4:	d807      	bhi.n	800adc6 <memmove+0x1a>
 800adb6:	1e42      	subs	r2, r0, #1
 800adb8:	4299      	cmp	r1, r3
 800adba:	d00a      	beq.n	800add2 <memmove+0x26>
 800adbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800adc4:	e7f8      	b.n	800adb8 <memmove+0xc>
 800adc6:	4283      	cmp	r3, r0
 800adc8:	d9f5      	bls.n	800adb6 <memmove+0xa>
 800adca:	1881      	adds	r1, r0, r2
 800adcc:	1ad2      	subs	r2, r2, r3
 800adce:	42d3      	cmn	r3, r2
 800add0:	d100      	bne.n	800add4 <memmove+0x28>
 800add2:	bd10      	pop	{r4, pc}
 800add4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800add8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800addc:	e7f7      	b.n	800adce <memmove+0x22>

0800adde <_realloc_r>:
 800adde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade0:	4607      	mov	r7, r0
 800ade2:	4614      	mov	r4, r2
 800ade4:	460e      	mov	r6, r1
 800ade6:	b921      	cbnz	r1, 800adf2 <_realloc_r+0x14>
 800ade8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adec:	4611      	mov	r1, r2
 800adee:	f7fd bbc7 	b.w	8008580 <_malloc_r>
 800adf2:	b922      	cbnz	r2, 800adfe <_realloc_r+0x20>
 800adf4:	f7fd fb78 	bl	80084e8 <_free_r>
 800adf8:	4625      	mov	r5, r4
 800adfa:	4628      	mov	r0, r5
 800adfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adfe:	f000 f834 	bl	800ae6a <_malloc_usable_size_r>
 800ae02:	42a0      	cmp	r0, r4
 800ae04:	d20f      	bcs.n	800ae26 <_realloc_r+0x48>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4638      	mov	r0, r7
 800ae0a:	f7fd fbb9 	bl	8008580 <_malloc_r>
 800ae0e:	4605      	mov	r5, r0
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d0f2      	beq.n	800adfa <_realloc_r+0x1c>
 800ae14:	4631      	mov	r1, r6
 800ae16:	4622      	mov	r2, r4
 800ae18:	f7fd fb52 	bl	80084c0 <memcpy>
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4638      	mov	r0, r7
 800ae20:	f7fd fb62 	bl	80084e8 <_free_r>
 800ae24:	e7e9      	b.n	800adfa <_realloc_r+0x1c>
 800ae26:	4635      	mov	r5, r6
 800ae28:	e7e7      	b.n	800adfa <_realloc_r+0x1c>
	...

0800ae2c <_read_r>:
 800ae2c:	b538      	push	{r3, r4, r5, lr}
 800ae2e:	4605      	mov	r5, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	4611      	mov	r1, r2
 800ae34:	2200      	movs	r2, #0
 800ae36:	4c05      	ldr	r4, [pc, #20]	; (800ae4c <_read_r+0x20>)
 800ae38:	6022      	str	r2, [r4, #0]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f7f7 ff96 	bl	8002d6c <_read>
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	d102      	bne.n	800ae4a <_read_r+0x1e>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	b103      	cbz	r3, 800ae4a <_read_r+0x1e>
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	bd38      	pop	{r3, r4, r5, pc}
 800ae4c:	200025fc 	.word	0x200025fc

0800ae50 <__ascii_wctomb>:
 800ae50:	b149      	cbz	r1, 800ae66 <__ascii_wctomb+0x16>
 800ae52:	2aff      	cmp	r2, #255	; 0xff
 800ae54:	bf8b      	itete	hi
 800ae56:	238a      	movhi	r3, #138	; 0x8a
 800ae58:	700a      	strbls	r2, [r1, #0]
 800ae5a:	6003      	strhi	r3, [r0, #0]
 800ae5c:	2001      	movls	r0, #1
 800ae5e:	bf88      	it	hi
 800ae60:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ae64:	4770      	bx	lr
 800ae66:	4608      	mov	r0, r1
 800ae68:	4770      	bx	lr

0800ae6a <_malloc_usable_size_r>:
 800ae6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae6e:	1f18      	subs	r0, r3, #4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfbc      	itt	lt
 800ae74:	580b      	ldrlt	r3, [r1, r0]
 800ae76:	18c0      	addlt	r0, r0, r3
 800ae78:	4770      	bx	lr
	...

0800ae7c <_init>:
 800ae7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7e:	bf00      	nop
 800ae80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae82:	bc08      	pop	{r3}
 800ae84:	469e      	mov	lr, r3
 800ae86:	4770      	bx	lr

0800ae88 <_fini>:
 800ae88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8a:	bf00      	nop
 800ae8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8e:	bc08      	pop	{r3}
 800ae90:	469e      	mov	lr, r3
 800ae92:	4770      	bx	lr
